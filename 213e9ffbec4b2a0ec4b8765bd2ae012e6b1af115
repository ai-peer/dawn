{
  "comments": [
    {
      "key": {
        "uuid": "6ce00faa_c68831e5",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-08T08:01:27Z",
      "side": 1,
      "message": "I don\u0027t think the virtuals are needed here because we know the concrete type in ResourceMemoryAllocator. To be 100% we could assert GetD3D12Resource returns null after the invalidate.",
      "revId": "213e9ffbec4b2a0ec4b8765bd2ae012e6b1af115",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c8b0278_d10d1f82",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-08T17:47:20Z",
      "side": 1,
      "message": "I agree that the current code doesn\u0027t strictly need the virtual. \n\nAre you sure common helper which calls Invalidate on a base ResourceMemoryAllocation pointer will never, ever be written in the future? \n\nIf it ever does, then someone will have to track down mysterious memory leaks again. That make me nervous leaving out the virtual keyword.",
      "parentUuid": "6ce00faa_c68831e5",
      "revId": "213e9ffbec4b2a0ec4b8765bd2ae012e6b1af115",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebb0699e_b35ee72e",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-08T19:14:14Z",
      "side": 1,
      "message": "We can still have the desired behavior and avoid leaks and future misuse without the virtual.\n\nSince we always call it from the Derived class, we can make ResourceMemoryAllocation::Invalidate a protected member function.\n\nIf someone wants to make a common helper that calls Invalidate on the base class, at that point they\u0027ll be forced to refactor things and do the virtual stuff.",
      "parentUuid": "0c8b0278_d10d1f82",
      "revId": "213e9ffbec4b2a0ec4b8765bd2ae012e6b1af115",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e468b9d_498e19ac",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-11-08T19:27:33Z",
      "side": 1,
      "message": "+1 to add a check that GetResource is nullptr if allocation gets invalidated.",
      "parentUuid": "ebb0699e_b35ee72e",
      "revId": "213e9ffbec4b2a0ec4b8765bd2ae012e6b1af115",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44626f38_0b778a24",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-08T21:03:15Z",
      "side": 1,
      "message": "@Austin, we can\u0027t make ResourceMemoryAllocation::Invalidate be a protected function because it is called by ResourceMemoryAllocator::Deallocate. ResourceMemoryAllocation is only subclassed by the D3D12 backend.",
      "parentUuid": "1e468b9d_498e19ac",
      "revId": "213e9ffbec4b2a0ec4b8765bd2ae012e6b1af115",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}