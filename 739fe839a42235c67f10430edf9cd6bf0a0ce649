{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d23fb059_7d32d413",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-02T01:37:59Z",
      "side": 1,
      "message": "Patch 41 - 38: address comments \u0026 fixes along the way\nPatch 42: some new tests for multiple getmappedrange\nThanks for the big patch review!",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f89e732d_b5b8a7f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "The logic looks good overall, but the code seems more complex than it should be. I left a lot of comments with suggestion on how to make things simpler. The overall idea is to minimize 1) the amount of noise 2) the amount of mental state to keep while reading functions 3) have some better invariants",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c71db520_ff8b7ca5",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: assigned",
      "range": {
        "startLine": 48,
        "startChar": 24,
        "endLine": 48,
        "endChar": 30
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68761150_5383241c",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 48,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c71db520_ff8b7ca5",
      "range": {
        "startLine": 48,
        "startChar": 24,
        "endLine": 48,
        "endChar": 30
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94546bfe_0b00e1d4",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "We probably need to return null if readHandle\u003d\u003dnullptr and !device alive. Otherwise we deref the null pointer below. Ditto for the writing part.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d6d9df6_c41bb9d6",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 63,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94546bfe_0b00e1d4",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4676e176_27759ccb",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: readHandle",
      "range": {
        "startLine": 66,
        "startChar": 44,
        "endLine": 66,
        "endChar": 55
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9cda66b_faeb86f6",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4676e176_27759ccb",
      "range": {
        "startLine": 66,
        "startChar": 44,
        "endLine": 66,
        "endChar": 55
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebb8fa88_19790945",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: it feels a bit unnecessary that this logic be bundled with the WriteHandle creation since we check descriptor-\u003emappedAtCreation again. Maybe it could be done directly when setting up buffer below which would 1) make code more local 2) avoid introducing local variables (and mental context) 3) keep read and write handle creation completely symmetric.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da059987_54efc0b2",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 99,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "I think changing\nif (descriptor-\u003emappedAtCreation) {\n    isCurrentlyMappedForWriting \u003d true;\n}\nto\nisCurrentlyMappedForWriting \u003d descriptor-\u003emappedAtCreation;\n\ncan make it not checking descriptor-\u003emappedAtCreation again?\n\nhad a if (descriptor-\u003emappedAtCreation) branch now",
      "parentUuid": "ebb8fa88_19790945",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3aca037a_7c069455",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 119,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I worry we might honor alignment constraints of types only by happenstance here but don\u0027t really know how to fix it (what if readHandleLength is 1 and writeHandleLength 4 because it writes a u32, then it gets misaligned)",
      "range": {
        "startLine": 119,
        "startChar": 17,
        "endLine": 119,
        "endChar": 50
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb59e94a_228927ce",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 130,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "Maybe we could set these variables up in MapAsync so that we don\u0027t need handling of mMappedData for reading here, then special case in Unmap() and a difficult interaction with the writeHandle below. mMappedData would be null when the buffer is not mapped.",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 41
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a704b66_24352574",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 130,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "For unmapped getMappedRange we check if buffer is mapped and return nullptr if not.\nWe can move setting of mMappedData and mMapSize to MapAsync (and only set here for mappedAtCreation)\nAustin just suggested to move GetData() from MapAsync to buffer creation. so we only call it once. https://dawn-review.googlesource.com/c/dawn/+/51164/38..42/src/dawn_wire/client/Buffer.cpp#b277\nI think the reason is readHandle and it\u0027s stagingData is lived through out the lifetime of the mapped buffer so it only get set at creation time. And in future we are likely going to merge read/write into one handler for a buffer. The special case is MapRead \u0026 mappedAtCreation where we need to call a readHandle-\u003eGetData at unmap.\nWDYT",
      "parentUuid": "cb59e94a_228927ce",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 41
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6885f97f_647cae62",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 130,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "I\u0027m not sure about the need to optimize calling GetData() once vs. making the flow of code more clear (the \"set mMappedData on unmap of mapped at creation if ...\" is pretty unexpected). Either way seems ok for now if we know we are merging both types of handles in the future.\n\nI still have concerns about mixing serialization code and state-modifying logic. Maybe we could have mappedData declared at the top of the function and modified in the read/writeHandle creation code.",
      "parentUuid": "1a704b66_24352574",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 41
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17ae8fd_5be499be",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-07T20:38:45Z",
      "side": 1,
      "message": "If it helps, I think we could also just remove mMappedData entirely, and instead access it using the handle, always. It\u0027s now a simple getter just like std::vector\u003cT\u003e::data().",
      "parentUuid": "6885f97f_647cae62",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 41
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97308dd5_1f45df9d",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 130,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "I think it should work if replace all mMappedData appearance with mXHandle-\u003eGetData() . The concern would be the mock tests. Not finding a way to ignore just one function yet. and Get(Const)MappedRange() reference it and that is called in a lot of places I think",
      "parentUuid": "b17ae8fd_5be499be",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 41
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae7b61c_381939cb",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-07T22:38:53Z",
      "side": 1,
      "message": "Ah, I missed the thing about changing mMappedData upon unmap of mappedAtCreation for map read buffers. That\u0027s a good reason to set mMappedData in MapAsync as Corentin originally suggested.\n\nWe probably don\u0027t want to remove mMappedData entirely because we need to have a switch statement inside GetConstMappedRange to determine if we want the read or write handle.\n\nFor ignoring mocks, check out MockProcTable::IgnoreAllReleaseCalls as an example. Basically you add an expectation for any number of calls.\nhttps://source.chromium.org/chromium/chromium/src/+/main:out/Debug/gen/third_party/dawn/src/dawn/mock_webgpu.cpp;l\u003d1014;drc\u003d20a144515820179ff476f6386d70f5eba83f152a;bpv\u003d1;bpt\u003d1",
      "parentUuid": "97308dd5_1f45df9d",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 41
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd3812c9_368865dc",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 144,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "This only needs to be set up in the mappedAtCreation case. Basically with the comments above this code could become:\n\n\n\n       // Serialize the buffer creation along with the read/writeHandles if needed.\n       wireClient-\u003eSerializeCommand(\n            cmd, cmd.readHandleCreateInfoLength + cmd.writeHandleCreateInfoLength,\n            [\u0026](SerializeBuffer* serializeBuffer) {\n                if (readHandle !\u003d nullptr) {\n                    char* readHandleBuffer;\n                    WIRE_TRY(\n                        serializeBuffer-\u003eNextN(cmd.readHandleCreateInfoLength, \u0026readHandleBuffer));\n                    // Serialize the ReadHandle into the space after the command.\n                    readHandle-\u003eSerializeCreate(readHandleBuffer);\n                    buffer-\u003emReadHandle \u003d std::move(readHandle);\n                }\n                if (writeHandle !\u003d nullptr) {\n                    char* writeHandleBuffer;\n                    WIRE_TRY(serializeBuffer-\u003eNextN(cmd.writeHandleCreateInfoLength,\n                                                    \u0026writeHandleBuffer));\n                    // Serialize the WriteHandle into the space after the command.\n                    writeHandle-\u003eSerializeCreate(writeHandleBuffer);\n                    buffer-\u003emWriteHandle \u003d std::move(writeHandle);\n                }\n            });\n\n        // This could be moved inside a if (mappedAtCreation) block before the serialization too if there is one. \n        if (mappedAtCreation) {\n            buffer-\u003emMapOffset \u003d 0;\n            buffer-\u003emMappedData \u003d ...;\n            buffer-\u003emMapSize \u003d ...;\n        }\n        \nWhich I think makes the logic much easier to read.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d6504f4_2606bc10",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 144,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd3812c9_368865dc",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "407a9304_83ef5f33",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 204,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I think this early validation isn\u0027t necessary anymore because it was to prevent hitting server validation at [1] which is now removed.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd3b63b1_a216ade3",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 204,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "This still has to be here for buffer destroyed before calling mapAsync/unmap",
      "parentUuid": "407a9304_83ef5f33",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b85b3a1_77a6ef17",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 204,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "[6]",
      "parentUuid": "fd3b63b1_a216ade3",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "485d8544_2b96af76",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: TBH the code will become simple enough that we don\u0027t need to delimitate steps anymore.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1910f1b_67cb82f6",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 215,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "485d8544_2b96af76",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e275e128_0596204e",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 226,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: unnecessary newline probably since this is part of the setup of request.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5ffe9cb_2582ce4e",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 226,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e275e128_0596204e",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "640d2f6c_aae4caeb",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 296,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: break is unnecessary after unreachable.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfa87b69_f633313a",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 296,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "640d2f6c_aae4caeb",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "959823f4_a5a980b4",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 343,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I think this is always the case, otherwise the buffer creation would have done an early out.",
      "range": {
        "startLine": 343,
        "startChar": 28,
        "endLine": 343,
        "endChar": 54
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72f24d71_b9faf2f6",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 343,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "mWriteHandle could be nullptr if buffer is destroyed before unmap. I\u0027ve added a comment.",
      "parentUuid": "959823f4_a5a980b4",
      "range": {
        "startLine": 343,
        "startChar": 28,
        "endLine": 343,
        "endChar": 54
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b93e568_14c2a506",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 371,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "This can be done after the serialization, if (mState \u003d\u003d MappedAtCreation) and the mMappedData could be just set at OnMapAsyncCallback so that we have the guarantee (mMappedData !\u003d nullptr) \u003d\u003d (mState \u003d\u003d Unmapped)",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "105a240e_858f7a0c",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 371,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b93e568_14c2a506",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b1f49f4_2bdb0073",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 408,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: destroy",
      "range": {
        "startLine": 408,
        "startChar": 42,
        "endLine": 408,
        "endChar": 49
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8e672d8_192ce76b",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 408,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b1f49f4_2bdb0073",
      "range": {
        "startLine": 408,
        "startChar": 42,
        "endLine": 408,
        "endChar": 49
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d95b720_32599c23",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 42
      },
      "lineNbr": 19,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I don\u0027t think there is precedent for using webgpu_cpp.h here. Maybe we could just do WGPUMapMode below? Including webgpu_cpp.h means we have a higher risk of starting to use the C++ objects, which implicitly use dawn_procs, which aren\u0027t linked in the wire.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57489e01_c39d4428",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 42
      },
      "lineNbr": 19,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Back to use an enum class for MapRequestData::type",
      "parentUuid": "4d95b720_32599c23",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17a29952_7bb413ba",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 42
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I think this can be replaced by an enum like:\n\n  enum class State {\n      Unmapped,\n      MappedForRead,\n      MappedForWrite,\n      MappedAtCreation,\n  };",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 49
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da1bd256_c07da436",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 42
      },
      "lineNbr": 92,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "hmm I made some attempt change here seems that with only one state flag we cannot differentiate MapWrite + mappedAtCreation, and mappedAtCreation only here.\nWe destroy writeHandle on unmap only if usage doesn\u0027t include MapWrite and mappedAtCreation is true.",
      "parentUuid": "17a29952_7bb413ba",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 49
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d4650e9_e80ec2c2",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 42
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Ah makes sense. I think it might still be possible to merge mIsMappedRead and mIsMappedWrite with a `MapRequestType mCurrentMapMode` something like that.",
      "parentUuid": "da1bd256_c07da436",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 49
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a56d28a_6b31fece",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 42
      },
      "lineNbr": 92,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-08T19:05:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d4650e9_e80ec2c2",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 49
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f693c0ac_ebcdd4aa",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 42
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: I think we are guaranteed that this is always valid (and ASSERT it in the constructor)\n\nMaybe we should also validate the size + offset doesn\u0027t go out of bounds so that the client can detect incorrect commands from the server.\n\nDo we need to validated deserializePointer is nullptr or should it just be an ASSERT?",
      "range": {
        "startLine": 48,
        "startChar": 80,
        "endLine": 48,
        "endChar": 93
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40666238_b37df2fd",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 42
      },
      "lineNbr": 48,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "serialize buffer is black box to me so i\u0027d like to validate deserializePointer (instead of an ASSERT)\noffset size mSize bound check is added.",
      "parentUuid": "f693c0ac_ebcdd4aa",
      "range": {
        "startLine": 48,
        "startChar": 80,
        "endLine": 48,
        "endChar": 93
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "649f36dd_ebb20465",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 42
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "Maybe we want to ASSERT that offset + size is in bounds, so we need to keep mSize. WDYT?\n\nSame for SerializeDataUpdate and ReadHandleImpl.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c5f7ef5_60f68a5f",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 42
      },
      "lineNbr": 81,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "649f36dd_ebb20465",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c117027_bdf70a22",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "u-nit: I think mappedAtCreation could be folded in the BufferMapWriteState so that it is clear that this check is done only once. Right now it feels a bit magic that for MapWrite buffers the writeHandle will stay alive.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7959cf60_0c8e63f9",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 28,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "I don\u0027t think we can tell the difference between MapWrite usage + mappedAtCreation and mappedAtCreation only with just buffer-\u003emapWriteState. They can be both at a BufferMapWriteState::MappedAtCreation stage (unleass we have BufferMapWriteState::MappedAtCreationOnly and BufferMapWriteState::MappedAtCreationWithWriteUsage, which doesn\u0027t look good)",
      "parentUuid": "5c117027_bdf70a22",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9235e868_4d2cfe34",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Makes sense, ok.",
      "parentUuid": "7959cf60_0c8e63f9",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14bd17fd_61a7a257",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 131,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I think we need to have 1) narrowing checks for uint64_t to size_t, and then 2) a comparison that the sum of both doesn\u0027t overflow in an overflow-safe manner.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ec8014_52bdea32",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 131,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14bd17fd_61a7a257",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4700fd21_4d6b0b8d",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 136,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: These are only used in their respective branches so they can be declared there.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25ad0bb7_3ba180b8",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 136,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4700fd21_4d6b0b8d",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e03ae2_003ff19f",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 138,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "ditto",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c75fd7b5_a406e89b",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 138,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18e03ae2_003ff19f",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4743cfee_3f761aa7",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: We can do this in [3] to coalesce logic. It doesn\u0027t matter if the buffer is an error but we still get the write handle.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "390ba669_13bf4d55",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 140,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4743cfee_3f761aa7",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dfb298c_8bfad35c",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "[3]",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0daea96a_1377ced1",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 160,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4dfb298c_8bfad35c",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61bde0ce_10c1d861",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 161,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: this is already checked just above.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7afeabb_ca9bc2e4",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 161,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61bde0ce_10c1d861",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6027d26_a151222a",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 221,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "We need to validate the narrowing from uint64 to size_t prior to this call.",
      "range": {
        "startLine": 221,
        "startChar": 79,
        "endLine": 221,
        "endChar": 93
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8ea07e6_8260adc8",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 221,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6027d26_a151222a",
      "range": {
        "startLine": 221,
        "startChar": 79,
        "endLine": 221,
        "endChar": 93
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22936717_fa517652",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 258,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: we should probably move state modifying function outside of the serialization to make it more clear they don\u0027t influence it.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ce8e42_b7434555",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 258,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Sorry I don\u0027t get this one. [State modifying function] is?",
      "parentUuid": "22936717_fa517652",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b50b0f1_ba55520a",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 258,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "state modifying code. Basically everything except:\n\n if (isSuccess \u0026\u0026 isRead) {\n      char* readHandleBuffer;\n      WIRE_TRY(serializeBuffer-\u003eNextN(cmd.readDataUpdateInfoLength, \u0026readHandleBuffer));\n      // The in-flight map request returned successfully.\n      bufferData-\u003ereadHandle-\u003eSerializeDataUpdate(readData, data-\u003eoffset, data-\u003esize, readHandleBuffer);\n }\n \nHaving stuff that modifies state in the serialization callback is brittle. For example what happens if we decide to check SerializeCommand to not call the callback when the extra size is 0 (so there is nothing else to serialize)?",
      "parentUuid": "87ce8e42_b7434555",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6843028_df096313",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 258,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T22:51:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b50b0f1_ba55520a",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd2e7485_20ceb27e",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 42
      },
      "lineNbr": 258,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T22:51:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b50b0f1_ba55520a",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61de3755_a2996f2a",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransferService.cpp",
        "patchSetId": 42
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I think we should validate that offset + size is in bounds (and be careful of overflows). Otherwise the client could send us bad data that overflows.\n\n\nMaybe add a comment in the Read/WriteHandle interfaces explaining that the Deserialize* methods must check for OOB, including overflows (because it is not done before calling them)",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73032504_d77fb0c1",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransferService.cpp",
        "patchSetId": 42
      },
      "lineNbr": 57,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61de3755_a2996f2a",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b40cecb1_d52b90c5",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 42
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: This TODO is done.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3270ca7b_f069ed38",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 42
      },
      "lineNbr": 135,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Checking potential OOB, add mDataLength back.",
      "parentUuid": "b40cecb1_d52b90c5",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3ed3d56_7e01b234",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 172,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: comment before the test to explain a bit better what it does.\n\nIsn\u0027t it test at [4] already though?",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f92e0c2_b2d01960",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 172,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "d3ed3d56_7e01b234",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ba7e0bf_a17a6a60",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 178,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "nit: these two can be a single line. Ditto below.",
      "range": {
        "startLine": 177,
        "startChar": 27,
        "endLine": 178,
        "endChar": 17
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e0609c6_4a3d7116",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 178,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ba7e0bf_a17a6a60",
      "range": {
        "startLine": 177,
        "startChar": 27,
        "endLine": 178,
        "endChar": 17
      },
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aabea788_7281b030",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 267,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "[4]",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01d91a44_db23a608",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 267,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aabea788_7281b030",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b68eb8f_750596f1",
        "filename": "src/tests/unittests/wire/WireBufferMappingTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 309,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "[5]",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09fc3376_1eb506ba",
        "filename": "src/tests/unittests/wire/WireBufferMappingTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 309,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b68eb8f_750596f1",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94bad003_a49c130f",
        "filename": "src/tests/unittests/wire/WireBufferMappingTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 608,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "THis is mapped at creation so maybe we should use a usage that\u0027s not map so we better test mappedAtCreation-specific code.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "affdeb8f_8bb9c4b5",
        "filename": "src/tests/unittests/wire/WireBufferMappingTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 608,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-03T01:44:13Z",
      "side": 1,
      "message": "But it unmap and map again so the usage should include a map usage?",
      "parentUuid": "94bad003_a49c130f",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d1b87dc_68ee71cd",
        "filename": "src/tests/unittests/wire/WireBufferMappingTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 608,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Whoops yeah 😊",
      "parentUuid": "affdeb8f_8bb9c4b5",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51b02052_8829590f",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-02T11:16:05Z",
      "side": 1,
      "message": "I didn\u0027t review this file yet.",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae7b3d2e_d7a1aa8e",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "51b02052_8829590f",
      "revId": "739fe839a42235c67f10430edf9cd6bf0a0ce649",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}