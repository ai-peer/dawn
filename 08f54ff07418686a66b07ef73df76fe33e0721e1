{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d700c511_5ec41a71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "Implementation",
      "range": {
        "startLine": 7,
        "startChar": 21,
        "endLine": 7,
        "endChar": 34
      },
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db357da5_22dfa2d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-03-27T08:36:57Z",
      "side": 1,
      "message": "PTAL, this is the 3/3 of \"Refactor Memory Service\"(https://dawn-review.googlesource.com/c/dawn/+/124880)",
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "244f05fd_8ccad772",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "overall LGTM",
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87c1b76c_e8bfbd30",
        "filename": "src/dawn/native/CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 599,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "merge artifact",
      "range": {
        "startLine": 588,
        "startChar": 0,
        "endLine": 599,
        "endChar": 82
      },
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0637a16a_68e308e3",
        "filename": "src/dawn/native/vulkan/external_memory/MemoryService.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "there is no #if CHROMEOS because that is inside #if LINUX, correct? so MemoryServiceImplementationDmaBuf.h is already included?",
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d025adf_fb5b3d9d",
        "filename": "src/dawn/native/vulkan/external_memory/MemoryService.cpp",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "may have missed it but, is this function used? \n\nI think for example, that `ServiceImplementationAHardwareBuffer` already directly calls ServiceImplementationAHardwareBuffer::CheckSupport, and we may not need this version to proxy to it.\n\nIf this function is not needed, then we also don\u0027t need CheckAHardwareBufferSupport, CheckZirconHandleSupport, etc. either\n\n\nEdit: nvm - is it because of `Adapter::SupportsExternalImages` ?",
      "range": {
        "startLine": 36,
        "startChar": 5,
        "endLine": 36,
        "endChar": 26
      },
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3042956e_9081d704",
        "filename": "src/dawn/native/vulkan/external_memory/MemoryService.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "will it compile to also check for CheckOpaqueFDSupport ?\nit\u0027s preferable to include as I think there can be CrOS GPUs that only support opaque fd and not dmabuf",
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9900d31_5a846dd9",
        "filename": "src/dawn/native/vulkan/external_memory/MemoryService.cpp",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "perhaps here, we should check for support before creating the service. That way we avoid the allocation if it will be deleted immediately after.\n\n```\nif (CheckZirconHandleSupport(...)) {\n  mServiceImpls.emplace(..., CreateZirconHandleService(...));\n}\n```\n?\n\nOr alternatively, have CreateZicronHandleService return nullptr if it is not supported.\n\n```\nmemoryServiceHandle \u003d ...;\nif (!memoryServiceHandle) {\n  mServiceImpls.emplace(...);\n}\n```\n?",
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c9030c3_8e176707",
        "filename": "src/dawn/native/vulkan/external_memory/MemoryService.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "why not return it directly after emplacing? emplace returns the iterator where it was inserted",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 50
      },
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f95be66b_7bc7c4bb",
        "filename": "src/dawn/native/vulkan/external_memory/MemoryService.cpp",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-27T21:24:20Z",
      "side": 1,
      "message": "if the image type isn\u0027t supported, then there will be no service found.\n\nInstead, return nullptr, and then in IsSupported implementations, check `service !\u003d nullptr \u0026\u0026 service-\u003eSupportsImportMemory(...)` ?",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 146,
        "endChar": 42
      },
      "revId": "08f54ff07418686a66b07ef73df76fe33e0721e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}