{
  "comments": [
    {
      "key": {
        "uuid": "7ff32d98_72348c47",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:28:24Z",
      "side": 1,
      "message": "I don\u0027t think we should handle readonly storage buffers in this patch because it requires being very carefully around usage validation, and synchronization in the backends (in addition to many more tests). ReadonlyStorageBuffer is in milestone 5 too so we can do it later.\n\nThis patch should focus on splitting the dynamicness from the BindingType. That part of the CL LGTM",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d32e7fb1_dcdc73de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-07-03T01:57:00Z",
      "side": 1,
      "message": "Ack. I think the patch is not touch that deep.But adding an enum and re-use same logic as storage buffer.",
      "parentUuid": "7ff32d98_72348c47",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb23a914_59634d08",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:28:24Z",
      "side": 1,
      "message": "We should also validate that dynamic is false for BindingType for which dynamic doesn\u0027t make sense. And have a validation test for it.",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "558ef41a_20a1d438",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:28:24Z",
      "side": 1,
      "message": "std::bitset\u003ckMaxBindingsPerGroup\u003e",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d42c1d_c8c87ec0",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:28:24Z",
      "side": 1,
      "message": "I\u0027m pretty sure this should be using an UAV and could share the code path with StorageBuffer.",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "173a85a1_fafdbac9",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-02T15:02:14Z",
      "side": 1,
      "message": "Probably, but it looks like SRVs may be more optimal for read-only cases.\nhttps://docs.microsoft.com/en-us/windows/uwp/graphics-concepts/shader-resource-view--srv-\n\n\"Unordered access views are slightly more costly in terms of performance, but allow, for example, a texture to be written to at the same time that it is being read from. This enables the updated texture to be re-used by the graphics pipeline for some other purpose. Shader resource views are for read only use (which is the most common use of resources).\"",
      "parentUuid": "d1d42c1d_c8c87ec0",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b68154e0_fa1fcfdf",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-07-03T01:57:00Z",
      "side": 1,
      "message": "Per my understanding, readonly-storage-buffer should align with readonly ssbo in glsl, am I right? Since spirv-cross will emit readonly buffer as ByteAddressBuffer in HLSL(https://github.com/KhronosGroup/SPIRV-Cross/blob/master/spirv_hlsl.cpp#L1811), I think SRV should work fine and be more optimal.",
      "parentUuid": "173a85a1_fafdbac9",
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1fd8bcb_6b3ee25b",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:28:24Z",
      "side": 1,
      "message": "nit: ++",
      "range": {
        "startLine": 245,
        "startChar": 54,
        "endLine": 245,
        "endChar": 58
      },
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfde03bd_65cc13f8",
        "filename": "src/tests/unittests/validation/CommandBufferValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 251,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:28:24Z",
      "side": 1,
      "message": "note: We should add default to Dawn at some point and this should default to false. Maybe in the meantime we can have DawnHelpers MakeBindGroup not take a lit of dawn::BindGroupLayoutBinding but something a bit like utils::BindingInitializationHelper so that we can have dynamic default to false.",
      "range": {
        "startLine": 251,
        "startChar": 85,
        "endLine": 251,
        "endChar": 91
      },
      "revId": "8fd461ed4c0053f1f316a3e59dc827c584323462",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}