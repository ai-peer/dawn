{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3f16e0e9_36f98571",
        "filename": "src/tint/transform/remove_phonies.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-08T21:10:05Z",
      "side": 1,
      "message": "Doesn\u0027t this unconditionally remove _all_ constant value call statements? How do you know it\u0027s assigned to a phony?",
      "revId": "7474332e9d7f1e5dff6324ecbe5a2a83ebcb10de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a67148da_cf131ee0",
        "filename": "src/tint/transform/remove_phonies.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-08T21:15:21Z",
      "side": 1,
      "message": "You are correct. I believe I mentioned it this morning that the name of this transform may no longer make sense, and this isn\u0027t a phony assignment we\u0027re removing.",
      "parentUuid": "3f16e0e9_36f98571",
      "revId": "7474332e9d7f1e5dff6324ecbe5a2a83ebcb10de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d3f7f7_fc2daa0f",
        "filename": "src/tint/transform/remove_phonies.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-09T02:01:53Z",
      "side": 1,
      "message": "Just to add more clarity: const values are usually materialized by the Resolver, say in assignments to variables, args to functions, etc. But some do not get materialized, like those assigned to phonies, and as the result of call statements (assigned to nothing). We can think of the latter case as a an implicit phony assignment, which is why I think it\u0027s okay to handle this case here.",
      "parentUuid": "a67148da_cf131ee0",
      "revId": "7474332e9d7f1e5dff6324ecbe5a2a83ebcb10de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b3931a_357f7a42",
        "filename": "src/tint/transform/remove_phonies.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-09T13:46:22Z",
      "side": 1,
      "message": "Don\u0027t you also need to check that the call statement doesn\u0027t have side effects? This seems like it\u0027s unconditionally removing any call regardless of if it could have side effects?",
      "parentUuid": "91d3f7f7_fc2daa0f",
      "revId": "7474332e9d7f1e5dff6324ecbe5a2a83ebcb10de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61aa9933_ba810942",
        "filename": "src/tint/transform/remove_phonies.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-09T14:18:29Z",
      "side": 1,
      "message": "The only call statements that can return a constant value are builtins that have no side effects.",
      "parentUuid": "a2b3931a_357f7a42",
      "revId": "7474332e9d7f1e5dff6324ecbe5a2a83ebcb10de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ddb2541_dc142730",
        "filename": "src/tint/transform/remove_phonies.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-08-09T14:26:07Z",
      "side": 1,
      "message": "That is currently true, but what happens if we add a builtin which has side effects and returns a value? Seems safer to check here for side effects which should always be true currently?",
      "parentUuid": "61aa9933_ba810942",
      "revId": "7474332e9d7f1e5dff6324ecbe5a2a83ebcb10de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}