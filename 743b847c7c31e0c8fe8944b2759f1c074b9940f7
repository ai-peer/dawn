{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "016a1670_87e2e5ce",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-04T22:04:17Z",
      "side": 1,
      "message": "Why do we need both? Couldn\u0027t we have `--hlsl-defines` ?",
      "range": {
        "startLine": 123,
        "startChar": 3,
        "endLine": 124,
        "endChar": 28
      },
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9589fb8_c7e85344",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-04T22:07:23Z",
      "side": 1,
      "message": "Maybe a better question: Should this be a more general `--pipeline-overrides` ?\nIt seems like we\u0027re going to need to do something similar for GLSL and MSL.",
      "parentUuid": "016a1670_87e2e5ce",
      "range": {
        "startLine": 123,
        "startChar": 3,
        "endLine": 124,
        "endChar": 28
      },
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51659bb_6a239c6d",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:06:08Z",
      "side": 1,
      "message": "\u003e Why do we need both? Couldn\u0027t we have  --hlsl-defines  ?\n\nMy original implementation used `hlsl-defines`, but then I thought that maybe we\u0027d want to add `msl-defines`, `glsl-defines`, etc. and that ultimately we\u0027d want the flexibility to set any defines for any of the actual compilers. So I split them this way, per HLSL compiler.\n\n\u003e Maybe a better question: Should this be a more general  --pipeline-overrides ?\n\nWe could do that. It\u0027s less flexible in a way, but perhaps better as setting overrides might be different depending on compilers. I\u0027ll go with that.",
      "parentUuid": "d9589fb8_c7e85344",
      "range": {
        "startLine": 123,
        "startChar": 3,
        "endLine": 124,
        "endChar": 28
      },
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6e6112d_b8443545",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T15:15:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e51659bb_6a239c6d",
      "range": {
        "startLine": 123,
        "startChar": 3,
        "endLine": 124,
        "endChar": 28
      },
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0388d3a2_14928f30",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-05T13:34:37Z",
      "side": 1,
      "message": "maybe `split_on_comma`. Took a bit to figure out what `csvs` was.",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08a211e8_2eb23677",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:50:38Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "0388d3a2_14928f30",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04c01eb5_21329b16",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T15:15:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08a211e8_2eb23677",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "873a233d_9978165b",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-05T13:34:37Z",
      "side": 1,
      "message": "Should this trim? What happens if I do `--fxc-defines \"THING1,     THING2\" ?",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77a581ff_6bb48f54",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:50:38Z",
      "side": 1,
      "message": "Maybe, but I think we should keep it simple for now. Same code used for `--transforms`.",
      "parentUuid": "873a233d_9978165b",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b99176e2_5882b6a9",
        "filename": "src/tint/cmd/main.cc",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-05T13:59:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "77a581ff_6bb48f54",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86758373_c7d15104",
        "filename": "src/tint/val/hlsl.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-05T13:34:37Z",
      "side": 1,
      "message": "Do we ever expect there to be a bunch of these such that we\u0027d want to use a `stringstream` here?",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37cbc276_e75fbcde",
        "filename": "src/tint/val/hlsl.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:50:38Z",
      "side": 1,
      "message": "I don\u0027t suspect so. I could call std::string::reserve() with some arbitrary capacity to avoid reallocs, if that\u0027s the concern. Maybe with `defines.size() * 20` or something.",
      "parentUuid": "86758373_c7d15104",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "803a7cb5_c0ee169f",
        "filename": "src/tint/val/hlsl.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-05T13:59:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "37cbc276_e75fbcde",
      "revId": "743b847c7c31e0c8fe8944b2759f1c074b9940f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}