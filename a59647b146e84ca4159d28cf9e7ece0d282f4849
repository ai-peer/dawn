{
  "comments": [
    {
      "key": {
        "uuid": "369cf5c9_8180c747",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-09T09:56:24Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3fd473b_ff928c98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-07-10T16:25:26Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32b5c60a_3bb68d54",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-09T09:56:24Z",
      "side": 1,
      "message": "u-u-u-nit: To avoid overflows in IncrementBindingCounts, maybe we could validate that the number of bindings is less than some ridiculous number? (or at least less than the max possible number of bindings)",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fa0871b_8607d1ed",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-09T15:12:17Z",
      "side": 1,
      "message": "I guess. It can\u0027t really overflow though because there are at most UINT32_MAX entries and we only increment by one.\n\nAnd the other function which I\u0027ll rename to AccumulateBindingCounts can\u0027t overflow either because we first validate the bindGroupLayoutCount \u003c\u003d 4, so we\u0027ll get at most maxBindings * 4 which is something like 624 I think",
      "parentUuid": "32b5c60a_3bb68d54",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5892768c_227a10f3",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T00:47:03Z",
      "side": 1,
      "message": "I didn\u0027t change anything here. Let me know if you\u0027d like me to do a follow-up.",
      "parentUuid": "0fa0871b_8607d1ed",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f7f8974_d70d6080",
        "filename": "src/dawn_native/BindingInfo.cpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-07-10T16:25:26Z",
      "side": 1,
      "message": "Out of curiosity, why \"foo +\u003d 1\" and not \"++foo\"?",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41656c33_bd8bb4d7",
        "filename": "src/dawn_native/BindingInfo.cpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T00:47:03Z",
      "side": 1,
      "message": "No particular reason. I\u0027ve changed them to be ++ now.",
      "parentUuid": "3f7f8974_d70d6080",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f692cce_8456a438",
        "filename": "src/dawn_native/BindingInfo.h",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-09T09:56:24Z",
      "side": 1,
      "message": "nit: Accumulate?",
      "range": {
        "startLine": 72,
        "startChar": 9,
        "endLine": 72,
        "endChar": 18
      },
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d2957f3_4de49f16",
        "filename": "src/dawn_native/BindingInfo.h",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T00:47:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f692cce_8456a438",
      "range": {
        "startLine": 72,
        "startChar": 9,
        "endLine": 72,
        "endChar": 18
      },
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efa260c6_9c794e41",
        "filename": "src/tests/end2end/PipelineLayoutTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-07-10T16:25:26Z",
      "side": 1,
      "message": "uNit \"per stage\" -\u003e \"per-stage\"",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f24b2143_80ea64bb",
        "filename": "src/tests/end2end/PipelineLayoutTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T00:47:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efa260c6_9c794e41",
      "revId": "a59647b146e84ca4159d28cf9e7ece0d282f4849",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}