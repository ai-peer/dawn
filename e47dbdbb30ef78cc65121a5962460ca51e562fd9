{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c3de84a5_666c7b03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T19:20:19Z",
      "side": 1,
      "message": "loko, ptal!",
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03b00769_3537a060",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-11T20:44:36Z",
      "side": 1,
      "message": "Hmm overall LGTM. Not sure if the complexity of the bitfield is really that important? (i.e. maybe 2 bools would have been just fine?), but it\u0027s nice that the destroyed state is it\u0027s own thing now. I assume that eventually with this change, the entire `TextureState` struct will have to be mutex protected for multithread.",
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ef49bd7_16bc180b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-11T20:44:52Z",
      "side": 1,
      "message": "Sorry for the delay!",
      "parentUuid": "c3de84a5_666c7b03",
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7a4525f_551afaf1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T21:23:16Z",
      "side": 1,
      "message": "I think we can make TextureState an atomic. where the top 62 bits are last usage serial and the bottom two bits are these bools",
      "parentUuid": "03b00769_3537a060",
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69521827_b75dcb72",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-11T20:44:36Z",
      "side": 1,
      "message": "nit. The naming is a bit awkward? Maybe something like `SetAccessibility`?",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 86,
        "endChar": 40
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6d5aa8c_337c0f02",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T21:23:16Z",
      "side": 1,
      "message": "I named it \"SetHasAccess\"; same as the var name",
      "parentUuid": "69521827_b75dcb72",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 86,
        "endChar": 40
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8dc9909_60741b90",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 7
      },
      "lineNbr": 142,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-11T20:44:36Z",
      "side": 1,
      "message": "(Unrelated) Hmm.. thinking about this w.r.t multithread destroy/submit... Originally thought that maybe it would mean it becomes an atomic, but the more I think about it, the more it seems like it would have to be a lock because submit has to complete entirely otherwise we race on validation?",
      "range": {
        "startLine": 142,
        "startChar": 8,
        "endLine": 142,
        "endChar": 27
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34aea8bc_3e22f789",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 7
      },
      "lineNbr": 142,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-11T20:44:36Z",
      "side": 1,
      "message": "nit. could we just default initialize these instead of declaring/implementing and explicit ctor? Also maybe a small docstring to make it more explicit what `hasAccess` means?",
      "range": {
        "startLine": 141,
        "startChar": 8,
        "endLine": 142,
        "endChar": 27
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "711a1052_03f910e1",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 7
      },
      "lineNbr": 142,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T21:23:16Z",
      "side": 1,
      "message": "not possible until a later c++20 version; added comments though",
      "parentUuid": "34aea8bc_3e22f789",
      "range": {
        "startLine": 141,
        "startChar": 8,
        "endLine": 142,
        "endChar": 27
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef534f72_0f8460ca",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 7
      },
      "lineNbr": 142,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T21:23:16Z",
      "side": 1,
      "message": "I think this is going to become an atomic with last usage serial bits stored in the upper bits\n\nso submit will atomically:\n - validate destroyed \u0026\u0026 hasAccess\n - set last usage serial to pending serial\n \nend access will atomically:\n - set hasAccess \u003d false\n - fetch and return the serial after which access is ended\n \ndestroy will atomically\n - set destroyed \u003d true\n - fetch and return the last usage serial; enqueue for destruction after it",
      "parentUuid": "e8dc9909_60741b90",
      "range": {
        "startLine": 142,
        "startChar": 8,
        "endLine": 142,
        "endChar": 27
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51acf63e_a3771d90",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1007,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-11T20:44:36Z",
      "side": 1,
      "message": "u-nit. is",
      "range": {
        "startLine": 1007,
        "startChar": 59,
        "endLine": 1007,
        "endChar": 61
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b83e386f_fd06fde0",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1007,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T21:23:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51acf63e_a3771d90",
      "range": {
        "startLine": 1007,
        "startChar": 59,
        "endLine": 1007,
        "endChar": 61
      },
      "revId": "e47dbdbb30ef78cc65121a5962460ca51e562fd9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}