{
  "comments": [
    {
      "key": {
        "uuid": "f35cd817_580c533b",
        "filename": "dawn_wire.json",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "PopErrorScope is always performed in order, so the serial is redundant. It\u0027s good to have it so that we can validate the server does things in order, but we\u0027re missing that validation for now.\n\nAlso making it a uint64_t would be good so it never wraps around (for the validation).",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50820755_cc21fad2",
        "filename": "dawn_wire.json",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-28T14:40:30Z",
      "side": 1,
      "message": "Hm, I guess we had different readings of the doc. My impression is that *nested* error scopes always resolve in order, but because error scopes can contain asychronous operations, non-nested scopes might resolve out of order.\n\nExample:\nsomeFunction() {\n  device.pushErrorScope(...);\n  queue.submit([...]);\n  device.popErrorScope();  // Should resolve after the Queue::Submit finishes on the *GPU*\n\n  device.pushErrorScope(...);\n  // Do nothing. Or anything synchronous on the CPU like some validation\n  device.popErrorScope();  // Will end up resolving before the first error scope.\n}",
      "parentUuid": "f35cd817_580c533b",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbf0ca45_1a98e053",
        "filename": "dawn_wire.json",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T15:02:49Z",
      "side": 1,
      "message": "Because WebGPU is a Web API I think we\u0027ll want to spec the order, and the natural order is first-in first-out. Kai what do you think?",
      "parentUuid": "50820755_cc21fad2",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5597dc79_59d286be",
        "filename": "dawn_wire.json",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T19:55:26Z",
      "side": 1,
      "message": "Kai doesn\u0027t think we should restrict the order in this way and unnecessarily block operations. I guess we should bring it up in the group.",
      "parentUuid": "bbf0ca45_1a98e053",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d5ce93_6bb1f54a",
        "filename": "dawn_wire.json",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-29T23:06:24Z",
      "side": 1,
      "message": "I decided it really doesn\u0027t make sense especially for pipeline creation. Imagine:\n\n push()\n  makeReallyExpensivePipeline()\n pop()\n push()\n  makeCheapPipeline()\n pop()",
      "parentUuid": "5597dc79_59d286be",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b53e11_0cf50273",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "nit: Why is this not inlined like other procs?",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "763ca426_47aeee6d",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-28T14:40:30Z",
      "side": 1,
      "message": "Device is a class, not a struct, and it\u0027s members are private.",
      "parentUuid": "f5b53e11_0cf50273",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3690cec3_88dcfffa",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T15:02:49Z",
      "side": 1,
      "message": "Ah, makes sense. I think it could be a friend if we wanted to. Also the structure you went with makes more sense because all the code related to one feature is close to one another. Maybe we could move stuff in the wire to be like that eventually.",
      "parentUuid": "763ca426_47aeee6d",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "853fd977_e7998b14",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T19:55:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3690cec3_88dcfffa",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "096cd180_250dbf92",
        "filename": "src/dawn_wire/client/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "nit: \u003d {callback, userdata} ?",
      "range": {
        "startLine": 58,
        "startChar": 31,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66ed3450_5548310a",
        "filename": "src/dawn_wire/client/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T19:55:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "096cd180_250dbf92",
      "range": {
        "startLine": 58,
        "startChar": 31,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6a8e8da_527f83a1",
        "filename": "src/dawn_wire/client/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "nit: Why isn\u0027t this in DoPopErrorScopeCallback directly?",
      "range": {
        "startLine": 70,
        "startChar": 17,
        "endLine": 70,
        "endChar": 30
      },
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd9621a8_b25afc07",
        "filename": "src/dawn_wire/client/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-28T14:40:30Z",
      "side": 1,
      "message": "Device is a class, not a struct, and it\u0027s members are private.",
      "parentUuid": "d6a8e8da_527f83a1",
      "range": {
        "startLine": 70,
        "startChar": 17,
        "endLine": 70,
        "endChar": 30
      },
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16efe7f7_9ad63652",
        "filename": "src/dawn_wire/client/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T19:55:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fd9621a8_b25afc07",
      "range": {
        "startLine": 70,
        "startChar": 17,
        "endLine": 70,
        "endChar": 30
      },
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51f96f0c_dbc919ec",
        "filename": "src/dawn_wire/server/Server.h",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "It would be interesting to make it support multiple devices soon because that will be useful for Jiawei\u0027s implementation of adapters and extension requesting.",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1125713_c42d1a54",
        "filename": "src/dawn_wire/server/Server.h",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T19:55:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "51f96f0c_dbc919ec",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1316b7dd_487a8a03",
        "filename": "src/tests/unittests/wire/WireErrorCallbackTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "Do you think we need to validate on the client side that Push/PopErrorScopes are balanced?",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb170d0a_19e4b231",
        "filename": "src/tests/unittests/wire/WireErrorCallbackTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-28T14:40:30Z",
      "side": 1,
      "message": "Wouldn\u0027t we validate that on the server side though? We could ASSERT on the client though.",
      "parentUuid": "1316b7dd_487a8a03",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d54aae2_f76e6135",
        "filename": "src/tests/unittests/wire/WireErrorCallbackTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "For other callbacks we store things in the mock_api object wrapper but you\u0027re doing this manually here to test multiple error scopes?",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4949254_410f1296",
        "filename": "src/tests/unittests/wire/WireErrorCallbackTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-28T14:40:30Z",
      "side": 1,
      "message": "tldr; Yes.\n\nFor the other mocks, each object only has one callback in flight. (because Buffers can\u0027t be mapped before they\u0027re unmapped). For error scopes, you could do:\ndevice.pushErrorScope(...);\ndevice.pushErrorScope(...);\ndevice.pushErrorScope(...);\ndevice.popErrorScope();\ndevice.popErrorScope();\ndevice.popErrorScope();\n\nSo we\u0027d have to store all of them (which is not particularly a problem).\n\nThe problem is that the other mocks do a thing where they say:\napi.CallBufferMapReadAsyncCallback(...) which will call the stored callback with arguments.\n\nHere, there\u0027s multiple callbacks so a helper function like that wouldn\u0027t know which one to call.",
      "parentUuid": "8d54aae2_f76e6135",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17632bc3_f0a946b3",
        "filename": "src/tests/unittests/wire/WireErrorCallbackTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-28T13:54:32Z",
      "side": 1,
      "message": "That can never happen but we can check a client error is produced.",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "731ee94a_f2f24a8b",
        "filename": "src/tests/unittests/wire/WireErrorCallbackTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-28T14:40:30Z",
      "side": 1,
      "message": "See other comment that I think the callbacks can happen out of order.",
      "parentUuid": "17632bc3_f0a946b3",
      "revId": "20cf69626fb6e8b4f4ed17485bfa5be17cabe2ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}