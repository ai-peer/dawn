{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "290113c7_74007807",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-22T23:55:30Z",
      "side": 1,
      "message": "Overall LGTM! Took me a while to convince myself that we couldn\u0027t just do a 0 fill when we create the query, but I assume this could be a problem if we wanted to reuse the same query buffer. Would be a bit concerning if this sort of things happen more than just in the degenerate case since we would be doing a bunch of buffer writes individually... I guess we could consider coalescing the indices if it becomes a problem.",
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe378f4f_e9d73f5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-23T00:39:09Z",
      "side": 1,
      "message": "Yea we could but I hope no one relies on empty queries too much... \n\nbut yes, we can\u0027t do 0 fill because resolving the query will still copy the stale data into the resolved destination buffer.\n\nThe alternative can be to do 0 fill first, then partial resolve based only on the non-empty queries. but it\u0027s roughly the same in terms of 1 full operation and 1 scattered operation.",
      "parentUuid": "290113c7_74007807",
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26d803d9_e2e8627a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-23T06:15:52Z",
      "side": 1,
      "message": "Hao, fyi",
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "343632a5_4d888446",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-03-23T06:56:38Z",
      "side": 1,
      "message": "LGTM",
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4501c7fe_844d85ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-03-23T07:10:27Z",
      "side": 1,
      "message": "submitting with unresolved comment, I think it\u0027s non-critical and we\u0027d like this in the branch",
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bda826da_e7023a0a",
        "filename": "src/dawn/native/metal/CommandBufferMTL.mm",
        "patchSetId": 1
      },
      "lineNbr": 1693,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-22T23:55:30Z",
      "side": 1,
      "message": "I think `std::set::erase` can handle just passing the key? (And it will remove it if it exists?)",
      "range": {
        "startLine": 1693,
        "startChar": 28,
        "endLine": 1693,
        "endChar": 61
      },
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34eabfbe_449a3e9c",
        "filename": "src/dawn/tests/end2end/QueryTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1299,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-22T23:55:30Z",
      "side": 1,
      "message": "Do we need both of these? IIUC, this is giving us coverage on the toggle on platforms that we don\u0027t need the toggle on? Is that necessary?",
      "range": {
        "startLine": 1298,
        "startChar": 22,
        "endLine": 1299,
        "endChar": 85
      },
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c0da9d8_fb76c4f3",
        "filename": "src/dawn/tests/end2end/QueryTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1299,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-23T00:39:09Z",
      "side": 1,
      "message": "verifies it still is correct even if not needed and that it doesn\u0027t go horribly wrong with crashing or validation layers.\nespecially since we have no apple GPU bots now, so we would otherwise have no coverage of the code path.",
      "parentUuid": "34eabfbe_449a3e9c",
      "range": {
        "startLine": 1298,
        "startChar": 22,
        "endLine": 1299,
        "endChar": 85
      },
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "555cb13c_0f038637",
        "filename": "src/dawn/tests/end2end/QueryTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1299,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-23T01:08:21Z",
      "side": 1,
      "message": "Ah, forgot we don\u0027t have Apple GPU bots. sgtm!",
      "parentUuid": "2c0da9d8_fb76c4f3",
      "range": {
        "startLine": 1298,
        "startChar": 22,
        "endLine": 1299,
        "endChar": 85
      },
      "revId": "79d4f326429e36d46e513709d77f6aa3897c4b4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}