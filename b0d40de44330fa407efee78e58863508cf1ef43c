{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ca9fa005_3db3c447",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-07-27T01:57:46Z",
      "side": 1,
      "message": "This is another optimization of saving submits. It\u0027s for import rather that export. I haven\u0027t had a chance to measure the performance data yet, as the WebGPU on ChromeOS is broken again.",
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99958b5f_dcdc2eaa",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-07-27T01:57:46Z",
      "side": 1,
      "message": "This causes:\n```\n  mRecordingContext.used \u003d true;\n```\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp;drc\u003d8d73198aca5f1a83283068298c9bfd79640ca36b;l\u003d254\n\n```\n#0  dawn::native::vulkan::Device::GetPendingRecordingContext ()\n    at ./../../third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp:257\n#1  0x0000556d50c752ef in dawn::native::vulkan::Device::CopyFromStagingToBuffer ()\n    at ./../../third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp:721\n#2  0x0000556d50c3ec06 in dawn::native::QueueBase::WriteBufferImpl ()\n    at ./../../third_party/dawn/src/dawn/native/Queue.cpp:291\n#3  0x0000556d50c3e9e8 in dawn::native::QueueBase::WriteBuffer ()\n    at ./../../third_party/dawn/src/dawn/native/Queue.cpp:268\n#4  0x0000556d50c25afd in dawn::native::ExternalTextureBase::Initialize ()\n    at ./../../third_party/dawn/src/dawn/native/ExternalTexture.cpp:188\n#5  0x0000556d50c25685 in dawn::native::ExternalTextureBase::Create ()\n    at ./../../third_party/dawn/src/dawn/native/ExternalTexture.cpp:111\n#6  0x0000556d50c1d0c1 in dawn::native::DeviceBase::CreateExternalTextureImpl ()\n    at ./../../third_party/dawn/src/dawn/native/Device.cpp:1582\n#7  0x0000556d50c1c2d5 in dawn::native::DeviceBase::APICreateExternalTexture ()\n    at ./../../third_party/dawn/src/dawn/native/Device.cpp:1290\n#8  0x0000556d566b58da in dawn::wire::server::Server::DoDeviceCreateExternalTexture ()\n```\n\nSo it indirectly leads to SubmitPendingCommands on Tick which WebGPU ignites per Dawn command processing.\n\n```\nMaybeError Device::SubmitPendingCommands() {\n    if (!mRecordingContext.used) {\n        return {};\n    }\n    // submit\n    ...\n}\n```\n\n```\n\n#0  dawn::native::vulkan::Device::SubmitPendingCommands ()\n    at ./../../third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp:263\n#1  0x0000556d50c73a22 in dawn::native::vulkan::Device::TickImpl ()\n    at ./../../third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp:208\n#2  0x0000556d50c1c146 in dawn::native::DeviceBase::Tick ()\n    at ./../../third_party/dawn/src/dawn/native/Device.cpp:1254\n#3  0x0000556d50c1bedd in dawn::native::DeviceBase::APITick ()\n    at ./../../third_party/dawn/src/dawn/native/Device.cpp:1236\n```",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "844da9d2_0d664786",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T01:11:27Z",
      "side": 1,
      "message": "I\u0027m not sure the cleanest way to do this without being too intrusive. Perhaps we can have a scoped variable like\n```\nPassiveRecordingContextScope scope(device);\n```\nso you don\u0027t manually have to get and set to restore.\n\nA question though:\nthis CL seems to imply there\u0027s a reasonable amount of time such that Tick() gets called (by Chromium\u0027s PerformPollingWork?) between when an external texture gets created and when it gets used. Do you know why that is?\n\nIn some example code like:\ncontent/test/data/gpu/vc/webgpu_video.js we call importExternalTexture and then queue.submit in the same Javascript task, so there shouldn\u0027t be so much time between them.\n\nEdit: ah, maybe it is the Tick() that occurs inside vulkan::Queue::SubmitImpl?\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/vulkan/QueueVk.cpp;l\u003d49?q\u003dQueueVk. I don\u0027t remember why we have it, but perhaps it\u0027s not needed or can be optimized away.",
      "parentUuid": "99958b5f_dcdc2eaa",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc9e5db_1990a5ed",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-07-28T01:29:45Z",
      "side": 1,
      "message": "```\n    for (let i \u003d 0; i \u003c videos.length; ++i) {\n      if (!videoTextures[i] || videoTextures[i].expired) {\n        videoTextures[i] \u003d\n          device.importExternalTexture(externalTextureDescriptor[i]);\n        totalVideoFrames++;\n      }\n    }\n```\nIt\u0027s due to this loop. The current `importExternalTexture` will be indirectly pumped to submit by next `importExternalTexture` -- \"PerformPollingWork -\u003e Tick\".",
      "parentUuid": "844da9d2_0d664786",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97fff04b_4e2846d5",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T20:38:16Z",
      "side": 1,
      "message": "hm still not sure where PerformPollingWork gets called\n\nIt gets called at the end of WebGPUDecoderImpl::HandleDawnCommands, and when the WebGPU command buffer is descheduled due to other GPU work ongoing.\n\nI don\u0027t see a reason that more calls to importExternalTexture would make PerformPollingWork get called unless:\n - there were very many of them so we ran out of space and flushed commands\n - we\u0027re waiting on work from the raster decoder (perhaps waiting for PaintVideoFrame)\n\nIn both these situations, it seems like there is so much other work going on, it might not be beneficial to delay the vkQueueSubmit. I could be wrong, but it would be helpful to see performance numbers once we have ChromeOS working again.",
      "parentUuid": "4bc9e5db_1990a5ed",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68fbd986_33e350ae",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-07-29T01:02:34Z",
      "side": 1,
      "message": "My understanding is:\n```\nfor each video in total 7x7 videos {\n  1)Renderer: JS calls ImportExternalTexture for video.\n  2)Renderer: C++ runs deviceCreateExternalTxture -- https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/gpu_external_texture.cc;drc\u003d17f7701d0e74a1a73ddb80002a07b5f83245381f;l\u003d288\n  3)GPU: runs WebGPUDecoderImpl::HandleDawnCommands for the devieCeateExternal.\n  4)GPU: calls PerformPollingWork at the end of HandleDawnCommands -- https://source.chromium.org/chromium/chromium/src/+/main:gpu/command_buffer/service/webgpu_decoder_impl.cc;drc\u003ddaed597d580d450d36578c0cc53b4f72d3b507da;l\u003d1474 \n}\n```\nSo PerformPollingWork should gets called in step 4.\nI will try to capture a stacktrace to confirm this.",
      "parentUuid": "97fff04b_4e2846d5",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb0a69c7_26038f25",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-29T08:29:15Z",
      "side": 1,
      "message": "I think what\u0027s happening is that inside importExternalTexture we call AssociateMailbox which implicitly flushes all the Dawn commands to make the reservations etc correctly pipelined.\n\nSo what the decoder sees is:\n\n  for (each importExternalTexture) {\n    HandleDawnCommands\n    AssociateMailbox\n  }\n\nA suggestion I gave Jie in our last meeting is that maybe we could just throttle the performPollingWork done by HandleDawnCommands to run no more often than each 1ms for example. It\u0027s a short-term solution until we have a mechanism where Dawn can signal that some stuff completed, but at least it fixes the issue in the short term.",
      "parentUuid": "68fbd986_33e350ae",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c2321c3_4460abd6",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-05T02:56:33Z",
      "side": 1,
      "message": "I saw a GPU usage drop from 23% to 16% with CL, slightly better than https://chromium-review.googlesource.com/c/chromium/src/+/3809251\n\nWhich direction would you like to go?",
      "parentUuid": "cb0a69c7_26038f25",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4561988_d91c8a06",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-07T12:07:19Z",
      "side": 1,
      "message": "TBH the other one is more general and less hacky so IMHO it would be better. But the 2% difference is a bit sad. Do you still see a lot of tiny submits being done or is the difference something else?",
      "parentUuid": "5c2321c3_4460abd6",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800c2f09_96caf0e4",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-08T07:58:02Z",
      "side": 1,
      "message": "Yes, I can still see the tiny submits from time to time, although they would be further reduced with 2ms interval. But it would be still not long enough to have them merged and saved into  the [submit](https://source.chromium.org/chromium/chromium/src/+/main:content/test/data/gpu/vc/webgpu_video.js;l\u003d608;drc\u003dd5a2d2950088170ccf5c83f89c9b19e4d525ba1e;bpv\u003d0;bpt\u003d0) of client as this CL can.\nIn future, we can probably apply this optimization to other WriteTexture and WriteBuffer usages in addition to this one, so as to do as few submits as possible.",
      "parentUuid": "a4561988_d91c8a06",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4d1d67f_046bfc81",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-08T09:02:58Z",
      "side": 1,
      "message": "The reason why WriteTexture/WriteBuffer need to tag the recording context as used is to make sure that there isn\u0027t an ever increasing amount of data held in staging buffers waiting to be uploaded. WriteBuffer/WriteTexture are supposed to write \"immediately\" so an infinite loop of WriteBuffers should theorically not OOM.\n\nMaybe we could change .used to .needsSubmit, not set it to true in GetPendingRecordingContext, but instead count how many bytes are to be uploaded, and when we reach a threshold (megabytes?), then mark .needsSubmit. I think it would solve the small submits we see here as well. Austin, Loko WDYT?",
      "parentUuid": "800c2f09_96caf0e4",
      "range": {
        "startLine": 190,
        "startChar": 13,
        "endLine": 191,
        "endChar": 74
      },
      "revId": "b0d40de44330fa407efee78e58863508cf1ef43c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}