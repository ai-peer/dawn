{
  "comments": [
    {
      "key": {
        "uuid": "f1b5af5e_6f06f93a",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 187,
        "startChar": 8,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b0cc7d_e17c2b02",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-04T21:50:18Z",
      "side": 1,
      "message": "nit: Prefer std::array\u003cGLbyte, MAX_TEXEL_SIZE\u003e clearColorData;",
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b510ec4d_de78191d",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1b0cc7d_e17c2b02",
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95937ad6_2673c66e",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-04T21:50:18Z",
      "side": 1,
      "message": "In the Vulkan backend, we have an OUT_OF_MEMORY check here, which would be good to include here too.\nhttps://cs.chromium.org/chromium/src/third_party/dawn/src/dawn_native/vulkan/TextureVk.cpp?l\u003d687\u0026rcl\u003df5c44772a6999a37760f6b67ee73b33876e8f7a9",
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce5cd35b_bd97a63a",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95937ad6_2673c66e",
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cc5a780_5eaad9b0",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 250,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-04T21:50:18Z",
      "side": 1,
      "message": "In the Vulkan backend, we used DynamicUploader here. Is that possible for the OpenGL backend?\n\nLeave a TODO if it\u0027s not possible now but we want to use it later.",
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bcb7036_5119390e",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 250,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "ok i will leave a todo, i think this doesn\u0027t work right now because staging buffers are not implemented for opengl yet.",
      "parentUuid": "9cc5a780_5eaad9b0",
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e544777_ce1562b4",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-04T21:50:18Z",
      "side": 1,
      "message": "This looks equivalent to GetSize().width",
      "range": {
        "startLine": 265,
        "startChar": 31,
        "endLine": 265,
        "endChar": 92
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e32e360_3501df5d",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e544777_ce1562b4",
      "range": {
        "startLine": 265,
        "startChar": 31,
        "endLine": 265,
        "endChar": 92
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55815763_a80af120",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-06T19:08:54Z",
      "side": 1,
      "message": "I think Natasha\u0027s original code was correct. It used the rowPitch, converted to number of pixels.\n\nrowPitchInPixels can be greater than the texture\u0027s width if the width of the texture is not aligned to 512.\n\nRight now the test is using a 128 x 128 texture. Maybe we can test with something unaligned like 127x127 to help catch errors.",
      "parentUuid": "0e32e360_3501df5d",
      "range": {
        "startLine": 265,
        "startChar": 31,
        "endLine": 265,
        "endChar": 92
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f57d20f_f059120d",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-09T19:55:04Z",
      "side": 1,
      "message": "oops, I think you\u0027re right. Would be great to have a test for this.\n\nStill not totally sure whether this is the right formula - we\u0027ll have to test it better when we have compressed textures (where block size is \u003e 1). Ok to not worry about that for the moment.\n\nI think we also should have an assert that this isn\u0027t rounding: ASSERT(rowPitch % GetFormat().blockByteSize \u003d\u003d 0)",
      "parentUuid": "55815763_a80af120",
      "range": {
        "startLine": 265,
        "startChar": 31,
        "endLine": 265,
        "endChar": 92
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ab85d87_57541b9d",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-04T21:50:18Z",
      "side": 1,
      "message": "I think for compressed formats, glCompressedTexSubImage2/3D would be required here, but not 100% sure",
      "range": {
        "startLine": 272,
        "startChar": 31,
        "endLine": 272,
        "endChar": 44
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6192c3b7_1f069fde",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "i think we skip compressed formats for now at [1].",
      "parentUuid": "9ab85d87_57541b9d",
      "range": {
        "startLine": 272,
        "startChar": 31,
        "endLine": 272,
        "endChar": 44
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ba7982e_31b7fecd",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-05T18:41:32Z",
      "side": 1,
      "message": "Oh, gotcha.",
      "parentUuid": "6192c3b7_1f069fde",
      "range": {
        "startLine": 272,
        "startChar": 31,
        "endLine": 272,
        "endChar": 44
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15b7f9a4_4e63e39d",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-04T21:50:18Z",
      "side": 1,
      "message": "Wouldn\u0027t this initialize only the first layer of a 2d texture array?",
      "range": {
        "startLine": 273,
        "startChar": 58,
        "endLine": 273,
        "endChar": 59
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fa4f3e2_055e0887",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T18:05:31Z",
      "side": 1,
      "message": "oh yah, i think I need to use layercount for the z offset param.",
      "parentUuid": "15b7f9a4_4e63e39d",
      "range": {
        "startLine": 273,
        "startChar": 58,
        "endLine": 273,
        "endChar": 59
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da19f243_cd13f409",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-05T18:41:32Z",
      "side": 1,
      "message": "Shouldn\u0027t it be the depth instead? (target, level, 0, 0, baseArrayLayer, w, h, layerCount, format, type, 0)",
      "parentUuid": "4fa4f3e2_055e0887",
      "range": {
        "startLine": 273,
        "startChar": 58,
        "endLine": 273,
        "endChar": 59
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f8676b_f7617a77",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-05T22:13:47Z",
      "side": 1,
      "message": "hmm im not sure actually. I was just following what was done here https://cs.chromium.org/chromium/src/third_party/dawn/src/dawn_native/opengl/CommandBufferGL.cpp?l\u003d496\u0026rcl\u003da900ccebcf428c99184ca44a3fad6030b2e43fc7\nI also think depth is usually 1 when I worked in other backends, but maybe theyre not referring to the same \"depth\".",
      "parentUuid": "da19f243_cd13f409",
      "range": {
        "startLine": 273,
        "startChar": 58,
        "endLine": 273,
        "endChar": 59
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b167622f_272c52be",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-05T22:27:58Z",
      "side": 1,
      "message": "That one is using zoffset\u003dCopyBufferToTextureCommand.destination.arrayLayer, not zoffset\u003dlayerCount. For a 2d texture array, zoffset is the first layer to copy, and depth is the number of layers to copy. manpage:\n\n\u003e For three-dimensional textures, the z index refers to the third dimension. For two-dimensional array textures, the z index refers to the slice index. \nhttps://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexSubImage3D.xhtml\n\nSo we want zoffset\u003dbaseArrayLayer and depth\u003dlayerCount.\n\nHowever this won\u0027t actually work because of the problem Corentin pointed out. So we can either fix that or just take out the gl.TexSubImage3D and ASSERT layerCount \u003d\u003d 1 and add a TODO to implement layerCount \u003e 1.",
      "parentUuid": "47f8676b_f7617a77",
      "range": {
        "startLine": 273,
        "startChar": 58,
        "endLine": 273,
        "endChar": 59
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "905265a3_3e3b2668",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-06T18:03:55Z",
      "side": 1,
      "message": "I see, thank you! I removed it and added the todo.",
      "parentUuid": "b167622f_272c52be",
      "range": {
        "startLine": 273,
        "startChar": 58,
        "endLine": 273,
        "endChar": 59
      },
      "revId": "6b0f4838e3ac6c0d19f1f4c2535cb17c2eaffe27",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}