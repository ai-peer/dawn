{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b2c76f76_7b2d32d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-22T18:05:23Z",
      "side": 1,
      "message": "PTAL! The shader bit is in the next CL if you want to see, but that one is still blocked on the Tint roll into Dawn.",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17b36737_33aca1fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "LGTM",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3fee8ee_a47fcc1b",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "Can\u0027t the slots be merged between VS (baseVertex/Instance) and CS (numWorkgroups) such that there are only max(2, 3) + 4 \u003d 7 slots needed?",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39331450_81467d06",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "Done. but now the visibility is ALL. not sure the perf implications of letting the fragment stage have visibility to baseVertex/baseInstance. I don\u0027t feel strongly in either direction though. We do have enough binding space to leave them separate, but fewer might be better? cause then there\u0027s more space for root constant promotion of other buffers???\nOr maybe ALL doesn\u0027t matter for things that are readonly because the driver doesn\u0027t have to flush changed data between stages.\n\nI\u0027ll ask someone.",
      "parentUuid": "b3fee8ee_a47fcc1b",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0362a648_5ba30ab3",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:44:36Z",
      "side": 1,
      "message": "I suspect what we\u0027ll want to do (eventually) is to just have separate root signatures.",
      "parentUuid": "39331450_81467d06",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1102916_4928c246",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T21:01:06Z",
      "side": 1,
      "message": "\"It could be anywhere between no better, and very slightly better. But has to be weighed against the cost of changing the root signature and rebinding all the root arguments\"\n\nwe rebind everything already (I think) when changing between render/compute passes, so I think using ALL means we will be somewhere between no worse to very slightly worse. I don\u0027t think it\u0027ll matter much for now.",
      "parentUuid": "0362a648_5ba30ab3",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f415641_28645522",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-25T09:07:37Z",
      "side": 1,
      "message": "Ok sounds good. Using a single parameter for both the VS and CS root parameters sounds good.",
      "parentUuid": "b1102916_4928c246",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97f6b015_61f047c2",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-29T21:14:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6f415641_28645522",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a74b19_fcd0d9e3",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "Won\u0027t the storage buffers be sorted after the uniform buffers such that we can go from GetDynamicUniformBufferCount to GetDynamicBufferCount?",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "265cebec_e0f19502",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "GetDynamicUniformBufferCount is not a thing though. Dynamic buffers are in front, but they\u0027re not sorted by type, they\u0027re sorted by binding number. https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/BindGroupLayout.cpp;l\u003d294",
      "parentUuid": "c6a74b19_fcd0d9e3",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30e8ed7d_5c502ab0",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-25T09:07:37Z",
      "side": 1,
      "message": "Ah ok makes sense. Maybe we can have a IsStorageBufferBinding helper to try and reduce the boilerplate here, but that\u0027s the best we can do I guess.",
      "parentUuid": "265cebec_e0f19502",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1466b6a_0457494e",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-29T21:14:43Z",
      "side": 1,
      "message": "Added/used such a helper.",
      "parentUuid": "30e8ed7d_5c502ab0",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "725c917e_756eb6a3",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "Can we have a block comment that explains what happens here roughly? It will make it easier to come back to this code.",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c83b545_2da1fc20",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "725c917e_756eb6a3",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5134071_2d3db296",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "ditto about looping over exactly the dynamic storage buffers.",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1ef6f51_eaa9c8e7",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e5134071_2d3db296",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e602cd6_2a9e4642",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "nit: Maybe add a comment that says that we allocate register names so that we can match between the pipeline layout and the shader, but that they are not related to the allocation in the root signature. Also maybe it makes sense to start having a RegisterName struct with a space and a register now. WDYT?",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b13a644_bbdf45e2",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "hm, I\u0027ll add a struct in a follow-up, so the rebasing is easier",
      "parentUuid": "1e602cd6_2a9e4642",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58a7f972_41b9a980",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-25T09:07:37Z",
      "side": 1,
      "message": "Sounds good, and feel free to skip if you think the struct is unnecessary.",
      "parentUuid": "3b13a644_bbdf45e2",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bcc1c0f_ff63703d",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "nit: leftover code?",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b057eb9_80794702",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bcc1c0f_ff63703d",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98850d4b_59707d98",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T17:06:09Z",
      "side": 1,
      "message": "We only ever use the first element of the stack_vec so I think it could just be an ityp::array\u003cBindGroupIndex, uint32_t, kMaxBindGroups\u003e.\n\nThe data used for the shaders could just be a vec. IMHO it\u0027s ok to have duplication because it will end up using less memory overall and also we can hide the shader data at the end of the structure so we have more memory locality.",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6996a93b_876f748a",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-24T19:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98850d4b_59707d98",
      "revId": "4d541fbb19417ed502519c75d794fb4526bb7ad9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}