{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "af2e6124_1b5d4fcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2022-03-30T14:57:43Z",
      "side": 1,
      "message": "The actual implementation looks good to me.\n\nI have a concern about the high-level design. Limiting items in a Set to only valid Key types, feels unintuitive and leaking the implementation details. Atleast in my mental model, I would have expected any valid value for a Map would be a valid value for Set.\n\nI understand that realistically this would require either a generic hashing mechanism to generate keys for the set or using a bespoke internal implementation, which is probably more work than justified.\nI think atleast the comments/documentation around Set should be very explicit about this limitation.",
      "revId": "538dbae18c961459fb4c6d8f49ef91a16520e375",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b485e67_f17bb2ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-03-30T15:33:09Z",
      "side": 1,
      "message": "The `Map` and `Key` both use the `key` type constraint, so there\u0027s no difference in what either of these can accept. That said, `Map` and `Key` are more restrictive than go\u0027s builtin `map`, as these wrappers do implicit sorting when returning slices of the data.\nI\u0027m not sure if there\u0027s a way to work around this limitation right now, I\u0027m asking my friends who work on Go if they have any suggested solutions.",
      "parentUuid": "af2e6124_1b5d4fcc",
      "revId": "538dbae18c961459fb4c6d8f49ef91a16520e375",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18c367da_4ede3eb4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-03-30T19:30:11Z",
      "side": 1,
      "message": "Chatted with someone on the go team. No easy way to lower the constraints from `Ordered` to `comparable`, without going via some dirty reflection, or changing the API to be more complex.\n\nGiven that the only `Map` and `Set` key types we use are POD, I see no need to complicate the API right now. If we want to support more types in the future, it should be trivial to change these.",
      "parentUuid": "8b485e67_f17bb2ec",
      "revId": "538dbae18c961459fb4c6d8f49ef91a16520e375",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "538dbae18c961459fb4c6d8f49ef91a16520e375",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "538dbae18c961459fb4c6d8f49ef91a16520e375",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}