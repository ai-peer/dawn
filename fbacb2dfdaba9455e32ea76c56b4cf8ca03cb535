{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "63559913_556eab8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 73
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "LGTM, although I\u0027m looking forward to finding finer-grained mechanisms for handling synchronization.",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ec43951_97833436",
        "filename": "dawn.json",
        "patchSetId": 73
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "Can this be documented in docs/dawn/generator.md?",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c641ed4c_7390589b",
        "filename": "dawn.json",
        "patchSetId": 73
      },
      "lineNbr": 80,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T09:07:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ec43951_97833436",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb820c51_4a8f142f",
        "filename": "generator/templates/dawn/native/ProcTable.cpp",
        "patchSetId": 73
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "I have some performance concerns about adding this to most of the procs in the proc table that every dawn::native project will use. WDYT of generating two versions of this proc table, one with the auto locking and the other one without? Chromium/Skia would use the former while most other projects would use the latter (and eventually when we have proper fine-grained synchronization we would merge them again)",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e50cc255_c72abda3",
        "filename": "generator/templates/dawn/native/ProcTable.cpp",
        "patchSetId": 73
      },
      "lineNbr": 59,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-03T14:46:38Z",
      "side": 1,
      "message": "Currently graphite uses `wgpu::` C++ API defined in https://source.chromium.org/chromium/chromium/src/+/main:out/Debug/gen/third_party/dawn/include/dawn/webgpu_cpp.h\n\nAnd the underlying proc table is controlled by `dawnProcSetProcs()` function IIUC https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:out/Debug/gen/third_party/dawn/src/dawn/dawn_proc.c;drc\u003d563462e6dee3014de2f13db70d50cc3879c783d9;l\u003d10\n`dawnProcSetProcs` will override the global proc table which could affect every module in the same process.\n\nWhich means if we use `dawnProcSetProcs` in graphite, it will override any other modules that call `wgpu::` or the `wgpu...` C API to implicitly use \"thread safe\" procs as well. Unless we manually use the \"thread safe\" function pointers in graphite and/or the other modules use the \"default\" function pointers explicitly. This is a bit error prone IMO.\n\nFurthermore, as you mentioned, I think using an AutoLock with null mutex (when \"thread safe\" feature is disabled) could be relatively cheap. Compare to the actual works that an API function is going to do, the cost of checking the mutex is null or not should be insignificant.",
      "parentUuid": "fb820c51_4a8f142f",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d979c6e4_05781e8a",
        "filename": "generator/templates/dawn/native/ProcTable.cpp",
        "patchSetId": 73
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T16:06:53Z",
      "side": 1,
      "message": "Yeah the idea would be that Chromium\u0027s GPU process would always use the lock version of the procs. But maybe the perf difference wouldn\u0027t matter on the calls that have automatic locking since the majority of the calls is in command encoding. And in the future we\u0027d want to always have internal synchronization in Dawn so we\u0027d go back to a single proctable.\n\nEither way sounds good then, thanks!",
      "parentUuid": "e50cc255_c72abda3",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad7148c4_81b2959a",
        "filename": "src/dawn/common/RefCounted.h",
        "patchSetId": 73
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "nit: \"synchronization\" as well?",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b48c9a6_c34a37ff",
        "filename": "src/dawn/common/RefCounted.h",
        "patchSetId": 73
      },
      "lineNbr": 49,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T09:07:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad7148c4_81b2959a",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a7d879_1e3f4d7e",
        "filename": "src/dawn/common/RefCounted.h",
        "patchSetId": 73
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "nit: APIRelease() can be called without any synchronization guarantees so we need to use a Release method that will call LockAndDeleteThis() on destruction.",
      "range": {
        "startLine": 54,
        "startChar": 45,
        "endLine": 54,
        "endChar": 51
      },
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feda9461_bebfe791",
        "filename": "src/dawn/common/RefCounted.h",
        "patchSetId": 73
      },
      "lineNbr": 54,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T19:00:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04a7d879_1e3f4d7e",
      "range": {
        "startLine": 54,
        "startChar": 45,
        "endLine": 54,
        "endChar": 51
      },
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "605d6372_86a0c045",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 73
      },
      "lineNbr": 1050,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "For these, could we link to dawn:1618 explaining that it would remove the need for the locking? Ditto in other places in this file.",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e096ea2_4b83e5bb",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 73
      },
      "lineNbr": 1050,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T09:07:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "605d6372_86a0c045",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc0902a_39e0f393",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "It should be possible to have a constexpr constructor for Mutex such that just declaring `static Mutex gMutex` would work I believe.",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6874d785_6f812878",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 95,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T09:07:04Z",
      "side": 1,
      "message": "I tried. This `constexpr` ctor trick doesn\u0027t seem to work. Using `std::atomic\u003cstd::optional\u003cstd::thread::id\u003e\u003e` doesn\u0027t work either.",
      "parentUuid": "2fc0902a_39e0f393",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "658e8cdc_c17f2fec",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-04T15:54:58Z",
      "side": 1,
      "message": "how about optional\u003catomic\u003cthread::id\u003e\u003e ?\n\nhttps://godbolt.org/z/vqGGeehfr",
      "parentUuid": "6874d785_6f812878",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c54e4ad_fb238bde",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 95,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T19:00:02Z",
      "side": 1,
      "message": "Using `optional` as outer most type of the owner id, the `IsLockedByCurrentThread()` method will no longer be thread safe without using a separate mutex to protect it. (any other suggestion to work around this?)\n\n```\nbool IsLockedByCurrentThread() {\n   std::lock_guard lg(mOwnerMutex);\n   return mOwner.value();\n}\n```\n\nAlso default constructed `optional` will not hold any value.",
      "parentUuid": "658e8cdc_c17f2fec",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c22d2253_32cea513",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-04T19:30:49Z",
      "side": 1,
      "message": "this is my last idea :-/ \nhttps://godbolt.org/z/zE88rjxMb\n\nreally under the hood it\u0027s probably just adding yet another mutex.",
      "parentUuid": "8c54e4ad_fb238bde",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e323306_a88d8332",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 877,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "nit: Maybe we could have a helper function \"LockedIfNeeded\" for this",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75bcd21b_a383a0d7",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 73
      },
      "lineNbr": 877,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T09:07:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e323306_a88d8332",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36f1819f_5db791a0",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 73
      },
      "lineNbr": 430,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "nit: the optional here is going to be bigger than just the AutoLock that\u0027s a pointer to the Mutex. If we made the Autolock contain a nullable pointer and added an if Mutex !\u003d null then the generated code would likely be better.",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5e7400a_b0821a22",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 73
      },
      "lineNbr": 430,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-04T09:07:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36f1819f_5db791a0",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae8ed5d_af63d915",
        "filename": "src/dawn/wire/SupportedFeatures.cpp",
        "patchSetId": 73
      },
      "lineNbr": 27,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T13:11:03Z",
      "side": 1,
      "message": "I\u0027m a bit surprised that this is a feature and not a device toggle: it shouldn\u0027t really be a user-visible thing and more of a backdoor for Graphite at the moment. I remember there might have been a thread about why this was chosen to be a features, do you have a link to it?",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b7287a1_df2cfbbc",
        "filename": "src/dawn/wire/SupportedFeatures.cpp",
        "patchSetId": 73
      },
      "lineNbr": 27,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-03T14:46:38Z",
      "side": 1,
      "message": "I CC-ed you in the doc\u0027s comment thread about this.",
      "parentUuid": "3ae8ed5d_af63d915",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b77207d_ee9fdb64",
        "filename": "src/dawn/wire/SupportedFeatures.cpp",
        "patchSetId": 73
      },
      "lineNbr": 27,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-03T16:06:53Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9b7287a1_df2cfbbc",
      "revId": "fbacb2dfdaba9455e32ea76c56b4cf8ca03cb535",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}