{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c527374b_09daee42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2023-05-26T00:46:48Z",
      "side": 1,
      "message": "With Root Signature 1.0, all of the descriptors are considered DATA_VOLATILE. You do not need Root Signature 1.1 to remove extra index clamping in Tint.\n\nRoot Signature 1.1 is for when Dawn can make additional guarantees about the data pointed to by the descriptor. Sounds like that\u0027s not the case.",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42328491_f37b1f14",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T00:51:48Z",
      "side": 1,
      "message": "Hi Rafael,I learned from https://bugs.chromium.org/p/tint/issues/detail?id\u003d1890#c6 that with Root Signature 1.0, \"Root descriptor buffers do not have bounds checks, and worse still, some buffers can be promoted to root descriptor buffers as an optimization of D3D\", that\u0027s why we need Root Signature 1.1 to safely remove index clamping.",
      "parentUuid": "c527374b_09daee42",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac900ae5_2b2f3878",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2023-05-26T01:01:40Z",
      "side": 1,
      "message": "If you use Root Signature v1.1, then you must specify DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS on static descriptors to prevent them from being optimized to root descriptors by the driver.\n\nIf you\u0027re just using Root Signature v1.0, all of the descriptors are considered volatile so no promotion happens behind your back.",
      "parentUuid": "42328491_f37b1f14",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "637e9035_499d630c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T02:27:38Z",
      "side": 1,
      "message": "Hi Ben, according to your comment (https://bugs.chromium.org/p/tint/issues/detail?id\u003d1890#c6), \"root descriptor buffers do not have bounds checks, and worse still, some buffers can be promoted to root descriptor buffers as an optimization of D3D\", but according to Rafael\u0027s comment here we don\u0027t need to worry about it. What do you think?",
      "parentUuid": "ac900ae5_2b2f3878",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1347d91_a86cad98",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-26T09:19:17Z",
      "side": 1,
      "message": "It might be worth taking this CL in just for the optimizations, but otherwise it seems Rafael just confirmed that root signature 1.0 always has DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS",
      "parentUuid": "637e9035_499d630c",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0935f9ca_6ae03ea5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-26T13:34:24Z",
      "side": 1,
      "message": "My information was second hand. Rafael actually knows what he\u0027s talking about.\n\nSo with this change `D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS` is required to ensure OOBs are safe when Tint\u0027s robustness is disabled.\n\nFor now we\u0027re still using Tint\u0027s robustness, right?",
      "parentUuid": "c1347d91_a86cad98",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44aa33f6_3c15047f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2023-05-26T16:46:18Z",
      "side": 1,
      "message": "@Ben, not quite. :-)\n\nIf you\u0027re using Root Signature v1.0, the STATIC_KEEPING_BUFFER_BOUNDS_CHECKS enum is not valid because all descriptors are assumed to be volatile. The driver is not allowed to promote them to be root descriptors and, thus, lose bounds checking. You can remove Tint robustness on buffers with v1.0 Root Signatures.    \n\nIf you\u0027re using Root Signature v1.1, you can tell D3D which descriptors you promise not to change the descriptor and/or data it points to. The driver can choose to remove levels of indirection. In v1.1, you need to use STATIC_KEEPING_BUFFER_BOUNDS_CHECKS to prevent drivers promoting descriptors to root descriptors, thus, removing bounds checking.\n\n\nRegardless of the Root Signature version you decide to use, no bounds checking will ever be done on descriptors where you give the API just an address. An example is the following: \n\n\u003e void SetGraphicsRootUnorderedAccessView(\n  [in] UINT                      RootParameterIndex,\n  [in] D3D12_GPU_VIRTUAL_ADDRESS BufferLocation\n);\n\nYou can provide a `BufferLocation` that\u0027s in the middle of a buffer if you\u0027d like. D3D will not lookup or try to guess the size. Many APIs for newer D3D features tend to take just buffer locations with no size. \n\nRegardless of the Root Signature, no bounds checking will be done on arrays that are defined directly in a shader. I\u0027m not a Tint expert but hopefully, we can tell the difference between things we can avoid doing bounds checking for and things we can\u0027t.",
      "parentUuid": "0935f9ca_6ae03ea5",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16b6abfc_ebb72daa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2023-05-26T16:58:09Z",
      "side": 1,
      "message": "See https://learn.microsoft.com/en-us/windows/win32/direct3d12/root-signature-version-1-1 and https://microsoft.github.io/DirectX-Specs/d3d/ResourceBinding.html for more information.",
      "parentUuid": "44aa33f6_3c15047f",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "626dad4a_81618933",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-26T17:07:38Z",
      "side": 1,
      "message": "Thanks Rafael.\n\nSo if I understand you correctly, OOB access become a security risk when all the following are true:\n* Using Root Signature v1.1\n* The descriptor is [considered \u0027static\u0027](https://microsoft.github.io/DirectX-Specs/d3d/ResourceBinding.html#optimization-opportunity)\n* The `D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS` or `D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE` flag was **not specified**.\n\nIs that correct?\n\n\u003e Regardless of the Root Signature, no bounds checking will be done on arrays that are defined directly in a shader.\n\nPlease can you elaborate on what you mean by `arrays that are defined directly in a shader`? Do you mean fixed-size arrays vs runtime-sized arrays? If so, which has the bounds checking?\n\n---\n\nWe\u0027re still depending on Tint robustness, so this change LGTM.",
      "parentUuid": "44aa33f6_3c15047f",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4be834bf_9f1f29c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2023-05-26T17:54:22Z",
      "side": 1,
      "message": "\u003e Is that correct?\n\nYes.\n\n\u003e Please can you elaborate on what you mean by arrays that are defined directly in a shader? Do you mean fixed-size arrays vs runtime-sized arrays? If so, which has the bounds checking?\n\nNeither fixed sized arrays nor unbounded arrays (runtime-sized arrays in Vulkan terms) are bounds checked.",
      "parentUuid": "626dad4a_81618933",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60de110c_d6d88771",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-29T06:15:35Z",
      "side": 1,
      "message": "Hi Ben,\n\n\u003e For now we\u0027re still using Tint\u0027s robustness, right?\nYes, but our final goal is trying to remove the index clamping on D3D12 buffers in Tint. With Rafael\u0027s clarification do you think if we can safely do this now？",
      "parentUuid": "4be834bf_9f1f29c8",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03a05779_49a0d5c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-24T12:19:58Z",
      "side": 1,
      "message": "LGTM",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db410ec_8cda7ae3",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 8
      },
      "lineNbr": 422,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-24T12:19:58Z",
      "side": 1,
      "message": "u-nit: promoting",
      "range": {
        "startLine": 422,
        "startChar": 64,
        "endLine": 422,
        "endChar": 74
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cf279e4_a296a739",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 8
      },
      "lineNbr": 422,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T02:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9db410ec_8cda7ae3",
      "range": {
        "startLine": 422,
        "startChar": 64,
        "endLine": 422,
        "endChar": 74
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9af9c5e_b9bc0fb3",
        "filename": "src/dawn/native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-24T12:19:58Z",
      "side": 1,
      "message": "nit: I think this should be just _VOLATILE? We do set DATA_VOLATILE because we transition the textures and buffers.",
      "range": {
        "startLine": 106,
        "startChar": 29,
        "endLine": 106,
        "endChar": 42
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba744a50_def75ae7",
        "filename": "src/dawn/native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T02:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9af9c5e_b9bc0fb3",
      "range": {
        "startLine": 106,
        "startChar": 29,
        "endLine": 106,
        "endChar": 42
      },
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8605672e_2e12ed36",
        "filename": "src/dawn/native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-24T12:19:58Z",
      "side": 1,
      "message": "ExternalTexture bindings are decayed in the frontend and backends shouldn\u0027t need to handle them.",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "043ae854_5ea43d8a",
        "filename": "src/dawn/native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T02:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8605672e_2e12ed36",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a0fcf95_2e64d209",
        "filename": "src/dawn/native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 312,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-24T12:19:58Z",
      "side": 1,
      "message": "nit: we could even go as far as:\n\n```\nD3D12_VERSIONED_ROOT_SIGNATURE_DESC desc \u003d {};\n        desc.Version \u003d D3D_ROOT_SIGNATURE_VERSION_1_1;\n        desc.Desc_1_1.NumParameters \u003d rootParameters.size();\n        desc.Desc_1_1.pParameters \u003d rootParameters.data();\n        desc.Desc_1_1.NumStaticSamplers \u003d 0;\n        desc.Desc_1_1.pStaticSamplers \u003d nullptr;\n        desc.Desc_1_1.Flags \u003d\n\n   ComPtr\u003cID3DBlob\u003e error;\n    HRESULT hr;\n   \n   if (use 1_1) {\n     hr \u003d ...\n   } else {\n     Serialize1_0RootSignature(device, desc, ...);\n   }\n```\n\nThen all the complexity of the 1.0 root signature is in one function and we don\u0027t need to move vectors around.",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "158888ad_beaacafa",
        "filename": "src/dawn/native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 312,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T02:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a0fcf95_2e64d209",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9709e728_e680c17f",
        "filename": "src/dawn/tests/end2end/BindGroupTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1604,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-24T21:16:41Z",
      "side": 1,
      "message": "we should probably test the 1.0 on more tests.\nmaybe additionally:\nExternalTextureTests\nDynamicBufferOffsetTests\nPipelineLayoutTests",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a1ede80_7263a63e",
        "filename": "src/dawn/tests/end2end/BindGroupTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1604,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-05-26T02:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9709e728_e680c17f",
      "revId": "cf3f35551bdf6317ee91704c59ce7ccf091db11b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}