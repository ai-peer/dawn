{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7f61693d_46ab4302",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-10-28T01:24:52Z",
      "side": 1,
      "message": "No deprecation tests yet (see https://dawn-review.googlesource.com/c/dawn/+/31141) but PTAL",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ffb60d4_4aae189f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T14:25:22Z",
      "side": 1,
      "message": "Can we have tests for the deprecated code paths, or tests for the newly allowed parameters?\n\nOverall it feels the validation for linear data is more complicated than it could be, wouldn\u0027t it be simpler to just ignore bytesPerRow or rowsPerImage if copySize \u003d (w, \u003c1, \u003c1) or (w, h, \u003c1) respectively?",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0317d9f9_8d6230dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-10-28T20:47:39Z",
      "side": 1,
      "message": "Will get to tests.\n\nIdk about the validation rules, I think they\u0027re pretty reasonable in JS, they just get complicated when you try to implement them for C. The thing I like about these rules is if you specify a bytesPerRow or rowsPerImage then it must be a reasonable one. It prevents you from writing code with a bytesPerRow or rowsPerImage that looks like it was chosen intentionally, but could actually be nonsense.",
      "parentUuid": "4ffb60d4_4aae189f",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f9c5e18_e6d4944e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-29T16:28:14Z",
      "side": 1,
      "message": "But why do we need to care about validating these parameters when they are not used? If folks write some non-sensical value for these parameters then either it doesn\u0027t matter, or they\u0027ll run into a 256 alignment issue when they extend the copy. In both cases the \"reasonable value\" validation doesn\u0027t help them.",
      "parentUuid": "0317d9f9_8d6230dc",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b381ce49_64ef9c0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-10-29T17:12:30Z",
      "side": 1,
      "message": "Do you think we should ease the restrictions on the JS side or just in Dawn and put the additional validation in front since we have to have validation in front anyway?",
      "parentUuid": "9f9c5e18_e6d4944e",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6679339_b1c7bc41",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T14:25:22Z",
      "side": 1,
      "message": "nit: specified (non-0)",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2959931d_bda37341",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-10-28T20:47:39Z",
      "side": 1,
      "message": "I made this intentionally vague so the error message wouldn\u0027t be misleading when surfaced to JS. WDYT?",
      "parentUuid": "f6679339_b1c7bc41",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f5f49c2_b141488d",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 478,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T14:25:22Z",
      "side": 1,
      "message": "nit: unspecified (set to 0)",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b049afa1_1837a0dd",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 499,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T14:25:22Z",
      "side": 1,
      "message": "ditto",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95a13356_efd5d37a",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 503,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T14:25:22Z",
      "side": 1,
      "message": "ditto",
      "revId": "d0c7c07285196411de12090f43f44c04f1dd87c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}