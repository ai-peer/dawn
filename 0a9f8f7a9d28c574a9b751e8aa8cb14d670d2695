{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8056f980_beabf17a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-05-31T21:51:03Z",
      "side": 1,
      "message": "PTAL! This should address the concern brought up in the bug (though I don\u0027t think the callback would have ever been called when Dawn was using the wire client?) and prevent any similar situations from coming up in the future.",
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b5edaf6_47cf882d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-31T23:40:32Z",
      "side": 1,
      "message": "LGTM - we should be able to have a death test to check that the assert gets hit\n\n[example](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/unittests/wire/WireBufferMappingTests.cpp;l\u003d834?q\u003dASSERT_DEATH%20f:dawn\u0026ss\u003dchromium%2Fchromium%2Fsrc)\n\nprobably would go in dawn/tests/unittests/wire/WireAdapterTests.cpp",
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5086ac0_6e53dec6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-01T09:59:20Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "560a438f_31dad244",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-01T17:23:24Z",
      "side": 1,
      "message": "Added a test to ensure the function pointer doesn\u0027t make it over the wire, but the test infrastructure isn\u0027t really set up to test manipulating the serializable commands directly, so it\u0027s not clear how I would meaningfully trigger the assert?",
      "parentUuid": "0b5edaf6_47cf882d",
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c17adf12_bb5be864",
        "filename": "generator/templates/dawn/wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-31T23:40:32Z",
      "side": 1,
      "message": "uunit: \"over the wire\" or \"cannot be serialized\" is probably the better terminology. you could use dawn::wire in a non-multi-process way.",
      "range": {
        "startLine": 72,
        "startChar": 47,
        "endLine": 72,
        "endChar": 65
      },
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b06d1bc9_827e84d3",
        "filename": "generator/templates/dawn/wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-01T17:23:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c17adf12_bb5be864",
      "range": {
        "startLine": 72,
        "startChar": 47,
        "endLine": 72,
        "endChar": 65
      },
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bdf4873_38289ce4",
        "filename": "generator/templates/dawn/wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-01T09:59:20Z",
      "side": 1,
      "message": "Could we instead validate that these pointers are nullptr (and the same for void*)? It would avoid silently forgetting to zero-out these pointers in the client, while keeping the server robust to these kinds of pointers.",
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dde54aa_8f97efad",
        "filename": "generator/templates/dawn/wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-06-01T17:23:24Z",
      "side": 1,
      "message": "I\u0027m not sure I\u0027m clear on what you\u0027re requesting? The ASSERTS are here for that exact reason.",
      "parentUuid": "9bdf4873_38289ce4",
      "revId": "0a9f8f7a9d28c574a9b751e8aa8cb14d670d2695",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}