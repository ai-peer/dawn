{
  "comments": [
    {
      "key": {
        "uuid": "8fd88db4_3759337a",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-14T00:35:35Z",
      "side": 1,
      "message": "Could this be:\ntargetRingBuffer-\u003emStagingBuffer \u003d std::move(stagingBuffer);\n?",
      "range": {
        "startLine": 76,
        "startChar": 12,
        "endLine": 76,
        "endChar": 76
      },
      "revId": "72650a640060706e03a39f50075554ef2c67310d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5115053c_9c68b151",
        "filename": "src/dawn_native/RingBufferAllocator.cpp",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-14T00:35:35Z",
      "side": 1,
      "message": "IIUC, if a |serial| is passed that is less than the last serial, then the allocation should be considered as part of an existing frames-worth of resources. However, it looks like additional allocations to an existing frame are sort of \"leaked\" until the next allocation happens.\n\nRingBufferAllocator allocator(8);\n\nallocator.Allocate(4, 3);      // |xxxx|____|\n                               //   F3   \n\nallocator.Allocate(4, 1);      // |xxxx|xxxx|\n                               //   F3   F1\n\nallocator.Deallocate(3);       // |____|xxxx|  // Shouldn\u0027t this be empty?\n                               //        F1\n\nallocator.GetUsedSize() \u003d\u003e 4   // Shouldn\u0027t this be 0?\n                               //\n\nallocator.Allocate(4, 4);      // |____|xxxx|\n                               //   F4   F1\n\nallocator.Deallocate(4);       // |____|____|  // Now it\u0027s empty\n                               //\n\nallocator.GetUsedSize() \u003d\u003e 0   // Now it is 0\n                               //\n\nIs this the expected behavior?\n\nI think this difference occurs because the old RingBuffer implementation used to accumulate requests until Tick() was called, when it would enqueue them to the tracker. But now, Allocate(...) immediately enqueues them for tracking.",
      "revId": "72650a640060706e03a39f50075554ef2c67310d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1fdfd90_9fd677e0",
        "filename": "src/dawn_native/RingBufferAllocator.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-14T00:35:35Z",
      "side": 1,
      "message": "Isn\u0027t this space at the end?",
      "range": {
        "startLine": 89,
        "startChar": 35,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "72650a640060706e03a39f50075554ef2c67310d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}