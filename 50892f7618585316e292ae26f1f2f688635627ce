{
  "comments": [
    {
      "key": {
        "uuid": "7e1c41d2_6f36cd4f",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 915,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-05T11:16:41Z",
      "side": 1,
      "message": "Add \"optional\": true to make it have default nullptr, so that we can check whether it\u0027s set (pipeline statistics requires it must be set), otherwise it\u0027s not initialized and we cannot check its value.",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aa06c75_0eae07b0",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 915,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "Usually pointers with \"length\" don\u0027t need to default to nullptr if the length defaults to 0. Dereferencing 0 elements (i.e. doing nothing) of a garbage pointer is ok.",
      "parentUuid": "7e1c41d2_6f36cd4f",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edc5852e_e9ac7028",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 915,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Sepcify pipelineStatistics default with nullptr is to avoid applicaiton crash when pipelineStatisticsCount is set but pipelineStatistics is not. If this\u0027s allowed, the \"optional\" is not needed, I will remove the pipelineStatistics validation.",
      "parentUuid": "1aa06c75_0eae07b0",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ee45e32_00f71d2a",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-08T18:24:50Z",
      "side": 1,
      "message": "I don\u0027t think we need this class. It should be sufficient to just return new QuerySetBase(device, ObjectBase::kError) in the error case instead of this wrapper.",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fb008fc_5691c5eb",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "DestroyImpl() is updated to a pure virtual function in QuerySet.h, we can not new QuerySetBase now.",
      "parentUuid": "1ee45e32_00f71d2a",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10126f80_067dbdd9",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "I don\u0027t think we need an explicit maximum (and constant), because what matters is that no wgpu::PipelineStatisticsName is duplicated, which naturally enforces a maximum number of entries.",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f7908d4_d3eac125",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Understand, remove the checking.",
      "parentUuid": "10126f80_067dbdd9",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82cb1f2a_5932cc07",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "We shouldn\u0027t check for this, it is an application error to pass a nullptr with a count !\u003d 0",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e89cfb06_eb59d9c5",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "If users set pipelineStatisticsCount larger than 0, but don\u0027t set the pipelineStatistics, the applicaiton will crash.",
      "parentUuid": "82cb1f2a_5932cc07",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43e5b001_51f6f6cf",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-10T07:24:29Z",
      "side": 1,
      "message": "Yes, applications should ensure arrays are backend by enough memory for the array size they pass in the call / structure.",
      "parentUuid": "e89cfb06_eb59d9c5",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "117af355_980edd72",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "nit: validate that pipelineStatisticsCount is zero, and add a test for it.",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8b2a35d_c3f0ca83",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "117af355_980edd72",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b25250fa_08e79a31",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "ditto for wgpu::QueryType::Occlusion, add a check for pipelineStatisticsCount being zero and a test for it",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c8dae9_79fb9848",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b25250fa_08e79a31",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fec6183_a90c2499",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "(with std::vector this will need to change, for example with a resize prior to the loop)",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "184ae848_1e7e2339",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fec6183_a90c2499",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "096e273c_8d932ae0",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "nit: this would be const\u0026 to avoid making a copy.",
      "range": {
        "startLine": 125,
        "startChar": 4,
        "endLine": 125,
        "endChar": 27
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb9f668_7bbcd449",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "096e273c_8d932ae0",
      "range": {
        "startLine": 125,
        "startChar": 4,
        "endLine": 125,
        "endChar": 27
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4857e2d4_e74d71ae",
        "filename": "src/dawn_native/QuerySet.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "If we use an std::array, we don\u0027t know how many elements are set. This should just be an std::vector.",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "655085fa_060183e9",
        "filename": "src/dawn_native/QuerySet.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4857e2d4_e74d71ae",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "496b2968_f9776777",
        "filename": "src/dawn_native/opengl/DeviceGL.h",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "It\u0027s fine to have it here for now, but as soon as there is more implementation it should move to its own file.",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "653587fb_92c69704",
        "filename": "src/dawn_native/opengl/DeviceGL.h",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Let\u0027s move it to its own file.",
      "parentUuid": "496b2968_f9776777",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7881da8d_946ed9f4",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-08T18:24:50Z",
      "side": 1,
      "message": "This could just place the existing |device| member on ValidationTest.\n\nAlso, I think CreateDeviceWithExtension could be inlined here. This is the only callsite and this SetUp function is very small.",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 28
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a434e90_f1cffd2c",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "I also need test them on the the exsiting device (which without extension enabled), but we can put the CreateDeviceWithExtension code inline.",
      "parentUuid": "7881da8d_946ed9f4",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 28
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2eb44fb0_72805a4b",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "nit: Helper function that are as much code to call as what\u0027s inside them just make the code have more indirection. I don\u0027t think we need AssertCreateQuerySetSuccess and AssertCreateQuerySetError",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e211461_171a38ef",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2eb44fb0_72805a4b",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e94e4b3_0826ffb8",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "No need for the destroy because that\u0027s done implicitly when the query destructor is called.",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "108e8a82_68b7d1c0",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Actually we don\u0027t destory the query set in destructor implicitly, just check whether it\u0027s destoryed. I see Buffer and Texture also need to call Destroy().",
      "parentUuid": "8e94e4b3_0826ffb8",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5a02c09_3525c0d3",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-10T07:24:29Z",
      "side": 1,
      "message": "They don\u0027t, because DestroyInternal is called in the backend object\u0027s destructor.",
      "parentUuid": "108e8a82_68b7d1c0",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4b5a251_096f32e9",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-08T18:24:50Z",
      "side": 1,
      "message": "I\u0027m not sure how much value there is in having this helper if the argument types are the same as the descriptor member types. Perhaps instead of the pointer to wgpu::PipelineStatisticsName and count, this could take in an std::vector.\n\nThat way we could say:\nCreateQuerySetDescriptor(wgpu::QueryType::PipelineStatistics, 1, {wgpu::PipelineStatisticsName::VertexShaderInvocations});",
      "range": {
        "startLine": 38,
        "startChar": 29,
        "endLine": 38,
        "endChar": 53
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e8783d7_42f8fd91",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4b5a251_096f32e9",
      "range": {
        "startLine": 38,
        "startChar": 29,
        "endLine": 38,
        "endChar": 53
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e13908c9_996cf180",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-10T07:24:29Z",
      "side": 1,
      "message": "Austin suggested the argument could be an std::vector and not an std::vector pointer. Having an std::vector by value means you can do CreateQuerySetDescriptor(wgpu::QueryType::PipelineStatistics, 1, {wgpu::PipelineStatisticsName::VertexShaderInvocations});\n\nIf you have it by pointer, then you need to create a temporary variable, which makes the code a bit more verbose.\n\nThe signature would become:\n\n    wgpu::QuerySetDescriptor CreateQuerySetDescriptor(\n        wgpu::QueryType queryType,\n        uint32_t queryCount,\n        std::vector\u003cwgpu::PipelineStatisticsName\u003e pipelineStatistics \u003d {}) {",
      "parentUuid": "0e8783d7_42f8fd91",
      "range": {
        "startLine": 38,
        "startChar": 29,
        "endLine": 38,
        "endChar": 53
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f8e7d33_b9cbd846",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T08:05:31Z",
      "side": 1,
      "message": "The CreateQuerySetDescriptor() need to return the descriptor, if that the returned descriptor.pipelineStatistics will be a null pointor, becuase the pipelineStatistics in the function is a local variable.\n\nI will put device.CreateQuerySet() together with the descriptor creation, so that we can avoid to use std::vector pointer here, like this:\nCreateQuerySet(wgpu::Device device, wgpu::QueryType queryType, uint32_t queryCount, std::vector\u003cwgpu::PipelineStatisticsName\u003e pipelineStatistics \u003d {})",
      "parentUuid": "e13908c9_996cf180",
      "range": {
        "startLine": 38,
        "startChar": 29,
        "endLine": 38,
        "endChar": 53
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30be0fbf_46b79189",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-10T09:15:15Z",
      "side": 1,
      "message": "Yep that works",
      "parentUuid": "8f8e7d33_b9cbd846",
      "range": {
        "startLine": 38,
        "startChar": 29,
        "endLine": 38,
        "endChar": 53
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce17243d_a61bbf8d",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 198,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "This test isn\u0027t respecting the contract that pipelineStatistics always have pipelineStatisticsCount elements and results in an out of bounds access. Such a thing is an application error and shouldn\u0027t be tested (plus the test would be flaky because the third element would contain garbage.)",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2e845e9_fb7c9536",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 198,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce17243d_a61bbf8d",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "357b4d4f_bf66dbe1",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "Can we have a test with all names, maybe some order that\u0027s not the one in dawn.json to make sure it works?",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "288615f8_311e90a7",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "357b4d4f_bf66dbe1",
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbac9f2f_bb5da8ca",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:16:16Z",
      "side": 1,
      "message": "nit: destroying",
      "range": {
        "startLine": 209,
        "startChar": 8,
        "endLine": 209,
        "endChar": 15
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ced6f7a7_594cea25",
        "filename": "src/tests/unittests/validation/QueryValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-10T06:39:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbac9f2f_bb5da8ca",
      "range": {
        "startLine": 209,
        "startChar": 8,
        "endLine": 209,
        "endChar": 15
      },
      "revId": "50892f7618585316e292ae26f1f2f688635627ce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}