{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "472fe730_b72b78b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-30T09:17:29Z",
      "side": 1,
      "message": "Do some homework to update the CL. Thanks for Reveiwing! And PTAL the latest patch set.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4884cf88_fb46c897",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-01T07:11:07Z",
      "side": 1,
      "message": "The bots fail show me a bug in blink side:\nIt seems that in blink side, there is not default value for the struct webgpu.h. We need to assign value in the implementation. The code here https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/gpu_queue.cc;l\u003d766?q\u003dgpu_queue.cc\u0026ss\u003dchromium%2Fchromium%2Fsrc\nhappens to work because our default value in Dawn side is all 0. \nBut in this CL, we set default value of srcTextureAlphaOp to wgpu::AlphaOp::Unpremultiply (which is 2). And the bots caught that bug.\n\nDo you have any suggestions on making bots happy? ",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14b23b4f_6dc395a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "Only skimmed the tests so far but they look good",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bbfce17_984e5694",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "Thanks for reviewing (Appreciate for all the comments and times!). I\u0027m working on addressing them but I\u0027m afraid I cannot finish it today. So send out some replies first.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8eb32f1_ec7e960c",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "Isn\u0027t it a bit weird that we say what operation to do, instead of declaring what the state of the texture is? (so alpha is either \"premultiplied\", or \"separate\")? Then with [c] we only have 4 (2x2) cases to consider instead of 9 (3x3).\n\nIf alpha is premultiplied in the source then we unmultiply it, if the destination has premultiplied alpha then we multiply it at the end.",
      "range": {
        "startLine": 860,
        "startChar": 74,
        "endLine": 860,
        "endChar": 87
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe4acee0_c06bb787",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "Agree, I guess originally we implemented this with a single precomputed alphaOp (\"premultiply\", \"unpremultiply\", or \"none\") but now that we have color conversions we need separate src and dst premultipliedAlpha states (each being true or false).\n\nUnfortunately this is going to need changes in both Dawn and Blink but maybe we can smoothly transition with a few stages of changes.",
      "parentUuid": "a8eb32f1_ec7e960c",
      "range": {
        "startLine": 860,
        "startChar": 74,
        "endLine": 860,
        "endChar": 87
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbf358a7_d29c770e",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "Agree.  AlphaOp now means states more than a hint of next operations. I think I could keep the alphaOp attributes but add srcTextureAlphaState and dstTextureAlphaState attributes. So we could changes smoothly.",
      "parentUuid": "fe4acee0_c06bb787",
      "range": {
        "startLine": 860,
        "startChar": 74,
        "endLine": 860,
        "endChar": 87
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc927528_53c98baf",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 869,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "unrelated nit: Shouldn\u0027t the names be spelled \"flip y\" and \"alpha op\"?",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c6c7c13_c0a0a871",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "With the matrix now precomputed, u_srcColorSpace and u_dstColorSpace should be in principle used only to derive some specific information:\n\n- Is the conversion matrix an identity and therefore can be skipped?\n- What is the transfer function of src?\n- What is the transfer function of dst?\n- If the conversion matrix is an identity, can the transfer functions also be skipped?\n\nHaving the uniform inputs correspond to wgpu::ColorSpace confuses things a bit because that information is not really used directly.\n\nI think I would have the final logic look something like:\n\n // 3 \u003d skip all, 2 \u003d skip matrix and TF, 1 \u003d skip matrix, 0 \u003d skip none:\n u32 conversion_mode;\n\n // Later probably replaced with full a/b/c/d/e/f/g formulation:\n u32 src_is_nonlinear, dst_is_nonlinear; // 0 or 1\n\n u32 src_is_premul, dst_is_premul; // 0 or 1\n\n if (conversion_mode \u003c 3) { // Can\u0027t skip premul/unpremul\n   if (src_is_premul \u003d\u003d 1) unpremultiply;\n   if (conversion_type \u003c 2) { // Can\u0027t skip transfer function\n     if (src_is_nonlinear \u003d\u003d 1) convert nonlinear to linear;\n     if (conversion_type \u003c 1) { // Can\u0027t skip conversion matrix\n       apply conversion matrix;\n     }\n     if (dst_is_nonlinear \u003d\u003d 1) convert linear to nonlinear;\n   }\n   if (dst_is_premul \u003d\u003d 1) premultiply;\n }",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93e8f114_3e535421",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "That\u0027s much clear.\nThe reason I provide the color space is due to the super complicated cases here.https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_transform_unittest.cc;l\u003d481. (And I think I could use if-else to support all of them, but in fact, it will make the shader crazy.)\nBut I think we could ignore it because we don\u0027t touch HDR now.",
      "parentUuid": "0c6c7c13_c0a0a871",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bda588a1_1c1a22cf",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-02T22:29:19Z",
      "side": 1,
      "message": "I\u0027m not familiar enough with all of the possible transforms we\u0027ll need to do. I wrote this based on my understanding of your current shader but maybe it doesn\u0027t work well ultimately in the general case.\n\nThe color_transform code has the advantage that it\u0027s generating code so it doesn\u0027t need to worry about optimizing out unused parts. However I think we should avoid that if we can.\n\nWe can skip handling HDR for now, but I think we may need it relatively soon - though we don\u0027t have HDR canvas output yet, HDR video is well established and HDR video input is probably still useful as it can be used in HDR rendering pipelines.\n\nMaybe a better way to generalize would look more like:\n\n // 0x01 \u003d unpremultiply (src is premultiplied)\n // 0x02 \u003d do gamma decoding (src is nonlinear)\n // 0x04 \u003d apply conversion matrix (color primaries are not the same)\n // 0x08 \u003d do gamma encoding (dst is nonlinear)\n // 0x10 \u003d premultiply (dst is premultiplied)\n // (Inject more steps into this mask as needed)\n u32 step_mask;\n // TODO: Add info about which gamma encodings are used at each step, once it\u0027s not always sRGB\n\n if (step_mask \u0026 0x01) unpremultiply;\n if (step_mask \u0026 0x02) convert nonlinear to linear;\n if (step_mask \u0026 0x04) apply conversion matrix;\n if (step_mask \u0026 0x08) convert linear to nonlinear;\n if (step_mask \u0026 0x10) premultiply;\n\nI\u0027m not sure.",
      "parentUuid": "93e8f114_3e535421",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c783a7f_4f4dd93a",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-03T08:49:06Z",
      "side": 1,
      "message": "step_mask is great! And I combined it with AlphaOp changes. Still working on the new patch set.",
      "parentUuid": "bda588a1_1c1a22cf",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff5aa34_235f52c1",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "nit: transform",
      "range": {
        "startLine": 46,
        "startChar": 18,
        "endLine": 46,
        "endChar": 27
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7022d0e5_61be84ee",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "or perhaps colorSpaceConversionMatrix or conversionMatrix",
      "parentUuid": "1ff5aa34_235f52c1",
      "range": {
        "startLine": 46,
        "startChar": 18,
        "endLine": 46,
        "endChar": 27
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ef48d4c_8ae1e2d5",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 56,
        "startChar": 26,
        "endLine": 56,
        "endChar": 31
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1032bee_614ba165",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "nit: s/\\t/    / (replace tabs with 4 spaces)",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 1
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d38039_0df21801",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "nit: companded? Also the comment could be reflowed a bit I think (lines are very short)",
      "range": {
        "startLine": 58,
        "startChar": 32,
        "endLine": 58,
        "endChar": 41
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1c12020_2910b4a5",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "Un-companded, I think. It decodes from a sRGB values. (Comments from https://www.w3.org/TR/css-color-4/#color-conversion-code)",
      "parentUuid": "e2d38039_0df21801",
      "range": {
        "startLine": 58,
        "startChar": 32,
        "endLine": 58,
        "endChar": 41
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ec41d48_1aa73245",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-02T08:27:58Z",
      "side": 1,
      "message": "Ah, I\u0027ve never seen this word before, I thought you had made typo.",
      "parentUuid": "d1c12020_2910b4a5",
      "range": {
        "startLine": 58,
        "startChar": 32,
        "endLine": 58,
        "endChar": 41
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "098f9fdf_eafafa74",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-02T22:29:19Z",
      "side": 1,
      "message": "I haven\u0027t seen it before either, but from looking it up it seems like it refers to both the \"compression\" and \"expansion\" steps so it\u0027s perhaps not entirely clear. It\u0027s similar to \"codec\" (compression/decompression).\n\n\"gamma-uncompressed\" or \"uncompressed\" would be a good word here IMO as it will be more universally understood, but keeping the terminology from the CSS spec is also fine.",
      "parentUuid": "4ec41d48_1aa73245",
      "range": {
        "startLine": 58,
        "startChar": 32,
        "endLine": 58,
        "endChar": 41
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad8b4e06_e0454188",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "nit: Browser",
      "range": {
        "startLine": 60,
        "startChar": 49,
        "endLine": 60,
        "endChar": 56
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72deb60a_f0217449",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "nit: unified",
      "range": {
        "startLine": 62,
        "startChar": 57,
        "endLine": 62,
        "endChar": 62
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d23e7208_7b05a671",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "Also \"uses\", and add end punctuation:\n\n Chromium uses a unified formula:",
      "parentUuid": "72deb60a_f0217449",
      "range": {
        "startLine": 62,
        "startChar": 57,
        "endLine": 62,
        "endChar": 62
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfb48d0_7e2a564f",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "Architectures might prefer a \"vectorized\" version of this operation which operates on all three components in parallel, like:\n\n ... (v: vec3\u003cf32\u003e) -\u003e vec3\u003cf32\u003e {\n   let linear_part \u003d vec3\u003cf32\u003e(12.92) * v;\n   let gamma_part \u003d vec3\u003cf32\u003e(1.055) * pow(v, vec3\u003cf32\u003e(1.0 / 2.4)) - vec3\u003cf32\u003e(0.055);\n   return select(gamma_part, linear_part, v \u003c vec\u003cf32\u003e(0.0031308));\n }\n\nNot very necessary to do now, but could try it, or leave a TODO to consider it.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc42d4cd_9c17303e",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "That\u0027s a single value currently.",
      "range": {
        "startLine": 76,
        "startChar": 26,
        "endLine": 76,
        "endChar": 31
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "713a7587_078d05f5",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "nit: ranges are usually written [0, 1] in english I think. Same above.",
      "range": {
        "startLine": 76,
        "startChar": 73,
        "endLine": 76,
        "endChar": 80
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1986f026_220abec5",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "There isn\u0027t really consistency in English except in contexts where mathematical [inclusive,exclusive) style intervals are understood. Outside of math-y contexts 0.0-1.0 is much more common. I find in English if you just write [0, 1] or (0, 1) it\u0027s not always clear that it\u0027s an interval.\n\nIn this case I think 0.0-1.0, [0.0,1.0] and other variants are perfectly clear.",
      "parentUuid": "713a7587_078d05f5",
      "range": {
        "startLine": 76,
        "startChar": 73,
        "endLine": 76,
        "endChar": 80
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9136525_e4c7ac6e",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "ditto",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e40c0e4_07033d1b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "I think this will skip a premultiply/unpremultiply operation if one is needed.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "642b1b76_7dcc89c4",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "No, I think? If source and dst color space are same, we don\u0027t need to unpremultiply and premultiply. And \n\nThe logic to decode whether to skip AlphaOp is   \nvar unpremultiplied_in_color_space_conversion \u003d\n                    uniforms.u_srcTextureAlphaOp \u003d\u003d 1u \u0026\u0026\n                    uniforms.u_srcColorSpace !\u003d uniforms.u_dstColorSpace;\nIf they skip the color conversion, the unpremultiply should work. \n\nAm I miss something?",
      "parentUuid": "8e40c0e4_07033d1b",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e5347c_dce4c24a",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-02T22:29:19Z",
      "side": 1,
      "message": "I think I am just confused because some of the alpha premultiplication is handled inside color_space_conversion and some of it is outside. If you\u0027re going to refactor this then I\u0027ll not worry about it for now.",
      "parentUuid": "642b1b76_7dcc89c4",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebfa24d7_c476fa37",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "Can we have a constant that we use for this? This magic 1u is in a bunch of places and it\u0027s hard to remember that it is unpremultiply.\n\nAnd nit: we can divide by 1.0. That\u0027s free. Did you mean 0.0?",
      "range": {
        "startLine": 117,
        "startChar": 52,
        "endLine": 117,
        "endChar": 54
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bf21cfa_b2fccbae",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "It is important to avoid the divide if a\u003d0.0. Otherwise a valid color (transparent \u003d [0,0,0,0]) can result in NaN.",
      "parentUuid": "ebfa24d7_c476fa37",
      "range": {
        "startLine": 117,
        "startChar": 52,
        "endLine": 117,
        "endChar": 54
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10ae74a1_68cbc728",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "Ah, good point. Previously, I think we don\u0027t need to divide 1.0 so I skip it. But 0.0 is the one that need to handle here.\n\nAnd yes, constant value will make life easier. I\u0027ll add them.",
      "parentUuid": "8bf21cfa_b2fccbae",
      "range": {
        "startLine": 117,
        "startChar": 52,
        "endLine": 117,
        "endChar": 54
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c35a023d_806a9376",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "Doesn\u0027t srgb_nonlinear_to_linear_positive need to be run for both srgb and display p3?",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0d032b1_92b2f026",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "The reason is that we don\u0027t support display p3 as destination color space in this CL 😊\nI plan to use following CL to support more source/dest color space but I\u0027m not sure which ones should in the lists.",
      "parentUuid": "c35a023d_806a9376",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f89d909_d3571b3e",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-02T22:29:19Z",
      "side": 1,
      "message": "This switch is about the src color space though. I guess if we only support srgb-\u003esrgb (which doesn\u0027t need this shader) and p3-\u003esrgb then it doesn\u0027t strictly matter. But if that\u0027s the case, then IMO we may as well just do the srgb-decode and srg-encode unconditionally for the moment and add conditionals later.",
      "parentUuid": "c0d032b1_92b2f026",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6467e9f5_d782c9db",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "Also needs to run for display p3?",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "128b0aa3_d37e63c9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "[c] It\u0027s a bit weird to have srcTextureAlphaOp but also alphaOp. Shouldn\u0027t it be srcTextureAlphaOp + dstTextureAlphaOp?",
      "range": {
        "startLine": 152,
        "startChar": 42,
        "endLine": 152,
        "endChar": 44
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8206ed0f_9c0c15f9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "Yes, it is confusing. The alphaOp here means the concrete operation that the shader needs to do. But in srcTextureAlphaOp, it means a state. Maybe we should seperate them.",
      "parentUuid": "128b0aa3_d37e63c9",
      "range": {
        "startLine": 152,
        "startChar": 42,
        "endLine": 152,
        "endChar": 44
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f2806f9_27ce54b2",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "ditto, multiplication by 1.0 is free, we can just do it in this case.",
      "range": {
        "startLine": 153,
        "startChar": 20,
        "endLine": 153,
        "endChar": 34
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dda2a760_73e5a657",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 303,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "You can use ValidationUtils_autogen.h and call ValidateColorSpace().\n\nSo the code could be\n\n  DAWN_TRY(ValidateColorSpace(srcColorSpace));\n  DAWN_TRY(ValidateColorSpace(dstColorSpace));\n  DAWN_INVALID_IF(dstColorSpace, \"Destination color space (%s) is not %s.\", dstColorSpace, wgpu::ColorSpace::SRGB);\n  \n(and IMHO then we don\u0027t need a new function for this)",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb88b81_88f43473",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-01T23:23:17Z",
      "side": 1,
      "message": "nit: Source",
      "range": {
        "startLine": 308,
        "startChar": 55,
        "endLine": 308,
        "endChar": 61
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cba4b0f_645ec7e7",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 320,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "DontChange is not allowed? If it is allowed, then [a] should cover it already.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87d531c8_460303a2",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 320,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T03:06:48Z",
      "side": 1,
      "message": "DontChange means nothing for color space conversion. For AlphaOp, DontChange will be set in the condition that srcTexture and dstTexture has the same alpha Op e.g. srcTexture is premultilied and dstTexture is also premultiplied.\n\nBut for color conversion, if srcTexture is premultiplied, there should be extra steps to extract it.",
      "parentUuid": "1cba4b0f_645ec7e7",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27f40793_2257ff77",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 397,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "We must avoid global constructors in Chromium, and unordered_map\u0027s constructor is not constexpr. Can we instead have something similar to what is done in Format.cpp or VulkanExtensions.cpp where we have an array of values that\u0027s constexpr and we check when accessing it that the ColorSpace associated with the entry is what we expected?",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a586889_4c711b6e",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 403,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "nit: I think you can skip this type and that it will work.",
      "range": {
        "startLine": 403,
        "startChar": 14,
        "endLine": 403,
        "endChar": 34
      },
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e17d49f_da63b6d7",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 448,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "Why does fuseMatrix start as the partial identity? All values will be overwritten anyway so we can use {} (that will zero initialize).",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf6338e9_fb5adfbb",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 507,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "[a]",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dc1f2a3_7e38bbcb",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 548,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "[b]",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01a3f071_601e19b3",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 559,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "I think that if uniformData contained that data and GetTransformMatrix used at [b], then a pointer to the stack would be passed to GetTransformMatrix and \"return value optimization\" would happen. This means that we can keep using utils::CreateBufferFromData without any performance penalty.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47246776_6cb7faca",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "This seems to be exactly the same as DAWN_ENUM_VALIDATION_ERROR so why was it added?",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "890c70cf_fd9d12c4",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T03:06:48Z",
      "side": 1,
      "message": "Errr... the reason is that the name is DAWN_FORMAT_xx, but I\u0027m not verifed the formats....",
      "parentUuid": "47246776_6cb7faca",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b319a1_6a948953",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-02T03:30:20Z",
      "side": 1,
      "message": "I think \"FORMAT\" in this macro name is like \"Format the string\" (as in absl::StrFormat) not TextureFormat.",
      "parentUuid": "890c70cf_fd9d12c4",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "286b050e_97604309",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-02T07:48:32Z",
      "side": 1,
      "message": "Got it 😂",
      "parentUuid": "c8b319a1_6a948953",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8654b9d_5327c9da",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T16:21:43Z",
      "side": 1,
      "message": "Sorry I didn\u0027t have time to re-review the tests yet.",
      "revId": "4deded231d43e9cd3439f64c35a19b6a4ce3b77d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}