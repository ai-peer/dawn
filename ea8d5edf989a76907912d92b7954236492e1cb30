{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "efc6b009_6c80af98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-11-23T22:16:07Z",
      "side": 1,
      "message": "PTAL. I\u0027ll get CTS fixed tomorrow.\n\nIs this something that we would need to deprecate first? I\u0027m not sure about the API policy for changes like this, but I assume this could break existing stuff.",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b3e8446_a5f5a63d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-23T23:22:03Z",
      "side": 1,
      "message": "LGTM\n\nadding cwallez as the US is on holiday starting tomorrow",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a1535f0_412f8ed7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-23T23:22:03Z",
      "side": 1,
      "message": "yes, I think we should probably add the deprecation warning - and that\u0027ll probably mean adding another member like minBufferSizeNoPadding.\n\nI think a lot of people like to use the default bind group layout so they would be surprised to see the required size change on them.\n\ntests for the deprecation warning should go in DeprecatedAPITests.cpp\n\nfyi you might have conflicts with https://dawn-review.googlesource.com/c/dawn/+/111321\n(cc Shrek)",
      "parentUuid": "efc6b009_6c80af98",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62f2762f_67208758",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-23T23:22:23Z",
      "side": 1,
      "message": "actually cc\u0027ing Shrek",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d17779a_da41a2e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-11-24T01:29:16Z",
      "side": 1,
      "message": "\u003e that\u0027ll probably mean adding another member like minBufferSizeNoPadding.\n\nThese structs are auto-generated from dawn.json, so adding the extra member means it\u0027ll show up in dawn/webgpu.h as well. Is that going to affect dawn-native users in weird ways, or is it OK?\n\n\u003e tests for the deprecation warning should go in DeprecatedAPITests.cpp\n\nWill do.\n\n\u003e fyi you might have conflicts with https://dawn-review.googlesource.com/c/dawn/+/111321\n\nAck, will rebase when that lands.",
      "parentUuid": "0a1535f0_412f8ed7",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47999aa5_053b4183",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-24T01:39:12Z",
      "side": 1,
      "message": "hmm... so the [BindingInfo](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/BindingInfo.h;l\u003d61;drc\u003d24e5d915169bb4a4a0cff916ba1424fd6b31abcb;bpv\u003d1;bpt\u003d1) itself is internal to Dawn but it contains a BufferBindingLayout that is autogenerated.\n\nCould we make a\n```\nstruct BufferBindingLayoutWithExtras : BufferBindingLayout {\n  uint64_t minBindingSizeNoPadding;\n}\n```\n(idk a good name)\nand use that in places instead?\n\nalso, with these changes, watch out for `BindGroupLayoutBase::ComputeContentHash`, `SortBindingsCompare` and `operator!\u003d(const BindingInfo\u0026 a, const BindingInfo\u0026 b)`. These need to get updated whenever there are new members. (and any other places minBufferSize is used)",
      "parentUuid": "3d17779a_da41a2e3",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe7f5afd_cc478758",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-11-24T10:29:43Z",
      "side": 1,
      "message": "No additional comments LGTM",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22626e75_c4fedb7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-11-28T20:21:09Z",
      "side": 1,
      "message": "AFAICT this extra field would need to be propagated outside of Dawn though.\n\nFor a default pipeline layout, we copy it out from the internal `ShaderBindingInfo` to the external `BindGroupLayoutEntry` struct here:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/PipelineLayout.cpp;l\u003d179\n\n... and then it gets copied back into the internal `BindingInfo` when the bind group is created:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/BindGroupLayout.cpp;l\u003d327\n\nThat presumably means we can\u0027t solve this by just making an internal-only `BufferBindingLayoutWithExtras` struct as you suggest, unless I\u0027m misunderstanding?",
      "parentUuid": "47999aa5_053b4183",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ef65d7_4b9da1dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-28T20:43:59Z",
      "side": 1,
      "message": "hm that is all internal-ish but it does make things difficult.\nthat\u0027s the creation of the default pipeline layout which internally synthesizes bind group layouts for you from the shader bindings. So we could have an internal way of creating these bind group layouts ourselves, but the way it\u0027s written takes the same code path as creating BGLs externally.\n\nI guess what we need to do then is give the public API a dawn-internal extension struct on WGPUBufferBindingLayout similar to how WGPUExternalTextureBindingEntry (\"external texture binding entry\" in dawn.json) is chained on WGPUBindGroupEntry.\n\nIt\u0027ll be visible to dawn-native users which is a bit of a wart but probably fine since it won\u0027t change the struct layout of WGPUBufferBindingLayout.\n\nOr.. you could add an overload/optional argument to GetOrCreateBindGroupLayout that passes in some extra binding info. It would sort of be a hack but not visible externally.\n\nWDYT? open to other ideas you might have",
      "parentUuid": "22626e75_c4fedb7d",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b0a5766_3d741bde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-11-28T20:59:59Z",
      "side": 1,
      "message": "I\u0027m leaning towards the quicker hack since this is only temporary.\n\nThe other idea I had was to just switch directly to the new limit, but make /all/ cases where `bufferSize \u003c minBindingSize` a deprecation warning instead of a hard error (instead of just the cases that are in-between the old limit and the new limit).\n\nThat way we only need the one field, we wouldn\u0027t break any shipping stuff, and no extra hacks or structure gymnastics are needed. The only downside is that there would be some cases that used to be a hard error that would now be a deprecation warning, but that would just be temporary until the end of the deprecation period.\n\nWDYT?",
      "parentUuid": "c2ef65d7_4b9da1dd",
      "revId": "ea8d5edf989a76907912d92b7954236492e1cb30",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}