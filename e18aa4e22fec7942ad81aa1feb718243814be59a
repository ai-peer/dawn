{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9f40d53_a4e2a5f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-19T21:25:49Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb82f5f0_e41bb689",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-19T23:32:35Z",
      "side": 1,
      "message": "The fact that there\u0027s no API to query this from make me sad, but this seems like a solid approach for \"querying from PDF\".",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70690793_fd56fbad",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-20T13:50:04Z",
      "side": 1,
      "message": "u-nit: IMHO we can just inline this. It\u0027s a bit verbose but we only do it 5 times anyway.",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3442f77_2d1a7179",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-19T21:25:49Z",
      "side": 1,
      "message": "I like the macro table because it\u0027s easy to verify the contents against the Metal Feature Set Tables pdf. Alternatively, I could replace it with some hard-coded logic, since so many of the values are the same.",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10d3eb85_8af9951c",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 57,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-19T23:32:35Z",
      "side": 1,
      "message": "Seems fine to me. Only downside is the wrapping makes it slightly annoying to read in gerrit.",
      "parentUuid": "a3442f77_2d1a7179",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b7618a0_bff41e9d",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-20T13:50:04Z",
      "side": 1,
      "message": "The macro table seems overkill imho given that we only need to repeat things three times. Having some hardcoded tables is better than X macros because it is much easier to understand.\n\n struct MTLDeviceLimits {\n   uint32_t limit1;\n   // ...\n };\n\n struct LimitsForFamily {\n   *(MTLDeviceLimits::uint32_t) limit;\n   array\u003cuint32_t, 9\u003e values;\n };\n\n // This can be the same table format!\n LimitsForFamily limits[N] \u003d {\n   {\u0026MtLDeviceLimits::limit1, {1, 2, 3, 4, 5, 6, 7, 8, 9}},\n   // ...\n };\n\n MTLDeviceLimits mtlLimits;\n for (limit : limits) {\n   mtlLimits-\u003e(*limit.limit) \u003d limit.values[gpuFamilyIndex];\n }\n\n wgpuLimits.limit1 \u003d mtlLimits.limit1;\n // ...",
      "parentUuid": "10d3eb85_8af9951c",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eae50015_6d2e496a",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 392,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-20T13:50:04Z",
      "side": 1,
      "message": "nit: We can use this method only for things that aren\u0027t handled with supportsFeatureSet (for Apple 5-7)",
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2fa6a17_abb65c1d",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 543,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-19T21:25:49Z",
      "side": 1,
      "message": "worth doing this? or maybe just say 4GB like on D3D12?\nDownside of this is that we\u0027re now picking a value instead of basically saying \"kinda unlimited\". And the value we choose could affect what limit tier the device falls into if/when we do that.",
      "range": {
        "startLine": 538,
        "startChar": 12,
        "endLine": 543,
        "endChar": 67
      },
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2abe605_a9cec705",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 543,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-19T23:32:35Z",
      "side": 1,
      "message": "Using the max buffer size seems reasonable.",
      "parentUuid": "c2fa6a17_abb65c1d",
      "range": {
        "startLine": 538,
        "startChar": 12,
        "endLine": 543,
        "endChar": 67
      },
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bc8f441_711df50c",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 10
      },
      "lineNbr": 543,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-20T13:50:04Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "a2abe605_a9cec705",
      "range": {
        "startLine": 538,
        "startChar": 12,
        "endLine": 543,
        "endChar": 67
      },
      "revId": "e18aa4e22fec7942ad81aa1feb718243814be59a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}