{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fa9a5bb9_c843640a",
        "filename": "src/dawn/native/CachedObject.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "instead of loosening the ASSERT, we should have a separate SetContentHashForTesting if you need to set it in the tests",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 43,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b8de7df_cb5d0c25",
        "filename": "src/dawn/native/CachedObject.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Fair enough, but I ended up needing to override `SetContentHash` instead because there wasn\u0027t another good way to bypass this without adding extra branching in the base `CachedObject` code which wouldn\u0027t be ideal.",
      "parentUuid": "fa9a5bb9_c843640a",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 43,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47a24756_2d6f3796",
        "filename": "src/dawn/native/CachedObject.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-17T22:38:22Z",
      "side": 1,
      "message": "sorry, still not understanding what it\u0027s for\n\nit seems like all overrides of SetContentHash ASSERT that the hash is the same as GetContentHash()? (the older invocations of it in the mocks are now deleted)",
      "parentUuid": "9b8de7df_cb5d0c25",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 43,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ceb5a1e_7a0dda58",
        "filename": "src/dawn/native/CachedObject.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T23:30:14Z",
      "side": 1,
      "message": "Hmm ok, so right now, most of the simpler objects (i.e. bgl, sampler, pipelinelayout), do NOT call `SetContentHash` in their constructor (`*Pipelines` already call it in their ctors). It is only called in the device when we first try to hit the cache, miss, and create a new object. This poses an issue when we create a mock object NOT through the `device.Create*` functions because the objects `SetContentHash` is never called. (We may do this if we are just trying some functionality on the specific object, i.e. API functions with mocked `Impl`s for backend functionality).\n\nIn general, this isn\u0027t a problem because this will just mean that the mock object is not in Device cache and we can ignore it. However, this IS a problem if we compose objects, i.e. `PipelineLayout` inside `*Pipelines` because the hash of the `*Pipelines` require the hash of the `PipelineLayout` (which may or may not be set if we created the `PipelineLayoutMock` directly rather than through a mocked `EXPECT_CALL` on a device). This case causes a crash because we will try to call `GetContentHash` on the `PipelineLayout` and hit an `ASSERT`.\n\nTo circumvent this and make the mock objects a bit easier to use without this annoying side-effect that users MUST \"recreate\" new mock objects through the device every time, I wanted all the mock objects to just pre-compute the hash (performance isn\u0027t as important for these mock objects). If I do that though, then if the user DOES \"recreate\" the object by making it the return value of an `EXPECT_CALL`, then the internal Device code will try to call `SetContentHash` again and hit an `ASSERT`. Soooo... to allow for both use cases, I overrode the `SetContentHash` on the mock objects to NOT do the assert on mock objects.\n\nAlternatives I considered:\n- Relaxing the `ASSERT` on `CachedObject` (but as you noted in the previous comment maybe this isn\u0027t the best way?)\n- Adding some other state to `CachedObject` so that the `ASSERT`s don\u0027t trigger for mocks, but that adds more overhead on all non-mock objects just for testing which is probably undesirable.",
      "parentUuid": "47a24756_2d6f3796",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 43,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b50266c_b300c9dd",
        "filename": "src/dawn/native/CachedObject.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-21T18:13:34Z",
      "side": 1,
      "message": "ok, so if I\u0027m understanding, we want the following things:\n 1. objects always have their content hash set\n 2. you can create mocks without device.Create* so you can set expectations before Initialize().\n 3. return a mock from EXPECT_CALL(Create*Impl)....WillReturn(mockObj);\n \nAdditionally, I\u0027d like the following:\n 4. change as little in the frontend to make the mocks happy. Otherwise I think it\u0027s indicative of poor layering.\n \n(3) is already fulfilled by (2) and (1) IIUC. since you can make the mock object and it always has its hash set. Which means you can return it from the EXPECT_CALL and inserting it into the cache will be happy.\n\nI think we can achieve the others by:\n - having Mock constructors NEVER set the hash\n - Creating objects in the mock Create*Impl calls with new MockFoo.\n - Creating all objects in the tests either by device.CreateFoo or MockFoo::Create. MockFoo::Create performs SetContentHash(ComputeContentHash()); I believe this ensures we always have a hash set, and we don\u0027t set it twice.\n\nAre there are scenarios where we need to do something like?\n```\n  auto mock \u003d MockFoo::Create(..);\n  EXPECT_CALL(Create*Impl)...WillReturn(mock); /* instead of new MockFoo */\n```\nif so, we can use a SetContentHashForTesting which doesn\u0027t set mContentHashIsInitialized. But why are situations like this needed versus just using `new MockFoo` whenever returning something from an Impl call?",
      "parentUuid": "5ceb5a1e_7a0dda58",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 43,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6557c8e_8aa4aab3",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "why can\u0027t we have DeviceMock use the normal base constructor like the other objects?",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 213,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c23dcf06_f19daa58",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "As discussed offline, that requires a mock adapter and I can do that in a follow up. Added a TODO comment as well in the DeviceMock header with some notes to update places.",
      "parentUuid": "f6557c8e_8aa4aab3",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 213,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "778b120d_a071cdc3",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 3
      },
      "lineNbr": 595,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "these could actually be `static` - I think",
      "range": {
        "startLine": 587,
        "startChar": 0,
        "endLine": 595,
        "endChar": 45
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "305fb2d5_2a269ae3",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 3
      },
      "lineNbr": 595,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "I think they are?",
      "parentUuid": "778b120d_a071cdc3",
      "range": {
        "startLine": 587,
        "startChar": 0,
        "endLine": 595,
        "endChar": 45
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "020020df_2dade4f2",
        "filename": "src/dawn/native/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "We don\u0027t need this complexity for an ASSERT\n\ncan do:\n\n`layoutRef \u003d ValidateLayoutAndGetComputePipelineDescriptorWithDefaults(...).AcquireSuccess()`\n\nand\n\n`ValidateAndParseShaderModule(device, descriptor, \u0026parseResult, nullptr).AcquireSuccess();`",
      "range": {
        "startLine": 158,
        "startChar": 45,
        "endLine": 159,
        "endChar": 39
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71271709_a6cb85b6",
        "filename": "src/dawn/native/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Ah! Nice this is much nicer thanks!",
      "parentUuid": "020020df_2dade4f2",
      "range": {
        "startLine": 158,
        "startChar": 45,
        "endLine": 159,
        "endChar": 39
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f429abc_9fd5a126",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "we could pass the toggle to the DeviceBase constructor if we used it",
      "range": {
        "startLine": 86,
        "startChar": 21,
        "endLine": 86,
        "endChar": 45
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4320d1b_f7aeb3ea",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Will follow up with adapter mock change(s).",
      "parentUuid": "3f429abc_9fd5a126",
      "range": {
        "startLine": 86,
        "startChar": 21,
        "endLine": 86,
        "endChar": 45
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c393daf_5e4b1738",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "shouldn\u0027t this be \"Get**Empty**BGL?\"",
      "range": {
        "startLine": 89,
        "startChar": 25,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1d41ed3_9a7080f5",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c393daf_5e4b1738",
      "range": {
        "startLine": 89,
        "startChar": 25,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15870172_592fcb86",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "this is existing code, but I\u0027m curious why we even care to retain these as members versus re-creating them when needed.\n\nseems more straightforward to just use ShaderModuleMock::Create when needed",
      "range": {
        "startLine": 135,
        "startChar": 4,
        "endLine": 140,
        "endChar": 36
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "579f8f8b_ad235211",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15870172_592fcb86",
      "range": {
        "startLine": 135,
        "startChar": 4,
        "endLine": 140,
        "endChar": 36
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aed4a0d6_56ebb454",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "I don\u0027t understand the \"Native\" naming - what is it for?",
      "range": {
        "startLine": 143,
        "startChar": 36,
        "endLine": 143,
        "endChar": 42
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e96f1b4f_68f007c0",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "`Native` is calling ObjectBase::Destroy directly, `Api` is calling the Destroy function that is exposed on the actual webgpu api, i.e. only on buffers and textures.",
      "parentUuid": "aed4a0d6_56ebb454",
      "range": {
        "startLine": 143,
        "startChar": 36,
        "endLine": 143,
        "endChar": 42
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20f68b3a_26de58ec",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "ditto: what is the \"Api\" naming for?",
      "range": {
        "startLine": 270,
        "startChar": 39,
        "endLine": 270,
        "endChar": 42
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfede377_e0f3e0a0",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "See comment above.",
      "parentUuid": "20f68b3a_26de58ec",
      "range": {
        "startLine": 270,
        "startChar": 39,
        "endLine": 270,
        "endChar": 42
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "209f68bd_1e55847d",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 636,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "IMO it\u0027s kinda weird to make a mock for the sake of getting a pre-created descriptor that is saved. The descriptor is pretty small - why not just inline it here?",
      "range": {
        "startLine": 636,
        "startChar": 50,
        "endLine": 636,
        "endChar": 81
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20a3bfee_d84b29c7",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 636,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "209f68bd_1e55847d",
      "range": {
        "startLine": 636,
        "startChar": 50,
        "endLine": 636,
        "endChar": 81
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c06fb3ab_4fdcdbdd",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 985,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "is this getting another utils:: now?",
      "range": {
        "startLine": 985,
        "startChar": 4,
        "endLine": 985,
        "endChar": 11
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ccf3c4a_59cc28df",
        "filename": "src/dawn/tests/unittests/native/DestroyObjectTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 985,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Yea, I need the native one also for `BindingLayoutEntryInitializationHelper`.",
      "parentUuid": "c06fb3ab_4fdcdbdd",
      "range": {
        "startLine": 985,
        "startChar": 4,
        "endLine": 985,
        "endChar": 11
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "077c9376_7fa65bd6",
        "filename": "src/dawn/tests/unittests/native/mocks/DawnMockTest.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "should be in the constructor",
      "range": {
        "startLine": 28,
        "startChar": 3,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26ba693c_f7910b10",
        "filename": "src/dawn/tests/unittests/native/mocks/DawnMockTest.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "077c9376_7fa65bd6",
      "range": {
        "startLine": 28,
        "startChar": 3,
        "endLine": 29,
        "endChar": 68
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad7a2e5a_d2a551a4",
        "filename": "src/dawn/tests/unittests/native/mocks/DeviceMock.cpp",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "Why does ComputePipelineMock::Create need to validate the descriptor?\n\nthe validation already happens in DeviceBase before calling CreateUninitializedComputePipelineImpl\n\ncould we do deviceMock-\u003eCreateComputePipeline(...) in the tests instead?",
      "range": {
        "startLine": 95,
        "startChar": 23,
        "endLine": 95,
        "endChar": 50
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb31c15f_2af7cdf6",
        "filename": "src/dawn/tests/unittests/native/mocks/DeviceMock.cpp",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "So with pipelines the mocks are a bit trickier because (1) ideally, user can Create/Construct one outside of calling `device-\u003eCreatePipeline` so that we can explicitly set the expectations on the `Initialize` call (imagine we wanted the `Initialize` call to fail), (2) the base constructors (i.e. `RenderPipelineBase` and `ComputePipelineBase`) call `ComputeContentHash` which requires a layout to be specified (otherwise we can crash because of bad pointers), (3) it would make most sense for users to just be able to create the mock pipelines exactly as they would (with descriptors that may leave `layout \u003d\u003d nullptr` and infer it internally).\n\nSo addressing the question in the comment now with an example of why I did it like that... If we don\u0027t do the validation step in this factory, and we passed a descriptor that does not explicitly specify a pipeline layout, we won\u0027t create the layout (it\u0027s `nullptr`), and as a result the base constructor will segfault in the `ComputeContentHash` call.",
      "parentUuid": "ad7a2e5a_d2a551a4",
      "range": {
        "startLine": 95,
        "startChar": 23,
        "endLine": 95,
        "endChar": 50
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aef59dc_3754c7a5",
        "filename": "src/dawn/tests/unittests/native/mocks/DeviceMock.cpp",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "would it be possible to create DeviceMock with mAdapter instead adding another override?",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 118,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41286fbd_73d0dce1",
        "filename": "src/dawn/tests/unittests/native/mocks/DeviceMock.cpp",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Deferred.",
      "parentUuid": "2aef59dc_3754c7a5",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 118,
        "endChar": 1
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2de0508c_9892920e",
        "filename": "src/dawn/tests/unittests/native/mocks/DeviceMock.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-15T16:43:44Z",
      "side": 1,
      "message": "is this ever passed?",
      "range": {
        "startLine": 37,
        "startChar": 24,
        "endLine": 37,
        "endChar": 61
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da33ed17_94b2768d",
        "filename": "src/dawn/tests/unittests/native/mocks/DeviceMock.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-17T00:44:15Z",
      "side": 1,
      "message": "Ah, no good catch. I originally thought I would need to pass it in if I wanted to set expectations on it, but the `GetQueueMock` function fixed that.",
      "parentUuid": "2de0508c_9892920e",
      "range": {
        "startLine": 37,
        "startChar": 24,
        "endLine": 37,
        "endChar": 61
      },
      "revId": "6a1b88535cb21d0300cada00917ad58f4a96c23d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}