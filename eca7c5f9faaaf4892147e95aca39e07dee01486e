{
  "comments": [
    {
      "key": {
        "uuid": "96866cfa_73131628",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-21T19:58:38Z",
      "side": 1,
      "message": "Sorry if my previous comment on this code was misleading.\nIf this bitset is going to persist for the entire pass, which could make this iteration wrong. It only needs to know the diff between the new and old heap at the time of reallocation.\n    \nConsider: \n                                             A B C D\n mBindGroupsAllocated                     \u003c\u003d 1 1 1 1  (set by some previous state)\n mBindGroupLayoutsMask                    \u003c\u003d 1 1 0 0  (change in pipeline)\n mDirtyBindGroupsObjectChangedOrIsDynamic \u003c\u003d 0 1 0 0  (due to SetBindGroup)\n in Apply... reallocation happens\n   - bind group B is allocated in the new heap, then\n   - (mBindGroupsAllocated \u0026 mBindGroupLayoutsMask) bind groups A and B are reallocated\n   - therefore, bind group B is unnecessarily allocated twice\n\nMaybe it will be better if we reverse the logic: Reapply all bind groups except those placed in the new heap.\n\nlocal variable std::bitset\u003c\u003e newHeapBindGroups;\n\n// In the first loop\nif (reapplyBindGroups) {\n   newHeapBindGroups.set(index);\n}\n\n// For this loop\nif (reapplyBindGroups) {\n  for (uint32_t index : (mBindGroupLayoutsMask \u0026 ~newHeapBindGroups)) {\n    // ...\n  }\n}",
      "range": {
        "startLine": 114,
        "startChar": 52,
        "endLine": 114,
        "endChar": 72
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a2cd9ac_6747ad04",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 114,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-11-22T22:42:19Z",
      "side": 1,
      "message": "The bindgroup layout mask will track both dirty and non-dirty bindgroups whereas mDirtyBindGroupsObjectChangedOrIsDynamic is only dirty bindgroups for the current draw. Is that understanding correct? If so, it makes more sense to reverse it.",
      "parentUuid": "96866cfa_73131628",
      "range": {
        "startLine": 114,
        "startChar": 52,
        "endLine": 114,
        "endChar": 72
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ab6a031_bacb421f",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-22T22:58:34Z",
      "side": 1,
      "message": "Yup.\n\nmBindGroupLayoutsMask is the mask of everything that must be bound by the time we call Draw\n\nmDirtyBindGroupsObjectChangedOrIsDynamic are dirty indices set when someone calls SetBindGroup(index, ...)\n\nWe have this separation because if you bind all the bind groups, then Draw(). Then rebind just one bind group, we only need to update descriptors for that one bind group. (Unless of course we reallocate descriptor heaps).",
      "parentUuid": "9a2cd9ac_6747ad04",
      "range": {
        "startLine": 114,
        "startChar": 52,
        "endLine": 114,
        "endChar": 72
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ba21f6f_3b7a9ad9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 123,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-21T19:58:38Z",
      "side": 1,
      "message": "Should be |\u003d otherwise previous non-dirty bind groups won\u0027t get reapplied. Although should probably change given my other comment.",
      "range": {
        "startLine": 121,
        "startChar": 16,
        "endLine": 123,
        "endChar": 80
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba0866da_cfea986d",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 193,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-21T19:58:38Z",
      "side": 1,
      "message": "nit: Unrelated to your change, but while you\u0027re here, we should make these arguments const if possible. I think dynamicOffsets and pipelineLayout can be const.",
      "range": {
        "startLine": 189,
        "startChar": 34,
        "endLine": 193,
        "endChar": 58
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988ff149_2d2751e8",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 195,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-21T19:58:38Z",
      "side": 1,
      "message": "nit: Mutable variables should be passed by pointer",
      "range": {
        "startLine": 195,
        "startChar": 34,
        "endLine": 195,
        "endChar": 57
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c2643aa_8887e2c7",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 200,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-21T19:58:38Z",
      "side": 1,
      "message": "nit: This would be better named \"requiresReallocation\" or \"forceAllocation\"",
      "range": {
        "startLine": 200,
        "startChar": 16,
        "endLine": 200,
        "endChar": 34
      },
      "revId": "eca7c5f9faaaf4892147e95aca39e07dee01486e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}