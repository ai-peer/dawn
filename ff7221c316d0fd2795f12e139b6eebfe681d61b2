{
  "comments": [
    {
      "key": {
        "uuid": "bdc46f45_25a95701",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-15T02:11:03Z",
      "side": 1,
      "message": "Why does mResourceHeap need to be protected?",
      "range": {
        "startLine": 72,
        "startChar": 26,
        "endLine": 72,
        "endChar": 39
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae78eaae_bebdaf97",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-18T17:06:59Z",
      "side": 1,
      "message": "I\u0027m accessing it from ResourceHeapAllocation.",
      "parentUuid": "bdc46f45_25a95701",
      "range": {
        "startLine": 72,
        "startChar": 26,
        "endLine": 72,
        "endChar": 39
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b0108fa_a1286115",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Where are you using it in ResourceHeapAllocation?",
      "parentUuid": "ae78eaae_bebdaf97",
      "range": {
        "startLine": 72,
        "startChar": 26,
        "endLine": 72,
        "endChar": 39
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b690ace8_eb94ad36",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "ResourceHeapAllocation::Invalidate()",
      "parentUuid": "4b0108fa_a1286115",
      "range": {
        "startLine": 72,
        "startChar": 26,
        "endLine": 72,
        "endChar": 39
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01facc76_3acd571a",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-15T02:11:03Z",
      "side": 1,
      "message": "Nit: Per the Google C++ coding standards, the protected section must come before the private section.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78dd1e1a_8c08a98d",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01facc76_3acd571a",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f536fe98_ff9da5d9",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-15T02:11:03Z",
      "side": 1,
      "message": "Nit: Turning off the component will not necessary cause allocation failures.  But it may cause inefficient GPU usage if the video memory manager incorrectly picks which existing allocations to evict.",
      "range": {
        "startLine": 90,
        "startChar": 56,
        "endLine": 91,
        "endChar": 90
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "060074d1_9aa8b9d5",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-18T17:06:59Z",
      "side": 1,
      "message": "This isn\u0027t what I\u0027m seeing. Currently in Dawn, the moment I try to allocate any more than physical device memory I get an OOM error.",
      "parentUuid": "f536fe98_ff9da5d9",
      "range": {
        "startLine": 90,
        "startChar": 56,
        "endLine": 91,
        "endChar": 90
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84125c58_f8a970b0",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Very well. I\u0027m presuming this is a policy decision on the part of D3D12.  The video memory manager is free to evict things behind your back to make room for foreground applications.",
      "parentUuid": "060074d1_9aa8b9d5",
      "range": {
        "startLine": 90,
        "startChar": 56,
        "endLine": 91,
        "endChar": 90
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d00b407_89e104fd",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "\u003e\u003e  The video memory manager is free to evict things behind your back\n\nI do see this behavior when the things were created with CreateCommittedResource - but allocations created from CreateHeap do not seem to be movable by the VMM.",
      "parentUuid": "84125c58_f8a970b0",
      "range": {
        "startLine": 90,
        "startChar": 56,
        "endLine": 91,
        "endChar": 90
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5daf3f94_3ee2910d",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Nit: Placeholder issue to make sure you change this \u0027true\u0027 back to \u0027enableBackendValidation\u0027",
      "range": {
        "startLine": 35,
        "startChar": 16,
        "endLine": 35,
        "endChar": 25
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61575f1c_aa7314e1",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5daf3f94_3ee2910d",
      "range": {
        "startLine": 35,
        "startChar": 16,
        "endLine": 35,
        "endChar": 25
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44aa258b_ad8c9663",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Instead of adding new heaps to the back of the vector unconditionally, consider using std::set or similar data structure. If you find that performance is an issue, then we can have a separate \u0027pending resident\u0027 list we add things to. Checking would become O(1).",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 91,
        "endChar": 0
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2b5214a_d1a9fbc9",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44aa258b_ad8c9663",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 91,
        "endChar": 0
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "215217d7_38e9e87d",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 171,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Why is mCommandRecordingContext a std::unique_ptr instead of a member variable?",
      "range": {
        "startLine": 171,
        "startChar": 7,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1b11ee4_a7a680fa",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 171,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "I had a reason - but it\u0027s no longer relevant. Reverted.",
      "parentUuid": "215217d7_38e9e87d",
      "range": {
        "startLine": 171,
        "startChar": 7,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0919050_9e7dba72",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Instead of having to static_cast Heap here, have heapBase point to a unique_ptr of Heap instead of ResourceHeapBase.  Then, you should be able to turn that into a unique_ptr of the base class to return to the caller.",
      "range": {
        "startLine": 55,
        "startChar": 64,
        "endLine": 55,
        "endChar": 82
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa7b5ab_3eff9a65",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "I could -- but then I can\u0027t directly return heapBase because it requires a ResourceHeapBase return type.",
      "parentUuid": "e0919050_9e7dba72",
      "range": {
        "startLine": 55,
        "startChar": 64,
        "endLine": 55,
        "endChar": 82
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e22d533a_79eec0e6",
        "filename": "src/dawn_native/d3d12/HeapD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-15T02:11:03Z",
      "side": 1,
      "message": "Since the ID3D12Heap C++ class inherits from ID3D12Pageable, we should be able to store a pointer to ID3D12Pageable and QI for ID3D12Heap when we need it.",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 38
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "225962f7_350ae533",
        "filename": "src/dawn_native/d3d12/HeapD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-18T17:06:59Z",
      "side": 1,
      "message": "I agree, but keeping both was for safety when using GetD3D12Heap(). Since my change makes it possible to use the Heap object to represent a \"implicit heap\" (which is actually a ID3D12Resource), we can\u0027t allow GetD3D12Heap() to return the ID3D12Resource. An ASSERT for (mAllocationMethod \u003d\u003d AllocationMethod::kDirect) would be more appropriate - but then I\u0027d have to add the mAllocationMethod variable, which is otherwise unused.",
      "parentUuid": "e22d533a_79eec0e6",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 38
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02a568d5_1e9142e7",
        "filename": "src/dawn_native/d3d12/HeapD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Storing one pointer and using QueryInterface to get to the other is safe. QueryInterface will fail if the you cannot go from one interface to the other. \n\nFor the case where one interface derives from the other one, you can simply assign one pointer to the other one -- no casting necessary.",
      "parentUuid": "225962f7_350ae533",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 38
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b491325_bae20e52",
        "filename": "src/dawn_native/d3d12/HeapD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02a568d5_1e9142e7",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 38
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9deb8650_10e0173c",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Consider renaming Evict to EvictSingleEntry to make its job more clear. Evict by itself implies that we\u0027re evicting all of the resources.",
      "range": {
        "startLine": 49,
        "startChar": 14,
        "endLine": 49,
        "endChar": 39
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bd754c9_be183931",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9deb8650_10e0173c",
      "range": {
        "startLine": 49,
        "startChar": 14,
        "endLine": 49,
        "endChar": 39
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27be07e3_ea6b4f35",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-20T02:17:34Z",
      "side": 1,
      "message": "Can Evict be private be a private method to the class?",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 26
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89fb95b1_2f474c94",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-20T19:05:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27be07e3_ea6b4f35",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 26
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a40de3e_a4bec4fa",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-02-15T02:11:03Z",
      "side": 1,
      "message": "I would prefer that we reference count Heap or use unique_ptr (if possible) instead of using shared_ptr. Shared_ptr is really two pointers under the covers and may not be as efficient. Last time I checked Chromium forbid the use of shared_ptr in the mainline code. Only third_party code except blink is allowed to use it.",
      "range": {
        "startLine": 25,
        "startChar": 51,
        "endLine": 25,
        "endChar": 66
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b6cba43_4978205a",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-18T17:06:59Z",
      "side": 1,
      "message": "In a separate thread w/ Bryan - I\u0027m planning to eliminate the mImplicitHeap variable and instead store in ResourceMemoryAllocation::mResourceHeap with manual memory management.",
      "parentUuid": "1a40de3e_a4bec4fa",
      "range": {
        "startLine": 25,
        "startChar": 51,
        "endLine": 25,
        "endChar": 66
      },
      "revId": "ff7221c316d0fd2795f12e139b6eebfe681d61b2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}