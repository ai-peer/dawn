{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "764d7a2d_f914a2b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-07-25T18:28:10Z",
      "side": 1,
      "message": "Thanks for your review, Corentin, Yang and Austin!",
      "revId": "0641709fc2435a3e29a5d757250db177d88ec743",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74d7eb0d_c15d1512",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-26T19:38:47Z",
      "side": 1,
      "message": "LGTM - couple more comments",
      "revId": "0641709fc2435a3e29a5d757250db177d88ec743",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "942cb720_f45ac6e9",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-26T19:38:47Z",
      "side": 1,
      "message": "hmm, while using the boolean is correct, I think it would be logically equivalent if we had a helper function:\n`uint64_t ResourceAllocatorManager::GetResourcePadding(const D3D12_RESOURCE_DESC\u0026) const;`\nand called it inside of `CreatePlacedResource` and `CreateCommittedResource`.\nI think this would be neater since when looking at the code, you don\u0027t have to trace through where the boolean comes from or what it will do downstream.\nAll the logic would be right next to resource creation like:\n\n```\nCreatePlacedResource(...) {\n  info.SizeInBytes +\u003d GetRequiredResourcePadding(desc);\n}\n\nCreateCommittedResource(...) {\n  uint64_t padding \u003d GetRequiredResourcePadding(desc);\n  if (padding \u003d\u003d 0) {\n    // create committed\n  } else {\n    info.SizeInBytes +\u003d padding;\n    // create placed\n  }\n}\n```",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 219,
        "endChar": 84
      },
      "revId": "0641709fc2435a3e29a5d757250db177d88ec743",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22cf2340_806925a8",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-26T19:38:47Z",
      "side": 1,
      "message": "u-nit: I think \"CreatePlacedResourceInHeap\" reads better. We\u0027re making the resource inside the heap, not turning the entire heap into a placed resource.\n\nAlso, u-nit: perhaps place the heap as the first argument.",
      "range": {
        "startLine": 91,
        "startChar": 15,
        "endLine": 91,
        "endChar": 43
      },
      "revId": "0641709fc2435a3e29a5d757250db177d88ec743",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64d3cb2f_4d3b316e",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-26T19:38:47Z",
      "side": 1,
      "message": "could we return ResultOrError\u003cComPtr\u003cID3D12Resource\u003e\u003e instead of the out-argument?",
      "range": {
        "startLine": 95,
        "startChar": 44,
        "endLine": 95,
        "endChar": 82
      },
      "revId": "0641709fc2435a3e29a5d757250db177d88ec743",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}