{
  "comments": [
    {
      "key": {
        "uuid": "b5270bfa_b06f3a72",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-01T00:22:25Z",
      "side": 1,
      "message": "Can viewAllocation and samplerAllocation be passed by const reference?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f768af37_139a798d",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5270bfa_b06f3a72",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8908723_e68570e1",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-01T00:22:25Z",
      "side": 1,
      "message": "Instead of pushing back a uint64_t allocation index for every free block in the heap, can we use a bit vector instead?  Each bit in the vector would represent a block in the buffer: 1 means free, 0 means taken. The position in the bit vector can be used to calculate the uint64_t offset when we need it.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcf3e0dd_50c0bc9b",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Doesn\u0027t that require a search for the next free bit upon Allocate()? I would like to avoid, if possible.",
      "parentUuid": "e8908723_e68570e1",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8291f47_0616d384",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-01T22:57:38Z",
      "side": 1,
      "message": "Yea, 1. we don\u0027t have a dynamically sized bit vector class right now, and 2. it could be much slower to do a bitscan if many of the first bits are zero. It could be worth trying this out when/if we make such a dynamically sized bit vector, but I think the list of indices is fine for now. Memory savings would be nice if the bit vector is just as fast.",
      "parentUuid": "fcf3e0dd_50c0bc9b",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d64768c_865f5869",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-01T23:28:59Z",
      "side": 1,
      "message": "The purpose of my feedback was around the size used, especially when we were storing uin64_t indices for each and every free descriptor in the heap. \n\nI know that Dawn has a BitSetIterator what does not test every single bit, though we would need to adapt it for bit vectors.\n\nBut maybe it\u0027s not so bad now that we\u0027re using 32bit integers. Bryan, how much memory are we talking about here?",
      "parentUuid": "e8291f47_0616d384",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06fb53d7_bc0b6524",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-01T00:40:14Z",
      "side": 1,
      "message": "comment needs updating",
      "range": {
        "startLine": 29,
        "startChar": 21,
        "endLine": 30,
        "endChar": 17
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a46eed1_854beee9",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06fb53d7_bc0b6524",
      "range": {
        "startLine": 29,
        "startChar": 21,
        "endLine": 30,
        "endChar": 17
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ca86f1f_56eee92c",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-01T00:22:25Z",
      "side": 1,
      "message": "I think I understand how your allocator works but I am confused by your explanation. If every allocation is \u0027block\u0027 size bytes, what do you mean when you say \"the entire free block is allocated from the heap\"?  This implies that there can be different sized blocks. \n\nWhen people typically use the word \"fragmented\" to describe a heap, they mean that there are lots of little blocks scattered throughout the heap but none big enough to service an allocation request. In your heap, this will never happen as I understand it. If there is free space, the space should always be big enough for at least one allocation.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 37,
        "endChar": 50
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6ab169f_2a3546b2",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Comment went stale.",
      "parentUuid": "5ca86f1f_56eee92c",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 37,
        "endChar": 50
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c21481d2_9d2ebfe2",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-01T00:40:14Z",
      "side": 1,
      "message": "Would it be possible to have these work with the same types? It would be nice to make Allocate / Deallocate match.\n\nPerhaps we could even do away with NonShaderVisibleHeapAllocation. Looks like it\u0027s only used in the BindGroup::BindGroup constructor for viewAllocation.GetCPUHandle(asdf)\n\nWhat do you think about returning CPUDescriptorAllocation from this function instead, and then passing the CPUDescriptorAllocation and mSizeIncrement into BindGroup::BindGroup. Then we can remove NonShaderVisibleHeapAllocation.\n\nWe can have CPUDescriptorHeapAllocation::OffsetFrom(sizeIncrement, offset) instead of NonShaderVisibleHeapAllocation::GetCPUHandle(offset)",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 53,
        "endChar": 89
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2c0ca87_ad195b0c",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 53,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "c21481d2_9d2ebfe2",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 53,
        "endChar": 89
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dab7c30_0ebfcb9c",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-01T00:40:14Z",
      "side": 1,
      "message": "Since this is an index, it could be uint32_t (or smaller?). It only needs to be as large as mHeapSize / mBlockSize.",
      "range": {
        "startLine": 58,
        "startChar": 24,
        "endLine": 58,
        "endChar": 32
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a57e68f7_cc21d447",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2dab7c30_0ebfcb9c",
      "range": {
        "startLine": 58,
        "startChar": 24,
        "endLine": 58,
        "endChar": 32
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2781eb8_fe7a9b57",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-01T00:22:25Z",
      "side": 1,
      "message": "Do CPU descriptor heaps suffer from the same slow allocation problem that GPU descriptor heaps do?  If not, can we dispense with pooling them?",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9852970_e6f8ca1f",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Calling CreateDescriptorHeap() is always slower than not. Since the heap size is TBD, pooling avoids these known costs and should memory usage become an issue, there a better ways to resolve than disabling pooling (ie. trimming).",
      "parentUuid": "e2781eb8_fe7a9b57",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7958c7da_2020de76",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-01T00:22:25Z",
      "side": 1,
      "message": "Please add comments describing what these member variables (mSizeIncrement, mBlockSize, mHeapSize) are used for and what the units are.",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 71,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba7767f7_517edd54",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-01T21:06:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7958c7da_2020de76",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 71,
        "endChar": 0
      },
      "revId": "2bdad6a65a9a9107eedce1b2d992f5d74ef0a482",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}