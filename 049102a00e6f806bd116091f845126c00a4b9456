{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5e4d4eec_4f69803a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-11T22:37:23Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c38666d5_29a12bfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T00:14:25Z",
      "side": 1,
      "message": "For security, since debug names are user input, we should either:\n- Sanitize and truncate the string somehow before passing it to the driver\n- Only pass it if a dawn toggle is enabled\n\nThe latter seems nice since we sanitizing nicely will be a bit of a pain.",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a21c0ec8_86f21cd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-12T01:28:37Z",
      "side": 1,
      "message": "Since this is a new feature, we should make sure we take the time to design it well up front, so going to be a little nit-picky:\n - In the JS API, labels can be changed, so we should have \"set label\" in dawn.json. Maybe even \"get label\" too (can wait)? This also means piping the set label call down to the driver.\n - We will want to use these labels in validation error messages as well, so I think we can probably just call it mLabel instead of mDebugLabel\n - we want to be friendly to non-English languages. If people name their objects in another language, we should ideally print out the same name in validation messages\n - so we should consider if const char* is enough or if we need a length field on that (this includes the descriptor too). I don\u0027t really know that much here; I\u0027m not sure if \"\\0\" can show up in non-utf8 encodings.\n - but... we probably can\u0027t pass those unsanitized names to the backend as Kai said. Passing them to the backend can probably be a toggle, but I think eventually we\u0027re going to want to sanitize them so the non-English debugging experience is friendly. Passing to the backend can still be a toggle though and that\u0027s what turns on the sanitization.\n - Metal also supports labels https://developer.apple.com/documentation/metal/frame_capture_debugging_tools/enhancing_frame_capture_by_using_labels?language\u003dobjc\n - is there a plan to pass labels for other objects as well? command encoders, queues, devices, etc. It would be interesting to see if there\u0027s a way we can have certainty that we actually implemented label-setting for all of the objects. As it is now, it would be pretty easy to forget to implement labels in a lot of places.",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac533a4e_4386cb76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T05:52:36Z",
      "side": 1,
      "message": "We should encode the debug strings in UTF-8. UTF-8 doesn\u0027t have any null bytes so you can still null-terminate UTF-8 strings. (Getting the strings out of JS will require a conversion, but that\u0027s OK. Since the spec requires USVString, that conversion can\u0027t fail.)\n\nFor sure we should print full fidelity debug names in our error messages. If we choose to pass strings down to drivers *by default*, we need to aggressively sanitize them (I wouldn\u0027t trust drivers with anything other than ASCII under, say, 32 bytes). However if the user is passing a command line flag then we don\u0027t need to sanitize anything; if a developer runs into issues with particular drivers/tools, they can remove fancy characters from their own debug names.",
      "parentUuid": "a21c0ec8_86f21cd1",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26923e3e_61ae9cd0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-12T17:33:48Z",
      "side": 1,
      "message": "\u003e\u003e In the JS API, labels can be changed, so we should have \"set label\" in dawn.json. Maybe even \"get label\" too (can wait)? This also means piping the set label call down to the driver.\n\nI see. You mean someone can set texture.label after the texture has been created, and that would call SetLabel within Chromium? Just trying to understand how it works.\n\n\u003e\u003e is there a plan to pass labels for other objects as well? \n\nYeah. Just did textures/buffers right now to keep things manageable. I\u0027ve started a spreadsheet on my side to track progress. I\u0027ll put that into a google sheets and share it on the tracking bug.\n\n\u003e\u003e Metal also supports labels\n\nYeah, but I don\u0027t have a Mac OS development machine on hand. It\u0027d be very convenient if I could pass this portion of the work to someone else. If not, I can probably dig something up.\n\n\u003e\u003e Sanitization\n\nI\u0027m still a little unclear what sanitization will be necessary. My plan was to just limit the length on the Chromium side. The string (from the descriptor anyway) is already being converted to UTF8. This will leave us with a reasonably sized, UTF8, null terminated string to be passed over the wire. We could put the labels in error messages directly. All the backend APIs take Unicode [1][2][3], so I don\u0027t know that any further conversion is needed.\n\n[1] https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsObjectNameInfoEXT.html\n[2] https://docs.microsoft.com/en-us/windows/win32/api/d3d12/nf-d3d12-id3d12object-setname\n[3] https://developer.apple.com/documentation/metal/mtlsharedtexturehandle/2981031-label",
      "parentUuid": "ac533a4e_4386cb76",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10505dcd_eabee742",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-12T18:23:02Z",
      "side": 1,
      "message": "\u003e I see. You mean someone can set texture.label after the texture has been created, and that would call SetLabel within Chromium? Just trying to understand how it works.\n\nyup. See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/dawn_object.cc;l\u003d22;bpv\u003d1;bpt\u003d1?q\u003dsetLabel%20f:webgpu\n\n\u003e metal\nunderstood. If it\u0027s too difficult, don\u0027t worry about it. I guess I was just hoping it would be manageable to get something compiling for one object, and then the rest are mostly copy-paste.\n\n\u003e sanitization\nok so const char* is sufficient - thanks all for the explanation.\nfor now, I think we need to be defensive. We don\u0027t need to do sanitization now, but we should put it behind a flag because:\n - don\u0027t want the overhead of sending the label to the driver unless someone is trying to do a trace\n - driver is a black box for us so we need to be extra careful. strings can be a target for remote execution exploits",
      "parentUuid": "26923e3e_61ae9cd0",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81b3b7d9_31830e15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T21:15:26Z",
      "side": 1,
      "message": "Exactly, we don\u0027t need any sanitization or truncation if we don\u0027t pass it to the driver by default. We should just require a dawn toggle to be explicitly enabled before we pass anything to the driver.",
      "parentUuid": "10505dcd_eabee742",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7556b1c_250e3401",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-12T22:13:04Z",
      "side": 1,
      "message": "What\u0027s the plan for a developer enabling this? Like a Chrome flag? I don\u0027t think we can expect developers to compile Chromium to use this API with PIX/RenderDoc.",
      "parentUuid": "81b3b7d9_31830e15",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e65f0e54_1a353418",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-12T22:15:34Z",
      "side": 1,
      "message": "It would be a toggle in Toggles.cpp/.h and then you can get it in Chrome with --enable-dawn-features\u003duse_debug_labels or something like that\n\nmaybe one day we can hook it up to devtools",
      "parentUuid": "d7556b1c_250e3401",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91418d31_e5c4e12c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T22:16:23Z",
      "side": 1,
      "message": "A Dawn toggle:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/Toggles.h\n\nThen the chrome flag --enable-dawn-features\u003ddebug_labels could be passed.",
      "parentUuid": "d7556b1c_250e3401",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3e0ec67_b0008eb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-12T23:05:30Z",
      "side": 1,
      "message": "Regarding:\n\u003e\u003e In the JS API, labels can be changed, so we should have \"set label\" in dawn.json.\n\nHow could I best do this? It would be nice if I could add onto Device a function SetLabel(GPUObjectBase* object, const char* label), however I don\u0027t know how to express something like GPUObjectBase in dawn.json. Will I need to add a function onto every object, like Texture::SetLabel(const char* label)?",
      "parentUuid": "91418d31_e5c4e12c",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "204ab1b6_46a127c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-13T17:02:12Z",
      "side": 1,
      "message": "Done, via a toggle.",
      "parentUuid": "c38666d5_29a12bfb",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbbf35cf_e4a5e75b",
        "filename": "src/dawn_native/ObjectBase.cpp",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-12T18:23:02Z",
      "side": 1,
      "message": "label should probably be a constructor argument. For\n\nBuffer::Create(..) {\n  b \u003d new Buffer();\n  b-\u003eInitialize();\n}\n\nwe want the label to be accessible and show up in messages for anything that happens inside the derived class constructor or inside Initialize().\n\nMaybe similar to the ErrorTag constructor, we can have a LabelNotImplementedTag constructor so the code is self documenting about where there are no labels.",
      "range": {
        "startLine": 22,
        "startChar": 27,
        "endLine": 22,
        "endChar": 44
      },
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f18543a9_ce8eb0f8",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T00:14:25Z",
      "side": 1,
      "message": "Use a std::string so this doesn\u0027t have to be freed manually.",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17a9b12d_b91c3cf8",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-13T17:02:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f18543a9_ce8eb0f8",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b373d6d_2c4f936d",
        "filename": "src/dawn_native/d3d12/UtilsD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 389,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T00:14:25Z",
      "side": 1,
      "message": "I\u0027d prefer to use something less low level, like std::ostringstream, or std::string + string::append or string::operator+\u003d.\n\n(Can use std::string::reserve + std::string::append if _really_ trying to avoid extra allocations.)",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f8be73f_fc090cbf",
        "filename": "src/dawn_native/d3d12/UtilsD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 389,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-13T17:02:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b373d6d_2c4f936d",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f053474f_00560e0d",
        "filename": "src/dawn_native/vulkan/UtilsVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T00:14:25Z",
      "side": 1,
      "message": "same",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fd1ecad_391d0cd3",
        "filename": "src/dawn_native/vulkan/UtilsVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-13T17:02:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f053474f_00560e0d",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "054edde7_edf696f9",
        "filename": "src/dawn_native/vulkan/UtilsVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-12T18:23:02Z",
      "side": 1,
      "message": "nit: maybe we should swallow errors since it\u0027s just for debugging. application should still work if setting the debug name fails",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c27ecfd2_0c380abd",
        "filename": "src/dawn_native/vulkan/UtilsVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-12T21:15:26Z",
      "side": 1,
      "message": "The only errors that are supposed to be possible here are VK_ERROR_OUT_OF_HOST_MEMORY and VK_ERROR_OUT_OF_DEVICE_MEMORY. If either of these happens we should probably go ahead and lose the device because they should be super rare and we don\u0027t necessarily trust the driver to recover correctly from things like this.\n\nOTOH if we only call this when a dawn toggle is enabled, being paranoid doesn\u0027t matter.",
      "parentUuid": "054edde7_edf696f9",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "115bb790_bea7760e",
        "filename": "src/dawn_native/vulkan/UtilsVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-08-13T17:02:12Z",
      "side": 1,
      "message": "I have no strong opinion either way.\n\nI\u0027ve changed SetDebugName to just return void. This will make changes easier because I won\u0027t have to add MaybeError returns to object initializers that don\u0027t already have it. If someone feels that its worthwhile to return an error here, I\u0027m fine with adding it back.",
      "parentUuid": "c27ecfd2_0c380abd",
      "revId": "049102a00e6f806bd116091f845126c00a4b9456",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}