{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "025cfbd5_ef505661",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 33
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "LGTM",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53c65105_5fa8e79f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 33
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Thanks for your review!",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd2582d9_dfb06090",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "nit: that reintepret_cast seems to be an implementation detail of EGL and could be moved to be inside Init.",
      "range": {
        "startLine": 61,
        "startChar": 23,
        "endLine": 61,
        "endChar": 39
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "262de897_4bfecf72",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 61,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd2582d9_dfb06090",
      "range": {
        "startLine": 61,
        "startChar": 23,
        "endLine": 61,
        "endChar": 39
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfb02163_2ffa720f",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 156,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "u-nit: in Dawn and ANGLE we tend to do else { ASSERT(second condition) ...} for cases like these.",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c31e2c86_8805a4e0",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 156,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Noted. Replaced with a ternary for simplicity. (InitializeImpl() has already asserted that it\u0027s one or the other, but I\u0027m happy to add another assert if you like.)",
      "parentUuid": "bfb02163_2ffa720f",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e07044cf_266dce64",
        "filename": "src/dawn/native/opengl/BackendGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "nit: I think ToAPI(GetType()) would do the same and be less casting.",
      "range": {
        "startLine": 49,
        "startChar": 35,
        "endLine": 49,
        "endChar": 65
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d52a974_43fed2e1",
        "filename": "src/dawn/native/opengl/BackendGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 49,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Nice, done.",
      "parentUuid": "e07044cf_266dce64",
      "range": {
        "startLine": 49,
        "startChar": 35,
        "endLine": 49,
        "endChar": 65
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d929175e_44e6304c",
        "filename": "src/dawn/native/opengl/BackendGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "Why do we need to set the previous context back? If we didn\u0027t have that then we could use if (!GetInstance()-\u003eConsumedError(DsicoverAdapter(), \u0026adapter)).\n\nBut Instance doesn\u0027t yet have that facility. See for example how it is done on the device https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/Device.h;l\u003d78",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38c34c06_7e797697",
        "filename": "src/dawn/native/opengl/BackendGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 80,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Chrome tests get upset if the context is changed during adapter descovery (e.g., https://ci.chromium.org/ui/p/chromium/builders/try/mac-dawn-rel/b8811173412880649809/test-results?q\u003dExactID%3Aninja%3A%2F%2Fgpu%3Agl_tests%2FSharedImageBackingFactoryIOSurfaceTest.Dawn_SkiaGL+VHash%3Ab4158506337967ab).\n\nSince Chrome soon won\u0027t know about the context at all, it seems unfair to make Chrome restore it.\n\nHowever, another option might be a ScopedMakeCurrent, which might make it possible to use the code style you\u0027re after? https://dawn-review.googlesource.com/c/dawn/+/94900 Happy to merge that in if you\u0027d prefer.",
      "parentUuid": "d929175e_44e6304c",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31c40f05_454ab64c",
        "filename": "src/dawn/native/opengl/BackendGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 80,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-28T18:58:09Z",
      "side": 1,
      "message": "Hm, I don\u0027t completely agree with the reasoning. but tldr; I think it\u0027s fine for now.\n\nThe reason why this context restoration makes the test not crash is that it just-so-happens that in this test, DiscoverDefaultAdapters is the only operation that happens to make the context current. And that\u0027s the case because after discovering adapters, we explicitly continue only with the Metal adapter.\n\nHowever, you can easily imagine code that doesn\u0027t care about the backend type. It just does:\n\nwgpu::Adapter adapter \u003d instance.RequestAdapter();\nwgpu::Device device \u003d adapter.RequestDevice();\nwgpu::Buffer buffer \u003d device.CreateBuffer();\n\nThe CTS is all written this way, and Dawn\u0027s tests use this style for the most part (with some extra stuff to make tests parameterized by backend). When running on OpenGLES, the test would for sure make the context current by the time it makes a buffer, and so Chrome would need to go and restore its context after running the Dawn operations if it were to subsequently use Skia. \n\nUltimately, I think what we\u0027re doing here is inconsistent, which makes the API potentially fragile to use. Sometimes we restore the context, and sometimes we don\u0027t. We could either:\n 1. *Always* restore the context (GetGL returns ScopedGL or something), so an embedder of Dawn doesn\u0027t ever have to worry at all about context restoration.\n 2. *Never* restore the context, so that in Chrome, whenever some other graphics API is used, the burden is on Chrome to make sure its context is still current.\n 3. Say that inconsistency is fine. We can specify adapter discovery as a type of special operation that doesn\u0027t change the context, but all other operations (device creation and everything after) are expected to change the context. In this world though, we must recognize that it is still Chrome\u0027s responsibility to restore the context.\n 4. something else\n\n(3) is basically what we already have implemented here - we just need to be clear that we are still being \"unfair\" and will be making Chrome restore the context (sometimes). I think this would probably be reasonable though since after discovering adapters, you are able to determine if your adapter type is GLES, and then will know whether the burden of context restoration is on you.\n\nHowever, I wonder if in the general case, (2) is a better option since Chrome already deals with multiple contexts and takes responsibility for making sure its current (that\u0027s why `DecoderContext::MakeCurrent` exists). The crashing tests just aren\u0027t written that way. Probably `CheckSkiaPixels` should make sure the context is current.\n(1) is quite attractive too but it could get rather noisy making the context current and restoring it constantly. I think we could make it not-noisy in the future though.",
      "parentUuid": "38c34c06_7e797697",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ce7b23_2c792a6b",
        "filename": "src/dawn/native/opengl/BackendGL.h",
        "patchSetId": 33
      },
      "lineNbr": 18,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "nit: unused?",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24d13588_55817366",
        "filename": "src/dawn/native/opengl/BackendGL.h",
        "patchSetId": 33
      },
      "lineNbr": 18,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Removed, thanks.",
      "parentUuid": "b3ce7b23_2c792a6b",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a89efd79_24e97f73",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "What happens if the display is already initialized (is it always a new one)? What are the nullptrs?",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "911d942c_a25d7758",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 35,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "From the docs: \"Initializing an already initialized EGL display connection has no effect besides returning the version numbers.\" The pointers are for retrieving the version numbers. I suppose we could check that it\u0027s at least a minimum if you\u0027d like (probably 1.5?).",
      "parentUuid": "a89efd79_24e97f73",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46b5f503_66e07781",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T17:45:07Z",
      "side": 1,
      "message": "1.4 I still somewhat prevalent I think?",
      "parentUuid": "911d942c_a25d7758",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "814ae4e0_52fe7ffe",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "Maybe we should use Dawn\u0027s error facilities here so a ResultOrError is returned from Create",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38f40c8c_af9ac0aa",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 64,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "See subsequent patch https://dawn-review.googlesource.com/c/dawn/+/94561. Happy to merge that here. (Am I happy in these comments or what?)",
      "parentUuid": "814ae4e0_52fe7ffe",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05478bd0_05c93cc9",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T17:45:07Z",
      "side": 1,
      "message": "You are indeed happy :D More seriously, a follow-up is almost always ok so let\u0027s keep it separate.",
      "parentUuid": "38f40c8c_af9ac0aa",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8544d099_8a06094a",
        "filename": "src/dawn/native/opengl/ContextEGL.h",
        "patchSetId": 33
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "nit: can be private since there is a Create function.",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e4d90e0_7fa4d928",
        "filename": "src/dawn/native/opengl/ContextEGL.h",
        "patchSetId": 33
      },
      "lineNbr": 31,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:54:33Z",
      "side": 1,
      "message": "Done. Means I can\u0027t use std::make_unique (sad trombone).",
      "parentUuid": "8544d099_8a06094a",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7f9208a_5445d85f",
        "filename": "src/dawn/native/opengl/ContextEGL.h",
        "patchSetId": 33
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "It\u0027s a bit weird to persistently store a reference. Did you mean to make it const? But even then I think Dawn usually keeps const* for stored pointers.",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d550abc_c57e96bb",
        "filename": "src/dawn/native/opengl/ContextEGL.h",
        "patchSetId": 33
      },
      "lineNbr": 36,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:54:33Z",
      "side": 1,
      "message": "Changed to a copy, to be safe (a la Device::OpenGLFunctions).",
      "parentUuid": "c7f9208a_5445d85f",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8ae5521_d51c35ce",
        "filename": "src/dawn/native/opengl/DeviceGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 133,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "nit: can you file a bug and use it instead of my email? It\u0027s unlikely I\u0027ll ever get to it :P",
      "range": {
        "startLine": 133,
        "startChar": 13,
        "endLine": 133,
        "endChar": 32
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fa31673_5320dba4",
        "filename": "src/dawn/native/opengl/DeviceGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 133,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:54:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8ae5521_d51c35ce",
      "range": {
        "startLine": 133,
        "startChar": 13,
        "endLine": 133,
        "endChar": 32
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4703ce3d_f04c0316",
        "filename": "src/dawn/native/opengl/DeviceGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 456,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "Maybe we should document in the header that GetGL is what does the implicit MakeCurrent?",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "648c592b_0645ff20",
        "filename": "src/dawn/native/opengl/DeviceGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 456,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4703ce3d_f04c0316",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b09c62b0_8ae0ab75",
        "filename": "src/dawn/native/opengl/EGLFunctions.cpp",
        "patchSetId": 33
      },
      "lineNbr": 21,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "u-nit: the rest of the code uses Initialize",
      "range": {
        "startLine": 21,
        "startChar": 19,
        "endLine": 21,
        "endChar": 23
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "866c68c1_a818e00d",
        "filename": "src/dawn/native/opengl/EGLFunctions.cpp",
        "patchSetId": 33
      },
      "lineNbr": 21,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Can\u0027t do that, sadly, because of eglInitialize().",
      "parentUuid": "b09c62b0_8ae0ab75",
      "range": {
        "startLine": 21,
        "startChar": 19,
        "endLine": 21,
        "endChar": 23
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aad04104_3a732912",
        "filename": "src/dawn/native/opengl/EGLFunctions.cpp",
        "patchSetId": 33
      },
      "lineNbr": 21,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T17:45:07Z",
      "side": 1,
      "message": "Gotcha^^",
      "parentUuid": "866c68c1_a818e00d",
      "range": {
        "startLine": 21,
        "startChar": 19,
        "endLine": 21,
        "endChar": 23
      },
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e651ac7f_763f6be6",
        "filename": "src/dawn/native/opengl/EGLFunctions.cpp",
        "patchSetId": 33
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "Maybe we should be defensive and return an error if the function could not be loaded. This is what OpenGLFunctions does.",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c84bc15c_4f0eff66",
        "filename": "src/dawn/native/opengl/EGLFunctions.cpp",
        "patchSetId": 33
      },
      "lineNbr": 23,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Ack, will do in a followup.",
      "parentUuid": "e651ac7f_763f6be6",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd504a3_694b094d",
        "filename": "src/dawn/native/opengl/EGLFunctions.h",
        "patchSetId": 33
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "How hard would it be to adapt opengl_loader_generator.py to also produce a function loader from egl.xml? If it\u0027s hard we can defer indefinitely.",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb66bdfb_f0a26685",
        "filename": "src/dawn/native/opengl/EGLFunctions.h",
        "patchSetId": 33
      },
      "lineNbr": 25,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "I thought about it. I decided it\u0027s overkill at the moment, given how few EGL functions we use. We could reconsider in the future.",
      "parentUuid": "ccd504a3_694b094d",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a04533b9_f272ceca",
        "filename": "src/dawn/tests/end2end/SwapChainTests.cpp",
        "patchSetId": 33
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "ditto",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bab4a186_c89961b4",
        "filename": "src/dawn/tests/end2end/SwapChainTests.cpp",
        "patchSetId": 33
      },
      "lineNbr": 41,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a04533b9_f272ceca",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b0bb90d_58925b8c",
        "filename": "src/dawn/tests/end2end/SwapChainValidationTests.cpp",
        "patchSetId": 33
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-28T15:59:42Z",
      "side": 1,
      "message": "nit: Assert can be removed?",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ff04971_9046080b",
        "filename": "src/dawn/tests/end2end/SwapChainValidationTests.cpp",
        "patchSetId": 33
      },
      "lineNbr": 38,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-28T17:41:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b0bb90d_58925b8c",
      "revId": "8835342309ff1c521771c5b5fe6f9b8837334029",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}