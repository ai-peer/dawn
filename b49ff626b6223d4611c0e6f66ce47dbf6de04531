{
  "comments": [
    {
      "key": {
        "uuid": "c35eb64c_ee7fe65d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-09-02T07:29:45Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "b49ff626b6223d4611c0e6f66ce47dbf6de04531",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f2bbf07_6d413d41",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-02T09:34:49Z",
      "side": 1,
      "message": "I\u0027m pretty sure this is disallowed by the validation rules (but we don\u0027t validate things properly for compute passes yet).\n\nHowever it raised another issue for buffer: https://github.com/gpuweb/gpuweb/issues/1044",
      "revId": "b49ff626b6223d4611c0e6f66ce47dbf6de04531",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bcf0f55_420d491b",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-09-02T10:32:08Z",
      "side": 1,
      "message": "I still remember such usage is disallowed in render pass, so do you mean in a compute pass we cannot do such usage: write into a write-only storage texture (storage buffer), and read from it (as a read-only storage texture or read-only storage buffer) afterwards?\n\nIf we want to do this in tfjs, then we must begin different compute passes for such usage?",
      "parentUuid": "5f2bbf07_6d413d41",
      "revId": "b49ff626b6223d4611c0e6f66ce47dbf6de04531",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21a9785d_85da2b13",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-09-02T10:39:10Z",
      "side": 1,
      "message": "I just want to say I missed taking uniform buffers into consideration, that is write-only storage texture -\u003e uniform buffer.",
      "parentUuid": "7bcf0f55_420d491b",
      "revId": "b49ff626b6223d4611c0e6f66ce47dbf6de04531",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc38e1d8_e128d70c",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-02T10:40:10Z",
      "side": 1,
      "message": "Sorry I was confused because at the same time I found a real issue in the spec. Let me take another look.",
      "parentUuid": "21a9785d_85da2b13",
      "revId": "b49ff626b6223d4611c0e6f66ce47dbf6de04531",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "857128fe_76188b24",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-09-02T10:45:51Z",
      "side": 1,
      "message": "The original problem from TFJS team is that we notice that before beginning a compute pass we transition the buffers into STORAGE in PrepareResourcesForSubmission(), while in the first dispatch we see another barrier is added on that buffer (it is a UAV barrier as the buffer has already been transitioned into a UAV). While we want to save that barrier, I find another issue that will cause Dawn crash. Then comes this patch to fix both of these problems.",
      "parentUuid": "bc38e1d8_e128d70c",
      "revId": "b49ff626b6223d4611c0e6f66ce47dbf6de04531",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}