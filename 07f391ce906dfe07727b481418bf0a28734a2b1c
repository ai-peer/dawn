{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "226bea4e_2a14ff49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-08-17T21:59:40Z",
      "side": 1,
      "message": "running locally with\n\n```\nvpython3 ./content/test/gpu/run_gpu_integration_test.py webgpu_cts -v --jobs\u003d16 --browser\u003drelease --skip-post-test-cleanup-and-debug-info --write-full-results-to\u003dout.json --use-webgpu-compat-mode \"--extra-browser-args\u003d--use-webgpu-adapter\u003dopengles --use-angle\u003dswiftshader --no-sandbox --enable-webgpu-developer-features\" \u003e $T/out.txt 2\u003e\u00261\n```\n\nI get \n\n```\n70801 tests passed in 2169.9s, 16588 skipped, 808 failures.\n```\n\nThere\u0027s no unexpected failures. There are lots of issue in compat though.\n\n1. all the texture issues\n\n   Basic stuff seems to fail all over. It\u0027s possible some of these are\n   testing 2d vs 2d-array things that would validate out if/when we start\n   validating those. Many though are precision issues and at a glance seem\n   wrong\n   \n2. occlusion queries don\u0027t work at all (and crash eventually)\n\n3. several draw tests fail\n\n4. Tons of WGSL tests fail\n\n5. etc...",
      "revId": "07f391ce906dfe07727b481418bf0a28734a2b1c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e71c8c5_f41971e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-08-17T22:01:17Z",
      "side": 1,
      "message": "Also, I\u0027m not entirely sure \u0027webgpu-compat\u0027 is enough. As it is they are all set to `[angle-swiftshader webgpu-compat]` but that means there are often conflicts with `[angle-swiftshader other tags]`. You can see that in the CL.",
      "revId": "07f391ce906dfe07727b481418bf0a28734a2b1c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d80f6ac_ae9bbb45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-08-21T15:04:18Z",
      "side": 1,
      "message": "Thanks for taking on this exercise!\n\n1) Is there a way we can avoid adding \"non-compat\" on so many expectations? Given that we don\u0027t run Compat on any of those devices (yet), can we just ignore them for now?\n2) Does all of the automated tooling support compat/non-compat tags? CTS roller, etc? +Ben\n3) I\u0027m not sure we actually want to add suppressions for SwiftShader, unless we plan to run it on the bots. I\u0027d prefer to pick a platform we do want to run. Desktop GL on Linux would be fine, now that it\u0027s working. D3D11 is important too, although that won\u0027t run Dawn\u0027s GLES backend.",
      "revId": "07f391ce906dfe07727b481418bf0a28734a2b1c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}