{
  "comments": [
    {
      "key": {
        "uuid": "69ece114_76ae41a7",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 557,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-24T14:39:09Z",
      "side": 1,
      "message": "Instead of extracting data from the view everytime we call TextureUsedAs maybe we could use TextureViewUsedAs and let the usageTracker extract the information it needs.",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dc1614a_48dbf9e2",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 557,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-24T15:59:57Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "69ece114_76ae41a7",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "397f413a_62bfa37d",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 557,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-24T22:45:39Z",
      "side": 1,
      "message": "Agreed. But it is not easy to do this from a TextureUsedAs() call in Bundle [1]. Let\u0027s revisit this when we implement subresource support for bundle.",
      "parentUuid": "4dc1614a_48dbf9e2",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ce64c21_9d7b4a67",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 557,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "See comment there, I think this could be done because we shouldn\u0027t need the view in [1].",
      "parentUuid": "397f413a_62bfa37d",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2afae4d1_589105e1",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 557,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4ce64c21_9d7b4a67",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f866f00d_616a7a38",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-24T14:39:09Z",
      "side": 1,
      "message": "The subresource usages cannot be set on the texture, because there can be multiple command encoders being encoded at the same time that use the texture with different usages. Instead I suggest replacing PassUsageResourceTracker::mTextureUsages with a map\u003cTextureBase*, SubresourceUsage\u003e with SubresourceUsage being a std::vector\u003cUsage\u003e for now (and then it can be optimized later).",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea9fc802_8db74fcd",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-24T22:45:39Z",
      "side": 1,
      "message": "Done. \n\nGood point. I didn\u0027t realize that we may have multiple threading which can have multiple encoder upon the same texture. So reset/clear the usage during ecoder finish can\u0027t prevent this situation.",
      "parentUuid": "f866f00d_616a7a38",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d05d9a_158151e0",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-24T14:39:09Z",
      "side": 1,
      "message": "nit: This can be replaced with CreateTexture since that\u0027s always the line following this call.",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02e61ccf_7da2f9a3",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-24T15:59:57Z",
      "side": 1,
      "message": "Or just use the designated initializer. It should be nearly the same amount of code given the defaults, and each parameter is more clear because it\u0027s labeled with the member name. I guess there\u0027s just one extra \"device.CreateTexture\" call.\n\nCorentin, is webgpu_cpp.h allowed to have more things on top of webgpu.h? On top of the automatic refcounting, I\u0027d like to add obj.CreateXYZ overloads that take the descriptor by value. Alternatively could be utils, but simply having it in webgpu_cpp.h would be quite nice for native users as well.",
      "parentUuid": "f7d05d9a_158151e0",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8854cbe_b5826e92",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-24T22:45:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02e61ccf_7da2f9a3",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f82777be_ddd2c8f0",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-24T14:39:09Z",
      "side": 1,
      "message": "ditto, or use defaults and designated initializers like so:\n\n wgpu::TextureViewDescriptor viewDesc \u003d {\n     .format \u003d kColorFormat,\n     .baseArrayLayer \u003d foo,\n     .baseMipLevel \u003d bar,\n };\n texture.CreateView(\u0026viewDesc);",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "780d9a73_983af400",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-24T22:45:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f82777be_ddd2c8f0",
      "revId": "575c2c136a7dc777e6f6e1755e3d9f5cd79237ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}