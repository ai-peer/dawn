{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "30c9fde9_14e9928e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T00:41:24Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c1a42a2_fce6f7bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-01-12T04:07:59Z",
      "side": 1,
      "message": "FWIW, tested this with my existing Halide code and it works great, thanks!",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd3f854e_44518c66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T09:15:09Z",
      "side": 1,
      "message": "LGTM",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e798f26_2c9cbede",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T09:15:09Z",
      "side": 1,
      "message": "Can we add a TODO to only call the callback on ProcessEvents?",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffcb83d0_88577fba",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 120,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T21:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e798f26_2c9cbede",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e8b6ca4_372ee761",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 126,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-01-12T04:07:59Z",
      "side": 1,
      "message": "Out of curiosity, why is `options` required? It\u0027s optional in the Javascript API, and passing nullptr works for Emscripten too.\n\nI\u0027ve generally been assuming that nullptr is a valid argument for any parameters whose equivalents are marked as optional in the JS API.",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18abc53a_4cb09eb3",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 126,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T09:15:09Z",
      "side": 1,
      "message": "That\u0027s a correct assumption, I think that the C++ header should even make RequestAdapter() without arguments valid.",
      "parentUuid": "1e8b6ca4_372ee761",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "128fd040_56e82871",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 126,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T18:14:32Z",
      "side": 1,
      "message": "hm right now only trailing args can be optional with Dawn\u0027s generator. and we don\u0027t have a way to generate multiple C++ overloads yet.\n\nFor now, I think I\u0027ll add a concept that this argument may be \"nullable\" - which won\u0027t really do anything except assert it\u0027s a pointer type, and assert that non-nullable non-optional pointers are not nullptr.",
      "parentUuid": "18abc53a_4cb09eb3",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9d75d99_5db0c89e",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 126,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T21:58:16Z",
      "side": 1,
      "message": "I realized this is also a problem with requestDevice. For now I just made nullptr valid because the generator can\u0027t support optional. I\u0027ll work on a generator change as a follow-up - which may even allow the no-arguments version :)",
      "parentUuid": "128fd040_56e82871",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24083458_d194063a",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T09:15:09Z",
      "side": 1,
      "message": "What if the application already called RequestAdapter or DiscoverAdapter? In the logic below we wouldn\u0027t be giving back the swiftshader adapter. So I think we should add an extra condition around [1]. Ah this is done in the loop over adapters below. Either solution LGTM.",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64246d2e_67ea4500",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 141,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T09:15:09Z",
      "side": 1,
      "message": "[1]",
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68911a58_ea7f1a0f",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 198,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-01-12T18:37:20Z",
      "side": 1,
      "message": "Hmm, WDYT about keeping mAdapters sorted in the preferred order, and creating filters out of the options which we just then pass to an std::find or something? Not really necessary but just a thought since maybe we might add more filter options in the future.",
      "range": {
        "startLine": 157,
        "startChar": 8,
        "endLine": 198,
        "endChar": 9
      },
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e3a4f3e_d54e514f",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 7
      },
      "lineNbr": 198,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T21:58:16Z",
      "side": 1,
      "message": "hmm.. discover adapters may add additional adapters to |mAdapters| though so we would need to re-sort every time this function is called. So not sure it\u0027ll actually help a ton. Keeping the way it is for now.",
      "parentUuid": "68911a58_ea7f1a0f",
      "range": {
        "startLine": 157,
        "startChar": 8,
        "endLine": 198,
        "endChar": 9
      },
      "revId": "299cf01657823bb60e44a3c52b12f4d8f1c0f49f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}