{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "52c4d7d3_8c56c75c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-14T20:50:11Z",
      "side": 1,
      "message": "Putting this up for discussion, as I suspect we\u0027ll want to play with the formatting and mechanisms for error reporting a bit before we start landing large amounts of updates.\n\nThis follows the basic pattern that @cwallez outlined in https://dawn-review.googlesource.com/c/dawn/+/62621, adjusted for the realities of absl integration and with a few more convenience functions to try and make consistent formatting easier.\n\nExample validation error before this CL:\n\n    Buffer offset for bind group needs to satisfy the minimum alignment\n        at ValidateBufferBinding (../../third_party/dawn/src/dawn_native/BindGroup.cpp:94)\n        at ValidateBindGroupDescriptor (../../third_party/dawn/src/dawn_native/BindGroup.cpp:282)\n        at CreateBindGroup (../../third_party/dawn/src/dawn_native/Device.cpp:1105)\n\nSame validation error after this CL:\n\n    Error occurred while validating BindGroupDescriptor \"Frame Bind Group\" against \n    BindGroupLayout 0x21ac45a4180\n    Entry 0: Validating as a Buffer\n    Buffer \"Projection Buffer\": offset of 5 does not satisfy the minimum alignment of 256",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "997f5c8d_5ddef9ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-15T02:02:03Z",
      "side": 1,
      "message": "I\u0027d like to get an estimation of what we think the overhead of this nicer validation is, especially for APICreateBindGroup and various command-encoding functions like APIDraw, etc. \n\nI cherry-picked this CL, did a release build, and saw:\n    6fa6: e8 f5 24 07 00               \tcallq\t468213 \u003c__ZN4absl19str_format_internal10FormatPackENS0_21UntypedFormatSpecImplENS_4SpanIKNS0_13FormatArgImplEEE\u003e\n\nwithin the first 83 instructions of __ZN11dawn_native27ValidateBindGroupDescriptorEPNS_10DeviceBaseEPKNS_19BindGroupDescriptorE before the first return statement -- so not inside a deferred unlikely block.\n\nWe should try to find a way to avoid this kind of string formatting in the likely section of the code. Avoiding it is probably as simple as putting DAWN_UNLIKELY around the condition for it, but... do we want to have to do that everywhere?\nI think we used to have a DAWN_VALIDATE macro that had both the condition, AND the error message - I don\u0027t remember why we removed it.\n\nI **think** this formatting code is coming from this bit:\n    \"Expected %u entries, got %u\",\n    static_cast\u003cuint32_t\u003e(descriptor-\u003elayout-\u003eGetBindingCount()),\n    descriptor-\u003eentryCount\n\nOf course though, the code isn\u0027t actually executed unless we take that branch, but it\u0027s still not the best for the instruction cache.\n\n^this is why my suspicion is that two-phase validation is better, but if there\u0027s not a lot of overhead to the current approach, I\u0027m happy to be convinced",
      "parentUuid": "52c4d7d3_8c56c75c",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49b6c3c6_f9db90f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "Error occurred while validating BindGroupDescriptor \"Frame Bind Group\" against \n    BindGroupLayout 0x21ac45a4180\n    Entry 0: Validating as a Buffer\n    Buffer \"Projection Buffer\": offset of 5 does not satisfy the minimum alignment of 256\n    \nI commented in various places in the code but I think it would gain from being more structured:\n\nValidation error: binding offset (5) does not satisfy the minimum alignment (256) for BindingType::UniformBuffer\n - while validating entry 0 as a buffer entry\n - while validating [BindGroupDescriptor \"Frame Bind Group\"] against [BindGroupLayout 0x21ac45a4180]\n \nFor perf I\u0027m hoping some form of PGO will eventually help, but that would require putting some WebGPU test cases in the PGO training. I don\u0027t know where / when that happens in Chromium.\n\nWe could also fix it by asking LLVM to add a way to tag branch weights from inside blocks. So we\u0027d be able to add __builtin_reached_unlikely() inside DAWN_TRY_CONTEXT and that would magically be the same as a bunch of DAWN_UNLIKELY in validation code.",
      "parentUuid": "997f5c8d_5ddef9ca",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d74bdfd_8cd57391",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94fa53ab_181723fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T14:50:21Z",
      "side": 1,
      "message": "Thank you both for the feedback! I\u0027ll work on auto-generating the formatting (that\u0027ll make use a lot easier) and thanks Corentin for pointing out Abseil\u0027s user defined formats! If we can make those work in this context it\u0027ll definitely be the cleanest way to go.\n\nAlso, thank you Austin for doing the evaluation of the generated code! That\u0027s super helpful here. I\u0027ll play with having a version of the macro that does the condition and DAWN_UNLIKELY internally to see what the ergonomics of it feels like.\n\nAnd yes, I 100% agree that we should have some guidelines for how to format the error messages. I went through several revisions before posting this, and it\u0027s tricky to find a pattern that works well in all situations, but I definitely like Corentin\u0027s suggestion for flipping the context stack.\n\nI\u0027ll post an update to this CL later today and we\u0027ll keep iterating!",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99a45e1d_4673db7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Worked on auto-generating a lot of the fomatting this morning, so I\u0027d appreciate some feedback on that. Still need to address things like putting the string formatting behind DAWN_UNLIKELY.\n\nIn the meantime it looks like abseil support was reverted from Dawn, so I\u0027ve gotta go figure out what that\u0027s about. ðŸ˜ž",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8252946c_35aff89c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-16T16:05:14Z",
      "side": 1,
      "message": "Having a __builtin_reached_unlikely would be nice. In the absence of that, I would really like to either explicitly include the DAWN_UNLIKELYs on the validated conditions. Relying on PGO doesn\u0027t sound like the most reliable solution when we know with certainty that we want these conditions to be tagged as unlikely. Really though, as said previously, we should do a performance test to help evaluate.",
      "parentUuid": "49b6c3c6_f9db90f1",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ee1f831_73b07f93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-09-16T17:58:30Z",
      "side": 1,
      "message": "FWIW I have a vague recollection that we shouldn\u0027t expose pointer addresses to the webpage because they can be used to defeat ASLR. I don\u0027t know if you still have that in the latest CS.\n\nMaybe we could use some kind of serial number instead?",
      "parentUuid": "8252946c_35aff89c",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b761bb68_c388f53a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-16T20:41:53Z",
      "side": 1,
      "message": "I took those out of the latest patches. It felt like a potential security issue AND I found that it impacted readability negatively. At this point my thinking is that we should just lean in to having developers label their objects as much as possible for the debugging benefits.\n\n\u003e I would really like to either explicitly include the DAWN_UNLIKELYs on the validated conditions\n\nI have a variant of this patch that I\u0027m going to upload as soon as I sort out some internet issues that does this, and it\u0027s not as awkward for developers as I might have thought. Plus some rudimentary benchmarking with dawn_perf_tests appears to show that performance-wise it\u0027s at least on par and slightly better than the current ToT.",
      "parentUuid": "3ee1f831_73b07f93",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a34422eb_c4e9d2ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Testing I did as part of https://dawn-review.googlesource.com/c/dawn/+/64442 appears to show that with the macro that uses DAWN_UNLIKELY the performance is effectively equal between the version of the code with formatted errors and the version without. (Without DAWN_UNLIKELY there was a minor but observable performance dip.)\n\nAs a result I\u0027ve updated this patch to use the new macro, DAWN_INVALID_IF() across the board.",
      "parentUuid": "b761bb68_c388f53a",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea8f02ac_041d20a0",
        "filename": "generator/templates/dawn_native/webgpu_absl_format.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9472745_1278930f",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10d6ddfc_92b444f2",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "We might want to split this check in two: a buffer binding wasn\u0027t provided, or another binding was provided.",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41203d10_6ac9b7f4",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "The validation in this file with the \"%s:\" or \"Entry %u:\" doesn\u0027t really read like sentences. WDYT of changing it to be something like \"Binding offset (%u) is larger than the size of %s (%u)\"?",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05cd1cfd_a85190a7",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Reformatted most of the error messages to try and read better.",
      "parentUuid": "41203d10_6ac9b7f4",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0377846_f2a29d86",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "nit: we could tell which usages are necessary",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac34004a_6ac649a3",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0377846_f2a29d86",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f271ae96_f2e0608f",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "nit: this should be maxBindingSize since we also have a max binding size for storage buffers that\u0027s different now.",
      "range": {
        "startLine": 121,
        "startChar": 66,
        "endLine": 121,
        "endChar": 94
      },
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbf673e6_2783ed7f",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f271ae96_f2e0608f",
      "range": {
        "startLine": 121,
        "startChar": 66,
        "endLine": 121,
        "endChar": 94
      },
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4dba8d0_4afa604f",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 384,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "We should probably make a set of guidelines of how to write validation error text.\n\nExamples would be (but we can differ from this, I\u0027m not a good wordsmith):\n\nIt should read nicely and make a sentence when prefixed with \"Error occurred while \" and end with a period. It should liberally add context to help understand the error better. It should say what the error should be (foo is larger than X) and not what should happen instead (foo must be less than X) etc.\n\nCould we start a small markdown file about this in docs/ ? (could be a follow-up CL)",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00b55e3a_9fa171c6",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 384,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Started",
      "parentUuid": "d4dba8d0_4afa604f",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1b03b49_345a398e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "We probably should have something that shows that each piece of context comes one after the other, otherwise developers might see it as just information dump.",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81ecd81a_08ece9c8",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Hopefully the new formatting helps with this. Example:\n\nBinding size (256) is larger than the buffer size (144) of [Buffer \"Projection Buffer\"].\n - while validating entry 0 as a Buffer\n - while validating [BindGroupDescriptor \"Frame Bind Group\"] against [BindGroupLayout]",
      "parentUuid": "a1b03b49_345a398e",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cf209e5_866ef547",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "Wouldn\u0027t it make sense to put the error first so that it is the first thing developers see?",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f6686c6_c329716e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "I was actually following the pattern that you had in your WIP patch! ðŸ˜‰ But after looking at it again I agree. The error should come first and be most prominent.",
      "parentUuid": "4cf209e5_866ef547",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c81238b_b5f80923",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "nit: Since we are going to touch all validation statements, we should make them great for developers by explaining clearly what is the issue. Maybe \"[buffer \"myBuffer\"] is associated with [device \"foo\"] and cannot be used with [device \"bar\"]\"",
      "range": {
        "startLine": 461,
        "startChar": 49,
        "endLine": 461,
        "endChar": 79
      },
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "070e68b2_50c9d6a4",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c81238b_b5f80923",
      "range": {
        "startLine": 461,
        "startChar": 49,
        "endLine": 461,
        "endChar": 79
      },
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d684939d_c32920c0",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 465,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "ditto here and in other places",
      "range": {
        "startLine": 465,
        "startChar": 49,
        "endLine": 465,
        "endChar": 64
      },
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c92b447_863d6ec2",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 465,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d684939d_c32920c0",
      "range": {
        "startLine": 465,
        "startChar": 49,
        "endLine": 465,
        "endChar": 64
      },
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc7afaa1_ed79f615",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-14T20:50:11Z",
      "side": 1,
      "message": "This is done inline in the macro because the format string passed to absl::StrFormat is required to be a constexpr for security reasons. This also prevents us from doing a direct replacement of DAWN_VALIDATION_ERROR as-is, since some of the strings being passed into that macro currently are being built on the fly. Once all of the error messages have been updated we could replace DAWN_VALIDATION_ERROR with DAWN_FORMAT_VALIDATION_ERROR and rename it for conciseness. (In the meantime it does serve as a good flag for which messages have been updated.)",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b34ca181_7a983a96",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "Can we have a TODO to dedup the macros after all messages have been updated?",
      "parentUuid": "bc7afaa1_ed79f615",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5652f41b_0bf81258",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b34ca181_7a983a96",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7855347_2739be08",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-14T20:50:11Z",
      "side": 1,
      "message": "Template utility function here because the descriptors don\u0027t have a common base like the Dawn objects do.",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e94d2fca_cc146db9",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "I think this could be in the autogenerated header as well.",
      "parentUuid": "d7855347_2739be08",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07c24719_b0a3b178",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e94d2fca_cc146db9",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f805b45_79760df8",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-14T20:50:11Z",
      "side": 1,
      "message": "This is a little overkill, but it allows for better reporting of objects in cases where the object type is ambiguous (such as Device::ValidateObject()) and saves typing everywhere else. It shouldn\u0027t add to the per-object size, just a bit to the VTable.",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40b1994e_f3b819aa",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-15T02:02:03Z",
      "side": 1,
      "message": "What do you think about having a Printable \"trait\" so instead of calling a virtual function, we call something like PrintToString(obj). Or \"PrintToMessage\" ? \n\nwhich will say \"bind group \u003cunlabeled\u003e\" or \"bind group `myLabel`\" depending on if the thing is labeled or not\n\nBasically a free function just like you have for ValidationLabel for the descriptors. We could autogenerate all the implementations of them as well so we don\u0027t need to implement ObjectTypeName everywhere.\n\nSimilar to the printing code in third_party/dawn/generator/templates/webgpu_cpp_print.h but with string instead of ostream",
      "parentUuid": "3f805b45_79760df8",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb809f9_8e496327",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T11:33:47Z",
      "side": 1,
      "message": "Same suggestion but using AbslFormatConvert and porting over some of the enum formatting for enums and bitmasks. https://abseil.io/docs/cpp/guides/format#user-defined-formats\n\nWe might need to add a virtual method to get an enum representing the type of the object to implement AbslFormatConvert for const ObjectBase*",
      "parentUuid": "40b1994e_f3b819aa",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8fdd8c_264c603b",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-15T21:08:44Z",
      "side": 1,
      "message": "Have some code in place to autogenerate AbslFormatConverts for most objects, descriptors, enums, and bitmasks now. I don\u0027t have anything in place yet to handle getting the right formatted string from ObjectBase* for the moment.",
      "parentUuid": "9bb809f9_8e496327",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "639c813b_8d111d5b",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-17T20:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f8fdd8c_264c603b",
      "revId": "7c5310419c9ef62c31b9d5c82958a1763537211a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}