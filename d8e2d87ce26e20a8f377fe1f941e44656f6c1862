{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e4c879a_0c92b81e",
        "filename": "src/dawn/native/CallbackTaskManager.cpp",
        "patchSetId": 26
      },
      "lineNbr": 42,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "Instead of having three ways to enqueue a callback: Finish, HandleShutDown, HandleDeviceLoss,\n\nwhat if instead, HandleShutDown and HandleDeviceLoss simply saved a state variable on the CallbackTask that indicates the status?\n\nThen, instead we can iterate the tasks on device lost/destroy but still leave them in the callback queue. On the next tick, they will be called correctly",
      "range": {
        "startLine": 42,
        "startChar": 19,
        "endLine": 42,
        "endChar": 46
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e0501d8_fd6fba86",
        "filename": "src/dawn/native/CallbackTaskManager.cpp",
        "patchSetId": 26
      },
      "lineNbr": 42,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e4c879a_0c92b81e",
      "range": {
        "startLine": 42,
        "startChar": 19,
        "endLine": 42,
        "endChar": 46
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d146fae4_dae1a784",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 144,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "again, this is another concept. we have AddCallbackTask, RunInNextAPITick, and DeferCallbackToNextTick.\n\ncouldn\u0027t all the usages directly call AddCallbackTask ?\n\nIIUC, the only difference this function has is that it saves the message as a string. I think we can do that with:\n\n```\ncallbackTaskManager-\u003eAddCallbackTask(\n  [\u003d, message \u003d std::string(\"Device was destroyed.\")]() {\n     mDeviceLostCallback(WGPUDeviceLostReason_Destroyed,\n                         message.c_str(), mDeviceLostUserdata);\n  });\n```",
      "range": {
        "startLine": 144,
        "startChar": 5,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62e55688_152ea965",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 144,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "How about renaming the DeferCallbackToNextTick  function to \"AddCallbackTask\". I think a helper function is still useful for reusing code and reducing verbosity of the code. It also helps avoid passing raw C String to lambda by mistake.\n\n```\nvoid AddCallbackTask(...) {\n    std::string messageStr \u003d message;\n    device.GetCallbackTaskManager()-\u003eAddCallbackTask(\n        [\u003d] { callback(arg1, messageStr.c_str(), userdata); });\n}\n```\n\nThis helper function is internal in Device.cpp only.",
      "parentUuid": "d146fae4_dae1a784",
      "range": {
        "startLine": 144,
        "startChar": 5,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e7bbff1_df9016ee",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1284,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "I think we should flush the callback queue regardless\n\nIf tick errors, then ConsumedError will lose the device.\nBut the user will never be able to get a notification that the device was lost since the callback is stuck in the queue.",
      "range": {
        "startLine": 1284,
        "startChar": 0,
        "endLine": 1284,
        "endChar": 21
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b241751a_08c8b711",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1284,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e7bbff1_df9016ee",
      "range": {
        "startLine": 1284,
        "startChar": 0,
        "endLine": 1284,
        "endChar": 21
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b0438d7_0225942b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1307,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "we can dedent this code now by saying:\n```\nif (...) { return {}; }\n\n// other stuff\n```",
      "range": {
        "startLine": 1307,
        "startChar": 0,
        "endLine": 1307,
        "endChar": 46
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "493aec91_0757c2c1",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1307,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b0438d7_0225942b",
      "range": {
        "startLine": 1307,
        "startChar": 0,
        "endLine": 1307,
        "endChar": 46
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edf1d588_13046f6e",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1904,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "device-\u003eRunInNextAPITick and device-\u003eGetCallbackTaskManager()-\u003eAddCallbackTask\nare functionally very similar\n\nwe can simplify the number of concepts to keep track of if instead we provide a std::function overload for AddCallbackTask. That overload would use `GenericFunctionTask` as an implementation detail",
      "range": {
        "startLine": 1904,
        "startChar": 17,
        "endLine": 1904,
        "endChar": 33
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55b798be_b3fb1cc5",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1904,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edf1d588_13046f6e",
      "range": {
        "startLine": 1904,
        "startChar": 17,
        "endLine": 1904,
        "endChar": 33
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1a8a519_0c04bfb0",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "could be slightly reordered so that we ForceLoss, then add the expectation, then Tick",
      "range": {
        "startLine": 1009,
        "startChar": 4,
        "endLine": 1013,
        "endChar": 26
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85d2c46b_02062051",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1013,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "I could do it. But I don\u0027t think the purpose of this function is specifically testing device.Tick() such that we have to set EXPECT_CALL right before it. Also isn\u0027t the point of async callback is that we don\u0027t know exactly when it will be triggered. It also make implementation too rigid to accept changes in future.\n\nFurthermore, there are talks in other places about the way we use EXPECT_CALL in some of our code is not recommended by gmock authors.\n\nhttp://google.github.io/googletest/gmock_for_dummies.html#using-mocks-in-tests\n\u003e gMock requires expectations to be set before the mock functions are called, otherwise the behavior is undefined. Do not alternate between calls to EXPECT_CALL() and calls to the mock functions, and do not set any expectations on a mock after passing the mock to an API.\n\nHere it says we shouldn\u0027t \"alternate between calls to EXPECT_CALL() and calls to the mock functions\".\nWhich seems to imply EXPECT_CALL must be set up front, not set one EXPECT_CALL, then call mock functions, then set another EXPECT_CALL then call mock functions, and so on.",
      "parentUuid": "a1a8a519_0c04bfb0",
      "range": {
        "startLine": 1009,
        "startChar": 4,
        "endLine": 1013,
        "endChar": 26
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbf0acda_adb956fb",
        "filename": "src/dawn/tests/end2end/DeviceLifetimeTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 192,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "instead, change the name to DISABLED_DroppedThenMapBuffer",
      "range": {
        "startLine": 192,
        "startChar": 28,
        "endLine": 192,
        "endChar": 48
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4da5ab3_f6e64b9b",
        "filename": "src/dawn/tests/end2end/DeviceLifetimeTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 192,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbf0acda_adb956fb",
      "range": {
        "startLine": 192,
        "startChar": 28,
        "endLine": 192,
        "endChar": 48
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12db0c82_0f2cd13f",
        "filename": "src/dawn/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "why is this needed?",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 51,
        "endChar": 44
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "538ebe56_c38ef5de",
        "filename": "src/dawn/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "I didn\u0027t explicitly call device.Tick() in the tests, so the pending callbacks will be triggered by device\u0027s destruction instead. If we delete the mock callback object before TearDown(), it would cause a crash.",
      "parentUuid": "12db0c82_0f2cd13f",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 51,
        "endChar": 44
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee4e048_360da80e",
        "filename": "src/dawn/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 80,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "why is the ordering change needed?",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 35
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c48a0af_0c3e0d28",
        "filename": "src/dawn/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 80,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "cee4e048_360da80e",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 35
      },
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29a643ab_7b02014c",
        "filename": "src/dawn/tests/unittests/validation/ErrorScopeValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 62,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-01T07:34:11Z",
      "side": 1,
      "message": "why not have a .Tick() after the various PopErrorScope calls in this test suite?",
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc705e8e_fecb9a3c",
        "filename": "src/dawn/tests/unittests/validation/ErrorScopeValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 62,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-01T16:24:49Z",
      "side": 1,
      "message": "I could do that. But I think it doesn\u0027t matter much? The mock object only verifies the expectations once it is destroyed, i.e. inside TearDown(). So whether we trigger callbacks by calling Tick() in the specific tests or inside TearDown(), we still couldn\u0027t verify the exact time the mock\u0027s methods got called. And the behaviors wouldn\u0027t change.\n\nBesides, isn\u0027t purpose of the SetUp()/TearDown() is for multiple tests to re-use similar code. In this case, we could re-use the device.Tick() call as a last step  without having to explicitly do that in every test code.",
      "parentUuid": "29a643ab_7b02014c",
      "revId": "d8e2d87ce26e20a8f377fe1f941e44656f6c1862",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}