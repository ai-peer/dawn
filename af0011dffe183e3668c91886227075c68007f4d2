{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dceb90ed_1cb3033b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-17T08:14:00Z",
      "side": 1,
      "message": "+2, but I think the `TraverseExpression` implementation is unnecessarily complex.",
      "revId": "af0011dffe183e3668c91886227075c68007f4d2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf564e9e_1766e791",
        "filename": "src/tint/ast/traverse_expressions.h",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-17T08:14:00Z",
      "side": 1,
      "message": "nit, we usually declare constants as `kHasDepthArg`",
      "range": {
        "startLine": 64,
        "startChar": 26,
        "endLine": 64,
        "endChar": 39
      },
      "revId": "af0011dffe183e3668c91886227075c68007f4d2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0b70103_cdf57c9b",
        "filename": "src/tint/ast/traverse_expressions.h",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-17T08:14:00Z",
      "side": 1,
      "message": "Loving the interface, but I think we can do away with this map, if you change the `to_visit` vector to take a structure:\n\n```\nstruct Pending {\n   const ast::Expression* expr;\n   size_t depth;\n};\n```\n\nYou can make this second field conditional on `HAS_DEPTH_ARG`, but the performance hit is probably negligible.\n\nI think this change would clean up the implementation, and regain some performance.",
      "revId": "af0011dffe183e3668c91886227075c68007f4d2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}