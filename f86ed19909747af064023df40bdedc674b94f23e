{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "16c33563_be2ba184",
        "filename": "src/dawn/native/vulkan/AdapterVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-04-18T16:17:57Z",
      "side": 1,
      "message": "There used to be logic here to skip the check on Intel/AMD/NVIDIA, because they report the limit incorrectly. I thought we still had that, because we\u0027d have seen the same bug with passing the limit through? But looks removed in https://dawn-review.googlesource.com/c/dawn/+/122801\n\nIn any case I\u0027m pretty sure we need that again, because otherwise we\u0027ll end up blocklisting tons of Intel/AMD/NVIDIA devices.\n\nAlso add ImgTec to the list because they\u0027ve told us they have the same bug.",
      "revId": "f86ed19909747af064023df40bdedc674b94f23e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20510de6_673ed5b5",
        "filename": "src/dawn/native/vulkan/AdapterVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T16:23:53Z",
      "side": 1,
      "message": "maybe we can do something different - based on our understanding that the limit is reported wrong on Desktop devices - is it sufficient to:\n 1. If minFragmentCombinedOutputResources is lower than  maxStorageBuffersPerShaderStage+maxStorageTexturesPerShaderStage+maxColorAttachments, assume it is wrong, and ignore it?\n 2. If minFragmentCombinedOutputResources is greater than the sum, then we can raise the base limits to fit under it.\n \n?",
      "parentUuid": "16c33563_be2ba184",
      "revId": "f86ed19909747af064023df40bdedc674b94f23e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bae181de_ff30d9b1",
        "filename": "src/dawn/native/vulkan/AdapterVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-04-18T22:13:02Z",
      "side": 1,
      "message": "1. Yes, if the vulkan limit is lower than the sum of those base limits (8+4+8\u003d20) then we can be pretty confident it\u0027s wrong.\n\nI think this is a good idea. It might be conservative on a few systems, but it should avoid ever setting the limit too high. I edited my query script and added the full table of values where buf+tex+attachments \u003c combined limit, see the last collapsible section here. Note the amd,nvidia,intel lines with values 159 and 208. It\u0027s hard to tell if those are reporting incorrectly or if those are real limits, but they\u0027re high enough that it would definitely be best to treat them as real limits.\nhttps://github.com/gpuweb/gpuweb/issues/4018#issuecomment-1502396615",
      "parentUuid": "20510de6_673ed5b5",
      "revId": "f86ed19909747af064023df40bdedc674b94f23e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e840af86_390198e1",
        "filename": "src/dawn/native/vulkan/AdapterVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-04-19T00:44:40Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "20510de6_673ed5b5",
      "revId": "f86ed19909747af064023df40bdedc674b94f23e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}