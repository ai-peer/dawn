{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ce134c_cf96dabd",
        "filename": "src/dawn/native/RenderPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-07T09:37:53Z",
      "side": 1,
      "message": "What if some color targets are unused? It seems they shouldn\u0027t count.\n\nhttps://gpuweb.github.io/gpuweb/#total-number-of-fragment-output-resources\n\n\u003e the number of non-null elements in descriptor.targets",
      "range": {
        "startLine": 371,
        "startChar": 59,
        "endLine": 371,
        "endChar": 70
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b8adfe4_a7af5a1c",
        "filename": "src/dawn/native/RenderPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-07T17:38:33Z",
      "side": 1,
      "message": "Oh, hmm, I actually copied this condition from the validation for `maxColorAttachments` above in line 360. Should I update that as well?",
      "parentUuid": "c6ce134c_cf96dabd",
      "range": {
        "startLine": 371,
        "startChar": 59,
        "endLine": 371,
        "endChar": 70
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e88f1245_5cef5151",
        "filename": "src/dawn/native/RenderPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-07T18:03:46Z",
      "side": 1,
      "message": "I don\u0027t think so because the attachments are in order, so you can\u0027t have the array larger than maxColorAttachments. Here you could have color attachments 0 and 7 and storage texture and it would be allowed.",
      "parentUuid": "5b8adfe4_a7af5a1c",
      "range": {
        "startLine": 371,
        "startChar": 59,
        "endLine": 371,
        "endChar": 70
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c92d55a_bdbca38c",
        "filename": "src/dawn/native/RenderPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-07T22:21:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e88f1245_5cef5151",
      "range": {
        "startLine": 371,
        "startChar": 59,
        "endLine": 371,
        "endChar": 70
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42b4a660_b66280ee",
        "filename": "src/dawn/tests/unittests/validation/RenderPipelineValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1494,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-07T01:35:24Z",
      "side": 1,
      "message": "for this validation test, it\u0027s probably not necessary to test all combinations of the number of resources. Sufficient to test\n - some combinations to get to max and max+1\n - with/without depth/stencil attachment to be certain it doesn\u0027t count\n - make sure we test with at least one of each of storage buffer / texture / color attachment",
      "range": {
        "startLine": 1491,
        "startChar": 4,
        "endLine": 1494,
        "endChar": 29
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "273358ba_9d505fa5",
        "filename": "src/dawn/tests/unittests/validation/RenderPipelineValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1494,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-07T22:21:14Z",
      "side": 1,
      "message": "Done, updated to just test a subset of interesting cases.",
      "parentUuid": "42b4a660_b66280ee",
      "range": {
        "startLine": 1491,
        "startChar": 4,
        "endLine": 1494,
        "endChar": 29
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2f8b0a2_f2820798",
        "filename": "src/dawn/tests/unittests/validation/RenderPipelineValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1494,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-07T22:40:11Z",
      "side": 1,
      "message": "still doesn\u0027t have a test without depth stencil\n\nI also think the test could still be a bit tighter to explicitly test that max works and max+1 does not work.\n\nRight now, it\u0027s not super clear. All we know is that there are some combinations \u003c\u003d max that work and some combinations \u003e max that do not work. But it\u0027s not as tight as \u003d\u003d max is OK and \u003d\u003d max+1 is not OK.\n\nyou could imagine `DoTest(numBuffers, numTextures, colorAttachments, hasDepthStencil);` and then\n\n```\n// exactly maxFragmentCombinedOutputResources is OK\nDoTest(1, maxFragmentCombinedOutputResources - 3, {1, 3}, false);\n\n// exactly maxFragmentCombinedOutputResources with depth-stencil is OK\nDoTest(1, maxFragmentCombinedOutputResources - 3, {1, 3}, true);\n\n// maxFragmentCombinedOutputResources + 1 is an error\nASSERT_DEVICE_ERROR(DoTest(1, maxFragmentCombinedOutputResources - 2, {1, 3}, false));\n```",
      "parentUuid": "273358ba_9d505fa5",
      "range": {
        "startLine": 1491,
        "startChar": 4,
        "endLine": 1494,
        "endChar": 29
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11d62e41_e132d4c0",
        "filename": "src/dawn/tests/unittests/validation/RenderPipelineValidationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1494,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-03-07T23:40:35Z",
      "side": 1,
      "message": "Done, though IMO this is less convincing than explicitly just iterating all combinations (the first revision of the test), which surprisingly was only about 2.5x more time. (90ms vs 240ms)\n\nNote also that the first revision of the test didn\u0027t need to have depth-stencil on/off explicitly because it was always on and the limit was tightly bound so that verifies that depth-stencil doesn\u0027t count towards the resource limit. Though it would need to be tweaked to test sparse attachments.",
      "parentUuid": "d2f8b0a2_f2820798",
      "range": {
        "startLine": 1491,
        "startChar": 4,
        "endLine": 1494,
        "endChar": 29
      },
      "revId": "f3298aedda40541b62492b30c569096484a4e2df",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}