{
  "comments": [
    {
      "key": {
        "uuid": "22687640_02ac490b",
        "filename": "BUILD.gn",
        "patchSetId": 15
      },
      "lineNbr": 645,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "This is a bunch of additional work bu can we split this into a new test harness called dawn_whitebox_tests like we have angle_whitebox_tests? dawn_end2end_tests is great to test the API surface of dawn but won\u0027t scale to test backend internals.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7775c53a_98916d1d",
        "filename": "BUILD.gn",
        "patchSetId": 15
      },
      "lineNbr": 645,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Added a separate build target only for the whitebox tests which behaves the same as the end2end harness but includes native sources. Should we have it like this for now? I found a bug about this here http://crbug.com/dawn/67 if relevant.",
      "parentUuid": "22687640_02ac490b",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6553be77_7e82b667",
        "filename": "BUILD.gn",
        "patchSetId": 15
      },
      "lineNbr": 645,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "We decided to split the sources for end2end and white box, but compile them both into the end2end harness.",
      "parentUuid": "7775c53a_98916d1d",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "934f9fde_468dd2b3",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "When this is refactored in TransitionUsageNow, note that we only need to add the semaphores once (and it would actually be invalid to do it multiple times)",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b38813ac_4a8a2b2a",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Right now texture-\u003eClearWaitRequirements() is used to remove semaphores from the texture after they\u0027re added. This is so we don\u0027t need to verify a semaphore we are adding isn\u0027t already added in AddWaitSemaphore().",
      "parentUuid": "934f9fde_468dd2b3",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bb06027_b56ae5d5",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "This is now done by clearing mWaitRequirements in TransitionUsage, after adding them to the recording context.",
      "parentUuid": "b38813ac_4a8a2b2a",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b3a8ebd_673b02a3",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 427,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "All the AddSemaphores are in places where we also do TransitionUsageNow. I suggest we introduce a \"CommandRecordingContext\" that\u0027s passed to the TransitionUsageNow on which semaphores can be added. TransitionUsageNow could be (could probably find a better name): AccessOnRecordingContext.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7a0e995_0c2e433c",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 427,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Added the recording context.\n\nAlso, should we rename TransitionUsageNow only for textures? There is one in BufferVk but we don\u0027t have a reason to pass the recording context into it yet.",
      "parentUuid": "0b3a8ebd_673b02a3",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9c7deb6_0a0552fa",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 427,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "We decided to make BufferVk also use the recording context.",
      "parentUuid": "c7a0e995_0c2e433c",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4129cb78_2d72fb06",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 579,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "We also need to validate that we have the correct Vulkan extensions, and also that the handle types are supported by our physical device (which means we also need to query data about these imported handles from the physical device).",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0b85690_29101841",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 579,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "We will be doing the validation in \u003cservice\u003e.Supported(), in a followup CL.",
      "parentUuid": "4129cb78_2d72fb06",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d89e2ea_5d8b417d",
        "filename": "src/dawn_native/vulkan/MemoryAllocator.cpp",
        "patchSetId": 15
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "This shouldn\u0027t be needed: right now it is used for tests which could do their own allocation for each resources, and for TextureVk\u0027s import path that doesn\u0027t need to go through the memory allocator since we already have it in the FD.\n\nAlso we need to get the size and memorytype from the outside because Vulkan asks that they match the initial creation of the FD.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0c1f783_80561ae4",
        "filename": "src/dawn_native/vulkan/MemoryAllocator.cpp",
        "patchSetId": 15
      },
      "lineNbr": 46,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Agreed, removed the pNext.",
      "parentUuid": "0d89e2ea_5d8b417d",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e57c7a80_31162f07",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 515,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-16T18:09:33Z",
      "side": 1,
      "message": "Don\u0027t we only allow arraylayers\u003d1 textures to be imported?",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1418277_ed05385d",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 515,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Yep good catch",
      "parentUuid": "e57c7a80_31162f07",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "747db590_4f24e27a",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 597,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "In the descriptors for wrapping the texture the external world should tell us whether the texture was cleared. We should also be able to query if the texture was cleared before it is destroyed. I think Rafael will handle that part.",
      "range": {
        "startLine": 595,
        "startChar": 0,
        "endLine": 597,
        "endChar": 55
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad463de8_95baf765",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 597,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "Added an isCleared parameter in the descriptor.",
      "parentUuid": "747db590_4f24e27a",
      "range": {
        "startLine": 595,
        "startChar": 0,
        "endLine": 597,
        "endChar": 55
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a948a82d_38396687",
        "filename": "src/dawn_native/vulkan/VulkanBackend.cpp",
        "patchSetId": 15
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "This should be done probably on the device. VulkanBackend.cpp should be almost as passthrough as possible because it is compiled multiple times.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d77a00af_edc2819f",
        "filename": "src/dawn_native/vulkan/VulkanBackend.cpp",
        "patchSetId": 15
      },
      "lineNbr": 70,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Moved.",
      "parentUuid": "a948a82d_38396687",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03381062_ecf45b95",
        "filename": "src/dawn_native/vulkan/VulkanBackend.cpp",
        "patchSetId": 15
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "Can we have some validation here like the device is valid, the texture isn\u0027t destroyed and this is actually an external texture?",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfd88b45_322db508",
        "filename": "src/dawn_native/vulkan/VulkanBackend.cpp",
        "patchSetId": 15
      },
      "lineNbr": 71,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "Added!",
      "parentUuid": "03381062_ecf45b95",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5abeab11_ce45e627",
        "filename": "src/dawn_native/vulkan/VulkanInfo.cpp",
        "patchSetId": 15
      },
      "lineNbr": 219,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "The non-fd extensions here have also been merged in Vulkan 1.1 can we add logic here and in VulkanFunctions that handles that? (here is would at the end of the function do if 1.1 then extension is true, in VulkanFunctions first check 1.1 and load core entrypoints otherwise load extension.)",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a38d73fd_47141eed",
        "filename": "src/dawn_native/vulkan/VulkanInfo.cpp",
        "patchSetId": 15
      },
      "lineNbr": 219,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Will do after patch for asking for Vulkan 1.1.\nEDIT: cant remove the comment, but still need to do this after the patch landed.",
      "parentUuid": "5abeab11_ce45e627",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97849ac8_5714a31e",
        "filename": "src/dawn_native/vulkan/VulkanInfo.cpp",
        "patchSetId": 15
      },
      "lineNbr": 219,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "See the CL for adding extensions. We decided to request the KHR extensions if available. On 1.1, we get the entrypoints always but don\u0027t necessarily request the extension if it isn\u0027t reported by the device. This should work since according to the spec these promoted extensions are aliased, so importing the KHR suffix versions of the functions is valid.",
      "parentUuid": "a38d73fd_47141eed",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf14d00_df3c9403",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "WrapVulkanExternalMemoryImageFd or something like this?",
      "range": {
        "startLine": 33,
        "startChar": 35,
        "endLine": 33,
        "endChar": 50
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d25b8ca7_77297033",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "This should also have a detailed comment explaining what happens and what all the parameters do as well as what happens on failure.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6b43db2_c57361aa",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "Added",
      "parentUuid": "d25b8ca7_77297033",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19cbad52_2610ce7c",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "These functions are now platform dependent like this. OpaqueFD refers to the service which will try to import the image.",
      "parentUuid": "3cf14d00_df3c9403",
      "range": {
        "startLine": 33,
        "startChar": 35,
        "endLine": 33,
        "endChar": 50
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6760363_0b38af71",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "Along with the memory fd we need the memorySize and memoryTypeIndex (and maybe physical device for validation) because they are required to match the initial allocation. We also likely need the handle type for that fd. We could have a descriptor for this.",
      "range": {
        "startLine": 35,
        "startChar": 51,
        "endLine": 35,
        "endChar": 63
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "832fcd54_ba11917b",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "Descriptor added.",
      "parentUuid": "b6760363_0b38af71",
      "range": {
        "startLine": 35,
        "startChar": 51,
        "endLine": 35,
        "endChar": 63
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0c64dd0_99059815",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "The name should also explain that this is only for imported textures.",
      "range": {
        "startLine": 38,
        "startChar": 27,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d358da_023e378e",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "This needs to be able to fail.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2be7af91_b40be942",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 38,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "Returns -1 on failure. For another future platform return whatever the null handle is.",
      "parentUuid": "c6d358da_023e378e",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "263158f7_59b8ac45",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 15
      },
      "lineNbr": 38,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-07T23:11:20Z",
      "side": 1,
      "message": "Name got even bigger, added a comment instead. If anyone has a better name feel free to suggest.",
      "parentUuid": "c0c64dd0_99059815",
      "range": {
        "startLine": 38,
        "startChar": 27,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ad6114_796618dd",
        "filename": "src/tests/end2end/VulkanImageWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-16T13:26:35Z",
      "side": 1,
      "message": "I didn\u0027t review the tests in detail, and as noted in BUILD.gn this should live in a dawn_whitebox_tests binary because dawn_end2end_tests isn\u0027t well set up to test internal details of the backends, and to split tests between those testing through the API surface and those testing implementation details.",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "483382fd_23acb8ed",
        "filename": "src/tests/end2end/VulkanImageWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-07-30T06:36:28Z",
      "side": 1,
      "message": "Commented on in BUILD.gn.",
      "parentUuid": "61ad6114_796618dd",
      "revId": "d6c00e079dfdea35f102da9648e3ccb05cbeda36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}