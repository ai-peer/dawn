{
  "comments": [
    {
      "key": {
        "uuid": "9113bc9f_c00123f6",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-08T19:27:59Z",
      "side": 1,
      "message": "I think it would be better to keep the if (count \u003e 0) part, and don\u0027t rely on manager-\u003eGet(0) to return nullptr. From the name of the function GetViewAllocator, it\u0027s not obvious that it could return null. Also saves us some space storing the extra nullptr in the manager.",
      "range": {
        "startLine": 136,
        "startChar": 7,
        "endLine": 137,
        "endChar": 86
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41b85ba4_f4cd59a8",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-08T21:37:48Z",
      "side": 1,
      "message": "How do you feel about returning a non-null allocator and omit the checks? No `checks x O(kMaxBGLs)` seems like a good deal for a extra/unused allocator.",
      "parentUuid": "9113bc9f_c00123f6",
      "range": {
        "startLine": 136,
        "startChar": 7,
        "endLine": 137,
        "endChar": 86
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ceacdd5_a1191075",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-09T16:30:03Z",
      "side": 1,
      "message": "I don\u0027t feel strongly about this. If we want to have no checks then I\u0027d prefer having a null allocator at index 0. But we should add a comment about this in the header next to the method declaration.",
      "parentUuid": "41b85ba4_f4cd59a8",
      "range": {
        "startLine": 136,
        "startChar": 7,
        "endLine": 137,
        "endChar": 86
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aeb0320_de1014a1",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-09T10:00:26Z",
      "side": 1,
      "message": "This is pretty overkill to have a whole foo bar baz allocator manager just to hold two fixed-size arrays and no logic. How about just putting them in the device?",
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ad4940_f5a497e2",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-08T19:27:59Z",
      "side": 1,
      "message": "WDYT about initializing these lazily?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 30,
        "endChar": 93
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55bfca21_9cf7a72e",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-08T21:37:48Z",
      "side": 1,
      "message": "I tend to prefer lazy construct when either the number could get large or creation becomes heavy. Here it\u0027s n\u003d16 (small?) and only contains tracking structures. Is it too much?",
      "parentUuid": "c9ad4940_f5a497e2",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 30,
        "endChar": 93
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "476b5940_6b22cb99",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-09T10:00:26Z",
      "side": 1,
      "message": "IMHO that\u0027s probably fine. We want to optimize for runtime when we can.",
      "parentUuid": "55bfca21_9cf7a72e",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 30,
        "endChar": 93
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21e4a711_354bae5b",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-09T16:30:03Z",
      "side": 1,
      "message": "Ah I had forgotten n is just 16. We should consider revisting if that number changes or when we get to different feature levels that can support a greater number of bindings.",
      "parentUuid": "476b5940_6b22cb99",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 30,
        "endChar": 93
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f605b94_86ac2f98",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-08T19:27:59Z",
      "side": 1,
      "message": "nit: in Dawn we like to include std lib paths after our own",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 16
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed7bb431_36a7d0e5",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-08T21:37:48Z",
      "side": 1,
      "message": "Bummer. I had my IDE auto-save to be configured to chromium\u0027s clang-format, do you manually  `git cl format`?",
      "parentUuid": "7f605b94_86ac2f98",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 16
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31f75a65_bd9785d6",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-09T16:30:03Z",
      "side": 1,
      "message": "oh hm, I thought we were using Chromium\u0027s style -- I guess not though.\n\nI think git cl format only does include ordering if there\u0027s no whitespace between them",
      "parentUuid": "ed7bb431_36a7d0e5",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 16
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58083b40_26205793",
        "filename": "src/dawn_native/d3d12/NonShaderVisibleDescriptorAllocatorManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-09T10:00:26Z",
      "side": 1,
      "message": "I just realized this should probably be StagingDescriptorAllocator instead of NonShaderVisibleDescriptorAllocator that\u0027s a bit of a concept overload.",
      "range": {
        "startLine": 28,
        "startChar": 10,
        "endLine": 28,
        "endChar": 26
      },
      "revId": "730a89166a87a7dc6277b9ebc116354a64adce2d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}