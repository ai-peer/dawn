{
  "comments": [
    {
      "key": {
        "uuid": "40f83e36_8139582d",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Neither PopulateSamplers nor PopulateViews return any Dawn errors.  Can we have them return just a bool instead?",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 193,
        "endChar": 23
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e762656f_788e2221",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "PopulateSamplers is almost the same code except for the member variables used and enum passed to D3D. \n\nIs is possible to refactor them to be the same code?",
      "range": {
        "startLine": 193,
        "startChar": 35,
        "endLine": 193,
        "endChar": 51
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa000bc0_df2660dc",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T21:00:22Z",
      "side": 1,
      "message": "Don\u0027t feel strongly - curious what others think.",
      "parentUuid": "e762656f_788e2221",
      "range": {
        "startLine": 193,
        "startChar": 35,
        "endLine": 193,
        "endChar": 51
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5949604_b20cf51f",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T18:01:46Z",
      "side": 1,
      "message": "note: this is temporary",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9621195_35887cc9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "If only one of the didCreateBindGroupXXX booleans was set to true from above, would ORing in the masks here end up with the call to PopulateXXXX who\u0027s boolean was set to false end up populating things twice? Or does IsAllocationStillValid save us?  \n\nEven if it does, might be worth populating the views and samplers as separate loops to see how that affects locality.",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdc3fc8f_32a428b6",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Is there a reason why the code above iterates over mDirtyBindGroups while this code iterates over mBindGroupLayoutsMask?",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 74
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "660b25e3_8efb4ff0",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Nit: Use descriptorHeaps.size() instead of hardcoded 2.",
      "range": {
        "startLine": 201,
        "startChar": 44,
        "endLine": 201,
        "endChar": 45
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6659938_cdc5debb",
        "filename": "src/dawn_native/d3d12/GPUDescriptorHeapAllocationD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Can member variables of GPUDescriptorHeapAllocation be private to the class?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 31
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d3d59ba_15dcda97",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "I see very similar code here and in StagingDescriptorAllocator. Would it be possible for both of them to share this heap recycling code?",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dbc60b4_19f39121",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T21:00:22Z",
      "side": 1,
      "message": "What is \"similar\"? Note: only GPU pooled heaps use serials nor need random access.",
      "parentUuid": "5d3d59ba_15dcda97",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbae7dfe_e6104894",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Can \u0027allocation\u0027 be const reference?",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca602cb9_91f93dfc",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T21:00:22Z",
      "side": 1,
      "message": "IIRC, Dawn prefers passing by object*",
      "parentUuid": "cbae7dfe_e6104894",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}