{
  "comments": [
    {
      "key": {
        "uuid": "62271d8c_e1bbf1c9",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "nit: This could return the GPUDescriptorHeapAllocation directly instead of extracting data left and right to put it right back in the GPUDescriptorHeapAllocation.",
      "range": {
        "startLine": 176,
        "startChar": 76,
        "endLine": 176,
        "endChar": 93
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9e9eeb5_9a258518",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Good catch.",
      "parentUuid": "62271d8c_e1bbf1c9",
      "range": {
        "startLine": 176,
        "startChar": 76,
        "endLine": 176,
        "endChar": 93
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40f83e36_8139582d",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Neither PopulateSamplers nor PopulateViews return any Dawn errors.  Can we have them return just a bool instead?",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 193,
        "endChar": 23
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e762656f_788e2221",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "PopulateSamplers is almost the same code except for the member variables used and enum passed to D3D. \n\nIs is possible to refactor them to be the same code?",
      "range": {
        "startLine": 193,
        "startChar": 35,
        "endLine": 193,
        "endChar": 51
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa000bc0_df2660dc",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T21:00:22Z",
      "side": 1,
      "message": "Don\u0027t feel strongly - curious what others think.",
      "parentUuid": "e762656f_788e2221",
      "range": {
        "startLine": 193,
        "startChar": 35,
        "endLine": 193,
        "endChar": 51
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8d0b69d_8a3891f4",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "+1, I thought this was to be done in an earlier CL. It would help with perf.",
      "parentUuid": "40f83e36_8139582d",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 193,
        "endChar": 23
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdc3b27_d35ec9a4",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "No strong opinion. It would using pointer-to-member right? The calling convention will probably make this very cheap, otherwise later down the line we can make the helper function a template so that it is inlined on both sides.",
      "parentUuid": "fa000bc0_df2660dc",
      "range": {
        "startLine": 193,
        "startChar": 35,
        "endLine": 193,
        "endChar": 51
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d984a4f0_4e580507",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40f83e36_8139582d",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 193,
        "endChar": 23
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a76efb4_4846e88b",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Yup, SGTM.",
      "parentUuid": "0bdc3b27_d35ec9a4",
      "range": {
        "startLine": 193,
        "startChar": 35,
        "endLine": 193,
        "endChar": 51
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5949604_b20cf51f",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T18:01:46Z",
      "side": 1,
      "message": "note: this is temporary",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9621195_35887cc9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "If only one of the didCreateBindGroupXXX booleans was set to true from above, would ORing in the masks here end up with the call to PopulateXXXX who\u0027s boolean was set to false end up populating things twice? Or does IsAllocationStillValid save us?  \n\nEven if it does, might be worth populating the views and samplers as separate loops to see how that affects locality.",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d51633e4_0e688886",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "IsAllocationStillValid would save us. No opinion on whether the loops should be split or not.",
      "parentUuid": "a9621195_35887cc9",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6165b6db_722ac94c",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "+1. For fun, I tested. The extra IterateBitSet + branch didn\u0027t help.",
      "parentUuid": "d51633e4_0e688886",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f625c92_8e5de885",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-29T21:32:54Z",
      "side": 1,
      "message": "Since the performance is the same, this comes down to which approach is easiest to comprehend and debug.  \n\nIf the only difference between populating the two heaps is which member variables you pass to helper functions to do all of the work, then it might be better to do them separately. Offline, you said you had it that way initially. Did you switch to the approach in your CL because you thought it would be faster?",
      "parentUuid": "6165b6db_722ac94c",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "342e085b_789a67c7",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T22:07:14Z",
      "side": 1,
      "message": "Ended up here because of 1) AE\u0027s macros favored single-pass and 2) IterateBitSet is hot (dawn:306). Both were conclusive. However, is CL is one of many and I\u0027m hesitant to draw perf conclusions.\n\nHow about a TODO?",
      "parentUuid": "4f625c92_8e5de885",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22735211_92efe188",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-30T18:25:34Z",
      "side": 1,
      "message": "TODO is fine. \n\nIs there a reason why you are skeptical of the \"for fun\" perf investigation that you yourself ran?",
      "parentUuid": "342e085b_789a67c7",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f69edfe5_612b3f31",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-30T21:01:22Z",
      "side": 1,
      "message": "Namely the reasons cited (1)(2) but I haven\u0027t tested on a fully optimized build yet which is why I want to re-visit.",
      "parentUuid": "22735211_92efe188",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 139,
        "endChar": 58
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdc3fc8f_32a428b6",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Is there a reason why the code above iterates over mDirtyBindGroups while this code iterates over mBindGroupLayoutsMask?",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 74
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38fde684_7903f7ae",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "Yes, if we switch heaps, we must reencode all bindgroups because potentially all of them contains views / samplers that must be reencoded in heaps.",
      "parentUuid": "cdc3fc8f_32a428b6",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 74
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abb35635_71bf46a1",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "When the heap switches, non-dirty groups must be re-populated.",
      "parentUuid": "cdc3fc8f_32a428b6",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 74
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "660b25e3_8efb4ff0",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Nit: Use descriptorHeaps.size() instead of hardcoded 2.",
      "range": {
        "startLine": 201,
        "startChar": 44,
        "endLine": 201,
        "endChar": 45
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc8011a5_82f6b268",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "660b25e3_8efb4ff0",
      "range": {
        "startLine": 201,
        "startChar": 44,
        "endLine": 201,
        "endChar": 45
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32940541_74c1fed1",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "nit: Hide the make_unique + Initialize in a Create static member method?",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49f245c1_4b8a17d1",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32940541_74c1fed1",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1653895c_edbbb145",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "Note: this is now unused.",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82028dbd_7d1080dc",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1653895c_edbbb145",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6659938_cdc5debb",
        "filename": "src/dawn_native/d3d12/GPUDescriptorHeapAllocationD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Can member variables of GPUDescriptorHeapAllocation be private to the class?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 31
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56823027_30f40773",
        "filename": "src/dawn_native/d3d12/GPUDescriptorHeapAllocationD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "Alternatively make this a struct and all members const so they can\u0027t be change (they would also lose the m prefix). Either way is fine.",
      "parentUuid": "d6659938_cdc5debb",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 31
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd40c240_e9b0df11",
        "filename": "src/dawn_native/d3d12/GPUDescriptorHeapAllocationD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6659938_cdc5debb",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 31
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "541ec623_9cbbd3ae",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "nit: return AllocateAndSwitchShaderVisibleHeap()",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aab76406_4aeb0965",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "541ec623_9cbbd3ae",
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d3d59ba_15dcda97",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "I see very similar code here and in StagingDescriptorAllocator. Would it be possible for both of them to share this heap recycling code?",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dbc60b4_19f39121",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T21:00:22Z",
      "side": 1,
      "message": "What is \"similar\"? Note: only GPU pooled heaps use serials nor need random access.",
      "parentUuid": "5d3d59ba_15dcda97",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "689b470a_364fe14e",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-29T21:32:54Z",
      "side": 1,
      "message": "Spoke offline. I see your point about being different enough that sharing code is not necessary.",
      "parentUuid": "2dbc60b4_19f39121",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbae7dfe_e6104894",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-28T20:19:14Z",
      "side": 1,
      "message": "Can \u0027allocation\u0027 be const reference?",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca602cb9_91f93dfc",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-28T21:00:22Z",
      "side": 1,
      "message": "IIRC, Dawn prefers passing by object*",
      "parentUuid": "cbae7dfe_e6104894",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e95ef5a8_d8aaaea2",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-28T21:05:21Z",
      "side": 1,
      "message": "Dawn prefers object* when mutable and const object\u0026 when immutable. I think we can use const\u0026 here",
      "parentUuid": "ca602cb9_91f93dfc",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce3b7aa9_63eb99fc",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e95ef5a8_d8aaaea2",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d93912e_adba0bc6",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-28T21:05:21Z",
      "side": 1,
      "message": "typo: successful",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 40
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83233558_b1ed3592",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T14:09:52Z",
      "side": 1,
      "message": "and nit: returns true if the allocation was successful, when false is returned the current heap is full and AllocateAndSwitchShaderVisibleHeap must be called.",
      "parentUuid": "4d93912e_adba0bc6",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 40
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b71713d0_893787d6",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-29T17:45:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d93912e_adba0bc6",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 40
      },
      "revId": "17bc9241b7c7c26d8dab3fb987b24b23732b16c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}