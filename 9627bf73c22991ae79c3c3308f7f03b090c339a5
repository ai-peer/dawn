{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2ad2064b_4f91e9ab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-11T17:25:07Z",
      "side": 1,
      "message": "IIRC, Vulkan requires you to Reset the query before rewriting it. ResetQueryPool may be called inside a compute pass, but not inside a render pass.\n\nSo, it\u0027s necessary to validate you don\u0027t rewrite render pass queries - but it\u0027s OK in the backend to rewrite compute pass queries.\n\nDoes the spec say we must not rewrite for both?",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 23
      },
      "revId": "9627bf73c22991ae79c3c3308f7f03b090c339a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8871aa0_75a7f6a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-05-11T18:25:05Z",
      "side": 1,
      "message": "The spec says you can\u0027t write the begin and end timestamps into the same place (https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-timestampwrites called from both begin-pass methods). Those two things are semantically clearly ordered but it\u0027s still a declarative API and you can write the keys out of order if you want, so it\u0027s a little subtle if one of them \"takes precedent\" over the other.\n\nAnyway, if a user wants only the end timestamp, they should simply not request the beginning timestamp.",
      "parentUuid": "2ad2064b_4f91e9ab",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 23
      },
      "revId": "9627bf73c22991ae79c3c3308f7f03b090c339a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61af77ff_697ddf22",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-05-11T20:47:44Z",
      "side": 1,
      "message": "Thanks for the explanation as to why this wasn\u0027t there before, Austin. It was driving me crazy wondering why we were going out of our way to validate it in one case but clearly expected it to not be validated in the other.\n\nI think having this validation be consistent between pass types, regardless of technical limitations, is a plus.",
      "parentUuid": "e8871aa0_75a7f6a5",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 23
      },
      "revId": "9627bf73c22991ae79c3c3308f7f03b090c339a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fabde2ab_02466337",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-05-11T17:21:40Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "9627bf73c22991ae79c3c3308f7f03b090c339a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}