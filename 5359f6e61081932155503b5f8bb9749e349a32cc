{
  "comments": [
    {
      "key": {
        "uuid": "3d77f0ec_9c985ee9",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T18:36:38Z",
      "side": 1,
      "message": "The other callsites of HandleError call this function when an error has already happened. Therefore, I do not think it makes sense for CheckAndHandleDeviceLost to be called from here because it\u0027s purpose is to determine whether there is an error.\n\nI think CheckAndHandleDeviceLost should be called as part of Tick. \n\nI think we should refactor things such that CheckAndHandleDeviceLost checks whether the device has been removed and, if so, calls HandleDeviceLost which cleans up everything. The \"device lost\" extension should skip the checking and call HandleDeviceLost directly.  \n\nHandleDeviceLost can be folded into HandleError as Corentin suggests.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 39
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f19e99b7_12cc9b4e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d77f0ec_9c985ee9",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 39
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccea08b8_179532f5",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T15:27:12Z",
      "side": 1,
      "message": "The WebGPU-speak for this is \"lost\" so IsLost()?",
      "range": {
        "startLine": 170,
        "startChar": 13,
        "endLine": 170,
        "endChar": 28
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1665cec3_8187b953",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccea08b8_179532f5",
      "range": {
        "startLine": 170,
        "startChar": 13,
        "endLine": 170,
        "endChar": 28
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a1c1707_929a78c8",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 171,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T18:36:38Z",
      "side": 1,
      "message": "I do not see any instances where SetDeviceRemoved is called externally. I think it should be a protected method and an implementation detail of Device and its subclasses.\n\nDepending on how you end up refactoring things from Corentin\u0027s feedback, the base class might be the one setting mDeviceRemoved anyways. In that case, the variable can be private.",
      "range": {
        "startLine": 171,
        "startChar": 7,
        "endLine": 171,
        "endChar": 32
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9631d510_073aedb0",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 171,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a1c1707_929a78c8",
      "range": {
        "startLine": 171,
        "startChar": 7,
        "endLine": 171,
        "endChar": 32
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594c84cc_40d56f3e",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T15:27:12Z",
      "side": 1,
      "message": "All the backends have the same logic, instead we could have DeviceBase::HandleError check for device loss, call a LoseImpl method when that happens. Then TickImpl of various backends can check for device loss and return DAWN_DEVICE_LOST_ERROR in that case.\n\nWe\u0027ll also want a \"lose device extension\" for testing, so we could have device.Lose that calls LoseImpl.\n\nFinally in every single entrypoints (except maybe command recording outside of Finish / EndPass) we should DAWN_TRY(GetDevice()-\u003eValidateAlive()).",
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c59d2e7f_09b7e99d",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-06T18:02:49Z",
      "side": 1,
      "message": "Thanks for the guidance! What do you mean by entrypoints?",
      "parentUuid": "594c84cc_40d56f3e",
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77a1585d_ef999d76",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-06T18:13:07Z",
      "side": 1,
      "message": "- All of the DeviceBase:: methods should first check if the device is alive. Like device.createBuffer, device.createPipeline, etc.\n- Command encoding (encoder.setBindGroup, etc.) probably don\u0027t need these checks because we don\u0027t use GPU resources, only record stuff on the CPU\n- Queue::Submit should first check that the device is alive. You already have this.\n- Probably Buffer::Map, Buffer::Unmap, etc.\n- + (Anything that may use the GPU)",
      "parentUuid": "c59d2e7f_09b7e99d",
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62e208fb_0c82dcc1",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 172,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77a1585d_ef999d76",
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "326c7715_74787d83",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 403,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T18:36:38Z",
      "side": 1,
      "message": "Passing an error parameter to this function and checking whether the error matches the name of the method seems unnecessary. I think we should have CheckAndHandleDeviceLost take no parameters.",
      "range": {
        "startLine": 403,
        "startChar": 12,
        "endLine": 403,
        "endChar": 47
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80548044_2df66740",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 403,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "326c7715_74787d83",
      "range": {
        "startLine": 403,
        "startChar": 12,
        "endLine": 403,
        "endChar": 47
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f5993c_abe8c8bd",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 405,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T18:36:38Z",
      "side": 1,
      "message": "Why isn\u0027t mPendingCommands.Release() part of RemoveDevice?",
      "range": {
        "startLine": 404,
        "startChar": 1,
        "endLine": 405,
        "endChar": 39
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fef8fe38_584851b3",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 405,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68f5993c_abe8c8bd",
      "range": {
        "startLine": 404,
        "startChar": 1,
        "endLine": 405,
        "endChar": 39
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77dbf725_7e23b193",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T18:36:38Z",
      "side": 1,
      "message": "IsDeviceRemoved only checks a boolean. You actually need to check whether the device has been removed. On D3D12, you need to call ID3D12Device::GetDeviceRemovedReason. On OpenGL, you need to ask the context whether it has been lost.",
      "range": {
        "startLine": 403,
        "startChar": 0,
        "endLine": 408,
        "endChar": 9
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a80c0ae_296d75cb",
        "filename": "src/dawn_native/null/DeviceNull.cpp",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T18:36:38Z",
      "side": 1,
      "message": "For uniformity with the other device types, you should call SetDeviceRemoved before calling RemoveDevice.\n\n(Might not matter after other refactoring is completed)",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 163,
        "endChar": 0
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b8fb7c_7a345a71",
        "filename": "src/dawn_native/null/DeviceNull.cpp",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-11-14T19:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a80c0ae_296d75cb",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 163,
        "endChar": 0
      },
      "revId": "5359f6e61081932155503b5f8bb9749e349a32cc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}