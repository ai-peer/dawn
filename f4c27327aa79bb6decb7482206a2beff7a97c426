{
  "comments": [
    {
      "key": {
        "uuid": "c97c8da2_e8d3294f",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 12
      },
      "lineNbr": 289,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-04T23:03:57Z",
      "side": 1,
      "message": "Here\u0027s a suggestion:\n\nIn the BindGroupLayout constructor, there\u0027s a few things we count like buffer count, dynamic buffer count, etc. We could count as well the number of buffers bindings *without* minBufferSize. let\u0027s call these \"unverified buffer sizes\" or maybe a better name if you can think of one.\n\nSo then we know BGL::mUnverifiedBufferSizeCount;\n\nNow, this is new since you last worked on Dawn. The BindGroupLayout *is* an allocator for BindGroups. When we allocate a bind group, we ask the layout to reserve some memory, and then placement-allocate the Bind Group into that memory. This means that BindGroups can be variable size and we can allocate exactly how much memory we need. Check out BGL::GetBindingDataSize() and BGL::ComputeBindingDataPointers().\n\nIn short, we can include sizeof(uint64_t) * mUnverifiedBufferSizeCount in the binding data size. And update ComputeBindingDataPointers to set the pointer to the first |uint64_t* unverifiedBufferSize|\n\nThen... here, we can iterate from { bindingIndex \u003d 0..BGL::GetBufferCount() }, and for the bindings that don\u0027t have a minBufferSize, copy the sizes from mBindingData into the packed buffer sizes.\n\nThis is kinda complicated so maybe I can explain it over GVC.",
      "range": {
        "startLine": 284,
        "startChar": 7,
        "endLine": 289,
        "endChar": 9
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ee61b8_c76d5de5",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 12
      },
      "lineNbr": 289,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-06-05T20:29:51Z",
      "side": 1,
      "message": "Your explanation was great, thanks! I added this in the latest change, does it look right?",
      "parentUuid": "c97c8da2_e8d3294f",
      "range": {
        "startLine": 284,
        "startChar": 7,
        "endLine": 289,
        "endChar": 9
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72768a4_ac7bea56",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 12
      },
      "lineNbr": 289,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T21:58:08Z",
      "side": 1,
      "message": "Looks good!",
      "parentUuid": "16ee61b8_c76d5de5",
      "range": {
        "startLine": 284,
        "startChar": 7,
        "endLine": 289,
        "endChar": 9
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51af8dca_3b4730a7",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 12
      },
      "lineNbr": 190,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-04T23:03:57Z",
      "side": 1,
      "message": "Is it legal to have different size bindings from the vertex vs. fragment stage?",
      "range": {
        "startLine": 190,
        "startChar": 11,
        "endLine": 190,
        "endChar": 92
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b7aa19b_8f7540b4",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 12
      },
      "lineNbr": 190,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-06-05T20:29:51Z",
      "side": 1,
      "message": "My understanding is that since they use the same pipeline, we iterate the same bindgroups in ShaderModuleBase::GetBindGroupMinBufferSizes, and if some group isn\u0027t used this is handled by leaving its min size as 0 in the packed vector. So the resulting vectors should be the same order \u0026 size.",
      "parentUuid": "51af8dca_3b4730a7",
      "range": {
        "startLine": 190,
        "startChar": 11,
        "endLine": 190,
        "endChar": 92
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "270e575a_0cfffd34",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 12
      },
      "lineNbr": 190,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T21:58:08Z",
      "side": 1,
      "message": "Oh I see, and if there\u0027s two stages then after the first stage is processed, we\u0027ll have zeros there.",
      "parentUuid": "9b7aa19b_8f7540b4",
      "range": {
        "startLine": 190,
        "startChar": 11,
        "endLine": 190,
        "endChar": 92
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1adbe76a_bbf145e0",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 902,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-04T23:03:57Z",
      "side": 1,
      "message": "I think |mBindingInfo[group]| should be passed into this function, instead of just |group|",
      "range": {
        "startLine": 902,
        "startChar": 30,
        "endLine": 902,
        "endChar": 49
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a6daddb_3b5aa65c",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 902,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-06-05T20:29:51Z",
      "side": 1,
      "message": "Maybe, right now it\u0027s matching ShaderModuleBase::IsCompatibleWithBindGroupLayout. I think maybe because the type of mBindingInfo[group] is a map\u003c...\u003e passing the group is cleaner? Or should we update both funcs?",
      "parentUuid": "1adbe76a_bbf145e0",
      "range": {
        "startLine": 902,
        "startChar": 30,
        "endLine": 902,
        "endChar": 49
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c071bb49_66d3eea9",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 902,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T21:58:08Z",
      "side": 1,
      "message": "Yea, I think we should update both. We\u0027re asking of A and B are compatible, where A is an index to an object, and B is an object. They should both be objects.\n\nI think if we did that ShaderModuleBase::IsCompatibleWithBindGroupLayout could also be a free anonymous function, and not a member function.",
      "parentUuid": "8a6daddb_3b5aa65c",
      "range": {
        "startLine": 902,
        "startChar": 30,
        "endLine": 902,
        "endChar": 49
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fef422a0_cd5d3f2b",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 902,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-06-09T21:06:30Z",
      "side": 1,
      "message": "I did this for GetBindGroupMinBufferSizes. IsCompatibleWithBindGroupLayout (now ValidateCompatibilityWithBindGroupLayout) just got patched to add a lot of error outputs that depend on the group number. Maybe we can try changing the other one as another CL?",
      "parentUuid": "c071bb49_66d3eea9",
      "range": {
        "startLine": 902,
        "startChar": 30,
        "endLine": 902,
        "endChar": 49
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d850be4b_64d719a9",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 902,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-09T22:25:06Z",
      "side": 1,
      "message": "Sounds fine then",
      "parentUuid": "fef422a0_cd5d3f2b",
      "range": {
        "startLine": 902,
        "startChar": 30,
        "endLine": 902,
        "endChar": 49
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35b7a73_f53af855",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 924,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-04T23:03:57Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 911,
        "startChar": 12,
        "endLine": 924,
        "endChar": 13
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9319dc61_f3fdd9d7",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 924,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T21:58:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a35b7a73_f53af855",
      "range": {
        "startLine": 911,
        "startChar": 12,
        "endLine": 924,
        "endChar": 13
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cfe0f2f_1b764539",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 941,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-04T23:03:57Z",
      "side": 1,
      "message": "Instead of building up the array above in [1], and then removing the sizes the BGL has specified, we can instead only query the ShaderModule for sizes that the BGL does not have. |it.first| should be the BindingNumber.",
      "range": {
        "startLine": 938,
        "startChar": 19,
        "endLine": 941,
        "endChar": 21
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "333f1a98_3b1ed985",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 941,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-06-05T20:29:51Z",
      "side": 1,
      "message": "Cleaned it up. You mentioned \"removing the sizes the BGL has specified\" but this chunk only adds entries. The cleaned up version makes more sense I think, this function is looking at unverified buffers, adding either the required size or 0 if the shader doesn\u0027t have a requirement.",
      "parentUuid": "8cfe0f2f_1b764539",
      "range": {
        "startLine": 938,
        "startChar": 19,
        "endLine": 941,
        "endChar": 21
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8964d7d_6e6a5a74",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 941,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T21:58:08Z",
      "side": 1,
      "message": "Ah, okay I see now. The zeros are for bindings that are in the BGL but not the shader.",
      "parentUuid": "333f1a98_3b1ed985",
      "range": {
        "startLine": 938,
        "startChar": 19,
        "endLine": 941,
        "endChar": 21
      },
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ee1c71e_343a24f0",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 997,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-04T23:03:57Z",
      "side": 1,
      "message": "Somewhere in this function we need to validate that the shader minBufferSizes are compatible with the BGL minBufferSizes.",
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49d99628_c9d8e788",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 997,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-06-05T20:29:51Z",
      "side": 1,
      "message": "Does the chunk below comparing moduleInfo.minimumBufferSize \u003e bindingInfo.minimumBufferSize do this, or is there another thing we should check?",
      "parentUuid": "8ee1c71e_343a24f0",
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b65dc4_2ddaed8c",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 12
      },
      "lineNbr": 997,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T21:58:08Z",
      "side": 1,
      "message": "Oh, that looks right; I must have missed it / not scrolled that far.",
      "parentUuid": "49d99628_c9d8e788",
      "revId": "f4c27327aa79bb6decb7482206a2beff7a97c426",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}