{
  "comments": [
    {
      "key": {
        "uuid": "094c9a71_d4c7e49d",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 306,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-12T03:53:27Z",
      "side": 1,
      "message": "this one isn\u0027t working on Vulkan_Intel_R_HD_Graphics_630",
      "range": {
        "startLine": 299,
        "startChar": 4,
        "endLine": 306,
        "endChar": 23
      },
      "revId": "49c1ffc380e8815fa17fd7db4e172b5cf30eb50a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e06966e_1b24beed",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 316,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-12T03:53:27Z",
      "side": 1,
      "message": "this one isn\u0027t working on metal intel iris, (though it works on intel hd graphics 630).\n\nnotably, these expectations in this test fail on textures which are both OutputAttachment and CopySrc.\n\nThe T2BPartial__Subresource tests below path, and I\u0027m guessing it\u0027ll pass on Linux Vulkan Intel though I haven\u0027t tried it just yet.\n\nThis leads me to believe that there\u0027s a bug elsewhere -- like in the lazy clearing of renderable textures or with loadOp/storeOp",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 316,
        "endChar": 91
      },
      "revId": "49c1ffc380e8815fa17fd7db4e172b5cf30eb50a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}