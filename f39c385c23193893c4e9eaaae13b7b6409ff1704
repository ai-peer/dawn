{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0311e3b1_140ba131",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-20T17:37:44Z",
      "side": 1,
      "message": "Unless I am missing something, this CL is unnecessary. If we need to call Windows APIs with hardcoded wide character strings, We should use put the letter L in front of them and use LoadLibraryW in the Win32 side of the #if.\n\nWindows is a unicode OS so internally, LoadLibraryA is already converting our ANSI string to a unicode string and calling LoadLibraryW. Using LoadLibraryW directly skips this conversion.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c36b8773_cfd7e66b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-20T17:41:23Z",
      "side": 1,
      "message": "Does this hold for LoadPackagedLibrary that\u0027s used in the follow-up CL?",
      "parentUuid": "0311e3b1_140ba131",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc415133_3e4346ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-20T17:51:50Z",
      "side": 1,
      "message": "LoadPackageLibrary takes a wide character string as its first parameter. Hence, you can use the same L\"\" strings to avoid converting between ANSI and Unicode strings.\n\nWhich follow up CL are you referring to?  Is it this one: https://dawn-review.googlesource.com/c/dawn/+/48480?",
      "parentUuid": "c36b8773_cfd7e66b",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99e8382d_e2dbf6dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-20T17:56:08Z",
      "side": 1,
      "message": "Yes, this is inside a call that takes an std::string so we need the conversion function.",
      "parentUuid": "dc415133_3e4346ea",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "582226ea_98167f30",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T17:59:30Z",
      "side": 1,
      "message": "I don\u0027t use LoadPackagedLibrary for now. But LoadLibraryW is not defined in UWP, \nhttps://docs.microsoft.com/en-us/cpp/porting/how-to-use-existing-cpp-code-in-a-universal-windows-platform-app?view\u003dmsvc-160",
      "parentUuid": "c36b8773_cfd7e66b",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5c4ef63_a23f41ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-20T20:59:49Z",
      "side": 1,
      "message": "Corentin, my point was that we can have this function take a wstring directly for Windows and avoid the need for conversion at the last minute. \n\nLoadLibrary is a macro that resolves to either LoadLibraryW or LoadLibraryA depending on whether you build for Unicode. Both should be callable for UWPs.",
      "parentUuid": "582226ea_98167f30",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c74f6343_b51836b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-20T21:42:02Z",
      "side": 1,
      "message": "LoadPackagedLibrary is used inside this method:\n\n   bool DynamicLib::Open(const std::string\u0026 filename, std::string* error)\n\nBecause this is cross-platform code that works on Linux flavors and macOS too, I don\u0027t think we can change the Open method to take an std::wstring, so we need to conversion step. Unless I\u0027m missing something?",
      "parentUuid": "d5c4ef63_a23f41ed",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b36e49cd_9b144d07",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-20T22:47:39Z",
      "side": 1,
      "message": "With ifdefs, we can change the parameter to be different on different platforms.",
      "parentUuid": "c74f6343_b51836b0",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4028ecb_88fa40ca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-21T08:52:56Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s reasonable since on Windows we also use DynamicLib::Open in the Vulkan and OpenGL backends that are cross-platform. We shouldn\u0027t need to add #ifdefs in these backends to swtich between L\"\" and \"\" versions of the same string.\n\nLet\u0027s move forward with the CL as is.",
      "parentUuid": "b36e49cd_9b144d07",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9675925e_e6429ed1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-20T17:41:23Z",
      "side": 1,
      "message": "nit: Bug: dawn:766, I\u0027m not sure if Feature: works.",
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95eec651_cdae8255",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T17:59:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9675925e_e6429ed1",
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6db94f04_77584151",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-20T16:18:14Z",
      "side": 1,
      "message": "LGTM still. Rafael PTAL",
      "revId": "f39c385c23193893c4e9eaaae13b7b6409ff1704",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}