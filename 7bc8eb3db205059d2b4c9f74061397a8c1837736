{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cecef5d0_e6b3d50f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T05:45:37Z",
      "side": 1,
      "message": "giant CL! :o",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4595803_f921d122",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Chonky chonky CL ðŸ˜® I reviewed the frontend changes, hopefully it helps unblock a bit while I review the rest!",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad58f897_a7e62fe7",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "nit: Maybe we could ASSERT that on an error the type is still undefined. Or we could modify info to make it undefined on error.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5238ec60_ba63862c",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "```suggestion\n    // Set the type to undefined. It will be overwritten to the actual type\n```",
      "range": {
        "startLine": 47,
        "startChar": 45,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0009ff19_9cb46f1e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "WDYT of landing the frontend changes separately along with a NulBackend impelementation and validation tests? Now that you know that the overall structure works on all backends it might be better to have validation unittests too.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ea170ec_68278017",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "u-nit: maybe validate before filling the out struct :)",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dda3dfab_1e7cd869",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 65,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "u-nit: maybe add a check for validation being enabled. Ditto in other places.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "457fc409_82c95dbe",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "u-nit: We could have block comments to group validation together (check there is a single 2d subresource, check it matches properties).",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c324dc_3d3cf88d",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 119,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "The intent is that these methods will eventually be \u003d 0 right? Since a backend would implement all of them at once WDYT of making it \u003d 0 now?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71617f49_9409ff26",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This shows that we allow multiple accesses to be valid at the same time. Is this intended? Shouldn\u0027t the accesses be readonly in this case?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbad76b7_c940e463",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Can we have multiple ongoing accesses for the same texture?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de3dbb1a_b2cb5686",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "It might be worth using std::move here. Ditto in EndAccess",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "828fa8c1_426dfb70",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This is only used here, and seems slightly weird to be named so similarly to the function. Maybe Record/Acquire/RegisterBeginAccessFences?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0445e599_4cdd91ed",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This constraint should make it possible to make a bunch of the frontend implementation simpler?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaa4803b_0d39851c",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Any reason this is done before all the rest of the validation?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9b3f3c7_0247538c",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 192,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "We could have a set of the textures created from this SharedTextureMemoryBase inside it instead of this WeakRef. Would that be a ref cycle problem?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "719343de_03a258a5",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 220,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Ditto",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfbf4b95_04791db1",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 229,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Do we plan to have more than one fence returned eventually?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2af47750_4fc9ead0",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 263,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "ditto though I realize now that we need to be able to handle the case where an error texture from this object is used.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e78a266_0dbc8ff9",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "```suggestion\n    // BeginAccessImpl validates the operation is valid on the backend, and performs any\n```",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c2e60ae_b095dbc7",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 436,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Is this to be deprecated and removed? We could add a TODO for it.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2f9c87_b2178277",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 811,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This is pretty hot code, can\u0027t we make the SharedTextureMemory modify the State to use a new `Paused` state?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98d60a9a_48adca65",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 915,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "TODO: is this needed.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de52005_defe853c",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "I think with the other comments it might be possible to remove this and the WeakRef.\n\nOr ... maybe not, it\u0027s used in the backend as well...\n\nMaybe TryGetSharedTextureMemory() and eventually we should move the imported texture information in various backends inside the SharedTextureMemory so the extra memory cost of the pointer in TextureBase is paid for.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d9c8f7_990bbd52",
        "filename": "src/dawn/native/ToBackend.h",
        "patchSetId": 18
      },
      "lineNbr": 102,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "It might be useful to add SharedFence now as well.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78c48719_6cb9c6fc",
        "filename": "src/dawn/tests/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 629,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T05:45:37Z",
      "side": 1,
      "message": "arc2 was already removed. don\u0027t need both now",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 629,
        "endChar": 0
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b45e952_39c6a0ee",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_apple.mm",
        "patchSetId": 18
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T05:45:37Z",
      "side": 1,
      "message": "I\u0027m just leaking this global, because it\u0027s a lot simpler to write. Do we think this is OK?\n\nalthough; I can probably have it be:\n\n```\nstatic Backend b;\nreturn \u0026b;\n```",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 38,
        "endChar": 5
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}