{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cecef5d0_e6b3d50f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T05:45:37Z",
      "side": 1,
      "message": "giant CL! :o",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4595803_f921d122",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Chonky chonky CL ðŸ˜® I reviewed the frontend changes, hopefully it helps unblock a bit while I review the rest!",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad58f897_a7e62fe7",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "nit: Maybe we could ASSERT that on an error the type is still undefined. Or we could modify info to make it undefined on error.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62b71db2_7cb9fb13",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "I think that if you ExportInfo with the wrong chained struct - you should get an error but still have `info` populated with the real type\n\nthis is tested in SharedTextureMemoryTests.SharedFenceExportInfoInvalidChainedStruct",
      "parentUuid": "ad58f897_a7e62fe7",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "949b5847_ac7f0494",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Gotcha, I\u0027m extremely slightly uneasy about mixing error cases and success cases in the backends and think we could have a virtual method to ask for the fence type (or a constructor argument), but either way is fine, especially if it\u0027s tested.",
      "parentUuid": "62b71db2_7cb9fb13",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a823d6e_80531e2a",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T03:36:43Z",
      "side": 1,
      "message": "I\u0027m trying out an idea for this which I have been uploaded yet. but overall the idea is to have a helper function which lets you match on descriptor types, and then the match case dispatches to a function. then the back ends would effectively just implement things by calling the match helper which dispatches to the back end specific creation function. the helper would do all of validating that the s types are valid, and the required features to use those a s types are enabled.",
      "parentUuid": "949b5847_ac7f0494",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9d2a61f_117779df",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-11T08:47:29Z",
      "side": 1,
      "message": "I feel like my wording was a bit poor, what I meant is that I have a very tiny unease about this, not a big one, and if we can\u0027t fix this nicely / easily it would definitely be fine to keep the code as is.\n\nThat approach would be pretty interesting, it would combine the UnpackChain into also code that handles the validation of sType etc. Loko also said he was looking at the ChainUtils issue, so can you make sure to synchronize with him?",
      "parentUuid": "5a823d6e_80531e2a",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5238ec60_ba63862c",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "```suggestion\n    // Set the type to undefined. It will be overwritten to the actual type\n```",
      "range": {
        "startLine": 47,
        "startChar": 45,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ad474ec_ce673447",
        "filename": "src/dawn/native/SharedFence.cpp",
        "patchSetId": 18
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5238ec60_ba63862c",
      "range": {
        "startLine": 47,
        "startChar": 45,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0009ff19_9cb46f1e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "WDYT of landing the frontend changes separately along with a NulBackend impelementation and validation tests? Now that you know that the overall structure works on all backends it might be better to have validation unittests too.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "428d50bd_f56d5092",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "I don\u0027t know if we can have null backend unittests. I wasn\u0027t planning on making SharedFence/SharedTextureMemory an exposed feature in the null backend since every usage of them requires backend-specific things",
      "parentUuid": "0009ff19_9cb46f1e",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "775aa7ab_8ff9cc61",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-10T14:55:11Z",
      "side": 1,
      "message": "well, I may be able to have the null backend require no chained structs",
      "parentUuid": "428d50bd_f56d5092",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "918707f7_1129290b",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Okay",
      "parentUuid": "428d50bd_f56d5092",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ea170ec_68278017",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "u-nit: maybe validate before filling the out struct :)",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b48898f_c63a8ac5",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "It\u0027s actually intentional to set things as much as possible. even in the error case\n\nunlike error monad objects which safely result in cascading errors, who knows what the application is doing with these values. We don\u0027t want to tell developers that they need to check errors whenever writing an output struct - so I think it\u0027s preferable instead that we always attempt to fill out structs with as sensible a thing as we possibly can?\n\nthis is tested in SharedTextureMemoryTests.GetPropertiesInvalidChain and SharedTextureMemoryTests.GetPropertiesErrorMemory",
      "parentUuid": "8ea170ec_68278017",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d061ec_74b20af1",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "You\u0027re right and in essence this if very similar to the buffer / texture reflection that don\u0027t do any validation, so we could completely remove the validation instead!",
      "parentUuid": "9b48898f_c63a8ac5",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c7ef21f_c2522cec",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T22:01:02Z",
      "side": 1,
      "message": "well... we still want something about the chained structs though right?\n\nbut yea maybe we don\u0027t need to validate if the obj is an error or not",
      "parentUuid": "03d061ec_74b20af1",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dda3dfab_1e7cd869",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 65,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "u-nit: maybe add a check for validation being enabled. Ditto in other places.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3b9685_f106b2f8",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "IDK - we don\u0027t really disable validation based on the toggle for a bunch of other parts in Dawn. it mostly only does stuff for encoding. If we really want to skip validation, we should find a better way to pull all the frontend validation out entirely (separate proc table?). adding more branches seems worth it only when the performance measurably matters",
      "parentUuid": "dda3dfab_1e7cd869",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71813678_200aac7e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 65,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9f3b9685_f106b2f8",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "457fc409_82c95dbe",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "u-nit: We could have block comments to group validation together (check there is a single 2d subresource, check it matches properties).",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6da8b88_3b8dfb55",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "457fc409_82c95dbe",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c324dc_3d3cf88d",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 119,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "The intent is that these methods will eventually be \u003d 0 right? Since a backend would implement all of them at once WDYT of making it \u003d 0 now?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f00f560b_b5a4956e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 119,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57c324dc_3d3cf88d",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71617f49_9409ff26",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This shows that we allow multiple accesses to be valid at the same time. Is this intended? Shouldn\u0027t the accesses be readonly in this case?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a9e09bb_1ae52cd5",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 128,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "we allow multiple access scopes for the purpose of tracking their fences. But only the first access scope is actually valid\n\nconcurrent read also not currently allowed, but something we can add later by loosening validation",
      "parentUuid": "71617f49_9409ff26",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbad76b7_c940e463",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Can we have multiple ongoing accesses for the same texture?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cf95ba3_bb3036e5",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "cannot have multiple ongoing valid accesses. Subsequent accesses after the first ones are invalid; but we keep tracking their fences so they can be properly forwarded to EndAccess",
      "parentUuid": "bbad76b7_c940e463",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdeb0873_6be7e6b5",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T15:01:00Z",
      "side": 1,
      "message": "My understanding is that the fence should be gathered in `AcquireBeginFences` and `PopAccessFences` in this case, but that seems to not be the case. So at the moment I believe that:\n\n```\nt \u003d stm.CreateTexture()\nstm.BeginAccess(texture, [fence1])\nstm.BeginAccess(texture, [fence2])\nfences \u003d stm.EndAccess(texture);\n\n// My understanding is that fences \u003d\u003d [fence2] and not [fence1, fence2] which we want.\n```\n\nWhat do you think of changing the data structure to an unordered_map\u003cRef\u003cTexture\u003e, vector\u003cFences\u003e\u003e? It would make it easy if the texture is from this STM, and would simplify the fence tracking logic a bunch.",
      "parentUuid": "0cf95ba3_bb3036e5",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b833e7d_a3f916ba",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-11T22:01:02Z",
      "side": 1,
      "message": "my goal was actually the following:\n\n```\nt \u003d stm.CreateTexture()\nstm.BeginAccess(texture, [fence1])\nstm.BeginAccess(texture, [fence2])\noutfences1 \u003d stm.EndAccess(texture); // [fence2]\noutfences2 \u003d stm.EndAccess(texture); // [fence1]\n```\n\nI feel like it\u0027s better this way. In your example, the first access is valid, and the second access is invalid.\n\nWhen you use the texture, do we wait on fence2 regardless of whether or not the access is valid? or does it only wait on fence1. If the former, then EndAccess would just return a new fence3. If the latter, then it would return [fence2, fence3] - the error access\u0027es fence is forwarded.\n\nbut IDK if you actually want to forward the error access wait here. It was an error after all.\n\nFurther, the nested access is probably a programmer error, but if the programmer still has balanced scopes, their valid access may be unexpected.\n\n```\nt \u003d stm.CreateTexture()\nstm.BeginAccess(texture, [fence1]) // valid!\nstm.BeginAccess(texture, [fence2]) // invalid!\n\n// use the texture\n\nfences \u003d stm.EndAccess(texture); // end the invalid access - get all the fences\n\nfences2 \u003d stm.EndAccess(texture);  // end the valid access, but the list of fences is actually empty! they were all returned earlier.\n```",
      "parentUuid": "bdeb0873_6be7e6b5",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5167fa0_d07b270b",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-12T02:35:01Z",
      "side": 1,
      "message": "I realized that you could have a logical programmer error in two different ways. \nIt\u0027s more clear if I write it with two different variable names aliasing the same object.\n\n```\nwgpu::Texture texture1 \u003d ...;\nwgpu::Texture texture2 \u003d texture1;\n\n// Nested access\n\nstm.BeginAccess(texture1, [fence1]); // valid\nstm.BeginAccess(texture2, [fence2]); // invalid\nstm.EndAccess(texture2); // end invalid\nstm.EndAccess(texture1); // end valid\n\n// Overlapping access\n\nstm.BeginAccess(texture1, [fence1]); // valid\nstm.BeginAccess(texture2, [fence2]); // invalid\nstm.EndAccess(texture1); // end **invalid**\nstm.EndAccess(texture2); // end **valid**\n\n```\n\nThe problem with the second example is that logically, the **first** EndAccess should be the valid one and the second EndAccess should be invalid. \n\nOne way we could restructure the API to capture both of these possibilities as a programmer might expect is to return a unique access token. You pass that access token back to EndAccess (instead of the texture) so it\u0027s clear which access you want to be ending.\n\n```\nauto accessToken1 \u003d stm.BeginAccess(texture1, [fence1]); // valid\nauto accessToken2 \u003d stm.BeginAccess(texture2, [fence2]); // invalid\nstm.EndAccess(accessToken1); // end valid\nstm.EndAccess(accessToken2); // end invalid\n```\n\nThis would be a lot more clear; but is it really worth it just to make the different error situations distinguishable?",
      "parentUuid": "7b833e7d_a3f916ba",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de3dbb1a_b2cb5686",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "It might be worth using std::move here. Ditto in EndAccess",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ada85234_e8e8f3ca",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 158,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "move is deleted for StackVector\n\nI think we could switch to absl::InlinedVector at some point though",
      "parentUuid": "de3dbb1a_b2cb5686",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d6f3320_8b2f6307",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ada85234_e8e8f3ca",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "828fa8c1_426dfb70",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This is only used here, and seems slightly weird to be named so similarly to the function. Maybe Record/Acquire/RegisterBeginAccessFences?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc4221a_78234958",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 179,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "I named it PushAccessFences / PopAccessFences",
      "parentUuid": "828fa8c1_426dfb70",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d649ea4_8a60ea36",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ecc4221a_78234958",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0445e599_4cdd91ed",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This constraint should make it possible to make a bunch of the frontend implementation simpler?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "970ae4fc_57b0652a",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 181,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "in what way?",
      "parentUuid": "0445e599_4cdd91ed",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaa4803b_0d39851c",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Any reason this is done before all the rest of the validation?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "043efba8_53738c4e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 184,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "I thought it simpler to think about it that BeginAccess starts the access scope, regardless of whether or not it was an error - and EndAccess ends it. Otherwise the programmer needs to think about catching errors to know if the scope was *really* opened or not - which determines whether it is necessary to call EndAccess",
      "parentUuid": "aaa4803b_0d39851c",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9b3f3c7_0247538c",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 192,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "We could have a set of the textures created from this SharedTextureMemoryBase inside it instead of this WeakRef. Would that be a ref cycle problem?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88dbbe68_bc300a29",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 192,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "as you mentioned elsewhere, we need to get the shared texture memory from the texture in the backends when we acquire to wait on fences",
      "parentUuid": "e9b3f3c7_0247538c",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9902c244_1350ee78",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 192,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "88dbbe68_bc300a29",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "719343de_03a258a5",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 220,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Ditto",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c94984a_553788c6",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "named it PopAccessFences",
      "parentUuid": "719343de_03a258a5",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0543f90_6d543711",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 220,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6c94984a_553788c6",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfbf4b95_04791db1",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 229,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Do we plan to have more than one fence returned eventually?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8beb9932_63dda049",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 229,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "for multiqueue, yes - or if you passed multiple fences into BeginAccess and they were never acquired",
      "parentUuid": "bfbf4b95_04791db1",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2af47750_4fc9ead0",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 263,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "ditto though I realize now that we need to be able to handle the case where an error texture from this object is used.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44897508_f33d3ea3",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 18
      },
      "lineNbr": 263,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2af47750_4fc9ead0",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e78a266_0dbc8ff9",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "```suggestion\n    // BeginAccessImpl validates the operation is valid on the backend, and performs any\n```",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1239f652_383edd5a",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e78a266_0dbc8ff9",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c2e60ae_b095dbc7",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 436,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "Is this to be deprecated and removed? We could add a TODO for it.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f79524eb_826e4872",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 436,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c2e60ae_b095dbc7",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2f9c87_b2178277",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 811,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "This is pretty hot code, can\u0027t we make the SharedTextureMemory modify the State to use a new `Paused` state?",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6308535f_647e27ec",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 811,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done. Changing how the state works in a preceding CL.",
      "parentUuid": "7a2f9c87_b2178277",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98d60a9a_48adca65",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 915,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "TODO: is this needed.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43c786e3_79331cee",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 915,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-10T14:56:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "98d60a9a_48adca65",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de52005_defe853c",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "I think with the other comments it might be possible to remove this and the WeakRef.\n\nOr ... maybe not, it\u0027s used in the backend as well...\n\nMaybe TryGetSharedTextureMemory() and eventually we should move the imported texture information in various backends inside the SharedTextureMemory so the extra memory cost of the pointer in TextureBase is paid for.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce1b941_4c7bcd64",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "renamed",
      "parentUuid": "9de52005_defe853c",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab97d148_ea847410",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-12T02:35:01Z",
      "side": 1,
      "message": "resolving",
      "parentUuid": "dce1b941_4c7bcd64",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d9c8f7_990bbd52",
        "filename": "src/dawn/native/ToBackend.h",
        "patchSetId": 18
      },
      "lineNbr": 102,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T16:27:10Z",
      "side": 1,
      "message": "It might be useful to add SharedFence now as well.",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79d2d42f_97b7c975",
        "filename": "src/dawn/native/ToBackend.h",
        "patchSetId": 18
      },
      "lineNbr": 102,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T21:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99d9c8f7_990bbd52",
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78c48719_6cb9c6fc",
        "filename": "src/dawn/tests/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 629,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T05:45:37Z",
      "side": 1,
      "message": "arc2 was already removed. don\u0027t need both now",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 629,
        "endChar": 0
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f21a2d4_4f6c4b0d",
        "filename": "src/dawn/tests/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 629,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-12T02:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78c48719_6cb9c6fc",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 629,
        "endChar": 0
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b45e952_39c6a0ee",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_apple.mm",
        "patchSetId": 18
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-09T05:45:37Z",
      "side": 1,
      "message": "I\u0027m just leaking this global, because it\u0027s a lot simpler to write. Do we think this is OK?\n\nalthough; I can probably have it be:\n\n```\nstatic Backend b;\nreturn \u0026b;\n```",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 38,
        "endChar": 5
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "968c3e67_8d5cad6f",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_apple.mm",
        "patchSetId": 18
      },
      "lineNbr": 38,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-10T01:07:22Z",
      "side": 1,
      "message": "Hmm, yea I think the alternative is better. Mainly because `GetInstance` is used twice below so we would be leaking 2, whereas a single function scope static doesn\u0027t feel as bad?",
      "parentUuid": "7b45e952_39c6a0ee",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 38,
        "endChar": 5
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "075bf7f8_2121e13f",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_apple.mm",
        "patchSetId": 18
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-12T02:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "968c3e67_8d5cad6f",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 38,
        "endChar": 5
      },
      "revId": "7bc8eb3db205059d2b4c9f74061397a8c1837736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}