{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "49975a64_017538e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "Some comments and suggestions, but the overall direction looks good!\nDidn\u0027t look at the tests yet; will do that soon",
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e4e42ed_85ae3a1a",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "\"set true for mappedAtCreation and MapWrite\" ?\n\nIt\u0027s a bit unclear whether this boolean means the buffer was mapped for writing, or whether it is *currently* mapped for writing. It might be more clear to say isCurrentlyMappedForWriting",
      "range": {
        "startLine": 49,
        "startChar": 13,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5874104f_60cf62ee",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 49,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e4e42ed_85ae3a1a",
      "range": {
        "startLine": 49,
        "startChar": 13,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b979680_9e64771f",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 88,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "nit: do we need this check? The allocation is supposed to happen when the write handle is created, so if it fails, then |writeHandle| should be null. If creation succeeds, then I think GetData() should never be null.",
      "range": {
        "startLine": 88,
        "startChar": 24,
        "endLine": 88,
        "endChar": 44
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9ac48e4_c43e8680",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 88,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b979680_9e64771f",
      "range": {
        "startLine": 88,
        "startChar": 24,
        "endLine": 88,
        "endChar": 44
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f38e96ad_1ee28174",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "nit: we should probably have an explanation somewhere about why we don\u0027t need this for ReadHandle",
      "range": {
        "startLine": 96,
        "startChar": 16,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d22dccf8_4ed2f616",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 99,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f38e96ad_1ee28174",
      "range": {
        "startLine": 96,
        "startChar": 16,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c2108cd_f321ec8c",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 211,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "we also may not need this validation now. see [1]",
      "range": {
        "startLine": 201,
        "startChar": 8,
        "endLine": 211,
        "endChar": 9
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35c237a2_59038aaf",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 211,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c2108cd_f321ec8c",
      "range": {
        "startLine": 201,
        "startChar": 8,
        "endLine": 211,
        "endChar": 9
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f4872eb_95d31292",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 223,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "do we need this validation? if handle allocation failed, then the buffer should be an error buffer.\n\nIf it\u0027s an error buffer, it should be caught here:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/Buffer.cpp;l\u003d432?q\u003df:dawn%20ValidateMapAsync",
      "range": {
        "startLine": 213,
        "startChar": 8,
        "endLine": 223,
        "endChar": 0
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d41f0b03_fad07da1",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 223,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "I think I added this for map_oom. removed but seems fine",
      "parentUuid": "8f4872eb_95d31292",
      "range": {
        "startLine": 213,
        "startChar": 8,
        "endLine": 223,
        "endChar": 0
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d18aa923_736f6edf",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 235,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "If comment at [1] makes sense, then request.type could potentially just be the WGPUMapMode passed into this function",
      "range": {
        "startLine": 235,
        "startChar": 8,
        "endLine": 235,
        "endChar": 20
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc4c9016_01b4e931",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 235,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d18aa923_736f6edf",
      "range": {
        "startLine": 235,
        "startChar": 8,
        "endLine": 235,
        "endChar": 20
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d872d20c_00bbbb9e",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 281,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "nit: stray comment",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 281,
        "endChar": 39
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2a2d35e_2cb6d882",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 281,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d872d20c_00bbbb9e",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 281,
        "endChar": 39
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e6da307_21c58117",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 313,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "ditto: same comment above about potentially not needing this check",
      "range": {
        "startLine": 310,
        "startChar": 16,
        "endLine": 313,
        "endChar": 17
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf376879_69f0ea22",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 313,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e6da307_21c58117",
      "range": {
        "startLine": 310,
        "startChar": 16,
        "endLine": 313,
        "endChar": 17
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0db1458a_980e18e8",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 387,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "nit: stray comment",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 387,
        "endChar": 71
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "686d1b0f_d6a20d27",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 387,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0db1458a_980e18e8",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 387,
        "endChar": 71
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c2609d9_d8e87b89",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 392,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "\"destruction\"; I think \"destructure\" means something else",
      "range": {
        "startLine": 392,
        "startChar": 44,
        "endLine": 392,
        "endChar": 55
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d3e060_65cae3e0",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 392,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c2609d9_d8e87b89",
      "range": {
        "startLine": 392,
        "startChar": 44,
        "endLine": 392,
        "endChar": 55
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2a80b9b_fab7c985",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 417,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "I may be forgetting right now - what OOM error handling do we need for unmap() ?",
      "range": {
        "startLine": 416,
        "startChar": 8,
        "endLine": 417,
        "endChar": 15
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edb444c6_a4894548",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 417,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "For https://github.com/gpuweb/cts/blob/main/src/webgpu/api/operation/buffers/map_oom.spec.ts#L65\n\nAn unmap call for an error buffer should throw an OperationError. I think we should change unmap to return a boolean?",
      "parentUuid": "f2a80b9b_fab7c985",
      "range": {
        "startLine": 416,
        "startChar": 8,
        "endLine": 417,
        "endChar": 15
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6088d14_5a13d961",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 457,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "I think we always pass \"true, true\" or \"false, false\". We can probably keep a single boolean then",
      "range": {
        "startLine": 457,
        "startChar": 32,
        "endLine": 457,
        "endChar": 81
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6d66c20_d4e50d75",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 457,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6088d14_5a13d961",
      "range": {
        "startLine": 457,
        "startChar": 32,
        "endLine": 457,
        "endChar": 81
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c32343c_b0566a59",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 36
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "nit: prefer \"enum class\". Not sure if we need the \" \u003d 0\".\n\nwould be nice if we could reuse wgpu::MapMode, but we\u0027re not using the C++ WebGPU headers here",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 48
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bad76878_7a99c214",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 36
      },
      "lineNbr": 64,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c32343c_b0566a59",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 48
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee503e8b_6fb40859",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 36
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "note: suggestions about not needing the GetData() \u003d\u003d nullptr check depend on updating this code to check GetData() here, and then return nullptr instead of the handle.\n\nAlternatively, perform the allocation of mStagingData here, and then move it into the Read/WriteHandleImpl if successful.",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 109,
        "endChar": 9
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "877457a1_740775e6",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 36
      },
      "lineNbr": 109,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Did the alternative way.\nRemove a WireMemoryTransferService test together (get data returns nullptr) since we won\u0027t have this case anymore. It will just fail at creating read/writehandler",
      "parentUuid": "ee503e8b_6fb40859",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 109,
        "endChar": 9
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f036e326_21568e20",
        "filename": "src/dawn_wire/server/ObjectStorage.h",
        "patchSetId": 36
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "typo: destroyed",
      "range": {
        "startLine": 66,
        "startChar": 47,
        "endLine": 66,
        "endChar": 57
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "927cce5b_9b311266",
        "filename": "src/dawn_wire/server/ObjectStorage.h",
        "patchSetId": 36
      },
      "lineNbr": 66,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f036e326_21568e20",
      "range": {
        "startLine": 66,
        "startChar": 47,
        "endLine": 66,
        "endChar": 57
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a93cbdb_7f35d33b",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "\"Destroy\"\n\n(heh.. I make this typo a lot too!)",
      "range": {
        "startLine": 29,
        "startChar": 76,
        "endLine": 29,
        "endChar": 84
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "291ddb23_98f75699",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 29,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a93cbdb_7f35d33b",
      "range": {
        "startLine": 29,
        "startChar": 76,
        "endLine": 29,
        "endChar": 84
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "561b6906_86c8c373",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "[1] no read/write handle stuff in this function now, so I think we don\u0027t need this check. We can let dawn_native handle the validation",
      "range": {
        "startLine": 71,
        "startChar": 8,
        "endLine": 76,
        "endChar": 9
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d86592f_9ceab640",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 76,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "561b6906_86c8c373",
      "range": {
        "startLine": 71,
        "startChar": 8,
        "endLine": 76,
        "endChar": 9
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9a853b7_20659394",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 272,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-30T15:58:47Z",
      "side": 1,
      "message": "nit: we should comment about this interesting code here. I think that\n1: we always want the target to refer to the buffer base address\n2: we also want getMappedRange to be called exactly with the range of data that is potentially modified, in case the implementation does some range tracking. i.e. we don\u0027t want getMappedRange(0, wholeBufferSize) if only a subset of the buffer is actually mapped.\n\nnote: we don\u0027t do range tracking today, but I think it could become valuable to optimize how much data is flushed",
      "range": {
        "startLine": 269,
        "startChar": 20,
        "endLine": 272,
        "endChar": 38
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a7af490_3753ea37",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 36
      },
      "lineNbr": 272,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-01T00:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9a853b7_20659394",
      "range": {
        "startLine": 269,
        "startChar": 20,
        "endLine": 272,
        "endChar": 38
      },
      "revId": "96328b5fd8de08e95c193993ffd9fa5ffc581fbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}