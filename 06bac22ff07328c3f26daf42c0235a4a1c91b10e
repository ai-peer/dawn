{
  "comments": [
    {
      "key": {
        "uuid": "1e21e4ed_7a907a43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-23T08:13:25Z",
      "side": 1,
      "message": "LGTM",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e0e328a_c3b8edd3",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 218,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-23T19:22:15Z",
      "side": 1,
      "message": "Will these work in iOS 10.14+ ?",
      "range": {
        "startLine": 218,
        "startChar": 40,
        "endLine": 218,
        "endChar": 41
      },
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a3ff992_981c9d8f",
        "filename": "src/dawn_native/metal/BackendMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 218,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-09-24T04:55:27Z",
      "side": 1,
      "message": "The APIs are available in iOS 14.14+ now. I can add iOS support here (the feature set should be iOS GPU family 5 I guess), but I donâ€™t make sure they can work, we have no iOS device now.",
      "parentUuid": "5e0e328a_c3b8edd3",
      "range": {
        "startLine": 218,
        "startChar": 40,
        "endLine": 218,
        "endChar": 41
      },
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9dbbd78_e89a1b8c",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-23T08:13:25Z",
      "side": 1,
      "message": "Removing this on my system didn\u0027t cause an issue (even with the Intel GPU). Can you detail what error you get and which component produces it?",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5508aa4f_9b53ea3c",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-09-23T10:01:15Z",
      "side": 1,
      "message": "It seems that removing storageMode does not affect the creation, but Metal spec says \"The storage mode must be either MTLStorageModeShared or MTLStorageModePrivate.\" at https://developer.apple.com/documentation/metal/mtlcountersamplebufferdescriptor/3081733-storagemode?language\u003dobjc, this should be another issue.\n\nIf we use MTLStorageModePrivate, we will get error when run PipelineStatisticsQueryTests.QuerySetCreation/Metal_Intel_R_UHD_Graphics_630: \n-[MTLIOAccelBuffer initWithDevice:pointer:length:options:sysMemSize:vidMemSize:args:argsSize:deallocator:]:126: failed assertion `Invalid cacheMode 2\u0027\n\nI update the macOS to 10.15.6 and Xcode to 12.0, but also can reproduce it. I\u0027m not sure whether it\u0027s related with MTLCPUCacheMode.",
      "parentUuid": "b9dbbd78_e89a1b8c",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91213b80_5591c393",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-23T10:09:37Z",
      "side": 1,
      "message": "This is weird, it seems to be a bug in the Intel driver when it emulates the MTLCounterSampleBufferDescriptor with a regular MTLBuffer. Can we add a Toggle that\u0027s a workaround for this and makes it use Shared instead of Private (instead of blanket using Shared)?",
      "parentUuid": "5508aa4f_9b53ea3c",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9482d7c6_b5167ed4",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-23T20:21:53Z",
      "side": 1,
      "message": "If you delete the line it probably defaults to MTLStorageModeShared because that has enum value 0.",
      "parentUuid": "91213b80_5591c393",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bf3f592_d2466446",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-09-24T04:55:27Z",
      "side": 1,
      "message": "For the Toggle, do we need control to use Shared for Intel platform and use Private for other platforms? or just control to use Shared or Private for all?",
      "parentUuid": "9482d7c6_b5167ed4",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a942ab6_06c34197",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-23T08:13:25Z",
      "side": 1,
      "message": "nit: NSUInteger and cast to that type. That\u0027s the type of newBufferWithLength, which is actually unsigned long, so not uint64_t.",
      "range": {
        "startLine": 66,
        "startChar": 16,
        "endLine": 66,
        "endChar": 24
      },
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6abeb1ce_4d085ad3",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-23T19:22:15Z",
      "side": 1,
      "message": "these are available in iOS 10.14 as well",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff5552a3_98fb1741",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-09-24T04:55:27Z",
      "side": 1,
      "message": "Yes, they\u0027re also available on iOS 10.14+ now, previously only supported by macOS 10.15+. I can add the iOS support if needed.",
      "parentUuid": "6abeb1ce_4d085ad3",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "579d70c2_417be685",
        "filename": "src/dawn_native/metal/QuerySetMTL.mm",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-23T08:13:25Z",
      "side": 1,
      "message": "nit: This is duplicated with wgpu::QueryType::PipelineStatistics maybe we could make the helper function create the MTLCounterSampleBuffer and return an error if it failed instead? This way both the pipeline statistics and timestamp cases would be a single line and share all the code.",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c3407be_8dce007f",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-23T08:13:25Z",
      "side": 1,
      "message": "nit: sort alphabetically. ditto below",
      "revId": "06bac22ff07328c3f26daf42c0235a4a1c91b10e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}