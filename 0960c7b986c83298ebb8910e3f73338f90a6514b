{
  "comments": [
    {
      "key": {
        "uuid": "d7fb3556_dbd43c1f",
        "filename": "src/common/HashUtils.h",
        "patchSetId": 6
      },
      "lineNbr": 100,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-19T16:34:45Z",
      "side": 1,
      "message": "friend stuff wasn\u0027t working if I put \"friend size_t Hash(....)\" in ityp_bitset.h and then defined it here. Got a linking error. Maybe because it\u0027s a different namespace, or idk how to do the template magic right?\n\nfriend std::hash works though. maybe something to do with partial function template specialization vs class template specialization?",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 100,
        "endChar": 0
      },
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7130ed3_ab7fc2e6",
        "filename": "src/common/HashUtils.h",
        "patchSetId": 6
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-19T17:11:53Z",
      "side": 1,
      "message": "That\u0027s really weird, I have no idea why the friend std::hash make a difference. C++ I guess ^^",
      "parentUuid": "d7fb3556_dbd43c1f",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 100,
        "endChar": 0
      },
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e04bd06_1fef1ab4",
        "filename": "src/dawn_native/Pipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-19T16:52:47Z",
      "side": 1,
      "message": "u-nit: Maybe ValidateGetBindGroupLayout should take a typed integer too.",
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56d6aa0a_e103b561",
        "filename": "src/dawn_native/Pipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-19T17:11:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e04bd06_1fef1ab4",
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "879237fd_2440c9dd",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 6
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-19T16:52:47Z",
      "side": 1,
      "message": "Do you think it would be worth adding these typedefs to dawn.json so they somehow get used in dawn_native\u0027s definition of the wgpu:: structs?",
      "range": {
        "startLine": 100,
        "startChar": 68,
        "endLine": 100,
        "endChar": 96
      },
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcbcdfb1_09a98bc6",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 6
      },
      "lineNbr": 100,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-19T17:11:41Z",
      "side": 1,
      "message": "It would definitely be great to autogenerate them. I\u0027ll think about it and try it out. I\u0027m a bit worried that we\u0027re shoving too much stuff into dawn.json. Maybe it\u0027s not so bad though. We already have \n\n\"ObjectHandle\": {\n  \"_comment\": \"Only used for the wire\",\n  \"category\": \"native\"\n},\n\nMaybe we could have \n\n\"BindGroupIndex\": {\n  \"category\": \"typed_integer\",\n  \"base_type\": \"uint32_t\",\n},\n\nThen the autogenerated procs like NativeRenderPassEncoderSetBindGroup could cast into BindGroupIndex",
      "parentUuid": "879237fd_2440c9dd",
      "range": {
        "startLine": 100,
        "startChar": 68,
        "endLine": 100,
        "endChar": 96
      },
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b284d03_67d41c2a",
        "filename": "src/dawn_native/PipelineLayout.h",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-19T16:52:47Z",
      "side": 1,
      "message": "Didn\u0027t we remove bindgroup inheritance?",
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d463a800_2739ac2a",
        "filename": "src/dawn_native/PipelineLayout.h",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-19T17:11:41Z",
      "side": 1,
      "message": "We did, but we still take advantage of it on Vulkan as an optimization if a pipeline has been applied, and then a new pipeline with inherited groups is applied.",
      "parentUuid": "4b284d03_67d41c2a",
      "revId": "0960c7b986c83298ebb8910e3f73338f90a6514b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}