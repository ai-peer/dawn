{
  "comments": [
    {
      "key": {
        "uuid": "a87a1e9c_22362e6f",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "nit: mulitple -\u003e multiple",
      "range": {
        "startLine": 270,
        "startChar": 62,
        "endLine": 270,
        "endChar": 70
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4b05c19_4aedf9c4",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-02-21T09:25:16Z",
      "side": 1,
      "message": "nit: ValidateBufferCopySizeAlignment?",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94e23768_79152b66",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-02-22T00:45:18Z",
      "side": 1,
      "message": "Agree.",
      "parentUuid": "c4b05c19_4aedf9c4",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "833952b8_6de62588",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 587,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-02-21T09:25:16Z",
      "side": 1,
      "message": "We also need to validate the offset alignment here and in B2T and T2B copies.",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25acbca5_db472e06",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 587,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-02-22T00:45:18Z",
      "side": 1,
      "message": "You\u0027re right. But for B2T and T2B I\u0027d like to send other CL for it. Because their limitation are different. And I think several test case need to add to track the wrong offset case.",
      "parentUuid": "833952b8_6de62588",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c1e81e7_93b2e979",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "After comments below, this would be removed.",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd346d71_c5449c5b",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "Instead of this, could AddBufferExpectation just round-up whatever it gets to a multiple of 4?",
      "range": {
        "startLine": 38,
        "startChar": 61,
        "endLine": 38,
        "endChar": 102
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05f1848c_d7200ce7",
        "filename": "src/tests/end2end/BasicTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "1. It doesn\u0027t make sense to multiply here. E.g. if sizeof(value) were 20, it would not make sense to use size 80 here.\n\n2. (more important). If SetSubData takes size\u003d4, but a pointer to a uint8_t, where do the other 3 bytes come from? (This is a buffer overrun.)\n\nI think the change should instead be:\n\n  uint32_t value \u003d 187;\n  buffer.SetSubData(0, sizeof(value), \u0026value);",
      "range": {
        "startLine": 31,
        "startChar": 41,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bbbb30e_e253ed40",
        "filename": "src/tests/end2end/BasicTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-02-21T06:03:05Z",
      "side": 1,
      "message": "And yes, I agree with you about the mulitply is not make sense. But it make sense for the case that only have 1 uint8 data.\n\nIt cannot be changed to this. Because the third param of SetSubData is a uint8_t* but value be a uint32_t typed data. I tried this method first and got errors. So I asked whether we should change the third param of SetSubData to be a uint32_t* :)",
      "parentUuid": "05f1848c_d7200ce7",
      "range": {
        "startLine": 31,
        "startChar": 41,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c551d63_6bc0ee37",
        "filename": "src/tests/end2end/BasicTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-02-21T09:25:16Z",
      "side": 1,
      "message": "We could make it a void* to remove the need for casts, but this would require dawn_wire changes because it would try to use sizeof(void) which is undefined.",
      "parentUuid": "7bbbb30e_e253ed40",
      "range": {
        "startLine": 31,
        "startChar": 41,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4014da08_e499d522",
        "filename": "src/tests/end2end/BasicTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T22:37:29Z",
      "side": 1,
      "message": "True, it would require a reinterpret_cast. How about just\n\n  uint8_t value[4] \u003d { 187, 0, 0, 0 };\n  buffer.SetSubData(0, sizeof(value), value);\n\n?",
      "parentUuid": "1c551d63_6bc0ee37",
      "range": {
        "startLine": 31,
        "startChar": 41,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3360b829_a9129a2e",
        "filename": "src/tests/end2end/BasicTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T22:39:02Z",
      "side": 1,
      "message": "@cwallez, I\u0027d probably be in favor of making it take void* eventually. But I don\u0027t think it\u0027s necessary in this patch.",
      "parentUuid": "4014da08_e499d522",
      "range": {
        "startLine": 31,
        "startChar": 41,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "684bff97_9622fad5",
        "filename": "src/tests/end2end/BasicTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-02-22T00:45:18Z",
      "side": 1,
      "message": "I support void* as a final solution. And I\u0027m Ok with the manual padding form as Kai\u0027s suggestion. Let me update the patch.",
      "parentUuid": "3360b829_a9129a2e",
      "range": {
        "startLine": 31,
        "startChar": 41,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e76ea3b_9494d9a1",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "Same",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d66401c_4b0b6ee2",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "Same",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "122bfc69_186a4cf5",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-21T03:18:20Z",
      "side": 1,
      "message": "Same",
      "revId": "a65561f84ba4321a7a2358259a9a8bd0791e2f44",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}