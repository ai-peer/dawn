{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68287673_b6d93e08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-13T20:09:34Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6c281ad_ff6861ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-14T10:36:04Z",
      "side": 1,
      "message": "Sorry but not entirely convinced this change is a net positive.",
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25cf3999_00f6e790",
        "filename": "src/tint/ir/binary.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-14T10:36:04Z",
      "side": 1,
      "message": "I think this pattern is a little fragile.\n\n`Resize()` will grow the vector with zero-initialized values. You\u0027re then assigning to all the operands. If you forget to assign to all the operands, you\u0027ll have nullptrs, which you decided shouldn\u0027t be validated by the Validator - so we\u0027re increasing the risk of introducing untracked nullptr operands.\n\nYou\u0027re also using named offsets, but then making assumptions that `kRhsOperandOffset` is the largest offset. If `kRhsOperandOffset \u003d\u003d 0` and `kLhsOperandOffset \u003d\u003d 1`, then you\u0027re going to be resizing to the wrong size.\n\nGiven that `Binary` derives from `utils::Castable\u003cBinary, OperandInstruction\u003c2\u003e\u003e`, we\u0027re guaranteed to have space for 2 elements without a heap allocation.\n\nAll in all, I think `Resize()` here doesn\u0027t actually give you any benefits, and adds some minor possibility of bugs.\n\nThe `AddOperand()` pattern ensured there were no nullptrs, and removed the need for a `Resize()` call.\n\nFor variable-length operand instructions, this pattern makes a lot more sense to prevent repeat heap allocations.",
      "range": {
        "startLine": 26,
        "startChar": 11,
        "endLine": 26,
        "endChar": 36
      },
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "306e63e9_202a96d1",
        "filename": "src/tint/ir/binary.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-14T12:13:48Z",
      "side": 1,
      "message": "The thing I like about this over `AddOperand` is it\u0027s very obvious what slots each operand is going into. The names are explicit, so changing the order here doesn\u0027t accidentally change the order in the operand list.\n\nWe could add a `kMaxOperands` and use that for the `Resize` if desired and have it in the header files which would also work.",
      "parentUuid": "25cf3999_00f6e790",
      "range": {
        "startLine": 26,
        "startChar": 11,
        "endLine": 26,
        "endChar": 36
      },
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd6e3ef_23dbe33d",
        "filename": "src/tint/ir/construct.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-14T10:45:02Z",
      "side": 1,
      "message": "If this were `Reserve()` and `SetOperands()` became `AddOperands()`, then I think most of my concerns described above would be alleviated.",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 10
      },
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "417b1b44_ef5f8d98",
        "filename": "src/tint/ir/operand_instruction.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-14T10:36:04Z",
      "side": 1,
      "message": "mutating parameters, eh?\nnit: given the name, I\u0027d make a function-scope `uint32_t idx \u003d start_idx`.",
      "range": {
        "startLine": 55,
        "startChar": 12,
        "endLine": 55,
        "endChar": 21
      },
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1098733_e615e97f",
        "filename": "src/tint/ir/operand_instruction.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-14T10:36:04Z",
      "side": 1,
      "message": "I\u0027m still concerned about the overhead of an enforced virtual method call per operand. Validating operands in the validator could obtain all the operands in a single virtual call.",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 65
      },
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "126ee103_deb35776",
        "filename": "src/tint/ir/operand_instruction.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-14T12:13:48Z",
      "side": 1,
      "message": "Sure, but then we have to check before every use for `nullptr`s. I don\u0027t think the assuming not null is a safe way to go. With this, we have a very limited place when we can have `nullptr` in the operand list, specifically var initializers.",
      "parentUuid": "e1098733_e615e97f",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 65
      },
      "revId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ed121e73aab6c11826279bef9dc6406fc9b50611",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}