{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5d763c97_5f65c1fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "First batch of comments - this is taking a while to review as this is all new to me, so I\u0027ll post comments in batches.\n\nLots of nits which are completely ignorable.",
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18d6082f_ce56298e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "\u003e First batch of comments - this is taking a while to review as this is all new to me, so I\u0027ll post comments in batches.\n\u003e \n\u003e Lots of nits which are completely ignorable.\n\nSounds good, and feel free to ping me if you have any questions!",
      "parentUuid": "5d763c97_5f65c1fd",
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6d97ca4_2d6a7144",
        "filename": "src/dawn_native/DawnNative.cpp",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "nit: What does the \u0027c\u0027 prefix represent? Seems odd to change this but keep \u0027aspect_\u0027",
      "range": {
        "startLine": 183,
        "startChar": 41,
        "endLine": 183,
        "endChar": 61
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc6e9ce5_565e4539",
        "filename": "src/dawn_native/DawnNative.cpp",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "Whoops that\u0027s should have been part of the earlier CL, and you\u0027re right aspect_ should have changed to cAspect (the C is because we\u0027re converting from Dawn\u0027s C API). Done and integrated in the earlier CL instead of this one.",
      "parentUuid": "c6d97ca4_2d6a7144",
      "range": {
        "startLine": 183,
        "startChar": 41,
        "endLine": 183,
        "endChar": 61
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4e5895f_8c8458a5",
        "filename": "src/dawn_native/Subresource.h",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "nit: Maybe reorder these fields so they\u0027re not reversed from the other two functions?",
      "range": {
        "startLine": 70,
        "startChar": 32,
        "endLine": 72,
        "endChar": 66
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da6d7ba4_e5d079ec",
        "filename": "src/dawn_native/Subresource.h",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "Oh no I completely missed my git-fu that should have been part of an earlier CL (and that function will go away in https://dawn-review.googlesource.com/c/dawn/+/35016/2)",
      "parentUuid": "d4e5895f_8c8458a5",
      "range": {
        "startLine": 70,
        "startChar": 32,
        "endLine": 72,
        "endChar": 66
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "419856be_d61bdcf9",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T11:30:54Z",
      "side": 1,
      "message": "After reading this a few times, I think it would be good to state exactly what compression / decompression really means. The mental model I\u0027ve formed is a tree:\n\n    ├─ aspect 0\n    │   │\n    │   ├─ layer 0\n    │   │   │\n    │   │   ├─ level 0\n    │   │   ├─ level 1\n    │   │   │ ...\n    │   │   └─ level mipLevelCount-1\n    │   │\n    │   │ ...\n    │   │\n    │   └─ arrayLayerCount-1\n    │       │\n    │       ├─ level 0\n    │       │ ...\n    │       └─ level mipLevelCount-1\n    │\n    └─ aspect 1\n        │\n        ├─ layer 0\n        │   │\n        │   │ ...\n        │\n        │ ... \n        │\n        └─ arrayLayerCount-1\n            │\n            │ ...\n\nWhere:\n• Recompression is the removal of all children of a non-leaf node (aspect or layer), which is possible iff all child nodes have the same data.\n• Decompression is the expansion of an aspect or layer node, by copying the parent data to the children.\n\nIs that right?",
      "range": {
        "startLine": 45,
        "startChar": 32,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b48da5_fb15e00d",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "Fine as is, but you could add:\n\n    namespace detail {\n        struct Unsupported {}; \n\n        template\u003ctypename LHS, typename RHS\u003e\n        Unsupported operator \u003d\u003d (LHS, RHS);\n\n        template\u003ctypename LHS, typename RHS \u003d LHS\u003e\n        struct HasEqualityOperator\n        {\n            static constexpr const bool value \u003d std::is_same\u003cdecltype(std::declval\u003cLHS\u003e() \u003d\u003d std::declval\u003cRHS\u003e()), bool\u003e::value;\n        };\n    }\n\n    template \u003ctypename T\u003e\n    class SubresourceStorage {\n      public:\n        static_assert(std::is_copy_assignable\u003cT\u003e::value, \"T must be copyable\");\n        static_assert(detail::HasEqualityOperator\u003cT\u003e::value, \"T requires bool operator \u003d\u003d (T, T)\");\n        ...",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 75
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5f12fb4_8d313a0d",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "That\u0027s a good idea, although would require including type_traits in a bunch of places. That\u0027s probably ok.\n\nAustin WDYT of having a common/TypeTraits.h that includes type_traits and also adds traits like what Ben suggested above? I think we might already have custom traits in some places (there\u0027s at least alignof_if_defined_else_default in Result.h).",
      "parentUuid": "a5b48da5_fb15e00d",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 75
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acaa243a_268eae9b",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "nit: I don\u0027t think this technically needs to be convertible (nor do I think it always can be). The terminology I tend to use for this is:\n\n\"F must be a function or function-like object with the signature: void(const SubresourceRange\u0026 range, const T\u0026 data)\"",
      "range": {
        "startLine": 89,
        "startChar": 32,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef617de2_bdcb37a3",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "Reworded slightly in a way that also allows getting a T by value in the second argument. WDYT?",
      "parentUuid": "acaa243a_268eae9b",
      "range": {
        "startLine": 89,
        "startChar": 32,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a794a5f9_7936c1aa",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "The error handling is a bit unexpected for an example.\nIf error handling is something you particularly care about, I\u0027d suggest using a non-void return type so you can immediately stop the iteration, and then have Iterate return the error code.",
      "range": {
        "startLine": 96,
        "startChar": 17,
        "endLine": 96,
        "endChar": 55
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e5d7a64_def337b7",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "We don\u0027t particularly care about it and in particular we heavily bias towards optimizing the success case at the expense of the error case. (so it would be fine to finish the whole iteration even if it is useless when an error crept up in the middle vs. adding more branches that aren\u0027t taken in the success case).\n\nRemoved the error from the example to avoid the confusion.",
      "parentUuid": "a794a5f9_7936c1aa",
      "range": {
        "startLine": 96,
        "startChar": 17,
        "endLine": 96,
        "endChar": 55
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9a6fa38_eeeaceb7",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T12:43:59Z",
      "side": 1,
      "message": "Looks fine, thanks",
      "parentUuid": "6e5d7a64_def337b7",
      "range": {
        "startLine": 96,
        "startChar": 17,
        "endLine": 96,
        "endChar": 55
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3c9c23d_4fa353f3",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "übernit: you might save some space swapping these two fields, however the cost is probably negligible, and you\u0027d probably get better arithmetic performance if they were native register width.\nI\u0027m curious to know why you\u0027ve used small types here instead of uint32_t or size_t?",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 135,
        "endChar": 34
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fc9cd23_b9767c40",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "Aspect is defined as `enum class Aspect : uint8_t` so I think all three members together should pack in 4 bytes, am I missing something?\n\nI didn\u0027t think there would be a cost associated with the data being smaller because IIRC both x86 and ARM ISAs have instructions to load 8 or 16 bytes from memory into a register? I could be completely wrong though.",
      "parentUuid": "b3c9c23d_4fa353f3",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 135,
        "endChar": 34
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61988a9f_b34581b5",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T12:43:59Z",
      "side": 1,
      "message": "Ah, I missed that Aspect was 8 bit. Ignore me.",
      "parentUuid": "0fc9cd23_b9767c40",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 135,
        "endChar": 34
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50dc435_f62372d5",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T11:30:54Z",
      "side": 1,
      "message": "I suggest adding index methods for these:\n\n  bool\u0026 LayerCompressed(uint32_t aspectIndex, uint32_t layerIndex);\n  T\u0026 Data(uint32_t aspectIndex, uint32_t layerIndex \u003d 0, uint32_t levelIndex \u003d 0);\n\nWorth also documenting that an aspect\u0027s data is the [layer0, level0]\u0027s data, and that a layer\u0027s data is the level0\u0027s data.",
      "range": {
        "startLine": 141,
        "startChar": 8,
        "endLine": 145,
        "endChar": 35
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03f8400c_a18ea3d6",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T11:30:54Z",
      "side": 1,
      "message": "übernit: might be slightly more efficient to allocate the memory, and copy-construct than construct and assign, but this is a microopt.",
      "range": {
        "startLine": 161,
        "startChar": 8,
        "endLine": 161,
        "endChar": 87
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d6d1a48_90c24287",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2020-12-08T10:50:56Z",
      "side": 1,
      "message": "nit: Offset makes me think bytes, when this is an index in mData.",
      "range": {
        "startLine": 182,
        "startChar": 19,
        "endLine": 182,
        "endChar": 35
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae41d82e_b816f01c",
        "filename": "src/dawn_native/SubresourceStorage.h",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T11:28:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d6d1a48_90c24287",
      "range": {
        "startLine": 182,
        "startChar": 19,
        "endLine": 182,
        "endChar": 35
      },
      "revId": "85cfb70c24cb2575053ff9e980d9d2f33c728099",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}