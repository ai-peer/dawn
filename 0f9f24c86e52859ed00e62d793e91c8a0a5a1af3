{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2092bf31_fc5fc32d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-06-18T06:06:26Z",
      "side": 1,
      "message": "PTAL. Thanks!",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0aa8171_ea1dd530",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-18T07:43:23Z",
      "side": 1,
      "message": "LGTM, Jiawei PTAL too.",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "738c2b71_d81cc7f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-21T07:27:41Z",
      "side": 1,
      "message": "Still LGTM.\n\nJiawei or Austin PTAL!",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e3b6744_ef41ff77",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-06-21T08:23:27Z",
      "side": 1,
      "message": "LGTM with Corentin\u0027s comments",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a5c0c18_dec97705",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-21T15:21:44Z",
      "side": 1,
      "message": "LGTM",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "428e4161_2b1cb427",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-21T07:27:41Z",
      "side": 1,
      "message": "nit: to completely populate the subresources that will be copied from.\n\nThis will make the comment match your explanation.\n\nDitto below",
      "range": {
        "startLine": 367,
        "startChar": 58,
        "endLine": 367,
        "endChar": 75
      },
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfe0a87e_cc441f2a",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 375,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-06-18T06:15:05Z",
      "side": 1,
      "message": "The function GetTextureDataCopyLayoutForTextureAtLevel() will shrink on depth dimension (via doing depthOrArrayLayers \u003e\u003e mipLevel) if it is a 3D texture, so if we pass copySize.depthOrArrayLayers, it will be shrink into a smaller value for 3D texture if the mip level is non-zero, which is incorrect. \n\nNow we pass srcSpec.textureSize.depthOrArrayLayers, the resized value (srcSpec.textureSize.depthOrArrayLayers \u003e\u003e mipLevel) will still be equal or greater than copySize.depthOrArrayLayers.",
      "range": {
        "startLine": 373,
        "startChar": 17,
        "endLine": 375,
        "endChar": 52
      },
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64ecafc9_30580a6e",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 375,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-18T07:43:23Z",
      "side": 1,
      "message": "Would passing srcSpec.textureSize directly work? It would match what the function seems to expect since the argument is called textureSizeAtLevel0.",
      "parentUuid": "cfe0a87e_cc441f2a",
      "range": {
        "startLine": 373,
        "startChar": 17,
        "endLine": 375,
        "endChar": 52
      },
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1f8730c_459f88b5",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 375,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-06-18T17:57:37Z",
      "side": 1,
      "message": "In theory it should work for GetTextureDataCopyLayoutForTextureAtLevel(). But it doesn\u0027t. T2T test itself doesn\u0027t want to tackle irrelevant layers/subresources of the texture, so it just pass copySize.depthOrArrayLayers for 2D, which is smaller than srcSpec.textureSize.depthOrArrayLayers if it is not a full copy. Unfortunately that is incorrect for 3D. These slices are depth slices in 3D. They are not layers. These depth slices are within the same subresource.",
      "parentUuid": "64ecafc9_30580a6e",
      "range": {
        "startLine": 373,
        "startChar": 17,
        "endLine": 375,
        "endChar": 52
      },
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8deb7e68_69e1be4c",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 375,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-21T07:27:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1f8730c_459f88b5",
      "range": {
        "startLine": 373,
        "startChar": 17,
        "endLine": 375,
        "endChar": 52
      },
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bc9a344_c5f7b6ca",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 375,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-06-21T15:21:44Z",
      "side": 1,
      "message": "alternatively, we could also pass the |dimemsion| into GetTextureDataCopyLayoutForTextureAtLevel and compute it correctly inside there.",
      "parentUuid": "8deb7e68_69e1be4c",
      "range": {
        "startLine": 373,
        "startChar": 17,
        "endLine": 375,
        "endChar": 52
      },
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff634c67_43449397",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-18T07:43:23Z",
      "side": 1,
      "message": "ditto",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c06ffeb8_53577380",
        "filename": "src/tests/end2end/CopyTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-06-18T17:57:37Z",
      "side": 1,
      "message": "same here.",
      "parentUuid": "ff634c67_43449397",
      "revId": "0f9f24c86e52859ed00e62d793e91c8a0a5a1af3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}