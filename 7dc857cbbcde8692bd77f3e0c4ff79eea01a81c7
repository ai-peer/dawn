{
  "comments": [
    {
      "key": {
        "uuid": "7c7dd3c7_e5d38cb3",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 13
      },
      "lineNbr": 320,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "I\u0027m pretty sure this is already the case, you should be able to use Sampled with ReadonlyStorage.",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4661d9c_b964610a",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 13
      },
      "lineNbr": 320,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-04-16T05:02:29Z",
      "side": 1,
      "message": "[1]\nOh maybe I have some misunderstandings here. Please correct me if there is anything wrong.\n\nNow there are 5 texture usages in WebGPU:\nCOPY_SRC (not allowed in either compute pass or render pass encoder)\nCOPY_DST (not allowed in either compute pass or render pass encoder)\nSAMPLED\nSTORAGE (read-only and write-only)\nOUTPUT_ATTACHMENT \n\nSo here we need to take SAMPLED, STORAGE(read-only and write-only) and OUTPUT_ATTACHMENT into consideration.\n\nAccording to my previous thought, here we actually need to check:\n- In a render pass encoder, a texture used as OUTPUT_ATTACHMENT cannot be used as either SAMPLED or STORAGE(including read-only and write-only). I fail to find any restrictions that disallows a texture being used as both SAMPLED, read-only STORAGE and write-only STORAGE in the same render pass encoder.\n- In a compute pass encoder, a texture cannot be used as OUTPUT_ATTACHMENT, so there should be no restrictions as we can use a texture as SAMPLED, read-only STORAGE and write-only storage altogether.",
      "parentUuid": "7c7dd3c7_e5d38cb3",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31cf77f3_f4faa7c0",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 13
      },
      "lineNbr": 320,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-16T09:39:16Z",
      "side": 1,
      "message": "\u003e I fail to find any restrictions that disallows a texture being used as both SAMPLED, read-only STORAGE and write-only STORAGE in the same render pass encoder.\n\nThat would be a restriction in the usage scope, defined here https://gpuweb.github.io/gpuweb//#usage-scope-validation (it will need a lot of expanding). write-only storage is a mutating usage so it cannot be used in combination with anything else.\n\nHowever sampled and readonly storage are both non-mutating so they are ok to use in the same render pass.\n\nComputePassEncoders have \"dispatch\" as the usage scope so it is valid to use a texture as multiple mutating usages are this point (validation would need to be inside dispatch eventually, not needed for some time).",
      "parentUuid": "e4661d9c_b964610a",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d777d3a8_ed9cf9c8",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 13
      },
      "lineNbr": 320,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-04-17T10:27:03Z",
      "side": 1,
      "message": "Thanks for your comment. I\u0027ve submitted a patch to add all these texture usage scope validations in a render pass (https://dawn-review.googlesource.com/c/dawn/+/19820). PTAL, thanks!\n\nThe usage validation in the compute pass needs a bit more changes so I decide to do it in another patch.",
      "parentUuid": "31cf77f3_f4faa7c0",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0094adea_7a7f932a",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 13
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "This should track readonly and writeonly separately.",
      "range": {
        "startLine": 69,
        "startChar": 81,
        "endLine": 69,
        "endChar": 88
      },
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1701918_83fa98b6",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 13
      },
      "lineNbr": 69,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-04-16T05:02:29Z",
      "side": 1,
      "message": "Based on [1], I don\u0027t think we need to track readonly and writeonly separately as either they can or cannot be used together (when the texture is being used as an OUTPUT_ATTACHMENT).",
      "parentUuid": "0094adea_7a7f932a",
      "range": {
        "startLine": 69,
        "startChar": 81,
        "endLine": 69,
        "endChar": 88
      },
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97d6e401_564c0eca",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 13
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-16T09:39:16Z",
      "side": 1,
      "message": "See comment there.",
      "parentUuid": "d1701918_83fa98b6",
      "range": {
        "startLine": 69,
        "startChar": 81,
        "endLine": 69,
        "endChar": 88
      },
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f14fcda_81932214",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "ditto, although it might be good to keep it.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 59
      },
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "946ea47b_e12eba25",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 35
      },
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad22566d_b1d5c39b",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "nit: not needed, it is the default.",
      "range": {
        "startLine": 29,
        "startChar": 35,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5546c1be_2ba4f769",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "nit: ASSERT(kWidth * texelSize \u003c\u003d kTextureRowPitchAlignment)",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e640932_1a09fe4c",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "nit: We could just have a CreateTextureWithTestData and queue.submit directly in this function. Also it could be a single helper function split with blocks. Right now there\u0027s a bunch of protected methods that aren\u0027t used in any child classes.",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c43a9f5c_4157f270",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "nit: CheckDrawsGreen",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33aa394f_11dcf1ba",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "Can we have a 1x1 attachment for this? We could even render a single point!",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a58fc1bd_6019cf4b",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-04-16T05:02:29Z",
      "side": 1,
      "message": "I don\u0027t use 1x1 attachment because I want to make sure the coordinates in the image load and store are the same across all the backends.",
      "parentUuid": "33aa394f_11dcf1ba",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f95b19_46b9b7e5",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-16T09:39:16Z",
      "side": 1,
      "message": "You can do so with a loop, like you did for the compute shader.",
      "parentUuid": "a58fc1bd_6019cf4b",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f75dc3c_06a101a2",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 191,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "What about having a common shader code that has:\n\n layout ... the test texture\n\n bool doTest() {\n   samples the texture and directly checks in the shader using computations that the content is correct.\n }\n\nThen each test below could have a simple variation:\n\nFS would output green or red depending on the result of DoTest, Compute would write into a storage buffer the result of DoTest, and VS would forward to the FS.",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a94c887_38eb6e05",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-15T16:02:06Z",
      "side": 1,
      "message": "ditto for the write case. Also it should be supported in the pixel shader, see https://github.com/gpuweb/gpuweb/issues/639",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27c56aa0_e82aa057",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-04-16T05:02:29Z",
      "side": 1,
      "message": "Then I think I should first change the related validation rules then go back to this CL. What do you think?",
      "parentUuid": "2a94c887_38eb6e05",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcdf2e46_14c43d6a",
        "filename": "src/tests/end2end/StorageTextureTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-16T09:39:16Z",
      "side": 1,
      "message": "Either order sounds fine.",
      "parentUuid": "27c56aa0_e82aa057",
      "revId": "7dc857cbbcde8692bd77f3e0c4ff79eea01a81c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}