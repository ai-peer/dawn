{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bd943841_89c8204b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-08-03T19:32:56Z",
      "side": 1,
      "message": "Ready to merge.",
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34220384_6992b508",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-08-03T19:53:05Z",
      "side": 1,
      "message": "+1 % Austin\u0027s issue regarding const char*",
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a773102f_7cbf549f",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-03T19:34:30Z",
      "side": 1,
      "message": "nit: this can be const char* now",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f11bf16_4f5d5399",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-08-03T19:43:13Z",
      "side": 1,
      "message": "It can? I need size() and std::string comes recommended.",
      "parentUuid": "a773102f_7cbf549f",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3970ceb2_163c14da",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-03T19:44:52Z",
      "side": 1,
      "message": "ah I see, nvm. we\u0027ll need to support user strings in the future anyway which might have \\0 unless we strip it.",
      "parentUuid": "3f11bf16_4f5d5399",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd64a039_309c318c",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-08-03T19:53:05Z",
      "side": 1,
      "message": "+1 to using const char*. strlen gives you the size of the char* string. std::string incurs a heap allocation we can avoid if we use const char*.",
      "parentUuid": "3f11bf16_4f5d5399",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ea787ec_e31228c4",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-08-03T20:28:50Z",
      "side": 1,
      "message": "I slightly prefer to use std::string since it\u0027s safer (ie. strlen could return the wrong size) and the perf there seems negligible. Note: chromium specifically asks for std::string [1].\n\n[1] https://www.chromium.org/developers/chromium-string-usage",
      "parentUuid": "bd64a039_309c318c",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2061a4d_4b6826f8",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-08-03T20:59:09Z",
      "side": 1,
      "message": "Bryan, I don\u0027t understand what you mean by \"safer\". strlen is speced to return the length of a string. Unless I am missing something, it shouldn\u0027t return the wrong size.\n\nAs for the string usage page you linked, it says to use char arrays for constant strings, not std::string.\n\nThe high order bit to me is we set the string in D3D quickly and efficiently. Since the internal name will always be constant, we should store it and pass it around as a const char*. The developer label should be stored and passed around as a std::string since they can change it at any time. The builder functionality should only need to build when necessary.  \n\nSee https://chromium-review.googlesource.com/c/angle/angle/+/3067921 for how we\u0027re planning on doing this in ANGLE.",
      "parentUuid": "8ea787ec_e31228c4",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4c97eac_8f8b3b0d",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-08-03T22:40:12Z",
      "side": 1,
      "message": "Discussed offline. The end result is |label| in SetDebugName(const char* label) will need to be additionally sanitized for \\0 before use due to strlen.",
      "parentUuid": "a2061a4d_4b6826f8",
      "range": {
        "startLine": 44,
        "startChar": 52,
        "endLine": 44,
        "endChar": 75
      },
      "revId": "72a55b3e9cf7dfa82ce44356484f4ca70ef45b38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}