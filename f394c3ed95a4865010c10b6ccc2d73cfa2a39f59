{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fb43bc79_7f07bcb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-08T21:08:52Z",
      "side": 1,
      "message": "I made some manual changes to the expectations file while triaging issues last week. And, the conflict detection kept tripping me up. I think we should make it match what typ does (more permissive), but not 100% sure how this will impact the rest of the roller - but I didn\u0027t get any errors when I tried it and from what I can tell, it should be fine. Do you know?\n",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7495dde_e22426fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-09T16:30:14Z",
      "side": 1,
      "message": "LGTM",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51f4e511_c7b6423b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-09T18:07:20Z",
      "side": 1,
      "message": "nvm, I broke kokoro tests",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6c497bc_74eff932",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T22:14:52Z",
      "side": 1,
      "message": "Loko, this was my no-idea attempt",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbdd1c7a_413c564f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T22:43:04Z",
      "side": 1,
      "message": "Ben, could you review to see if this will impact the rest of the tooling adversely?\n",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e1f591_da8b372a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-08-25T22:56:54Z",
      "side": 1,
      "message": "Before doing so, would recommend reading through https://chat.google.com/room/AAAATWNUeXA/ZWnB1xNFcDY since I think that it might actually be better to separate the collision detection logic entirely, and remove the dependency on the actual results.",
      "parentUuid": "dbdd1c7a_413c564f",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "878aa388_631f985d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-08-26T09:20:16Z",
      "side": 1,
      "message": "I appreciate the effort to try and simplify usage here, but I\u0027m not sold that this is the right approach. To do this properly, the expectation generation algorithm needs an overhaul, which considers rules below the currently processed line. This stuff is remarkably complex, and I think to do this would be at least a couple of weeks work.\n\nThe expectation file is extremely verbose because of excessive CTS failures and flakes. I strongly believe that attempting to paper over the number of expectation rules is the wrong place to be investing our resources right now. Instead I\u0027d hope we can spend more efforts on reducing the number of failures and flakes. Do that, and the tooling (in its current form) will dramatically reduce the number of expectation rules.",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "629a6acd_ddac5467",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-26T16:17:48Z",
      "side": 1,
      "message": "The goal isn\u0027t really to paper over the number of expectations rules. The goal is to make the file a useful list of what is failing by precisely describing the problems. Right now, we can\u0027t handle the situation like:\n\n```\nfoo:* [ Slow ] # crbug.com/1234\nfoo:bar:baz [ Failure ] # crbug.com/5678\n```\n\nThis, chiefly, is the type of conflict detection I\u0027d like to find a way to resolve.\nPreviously we used to have a problem where we would need to manually split tests up into smaller test groups, and it was a huge pain. Now, we have the same problem but in the expectations file. To precisely describe what this example expresses, you might have to split foo:* into all 1000 testcases, just to mark 999 of them as [ Slow ] # crbug.com/1234 and foo:bar:baz as [ Slow Failure ] # crbug.com/5678.\n\nPlease know we are investing considerable resources into solving the failures and flakes and have made significant progress there with still some work to go. For example, a few weeks ago our random flaky timeout rate was over 240 per hour. Now it\u0027s at about that much per day. Any help on that front would certainly be appreciated.\n\nPart of burning down the other problems is helped by a way to list what they are in a manageable way. We have bugs filed for every type of failure and flake but we can\u0027t express them in the expectations file clearly. The expectations file is a great place to track this information since the tooling can automatically keep it up to date. I think that managing this list well is pretty important, and both Loko and I have run into difficulty doing so on separate occasions.\n\nI understand that the tooling is complex, but that doesn\u0027t mean we can\u0027t improve and simplify it. I ask we do not ignore the need to express expectations in this way. This same expectations format is used throughout Chromium and this type of overlapping pattern is common. We have a need for it now, and experience from Chromium shows we will continue to need it in the future. Let\u0027s think through specifically what the barriers are to matching how `typ` interprets expectations and see how we might solve them incrementally.",
      "parentUuid": "878aa388_631f985d",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d36805b_b2c5dd72",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-08-26T09:20:16Z",
      "side": 1,
      "message": "remove. `break` is implicit in go.",
      "range": {
        "startLine": 89,
        "startChar": 3,
        "endLine": 89,
        "endChar": 11
      },
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e10c0db_f28fe220",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-08-26T09:20:16Z",
      "side": 1,
      "message": "not true with this change.",
      "range": {
        "startLine": 167,
        "startChar": 53,
        "endLine": 167,
        "endChar": 56
      },
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84cfef8f_172a8b21",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-09T13:04:30Z",
      "side": 1,
      "message": "nit: using Glob here just to get the QueryData for q is a bit overkill. What do you think of adding a `func (t *Tree[Data]) At(q Query) (*QueryData[Data], err)` (and some simple unittests in tree_test.go)?",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d19cf0_0e4c79bf",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-09T15:26:20Z",
      "side": 1,
      "message": "hm, the glob is also appending all matching things in the glob to the output - see [1]",
      "parentUuid": "84cfef8f_172a8b21",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62988303_0497f0be",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-09T16:30:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f3d19cf0_0e4c79bf",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15b6ca7c_a4c30354",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-09T13:04:30Z",
      "side": 1,
      "message": "I\u0027m trying to understand what this gains us. Is it that it is ok for queries to have intersecting tags as long as the intersecting tags aren\u0027t in any tag set?",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d32d780_19445490",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-09T15:26:20Z",
      "side": 1,
      "message": "I think the most helpful thing it gives us is you can now do:\n\nfoo:* [ RetryOnFailure Slow ]\nfoo:bar:* [ Failure ]\n\nwith the current algorithm, you need to split the first one up into all children (which is kinda the problem we had with the old CTS harness as well)\n\ntyp says that the test pattern needs to match exactly for it to be considered conflicting",
      "parentUuid": "15b6ca7c_a4c30354",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7cf6c1d_1736c978",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-09T16:30:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9d32d780_19445490",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d85ca05_f2980c5f",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-08-26T09:20:16Z",
      "side": 1,
      "message": "This change does not fix this problem.\n\nThe code scans through the expectation lines, top to bottom. It looks at the query set, and rebuilds the set of expectations based on the results (assuming it wasn\u0027t set as `KEEP`). So, the tooling will have split the first set of expectations before it has even seen the second sub-query rule.\n\nThe end goal is that once the flakes have all been removed, we can remove all the `KEEP`s.",
      "parentUuid": "f7cf6c1d_1736c978",
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b37ab78_108bf019",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-09T15:26:20Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 29
      },
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74d924fd_585e9b5a",
        "filename": "tools/src/cts/expectations/update.go",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-09T16:30:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0b37ab78_108bf019",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 29
      },
      "revId": "f394c3ed95a4865010c10b6ccc2d73cfa2a39f59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}