{
  "comments": [
    {
      "key": {
        "uuid": "11bfc485_3ba6e771",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 180,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-22T22:36:23Z",
      "side": 1,
      "message": "Methods which begin with the word `Is` should be for const methods, not methods which have side effects. I think we should find a better name for this method.",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e10883c7_24b6dda0",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T20:35:49Z",
      "side": 1,
      "message": "Hm, so if we don\u0027t submit any more commands, but keep ticking, won\u0027t this function always return false? (so we\u0027ll never be \"done\")\n\nSay mCompletedSerial \u003d 2, mLastSubmittedSerial \u003d 2, mLastProcessedTickSerial \u003d 1\n\nTick()\n  - IsCompletedSerialProcessed() \u003d\u003e false\n  - TickImpl()\n     - mLastProcessedTickSerial \u003c-- 2\n     - UpdateSerial()\n       - mCompletedSerial \u003c-- 3\n       - mLastSubmittedSerial \u003c-- 3\n\nAnd tick again, it\u0027ll do the same thing. mLastProcessedTickSerial will never catch up, so IsCompletedSerialProcessed() will always return false\n\n\nInstead of artificially incrementing the serial to continue making progress, maybe the better way to drive callbacks as Corentin mentioned before:\n\u003e We need this to drive callbacks like the one for mapReadAsync while the GPU is not being used. This is causing the timeout failures you see.\n\nwould be to explicit set a flag on fence.Signal and buffer.MapAsync which sets some \"needs pending tick\" flag. Then, IsCompletedSerialProcessed() becomes:\n  mLastProcessedTickSerial \u003d\u003d GetCompletedCommandSerial() || mHasPendingTick\n\nWhat do you all think?",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcedc2df_6d5b22d1",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-04-22T22:14:50Z",
      "side": 1,
      "message": "I like that better than artificially incrementing. And just to make sure, the callbacks were the only reason for artificial increments? Can we do that in another CL ?",
      "parentUuid": "e10883c7_24b6dda0",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96d15abf_9870699e",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-22T22:36:23Z",
      "side": 1,
      "message": "\u003e mLastProcessedTickSerial \u003d\u003d GetCompletedCommandSerial() || mHasPendingTick\n\nmHasPendingTick is a boolean. It cannot be assigned to a serial.",
      "parentUuid": "bcedc2df_6d5b22d1",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5789b71_d2dc063e",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T22:39:24Z",
      "side": 1,
      "message": "whoops. forgot parentheses.",
      "parentUuid": "96d15abf_9870699e",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adb4ca0d_9e45fba5",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T22:43:28Z",
      "side": 1,
      "message": "\u003e And just to make sure, the callbacks were the only reason for artificial increments? \n\nI believe so. Buffer map requests add tracking on the pending command serial so we need to keep ticking anyway to make sure they complete.\n\nQueue::Signal and Error scopes get enqueued on the last submitted serial.\nFor those, it may be okay to tick while mLastSubmittedSerial !\u003d mCompletedSerial\n\nSo maybe we keep track of the largest serial that a callback is waiting for.\n\nI think we would still need to keep the artificial increments because the buffer requests get attached to that specific serial, but we would only artificially Tick up to the serial that the buffer is waiting for.",
      "parentUuid": "c5789b71_d2dc063e",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41a87b62_d1cab0c1",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 12
      },
      "lineNbr": 172,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T20:35:49Z",
      "side": 1,
      "message": "OpenGL didn\u0027t have this before; why is it needed now?",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 172,
        "endChar": 35
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cd4038c_f481eaa9",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 12
      },
      "lineNbr": 172,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-04-22T22:14:50Z",
      "side": 1,
      "message": "hmm I was having issues with hanging but couldn\u0027t debug locally, and this seemed to help it, maybe I need to check passed fences again somewhere, I can upload more patches to see.",
      "parentUuid": "41a87b62_d1cab0c1",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 172,
        "endChar": 35
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4edb33ba_91dfa787",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 12
      },
      "lineNbr": 190,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T20:35:49Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 182,
        "startChar": 3,
        "endLine": 190,
        "endChar": 5
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}