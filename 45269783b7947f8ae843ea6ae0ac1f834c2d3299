{
  "comments": [
    {
      "key": {
        "uuid": "d1775c93_123ebafe",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 12
      },
      "lineNbr": 324,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-23T14:49:23Z",
      "side": 1,
      "message": "Maybe put this close to other private virtual methods?",
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87b14e16_dfaa0e41",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 12
      },
      "lineNbr": 324,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T18:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1775c93_123ebafe",
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11bfc485_3ba6e771",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 180,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-22T22:36:23Z",
      "side": 1,
      "message": "Methods which begin with the word `Is` should be for const methods, not methods which have side effects. I think we should find a better name for this method.",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "603bb9ba_c7e0d884",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 180,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-04-24T00:36:56Z",
      "side": 1,
      "message": "Ok, I renamed it to DidCompletedSerialProcess, let me know if you have other suggestions, thanks!",
      "parentUuid": "11bfc485_3ba6e771",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0e93228_2685e64b",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 180,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T18:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "603bb9ba_c7e0d884",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e10883c7_24b6dda0",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T20:35:49Z",
      "side": 1,
      "message": "Hm, so if we don\u0027t submit any more commands, but keep ticking, won\u0027t this function always return false? (so we\u0027ll never be \"done\")\n\nSay mCompletedSerial \u003d 2, mLastSubmittedSerial \u003d 2, mLastProcessedTickSerial \u003d 1\n\nTick()\n  - IsCompletedSerialProcessed() \u003d\u003e false\n  - TickImpl()\n     - mLastProcessedTickSerial \u003c-- 2\n     - UpdateSerial()\n       - mCompletedSerial \u003c-- 3\n       - mLastSubmittedSerial \u003c-- 3\n\nAnd tick again, it\u0027ll do the same thing. mLastProcessedTickSerial will never catch up, so IsCompletedSerialProcessed() will always return false\n\n\nInstead of artificially incrementing the serial to continue making progress, maybe the better way to drive callbacks as Corentin mentioned before:\n\u003e We need this to drive callbacks like the one for mapReadAsync while the GPU is not being used. This is causing the timeout failures you see.\n\nwould be to explicit set a flag on fence.Signal and buffer.MapAsync which sets some \"needs pending tick\" flag. Then, IsCompletedSerialProcessed() becomes:\n  mLastProcessedTickSerial \u003d\u003d GetCompletedCommandSerial() || mHasPendingTick\n\nWhat do you all think?",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcedc2df_6d5b22d1",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-04-22T22:14:50Z",
      "side": 1,
      "message": "I like that better than artificially incrementing. And just to make sure, the callbacks were the only reason for artificial increments? Can we do that in another CL ?",
      "parentUuid": "e10883c7_24b6dda0",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96d15abf_9870699e",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-22T22:36:23Z",
      "side": 1,
      "message": "\u003e mLastProcessedTickSerial \u003d\u003d GetCompletedCommandSerial() || mHasPendingTick\n\nmHasPendingTick is a boolean. It cannot be assigned to a serial.",
      "parentUuid": "bcedc2df_6d5b22d1",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5789b71_d2dc063e",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T22:39:24Z",
      "side": 1,
      "message": "whoops. forgot parentheses.",
      "parentUuid": "96d15abf_9870699e",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adb4ca0d_9e45fba5",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T22:43:28Z",
      "side": 1,
      "message": "\u003e And just to make sure, the callbacks were the only reason for artificial increments? \n\nI believe so. Buffer map requests add tracking on the pending command serial so we need to keep ticking anyway to make sure they complete.\n\nQueue::Signal and Error scopes get enqueued on the last submitted serial.\nFor those, it may be okay to tick while mLastSubmittedSerial !\u003d mCompletedSerial\n\nSo maybe we keep track of the largest serial that a callback is waiting for.\n\nI think we would still need to keep the artificial increments because the buffer requests get attached to that specific serial, but we would only artificially Tick up to the serial that the buffer is waiting for.",
      "parentUuid": "c5789b71_d2dc063e",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "541ef791_2b6f5416",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-23T14:49:23Z",
      "side": 1,
      "message": "There\u0027s several problems: that we don\u0027t tick if the serial didn\u0027t change at all, so we need a mechanism to say \"I\u0027m still waiting on callbacks set in the same serial please tick\". And the backends use the pendingCommandSerial for the mapping, when it should be the last submitted serial.\n\nSo the main logic in DeviceBase would become:\n\n CheckForSerial();\n if (mCompletedSerial !\u003d mLastProcessedSerial || mHasNewCallbacks) {\n   mLastProcessedSerial \u003d mCompletedSerial;\n   m HasNewCallbacks \u003d false;\n   TickImpl();\n }\n\nOverall I feel that the frontend should take more ownership of the serials, ticking, etc. As well as the MapRequestTrackers. There\u0027s no reasons these are in the backends since they are all the same.",
      "parentUuid": "adb4ca0d_9e45fba5",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14720909_4f54f46c",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-04-24T00:36:56Z",
      "side": 1,
      "message": "can we move the serial variables from the backend to frontend then? I was wondering this before I started my change and had asked Austin about this, he said you were concerned about backend changing protected members of the frontend. Is this still a concern to you?",
      "parentUuid": "541ef791_2b6f5416",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2100b7c6_45c89f4f",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-24T14:16:34Z",
      "side": 1,
      "message": "It is still a concern, so there should be a clear interface between the frontend and the backend that does not involve protected variables.",
      "parentUuid": "14720909_4f54f46c",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c9ccff4_d14b290f",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-24T16:03:35Z",
      "side": 1,
      "message": "Okay, so to recap:\n 1. We can factor things such that the frontend owns the serial tracking.\n 2. Then we can add a \"has callbacks\" signal so that we don\u0027t haven\u0027t to increment the serial if there\u0027s nothing waiting\n 3. And then, we can skip TickImpl if we processed the last completed serial and there are no pending callbacks.",
      "parentUuid": "2100b7c6_45c89f4f",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20d2f1c2_b250ffdc",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 12
      },
      "lineNbr": 187,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T18:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c9ccff4_d14b290f",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 187,
        "endChar": 0
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41a87b62_d1cab0c1",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 12
      },
      "lineNbr": 172,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T20:35:49Z",
      "side": 1,
      "message": "OpenGL didn\u0027t have this before; why is it needed now?",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 172,
        "endChar": 35
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cd4038c_f481eaa9",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 12
      },
      "lineNbr": 172,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-04-22T22:14:50Z",
      "side": 1,
      "message": "hmm I was having issues with hanging but couldn\u0027t debug locally, and this seemed to help it, maybe I need to check passed fences again somewhere, I can upload more patches to see.",
      "parentUuid": "41a87b62_d1cab0c1",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 172,
        "endChar": 35
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1571a99e_b1d84229",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 12
      },
      "lineNbr": 172,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T18:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cd4038c_f481eaa9",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 172,
        "endChar": 35
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4edb33ba_91dfa787",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 12
      },
      "lineNbr": 190,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-22T20:35:49Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 182,
        "startChar": 3,
        "endLine": 190,
        "endChar": 5
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be051f16_6fec9e6e",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 12
      },
      "lineNbr": 190,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T18:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4edb33ba_91dfa787",
      "range": {
        "startLine": 182,
        "startChar": 3,
        "endLine": 190,
        "endChar": 5
      },
      "revId": "45269783b7947f8ae843ea6ae0ac1f834c2d3299",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}