{
  "comments": [
    {
      "key": {
        "uuid": "f067d729_c5f95ac7",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:39:25Z",
      "side": 1,
      "message": "nit: not sure this is necessary, calls to dawn_native don\u0027t need to be validated.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd83ee63_49204117",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 85,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-25T08:49:34Z",
      "side": 1,
      "message": "Without this the unittest will crash when passing a nullptr into map.find().",
      "parentUuid": "f067d729_c5f95ac7",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2984b871_25dd523c",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:55:17Z",
      "side": 1,
      "message": "Yep the unittests for this case could be removed. The check for nullptr could just be an ASSERT.",
      "parentUuid": "fd83ee63_49204117",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3d05e5f_7ee1f837",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 85,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-25T10:19:16Z",
      "side": 1,
      "message": "But it is possible that someone puts a nullptr in the vector\u003cconst char*\u003e DeviceDescriptor.forceEnabledToggles, and this check is useful for this case.",
      "parentUuid": "2984b871_25dd523c",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b90d2292_ff4c6d4e",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T11:04:11Z",
      "side": 1,
      "message": "They can put a non-null pointer to invalid memory too. This API isn\u0027t security-sensitive so I we shouldn\u0027t add unnecessary validation (asserts are fine), otherwise people will rely on that behavior.",
      "parentUuid": "a3d05e5f_7ee1f837",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5b0fe95_463be01a",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:39:25Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 99,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "201d3f99_48c759c8",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 124,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:39:25Z",
      "side": 1,
      "message": "This could be done by iterating over the toggleInfoList so we don\u0027t need to add stuff twice.\n\nAlso while iterating we should assert that each toggle is in the right position in the array. This way when adding a toggle, we add an enum, the compiler forces us to add an entry to the std::array otherwise we don\u0027t have enough elements, and the assert makes sure we don\u0027t mess up the order. Adding toggle would require just 2 code changes in addition to the code path that\u0027s toggled.",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 124,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7157d60e_c192f5fc",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 124,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-25T08:49:34Z",
      "side": 1,
      "message": "So do you mean we get the Toggle Enum by searching the vector mToggleInfoList instead of a hashmap?",
      "parentUuid": "201d3f99_48c759c8",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 124,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49376948_2ae5980e",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 124,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:55:17Z",
      "side": 1,
      "message": "Sorry, \"this\" meant building the hashmap. Basically we have duplicates of the enum value and name between the construction of this hashmap and mToggleInfoList. We could just keep the name and enum values from toggleInfoList and build the hashmap by iterating over the info list and inserting the (name \u003d\u003e enum) correspondances.",
      "parentUuid": "7157d60e_c192f5fc",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 124,
        "endChar": 0
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c239680a_1410b73c",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 28
      },
      "lineNbr": 133,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:39:25Z",
      "side": 1,
      "message": "nit: this could be a static const array so that it is pre-baked in the program.",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 133,
        "endChar": 74
      },
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f5879c_b2518394",
        "filename": "src/dawn_native/Toggles.h",
        "patchSetId": 28
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:39:25Z",
      "side": 1,
      "message": "nit: comment that this wrapper is necessary to convert enum classes to indices.",
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7da3831_4346a47f",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 28
      },
      "lineNbr": 18,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-25T08:39:25Z",
      "side": 1,
      "message": "nit: I don\u0027t see this used.",
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f39c53_99a07276",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-04-25T18:25:10Z",
      "side": 1,
      "message": "note: We may need to change this if we ever need to test multiple workarounds together. I think it\u0027ll be fine to add that later when/if the need arises.\n\nThe same applies for when we need to test forceDisabledWorkarounds.",
      "revId": "851ea4adefcb63dc52e808ad5610b167f8e0a828",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}