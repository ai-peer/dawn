{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a56bdb41_9ea894a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-22T20:15:53Z",
      "side": 1,
      "message": "overall LGTM with some suggestions\n\nI don\u0027t like that the function returns a bool AND writes a bool\u0026 out. Weird it outputs in two places and would be nice if it\u0027s just one.",
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a62e3685_4c9e36d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-08-23T15:49:26Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e7980d_012dc7ec",
        "filename": "generator/templates/dawn/native/ChainUtils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-22T20:15:53Z",
      "side": 1,
      "message": "this could use a helper\n`DAWN_TRY(PopulateMember\u003c\u003e(result));`",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 92,
        "endChar": 9
      },
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21695549_98c145d5",
        "filename": "generator/templates/dawn/native/ChainUtils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-23T06:50:38Z",
      "side": 1,
      "message": "Hmm to address all the comments as a whole, how would the folds work with `MaybeError`s? Is the suggestion to add like a `bool()` operator on `MaybeError`s where `{} -\u003e true`, and an `\u0026` operator such that a `{} \u0026 error \u003d error`? Then we would do something like an \u0026 fold instead? (Not even sure if this would work yet)",
      "parentUuid": "d7e7980d_012dc7ec",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 92,
        "endChar": 9
      },
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "670a9535_634d32ce",
        "filename": "generator/templates/dawn/native/ChainUtils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-23T15:28:34Z",
      "side": 1,
      "message": "mm you\u0027re right; hard to do I guess",
      "parentUuid": "21695549_98c145d5",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 92,
        "endChar": 9
      },
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f99c87a5_d435fb7e",
        "filename": "generator/templates/dawn/native/ChainUtils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-22T20:15:53Z",
      "side": 1,
      "message": "this could be `return DAWN_VALIDATION_ERROR(...)`",
      "range": {
        "startLine": 95,
        "startChar": 4,
        "endLine": 95,
        "endChar": 17
      },
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc097aa_9873e9e7",
        "filename": "generator/templates/dawn/native/ChainUtils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-22T20:15:53Z",
      "side": 1,
      "message": "this could helper like\n\n`DAWN_TRY(PopulateMember\u003c\u003e(result));`",
      "range": {
        "startLine": 125,
        "startChar": 28,
        "endLine": 130,
        "endChar": 29
      },
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdafa2aa_0268f645",
        "filename": "generator/templates/dawn/native/ChainUtils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-22T20:15:53Z",
      "side": 1,
      "message": "this could be `DAWN_TRY(Unpacker::Unpack(...))`",
      "range": {
        "startLine": 140,
        "startChar": 29,
        "endLine": 140,
        "endChar": 45
      },
      "revId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "7ebcde25e2210ae71ca8fd34ffbcf6465c517b41",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}