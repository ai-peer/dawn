{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6afd2eac_f768976d",
        "filename": "src/tint/lang/core/ir/transform/helper_test.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-28T15:14:53Z",
      "side": 1,
      "message": "This means that all unit tests for all core transforms will allow ref types in the output, which is a lot more permissive then we really want. It\u0027d be great it we could make this a more explicit opt-in, although with the variadic argument list that would require a second overload of `Run()`.",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 62,
        "endChar": 52
      },
      "revId": "726a3cae61f3e15ad97314539ef079416d29af4b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "884f3cde_31d24c61",
        "filename": "src/tint/lang/core/ir/validator.cc",
        "patchSetId": 1
      },
      "lineNbr": 501,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-28T15:14:53Z",
      "side": 1,
      "message": "I don\u0027t think we should ever allow ref types for function parameters or return type, even when the capability is enabled.",
      "range": {
        "startLine": 492,
        "startChar": 0,
        "endLine": 501,
        "endChar": 9
      },
      "revId": "726a3cae61f3e15ad97314539ef079416d29af4b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f13ba83_3abf11ca",
        "filename": "src/tint/lang/core/ir/validator_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 3538,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-28T14:33:19Z",
      "side": 1,
      "message": "We typically use structs for this with an `operator\u003c\u003c` overload to print out a nice name for them. Why use a tuple?",
      "revId": "726a3cae61f3e15ad97314539ef079416d29af4b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9595d977_e78669e1",
        "filename": "src/tint/lang/core/ir/validator_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 3538,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-28T14:48:34Z",
      "side": 1,
      "message": "Because you need a tuple for `testing::Combine`",
      "parentUuid": "8f13ba83_3abf11ca",
      "revId": "726a3cae61f3e15ad97314539ef079416d29af4b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6027e7fd_a390dd7f",
        "filename": "src/tint/lang/core/ir/validator_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 3538,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-28T14:49:23Z",
      "side": 1,
      "message": "(operator \u003c\u003c is specialized by gtest, it\u0027ll print each of the tuple fields with `\u003c\u003c`)",
      "parentUuid": "9595d977_e78669e1",
      "revId": "726a3cae61f3e15ad97314539ef079416d29af4b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}