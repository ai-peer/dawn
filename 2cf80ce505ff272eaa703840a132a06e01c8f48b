{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "43fca588_2660c286",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 415,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-17T09:04:43Z",
      "side": 1,
      "message": "It\u0027d be nice to not have to break the layering here. IIUC the current path is [1a][1b][1c]. Can\u0027t we replace the call at [1c] with `UpdateSubresource1` for the same effect?",
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72c740a9_0787e353",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 415,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-06-17T09:48:49Z",
      "side": 1,
      "message": "+1. We already split the Buffer class into several specialized classes based on its usages. It would be better to avoid conditional logic in base Buffer class again. This logic could be placed in the subclasses instead.\n\nAlso placing the logic in subclasses could help avoiding making `GetD3D11ConstantBuffer` virtual as well.",
      "parentUuid": "43fca588_2660c286",
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ace1104a_78038cfa",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 415,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-17T11:26:23Z",
      "side": 1,
      "message": "\u003e Can\u0027t we replace the call at [1c] with UpdateSubresource1 for the same effect?\n\n\nPer my understanding we can\u0027t do that way. Currently we use `UpdateSubresource1` only for full size update, where we don\u0027t need to care the existing data in the buffer as it will be completely overwritten and useless. In the CL, we can also use it for partial update due to the fact that there is no valid data in the buffer when firstly creating the buffer. This is why I added a new test case in the CL to guard this.\n\nThe information from the validation layer:\n\n```ID3D11DeviceContext::UpdateSubresource1: When a Resource is created with the \nD3D11_BIND_CONSTANT_BUFFER flag, UpdateSubresource1 must pass NULL for pDstBox \n(partial update not allowed) unless the driver supports partial constant buffer \nupdates and CopyFlags is either D3D11_COPY_NO_OVERWRITE or D3D11_COPY_DISCARD. \n```",
      "parentUuid": "72c740a9_0787e353",
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92127d6a_bb66d848",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-06-17T19:20:42Z",
      "side": 1,
      "message": "This method seems to be specifically created for clearing uniform buffers. You already make it virtual, maybe move its implementation or at least this special casing to `GpuOnlyBuffer::ClearInitialResourceInternal` instead? \n\n`mD3d11ConstantBuffer` \u0026 `mD3d11NonConstantBuffer` are only relevant in `GpuOnlyBuffer` currently. I think it\u0027s unnecessary to make their getters virtual, just for this clearing function to know that there is a backing constant buffer in the concrete class.",
      "range": {
        "startLine": 394,
        "startChar": 4,
        "endLine": 424,
        "endChar": 5
      },
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8406b77_c9d97378",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-18T05:13:15Z",
      "side": 1,
      "message": "Thank you, Quyen, for the comment. It makes sense to me.",
      "parentUuid": "92127d6a_bb66d848",
      "range": {
        "startLine": 394,
        "startChar": 4,
        "endLine": 424,
        "endChar": 5
      },
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8821313_7943e901",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-18T10:00:04Z",
      "side": 1,
      "message": "This is much better, thank you.",
      "parentUuid": "b8406b77_c9d97378",
      "range": {
        "startLine": 394,
        "startChar": 4,
        "endLine": 424,
        "endChar": 5
      },
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "016e87bc_779f17fb",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 589,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-17T09:04:43Z",
      "side": 1,
      "message": "[1b]",
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d7d5dbf_0a4d3aa5",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-17T09:04:43Z",
      "side": 1,
      "message": "[1c]",
      "revId": "2cf80ce505ff272eaa703840a132a06e01c8f48b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}