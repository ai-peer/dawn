{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0fcb0a6c_bce8c2f2",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-09T21:34:44Z",
      "side": 1,
      "message": "how important do you think it is to validate it matches? maybe we should simply inherit the debug state of the shared device instead of validating it matches the instance - not sure what the use cases and considerations are",
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e15d881c_f9c37b4a",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-09T21:48:10Z",
      "side": 1,
      "message": "I am going to land a chrome side CL. It tries enabling dawn backend validation layer for dcheck build. And it will detect if the backend validation layer is supported by checking if adapter.CreateDevice() is succeeded. and log the validation level as a crash key. So we can easily find crashes with debug layer. Hope it can help us diagnose device lost issues.\n\n[1] https://chromium-review.googlesource.com/c/chromium/src/+/5018217/6/gpu/command_buffer/service/dawn_context_provider.cc",
      "parentUuid": "0fcb0a6c_bce8c2f2",
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba1bc159_c8622dcb",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-09T22:22:23Z",
      "side": 1,
      "message": "I see - could we instead simply ask to enable validation, and then query whether it was enabled? I\u0027d rather not introduce new ways for device creation to fail.\n\nI would be surprised if you were able to successfully make a device with Partial validation, but not Full. Both should be present in the sdk.",
      "parentUuid": "e15d881c_f9c37b4a",
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcb1b70b_08463e8b",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-10T02:58:12Z",
      "side": 1,
      "message": "Without shared d3d11 device, `Adapter::CreateDevice()` will fail, if sdk is not installed, but client enables backend validation. So I feel it makes sense, `Adapter::CreateDevice()` also fails with shared d3d11 device, if it cannot create `wgpu::Device` with requested backend validation level.\n\nBTW, even it doesn\u0027t fail, we still need call `InitializeDebugLayerFilters()` if the debug layer is enabled with the shared d3d11 device, otherwise dawn will report some errors which should be ignored.",
      "parentUuid": "ba1bc159_c8622dcb",
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "191aec7d_c90da87c",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-10T16:41:14Z",
      "side": 1,
      "message": "For Vulkan/Metal/D3D12 - we try to enable the debug layers, but if we can\u0027t we don\u0027t fail creation.\n\nI think we should do the same for d3d11 and make it so it does not fail if the debug layers are absent\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/BackendD3D12.cpp;l\u003d51?q\u003dEnableDebugLayer%20f:dawn%20f:native\u0026ss\u003dchromium%2Fchromium%2Fsrc\n\nD3D12 does:\n\n        if (SUCCEEDED(functions-\u003ed3d12GetDebugInterface(IID_PPV_ARGS(\u0026debugController)))) {\n            DAWN_ASSERT(debugController !\u003d nullptr);\n            debugController-\u003eEnableDebugLayer();\n            if (instance-\u003eGetBackendValidationLevel() \u003d\u003d BackendValidationLevel::Full) {\n                debugController-\u003eSetEnableGPUBasedValidation(true);\n            }\n        }",
      "parentUuid": "bcb1b70b_08463e8b",
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "030e0995_5c479bbc",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-09T21:34:44Z",
      "side": 1,
      "message": "does Chrome enable debug layers with any filters?\n\nthis is interesting because the debug layer filter state is global. will this cause unexpected changes to the global state?",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 64
      },
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "626eeeff_60a3bf0c",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-09T21:48:10Z",
      "side": 1,
      "message": "ANGLE enables debug layer if dcheck is on and the system has dxsdk installed, and I don\u0027t see ANGLE set any filter.",
      "parentUuid": "030e0995_5c479bbc",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 64
      },
      "revId": "088e3ec55ed8cff3624cc2a14f21479d4bc04747",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}