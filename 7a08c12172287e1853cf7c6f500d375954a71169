{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a0f783f0_17fa62ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-20T07:53:38Z",
      "side": 1,
      "message": "For Kokoro",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31ce9535_9fbd01e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-20T09:24:33Z",
      "side": 1,
      "message": "Please take a look, thanks",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02d594e4_31fbbdcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "Zhaoming or Alan do you have a link to what this extension is needed for?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "896ee7d9_4260a01c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "I only have the Experimental Subgroups Investigation document https://docs.google.com/document/d/1cQ4J30Lr0KxYwh8IeRG9Py2JbpeeZXzRkYWEKy_A67k/",
      "parentUuid": "02d594e4_31fbbdcf",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e7c7703_cb8d69b0",
        "filename": "dawn.json",
        "patchSetId": 6
      },
      "lineNbr": 3297,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: descriptor can be removed. Maybe \"dawn compute pipeline full subgroups\"?",
      "range": {
        "startLine": 3297,
        "startChar": 59,
        "endLine": 3297,
        "endChar": 69
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eba993a0_3fbc24d5",
        "filename": "dawn.json",
        "patchSetId": 6
      },
      "lineNbr": 3297,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e7c7703_cb8d69b0",
      "range": {
        "startLine": 3297,
        "startChar": 59,
        "endLine": 3297,
        "endChar": 69
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aafd14d_d5540223",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: We could use FindInChain here.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a47c4265_2bad53b4",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0aafd14d_d5540223",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9614bab1_7dc7e36c",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: IMHO experimental is an extension thing, but the member and getters could be requireSFullSubgroups (with the s in requires)",
      "range": {
        "startLine": 106,
        "startChar": 11,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b908d8_4786a830",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done, make them `mRequiresFullSubgroups` and `IsFullSubgroupsRequired`.",
      "parentUuid": "9614bab1_7dc7e36c",
      "range": {
        "startLine": 106,
        "startChar": 11,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86d06817_297719c8",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-21T10:16:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7b908d8_4786a830",
      "range": {
        "startLine": 106,
        "startChar": 11,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97952676_76d17f2d",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 222,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "ditto, same as the Vulkan backend.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f858f579_031d0495",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 222,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-22T18:40:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97952676_76d17f2d",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2281050d_01490b19",
        "filename": "src/dawn/native/d3d12/ComputePipelineD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "this validation could be moved in the frontend. Ditto for all the backends.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b25238b0_4f84b2e1",
        "filename": "src/dawn/native/d3d12/ComputePipelineD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "I think we have to do this validation after the shader is actually compiled in backend when initializing pipeline, so that we can get the exact workgroup size in case of using override constants in it.\n\nThe override constants are decided when creating each pipeline instead of creating shader modules, and each backend handle the override constants separately when generating backend shader code right before calling the backend compiling. So this D3D12 validation have to check `compiledShader.workgroupSize`, which is a (new added) member of the return struct of `module-\u003eCompile` above.",
      "parentUuid": "2281050d_01490b19",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c29d17ef_43598803",
        "filename": "src/dawn/native/d3d12/ComputePipelineD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-21T10:16:51Z",
      "side": 1,
      "message": "We already have validation like this in ValidateComputeStageWorkgroupSize so we could rename it to ValidateComputeStageAfterOverridableConstants and stick the additional validation for full subgroups in there. Am I missing something?\n\nAnd the DAWN_INVALID_IF(!device-\u003eHasFeature(Feature::ChromiumExperimentalSubgroups), is already covered by the validation at [1].",
      "parentUuid": "b25238b0_4f84b2e1",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e7a95b2_0e262614",
        "filename": "src/dawn/native/d3d12/ComputePipelineD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-22T18:40:50Z",
      "side": 1,
      "message": "Done.\n\n`fullSubgroups` is set per compute pipeline, and the `ValidateComputeStageWorkgroupSize` is implemented for shader module, so we need to pass the `fullSubgroups` flag all the way down from compute pipeline to shader module.",
      "parentUuid": "c29d17ef_43598803",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "927dacd3_603d99c3",
        "filename": "src/dawn/native/d3d12/ComputePipelineD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-23T09:39:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e7a95b2_0e262614",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "978cdc0a_ca4b145e",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 397,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: I don\u0027t think we need to initialize this at it should be overwritten (and in the error case we don\u0027t return `result`)",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35cd4b8e_4eec3fb3",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 397,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "If we don\u0027t initialize it, trash data will be kept for render pipeline.",
      "parentUuid": "978cdc0a_ca4b145e",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb09ef1d_c44058ff",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 397,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-21T10:16:51Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "35cd4b8e_4eec3fb3",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17470a92_e1aa7071",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "We can just DAWN_TEST_UNSUPPORTED_IF in `SetUp` in this case. We have validation tests for the enable being possible only with the extension in https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp;l\u003d799?q\u003dShaderModuleValidation",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a31323c4_4cea51c1",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "Isn\u0027t subgroups nots supported in this case on the adapter? So that we don\u0027t need to mess with the dxc toggles etc?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39955f72_f1185430",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Removed. Yes, I copy these codes from other tests that was written before we have adapter toggles etc.",
      "parentUuid": "a31323c4_4cea51c1",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f74e7c24_a879c091",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: unused",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e9a060f_0bcd291d",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f74e7c24_a879c091",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "188ca952_925631d8",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 139,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: unused",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2418a6bf_ed58f732",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 139,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "188ca952_925631d8",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7cceb3_74d2e8b5",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "Why skip on the wire?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25be325a_cbe19336",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Removed. Because unexpected error \"Device destroyed before callback\" occurs with wire when I messing up with error scopes in the test...",
      "parentUuid": "0b7cceb3_74d2e8b5",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbb6a9ad_3bfb33ed",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-22T18:40:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25be325a_cbe19336",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a9f19d_4eecbc38",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "That\u0027s already done by the DawnTest fixture, no need to manually check error scopes.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1501b0fa_8c59489a",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 176,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5a9f19d_4eecbc38",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f276fb_1c94d877",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: For \"alignment\" style constraints we use the limit/2. So here cases could be:\n\n```\n {limit, 1, 1},\n {limit * 2, 1, 1}\n {limit, 2, 1},\n {limit, 1, 2},\n {limit / 2, 2, 1},\n ```",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec87393_86592d5b",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done, and add some more.",
      "parentUuid": "f7f276fb_1c94d877",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f98de01_ea8bcd00",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-21T10:16:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bec87393_86592d5b",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0a4c7b9_2946572f",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "That can be done with ASSERT_DEVICE_ERROR around the computePipeline creation.\n\nDitto for the other test lambda.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c595d2d_db51c69a",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0a4c7b9_2946572f",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4960bff_71b126c0",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: no need to check this. ditt ofor the other lambda.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c3d5ae2_435de996",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4960bff_71b126c0",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a2e3405_2f00f7b7",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 279,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "IMHO we could split this into two different tests, most of the code isn\u0027t shared.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd284cfa_7020e2b0",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 279,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a2e3405_2f00f7b7",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bcdaf64_0f200bf8",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 280,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "Could the case list be built with the limits instead of hardcoded?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76de41db_6da6b528",
        "filename": "src/dawn/tests/end2end/ExperimentalSubgroupsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 280,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9bcdaf64_0f200bf8",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "155f17d9_a8b0caa0",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "Can\u0027t `ComputePipelineFullSubgroupValidationTest` inherit from `ComputePipelineValidationTest` and overload `CreateTestDevice`?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9095eba_0b383a55",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "155f17d9_a8b0caa0",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2734ae3_88dd7fec",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "When is this argument not \"main\"?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40ab18a8_6584d21d",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done, always use \"main\" as entry point name in the shader.",
      "parentUuid": "e2734ae3_88dd7fec",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55634573_53d6a282",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "\"can success\" -\u003e \"succeeds\" or \"is valid\"",
      "range": {
        "startLine": 90,
        "startChar": 74,
        "endLine": 90,
        "endChar": 81
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc104e86_ce1afc65",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55634573_53d6a282",
      "range": {
        "startLine": 90,
        "startChar": 74,
        "endLine": 90,
        "endChar": 81
      },
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bdb7da7_92beeaf5",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "nit: no need for a PL, ditto in a bunch of other cases.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b882b6e_c941e654",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bdb7da7_92beeaf5",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0575bd6_e4aad2a3",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "Isn\u0027t that the same tests as `TEST_F(ComputePipelineValidationTest, Success) {` ?\n\nAlso slight preference for grouping the fullSubgroups tests together, even if they come from different fixtures.",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6454385_a98929ff",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Removed, the only different is that this test works on a device that enable `ChromiumExperimentalSubgroups` feature.\n\nHow to group `fullSubgroups` test together, move them into one file having both unittest and E2E tests?",
      "parentUuid": "d0575bd6_e4aad2a3",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2436436_fa0b0861",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-21T10:16:51Z",
      "side": 1,
      "message": "Ah sorry I didn\u0027t mean validation vs end2end, but validation-with-feature-disabled and validation-with-feature-enabled.",
      "parentUuid": "e6454385_a98929ff",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbf879de_e0fb009c",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T15:41:40Z",
      "side": 1,
      "message": "This validation could be moved to the frontend and CreateShaderModule would get an optional argument to specify the workgroup size maybe?",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24b192e4_26056d16",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-11-21T09:59:09Z",
      "side": 1,
      "message": "Workgroup size may use override constants, which are determined when actually creating compute pipeline.",
      "parentUuid": "cbf879de_e0fb009c",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1f54c74_035e0345",
        "filename": "src/dawn/tests/unittests/validation/ComputeValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-23T09:45:47Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "24b192e4_26056d16",
      "revId": "7a08c12172287e1853cf7c6f500d375954a71169",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}