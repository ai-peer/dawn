{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b8c62669_eeb5c46f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000480
      },
      "writtenOn": "2024-02-14T09:03:18Z",
      "side": 1,
      "message": "Hello Loko,\nI\u0027ve noticed you were also working on Future stuff.\n\nI\u0027ve started working on this CL but before I go further, I\u0027d appreciate an early look to know if I\u0027m heading in the right direction. This is new to me and I\u0027m not sure I\u0027m handling it properly.",
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "701738c9_9995780b",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 164,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-16T07:43:00Z",
      "side": 1,
      "message": "Given that this is a new API, I think we don\u0027t need this version and just go straight to the newer `F` version\u0027s signature.",
      "range": {
        "startLine": 158,
        "startChar": 12,
        "endLine": 164,
        "endChar": 14
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7592d1dd_c11d81c9",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 164,
      "author": {
        "id": 1000480
      },
      "writtenOn": "2024-02-16T08:37:43Z",
      "side": 1,
      "message": "When I removed this version, I get this error in `Server::DoAdapterRequestAdapterInfo()`:\n\n```\n../../third_party/dawn/src/dawn/wire/server/ServerAdapter.cpp:42:12: error: no member named \u0027adapterRequestAdapterInfo\u0027 in \u0027DawnProcTable\u0027\n   42 |     mProcs.adapterRequestAdapterInfo(adapter-\u003ehandle,\n      |     ~~~~~~ ^\n\n```\n\nIs this expected?",
      "parentUuid": "701738c9_9995780b",
      "range": {
        "startLine": 158,
        "startChar": 12,
        "endLine": 164,
        "endChar": 14
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d69a5ae_7b811f41",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 164,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-16T09:03:16Z",
      "side": 1,
      "message": "You need to call `adapterRequestAdapterInfoF()` instead if you don\u0027t rename the `F` version. Otherwise, if you rename it, you need to call it with the proper arguments, i.e. with a `WGPURequestAdapterInfoCallbackInfo`.",
      "parentUuid": "7592d1dd_c11d81c9",
      "range": {
        "startLine": 158,
        "startChar": 12,
        "endLine": 164,
        "endChar": 14
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "292abdf1_667c9a17",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 164,
      "author": {
        "id": 1000480
      },
      "writtenOn": "2024-02-16T10:17:09Z",
      "side": 1,
      "message": "What would be the most appropriate callBackInfo.mode to set below?\n\n```\n-    mProcs.adapterRequestAdapterInfo(adapter-\u003ehandle,\n-                                     ForwardToServer\u003c\u0026Server::OnRequestAdapterInfoCallback\u003e,\n-                                     userdata.release());\n+    WGPURequestAdapterInfoCallbackInfo callbackInfo \u003d {};\n+    callbackInfo.mode \u003d WGPUCallbackMode_AllowSpontaneous; // Is this the right mode?\n+    callbackInfo.callback \u003d ForwardToServer\u003c\u0026Server::OnRequestAdapterInfoCallback\u003e;\n+    callbackInfo.userdata \u003d userdata.release();\n+\n+    mProcs.adapterRequestAdapterInfoF(adapter-\u003ehandle, callbackInfo);\n     return WireResult::Success;\n }\n```",
      "parentUuid": "0d69a5ae_7b811f41",
      "range": {
        "startLine": 158,
        "startChar": 12,
        "endLine": 164,
        "endChar": 14
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e75d1dd_f35c3d37",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 164,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-16T20:29:18Z",
      "side": 1,
      "message": "`AllowProcessEvents` would be the correct mode here.",
      "parentUuid": "292abdf1_667c9a17",
      "range": {
        "startLine": 158,
        "startChar": 12,
        "endLine": 164,
        "endChar": 14
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9273a459_0ff24cc7",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 13
      },
      "lineNbr": 316,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-16T07:43:00Z",
      "side": 1,
      "message": "Yea, I think we almost definitely need a `FreeMember` function for this since we are allocating a string.",
      "range": {
        "startLine": 316,
        "startChar": 12,
        "endLine": 316,
        "endChar": 88
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "590c176b_e145ed93",
        "filename": "src/dawn/tests/end2end/AdapterInfoTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-16T07:43:00Z",
      "side": 1,
      "message": "I think we could just skip this entirely if we remove the \"legacy\" entry point entirely. (See comment above)",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6be261f_cef5c9ae",
        "filename": "src/dawn/wire/client/Adapter.cpp",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-16T07:43:00Z",
      "side": 1,
      "message": "I think that this won\u0027t work for non-spontaneous events because the pointer to the strings will be invalidated. We probably need to copy them into this event in order for them to work. (Otherwise the pointer points to the string in the buffer where the command was deserialized which goes away each time we flush the wire.)\n\nAdding some tests in `WireAdapterTests.cpp` will also help to catch this.",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 33
      },
      "revId": "f1e53a74122c7444e0155c06e5c4efdc1e78c1f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}