{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c54f0329_60cebc22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-12-19T15:32:26Z",
      "side": 1,
      "message": "One question about casting to `size_t`, but LGTM.",
      "revId": "18b7a10070e80a28397b36eae7e45a5b3887a915",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d0b33ab_9a5d8b17",
        "filename": "src/tint/sem/array_count.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-12-19T15:32:26Z",
      "side": 1,
      "message": "There are a bunch of places where you cast to `size_t`, but I\u0027m not sure why this is necessary?",
      "range": {
        "startLine": 23,
        "startChar": 11,
        "endLine": 23,
        "endChar": 30
      },
      "revId": "18b7a10070e80a28397b36eae7e45a5b3887a915",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68d99b25_e2aaa5f8",
        "filename": "src/tint/sem/array_count.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-19T16:12:19Z",
      "side": 1,
      "message": "`full_hashcode` is `uint64_t`. You get a warning treated as error on x86 builds without the static cast.",
      "parentUuid": "2d0b33ab_9a5d8b17",
      "range": {
        "startLine": 23,
        "startChar": 11,
        "endLine": 23,
        "endChar": 30
      },
      "revId": "18b7a10070e80a28397b36eae7e45a5b3887a915",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f5b1cc1_6bd14e4c",
        "filename": "src/tint/sem/array_count.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-12-19T16:15:28Z",
      "side": 1,
      "message": "Doesn\u0027t that imply that we must use `uint64_t` as the storage type for `full_hashcode`? And use that type to pass it up constructors?",
      "parentUuid": "68d99b25_e2aaa5f8",
      "range": {
        "startLine": 23,
        "startChar": 11,
        "endLine": 23,
        "endChar": 30
      },
      "revId": "18b7a10070e80a28397b36eae7e45a5b3887a915",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dbb22f1_bed89767",
        "filename": "src/tint/sem/array_count.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-19T16:28:59Z",
      "side": 1,
      "message": "\u003e Doesn\u0027t that imply that we must use `uint64_t` as the storage type for `full_hashcode? `\n\nIt is.\n\n\u003e And use that type to pass it up constructors?\n\nNo. We use `size_t` for `UniqueNode::Hash()`. They\u0027re not the same.",
      "parentUuid": "0f5b1cc1_6bd14e4c",
      "range": {
        "startLine": 23,
        "startChar": 11,
        "endLine": 23,
        "endChar": 30
      },
      "revId": "18b7a10070e80a28397b36eae7e45a5b3887a915",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f80e2ded_e43a9039",
        "filename": "src/tint/sem/array_count.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-12-19T16:35:38Z",
      "side": 1,
      "message": "\u003e No. We use size_t for UniqueNode::Hash(). They\u0027re not the same.\n\nUnderstood. But in that case, for x86 the function returns a 32-bit value. If that\u0027s okay, then shouldn\u0027t we just use `size_t` for `full_hashcode`? If it\u0027s not okay, then `UniqueNode::Hash()` should return `uint64_t`.",
      "parentUuid": "4dbb22f1_bed89767",
      "range": {
        "startLine": 23,
        "startChar": 11,
        "endLine": 23,
        "endChar": 30
      },
      "revId": "18b7a10070e80a28397b36eae7e45a5b3887a915",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}