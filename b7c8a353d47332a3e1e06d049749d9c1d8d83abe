{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "400aab78_b6ea71ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-15T16:34:35Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7d12a50_30f533f9",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-15T16:34:35Z",
      "side": 1,
      "message": "Can we also have a slight modification to DepthSamplingTests to check that not only validation passes, but that performing the action of sampling through an unfilterable-float bind group layout works? The background for this change in the WebGPU spec is that this is supported in D3D12 and Vulkan (though we should still test it) but that in Metal it is technically UB that happens to work and should never be broken because applications depend on it (so it really needs testing).",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f4b8e13_653793eb",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-08-16T00:21:51Z",
      "side": 1,
      "message": "I agree, these tests are crucial.\n\nIt seems `DepthStencilSamplingTest` uses \"auto\" layouts, but I think you can just add new cases where `GenerateSamplingShader` additionally tests `texture_2d\u003cf32\u003e` for depth, and the auto layout algorithm will generate `UnfilterableFloat` bindings. https://gpuweb.github.io/gpuweb/#abstract-opdef-default-pipeline-layout",
      "parentUuid": "a7d12a50_30f533f9",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b10b7eb_fe86b364",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-08-17T15:30:32Z",
      "side": 1,
      "message": "Thanks for the advices. They make sense to me. I will add tests in `DepthStencilSamplingTest`.\n\nTo reuse the existing code as much as possible, maybe adding `TestSamplerType` enum would be good?\n\n```\nenum class TestSamplerType {\n    Depth,\n    UnfilterableFloat,\n    Uint\n};\n\nDoSamplingTest(TestAspect::Depth, CreateSamplingRenderPipeline({TestAspect::Depth}, {TestSamplerType::Depth}, 0), format, kNormalizedTextureValues, tolerance);\nDoSamplingTest(TestAspect::Depth, CreateSamplingRenderPipeline({TestAspect::Depth}, {TestSamplerType::UnfilterableFloat}, 0), format, kNormalizedTextureValues, tolerance);\n\n// In GenerateSamplingShader\nshaderSource \u003c\u003c \"@group(0) @binding(\" \u003c\u003c 2 * index \u003c\u003c \") var tex\" \u003c\u003c index;\nswitch(samplerType) {\n  case TestSamplerType::Depth:\n    shaderSource \u003c\u003c \" : texture_depth_2d;\\n\";\n    break;\n  case TestSamplerType::UnfilterableFloat:\n    shaderSource \u003c\u003c \" : texture_2d\u003cf32\u003e;\\n\";\n    break;\n}\n\nshaderSource \u003c\u003c \"@group(0) @binding(\" \u003c\u003c 2 * index + 1\n             \u003c\u003c \") var\u003cstorage, read_write\u003e result\" \u003c\u003c index\n             \u003c\u003c \" : DepthResult;\\n\";\n\nASSERT(components.size() \u003d\u003d 1 \u0026\u0026 components[0] \u003d\u003d 0);\nshaderBody \u003c\u003c \"\\nresult\" \u003c\u003c index \u003c\u003c \".value \u003d textureLoad(tex\" \u003c\u003c index;\nswitch(samplerType) {\n  case TestSamplerType::Depth:\n    shaderBody \u003c\u003c \", vec2\u003ci32\u003e(0, 0), 0);\";\n    break;\n  case TestSamplerType::UnfilterableFloat:\n    shaderBody \u003c\u003c \", vec2\u003ci32\u003e(0, 0), 0)[0];\";\n    break;\n```",
      "parentUuid": "0f4b8e13_653793eb",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b39fc82_6ad5f94b",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-08-17T23:19:39Z",
      "side": 1,
      "message": "Roughly speaking, yeah, that makes sense. I wonder if you could just add a third value to `TestAspect` so we have Stencil, Depth, DepthAsFloat? I\u0027m not sure.",
      "parentUuid": "6b10b7eb_fe86b364",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e27f576f_ea6d3be2",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-08-18T00:42:08Z",
      "side": 1,
      "message": "I think that would also work, tho `TestAspect::DepthAsFloat` might be a bit confusing because I\u0027m not sure if \"AsFloat\" is an aspect?",
      "parentUuid": "9b39fc82_6ad5f94b",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9f2902_342a1bfc",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-08-18T01:12:45Z",
      "side": 1,
      "message": "True, if doing that maybe the name of `TestAspect` should change too. Whatever you think works well.",
      "parentUuid": "e27f576f_ea6d3be2",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e007aa07_7a60121e",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-08-18T02:35:24Z",
      "side": 1,
      "message": "`TestAspectAndSamplerType`? (I know I\u0027m bad at naming!)\n```\nenum class TestAspectAndSamplerType {\n    DepthAsDepth,\n    DepthAsFloat,\n    StencilAsUint\n};\n```",
      "parentUuid": "9a9f2902_342a1bfc",
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0002639_85aafa7a",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 501,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-15T16:34:35Z",
      "side": 1,
      "message": "typo: Depth16Unorm",
      "range": {
        "startLine": 501,
        "startChar": 17,
        "endLine": 501,
        "endChar": 30
      },
      "revId": "b7c8a353d47332a3e1e06d049749d9c1d8d83abe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}