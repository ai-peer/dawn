{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6cfc8926_11c241f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T01:03:51Z",
      "side": 1,
      "message": "PTAL! Some CTS failures pending https://github.com/gpuweb/cts/pull/611",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06af620e_c6d6dbc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "LGTM",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00cda437_32535ac1",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 4
      },
      "lineNbr": 272,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: We could move this constant up and use it in the helper functions.",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0b4742d_416e52df",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 4
      },
      "lineNbr": 272,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00cda437_32535ac1",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1576aafb_41fa162f",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "I think this work to promote in one direction but not the other (modified entry being unfilterable float and merged entry being float). What do you think of moving this check in [1] instead?\n\nAnd making it bidirectional of course.\n\nAh it works because we never have \"Float\" until we run the logic to look at sampling operations. If we don\u0027t want to make it bidirectional I think it at least requires a good comment, an ASSERT and moving into [1]",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 94,
        "endChar": 0
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fe24279_ef3bfdca",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1576aafb_41fa162f",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 94,
        "endChar": 0
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b13c81_6a084cf5",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "[1]",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b4dc98e_bb162eb4",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2b13c81_6a084cf5",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a526fe3f_dbe95b37",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T01:03:51Z",
      "side": 1,
      "message": "did not make a spec PR for this yet. Texture formats and sample types aren\u0027t specified very much at all right now, so it doesn\u0027t make much sense to write spec for the default. Spec is still using the old language \"component type\". Filed a Dawn spec task crbug.com/dawn/968.\n\nI think it\u0027s probably okay to assume this default for now; I think it is the most-compatible option.",
      "range": {
        "startLine": 246,
        "startChar": 12,
        "endLine": 253,
        "endChar": 13
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "516741f7_4bf28907",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "Makes sense. Thanks for filing the issue.",
      "parentUuid": "a526fe3f_dbe95b37",
      "range": {
        "startLine": 246,
        "startChar": 12,
        "endLine": 253,
        "endChar": 13
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45498fc4_6424a0b0",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 926,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: This code seems like it is the same as [2]",
      "range": {
        "startLine": 907,
        "startChar": 1,
        "endLine": 926,
        "endChar": 17
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ee2774a_e7f73293",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 926,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45498fc4_6424a0b0",
      "range": {
        "startLine": 907,
        "startChar": 1,
        "endLine": 926,
        "endChar": 17
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f2b9d68_1937e7ca",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 958,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "[2]",
      "range": {
        "startLine": 934,
        "startChar": 1,
        "endLine": 958,
        "endChar": 0
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b58e71a7_1c1e6241",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 958,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f2b9d68_1937e7ca",
      "range": {
        "startLine": 934,
        "startChar": 1,
        "endLine": 958,
        "endChar": 0
      },
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81c2195d_f3966cd9",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1031,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "TODO",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe3a5054_7d160246",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1031,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T14:49:28Z",
      "side": 1,
      "message": "?",
      "parentUuid": "81c2195d_f3966cd9",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afedf522_5033be58",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1031,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:54:46Z",
      "side": 1,
      "message": "Ah it was a TODO for my reviewing that I forget to remove, sorry!",
      "parentUuid": "fe3a5054_7d160246",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53bf5e6e_162a18c1",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1059,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "Functional programming in C++ is always so convoluted :( Why don\u0027t we have container.map([](){...})?",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa9089e1_5ed850b7",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1274,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: maybe do an early continue to reduce the control flow?",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e5fee58_12b9bfcd",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1274,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa9089e1_5ed850b7",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6554775c_2305e2b0",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1280,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "This seems like it could be ASSERT(...); if (textureInfo.texture.sampleType \u003d\u003d UnfilterableFloat) return DAWN_VALIDATION_ERROR();",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1c13ec7_eef50ccd",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1280,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6554775c_2305e2b0",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f14bd3d_ff08047b",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "Maybe comment that these mirror the BindingLayout infos except for stuff that\u0027s not deducible from the shader? (isFiltering?)\n\nDo we really need to do this though? It feels like a big duplication just to remove visibility and SamplerType::NonFiltering.",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d178ea43_971c3494",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T14:49:28Z",
      "side": 1,
      "message": "the textureSampleType is an enum, so the alternative would require adding some internal enum value for wgpu::TextureSampleType which I thought is overall just less clear. \n\nI suppose I can reuse the binding layout infos instead of ShaderBufferBindingInfo and ShaderStorageTextureBindingInfo. Those are exactly the same.",
      "parentUuid": "0f14bd3d_ff08047b",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d7c0c6b_6f41eab4",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:54:46Z",
      "side": 1,
      "message": "Gotcha, it makes sense. No opinion on reusing types or not.",
      "parentUuid": "d178ea43_971c3494",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac020f3_75c7e29b",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 446,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: we can advantage of defaults!",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39c78d2e_16853363",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 446,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ac020f3_75c7e29b",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffef6c69_5bcec373",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2407,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: I think we should also test unfiltering -\u003e comparison and comparison -\u003e unfiltering.",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8530e91_93b689ac",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2407,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "did non-fitlering -\u003e comparison.\ncomparison -\u003e unfiltering can\u0027t be tested because the shader does not have filtering/non-filtering samplers",
      "parentUuid": "ffef6c69_5bcec373",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6948e1f2_25324190",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2407,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T18:33:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a8530e91_93b689ac",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c273d66e_7c425a39",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 223,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: on both stages",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9045480_2fa26098",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 223,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c273d66e_7c425a39",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1446f50f_9d6bc268",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "nit: We could also try the other direction (Sample VS and Load FS) to better cover the logic in pipeline layout defaulting.",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c36c272_3b3f8870",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T18:26:45Z",
      "side": 1,
      "message": "textureSample is invalid in the vertex stage",
      "parentUuid": "1446f50f_9d6bc268",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2da9aad1_6070a18c",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T18:33:41Z",
      "side": 1,
      "message": "I forgot about this, however can\u0027t we use textureSampleLevel in VS?",
      "parentUuid": "5c36c272_3b3f8870",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2bf7404_656f9b79",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T19:27:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2da9aad1_6070a18c",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1929497d_579462a8",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 405,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:03:52Z",
      "side": 1,
      "message": "Why did the tests below need to be updated to unfilterable float?",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "394b38d6_98935343",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 405,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-01T14:49:28Z",
      "side": 1,
      "message": "the texture they use in the shader is not sampled, so it defaults to unfilterable float",
      "parentUuid": "1929497d_579462a8",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de699f41_d091c780",
        "filename": "src/tests/unittests/validation/GetBindGroupLayoutValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 405,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-01T14:54:46Z",
      "side": 1,
      "message": "Duh, thanks for the explanation.",
      "parentUuid": "394b38d6_98935343",
      "revId": "eca8f96cf160e3adcf3b5b0a4c2d4ecc26626619",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}