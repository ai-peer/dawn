{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "75d33a7e_b14e3a17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-25T20:54:16Z",
      "side": 1,
      "message": "Nice! Thanks Austin!",
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "357654fd_b216b0c0",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 19
      },
      "lineNbr": 235,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-25T22:48:57Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 235,
        "startChar": 20,
        "endLine": 235,
        "endChar": 45
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a2d240_cc1503ff",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 19
      },
      "lineNbr": 238,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-25T22:20:40Z",
      "side": 1,
      "message": "set `mCurrentAccess` when the `BeginAccess()` is successful and about to return",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 29
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9776709_34bd018e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 19
      },
      "lineNbr": 238,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-25T22:34:01Z",
      "side": 1,
      "message": "this is intended to be this way - the access is \"current\" even if something downstream errors.\n\nThis makes it simpler for the calling code to always BeingAccess + EndAccess without needing to know the error state.",
      "parentUuid": "65a2d240_cc1503ff",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 29
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b28ed5b4_0c19bded",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 19
      },
      "lineNbr": 238,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-25T22:48:57Z",
      "side": 1,
      "message": "It is confusing. Do you mean users are allowed to use the texture without checking the return value of `BeginAccess()`. I feel most users will think calling `EndAccess()` should not be necessary, for a failed `BeginAccess()` call.",
      "parentUuid": "f9776709_34bd018e",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 29
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0152c997_6fab49b9",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 19
      },
      "lineNbr": 238,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-25T23:17:48Z",
      "side": 1,
      "message": "APIBeginAccess returns void\n\nthere\u0027s no synchronous error reporting in WebGPU so the caller doesn\u0027t check if BeginAccess failed or succeeded.",
      "parentUuid": "b28ed5b4_0c19bded",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 29
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef274585_56e4beb0",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 19
      },
      "lineNbr": 238,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-26T00:00:00Z",
      "side": 1,
      "message": "I added some comments now where mCurrentAccess is assigned to help explain",
      "parentUuid": "0152c997_6fab49b9",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 29
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "571d6707_818fecb8",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-25T22:20:40Z",
      "side": 1,
      "message": "Is it really necessary to have one `SharedTextureMemoryState` per `TextureBase`? Can all `TextureBase` share one state?",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 12
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c21613e6_6e47cfc5",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-25T22:34:01Z",
      "side": 1,
      "message": "They need to be different because the fence scope is per texture.\n\nif you:\n\nt1.BeginAccess();\nt2.BeginAccess();\nt2.EndAccess();\nt1.EndAccess();\n\nwe need to track the stack of fences per access\n\nyou can look at the \"AccessStack\" test for more detail",
      "parentUuid": "571d6707_818fecb8",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 12
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "263c2528_d680e112",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-25T22:48:57Z",
      "side": 1,
      "message": "Do we need to support this use case? Look at the code at [1], seems dawn don\u0027t support two accesses?",
      "parentUuid": "c21613e6_6e47cfc5",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 12
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b840700a_881e3f0b",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-25T23:17:48Z",
      "side": 1,
      "message": "Right - we don\u0027t support two valid accesses at once, but eventually we will add support for concurrent access.\nAnd secondly, it\u0027s important to track fences even in the error case so that we don\u0027t drop the wait condition on the floor.\n\nFor example, consider the following scenario.\n\n```\n// use the texture with some system, and get fences to wait on\nwaitFences \u003d UseSomeTexture(texture, {});\n\n// Now use the texture with webgpu, but it is invalid!\ntexture.BeginAccess(waitFences, {someInvalidOption} );\nwaitFences2 \u003d texture.EndAccess();\n\n// WebGPU incorrectly used the texture, so this should be the forwarded wait condition.\n// That is, waitFences2 should \u003d\u003d waitFences.\n// Otherwise, this access will race with the first access.\nUseTextureAgain(texture, waitFences2);\n```",
      "parentUuid": "263c2528_d680e112",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 12
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5af3f673_b56a74f1",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-26T00:57:43Z",
      "side": 1,
      "message": "Just realized the APIBeginAccess() returns void. However I don\u0027t like returning void for fail-able native API. The API will be hard to understand and use, users have to understand all those implementation details for error cases and know how to diagnose the errors. And I think the native API will not be used via wire, right? What is the benefit of it? Does dawn API have to return void and reports errors through callbacks?",
      "parentUuid": "b840700a_881e3f0b",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 12
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fc0198_236e2bf9",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 220,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-25T20:54:16Z",
      "side": 1,
      "message": "nit. Add labels for debugging like in Metal version.",
      "range": {
        "startLine": 220,
        "startChar": 24,
        "endLine": 220,
        "endChar": 65
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c123caec_f5aa901d",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-26T00:00:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18fc0198_236e2bf9",
      "range": {
        "startLine": 220,
        "startChar": 24,
        "endLine": 220,
        "endChar": 65
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91f12efb_4a85325f",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 244,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-25T20:54:16Z",
      "side": 1,
      "message": "nit. Add labels for debugging like in Metal version.",
      "range": {
        "startLine": 244,
        "startChar": 24,
        "endLine": 244,
        "endChar": 65
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e89ab16d_89643918",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 244,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-25T23:17:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91f12efb_4a85325f",
      "range": {
        "startLine": 244,
        "startChar": 24,
        "endLine": 244,
        "endChar": 65
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7834d900_c81f485e",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 311,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-25T20:54:16Z",
      "side": 1,
      "message": "Wondering if this test (and the respective Metal one) could be implemented in the generic test file using `CreateSharedTextureMemory`?",
      "range": {
        "startLine": 286,
        "startChar": 0,
        "endLine": 311,
        "endChar": 1
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ea5ca7b_229ca786",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 457,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-25T20:54:16Z",
      "side": 1,
      "message": "nit. To be more consistent with the Metal tests, we could pass `wgpu::ChainedStructOut otherStruct` instead?",
      "range": {
        "startLine": 457,
        "startChar": 4,
        "endLine": 457,
        "endChar": 58
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2762dac9_72968f1b",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests_win.cpp",
        "patchSetId": 19
      },
      "lineNbr": 457,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-25T23:17:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ea5ca7b_229ca786",
      "range": {
        "startLine": 457,
        "startChar": 4,
        "endLine": 457,
        "endChar": 58
      },
      "revId": "972e4f764fec5e4c8bdd0eb14cd8f8397d67003b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}