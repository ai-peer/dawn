{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "16b8b0c0_84c6f185",
        "filename": "src/dawn/native/d3d11/BufferD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-11T17:03:09Z",
      "side": 1,
      "message": "It seems that we could move these and a lot of other operations onto the child classes instead. The upload buffer doesn\u0027t need any D3D11 buffers, and the staging buffer only needs mD3d11NonConstantBuffer.\n\nOperations like CopyInternal also seem very different between the different buffer types and could be implemented separately for each of them? There\u0027s a lot of conditionals everywhere so it\u0027s a bit hard to know exactly what\u0027s happening but hopefully we can find more lines along which Buffer can be cut.",
      "revId": "68ae11f2c1ddf9e50d78ed48dac02b2ff207a86e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c3de307_76dc6dd3",
        "filename": "src/dawn/native/d3d11/BufferD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-06-11T17:53:56Z",
      "side": 1,
      "message": "I understand. However I would prefer not to use too many virtual methods here considering some of them are only needed by one specific buffer class.\n\nIf we split the constant vs non-constant buffers into separate subclasses, then  when we need to retrieve them during command buffer\u0027s decoding e.g. [1], we would have to either:\n1. Add a virtual method `virtual ... GetD3D11ConstantBuffer()`.\n  - StagingBuffer::GetD3D11ConstantBuffer() will return null.\n  - This seems like it\u0027s unnecessary indirection\u0027s overhead. Virtual method is not free.\n2. Use `static_cast\u003cGPUOnlyBuffer*\u003e(buffer)-\u003eGetD3D11ConstantBuffer()`.\n  - However the 2nd option doesn\u0027t work if we introduce `MappableUniformBuffer` class later. That class only needs constant buffer and doesn\u0027t need non-constant buffer, so we would end up needing a virtual method again or keeping two D3D11Buffer pointers in that class like now.\n\nConsidering buffer bindings are very hot code, it\u0027s always better to reduce as much overhead as possible IMO.\n\nSplitting `CopyInternal` implementation seems to be doable.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp;drc\u003d5a8f2327b3ada2951b0fe356d91ba600a3ed9a84;l\u003d314",
      "parentUuid": "16b8b0c0_84c6f185",
      "revId": "68ae11f2c1ddf9e50d78ed48dac02b2ff207a86e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}