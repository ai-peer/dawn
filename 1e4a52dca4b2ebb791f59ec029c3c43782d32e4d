{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8c98496b_99abe9ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 68
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-23T01:57:13Z",
      "side": 1,
      "message": "not reviewing tonight but quick replies",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b99acfb3_73116235",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 68
      },
      "lineNbr": 1529,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Note I added these... I **think** it\u0027s fine? Needed them for consistency and also to make cases where the device lost happens when we failed requestDevice to be clear.",
      "range": {
        "startLine": 1528,
        "startChar": 12,
        "endLine": 1529,
        "endChar": 51
      },
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62d55632_0ad92ff9",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 68
      },
      "lineNbr": 1529,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-23T01:57:13Z",
      "side": 1,
      "message": "Never thought about that but yeah, if the device lost callback is passed into requestDevice, then we still have to call it on rejection. Seems good.",
      "parentUuid": "b99acfb3_73116235",
      "range": {
        "startLine": 1528,
        "startChar": 12,
        "endLine": 1529,
        "endChar": 51
      },
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f7698b_5a296c97",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 68
      },
      "lineNbr": 1529,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-26T00:17:04Z",
      "side": 1,
      "message": "The fact that it\u0027s redundant is a little annoying, especially because it arises from the API not quite matching JS. We could solve it by:\n- Not calling it when requestDevice fails\n- Undoing https://github.com/webgpu-native/webgpu-headers/issues/173 and going back to SetDeviceLostCallback, BUT address the problem there by doing what JS promises do: call the callback if the device is already lost when you set it. This seems like a pain though.\n\nProbably the best option is to do what you\u0027ve done here, but I wanted to write that down.",
      "parentUuid": "62d55632_0ad92ff9",
      "range": {
        "startLine": 1528,
        "startChar": 12,
        "endLine": 1529,
        "endChar": 51
      },
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8f2943b_c0a3e6e8",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 202,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-26T00:17:04Z",
      "side": 1,
      "message": "nit: `deviceLostEvent`",
      "range": {
        "startLine": 202,
        "startChar": 10,
        "endLine": 202,
        "endChar": 15
      },
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f2ce3e8_3d3c6482",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 203,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "[1]",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a295707b_3f496205",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 275,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "I have a slight preference to have something like the following as it makes it less magic where `mDeviceLostEvent` is set:\n\nstatic Ref\u003cDeviceBase::DeviceLostEvent\u003e DeviceBase::CreateLostEvent(descriptor);\n\nThen at [1], only in the error case, do: `eventManager-\u003eTrackEvent(CreateLostEvent(desc))`.\n\nAnd then in the DeviceBase constructor set `mDeviceLostEvent` to `CreateLostEvent` and track it.",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1c9a8ed_1ec3fc5a",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 275,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "So the one thing I was trying to solve with this was avoiding creating the device lost event in the `DeviceBase` ctor, or at least the tracking of it in the `ctor`. This is particularly important because otherwise, we will have the device lost event preceed the request device event in some cases given we attempt construction of the device and pass it into the ctor of the `RequestDeviceEvent`.\n\nI think this is solvable by exposing a getter on `DeviceBase`, say `Ref\u003cTrackedEvent\u003e GetDeviceLostEvent()` or something like `void TrackDeviceLostEvent()`, and calling those after tracking the `RequestDeviceEvent`, but I wasn\u0027t convinced it was easier to follow that just having one helper that creates both a device and a `DeviceLostEvent` that matches the resulting `Device`. It\u0027s also a bit annoying if we fail `Device::Initialize` because we would\u0027ve already created the `DeviceLostEvent` via the ctor but still return an error which could cause duplicate `DeviceLostEvent`s at [1].\n\nAlso, since the `DeviceLostEvent` needs a ref to the `Device`, we would either need to set `DeviceBase::mDeviceLostEvent` in `DeviceLostEvent` ctor, or set `DeviceLostEvent::mDevice` in `DeviceBase` ctor. Either one will have a bit of magic involved.\n\nNot sure if this is compelling enough, but would be down to chat about it offline a bit more if you think there could be a better way!",
      "parentUuid": "a295707b_3f496205",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "186a6e8c_31e37248",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 68
      },
      "lineNbr": 68,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Is this every used outside of APIRequest/CreateDevice methods? It could be made private.",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d72e44f9_877c91ae",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 68
      },
      "lineNbr": 68,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "186a6e8c_31e37248",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75198e7b_b8bb7c72",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 68
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Shouldn\u0027t this set the `mUncapturedErrorCallbackInfo` to the one in the descriptor if there is one?",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5200244b_6bf4e360",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 68
      },
      "lineNbr": 285,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "I think it does?",
      "parentUuid": "75198e7b_b8bb7c72",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a94f1a_80050916",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 68
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Maybe add a TODO to remove this virtual when we make a mock for the adapter?",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "474e26f0_f2a5941f",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 68
      },
      "lineNbr": 170,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76a94f1a_80050916",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f5be360_060fc360",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 68
      },
      "lineNbr": 509,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "```suggestion\n    // TODO(dawn:1702) Make this private and move the class in the implementation file when we mock the adapter.\n```",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b182c60_96cae124",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 68
      },
      "lineNbr": 509,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f5be360_060fc360",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a5e07e9_99d96b5d",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 68
      },
      "lineNbr": 350,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "```suggestion\n    // Handle the event now if it\u0027s spontaneous and ready.\n```",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b481fd93_11d1816c",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 68
      },
      "lineNbr": 350,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a5e07e9_99d96b5d",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f66de2c_afc8af33",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 68
      },
      "lineNbr": 457,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-26T00:17:04Z",
      "side": 1,
      "message": "I think in a PollEvents call that clears the last progressing events, hasIncompleteEvents will be true and hasProgressingEvents will be true, but it would be more correct to return false. Probably not a huge deal though.",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aba7313f_faada137",
        "filename": "src/dawn/native/EventManager.h",
        "patchSetId": 68
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "nit: Why not `TrackedEvent* event`? We never use the ref. Is it to ensure that the caller holds a ref so the event doesn\u0027t get destroyed during this function call? Can we document that?",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b84fa90c_9d776709",
        "filename": "src/dawn/native/EventManager.h",
        "patchSetId": 68
      },
      "lineNbr": 76,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Actually, I think either would work, I think I just had this because pretty much anywhere that would call this has a `Ref\u003cTrackedEvent\u003e`, not a raw pointer, so it was just easier to pass that directly than explicitly call `Get()` at the call site. WDYT?",
      "parentUuid": "aba7313f_faada137",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a27e7ce_545d86fd",
        "filename": "src/dawn/wire/client/Adapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 94,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-26T00:17:04Z",
      "side": 1,
      "message": "set mDevice \u003d nullptr after releasing",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d8b882_a2e202fb",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 68
      },
      "lineNbr": 183,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Can we detail the reason for this change?",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9018aa29_dd653369",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 68
      },
      "lineNbr": 183,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Ah I think it\u0027s not needed anymore.",
      "parentUuid": "f4d8b882_a2e202fb",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "275e6f95_8496e9de",
        "filename": "src/dawn/wire/server/ObjectStorage.h",
        "patchSetId": 68
      },
      "lineNbr": 149,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Won\u0027t this cause potential crashes when a pipeline ID is reverved for CreatePipelinAsync if the client starts referring to the pipeline before it is done being created (dawn::native would try to use a nullptr pipeline and crash).",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcaecea3_40d8e264",
        "filename": "src/dawn/wire/server/ObjectStorage.h",
        "patchSetId": 68
      },
      "lineNbr": 149,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "IIUC, isn\u0027t it impossible for the user to start referring to the pipeline before it\u0027s created? The user only gets the pipeline when the async callback happens? Or are you suggesting a case where a user is injecting something and doing something bad?",
      "parentUuid": "275e6f95_8496e9de",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2f8fc81_644f1b6b",
        "filename": "src/dawn/wire/server/ObjectStorage.h",
        "patchSetId": 68
      },
      "lineNbr": 149,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-26T00:17:04Z",
      "side": 1,
      "message": "I think the latter. Server has to be resilient to arbitrary inputs because of the IPC security boundary (which we fuzz).",
      "parentUuid": "bcaecea3_40d8e264",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19288091_7912e008",
        "filename": "src/dawn/wire/server/ServerAdapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Another question related to eventManager, can\u0027t the server store it in the KnownAdapter since it is always going to be the ID of the instance for that adapter?",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b17567f_9ca5e406",
        "filename": "src/dawn/wire/server/ServerAdapter.cpp",
        "patchSetId": 68
      },
      "lineNbr": 36,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Hmm that might be possible... But again I\u0027ll defer such change to a follow up since that might be true for multiple future related `Doers` atm...",
      "parentUuid": "19288091_7912e008",
      "revId": "1e4a52dca4b2ebb791f59ec029c3c43782d32e4d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}