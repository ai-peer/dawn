{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c2800e81_da620981",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-05T16:33:40Z",
      "side": 1,
      "message": "LGTM",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3a03bcb_bd48159e",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-05T16:33:40Z",
      "side": 1,
      "message": "nit: Maybe explicitly return that we didn\u0027t find a hash here?",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adab8c40_849bed7e",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-05T17:06:49Z",
      "side": 1,
      "message": "You mean like return a fixed hash? This goes directly into the generated code. I was thinking that it would be easier to check that len(hash) \u003e 0 vs checking hash !\u003d kBadHash or something like that.",
      "parentUuid": "e3a03bcb_bd48159e",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88247b91_a4fe4018",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-05T17:33:42Z",
      "side": 1,
      "message": "I agree empty string is more clear and we can have Dawn print a warning message that cache was disabled if you try to provide a cache interface but there\u0027s no git hash for the key.\n\nYou could add a comment here that no hash is available and Dawn should handle its absence",
      "parentUuid": "adab8c40_849bed7e",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d6596a1_1bcb9430",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-06T07:17:48Z",
      "side": 1,
      "message": "I don\u0027t know that we should disable caching when the hash is \u0027\u0027, that would break WebGPU shader caching in builds from release tarballs. Maybe the Chromium hash is enough in that case? It would be added in the platform for example. WDYT?",
      "parentUuid": "88247b91_a4fe4018",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cba2feb_05ee4cde",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-06T18:51:56Z",
      "side": 1,
      "message": "Hmm, yea that should be fine. Would we want to use it as a direct replacement, or do we want 2 separate fields in that case? (To avoid possible clashes?) And I guess whenever we have a Dawn hash, we just zero out the Chromium hash or make it the same?",
      "parentUuid": "2d6596a1_1bcb9430",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "451fd578_6a512c23",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-06T20:15:12Z",
      "side": 1,
      "message": "chromium hash probably makes sense - especially if there are chromium-side bits of the caching implementation.",
      "parentUuid": "9cba2feb_05ee4cde",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4847eb40_c000d074",
        "filename": "generator/dawn_version_generator.py",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-07T06:45:17Z",
      "side": 1,
      "message": "Maybe we could use the Chromium has in addition to Dawn\u0027s. Either way would work I think.\n\nI don\u0027t know that there would be any Chromium-specific things in the cached blob, since everything goes through Dawn\u0027s interface.",
      "parentUuid": "451fd578_6a512c23",
      "revId": "0fb33e58c75c51717009d57c1be4a0b10804bd68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}