{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "14a7d498_1e281889",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-02T13:28:15Z",
      "side": 1,
      "message": "LGTM overall.",
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e9d2ff_32aecae1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-11-02T19:45:40Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d36cfbfb_ca704d67",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1056,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-11-02T19:45:40Z",
      "side": 1,
      "message": "uNit: looks like the first component could be D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 for symmetry with the other three.",
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92bbc6b0_5c23eac4",
        "filename": "src/include/dawn/EnumClassBitmasks.h",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-30T21:16:33Z",
      "side": 1,
      "message": "note: these are different because one may be a plain enum, and the other might be the result of a bitwise operation i.e. BoolConvertible\u003ctypename LowerBitmask\u003c..\u003e::type\u003e",
      "range": {
        "startLine": 142,
        "startChar": 23,
        "endLine": 142,
        "endChar": 37
      },
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7922e35d_ed769ac1",
        "filename": "src/include/dawn/EnumClassBitmasks.h",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-02T13:28:15Z",
      "side": 1,
      "message": "Oh I didn\u0027t think you\u0027d just make that. Can we have a couple tests for it including the bool convertible thing? Also how come the uses of it don\u0027t need to use wgpu::? (I\u0027m thinking maybe it should be internal to dawn, maybe in Math.h).",
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e5a9c84_57fa6e1f",
        "filename": "src/include/dawn/EnumClassBitmasks.h",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-02T13:28:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "92bbc6b0_5c23eac4",
      "range": {
        "startLine": 142,
        "startChar": 23,
        "endLine": 142,
        "endChar": 37
      },
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d571e346_ad0efb88",
        "filename": "src/include/dawn/EnumClassBitmasks.h",
        "patchSetId": 14
      },
      "lineNbr": 144,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-02T13:28:15Z",
      "side": 1,
      "message": "nit: I should be uppercase.",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 24
      },
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15fb2472_ccbdbc90",
        "filename": "src/tests/end2end/DepthSamplingTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 599,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-11-02T19:45:40Z",
      "side": 1,
      "message": "It seems like there would be a lot of ways for this test to give a false positive, given the duplicated components.\n\nNot sure if that\u0027s fixable (could we do an actual stencil operation to give different values? or is it always going to be 0, 0, 1?), just thought I\u0027d mention it.",
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07a4a509_d36ec02d",
        "filename": "src/tests/end2end/DepthSamplingTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 599,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-03T19:30:06Z",
      "side": 1,
      "message": "it\u0027s always going to be 0, 0, 1 here since the texture view only has a single component that is stencil. Getting components 2, 3, 4 is supposed to return default values of 0,0,1",
      "parentUuid": "15fb2472_ccbdbc90",
      "revId": "7f3097622c90302e012027a2abe4411201a27227",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}