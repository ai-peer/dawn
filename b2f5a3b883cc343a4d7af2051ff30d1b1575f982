{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "534e23ec_c0944971",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T10:12:05Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d457d8be_00482112",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T15:44:31Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb0b8949_dca33ee0",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T10:12:05Z",
      "side": 1,
      "message": "u-nit: mState \u003d TextureState::Destroyed; return ApiObjectBase::DestroyApiObject()?",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff62b875_c41b3097",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-28T17:31:18Z",
      "side": 1,
      "message": "I actually had that initially, but that is problematic for the Vulkan backend implementation because it starts with a check that the state \u003d\u003d OwnedInternal before doing anything. (So textures were leaking.)\n\nThis is also more consistent with what is happening in reality in case we have any other state checking before destroying.",
      "parentUuid": "eb0b8949_dca33ee0",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23617418_8ec442d9",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T18:28:20Z",
      "side": 1,
      "message": "can you add a comment explaining this?",
      "parentUuid": "ff62b875_c41b3097",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45051eb2_707bb223",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-28T22:57:36Z",
      "side": 1,
      "message": "Done!",
      "parentUuid": "23617418_8ec442d9",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfd10176_f4da984d",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-29T09:22:55Z",
      "side": 1,
      "message": "Heh, that\u0027s another place where we have non-obvious special casing because of the split between DestroyApiObject / DestroyApiObjectImpl. The frontend shouldn\u0027t care about things in the backend ideally and right now, it does. If the backends where the ones calling the frontend, it could control when the destruction happens and the frontend wouldn\u0027t care.",
      "parentUuid": "45051eb2_707bb223",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af81805d_ef050064",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-29T17:24:37Z",
      "side": 1,
      "message": "Hmm, I\u0027m assuming the other \"special\" casing that\u0027s referred here is the unmap part in Buffer? (if not which part is being referred to?) But I disagree (a bit) here.\n\nI think that the problem we see here is actually because we have a \"Destroyed\" enum in state. Given that we are using whether the object is in a list to indicate that, we should only ever need the state to be mapped/unmapped. Then since we unmap (and set the enum to unmap) before we destroy buffers, we could eliminate this dependency. This is true for a couple other classes that have a state member as well. (I can have a follow up change to remove all of those?)\n\nAs for the unmap logic, yes I think it is a bit more of a special case, but that doesn\u0027t have to do with caring about the backend. Buffers are just meant to be unmapped before being destroyed (regardless of backend), hence we move the logic up to BufferBase.\n\nUltimately, the design is to minimize redundant code in the backends, and I don\u0027t actually think they care much about the backend implementation? Maybe for clarity, I am defining frontend to be the *Base objects and upwards, and the backend to be the `final` implementations, i.e. in vulkan/, metal/, d3d12, etc.",
      "parentUuid": "bfd10176_f4da984d",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}