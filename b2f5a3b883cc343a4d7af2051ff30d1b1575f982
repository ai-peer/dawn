{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "534e23ec_c0944971",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T10:12:05Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d457d8be_00482112",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T15:44:31Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb0b8949_dca33ee0",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T10:12:05Z",
      "side": 1,
      "message": "u-nit: mState \u003d TextureState::Destroyed; return ApiObjectBase::DestroyApiObject()?",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff62b875_c41b3097",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-28T17:31:18Z",
      "side": 1,
      "message": "I actually had that initially, but that is problematic for the Vulkan backend implementation because it starts with a check that the state \u003d\u003d OwnedInternal before doing anything. (So textures were leaking.)\n\nThis is also more consistent with what is happening in reality in case we have any other state checking before destroying.",
      "parentUuid": "eb0b8949_dca33ee0",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23617418_8ec442d9",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T18:28:20Z",
      "side": 1,
      "message": "can you add a comment explaining this?",
      "parentUuid": "ff62b875_c41b3097",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45051eb2_707bb223",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-28T22:57:36Z",
      "side": 1,
      "message": "Done!",
      "parentUuid": "23617418_8ec442d9",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfd10176_f4da984d",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-29T09:22:55Z",
      "side": 1,
      "message": "Heh, that\u0027s another place where we have non-obvious special casing because of the split between DestroyApiObject / DestroyApiObjectImpl. The frontend shouldn\u0027t care about things in the backend ideally and right now, it does. If the backends where the ones calling the frontend, it could control when the destruction happens and the frontend wouldn\u0027t care.",
      "parentUuid": "45051eb2_707bb223",
      "revId": "b2f5a3b883cc343a4d7af2051ff30d1b1575f982",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}