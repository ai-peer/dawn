{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1e3f769f_efe29a19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-01-09T20:27:17Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08cde8af_19aae94c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T12:59:19Z",
      "side": 1,
      "message": "Fantastic job, Antonio. A few minor requests for changes.",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84452de3_4fad2de2",
        "filename": "src/tint/lang/spirv/reader/ast_lower/decompose_strided_array_test.cc",
        "patchSetId": 19
      },
      "lineNbr": 147,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T12:59:19Z",
      "side": 1,
      "message": "`arr` (broken also in the above code)",
      "range": {
        "startLine": 147,
        "startChar": 45,
        "endLine": 147,
        "endChar": 46
      },
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40cbc37f_1f3763e0",
        "filename": "src/tint/lang/spirv/reader/ast_lower/decompose_strided_array_test.cc",
        "patchSetId": 19
      },
      "lineNbr": 147,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-01-10T16:34:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84452de3_4fad2de2",
      "range": {
        "startLine": 147,
        "startChar": 45,
        "endLine": 147,
        "endChar": 46
      },
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d42861c_83081eb3",
        "filename": "src/tint/lang/spirv/writer/ast_raise/var_for_dynamic_index_test.cc",
        "patchSetId": 19
      },
      "lineNbr": 472,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T12:59:19Z",
      "side": 1,
      "message": "Please can we have a test using the ptr-sugar that isn\u0027t a no-op for the transform?",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "474be7fd_5849e07e",
        "filename": "src/tint/lang/spirv/writer/ast_raise/var_for_dynamic_index_test.cc",
        "patchSetId": 19
      },
      "lineNbr": 472,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-01-10T16:34:53Z",
      "side": 1,
      "message": "We can\u0027t, actually, because this transform only does something when the object of the index-accessor expression is a matrix/array _value_, and not a ref to one. For example, it works when indexing a `let` of type array, but not on a `var` of type array. Since we can\u0027t take a pointer to a let, there\u0027s no case where this transform will do anything with a ptr-sugar. This is why my new tests are on var arrays, and the result is a no-op.",
      "parentUuid": "7d42861c_83081eb3",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "600e66d2_ab515651",
        "filename": "src/tint/lang/spirv/writer/ast_raise/var_for_dynamic_index_test.cc",
        "patchSetId": 19
      },
      "lineNbr": 472,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T17:03:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "474be7fd_5849e07e",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f7c802_6d0900a6",
        "filename": "src/tint/lang/wgsl/ast/transform/remove_phonies.cc",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T12:59:19Z",
      "side": 1,
      "message": "This change doesn\u0027t appear (at first glance) related to ptr sugar. Move to a separate CL?",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94994164_cb7616a8",
        "filename": "src/tint/lang/wgsl/ast/transform/remove_phonies.cc",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-01-10T16:34:53Z",
      "side": 1,
      "message": "I recall doing this when trying to understand whether the `UnwrapRef()` should be `UnwrapPtrOrRef()`. It\u0027s does not need to be because we\u0027re dealing with CallExpressions, which cannot be accessor expressions, and my change here just made that obvious. So yeah, not necessary, but makes the code clearer and is slightly more optimal (going through `sem.Get` rather than `sem.GetVal`). Do you still want me to revert in this CL?",
      "parentUuid": "f5f7c802_6d0900a6",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0073a30b_a2abf803",
        "filename": "src/tint/lang/wgsl/ast/transform/remove_phonies.cc",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T17:03:43Z",
      "side": 1,
      "message": "I think the code change is good, but I\u0027d prefer it pulled out to a separate change if it isn\u0027t needed as part of this CL. This CL is huge, and I care about `git blame` being useful.",
      "parentUuid": "94994164_cb7616a8",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9dac05_07d24538",
        "filename": "src/tint/lang/wgsl/ast/transform/simplify_pointers.cc",
        "patchSetId": 19
      },
      "lineNbr": 168,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2024-01-10T12:52:52Z",
      "side": 1,
      "message": "I\u0027m not keen on this function becoming stateful. There\u0027s now an undocumented requirement that `Reduce()` must be called with all outer expressions before inner. This is currently the case, but this took me 15 minutes of head-scratching to figure out how this works.\n\nYou can revert this chunk of code (along with the `const` on the function), and add:\n\n```\n,\n                [\u0026](const AccessorExpression* accessor) {\n                    if (auto* a \u003d ctx.src-\u003eSem().Get\u003csem::ValueExpression\u003e(accessor-\u003eobject)) {\n                        if (a-\u003eType()-\u003eIs\u003ccore::type::Pointer\u003e()) {\n                            // Object is an implicitly dereferenced pointer (i.e. syntax sugar).\n                            is_accessor_object_pointer.Add(accessor-\u003eobject);\n                        }\n                    }\n                }\n```\n\nTo [1]. This gives you the same behaviour, but you\u0027re then keeping this a pure-function, and we\u0027re collecting the info in the pre-pass.",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 168,
        "endChar": 0
      },
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc856101_a4db9bde",
        "filename": "src/tint/lang/wgsl/ast/transform/simplify_pointers.cc",
        "patchSetId": 19
      },
      "lineNbr": 168,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-01-10T16:34:53Z",
      "side": 1,
      "message": "That is MUCH better, thank you!",
      "parentUuid": "9a9dac05_07d24538",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 168,
        "endChar": 0
      },
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a734d7f6_c664026c",
        "filename": "src/tint/lang/wgsl/ast/transform/simplify_pointers.cc",
        "patchSetId": 19
      },
      "lineNbr": 168,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-10T17:03:43Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "cc856101_a4db9bde",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 168,
        "endChar": 0
      },
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c47f8639_952ba8c7",
        "filename": "src/tint/lang/wgsl/ast/transform/simplify_pointers.cc",
        "patchSetId": 19
      },
      "lineNbr": 259,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2024-01-10T12:52:52Z",
      "side": 1,
      "message": "[1]",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42f6e06d_94891ceb",
        "filename": "src/tint/lang/wgsl/ast/transform/simplify_pointers.cc",
        "patchSetId": 19
      },
      "lineNbr": 259,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-01-10T16:34:53Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "c47f8639_952ba8c7",
      "revId": "ae360529a9d7030bdbe2a608d60817bc72492821",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}