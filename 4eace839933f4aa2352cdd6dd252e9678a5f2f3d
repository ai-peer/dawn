{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9ab712c9_cc702a3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-08T18:45:46Z",
      "side": 1,
      "message": "PTAL. Ben requested this helper function in code review and it does simplify the duplicated logic in the transform and SPIR-V writer, but it\u0027s slightly annoying that you have to pass it a `type::Manager` to create the pointer types.",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbbcf565_c68f56b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-08T19:37:19Z",
      "side": 1,
      "message": "I was attempting to solve this with a more general helper on `type::Type`, but my thing doesn\u0027t return the list of types in the chain:\nhttps://dawn-review.googlesource.com/c/dawn/+/136603",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe776e31_068f418e",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T19:03:27Z",
      "side": 1,
      "message": "Would it be worthwhile to do a `Resize(Indices().Length())`?",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad85caeb_498dcde3",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-08T19:38:51Z",
      "side": 1,
      "message": "Or use `utils::Transform`, which does the resize for you.",
      "parentUuid": "fe776e31_068f418e",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ac8c9a1_68710566",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T19:03:27Z",
      "side": 1,
      "message": "Vector?",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aef688fa_570a6377",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T19:03:27Z",
      "side": 1,
      "message": "It seems a little weird that this also _creates_ types in that it wraps things in a pointer. I don\u0027t think I\u0027d expect that behaviour?",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "163d6d7c_5150821a",
        "filename": "src/tint/ir/access_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T19:03:27Z",
      "side": 1,
      "message": "Add a Vector into the tests?",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4ad561b_ddc1350e",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T19:03:27Z",
      "side": 1,
      "message": "nit `Is\u003cConstant\u003e` as we don\u0027t use the pointer?",
      "revId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MIN"],"failingAtoms":["label:Kokoro=MAX"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4eace839933f4aa2352cdd6dd252e9678a5f2f3d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}