{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "539f9e5c_cbae156f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-05T13:22:17Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dc6d84f_7558f40d",
        "filename": "src/tint/utils/block_allocator.h",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:14:18Z",
      "side": 1,
      "message": "I think you mean `reinterpret_cast`?",
      "range": {
        "startLine": 236,
        "startChar": 40,
        "endLine": 236,
        "endChar": 51
      },
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4e166d2_c6dfbf17",
        "filename": "src/tint/utils/block_allocator.h",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-05T13:22:17Z",
      "side": 1,
      "message": "You can static cast via `void*`, which is what we were doing before.",
      "parentUuid": "9dc6d84f_7558f40d",
      "range": {
        "startLine": 236,
        "startChar": 40,
        "endLine": 236,
        "endChar": 51
      },
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ab714cf_172b3255",
        "filename": "src/tint/utils/block_allocator.h",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:23:26Z",
      "side": 1,
      "message": "The before code uses a reinterpret_cast, so I\u0027m confused.",
      "parentUuid": "b4e166d2_c6dfbf17",
      "range": {
        "startLine": 236,
        "startChar": 40,
        "endLine": 236,
        "endChar": 51
      },
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6129288d_e7d06b6a",
        "filename": "src/tint/utils/block_allocator.h",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-05-05T13:25:30Z",
      "side": 1,
      "message": "Ah, okay, I had tried going via `void*` as a work-around for the CFI check, but no dice.",
      "parentUuid": "8ab714cf_172b3255",
      "range": {
        "startLine": 236,
        "startChar": 40,
        "endLine": 236,
        "endChar": 51
      },
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58250670_4372f45f",
        "filename": "src/tint/utils/block_allocator.h",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-05T13:14:18Z",
      "side": 1,
      "message": "It has always been UB to reinterpret_cast between unrelated pointer types in C++, but only recently have some compilers started complaining or optimizing these, so the modern way is to use memcpy as you do here. In fact, if you read the cppreference page on reinterpret_cast, it\u0027s quite complex in which scenarios it can actually safely be used: https://en.cppreference.com/w/cpp/language/reinterpret_cast\n\nIn C++20, we can use std::bit_cast: https://en.cppreference.com/w/cpp/numeric/bit_cast",
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f55ffe0_94c706ce",
        "filename": "src/tint/utils/block_allocator.h",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-05T13:22:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "58250670_4372f45f",
      "revId": "f7737b6d913634cd0a4ff869654811109664065d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "f7737b6d913634cd0a4ff869654811109664065d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "f7737b6d913634cd0a4ff869654811109664065d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}