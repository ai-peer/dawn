{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d568bf82_326c4919",
        "filename": "src/tint/writer/msl/ir/generator_impl_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-26T08:48:09Z",
      "side": 1,
      "message": "As discussed on SPIR-V writer changes, I\u0027d lean away from exposing the individual methods for unit testing. Testing the methods in isolation rarely accurately represent the production behaviour - they exclude backend transforms and often require state preambles which are difficult to maintain.\nTesting just `Generate()` does produce more output, but the additional surrounding code can highlight bugs, and more importantly, the whole output can usually be validated.\n\nI\u0027ll approve what you have, but I\u0027d like us to move away from this pattern.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 42
      },
      "revId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d58b6b69_773b7339",
        "filename": "src/tint/writer/msl/ir/generator_impl_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-26T11:48:45Z",
      "side": 1,
      "message": "The problem is, you need enough support to run through Generate, which currently doesn\u0027t exist. (This `EmitFunction` is really just a stub to make sure things work).\n\nFor testing `EmitType` and `EmitConstant` it\u0027s a lot simpler to call directly into the emit function.",
      "parentUuid": "d568bf82_326c4919",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 42
      },
      "revId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0bf209d_31c639ad",
        "filename": "src/tint/writer/msl/ir/generator_impl_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-26T13:14:42Z",
      "side": 1,
      "message": "\u003e The problem is, you need enough support to run through Generate, which currently doesn\u0027t exist. (This EmitFunction is really just a stub to make sure things work).\n\nSure - I\u0027m not asking for changes until you have enough in place to use Generate.\n\n\u003e For testing EmitType and EmitConstant it\u0027s a lot simpler to call directly into the emit function.\n\nI appreciate that, but both type and constant emission have failed MSL compilation before in the past, and our unit tests didn\u0027t catch this because they just check for a string literal that is effectively mirrored in the implementation. Emitting a variable declaration is not a huge amount of additional test code (once supported), and ensuring that the emitted MSL is always parsable without error would be a more robust way to build up new writers.",
      "parentUuid": "d58b6b69_773b7339",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 42
      },
      "revId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c901131_ab41466f",
        "filename": "src/tint/writer/msl/ir/generator_impl_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-26T13:32:32Z",
      "side": 1,
      "message": "I don\u0027t think we want to run the MSL compiler after every unit test, that would be way to slow. We should have integration tests which do run the compiler which get run on CQ.",
      "parentUuid": "c0bf209d_31c639ad",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 42
      },
      "revId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "01829ac0a7b72427613c581cd6461db6713d24d7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}