{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f0b348c4_062dbfe0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002561
      },
      "writtenOn": "2024-05-10T09:58:12Z",
      "side": 1,
      "message": "PTAL\nWe are trying to fix a regression with MotionMark.\nhttps://pinpoint-dot-chromeperf.appspot.com/job/12c5571a010000\nBy counting the time raw_ptr ref count manipulation occurs in the benchmarks we identified the hotspots.\nhttps://docs.google.com/spreadsheets/d/1gZYdSd_rnmQVNS6rujxwNz0ujpYT2Ty3WEQ6GR8hwiI/edit\nAnd this CL excludes them from raw_ptr.",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c14e72fe_2244ff08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T15:43:23Z",
      "side": 1,
      "message": "It\u0027s good to know that all these pointers are \"hot\" when running MotionMark, but what gains do we get rewriting this? Dawn is pretty security-sensitive so it would be great to keep the raw_ptr. We could also try to optimize the hotspots another way potentially.",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ee0fd2b_fabfe91b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002561
      },
      "writtenOn": "2024-05-13T03:04:07Z",
      "side": 1,
      "message": "We would like as much BRP coverage as possible but we are currently blocked launching BRP to the renderer process for benchmark performance. And so we are currently kind of doing whatever we can that might help the benchmark.\n\nIs there ones that you think are important we keep raw_ptr?\n\nThese ones are definite hot spots so I would like to unrewrite them.\nGuard::mObj\nCommandAllocator::mCurrentPtr\nLinkedListIterator::current_\nLinkedListIterator::next_",
      "parentUuid": "c14e72fe_2244ff08",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "106f27ed_eafa6293",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1003911
      },
      "writtenOn": "2024-05-13T07:21:30Z",
      "side": 1,
      "message": "Yes, we\u0027d love to protect as many pointers as we can, but it\u0027s not like we have too much choice here. Metrics owners (incl. benchmark owners) put their foot down to ensure that the performance overhead is minimal. The rule that we, MiraclePtr team, have been always following is \"rewrite everything (on heap) unless it degrades perf\" and this CL follows the spirit of that rule.",
      "parentUuid": "9ee0fd2b_fabfe91b",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d997368_0513fec2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-13T09:39:18Z",
      "side": 1,
      "message": "Thank you for the explanation, LGTM! (ideally with the exclusion removed for Buffer.h)",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f328b3fa_906d001c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-13T09:39:18Z",
      "side": 1,
      "message": "You mention being blocked on launching BRP in the renderer process, but Dawn is in the GPU process. I assume that you\u0027re trying to launch in the GPU process?\n\nThank you for the explanation. I think all of the exclusion here are very safe by construction of Dawn, the only one that\u0027s a bit weird is Buffer::mUserdata which doesn\u0027t seem like it would be a hot spot.",
      "parentUuid": "106f27ed_eafa6293",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c22be2f0_2381dbd3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002561
      },
      "writtenOn": "2024-05-13T11:07:36Z",
      "side": 1,
      "message": "Thanks. We do have BRP enabled for the GPU process already but we caught this performance regression while doing work for \"BRP in the renderer process\".\n\nOur tool did show `raw_ptr\u003cstd::variant\u003cdawn::native::BufferBase *, wgpu::BufferMapAsyncStatus\u003e\u003e` getting assigned a lot for the \"Canvas Arc\" sub-benchmark but it wasn\u0027t at the very top so I have reverted the change.",
      "parentUuid": "f328b3fa_906d001c",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09967efe_4cd04518",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-13T11:18:36Z",
      "side": 1,
      "message": "Ah yes, this is a new code path taken by the GPU process as we are finching using Skia-Graphite-Dawn on macOS instead of Skia-Ganesh.",
      "parentUuid": "c22be2f0_2381dbd3",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25c8222d_a5d848a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1003911
      },
      "writtenOn": "2024-05-15T01:32:05Z",
      "side": 1,
      "message": "\u003e You mention being blocked on launching BRP in the renderer process, but Dawn is in the GPU process. I assume that you\u0027re trying to launch in the GPU process?\n\nThe story is a tad complicated. We were told to use MotionMork as a gatekeeper on whether to ship to Renderer (we already shipped to GPU a while back). As long as the benchmark shows non-zero regression, it takes quite a bit of effort to determine whether it comes from GPU or Renderer. Since we were asked to run the benchmark continuously, even after we ship, we can\u0027t afford non-automated steps.\n\nHaving said that, a tradeoff can be considered if there is a good reason for it. I started an email thread about it, please share your opinion there.\n\n\u003e Ah yes, this is a new code path taken by the GPU process as we are finching using Skia-Graphite-Dawn on macOS instead of Skia-Ganesh\n\nWhat\u0027s the final verdict, should this be raw_ptr or T* then?",
      "parentUuid": "09967efe_4cd04518",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a36448e3_7b714ba7",
        "filename": "src/dawn/common/LinkedList.h",
        "patchSetId": 9
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-13T09:39:18Z",
      "side": 1,
      "message": "In general it would be nice to explain why the pointers are safe to exclude and why they are performance sensitive, but the Dawn team can take care of that.",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49d86898_77b13597",
        "filename": "src/dawn/common/MutexProtected.h",
        "patchSetId": 9
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-13T09:39:18Z",
      "side": 1,
      "message": "We could make this class inherit from both NonMovable and StackAllocated similar to InternalUsageScope in src/dawn/native/CommandEncoder.h this would make it fairly clear that the pointer cannot outlive the MutexProtected and we could update the comment with that reasoning (so it\u0027s not just a performance thing). But the Dawn team can take care of doing that change.",
      "revId": "ea3323361c556fc20358d788adfa87f14410413c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}