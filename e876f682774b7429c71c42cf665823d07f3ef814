{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc4cc451_7bcdf0d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "The direction is looking great. Happy to defer changes or add TODO for the larger things (folding the Vulkan backend transform, splitting BGL data into frontend / backend)",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7cbc9a_44ce14d5",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 297,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "should have ValidateSingleSType to check that chained struct either does not exist, or is ExternalTextureBindingEntry",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4826c13_7bdc39cc",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 297,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "ValidateSingleSType is called inside ValidateExternalTextureBinding",
      "parentUuid": "5a7cbc9a_44ce14d5",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d007537e_8881863c",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 297,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T20:13:13Z",
      "side": 1,
      "message": "Marking resolved. Lmk if there\u0027s an issue.",
      "parentUuid": "f4826c13_7bdc39cc",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7882227d_7462f89d",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 389,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "Corentin recently landed the change to validate that the binding number is \u003c 2^16. Instead of searching for a hole, can we simply use large bindings numbers greater than the limit we expose to developers?",
      "range": {
        "startLine": 387,
        "startChar": 44,
        "endLine": 389,
        "endChar": 36
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6473f913_1bad1f8e",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 389,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T00:57:00Z",
      "side": 1,
      "message": "I plan to do this. Corentin commented this elsewhere - so I\u0027m going to resolve this and use the other comment to track.",
      "parentUuid": "7882227d_7462f89d",
      "range": {
        "startLine": 387,
        "startChar": 44,
        "endLine": 389,
        "endChar": 36
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63121112_eba9df85",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 402,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "u-nit: this conversion from BindingNumber to BindingIndex could be precomputed in the layout.\n\nThe transforms requiring either BindingNumber of BindingIndex make this a bit annoying though so feel free to postpone to when the Vulkan backend is handled.",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26f91518_1608b162",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 24
      },
      "lineNbr": 402,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T20:13:13Z",
      "side": 1,
      "message": "Added TODO at BindGroupLayout.h:L35",
      "parentUuid": "63121112_eba9df85",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "251b0558_1df12e4b",
        "filename": "src/dawn/native/BindGroup.h",
        "patchSetId": 24
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "I think this needs to be Ref\u003cExternalTextureBase\u003e. We store to it from the descriptor.\n\nwe should be able to make a test that creates the bind group, drops the ExternalTexture ref, and then does not induce a use-after-free crash",
      "range": {
        "startLine": 89,
        "startChar": 20,
        "endLine": 89,
        "endChar": 41
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de33087b_830e1b9d",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "nit: we should use a pointers since we modify this.",
      "range": {
        "startLine": 179,
        "startChar": 35,
        "endLine": 179,
        "endChar": 48
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "593c2713_dcdc51b6",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 179,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de33087b_830e1b9d",
      "range": {
        "startLine": 179,
        "startChar": 35,
        "endLine": 179,
        "endChar": 48
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f54287bb_7a42fe4c",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-08T09:29:55Z",
      "side": 1,
      "message": "Same for bindingsCount?",
      "parentUuid": "593c2713_dcdc51b6",
      "range": {
        "startLine": 179,
        "startChar": 35,
        "endLine": 179,
        "endChar": 48
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05fc2e9e_6a42bd41",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 179,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T20:13:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f54287bb_7a42fe4c",
      "range": {
        "startLine": 179,
        "startChar": 35,
        "endLine": 179,
        "endChar": 48
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07587dd2_9c618748",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 197,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "[1] Do we run into issues if we don\u0027t do this? The validation for the binding counts is done in ValidateBindGroupLayout prior to the BindGroupLayout constructor, so everything we do here is to help the frontend or backends allocate stuff (and we need to know what is the actual number of bindings, not what the spec mandates).",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdcf924d_597a5ea9",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 197,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T00:57:00Z",
      "side": 1,
      "message": "We do fail binding count validation tests if we remove these lines. When I looked for calls of GetBindingCountInfo() I found it was only being used for validation so I thought this would be fine.\n\nAn alternative approach would be modifying the validation to account for unimplemented aspects of external texture. For example, the sampled texture binding count would be something like: (numSampledTextures + (numExternalTextures * kUnimplementedSampledTexturesPerExternalTexture)",
      "parentUuid": "07587dd2_9c618748",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90e046b3_04ab5673",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 469,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "nit: sortedBindings \u003d ExtractAndExpandBglEntries(...); ?",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa546419_dd241602",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 24
      },
      "lineNbr": 469,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90e046b3_04ab5673",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda9faef_dba71644",
        "filename": "src/dawn/native/BindGroupLayout.h",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "nit: (sorry I used the name typedef), we can use C++ type aliases: using X \u003d Y;",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87afbb6d_36b877b1",
        "filename": "src/dawn/native/BindGroupLayout.h",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eda9faef_dba71644",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a016da0_3a39227b",
        "filename": "src/dawn/native/ExternalTexture.h",
        "patchSetId": 24
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "nit: return raw BufferBase*\nthe caller can add a ref if they want to",
      "range": {
        "startLine": 46,
        "startChar": 8,
        "endLine": 46,
        "endChar": 23
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55df38aa_d22c2e52",
        "filename": "src/dawn/native/ExternalTexture.h",
        "patchSetId": 24
      },
      "lineNbr": 46,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a016da0_3a39227b",
      "range": {
        "startLine": 46,
        "startChar": 8,
        "endLine": 46,
        "endChar": 23
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef08955e_80d965d1",
        "filename": "src/dawn/native/PassResourceUsageTracker.cpp",
        "patchSetId": 24
      },
      "lineNbr": 136,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "Since we stopped adding the views to internal textures, we need to ensure that ExternalTexture::ValidateCanUseInSubmit checks that the planes can be used in submits. Otherwise it is possible to create an ExternalTexture, destroy its plane, and still use it in a submit.\n\nAlso can we have some validation tests for that?",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5d5f764_937fbdd1",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 24
      },
      "lineNbr": 460,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "nit: add the TODO here as well. but I think we can still be slightly more descriptive and say that the binding type in the shader was external, but the layout was not\n\n// TODO(dawn:563): Provide info about the binding types.",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "117b3e31_b94cdc7a",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 24
      },
      "lineNbr": 460,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T20:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5d5f764_937fbdd1",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ba6d08_d328090f",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 24
      },
      "lineNbr": 484,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "nit: I think we can be more descriptive here and say that the binding type in the layout was external, but the type in shader was not",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95a7b7f0_9f825b32",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 24
      },
      "lineNbr": 484,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T20:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67ba6d08_d328090f",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9a503e9_4d4efc43",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 24
      },
      "lineNbr": 1290,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "can this method be static?",
      "range": {
        "startLine": 1290,
        "startChar": 0,
        "endLine": 1290,
        "endChar": 55
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6e975d3_58ec572d",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 24
      },
      "lineNbr": 1290,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9a503e9_4d4efc43",
      "range": {
        "startLine": 1290,
        "startChar": 0,
        "endLine": 1290,
        "endChar": 55
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf8ed73_8cca3f86",
        "filename": "src/dawn/native/ShaderModule.h",
        "patchSetId": 24
      },
      "lineNbr": 288,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "nit: since we modify these, we should take them as pointers so it is clear in the caller that they are modified.",
      "range": {
        "startLine": 287,
        "startChar": 41,
        "endLine": 288,
        "endChar": 82
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3b8fe01_fc3a1114",
        "filename": "src/dawn/native/ShaderModule.h",
        "patchSetId": 24
      },
      "lineNbr": 288,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cf8ed73_8cca3f86",
      "range": {
        "startLine": 287,
        "startChar": 41,
        "endLine": 288,
        "endChar": 82
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14acf698_ef2c466f",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 24
      },
      "lineNbr": 782,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "u-nit: very slight preference for splitting this block in two so the RunTransforms is done in a single place. program and programAsValue can be simplified a bit too I think.\n\n if (vertex) {\n   Add another transform\n }\n \n RunTransforms\n \n if (vertex) {\n   get back transform data\n }",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2874b8d9_7afff794",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 24
      },
      "lineNbr": 782,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14acf698_ef2c466f",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cae180fe_08bb40b8",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 168,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-07T17:03:00Z",
      "side": 1,
      "message": "this looks the same as calling AddExternalTextureTransform; is it different?",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c4ab44f_37b1edca",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 168,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T00:57:00Z",
      "side": 1,
      "message": "Yeah. \n\nThis is a duplicate of a conversation I have with Corentin - so resolving.",
      "parentUuid": "cae180fe_08bb40b8",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42b4269c_50524340",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 168,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-08T09:29:55Z",
      "side": 1,
      "message": "And to be clear, this one adds GetBindingIndex() conversion to all the bindings passed to the newBindingsMap.",
      "parentUuid": "4c4ab44f_37b1edca",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aef58f8_f5d853fa",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 155,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "nit: types can not be omitted!",
      "range": {
        "startLine": 155,
        "startChar": 26,
        "endLine": 155,
        "endChar": 47
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5f8f9b7_c3f59409",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 155,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T00:57:00Z",
      "side": 1,
      "message": "I hope you meant types can be omitted - because that\u0027s what I did.",
      "parentUuid": "3aef58f8_f5d853fa",
      "range": {
        "startLine": 155,
        "startChar": 26,
        "endLine": 155,
        "endChar": 47
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d41537f2_7e77bf94",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 155,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-08T09:29:55Z",
      "side": 1,
      "message": "s/not/now/ indeed ^^",
      "parentUuid": "c5f8f9b7_c3f59409",
      "range": {
        "startLine": 155,
        "startChar": 26,
        "endLine": 155,
        "endChar": 47
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80a035dd_9ff7bb00",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 194,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "nit: since this is fixed-size it can be an array (or std::array)",
      "range": {
        "startLine": 194,
        "startChar": 4,
        "endLine": 194,
        "endChar": 39
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "765bc515_80c56eda",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 194,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-07T21:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80a035dd_9ff7bb00",
      "range": {
        "startLine": 194,
        "startChar": 4,
        "endLine": 194,
        "endChar": 39
      },
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b116e915_8498c5bb",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 225,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-07T12:30:32Z",
      "side": 1,
      "message": "u-nit: you can use GetBindGroupLayout too.",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f6059af_b5ee8a13",
        "filename": "src/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 24
      },
      "lineNbr": 225,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-08T20:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b116e915_8498c5bb",
      "revId": "e876f682774b7429c71c42cf665823d07f3ef814",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}