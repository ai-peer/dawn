{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8fa06090_adeb10fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-03-22T16:39:33Z",
      "side": 1,
      "message": "Hey folks,\n\nSending this out optimistically to get feedback although I just got the trybots running as it\u0027s the end of my workweek. The tests passed locally.",
      "revId": "5e58d7600ca63e74c1dece5a764f2fe97d18efe7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d06a8f86_b1f0e32e",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-22T16:56:15Z",
      "side": 1,
      "message": "pretty sure this is referencing a potentially freed pointer.\n\nWe call Validate using a `layout` stored internally on the BindGroupLayout.\n\nThat layout struct gets copied and stored there from `CreateBindGroupLayoutInfo`, but all the structs, chained structs included, are from the application. So the chains are no longer valid.\n\nProbably `dawn::native::BindingInfo` needs to be storing an `UnpackedPtr\u003cSamplerBindingLayout\u003e` which is the autogenerated, flattened version of the chained struct\n\n\nsecond, you should check explicitly for the StaticSampler struct so that this is more typesafe",
      "revId": "5e58d7600ca63e74c1dece5a764f2fe97d18efe7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddd9c8db_bfd43fa2",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-22T16:56:15Z",
      "side": 1,
      "message": "```suggestion\n                        \"Binding entry sampler %s set for layout that specifies a static sampler\", entry.sampler);\n```\n\nbut, you should probably first check if `entry.sampler` is even valid, so move this code after [1]\n\n\nAnd that means, we should probably have a test that passes an invalid sampler (use a descriptor that fails validation) in as a binding entry when the layout is static. and make sure it still errors as expected / doesn\u0027t do bad things",
      "range": {
        "startLine": 233,
        "startChar": 46,
        "endLine": 233,
        "endChar": 47
      },
      "revId": "5e58d7600ca63e74c1dece5a764f2fe97d18efe7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "832af0b3_81c9e7cd",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-22T16:56:15Z",
      "side": 1,
      "message": "[1]",
      "revId": "5e58d7600ca63e74c1dece5a764f2fe97d18efe7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}