{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "85650472_bc385966",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-07-11T00:32:04Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8ae8999_88117d27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-11T07:47:05Z",
      "side": 1,
      "message": "Still LGTM. When doing changes that modify the semantic of the code, please try to keep the rest of the naming and the logic consistent!\n\n (tests will need slight updating of the logic for the comments I made too)",
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59abc16e_b764ec01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-11T17:53:54Z",
      "side": 1,
      "message": "Asking for a +2 if it looks good now ðŸ˜Š",
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46b431eb_fd7bd6ad",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-11T07:47:05Z",
      "side": 1,
      "message": "nit: this is now clearing the alpha of the dest instead of the src, so it really is kClearDstAlphaToOne and we should change the check at [1] accordingly.",
      "range": {
        "startLine": 200,
        "startChar": 47,
        "endLine": 200,
        "endChar": 66
      },
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43a3926_944060f9",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-11T17:04:06Z",
      "side": 1,
      "message": "I think the naming should still be clear `src` alpha? It reads from `src`, and modify `src.alpha` to 1, and then write to `dst` with the converted `src` value (Just like the other steps e.g. kEncodeToGammaStep), if and only if when `src.alphaMode` is opaque. `dst.alphaMode` doesn\u0027t matter.",
      "parentUuid": "46b431eb_fd7bd6ad",
      "range": {
        "startLine": 200,
        "startChar": 47,
        "endLine": 200,
        "endChar": 66
      },
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "153df1ae_c643fb64",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-11T17:20:16Z",
      "side": 1,
      "message": "I guess that could work as well. My suggestion was based on color being essential dstColor at this point in the algorithm but either way is probably fine.",
      "parentUuid": "c43a3926_944060f9",
      "range": {
        "startLine": 200,
        "startChar": 47,
        "endLine": 200,
        "endChar": 66
      },
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efa2e001_868a7790",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-11T17:51:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "153df1ae_c643fb64",
      "range": {
        "startLine": 200,
        "startChar": 47,
        "endLine": 200,
        "endChar": 66
      },
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3235dc_17013488",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-11T07:47:05Z",
      "side": 1,
      "message": "[1] but also this should no longer be an elseif on srcAlphaMode but on dstAlphaMode",
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c7d18b7_0f8657cf",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-11T17:04:06Z",
      "side": 1,
      "message": "This should be `srcAlphaMode`. It clears color.a (that is going to be written to dst) only when `srcAlphaMode \u003d\u003d Opaque`, regardless of what the dstAlphaMode is.\nThe behavior change is when src canvas is used as image source (input).",
      "parentUuid": "ef3235dc_17013488",
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27a642de_f002de50",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-11T17:51:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c7d18b7_0f8657cf",
      "revId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "4620c606c6077cbb86ad0633bbd61b6210c39684",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}