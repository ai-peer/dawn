{
  "comments": [
    {
      "key": {
        "uuid": "12ae502d_a48e3121",
        "filename": "src/dawn_native/Commands.cpp",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-05-14T08:52:46Z",
      "side": 1,
      "message": "When I look into the crash stack, I find that the reason is due to wrong access during commands free period.\nMaybe it\u0027s just lucky that uint32_t can work but uint64_t can work. However, changes here is the root cause.",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "363e0143_19c9f579",
        "filename": "src/dawn_native/Commands.cpp",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "Uuuh this should work, maybe it\u0027s a bug in the CommandAllocator?",
      "parentUuid": "12ae502d_a48e3121",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1734f19e_3343e105",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "nit: \"must be exactly equal to\" or \"must match\"",
      "range": {
        "startLine": 101,
        "startChar": 38,
        "endLine": 101,
        "endChar": 51
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "569df474_c97ff3df",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "This should be \u003e\u003d to ensure there is at least one byte available.",
      "range": {
        "startLine": 114,
        "startChar": 57,
        "endLine": 114,
        "endChar": 58
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7a6ab61_c5581fcf",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-14T18:59:39Z",
      "side": 1,
      "message": "Is this overflow safe? (dynamicOffsets[i] \u003e bufferBinding.size - bufferBinding.offset) would probably be safer (if size is guaranteed to be \u003e offset)",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cc6f1e0_b12c0b25",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-14T18:59:39Z",
      "side": 1,
      "message": "\"out of bounds\"",
      "range": {
        "startLine": 115,
        "startChar": 62,
        "endLine": 115,
        "endChar": 70
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7678064_42af0d5e",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 457,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "u-nit: no newline",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebacce65_ddfb236a",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 473,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "but newline here :)",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff9e5cf1_4e5eae45",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 502,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "nit: we\u0027re not doing any actual rendering using these shaders because validation tests run on the Null backend. We could just have empty shaders that declare the interface and that\u0027s it.",
      "range": {
        "startLine": 483,
        "startChar": 1,
        "endLine": 502,
        "endChar": 21
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4118100_a63968b6",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 516,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "nit: This could return a ComputePipeline and be called CreateTestComputePipeline. Same thing for render.",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb7cafb8_7d84e7ea",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 517,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "ditto",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf057979_81bacc01",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "nit: this bind group and the pipeline layout are the same as for render, maybe we could factor the creation in SetUp?",
      "range": {
        "startLine": 535,
        "startChar": 0,
        "endLine": 538,
        "endChar": 99
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30121c5a_68ee598c",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 554,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "nit: comment before test. Ditto below",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7693260_407bbf23",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 554,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-14T18:59:39Z",
      "side": 1,
      "message": "Can you split these 2 tests into many small tests?",
      "range": {
        "startLine": 554,
        "startChar": 0,
        "endLine": 554,
        "endChar": 6
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc8a93df_9c059b85",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 554,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-14T18:59:39Z",
      "side": 1,
      "message": "nit: \"SetBindGroup(...).SetBindGroup(...)\" is redundant.",
      "range": {
        "startLine": 554,
        "startChar": 35,
        "endLine": 554,
        "endChar": 47
      },
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "881a9ccd_3b1d6a82",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 574,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-14T18:49:44Z",
      "side": 1,
      "message": "Can we have a comment before each case that explains what it does? Ditto below.",
      "revId": "026ed85bda317c82739afb51fa3dd1678538b5fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}