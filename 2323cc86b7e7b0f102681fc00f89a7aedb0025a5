{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0e6d0147_193d5a65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "Please take a look, thanks for your time!\nThis CL finally pas the try bot after I revert the `EnsureBackendConnection` things I once added in instance initialization in the former CLs.\nI try to add detailed comments here in Gerrit, hopefully they can serve as a document explaining the design.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0c1caa5_2db5e21a",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 11
      },
      "lineNbr": 192,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "If that is better, I can replace this cache with a call to `RequestSupportedFeaturesWithToggles`",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48745a64_a9c98f18",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 11
      },
      "lineNbr": 240,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "Call `ValidateFeatureSupportedWithToggles` for each supported feature to check the restriction of given toggles.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "170cab51_92fac26d",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "All changes made for Adapter feature management is based on the following idea:\n1. Whether a feature is supported is based on two factor:\n    a) the system/backend/driver etc. actually support the feature, and\n    b) the toggles allows using this feature (namely *\"the restriction of toggles\"*);\n  \u003e For example: a) `shader-f16` on Windows require DXC of some version existed, this is a fact that not related to toggles; b) `shader-f16` feature require `DisallowUnsafeAPIs` toggle disabled on all backend, and require `UseDXC` toggle on Windows for using DXC.\n\n2. Device toggles state can be different from aevice toggles state on those toggles that controls the support of features (i.e. `DisallowUnsafeAPIs` and `UseDXC`), due to the toggles overriding. We want this to happen so we can create a internal unsafe device from a safe adapter an so on.\n3. Adapter has to report the features it support based on adapter toggles state (that\u0027s the only toggles state it can see), while we want to validate the required features with required device toggles when creating device. The reasons including:\n    1. In this way we can create a unsafe device with more experimental features from a safe adapter for e.g. internal use or testing propose.\n    2. On the other hand Chrome (JS) user won\u0027t be able to create such a device with features that adapter not report supporting, since *we decided to use same toggles requirement for both Instance, Adapters and Devices in Chrome by default*. Internal usage can have specially constructed toggles requirement, but not user\u0027s.\n\nWith these ideas, I distinguished the concept of \"unfiltered supported features\" and \"filtered supported features with given toggles\" in adapters. The first is the features that can actually supported by system/backend/driver, and the second one is the subset of the first one that only contains features allowed by some toggles state, adapter toggles state or device toggles state in different places.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a8b7870_3facfd79",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-21T07:14:04Z",
      "side": 1,
      "message": "In short words: Adapters report supported feature based on adapter toggles state, but validate device required features based on required device toggles state.",
      "parentUuid": "170cab51_92fac26d",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84b0c7dd_5999f53c",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 67,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "This function now check the required features based on given toggles, ensure that all features are not only supported by backend but also have no violate the restriction of given toggles.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59a4a6b4_c5df45dd",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "This function is used in End-to-End testing. The propose of this function is to answer **\"Can I require the shader-f16 feature for testing, if I enable UseDXC toggle when creating device, although it is disabled in the adapter because other test cases doesn\u0027t want it?\"**.\n\nIn end-to-end testing, Instance get reused for every testcases, so its toggles and adapters\u0027 toggles it create are also the same for each test cases. This works well for `DisallowUnsafeAPIs` because we usually want to disable it, but it cause trouble for `UseDXC`. Currently major test cases tests FXC instead of DXC and has `UseDXC` disabled, while we still want to test `UseDXC` for features like `shader-f16` on Windows in some test cases.\n\nTherefore, we can not enable `UseDXC` by default for instance and hence adapters, otherwise we can not test the FXC cases (all cases will just run for DXC). In this case, adapter will always report **not supporting shader-f16**, but actually it **can** support if we enable `UseDXC` in device toggles. This function solve this problem.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15622442_d392a3fe",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-21T21:39:18Z",
      "side": 1,
      "message": "I apologize that I haven\u0027t followed this discussion very closely until now.\nI\u0027m thinking that what you\u0027ve described here has some weird semantics (feature not exposed, but a toggle can make it OK to use). You point out that this would be simpler if we had an adapter toggle instead. So in my perspective:\n - IIUC, adapter toggle is preferred but too much refactoring right now\n - which means in the end state, instance toggles (probably?) aren\u0027t needed that much. The same thing can be achieved with defaults for the adapter toggles, or by passing more stuff in the adapter toggles descriptor\n - but we still want a way to have use_dxc and shader-f16 useable in a consistent way\n \nIf eventually we have adapter toggles, I\u0027m thinking that we can have a simpler short-term solution just to make use_dxc and shader-f16 work nicely. I\u0027m worried that the current solution is a lot of code to add instance toggles and this unfiltered/filtered-but-actually-available distinction - which won\u0027t be needed if we have adapter toggles.\n\nAn alternative could be to add a simple way to temporarily set toggles on the adapter at the dawn::native level since we only need to have the toggles impact feature-checking and requestDevice (toggle inheritance and feature validation).\n\n - DawnTestBase::SupportsFeatures before checking features manually sets toggles:\n   ```\n   mBackendAdapter.SetToggles({ \"use_dxc\" });\n   dawn::native::GetProcs().adapterEnumerateFeatures(...);\n   mBackendAdapter.ClearToggles();\n   ```\n - DawnTestBase::CreateDeviceImpl before creating the device manually sets toggles:\n   ```\n   mBackendAdapter.SetToggles({ \"use_dxc\" });\n   WGPUDevice device \u003d mBackendAdapter.CreateDevice(...);\n   mBackendAdapter.ClearToggles();\n   ```\n - webgpu_decoder_impl.cc does similar stuff for WebGPU",
      "parentUuid": "59a4a6b4_c5df45dd",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e20961_da2a8b5a",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-22T02:36:47Z",
      "side": 1,
      "message": "Thanks for reviewing!\n\nAlthough eventually we would have adapter toggles and making `Use_DXC` as an adapter toggle, I am not sure if we can get rid of the \"feature not exposed, but a toggle can make it OK to use\" semantics. \n* There are several experimental features go behind `disallow_unsafe_apis`, and they can not exposed if the toggle is not disabled, which is the default state.\n* However we may create internal devices (for e.g. Skia usage) that disable `disallow_unsafe_apis` out of such adapter (override the toggle) for convenience like resource sharing etc, and if we want such devices be able to use experimental features, we again comes into the situation that \"some features not exposed, but a toggle can make it OK to use\"\n* Otherwise we can decide to not allow such devices to use any features other than adapter exposed under adapter toggles, in this case the semantics and logic is much simpler, but the restriction may be too strict?\n\nThe suggested alternative way can work as a temporary solution, but I am worried about setting adapter toggles state back and forth outside its creation (and initialization), which seems that may allow introducing inconsistent behavior if not carefully handled.",
      "parentUuid": "15622442_d392a3fe",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56173235_74ef2c2c",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-22T03:14:15Z",
      "side": 1,
      "message": "\u003e feature not exposed, but a toggle can make it OK to use\" semantics.\n\njust to clarify, I\u0027m specifically referring to the case in the current CL where the adapter does not support shader-f16, but if you make a device with use_dxc using shader-f16 it works. I don\u0027t think this is overly strict but would appreciate your opinion.\n\n\u003e in this case the semantics and logic is much simpler, but the restriction may be too strict?\n\nwhat cases would not be supported that you think might be important?\n\n\nyes, it\u0027s a trade off that it could be bad if not carefully handled, but I\u0027m thinking it\u0027s closer to the end state we want of adapter toggles. and, after V1 branch we can spend the time to refactor and fully support adapter toggles",
      "parentUuid": "46e20961_da2a8b5a",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cfeefde_5904b0da",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-22T03:35:19Z",
      "side": 1,
      "message": "How about trying to do the restriction \"devices can not use any features other than adapter exposed under adapter toggles\" for now, and relax this restriction later if necessary (e.g. required by Skia)? That could simplify this CL a lot while having less complexity exposed outside Adapter. In this way `use_dxc` toggle will still be temporally promoted as instance toggle (as this CL did), but just serve as an input to adapter toggles, and will be downgrade to adapter toggle later. And this may be simpler than the alternative way of setting adapter toggles outside, which also requires adapter checking `UseDXC` when reporting toggles.\n\nI will update this CL today.",
      "parentUuid": "56173235_74ef2c2c",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38e2dfd3_bd4a5971",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-22T03:57:00Z",
      "side": 1,
      "message": "Oh the instance toggles conflict in End-to-end tests... Maybe have to do the adapter toggles trick...",
      "parentUuid": "0cfeefde_5904b0da",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a643939e_cf91cfed",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-22T04:37:20Z",
      "side": 1,
      "message": "can we make two separate instances?",
      "parentUuid": "38e2dfd3_bd4a5971",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ab80d2b_d496e197",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-22T15:08:30Z",
      "side": 1,
      "message": "\u003e can we make two separate instances?\n\nThat would be a rather large change to DawnTest, because currently all end-to-end test reuse a single instance stored in `gTestEnv`...\n\n---\n\nAbout the \"restriction \u0027devices can not use any features other than adapter exposed under adapter toggles\u0027\", I recall that (if I get it right) in the previous CL Corentin said (https://dawn-review.googlesource.com/c/dawn/+/122021/comment/745e3c2f_40a8cacc/) that we may want device toggles (like `DisallowUnsafeAPIs`) can be override the adapter toggles and we do required features validation on device toggles, so maybe we must have two separate concept of \"features supported under adapter toggles\" and \"features supported under device toggles\" (which may be different from each other), but both are subsets of \"features could be supported by adapter without the toggles restriction\" (here comes the third concept...)\n\nI write a draft CL (https://dawn-review.googlesource.com/c/dawn/+/125020) that do such restriction, but maybe that is not the way to go... Sorry about that, that would be more reviewing work...\n\n---\n\nMaybe it is worth mentioned that current state (before this CL) of adapter features management are:\n* Adapter may report (expose) all features it could support (i.e. without toggles restriction, this CL is trying to add such restriction), which means that it will just expose experimental features even if `DisallowUnsafeAPIs` is enabled on instance;\n* Chrome filter away the experimental features in webgpu_decoder_impl.cc, so JS user won\u0027t see them;\n* Adapter validate the device required features based on device toggles (\"toggles restriction\" I mentioned in this CL), including `DisallowUnsafeAPIs` and `UseDXC`. This is the concept \"features supported under device toggles\".\n\nWhat this CL trying to do is making Adapter only report supported features under the restriction of adapter toggles, so this introduce the concept \"features supported under adapter toggles\".\n\nActually it is a possible to handle \"shader-f16\" features and \"use_dxc\" toggle in webgpu_decoder_impl.cc, just filter it if use d3d12 backend and \"use_dxc\" toggle is not enabled. I tried to write a CL in this way, but raised concern about it (https://chromium-review.googlesource.com/c/chromium/src/+/3885086/comment/1ef187f4_5225ed98/). That is actually why we start the toggles refactoring.....",
      "parentUuid": "a643939e_cf91cfed",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72258bd3_29a6c971",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-23T22:46:53Z",
      "side": 1,
      "message": "I understand the desire to get shader-f16 in v1 so I landed your handling of shader-f16 and use_dxc with some modification in webgpu_decoder_impl.cc in [this CL](https://chromium-review.googlesource.com/c/chromium/src/+/4366493). hopefully it makes the branch. I still think adapter toggles are the better way, and I\u0027m sorry I wasn\u0027t response enough with these reviews to make progress. I\u0027d still like to revisit the toggles after we\u0027re sure WebGPU is looking stable in 113.",
      "parentUuid": "7ab80d2b_d496e197",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0a64158_831c9687",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-24T02:11:12Z",
      "side": 1,
      "message": "Thanks for your reviewing and help! Hoping every thing goes well in 113 and we can move forward after this great milestone!",
      "parentUuid": "72258bd3_29a6c971",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf68b1b_8146ac0a",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-04-12T10:51:46Z",
      "side": 1,
      "message": "\u003e I still think adapter toggles are the better way\n\nYes I think UseDXC should be an adapter toggle, and should be required when creating adapter from an instance. But there are more complexity of implementing adapter toggles (thus of the same backend), specifically of managing multiple adapters that only different in required toggles within a single instance. Maybe it would be clearer to do that in a separate CL, and downgrade UseDXC with that.",
      "parentUuid": "d0a64158_831c9687",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4849b5ec_665b81f5",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-12T17:46:58Z",
      "side": 1,
      "message": "Yes I think it would be better if we refactored things to support multiple adapters with different exposed capabilities - which really use the same backend adapter. It will be useful longer term as well. I wrote a [doc](https://docs.google.com/document/d/1Ag3UAD6D1OVt9-MwKltzLefVhwKRdX0RqML2etrYVS4/edit#) about my ideas on how to do it and what it can look like. Maybe you could look into helping do the refactor? (the doc\u0027s scope includes some things beyond supporting toggles which don\u0027t need to be done just yet).",
      "parentUuid": "ddf68b1b_8146ac0a",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15cdc16a_18ba0a24",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-11T03:33:27Z",
      "side": 1,
      "message": "FYI, after https://dawn-review.googlesource.com/c/dawn/+/132267 lands, things should be in a good shape to implement adapter toggles",
      "parentUuid": "4849b5ec_665b81f5",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12da4502_2e039292",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-05-12T02:29:12Z",
      "side": 1,
      "message": "Thanks! By the way, I noticed that you mentioned that you are planning to delete the whole discover adapter/physicalDevice stuff. A large part of complexity of adapter toggles comes from that discovering part as Dawn/Chrome holds a vector of all kinds of discovered adapter and reuse them from time to time. Are you going to change that logic?",
      "parentUuid": "15cdc16a_18ba0a24",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a815a645_20948e00",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "This change is just for making `mUnfilteredSupportedFeatures` private. If we decide that is unnecessary, I can change it back. But I think the interface may be clear if we just expose the methods not the data?",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e8e2ce3_f16fe0c0",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-16T12:43:44Z",
      "side": 1,
      "message": "nit: IsFeatureSupported and if we can split this to a pre-CL it will help remove the amount of noise in this one.",
      "parentUuid": "a815a645_20948e00",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ba625ee_97ed7a88",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T15:58:32Z",
      "side": 1,
      "message": "Done, rename it to just `AdapterBase::EnableFeature` in the pre-CL.",
      "parentUuid": "3e8e2ce3_f16fe0c0",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa1b6b13_c5679c23",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "This is the actual function that check if a feature is supported with a given toggles state, and it will call backends\u0027 `ValidateFeatureSupportedWithTogglesImpl` for any backend-specific validation.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbd25e40_19a477bd",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-16T12:43:44Z",
      "side": 1,
      "message": "nit: Can we do this change in the pre-CL as well? It will make most of the backends change be in the pre-CL and cut the amount of files here. I don\u0027t expect the pre-CL to have more than one round of nit comments.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b1e4f49_ea2344e9",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T15:58:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbd25e40_19a477bd",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc6fb134_35dec229",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 11
      },
      "lineNbr": 141,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "This is just a cache. If required, I can remove it and just call the `RequestSupportedFeaturesWithToggles` every time needed.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95d4b458_541a7073",
        "filename": "src/dawn/native/BackendConnection.h",
        "patchSetId": 11
      },
      "lineNbr": 47,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "This method is now called when creating adapter\u0027s toggles state when discovering them.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c362b538_9acfc707",
        "filename": "src/dawn/native/Instance.cpp",
        "patchSetId": 11
      },
      "lineNbr": 182,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "As is suggested, in the future we may want to have multiple connection of D3D and some of them use DXC while others not, or we may want some adapter use DXC while others not. So I plan to downgrade `UseDXC` into adapter toggle in future.\n\nBut currently using `UseDXC` as an instance toggle save me from some difficulty like multiple adapter (only different in toggles state) management in instance.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a801291c_87e21ade",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 11
      },
      "lineNbr": 511,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "Change this because in this CL I force set instance stage toggle `UseDXC` when creating adapter toggles state.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e65159e_d0430488",
        "filename": "src/dawn/native/Toggles.h",
        "patchSetId": 11
      },
      "lineNbr": 164,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-16T12:43:44Z",
      "side": 1,
      "message": "This is now const again?",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cee8d0d_b973d14f",
        "filename": "src/dawn/native/d3d12/BackendD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 134,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "Currently `UseDXC` is an instance toggle, but get validated and force set for adapter toggles. But maybe this is OK? and I plans to eventually downgrade it into adapter toggle.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8881cb85_d10473b8",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "Take required toggles of earlier stage as well to do the toggles overriding.\n\nFor example, instance toggle `UseDXC` may be enabled in the parameter of this test cases, and we should also take it into the required device toggles.",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3149407_cd0c98df",
        "filename": "src/dawn/tests/end2end/ComputeLayoutMemoryBufferTests.cpp",
        "patchSetId": 11
      },
      "lineNbr": 488,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-03-16T11:23:56Z",
      "side": 1,
      "message": "These code is to answer that **\"Can I require the shader-f16 feature for testing device with the toggles in test parameter (mainly `UseDXC`), even though adapter may report doesn\u0027t support it because it has a different adapter toggles state?\"**",
      "revId": "2323cc86b7e7b0f102681fc00f89a7aedb0025a5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}