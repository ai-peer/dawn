{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b64475e1_ab46d740",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-12-27T06:35:19Z",
      "side": 1,
      "message": "Hi Corentin, Austin and Ben,\n\nI found the failure of webgpu:api,operation,shader_module,compilation_info:offset_and_length:valid\u003dfalse;name\u003d\"unicode\" is because we don\u0027t count in the offset of compilation message with Unicode. Now with this patch the test can pass on Windows, but still fail on macOS and Linux.\n\nI think we need to have some infrastructures to handle unicode in dawn_native, but I am not familiar with it. Do you have any idea?",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad1527fe_eadf72eb",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-02T16:10:46Z",
      "side": 1,
      "message": "Is there a way to do this using the C++ library and without modifying the currently set locale? (IIRC it might not be without triggering some addition of global constructors, which is also disallowed).\n\nAlternatively, assuming the text is valid UTF-8, isn\u0027t there a simple way to convert the offsets (I thought it was easy to convert between the two as it\u0027s just a matter of what is representable).\n\nFinally, the code seems to do a lot of redundant computations since it translates the whole prefix of the file multiple times. I wonder if at least we could precompute the start of line UTF16 offsets instead of doing the computation for the whole prefix each time (though that could be a TODO as well).",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96bdab03_b2a59bd5",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-01-03T03:02:43Z",
      "side": 1,
      "message": "In the latest patch set I am trying to use the method in base/strings/utf_string_conversions.cc, which works well on the bot.\n\nPTAL, thanks!",
      "parentUuid": "ad1527fe_eadf72eb",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff867227_a4f36966",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-03T08:40:23Z",
      "side": 1,
      "message": "It works well but the ICU dependency seems unnecessary for the little work we have to do with UTF8?",
      "parentUuid": "96bdab03_b2a59bd5",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3849b51_0054b373",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-01-03T10:07:24Z",
      "side": 1,
      "message": "If this does require ICU - shouldn\u0027t we be pulling in ICU with DEPS?\nExample: https://source.chromium.org/chromium/chromium/src/+/main:DEPS;l\u003d1367?q\u003dicu%20file:DEPS\u0026sq\u003d\u0026ss\u003dchromium",
      "parentUuid": "ff867227_a4f36966",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "417f8755_c09e4cc6",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-01-04T08:10:52Z",
      "side": 1,
      "message": "I don\u0027t need ICU any more. I am using the existing code in Tint instead. PTAL, thanks!",
      "parentUuid": "a3849b51_0054b373",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e832df19_e99def71",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-04T09:57:34Z",
      "side": 1,
      "message": "Using the helper in Tint sounds good from the Dawn standpoint. Ben is that ok on the Tint side?\n\nCould we have unittests for this function that try to cover corner cases, OOB behavior etc? In dawn_unittests I think we\u0027re allowed to use dawn::native functions directly.",
      "parentUuid": "417f8755_c09e4cc6",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c83ba9a6_a2a7c2fb",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-01-04T10:11:02Z",
      "side": 1,
      "message": "At some point in the future we\u0027ll need to properly define the Tint public API.\nWe can always move this out to the \u0027common\u0027 module shared by Dawn and Tint.\n\nSo SGTM.\n\n+1 to testing this stuff. It\u0027s easy to overlook edge cases.",
      "parentUuid": "e832df19_e99def71",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "155f0471_15565e3b",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-01-06T11:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c83ba9a6_a2a7c2fb",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67dcd783_886d334c",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-02T16:10:46Z",
      "side": 1,
      "message": "IMHO the C API offset should still be a UTF8 offset since that\u0027s the format the C API takes. We could add a utf16Offset to the compilation message struct and surface both informations, but since UTF16 is more niche in native (just used for JS bindings) then it should get the longer name.",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61618fb0_3eeab7fe",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-01-03T03:02:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "67dcd783_886d334c",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e0e6ec_15b9806f",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-04T09:57:34Z",
      "side": 1,
      "message": "I think this hasn\u0027t been addressed. Any reason why? (I believe it would require adding utf16Offset and utf16Length in dawn.json + tests)",
      "parentUuid": "61618fb0_3eeab7fe",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1686abec_d72ddcf0",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-01-05T02:17:32Z",
      "side": 1,
      "message": "Sorry I misunderstood this comment before. Do you mean I should do the below changes in dawn.json and use utf16LinePos, utf16Offset and utf16Length in Blink (https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/gpu_shader_module.cc;l\u003d97)?\n\n    \"compilation message\": {\n        \"category\": \"structure\",\n        \"extensible\": \"in\",\n        \"members\": [\n            {\"name\": \"message\", \"type\": \"char\", \"annotation\": \"const*\", \"length\": \"strlen\", \"optional\": true},\n            {\"name\": \"type\", \"type\": \"compilation message type\"},\n            {\"name\": \"line num\", \"type\": \"uint64_t\"},\n            {\"name\": \"line pos\", \"type\": \"uint64_t\"},\n            {\"name\": \"offset\", \"type\": \"uint64_t\"},\n            {\"name\": \"length\", \"type\": \"uint64_t\"},\n            {\"name\": \"utf16 line pos\", \"type\": \"uint64_t\"},\n            {\"name\": \"utf16 offset\", \"type\": \"uint64_t\"},\n            {\"name\": \"utf16 length\", \"type\": \"uint64_t\"}\n        ]\n    }",
      "parentUuid": "67e0e6ec_15b9806f",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7dd84a_9eea0f64",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-05T09:44:36Z",
      "side": 1,
      "message": "Yep!",
      "parentUuid": "1686abec_d72ddcf0",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33ed4394_9a0ea5ba",
        "filename": "src/dawn/native/CompilationMessages.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-01-06T11:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce7dd84a_9eea0f64",
      "revId": "208996bca9603fa7f25def5a23fac65c8a70bdca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}