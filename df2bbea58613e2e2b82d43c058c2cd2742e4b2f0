{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "206eaeda_05940db2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-11-20T10:06:25Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45f756a5_876b5936",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "Nice work getting this working on D3D11! I think there could be a bunch of simplifications though.",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a13c3496_6aafd14e",
        "filename": "src/dawn/native/d3d/D3DCompilationRequest.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "nit: tintOptions is now passed directly in the compilation request so we can edit it there! https://dawn-review.googlesource.com/c/dawn/+/160920",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd9cd34a_15677240",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "Why can\u0027t this always be 0?",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3286e6d9_6e805f89",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: remove `\u0026`, so we can use rvalue in call site.",
      "range": {
        "startLine": 136,
        "startChar": 80,
        "endLine": 136,
        "endChar": 81
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac5ed738_674000e5",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: `views(uavsInBindGroup.size());`?",
      "range": {
        "startLine": 242,
        "startChar": 56,
        "endLine": 242,
        "endChar": 61
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9625cac7_db91c85b",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 259,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "Will it overwrite mFixedUAVs in views? could you please explain it?",
      "range": {
        "startLine": 259,
        "startChar": 20,
        "endLine": 259,
        "endChar": 25
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40f73090_71340636",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "Can\u0027t we apply the fixed UAVs once at the state tracker creation (or in a method called early in the render pass) to simplify the code? It would also get rid of the need for [1] I think it would work if we also update GetUAVSlotCount to take into storage attachments (which conveniently are in PipelineLayoutBase).\n\nWe should maybe comment that OMSetRenderTargetsAndUnorderedAccessViews will keep all the bound UAVs prior to `uavSlotCount - d3d11UAVs.size()` so we only need to rebind UAVs for bindgroups that are not inherited. BindGroupTrackerBase makes sure that non-inherited bindgroups are marked as dirty so we\u0027re good.\n\nCan we have a test for PLS + UAV (buffer?) to check this logic is at least semi-correct?",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787ae077_56898709",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: how do we arrange UAVs and RTVs in a pipeline? could you please add a comment here or at BindGroupTrackerD3D11.cpp:238? thanks",
      "range": {
        "startLine": 42,
        "startChar": 6,
        "endLine": 42,
        "endChar": 22
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d93bf55_9e114dcf",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "nit: Maybe document what these fixedUAV parameters do?",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb8462e_5fc6ae31",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: the meaning of those two params are not clear. Could you please add comments in code?",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 47,
        "endChar": 82
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e2e2b2d_ed83e2df",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: add comment here too.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 59,
        "endChar": 61
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b14a76be_9cef3e45",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 538,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "nit: Some block comments and empty lines would help separate the code a bit better :) Also maybe mention that we create temporary textures for the implicit PLS and TODO could later optimize it by creating a single 2D array texture, and reusing it across different render passes potentially.",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f66de6_a698d8ac",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "nit: unused",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d1f3a8c_f712a900",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "nit: AddTemporaryTextureView so we don\u0027t need to expose the whole vector mutably?",
      "range": {
        "startLine": 562,
        "startChar": 32,
        "endLine": 562,
        "endChar": 54
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83365a07_74111dbc",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 563,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: `commandContext-\u003eAddTempTextureView(implicitPixelLocalStorageTextureView);`?",
      "range": {
        "startLine": 562,
        "startChar": 16,
        "endLine": 563,
        "endChar": 58
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "445eb88a_a76b1405",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 620,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "[1]",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "935d6282_d544f4e1",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 652,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: change tracker ctor signature and use `std::move(pixelLocalStorageROVPtrs)` to avoid unnecessary heap allocation.\n\nAnd I think it is better to pass `pixelLocalStorageROVs` instead of `pixelLocalStorageROVPtrs`? I guess d3d11device context will keep views in `pixelLocalStorageROVPtrs` alive, but it depends on d3d11 implementation detail.",
      "range": {
        "startLine": 652,
        "startChar": 74,
        "endLine": 652,
        "endChar": 98
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb6c82a9_cee49b8d",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "ditto",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "402b9db0_085ae463",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "nit: unused",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7486d65_bb6816ab",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "nit: What is it for? Please add comment about it.",
      "range": {
        "startLine": 77,
        "startChar": 38,
        "endLine": 77,
        "endChar": 55
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f55493_9399833d",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-11-20T16:19:56Z",
      "side": 1,
      "message": "Do we allow caller modify the vector? If not, please use `const std::vector\u003cRef\u003cTextureViewBase\u003e\u003e\u0026`.",
      "range": {
        "startLine": 141,
        "startChar": 4,
        "endLine": 141,
        "endChar": 38
      },
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b9648ba_7c82f174",
        "filename": "src/dawn/native/d3d11/RenderPipelineD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 472,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "TODO pack in color attachments?",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43cf1f00_7fba0064",
        "filename": "src/dawn/native/d3d11/RenderPipelineD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 479,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "u-nit: this could be a helper function that static_asserts RenderPipelineBase::kImplicitPLSSlotFormat is R32Uint.",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c89d3ec_163d2d7c",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-20T16:18:49Z",
      "side": 1,
      "message": "TODO maybe nicer?",
      "revId": "df2bbea58613e2e2b82d43c058c2cd2742e4b2f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}