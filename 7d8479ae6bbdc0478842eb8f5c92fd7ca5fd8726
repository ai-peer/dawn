{
  "comments": [
    {
      "key": {
        "uuid": "4d251ee4_ed85a772",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-05T01:01:08Z",
      "side": 1,
      "message": "Cool, thanks for the update!",
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bcdd758_9d2a68c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T14:07:03Z",
      "side": 1,
      "message": "LGTM too. Maybe just adding a std::dequeue in both backends could have been sufficient.",
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "273e7115_0b29abeb",
        "filename": "src/dawn_native/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-05T01:01:08Z",
      "side": 1,
      "message": "nit: no commas here",
      "range": {
        "startLine": 106,
        "startChar": 39,
        "endLine": 106,
        "endChar": 40
      },
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2e5bf2d_1df9188b",
        "filename": "src/dawn_native/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-08-11T21:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "273e7115_0b29abeb",
      "range": {
        "startLine": 106,
        "startChar": 39,
        "endLine": 106,
        "endChar": 40
      },
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16e66a08_428b0469",
        "filename": "src/dawn_native/PooledResourceMemoryAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T14:07:03Z",
      "side": 1,
      "message": "Why is this needed? Currently we only free a resource once it is no longer in use by the GPU, so we know that when the heap is deallocated, no memory accesses can be done on it anymore.",
      "range": {
        "startLine": 41,
        "startChar": 30,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10472b4e_0f0ef217",
        "filename": "src/dawn_native/PooledResourceMemoryAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-08-11T21:44:15Z",
      "side": 1,
      "message": "After this change, we no longer free memory once the GPU is done with it. Instead, it is returned back to the pool, so a similar check is needed to avoid recycling a heap still in use.",
      "parentUuid": "16e66a08_428b0469",
      "range": {
        "startLine": 41,
        "startChar": 30,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34a8d18c_7774fa24",
        "filename": "src/dawn_native/PooledResourceMemoryAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-12T20:01:20Z",
      "side": 1,
      "message": "Sorry what I meant is that when a suballocated resource is destroyed it is put in a serial queue in d3d12::ResourceAllocatorManager which call BuddyMemoryAllocator::Deallocate in d3d12::ResourceAllocatorManager::Tick that pops from that serial queue.\n\nThis means that when all allocation for a block in BuddyMemoryAllocator are Deallocated, we know all previous GPU accesses to them are finished (because we tracked that in ResourceAllocatorManager). So we don\u0027t need to do anything to check if we can reuse heaps from mPool.",
      "parentUuid": "10472b4e_0f0ef217",
      "range": {
        "startLine": 41,
        "startChar": 30,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fd135c3_8f23ec83",
        "filename": "src/dawn_native/PooledResourceMemoryAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-08-12T21:44:47Z",
      "side": 1,
      "message": "Ahh, thanks for clarifying. I think it\u0027s only used here for testing sub-allocation (NULL driver has no resource manager) but I can change the tests accordingly.",
      "parentUuid": "34a8d18c_7774fa24",
      "range": {
        "startLine": 41,
        "startChar": 30,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b707d7e8_32af0fee",
        "filename": "src/dawn_native/PooledResourceMemoryAllocator.h",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T14:07:03Z",
      "side": 1,
      "message": "nit: std::vector or std::dequeue. std::list if very inefficient allocation wise.",
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54e1715d_f6d8ae5b",
        "filename": "src/dawn_native/PooledResourceMemoryAllocator.h",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-08-11T21:44:15Z",
      "side": 1,
      "message": "Good point.",
      "parentUuid": "b707d7e8_32af0fee",
      "revId": "7d8479ae6bbdc0478842eb8f5c92fd7ca5fd8726",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}