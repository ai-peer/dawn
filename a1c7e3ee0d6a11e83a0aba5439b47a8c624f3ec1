{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "265fc9ef_e74048ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-17T10:05:52Z",
      "side": 1,
      "message": "Given that this isn\u0027t an optional feature, we need to implement it in the backends otherwise a compromised renderer process could start using the feature and crash the backends in interesting ways. Alternatively we could gate on AllowUnsafeAPIs for now and ungate once the implementation is complete.\n\nAlso is this supported in OpenGL ES or do we need to validate depthSlice !\u003d 0 in compat?",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f36b91a_87a98ae8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-17T20:59:42Z",
      "side": 1,
      "message": "IMO, probably easiest to restore [2] and only loosen validation behind AllowUnsafeAPIs",
      "parentUuid": "265fc9ef_e74048ea",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "522a243a_8f8da2a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2023-08-18T02:32:49Z",
      "side": 1,
      "message": "\u003e Also is this supported in OpenGL ES or do we need to validate depthSlice !\u003d 0 in compat?\n\nThe glFramebufferTextureLayer could render to a single layer of 3d texture from OpenGLES 3.0.\n\n\u003e IMO, probably easiest to restore [2] and only loosen validation behind AllowUnsafeAPIs\nSure. What I thought was to allow 3d render attachment creation bebind AllowUnsafeAPIs.",
      "parentUuid": "2f36b91a_87a98ae8",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37340ae9_60c21885",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 2339,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-17T10:05:52Z",
      "side": 1,
      "message": "Kai, we should probably discuss this with webgpu-native, and figure out what guarantees of stability we give to the header.\n\nHao, optional: true does nothing for value types in dawn.json so that annotation can be removed.",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "263a89be_01013fba",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 2339,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-17T20:59:42Z",
      "side": 1,
      "message": "@kainino@chromium.org i filed https://github.com/webgpu-native/webgpu-headers/issues/215",
      "parentUuid": "37340ae9_60c21885",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4873c32_4c79d42f",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 2339,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2023-08-18T02:32:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "263a89be_01013fba",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "233aa1cc_41ca0e4d",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-17T10:05:52Z",
      "side": 1,
      "message": "```suggestion\n                        \"The depth slice index (%u) of non-3D %s used as attachment is not 0.\",\n```",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6ae39da_bf96bfb0",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2023-08-17T13:59:53Z",
      "side": 1,
      "message": "Fix applied.",
      "parentUuid": "233aa1cc_41ca0e4d",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adad1fe8_4c16e4f7",
        "filename": "src/dawn/tests/unittests/validation/RenderPassDescriptorValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 412,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-17T10:05:52Z",
      "side": 1,
      "message": "Can we have validation that depthSlice must be 0 for a 2D view?",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea5fdf86_1914ab1c",
        "filename": "src/dawn/tests/unittests/validation/RenderPassDescriptorValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 412,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2023-08-17T13:59:53Z",
      "side": 1,
      "message": "I think other tests have covered the default 0 for 2d views, so not add this case here. But it\u0027s OK to add it here as a control case.",
      "parentUuid": "adad1fe8_4c16e4f7",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72cfe700_ebcbd09b",
        "filename": "src/dawn/tests/unittests/validation/RenderPassDescriptorValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 412,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-17T14:43:03Z",
      "side": 1,
      "message": "Where do we test that setting depthSlice !\u003d 0 with a 2D view causes a validation error?",
      "parentUuid": "ea5fdf86_1914ab1c",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e99ff495_fe93b678",
        "filename": "src/dawn/tests/unittests/validation/RenderPassDescriptorValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 412,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2023-08-17T15:46:44Z",
      "side": 1,
      "message": "At [1]",
      "parentUuid": "72cfe700_ebcbd09b",
      "revId": "a1c7e3ee0d6a11e83a0aba5439b47a8c624f3ec1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}