{
  "comments": [
    {
      "key": {
        "uuid": "e0981df1_f2f61710",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 153,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-06T23:26:38Z",
      "side": 1,
      "message": "Could we do this only if GetSamplerDescriptorCount() \u003e 0?",
      "range": {
        "startLine": 151,
        "startChar": 8,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f8da52d_9ab20069",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-06T23:26:38Z",
      "side": 1,
      "message": "Could you make a microbenchmark in dawn_perf_tests which would stress sampler deduplication? Then we can measure the impact of sorting here.",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 34,
        "endChar": 9
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d521738d_28fde7dd",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-06T23:26:38Z",
      "side": 1,
      "message": "What do you think about storing the SamplerHeapCache* and StagingDescriptorAllocator* on the SamplerHeapCacheEntry? Or maybe just the SamplerHeapCache* on the entry, and store the StagingDescriptorAllocator* on the SamplerHeapCache.\n\nIf we did that, Release() doesn\u0027t have to return anything, this code would be in DeleteThis(), we could use Ref\u003cSamplerHeapCacheEntry\u003e everywhere and no manual new/delete. We wouldn\u0027t need this ReleaseEntry function",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85a50046_70030202",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-07T01:47:23Z",
      "side": 1,
      "message": "@Austin, your solution will work but we\u0027ll need to store an additional pointer on every cache entry. Not the end of the world depending on how many cache entries we have in practice. \n\nThe cache will need to store un-addreferenced pointers to the cache entries and which are removed from the cache in the destructor of the cache entry. This will work provided we never, ever make the cache service multiple threads. Then, we\u0027ll need additional locks and fun times with atomic reference count incrementing. Ask me how I know. :-)",
      "parentUuid": "d521738d_28fde7dd",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4161eca_757fd101",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-07T17:44:49Z",
      "side": 1,
      "message": "Hmm.. I feel like we already have that multithreading problem. We call ReleaseEntry in the destructor of d3d12::BindGroup. So if some user of Dawn has a bind group on a separate thread, and releases the last reference there, cache-\u003eDestroyCacheEntry will happen on that thread.\n\nTo be fully thread safe, it\u0027s already necessary for us to have a lock on the cache.\n\nAlso I just realized we have this same problem for our CPU slab allocator, the D3D12 staging descriptor allocator, the Vulkan descriptor set allocator, our memory allocators, residency manager, etc... yikes!",
      "parentUuid": "85a50046_70030202",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43a693de_b0c95e37",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-06T23:26:38Z",
      "side": 1,
      "message": "nit: call this GetOrCreate to match other places in Dawn. In Dawn AcquireRef gets a ref *without* adding a refcount, so this could be confusing.",
      "range": {
        "startLine": 66,
        "startChar": 45,
        "endLine": 66,
        "endChar": 52
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "897b7b8e_cd055c4a",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-06T23:26:38Z",
      "side": 1,
      "message": "Should this `delete entry` ?",
      "range": {
        "startLine": 84,
        "startChar": 8,
        "endLine": 84,
        "endChar": 28
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26ba0b4d_bfce3951",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-07T00:05:37Z",
      "side": 1,
      "message": "Yup, good catch.",
      "parentUuid": "897b7b8e_cd055c4a",
      "range": {
        "startLine": 84,
        "startChar": 8,
        "endLine": 84,
        "endChar": 28
      },
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee5eca2_f63b0ca8",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-06T22:14:41Z",
      "side": 1,
      "message": "unit: fixup comment",
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe1ebf7_23e20bae",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-07T00:05:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ee5eca2_f63b0ca8",
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18180cc2_d55891ab",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-06T22:14:41Z",
      "side": 1,
      "message": "unit: fixup comment",
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce50640c_2d136757",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-07T00:05:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18180cc2_d55891ab",
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "355b99da_df3e7410",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-06T22:14:41Z",
      "side": 1,
      "message": "unit: fixup comment",
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20f0392f_7ef8012c",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-07T00:05:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "355b99da_df3e7410",
      "revId": "1438172b6046be6bd8a71647761076fad3bdfd67",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}