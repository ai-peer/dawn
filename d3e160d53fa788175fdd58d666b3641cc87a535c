{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f709d4c_4c4dfca0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-28T04:04:12Z",
      "side": 1,
      "message": "PTAL. The tests all appear to be passing now, so this should be good to go.",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e0d86bb_efd1abee",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 276,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T08:34:01Z",
      "side": 1,
      "message": "nit: default: DAWN_UNREACHABLE() works here and for ExternalTexture below (which should be already be decayed before the data is put in bglInternal).",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6e0c546_3e78b7db",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 276,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-28T18:20:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e0d86bb_efd1abee",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c684f73_e737f73f",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 276,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-28T18:20:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e0d86bb_efd1abee",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddd103ee_90fc0b89",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T08:34:01Z",
      "side": 1,
      "message": "If this is an issue, then we probably have the same issue for uniform buffers.",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3afb64aa_d6ca0efc",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-28T11:34:58Z",
      "side": 1,
      "message": "Not sure what you mean, uniform buffers wills show up twice? What would be the other type they show up as?",
      "parentUuid": "ddd103ee_90fc0b89",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c40d233_3a2283b0",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T11:47:13Z",
      "side": 1,
      "message": "Sorry I should have described this more. The ExternalTexture bindings in the wgpu:: API bind group layouts get transformed in the Dawn frontend into a uniform buffer and two texture bindings. This is what the bind group layout internal shows to the backend. If the textures added by this decaying are showing up twice in here, then why isn\u0027t the uniform buffer showing twice as well?\n\nDigging into it, it seems we reuse the external texture binding entry for plane0, which is probably the issue.\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/BindGroupLayoutInternal.cpp;drc\u003d4ef1375effe7f385c713ce0e6211a13739b03cb2;l\u003d270\n\nDoes changing that line to use    `nextOpenBindingNumberForNewEntry++` as well fix the issue you were seeing (without breaking everything else?)",
      "parentUuid": "3afb64aa_d6ca0efc",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bac2b108_a28d2e5f",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T11:56:03Z",
      "side": 1,
      "message": "Thinking about this more, it seems we could fix this by using the shader\u0027s info instead of the bind group\u0027s info to get the type of the binding. Here the code is seeing the \"decayed\" bindings from the bind group layout, when what Tint cares about are the actual bindings from the module. Then we could have a \n\n```\n  case BindingInfoType::ExternalTexture:\n    // Replace the external texture with the decayed bindings\n    expandedExternalTexture \u003d GetExternalTextureBindingExpansionMap()[srcBindingPoint]\n    // Do the logic in the loop above\n```\n\nWDYT?",
      "parentUuid": "3c40d233_3a2283b0",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09f0b7bd_8060bf4d",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-28T18:20:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bac2b108_a28d2e5f",
      "revId": "d3e160d53fa788175fdd58d666b3641cc87a535c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}