{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "570928ce_adcc3d5c",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 11
      },
      "lineNbr": 525,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:11:02Z",
      "side": 1,
      "message": "hm, to simplify the state handling, could you call CopyFromStagingBuffer first?\nlike:\n```\nMaybeError err;\nif (condition) {\n  err \u003d CopyFromStagingBuffer();\n}\nUnmapInternal(...).Call();\nreturn err;\n```\n?",
      "range": {
        "startLine": 521,
        "startChar": 4,
        "endLine": 525,
        "endChar": 5
      },
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da2668c0_9b564a18",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 11
      },
      "lineNbr": 525,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-24T22:36:10Z",
      "side": 1,
      "message": "I think it has the same problem either way because the conditions change if we call `CopyFromStagingBuffer` first since that moves `mStagingBuffer` thereby leaving it as nullptr.",
      "parentUuid": "570928ce_adcc3d5c",
      "range": {
        "startLine": 521,
        "startChar": 4,
        "endLine": 525,
        "endChar": 5
      },
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2a6569b_30d4bbd7",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 11
      },
      "lineNbr": 525,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T23:36:22Z",
      "side": 1,
      "message": "ah - can we call UnmapImpl() on a different condition? like the same condition we use to determine whether or not to create mStagingBuffer. so it would be \n```\nelse if (mSize !\u003d 0 \u0026\u0026 IsCPUWritableAtCreation()) {\n  UnmapImpl();\n}\n```\n\nit would be nice if `UnmapInternal` strictly meant - make sure this is no longer mapped in the backend, and return the callback.\n\nand Unmap meant - make sure any writes are visible, then `UnmapInternal`",
      "parentUuid": "da2668c0_9b564a18",
      "range": {
        "startLine": 521,
        "startChar": 4,
        "endLine": 525,
        "endChar": 5
      },
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d501043_4f69c6f9",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 11
      },
      "lineNbr": 525,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-28T03:02:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2a6569b_30d4bbd7",
      "range": {
        "startLine": 521,
        "startChar": 4,
        "endLine": 525,
        "endChar": 5
      },
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "749c423c_910c5797",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:11:02Z",
      "side": 1,
      "message": "I think these hide a bit too much magic inside.\n\n[[no_discard]] already makes it so you need to do something with the bool.\nSo the macro saves us from having the bool, and then doing absolutely nothing with it - seems unlikely?",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df42ad47_f22f1d26",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-24T22:36:10Z",
      "side": 1,
      "message": "It\u0027s not THAT unlikely. We have at least 10 instances of uses in this CL?\n\nAlternatively, would you prefer to just make the ConsumeError function public and then allow implementations to call it directly? Just be aware that doing that opens the door to possible implementations that cause a device loss and continue to do stuff potentially leaving us in weird states.",
      "parentUuid": "749c423c_910c5797",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0750c252_4adc036a",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T23:36:22Z",
      "side": 1,
      "message": "not sure what you mean; I\u0027m asking more why we can\u0027t leave things doing `device-\u003eConsumedError` as it currently is now?\n\n\n[[no_discard]] already will make the current callsites that don\u0027t handle the bool an error.\n\nthe way you could do that wrong is if you did:\n```\nif (device-\u003eConsumedError()) {\n  // forget to return\n}\n```\n\n^but IMO it seems not that important to guard against something like that",
      "parentUuid": "df42ad47_f22f1d26",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee57df59_6f27cfb8",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T14:22:53Z",
      "side": 1,
      "message": "Agreed that the slew of macros is a bit unfortunate and doesn\u0027t seem commensurate with the problem this is trying to fix. Sorry :X",
      "parentUuid": "0750c252_4adc036a",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32d9612f_79ae2c81",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-28T03:02:37Z",
      "side": 1,
      "message": "Ok, slightly modified `HandleError` instead. Lmk what you think. Part of this is also trying to avoid calling `ConsumedError` when we are directly passing in an error, and instead calling `HandleError`.",
      "parentUuid": "ee57df59_6f27cfb8",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3250de45_b91fe49c",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:11:02Z",
      "side": 1,
      "message": "not used",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 95,
        "endChar": 14
      },
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08983ccb_30ea7777",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-24T22:36:10Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "3250de45_b91fe49c",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 95,
        "endChar": 14
      },
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86f79440_c395e0cd",
        "filename": "src/dawn/native/SubresourceStorage.h",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:11:02Z",
      "side": 1,
      "message": "To avoid duplicating the logic inside, I think we can declare it as:\n\n```\ntemplate \u003ctypename F,\n          typename R \u003d std::invoke_result_t\u003cF, const SubresourceRange\u0026, const T\u0026\u003e\u003e\nR Iterate(F\u0026\u0026 iterateFunc);\n```\n\nand define as:\n\n```\ntemplate \u003ctypename F, typename R\u003e\nR Iterate(F\u0026\u0026 iterateFunc) {\n  constexpr bool mayError \u003d std::is_same_v\u003cR, MaybeError\u003e;\n  for (...) {\n    if (...) {\n      if constexpr (mayError) {\n        DAWN_TRY(iterateFunc(...));\n      } else {\n        iterateFunc(...)\n      }\n    }\n  }\n\n  if constexpr (mayError) {\n    return {};\n  }\n}\n```",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be7778e4_23f6e631",
        "filename": "src/dawn/native/SubresourceStorage.h",
        "patchSetId": 11
      },
      "lineNbr": 408,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-24T22:36:10Z",
      "side": 1,
      "message": "Oh, nice! Never used constexpr if before, thanks for the tip.",
      "parentUuid": "86f79440_c395e0cd",
      "revId": "5c80cfc2feee95dcfb2ccfe42332c8b1db048284",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}