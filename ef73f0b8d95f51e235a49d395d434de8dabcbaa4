{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bb61a12f_df3e3b56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-14T06:40:31Z",
      "side": 1,
      "message": "PTAL, Thanks!\n\nI used different approaches to work around B2T copy and T2B copy:\n  - For B2T Copy, it is efficient to use a temp buffer, because we can copy data into the temp buffer in one time from the original source buffer, then use the temp buffer to do B2T copy. Considering that we do relative complicated split for 3D texture copy, so I think it is better to do less Buffer-3DTexture copy if we can.\n  - However, for T2B copy, it is done via two separate T2B copies, because if we use T2B copy and copy texture data to a temp buffer, then it is not easy to copy the temp buffer into the destination buffer in one time because there are paddings and we cannot change the paddings. So I think two separate copies should be fine.",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccb649b1_1884c01d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-15T14:16:32Z",
      "side": 1,
      "message": "Thanks for putting this up. It looks like a good approach overall.",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fa58457_269970f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-15T15:16:33Z",
      "side": 1,
      "message": "Looking at the test results, it also looks like you\u0027ve transformed a bunch of expected failures into passes - yay!",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af66c9d7_f952d359",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 255,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-15T14:16:32Z",
      "side": 1,
      "message": "SplitLast3DCopySliceIfRowHeightOutOfBufferBounds? We should describe succintly what happens and how we work around in the description.",
      "range": {
        "startLine": 255,
        "startChar": 21,
        "endLine": 255,
        "endChar": 70
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcafeb73_ea0b3711",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 255,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-15T15:16:33Z",
      "side": 1,
      "message": "Also, I think D3D12 (or whatever the platform is) should be the prefix on the toggle.\n\nSo also UseTempBufferInSmallFormatTextureToTextureCopyFromGreaterToLessMipLevel would be prefixed with D3D12",
      "parentUuid": "af66c9d7_f952d359",
      "range": {
        "startLine": 255,
        "startChar": 21,
        "endLine": 255,
        "endChar": 70
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58f33a8b_8a783c49",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 255,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "RowHeight is not out of bound, actually. It is just smaller than rowsPerImage because there are pure padding rows. What about D3D12SplitBufferTextureCopyIfRowsPerImageGreaterThanCopyHeight? Or Maybe D3D12SplitBufferTextureCopyForRowsPerImagePaddings?\n\nTo Austin, I can add platform prefix for toggles in another patch.",
      "parentUuid": "bcafeb73_ea0b3711",
      "range": {
        "startLine": 255,
        "startChar": 21,
        "endLine": 255,
        "endChar": 70
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca1ffcbe_5969e11a",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 315,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-15T14:16:32Z",
      "side": 1,
      "message": "What we should explain is that this invariant is already checked in the frontend.",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8d8fa49_23df7b7f",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 315,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca1ffcbe_5969e11a",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e72a6141_94ec51e3",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 326,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2022-04-15T21:14:16Z",
      "side": 1,
      "message": "Nit: Instead of \n ASSERT(A \u0026\u0026 B)\n \ndo \n\n ASSERT(A); \n ASSERT(B);\n \nThe latter gives more useful logging output in test runs if B fails but A passes. For the former, you don\u0027t know which condition is the failure condition.",
      "range": {
        "startLine": 326,
        "startChar": 12,
        "endLine": 326,
        "endChar": 66
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "594ed893_9de5e1a4",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 326,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e72a6141_94ec51e3",
      "range": {
        "startLine": 326,
        "startChar": 12,
        "endLine": 326,
        "endChar": 66
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d59a0181_a683d7dd",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 353,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-15T14:16:32Z",
      "side": 1,
      "message": "Is it only for 3D textures or also for 2D array? It\u0027d be slightly surprising if it were just 3D. I think we could just check copySize.depthOrArrayLayers \u003c\u003d 1 and not the dimension.",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a39bed23_2faa1124",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 353,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "Yes. It is only for 3D texture. D3D12\u0027s copyTextureRegion can copy one texture subresource only for each call. For 2D array, different array slices are different subresources. This is different from 3D texture, in which depth images are the same subresource. So each copyTextureRegion API can copy only one image of a 2DArray texture. However, the incorrect calculation happens on multi-images with rowsPerImage paddings. So 3D texture is the only texture type to be impacted.",
      "parentUuid": "d59a0181_a683d7dd",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14251ff2_2e33153e",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 365,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-15T14:16:32Z",
      "side": 1,
      "message": "nit: We don\u0027t need to do this overflow assert if we do bufferCopy.buffer-\u003eGetSize() - bufferCopy.offset \u003c requiredCopySizeByD3D12.\n\nWe no longer need the pointer argument if both workarounds use the last slice split method.",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 365,
        "endChar": 1
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f72e9a2a_f6ab4b3c",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 365,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-15T15:16:33Z",
      "side": 1,
      "message": "curious - what if we use GetAllocatedSize() ?",
      "range": {
        "startLine": 365,
        "startChar": 38,
        "endLine": 365,
        "endChar": 45
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba702c3e_610bd38d",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 365,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "GetAllocatedSize() requires size to be aligned for uniform buffer, it may slightly bigger that GetSize() and it is the real buffer size on particular backend. \n\nCopy operation doesn\u0027t need Uniform usage, but maybe we can use GetAllocatedSize() here to replace GetSize() on D3D12?",
      "parentUuid": "f72e9a2a_f6ab4b3c",
      "range": {
        "startLine": 365,
        "startChar": 38,
        "endLine": 365,
        "endChar": 45
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1336a37f_fd05da93",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 365,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14251ff2_2e33153e",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 365,
        "endChar": 1
      },
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a44bb33_07f5978a",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 906,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-15T14:16:32Z",
      "side": 1,
      "message": "I think both the logic here and at [1] could be moved inside RecordBufferTextureCopy since that helper function is used in both cases.\n\nThe workarounds don\u0027t need to be different AFAIU, we can copy the last slice separately in B-\u003eT and it will fix the issue too.",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d5c0332_05e20630",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 906,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-15T15:16:33Z",
      "side": 1,
      "message": "This would be great - then we don\u0027t need to make temporary allocations",
      "parentUuid": "3a44bb33_07f5978a",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498261eb_563ccb29",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 906,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2022-04-15T21:14:16Z",
      "side": 1,
      "message": "+1 to avoiding unnecessary, temporary allocations.",
      "parentUuid": "1d5c0332_05e20630",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6073adb_0835b5f0",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 906,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-04-19T05:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "498261eb_563ccb29",
      "revId": "ef73f0b8d95f51e235a49d395d434de8dabcbaa4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}