{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7e09e504_c97a6c7f",
        "filename": "src/tint/ast/storage_class.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-26T15:11:02Z",
      "side": 1,
      "message": "For pure-functions (don\u0027t use any templating) is there somewhere we can put them so they don\u0027t end up in the generaeted code?\n\nLike, maybe we have a storage_class.h and we generate an _impl that the .h includes?",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2deea2c_ff777a1f",
        "filename": "src/tint/ast/storage_class.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-26T19:33:29Z",
      "side": 1,
      "message": "I could do, but it\u0027s a trade off of having code where you expect it to be (but via a template), vs random `#include` which make finding this stuff hard.",
      "parentUuid": "7e09e504_c97a6c7f",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c424d8c_3c8a9ea0",
        "filename": "src/tint/ast/storage_class.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-27T00:16:23Z",
      "side": 1,
      "message": "Yup, but it\u0027s also a trade off between syntax highlighted code and non, heh. I\u0027m honestly not sure which is better, although if it was a general pattern it would be pretty quick to know where to look for the rest of the implementation. (We also have a history of `_impl` files.)",
      "parentUuid": "e2deea2c_ff777a1f",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed7a496_3485eb1d",
        "filename": "src/tint/ast/storage_class.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-27T08:57:12Z",
      "side": 1,
      "message": "It\u0027s not really an implementation though, it\u0027s just an inline helper, that really belongs next to the enum. The greatest barrier for modifying static text in the `.tmpl` file is having golang installed, which is pretty much a prerequisite for updating the expectations. The static text really doesn\u0027t require any knowledge of the template language or the rest of the dynamic generation stuff.\n\nI\u0027ve made it more explicit in the `.tmpl` file on how to regenerate on edits.\n\nIf you feel strongly that this should be external to the generated code, then I could add a `ast/storage_class_helpers.h` which this header includes, but I feel the pros to doing this are at least outweighed by the cons.",
      "parentUuid": "6c424d8c_3c8a9ea0",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a2fcfa5_69fbd953",
        "filename": "src/tint/ast/storage_class.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-27T14:17:40Z",
      "side": 1,
      "message": "I actually realized last night, we should just generate this helper, heh. The `intrinsic.def` file could easily annotate which types are host shareable.",
      "parentUuid": "4ed7a496_3485eb1d",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "416979de_e7011cb9",
        "filename": "src/tint/ast/storage_class.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-27T14:25:45Z",
      "side": 1,
      "message": "That\u0027s the spirit! ðŸ˜Š",
      "parentUuid": "4a2fcfa5_69fbd953",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a4034a5_6d74dae3",
        "filename": "src/tint/ast/storage_class_bench.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-26T15:11:02Z",
      "side": 1,
      "message": "nit: missing newlines after `namespace {`",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "948bc8db_8c02bda9",
        "filename": "src/tint/ast/storage_class_bench.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-26T19:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a4034a5_6d74dae3",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c2f60cd_86208aa7",
        "filename": "src/tint/ast/storage_class_bench.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-27T00:49:42Z",
      "side": 1,
      "message": "Failed to push?",
      "parentUuid": "948bc8db_8c02bda9",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a1f9379_b2665fbe",
        "filename": "src/tint/ast/storage_class_bench.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-27T08:57:12Z",
      "side": 1,
      "message": "Nope, I\u0027m just an idiot. Done. For realz.",
      "parentUuid": "7c2f60cd_86208aa7",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1f3870e_3a8d6c2e",
        "filename": "src/tint/templates/enums.tmpl.inc",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-26T15:11:02Z",
      "side": 1,
      "message": "nit: \u003d -1 ?",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ed78183_dc8e4336",
        "filename": "src/tint/templates/enums.tmpl.inc",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-26T19:26:24Z",
      "side": 1,
      "message": "I believe (and could be wrong) that `-1` can prevent the compiler from picking a smaller data type for the enum. There\u0027s no real need for anything to actually inspect the numerical value, so I\u0027m not sure it\u0027s worthwhile.",
      "parentUuid": "a1f3870e_3a8d6c2e",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6031d431_94aa559a",
        "filename": "src/tint/templates/enums.tmpl.inc",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-27T00:16:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1ed78183_dc8e4336",
      "revId": "f430377eb78e867a5853ad04fef86282a619598b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}