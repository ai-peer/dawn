{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "49494a4d_6200fc6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T16:46:27Z",
      "side": 1,
      "message": "@amaiorano@google.com, @jrprice@google.com PTAL!",
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42ef3396_aeb6b40e",
        "filename": "src/tint/utils/text/string_stream.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T19:23:26Z",
      "side": 1,
      "message": "A bit concerned about the need for copy ctor/assignment. I think it\u0027s because `StyledText` holds a `StringStream`, and it\u0027s copyable, but can we avoid making `StyledText` copyable?",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 63,
        "endChar": 38
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04daa03b_08d0df55",
        "filename": "src/tint/utils/text/string_stream.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T20:50:38Z",
      "side": 1,
      "message": "Possibly. There was definitely a place where copying was required. I\u0027ll make a note to see if I can make it move-only as a followup.",
      "parentUuid": "42ef3396_aeb6b40e",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 63,
        "endChar": 38
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ba93910_a8ce8639",
        "filename": "src/tint/utils/text/string_stream.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T21:00:12Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "04daa03b_08d0df55",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 63,
        "endChar": 38
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a20eb4ab_0a2f2d35",
        "filename": "src/tint/utils/text/styled_text_printer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T19:23:26Z",
      "side": 1,
      "message": "With only a single function, this feels like a good candidate for `StyledTextPrinter` to be a value type containing a `std::function\u003cvoid(const StyledText\u0026)\u003e` that gets bound to a lambda capturing the members being passed into the Create functions that implement the printing. This would reduce the inheritance boilerplate, as well as potentially be more performant in the cases where the print functions fit in the std::function small buffer, avoiding heap allocations (and no `std::unique_ptr`).",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "848c7e6c_3425cf64",
        "filename": "src/tint/utils/text/styled_text_printer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T20:50:38Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s much boilerplate - it\u0027s a pure virtual interface.\nYes, there\u0027s a heap allocation that we could avoid, but this is really only constructed once per run. I\u0027m not really convinced by the wins here, especially as this might grow to hold other virtual methods.",
      "parentUuid": "a20eb4ab_0a2f2d35",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cba8a0ab_5449db99",
        "filename": "src/tint/utils/text/styled_text_printer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T21:00:12Z",
      "side": 1,
      "message": "Well, by boilerplate, I mean the multiple .cc and .h files, class declarations and definitions, depedencies, etc. I was imagining all of this getting mostly collapsed to a single .cc file or two (if we need/want to split by platform).\n\nThe multiple virtual functions doesn\u0027t change much. StyledTextPrinter could expose multiple `std::function`s.\n\nBut your point about this being only constructed once per run is valid, so I won\u0027t fight this.",
      "parentUuid": "848c7e6c_3425cf64",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2dcc9f8_5f998084",
        "filename": "src/tint/utils/text/styled_text_printer_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T19:23:26Z",
      "side": 1,
      "message": "I\u0027m not sure I understand what this macro is for. Do we not want to test this always?",
      "range": {
        "startLine": 36,
        "startChar": 8,
        "endLine": 36,
        "endChar": 28
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53e39e1d_36de5114",
        "filename": "src/tint/utils/text/styled_text_printer_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T20:50:38Z",
      "side": 1,
      "message": "No. It prints text to stdout. It\u0027s annoying.",
      "parentUuid": "b2dcc9f8_5f998084",
      "range": {
        "startLine": 36,
        "startChar": 8,
        "endLine": 36,
        "endChar": 28
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9804d392_875c40a2",
        "filename": "src/tint/utils/text/styled_text_printer_windows.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T19:23:26Z",
      "side": 1,
      "message": "This looks unused, can we remove? If so, we probably don\u0027t need this struct at all, and can just return HANDLE in the function below.",
      "range": {
        "startLine": 42,
        "startChar": 9,
        "endLine": 42,
        "endChar": 28
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ea11c67_1ac66920",
        "filename": "src/tint/utils/text/styled_text_printer_windows.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T20:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9804d392_875c40a2",
      "range": {
        "startLine": 42,
        "startChar": 9,
        "endLine": 42,
        "endChar": 28
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc1870d6_9eac1973",
        "filename": "src/tint/utils/text/styled_text_printer_windows.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T19:23:26Z",
      "side": 1,
      "message": "suggest renaming to info",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 23
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "437892c6_64bd1c19",
        "filename": "src/tint/utils/text/styled_text_printer_windows.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T20:50:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "cc1870d6_9eac1973",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 23
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcfa6c28_64b1fb13",
        "filename": "src/tint/utils/text/text_style.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T19:23:26Z",
      "side": 1,
      "message": "This seems like an odd use of the plus operator, especially as it\u0027s not immediately obvious that this only ORs in the severity of the rhs. Our AI friend suggests renaming to \"WithSeverity\", which I think is a better idea.",
      "range": {
        "startLine": 95,
        "startChar": 14,
        "endLine": 95,
        "endChar": 23
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78823f11_94c0fd3e",
        "filename": "src/tint/utils/text/text_style.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-23T20:50:38Z",
      "side": 1,
      "message": "In a later change, it merges more than just severity. I\u0027d prefer to keep the operator, if that\u0027s okay.",
      "parentUuid": "fcfa6c28_64b1fb13",
      "range": {
        "startLine": 95,
        "startChar": 14,
        "endLine": 95,
        "endChar": 23
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af661c2e_9c4451d1",
        "filename": "src/tint/utils/text/text_style.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2024-02-23T21:00:12Z",
      "side": 1,
      "message": "Does it merge everything? I just feel like this is the poster child for why people hate C++: the misuse of operator overloading.",
      "parentUuid": "78823f11_94c0fd3e",
      "range": {
        "startLine": 95,
        "startChar": 14,
        "endLine": 95,
        "endChar": 23
      },
      "revId": "703ac03f6d7e889519b9bf58527beb73636b5556",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}