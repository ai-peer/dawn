{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "05377c18_780f1464",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-22T10:09:33Z",
      "side": 1,
      "message": "LGTM!\n\nIf CoreWindow is available outside of UWP, it would be nice to have a sample in a followup CL that we can use to test that the CoreWindow swapchain works.\n\nManualSwapChainTests could work, but could also be difficult to change for CoreWindow because it heavily relies on GLFW and GLFW doesn\u0027t support CoreWindow.",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b3b82da_d9c39ef5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-22T12:09:55Z",
      "side": 1,
      "message": "Currently I can only provide a Visual Studio project for examples. Need some time to figure it out how to integrate it with GN.\nAngle seems to mock a CoreWindow for testing. I\u0027ll take a look.",
      "parentUuid": "05377c18_780f1464",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9fea9cd_496a8ba4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000801
      },
      "writtenOn": "2021-04-23T10:23:45Z",
      "side": 1,
      "message": "There is no need for DAWN_PLATFORM_WINUWP define at all.\nThese COM API\u0027s are safe to use on older versions of Windows.\nThey are just addresses in interface vtbl after all.\n\nMy app uses customized Dawn in both UWP and Desktop builds.\nThe same exact binary of Dawn. The only change I\u0027ve made is CreateSwapChainForComposition support. And I need SwapChainForComposition in Desktop build as well, because it runs on XAML Islands.\n\nSwapChainForComposition is also very useful for classic HWND apps which prefer DirectComposition presentation without redirection bitmap.",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c0c7df_4218169d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-23T12:39:48Z",
      "side": 1,
      "message": "\"There is no need for DAWN_PLATFORM_WINUWP define at all\".\nBut we still need to separate code path like Dynamic libs loading and HWND related APIs are not going to compile in UWP. \nfor example: \nLoadLibraryA used in DynamicLib.cpp gets compiled only if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES)\nIsWindow() used for surface validation gets compiled only if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n\n\"The same exact binary of Dawn\"\nIs this binary are built without setting target_os\u003d\"winuwp\" ? If you are using a DLL compiling for win32 in a UWP app, I think LoadFunction() in PlatformFunction.cpp will failed because UWPs have a limited DLL search space. Have you done other things to make it work ?\n\n\"And I need SwapChainForComposition in Desktop build as well\"\nI will add SwapChainForComposition in another CL. This API supports creating swapchain for SwapChainPanel and IDCompositionVisual, but we currently decided to support only one of them.\nWhat do you think of using SwapChainPanel instead of IDCompositionVisual, since MS recommend using Windows.UI.Composition APIs instead of DirectComposition now.",
      "parentUuid": "b9fea9cd_496a8ba4",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14c70e18_7f4ff017",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-22T10:09:33Z",
      "side": 1,
      "message": "Is CoreWindow only available on UWP? I looked at https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Core.CoreWindow?view\u003dwinrt-19041 but can\u0027t tell where we know it is only available for UWP.",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cde87b8d_a52cd62c",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-22T12:01:56Z",
      "side": 1,
      "message": "CoreWindow is exposed as a WinRT classes so all win32 app can access it. But we can\u0027t create CoreWindow in win32 app.\nBut the main reason I make it available only in UWP is that I thought Dawn might be targeting older windows version(Win7/8/8.1), So I thought I\u0027d better not add WinRT related code path in Win32 compilation.",
      "parentUuid": "14c70e18_7f4ff017",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a0a5f5_ce43b704",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-22T13:10:25Z",
      "side": 1,
      "message": "I\u0027m not too familiar with the Windows SDK compatibility: aren\u0027t applications using newer version of the SDK able to contain calls to new APIs without breaking compatibility with older Windows? Rafael, do you know?",
      "parentUuid": "cde87b8d_a52cd62c",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f8a54f9_4d08d914",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-23T03:06:01Z",
      "side": 1,
      "message": "Is there a compatibility requirement for Win7/8.1 and older versions of Win10 ?\nI see a a comment in PlatformFunction.h saying \"Loads the functions required from the platform dynamically so that we don\u0027t need to rely on them being present in the system. For example linking against d3d12.lib would prevent dawn_native from loading on Windows 7 system where d3d12.dll doesn\u0027t exist.\" so I think we might be targeting Win7 as well.",
      "parentUuid": "88a0a5f5_ce43b704",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "664cfeb6_96a824a2",
        "filename": "src/dawn_native/Surface.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-22T10:09:33Z",
      "side": 1,
      "message": "I have some concerns about making each part of Surface compiled only when supported because it will make the file messy for not much gain. By keeping things untyped (void* here), the only #ifs needed are for ValidateSurfaceDescriptor.\n\nI understand this is to add ComPtr\u003c\u003e, but webgpu.h will ask that the Window is kept alive for the lifetime of the wgpu::Surface, so we don\u0027t need to take a reference.\n\nAustin: I\u0027d like a second opinion on this. Do you think the untyped version is best, or should we add #ifs for X11 and Metal too?",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f58248e7_1a6ff035",
        "filename": "src/dawn_native/Surface.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-22T12:01:56Z",
      "side": 1,
      "message": "I introduced this windows compilation path because I would like to store user\u0027s CoreWindow in ComPtr (Windows only type) as Rafael suggested in another CL.",
      "parentUuid": "664cfeb6_96a824a2",
      "revId": "b9fb221aab6e3e1002b4d03f155e5b4d68f79fef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}