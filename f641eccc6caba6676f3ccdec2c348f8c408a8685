{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ccc7ea14_78fc151c",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 690,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-11-07T13:21:18Z",
      "side": 1,
      "message": "The fact the diagnostic will mention overflow during a `-` operation, when the user didn\u0027t use the `-` operator is confusing. I\u0027d prefer we emitted an error, like:\n\n`constant value overflow while evaluating determinant` or something.\n\nThere are a few different ways you could do this, while preserving the existing binary operator diagnostic (error callback, overflow error result, etc). I don\u0027t particularly have strong preferences aside from being cautious about performance.",
      "range": {
        "startLine": 690,
        "startChar": 21,
        "endLine": 690,
        "endChar": 52
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0159c05d_9fcd70d5",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 690,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-07T14:07:17Z",
      "side": 1,
      "message": "Another option would be not to mention the operator at all, and just say that an overflow occured. That would be much simpler at this point, and we can expand this later to make it more specific?",
      "parentUuid": "ccc7ea14_78fc151c",
      "range": {
        "startLine": 690,
        "startChar": 21,
        "endLine": 690,
        "endChar": 52
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b103fce_69714810",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 690,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-07T14:36:58Z",
      "side": 1,
      "message": "While easier, I think losing the extra info for what we have right now would be a shame.",
      "parentUuid": "0159c05d_9fcd70d5",
      "range": {
        "startLine": 690,
        "startChar": 21,
        "endLine": 690,
        "endChar": 52
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e87bb233_b85d7971",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 690,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-07T18:55:46Z",
      "side": 1,
      "message": "As discussed offline, I\u0027ll do this as a follow-up, as I\u0027ll tackle it as a larger change: https://bugs.chromium.org/p/tint/issues/detail?id\u003d1751",
      "parentUuid": "2b103fce_69714810",
      "range": {
        "startLine": 690,
        "startChar": 21,
        "endLine": 690,
        "endChar": 52
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "451b4563_cde17d36",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1876,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-11-07T13:21:18Z",
      "side": 1,
      "message": "Why do we need this? Can\u0027t you inline the vector as an argument?",
      "range": {
        "startLine": 1875,
        "startChar": 0,
        "endLine": 1876,
        "endChar": 61
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c54cb2df_90e8c9b8",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1876,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-07T14:07:17Z",
      "side": 1,
      "message": "Yeah, sorry, this happened when I tried inlining the call with `utils::Vector{x.Get(), y.Get(), z.Get()}` as an arg, which failed because it would require covariance, but `sem::Constant` is not a `Castable`. Will clean up.",
      "parentUuid": "451b4563_cde17d36",
      "range": {
        "startLine": 1875,
        "startChar": 0,
        "endLine": 1876,
        "endChar": 61
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "127005da_823cf511",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1876,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-07T18:55:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c54cb2df_90e8c9b8",
      "range": {
        "startLine": 1875,
        "startChar": 0,
        "endLine": 1876,
        "endChar": 61
      },
      "revId": "f641eccc6caba6676f3ccdec2c348f8c408a8685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}