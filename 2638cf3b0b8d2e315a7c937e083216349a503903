{
  "comments": [
    {
      "key": {
        "uuid": "900fddc5_8f27c0fd",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:14:22Z",
      "side": 1,
      "message": "nit: no need to allocated the string, we can just have the if at [1] and output conditionally.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 186,
        "endChar": 9
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cd248ea_55375360",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2019-07-05T09:29:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "900fddc5_8f27c0fd",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 186,
        "endChar": 9
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef3f8714_a0c613c2",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:14:22Z",
      "side": 1,
      "message": "[1]",
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36677cd8_a0024091",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2019-07-05T09:29:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef3f8714_a0c613c2",
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43535ff3_f5737488",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:14:22Z",
      "side": 1,
      "message": "nit: no need to check for Null because it is never used in end2end tests. Since the vendor id is set by command line args, maybe we can assume that when the user passes it we can skip the OpenGL backend and remove that condition too?",
      "range": {
        "startLine": 350,
        "startChar": 40,
        "endLine": 351,
        "endChar": 65
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aa9448a_9e035407",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2019-07-03T05:21:08Z",
      "side": 1,
      "message": "I\u0027m not sure if you mean that we can skip all tests on OpenGL backend when the user passes vendor id. And if the user passes vendor id with 0, do we also need skip Vulkan, Metal and D3D12? Error will be thrown becuase of no adapter found for these backends.",
      "parentUuid": "43535ff3_f5737488",
      "range": {
        "startLine": 350,
        "startChar": 40,
        "endLine": 351,
        "endChar": 65
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "904bedb3_60869619",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-03T12:03:37Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure if you mean that we can skip all tests on OpenGL backend when the user passes vendor id.\n\nEither way is fine, it mostly depends on what your usecase is.\n\n\u003e And if the user passes vendor id with 0, do we also need skip Vulkan, Metal and D3D12? Error will be thrown becuase of no adapter found for these backends.\n\nSee comment above that asks to not use 0 to denote that the flag wasn\u0027t passed.",
      "parentUuid": "1aa9448a_9e035407",
      "range": {
        "startLine": 350,
        "startChar": 40,
        "endLine": 351,
        "endChar": 65
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f280b86_e22c9491",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-03T19:22:41Z",
      "side": 1,
      "message": "I was a little confused reading this conversation. To clarify:\n\n1. We should have a separate boolean to indicate if a filter was set because vendor id 0 may be valid. Alternatively, std::optional.\n2. Because OpenGL doesn\u0027t have PCIInfo, we should do \n   `if (UseVendorIdFilter() \u0026\u0026 backendType\u003d\u003dOpenGL) { continue; }`.\n\n   This will skip the OpenGL backend completely when vendor id is passed.\n   Right now, the code will always run the OpenGL backend regardless of the vendor id passed.\n\nIf that\u0027s the conclusion of the discussion, LGTM.",
      "parentUuid": "904bedb3_60869619",
      "range": {
        "startLine": 350,
        "startChar": 40,
        "endLine": 351,
        "endChar": 65
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00810a4d_c1fe34fd",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2019-07-05T09:29:21Z",
      "side": 1,
      "message": "@Corentin, thanks for your explanations. @Austin, your understanding is correct.\nBut I found it\u0027s not easy to skip all tests for OpenGL, which had been inintiallized by DAWN_INSTANTIATE_TEST. If we only skip OpenGL backend when choosing the adapters, the en2end tests will fail with unavailable adapter for OpenGL backend. So this condition of \u0027backendType !\u003d dawn_native::BackendType::OpenGL\u0027 will be kept, to make sure the tests could get an adapter for OpenGL regardless of the vendor id passed. TODO: I will update here when we can get vendor id from vendor name for OpenGL and Metal.",
      "parentUuid": "2f280b86_e22c9491",
      "range": {
        "startLine": 350,
        "startChar": 40,
        "endLine": 351,
        "endChar": 65
      },
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c70ebc0e_1daa9667",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T09:14:22Z",
      "side": 1,
      "message": "PCI vendor ID of 0 is probably valid. Can we have both a mVendorIdFilter and boolean mVendorIfFilterSet?",
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3195d2e9_7d8ce5eb",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2019-07-05T09:29:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c70ebc0e_1daa9667",
      "revId": "2638cf3b0b8d2e315a7c937e083216349a503903",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}