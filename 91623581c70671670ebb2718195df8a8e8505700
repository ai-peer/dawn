{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4f848af8_b985371a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T00:26:32Z",
      "side": 1,
      "message": "There\u0027s still one flaky failure on the new test WorkgroupSizeValidationTest.OverridesWithValidDefault I haven\u0027t figured out why (The validation is called in backend code but is essentially backend agnostic. so it shouldn\u0027t be. Shader Cache?)\nBut send out for review first.",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edb2f467_c0c89e99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "I\u0027m not sure - able to reproduce locally?\n\notherwise I might try updating DawnTest.cpp to set dump_shaders and see what the spirv looks like. If it\u0027s not generating a validation error, it should be generating spirv with some values for the workgroup size",
      "parentUuid": "4f848af8_b985371a",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfd8390b_57ac4ab0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T22:55:30Z",
      "side": 1,
      "message": "[1]",
      "parentUuid": "edb2f467_c0c89e99",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9646c1c7_1fe451f4",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 26
      },
      "lineNbr": 573,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "what happened to `entryPoint.num_workgroups_used` ?",
      "range": {
        "startLine": 573,
        "startChar": 38,
        "endLine": 573,
        "endChar": 42
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e13f335a_4a8e87ee",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 26
      },
      "lineNbr": 573,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9646c1c7_1fe451f4",
      "range": {
        "startLine": 573,
        "startChar": 38,
        "endLine": 573,
        "endChar": 42
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd8fee4b_26163673",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 26
      },
      "lineNbr": 848,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "unit: perhaps, if we don\u0027t want the \"tint::inspector\" namespace to get exposed outside this function, we could return a wgpu::Extent3D here instead",
      "range": {
        "startLine": 848,
        "startChar": 14,
        "endLine": 848,
        "endChar": 44
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5836a249_b4709c73",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 26
      },
      "lineNbr": 848,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd8fee4b_26163673",
      "range": {
        "startLine": 848,
        "startChar": 14,
        "endLine": 848,
        "endChar": 44
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f2669b_445b906e",
        "filename": "src/dawn/native/ShaderModule.h",
        "patchSetId": 26
      },
      "lineNbr": 288,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "do we still need the name \"raw\" now that there isn\u0027t another getter elsewhere for it?",
      "range": {
        "startLine": 288,
        "startChar": 25,
        "endLine": 288,
        "endChar": 42
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49b12fe2_3af94d72",
        "filename": "src/dawn/native/ShaderModule.h",
        "patchSetId": 26
      },
      "lineNbr": 288,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0f2669b_445b906e",
      "range": {
        "startLine": 288,
        "startChar": 25,
        "endLine": 288,
        "endChar": 42
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "634071b3_e579bf0e",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "unit: add a static assert about the offset. sizeof unfortunately probably shouldn\u0027t be done since the sizeof std::unordered_map depends on the platform",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e720a95e_938f4974",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Like this?\nstatic_assert(offsetof(tint::transform::SubstituteOverride::Config, map) \u003d\u003d 0,\n...);\nThat didn\u0027t pass and Config is an inheirtance of Castable. I don\u0027t see a static assert for VertexPulling::Config",
      "parentUuid": "634071b3_e579bf0e",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9f5d001_56ac18f0",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T23:07:37Z",
      "side": 1,
      "message": "oh.. yea won\u0027t work since it inherits Castable :(",
      "parentUuid": "e720a95e_938f4974",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e5af650_e4b62564",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-01T09:51:22Z",
      "side": 1,
      "message": "Is this all about ensuring that future changes to the Tint structures don\u0027t accidentally get missed here?\n\nIf so, perhaps we can move the contract over to Tint\u0027s side. Something like this:\n\n```\ntemplate\u003ctypename SERIALIZER\u003e\nvoid BindingPoints::Serialize(SERIALIZER\u0026\u0026 s) {\n    s \u003c\u003c plane_1 \u003c\u003c params;\n}\n\ntemplate\u003ctypename SERIALIZER\u003e\nvoid SubstituteOverride::Serialize(SERIALIZER\u0026\u0026 s) {\n    s \u003c\u003c map;\n}\n```\n\netc.\n\nAt least then the serialization contract is next to the field declarations.\n\nWe could also use `operator\u003d\u003d()` that\u0027s declared on (most) of these types to ensure that serialization and deserialization give back the same results. That said, I\u0027m not sure if these are deserialized, so maybe not.",
      "parentUuid": "a9f5d001_56ac18f0",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8cfc7b4_9d55fed8",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-09-01T11:39:12Z",
      "side": 1,
      "message": "I now see crbug.com/tint/1640.",
      "parentUuid": "7e5af650_e4b62564",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fdd86e6_789cf019",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-01T15:55:33Z",
      "side": 1,
      "message": "Potential simplification:\nhttps://dawn-review.googlesource.com/c/dawn/+/101001",
      "parentUuid": "b8cfc7b4_9d55fed8",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a1493f_f23e7ac4",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "unit: add a static assert that it\u0027s located at offset 0 and about the sizeof tint::OverrideId",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec2f6753_3b1849d5",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 26
      },
      "lineNbr": 79,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6a1493f_f23e7ac4",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c69939_f7cfeeee",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "unit: here and the rest, perhaps put it next to the substituteOverrideConfig",
      "range": {
        "startLine": 99,
        "startChar": 5,
        "endLine": 103,
        "endChar": 47
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6770be13_7fe30460",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 103,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6c69939_f7cfeeee",
      "range": {
        "startLine": 99,
        "startChar": 5,
        "endLine": 103,
        "endChar": 47
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0f0d8af_89a61888",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 376,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "nifty",
      "range": {
        "startLine": 376,
        "startChar": 39,
        "endLine": 376,
        "endChar": 40
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33cd30c4_a48e4d08",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 376,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "sorry didn\u0027t get this. Do you think it\u0027s better to change to a regular variable name like `tint::inspector::WorkgroupSize workgroupSize;`?",
      "parentUuid": "b0f0d8af_89a61888",
      "range": {
        "startLine": 376,
        "startChar": 39,
        "endLine": 376,
        "endChar": 40
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "486ac7de_df5b2c15",
        "filename": "src/dawn/native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 376,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T23:07:37Z",
      "side": 1,
      "message": "nah, I just think it\u0027s cool syntax because we don\u0027t really care about it.",
      "parentUuid": "33cd30c4_a48e4d08",
      "range": {
        "startLine": 376,
        "startChar": 39,
        "endLine": 376,
        "endChar": 40
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18521f67_53cecfaa",
        "filename": "src/dawn/tests/end2end/ShaderValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "if const work in tint is already done, we should have something where we have an override x, and a const value y \u003d x + 1, and then pass y to @workgroup_size\n\nand the const eval should propagate it (I think)",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "470d969e_3368491f",
        "filename": "src/dawn/tests/end2end/ShaderValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 75,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Turns out override x:u32; const y: u32 \u003d x + 1u; will fail at tint shader creation before substitute override transform. (\u0027const\u0027 initializer must be constant expression)",
      "parentUuid": "18521f67_53cecfaa",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d719bb84_3b08b029",
        "filename": "src/dawn/tests/end2end/ShaderValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 123,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "should we use a value that is not 1? since 1 is the default",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 123,
        "endChar": 0
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5f72392_5bd80b5d",
        "filename": "src/dawn/tests/end2end/ShaderValidationTests.cpp",
        "patchSetId": 26
      },
      "lineNbr": 123,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d719bb84_3b08b029",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 123,
        "endChar": 0
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1a5cac0_8b432367",
        "filename": "src/tint/inspector/inspector.cc",
        "patchSetId": 26
      },
      "lineNbr": 573,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "probably, prefer std::optional instead of default initializing to be more explicit",
      "range": {
        "startLine": 573,
        "startChar": 15,
        "endLine": 573,
        "endChar": 28
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "669a1dfb_39aa65aa",
        "filename": "src/tint/inspector/inspector.cc",
        "patchSetId": 26
      },
      "lineNbr": 573,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1a5cac0_8b432367",
      "range": {
        "startLine": 573,
        "startChar": 15,
        "endLine": 573,
        "endChar": 28
      },
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e474cd_62b8a6dc",
        "filename": "src/tint/inspector/inspector.cc",
        "patchSetId": 26
      },
      "lineNbr": 579,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T16:58:27Z",
      "side": 1,
      "message": "should check that they are not overridable_const and return std::nullopt if they are.\n\nIn Dawn, after running SubstituteOverrides, we can ASSERT it is not nullopt",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aeaae33c_704c9e00",
        "filename": "src/tint/inspector/inspector.cc",
        "patchSetId": 26
      },
      "lineNbr": 579,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-31T21:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6e474cd_62b8a6dc",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b2f2494_92a780be",
        "filename": "src/tint/inspector/inspector.cc",
        "patchSetId": 26
      },
      "lineNbr": 579,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T23:07:37Z",
      "side": 1,
      "message": "still don\u0027t see checking overridable_const and returning nullopt?",
      "parentUuid": "aeaae33c_704c9e00",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d63d133_a7683ca1",
        "filename": "src/tint/inspector/inspector.cc",
        "patchSetId": 26
      },
      "lineNbr": 579,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-09-02T00:59:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b2f2494_92a780be",
      "revId": "91623581c70671670ebb2718195df8a8e8505700",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}