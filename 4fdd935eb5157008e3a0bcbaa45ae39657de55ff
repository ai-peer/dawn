{
  "comments": [
    {
      "key": {
        "uuid": "06db46b9_6f546d90",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 25
      },
      "lineNbr": 40,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-17T19:00:37Z",
      "side": 1,
      "message": "If we have separate heap serials, then these asserts will be hit if one heap changes and the other doesn\u0027t. Instead, we could update these serials later on in the function and make a few other changes in this function. Comments inline.",
      "range": {
        "startLine": 36,
        "startChar": 8,
        "endLine": 40,
        "endChar": 47
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3e32ca1_e17fe3df",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 25
      },
      "lineNbr": 40,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-12-17T19:25:46Z",
      "side": 1,
      "message": "I think only these asserts need to be removed - the current scheme should still work since it acts on the whole bindgroup. The optimization to split things was left as a TODO.",
      "parentUuid": "06db46b9_6f546d90",
      "range": {
        "startLine": 36,
        "startChar": 8,
        "endLine": 40,
        "endChar": 47
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aae657b1_d134fb01",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 25
      },
      "lineNbr": 56,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-17T19:00:37Z",
      "side": 1,
      "message": "Maybe add something like:\n\ncase wgpu::BindingType::UniformBuffer: \ncase wgpu::BindingType::StorageBuffer:\ncase wgpu::BindingType::ReadonlyStorageBuffer:\ncase wgpu::BindingType::SampledTexture: \n  if (cbvSrvUavHeapSerial \u003d\u003d mCbvSrvUavHeapSerial) {\n    break;\n  }\n  // fallthrough\ncase wgpu::BindingType::Sampler:\n  if (samplerHeapSerial \u003d\u003d samplerHeapSerial) {\n    break;\n  }\n  // fallthrough\n// \u003c existing case code \u003e",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 49
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fff1042_5a0916aa",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 25
      },
      "lineNbr": 155,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-17T19:00:37Z",
      "side": 1,
      "message": "And then, gate this around whether or not the serial changed -- and update mCbvSrvUavHeapSerial at the end of the function",
      "range": {
        "startLine": 142,
        "startChar": 8,
        "endLine": 155,
        "endChar": 53
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e30911cc_3b5e75c7",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 25
      },
      "lineNbr": 100,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-17T19:00:37Z",
      "side": 1,
      "message": "Shouldn\u0027t we check these separately and increment the dirty counts separately?",
      "range": {
        "startLine": 100,
        "startChar": 44,
        "endLine": 100,
        "endChar": 82
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5505e38_a26fddd9",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 25
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-17T19:00:37Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 89,
        "startChar": 37,
        "endLine": 89,
        "endChar": 72
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f73fd4e8_d0f2d676",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 25
      },
      "lineNbr": 117,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-17T19:00:37Z",
      "side": 1,
      "message": "This is the same queue-level serial from [1]. Shouldn\u0027t this instead be something like ++heapInfo-\u003eheapSerial ?",
      "range": {
        "startLine": 117,
        "startChar": 64,
        "endLine": 117,
        "endChar": 77
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e42d14e_333ddf19",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 25
      },
      "lineNbr": 117,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-12-17T19:25:46Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "f73fd4e8_d0f2d676",
      "range": {
        "startLine": 117,
        "startChar": 64,
        "endLine": 117,
        "endChar": 77
      },
      "revId": "4fdd935eb5157008e3a0bcbaa45ae39657de55ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}