{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "28b1c05d_9e9a6cba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T15:13:00Z",
      "side": 1,
      "message": "PTAL. I think this CL doesn\u0027t really depend on the multithreaded tests CL.",
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12e12898_ca126659",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:16:01Z",
      "side": 1,
      "message": "I think that checking this against nullptr and assigning it to nullptr in DestroyImpl can race. We check it\u0027s non-null, then it\u0027s set to null, then we dereference a nullptr trying to do mBackendDevice-\u003eGetScopedLock.\nIt can race because externally calling ExternalImageDXGI::IsValid can race with ExternalImageDXGIImpl::DestroyImpl.\n\nTo fix this, maybe we can just have an atomic isValid boolean.\n\nBut, it would be better if we did https://crbug.com/dawn/1745 so the object lifetime tracking is consistent with the other objects.\n\nSee how destruction of other objects is handled [here](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/ObjectBase.cpp;l\u003d55;drc\u003d2dfb6431910db3004672ccb94df3ce09d13e8770;bpv\u003d0;bpt\u003d1?q\u003dApiObjectList\u0026ss\u003dchromium%2Fchromium%2Fsrc)\n\nIt\u0027s more tech debt to add extra synchronization here when we\u0027ll rework it in the future. I suppose we can have a small fix for now, then do dawn:1745, then reimplement ExternalImageDXGI on top of \"WGPUSharedImageDXGI\", then switch Chrome to use WGPUSharedImageDXGI instead of ExternalImageDXGI.",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 33
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0da1bff0_c1f4eeac",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-07T06:02:42Z",
      "side": 1,
      "message": "`mBackendDevice` device is only set to a value in ctor. Can we just set it to null in dtor instead of `Destroy`?",
      "parentUuid": "12e12898_ca126659",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 33
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94962a63_5c526ad1",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T06:06:17Z",
      "side": 1,
      "message": "I think that should work as well.",
      "parentUuid": "0da1bff0_c1f4eeac",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 33
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecf7eb95_cea6c38c",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:24:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94962a63_5c526ad1",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 33
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7eecd61b_468ba493",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:29:38Z",
      "side": 1,
      "message": "Just want to confirm with @sunnyps@chromium.org.\nIs there any problem if we set `mBackendDevice` to null in dtor instead of `Destroy`?",
      "parentUuid": "ecf7eb95_cea6c38c",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 33
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59fc8ef8_c66b9395",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1136,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T06:06:17Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 1134,
        "startChar": 0,
        "endLine": 1136,
        "endChar": 0
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787360aa_24006029",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1159,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:16:01Z",
      "side": 1,
      "message": "here, this wait could be issued before the signal from ClearD3D11Texture is issued on the CPU side - is that well-defined behavior by D3D? I\u0027m not sure. It\u0027s not how Chromium uses things. Chrome uses SyncTokens to ensure we never enqueue a wait that we haven\u0027t enqueued a signal for yet.\n\nThis could be why it hangs with WARP",
      "range": {
        "startLine": 1159,
        "startChar": 8,
        "endLine": 1159,
        "endChar": 31
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f30c4df_26d23c8e",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1159,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-07T06:02:42Z",
      "side": 1,
      "message": "Fence should work that way. All of theses are using GPU to access the texture (there is no CPU works involved), so the GPU will just wait until the fence signaled value become the desired value before executing the next commands. It\u0027s how metal\u0027s `MTLEvent` work too (their doc mentioned that the wait can be encoded even before the signal command is encoded on another thread). I don\u0027t see how is D3D fence any different. I would defeat the multithreading capabilities of these APIs anw.\n\nI used this scenario to test even though it might not be the way chrome works atm because I want to see there is no problem if we issues the commands in parallel on CPU. Whereas if doing chrome way every thing will just be serialized on CPU side, do work A then do work B.\n\nWhen did the hang happen with WARP?",
      "parentUuid": "787360aa_24006029",
      "range": {
        "startLine": 1159,
        "startChar": 8,
        "endLine": 1159,
        "endChar": 31
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6ca6133_79cea2e2",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1159,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T06:06:17Z",
      "side": 1,
      "message": "this comment [1]\n\nI guess you copy-pasted the comment from someone else :)",
      "parentUuid": "6f30c4df_26d23c8e",
      "range": {
        "startLine": 1159,
        "startChar": 8,
        "endLine": 1159,
        "endChar": 31
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2884f6f_aed3a57a",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1159,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-07T06:17:45Z",
      "side": 1,
      "message": "Oh yeah, this CL is on gerrit for a long time that I forgot the hang (or how I added the suppression in the code) happened. Probably because it already existed in single threaded tests.",
      "parentUuid": "e6ca6133_79cea2e2",
      "range": {
        "startLine": 1159,
        "startChar": 8,
        "endLine": 1159,
        "endChar": 31
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1542157c_325d021a",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1159,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:24:26Z",
      "side": 1,
      "message": "The test has been moved to https://dawn-review.googlesource.com/c/dawn/+/122060",
      "parentUuid": "c2884f6f_aed3a57a",
      "range": {
        "startLine": 1159,
        "startChar": 8,
        "endLine": 1159,
        "endChar": 31
      },
      "revId": "9adc7ce41c5e1411e0056bca43024f73e6de5748",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}