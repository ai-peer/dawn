{
  "comments": [
    {
      "key": {
        "uuid": "c5898421_3c8ed34b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000258
      },
      "writtenOn": "2018-11-08T19:13:17Z",
      "side": 1,
      "message": "I believe we\u0027re always running the fuzzers with `ASAN_OPTIONS\u003ddetect_odr_violation\u003d0`. Would that help?",
      "range": {
        "startLine": 32,
        "startChar": 17,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "927ae9c9_494209f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "I found running locally that didn\u0027t appear to resolve the issue and I could find a way to make that work. Additionally the changes to turn on exception handling were more invasive and probably less supported, since other part of the Chromium eco-system don\u0027t use them.",
      "parentUuid": "c5898421_3c8ed34b",
      "range": {
        "startLine": 32,
        "startChar": 17,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27b3a6a1_9e742ef1",
        "filename": "src/fuzzers/DawnSPIRVCrossFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1000258
      },
      "writtenOn": "2018-11-08T19:13:17Z",
      "side": 1,
      "message": "I think that this needs to be done only once, not for every input coming from a fuzzing engine. Am I wrong?",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 66,
        "endChar": 20
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "333167c6_2ae1aa06",
        "filename": "src/fuzzers/DawnSPIRVCrossFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "Given that I have had to change to suppressing all signal, probably not, since we want code not under test to have the chance to send signals.",
      "parentUuid": "27b3a6a1_9e742ef1",
      "range": {
        "startLine": 63,
        "startChar": 8,
        "endLine": 66,
        "endChar": 20
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37458d13_c9032b22",
        "filename": "src/fuzzers/DawnSPIRVCrossFuzzer.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000258
      },
      "writtenOn": "2018-11-08T19:13:17Z",
      "side": 1,
      "message": "would std::function be a better fit here?",
      "range": {
        "startLine": 20,
        "startChar": 46,
        "endLine": 20,
        "endChar": 80
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4888235b_5e239803",
        "filename": "src/fuzzers/DawnSPIRVCrossFuzzer.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37458d13_c9032b22",
      "range": {
        "startLine": 20,
        "startChar": 46,
        "endLine": 20,
        "endChar": 80
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfbcaf11_ace19a2a",
        "filename": "src/fuzzers/DawnSPIRVCrossHLSLFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000258
      },
      "writtenOn": "2018-11-08T19:13:17Z",
      "side": 1,
      "message": "Would it make sense to fuzz these values as well?",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 33,
        "endChar": 47
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fba07ac_a27f0c61",
        "filename": "src/fuzzers/DawnSPIRVCrossHLSLFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "This originally came from discussions with Dan before starting work on this. It was meant to be a trade off between covering every possible input that SPIRV-Cross could see and getting fast coverage of that paths that Dawn was using, since it controls the options.\n\nI have added another set of fuzzers that vary both the options and the input data.",
      "parentUuid": "dfbcaf11_ace19a2a",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 33,
        "endChar": 47
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4a26936_4c6bbefc",
        "filename": "src/fuzzers/DawnSPIRVCrossHLSLFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000258
      },
      "writtenOn": "2018-11-08T19:13:17Z",
      "side": 1,
      "message": "And this? If not, would be nice to have a comment explaining why it must be \"51\".",
      "range": {
        "startLine": 37,
        "startChar": 21,
        "endLine": 37,
        "endChar": 39
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd734946_c69b33ef",
        "filename": "src/fuzzers/DawnSPIRVCrossHLSLFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "I honestly not sure why \u002751\u0027, it was what Dawn actually does. I have updated the comment to hopefully make it clearer where these values come from.",
      "parentUuid": "f4a26936_4c6bbefc",
      "range": {
        "startLine": 37,
        "startChar": 21,
        "endLine": 37,
        "endChar": 39
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0043a36_0899322a",
        "filename": "src/fuzzers/DawnSPIRVCrossMSLFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000258
      },
      "writtenOn": "2018-11-08T19:13:17Z",
      "side": 1,
      "message": "Same question",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 42
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6102990_8ea9f605",
        "filename": "src/fuzzers/DawnSPIRVCrossMSLFuzzer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "Same answer :-D",
      "parentUuid": "b0043a36_0899322a",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 42
      },
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e15621e_aeab3b26",
        "filename": "third_party/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 360,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-11-09T14:51:29Z",
      "side": 1,
      "message": "Instead of adding a target we could maybe add conditional with `|| use_fuzzing_engine` like the ANGLE translator: https://cs.chromium.org/chromium/src/third_party/angle/BUILD.gn?type\u003dcs\u0026q\u003dtranslator_fuzzer\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d316",
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faae41d1_6ed22004",
        "filename": "third_party/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 360,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2018-11-09T16:27:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e15621e_aeab3b26",
      "revId": "4d9cf8fd5417a010f533a88ac84ff7ea9f2bb51c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}