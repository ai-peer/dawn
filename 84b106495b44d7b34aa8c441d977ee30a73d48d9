{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ae67048e_f1f08765",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-07-26T10:20:43Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a68f628_77597fc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "LGTM",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a708161_e789373a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-26T19:23:30Z",
      "side": 1,
      "message": "No additional comments",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98dbfd70_c5e6dc97",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "u-nit: the string could be reflowed to be nicer.",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02dc0162_0e3c72a2",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-07-27T05:21:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98dbfd70_c5e6dc97",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fad07cb5_f1a1b7b3",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "How do we make sure that the buffer is aligned to 512 when it is suballocated in the BuddyMemoryAllocator? I think we could make the size max(512, tempBufferSize) and ASSERT it afterwards. Because of how the buffer memory allocator work, it should ensure that the start offset of the buffer is aligned to 512.",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc21979d_33942502",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-07-27T05:21:00Z",
      "side": 1,
      "message": "Sry I failed to catch your point...  I see all the buffers are created either with CreatePlacedResource() or CreateCommittedResource(), not created from an existing buffer, so the alignment on the heap should not affect the buffer used here?",
      "parentUuid": "fad07cb5_f1a1b7b3",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef8e5a61_8afedf1d",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-27T16:09:49Z",
      "side": 1,
      "message": "CreatePlacedResource tells D3D12 to use a range of memory for the backing of a buffer resource. I assume that the hardware constraint that D3D12 tried to surface with this validation is that the alignment must be 512 in memory, not in the specific buffer (otherwise we could alias the buffer for example and make the error go away. I\u0027m not suggesting we do that though ^^). I\u0027ll ask on the directx discord.",
      "parentUuid": "dc21979d_33942502",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "446a4265_3bfdb92f",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-07-28T02:31:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef8e5a61_8afedf1d",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0271369c_b38a4c6f",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-28T06:52:43Z",
      "side": 1,
      "message": "Rafael, can you forward this question to someone on the D3D12 side? (Jesse?) I wasn\u0027t able to get an answer on the discord.\n\n\u003e Is the constraint from D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT checked against the offset of the data in the buffer, or against the virtual memory address corresponding to that offset? For example is it allowed to: create a heap (with base VA aligned to more than 512 I assume), then place a buffer at offset 256 of that heap, then copy buffer-\u003etexture at offset 0 of that buffer?",
      "parentUuid": "446a4265_3bfdb92f",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec9109e6_732d121e",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-04T20:02:01Z",
      "side": 1,
      "message": "Based on the responses from Jesse, I think this is good to go!\n\nI might suggest adding a comment though that the virtual address is also aligned to 512 because D3D12 aligns the entire buffer to at least 64Kb. If you want to be extra safe, you could ASSERT that buffer-\u003eGetVA() is aligned.",
      "parentUuid": "0271369c_b38a4c6f",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9d22f0c_63d81521",
        "filename": "src/dawn/native/d3d12/D3D12Info.cpp",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:25:11Z",
      "side": 1,
      "message": "u-u-nit: can we put this before options4 so in the future options are queried in increasing order?",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21176194_89db0e98",
        "filename": "src/dawn/native/d3d12/D3D12Info.cpp",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-27T16:09:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9d22f0c_63d81521",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3626d0d_218ce3d2",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "Maybe in the future we should check for https://devblogs.microsoft.com/directx/agility-sdk-1-602-0/#buffer-texture-copy-pitch-and-offset-alignment as well since it will allow skipping the texture splitting entirely! Can we have a TODO?",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d9c4394_77564c15",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-07-27T05:21:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3626d0d_218ce3d2",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}