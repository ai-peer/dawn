{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ae67048e_f1f08765",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2022-07-26T10:20:43Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a68f628_77597fc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "LGTM",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98dbfd70_c5e6dc97",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "u-nit: the string could be reflowed to be nicer.",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fad07cb5_f1a1b7b3",
        "filename": "src/dawn/native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "How do we make sure that the buffer is aligned to 512 when it is suballocated in the BuddyMemoryAllocator? I think we could make the size max(512, tempBufferSize) and ASSERT it afterwards. Because of how the buffer memory allocator work, it should ensure that the start offset of the buffer is aligned to 512.",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9d22f0c_63d81521",
        "filename": "src/dawn/native/d3d12/D3D12Info.cpp",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:25:11Z",
      "side": 1,
      "message": "u-u-nit: can we put this before options4 so in the future options are queried in increasing order?",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3626d0d_218ce3d2",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-26T15:24:05Z",
      "side": 1,
      "message": "Maybe in the future we should check for https://devblogs.microsoft.com/directx/agility-sdk-1-602-0/#buffer-texture-copy-pitch-and-offset-alignment as well since it will allow skipping the texture splitting entirely! Can we have a TODO?",
      "revId": "84b106495b44d7b34aa8c441d977ee30a73d48d9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}