{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bd2cf08c_4194f576",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-02-15T00:49:47Z",
      "side": 1,
      "message": "This is a tiny fix about TexelBlockInfo in Dawn. I think Depth24plusStencil8 should be supported and return a meaningful value when calling GetTexelBlockSizeInBytes(), while Depth24UnormStencil8 can return nothing and hit UNREACHABLE() because it is not fully supported yet (looks like Hao is working on this). \n\nPTAL. Thanks!\n\nBTW, it turns out that there are already two places about TexelBlockInfo: one is in dawn/native/Format.h|.cpp, another is this one (dawn/utils/TextureUtils.h|.cpp and TestUtils.h|.cpp). We may need to refactor all of these in future. Otherwise, we need to update more-than-one places for the same thing. ",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c6a9ef2_18fa9e18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-15T01:02:43Z",
      "side": 1,
      "message": "we only use TextureUtils in tests, right?\n\nI think Depth24UnormStencil8 should rightly be 4. Depth24plusStencil8 should not because we don\u0027t know if it depth is backed by 24unorm or 32float.\n\nI believe these helpers overall are used to upload texture data. It wouldn\u0027t make sense to return a size for Depth24plusStencil8 since we can\u0027t copy to the depth channel using the WebGPU API.",
      "parentUuid": "bd2cf08c_4194f576",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c065f8f_64e0f3c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-02-15T01:22:18Z",
      "side": 1,
      "message": "I notice depth24plus was already returning 4. This is also questionable, just kind of works because depth24plus is always 3-4 bytes with a 4-byte stride. If we can remove the unsized AND multiaspect formats from here it would be less confusing.\n\nwriteTexture isn\u0027t supposed to work on unsized formats (although we have considered it in the past, with a format conversion). There is a bug in the spec where it assumes the format is sized before calling into \"validating linear texture data\": https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture\nIn fact we might be missing the equivalent validation in copyBufferToTexture etc as well.",
      "parentUuid": "6c6a9ef2_18fa9e18",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f22730f_b4c1a221",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-02-15T01:23:17Z",
      "side": 1,
      "message": "Yes. TextureUtils is only used in tests. Dawn tests doesn\u0027t require full coverage, and it doesn\u0027t test Depth24PlusStencil8 via this function. \n\nThat\u0027s one of the differences between Format.* and TextureUtils.* for the same information(TexelBlockInfo). It makes sense that it can run into UNREAACHABLE() for depth aspect for this format, which is not copyable. But this format is allowed to copy for stencil aspect, which will run into UNREACHABLE() too because this function doesn\u0027t consider texture aspect at all. But Format.* consider texture aspect.\n\nFor now, whether apply tis fix doesn\u0027t impact any tests/code. But I think the original code is more like a typo. Otherwise, we should return a value for Depth32FloatStencil8\u0027s byte size in this function?",
      "parentUuid": "6c6a9ef2_18fa9e18",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aa6caf9_139c445f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-02-15T01:41:11Z",
      "side": 1,
      "message": "(To Kai), it\u0027s true that there is an issue about unsized texture format: Define the copies with \"depth24plus\", \"depth24plus-stencil8\", and \"stencil8\". [Issue #gpuweb/gpuweb#652] in current spec. Before that issue is clear, the current spec says it must follow the section about depth/stencil format at https://gpuweb.github.io/gpuweb/#depth-formats, which says that unsized formats like stencil8 and stencil aspect of Depth24PlusStencil8 are copyable.\n\nAnd like Kai said, the function return 4 for depth24plus, which make me suspect even more that the original code introduced a typo here: it intended to be Depth24PlusStencil8, not Depth24UnormStencil8. However, copying these unsized formats needs to be clarified in spec.",
      "parentUuid": "0f22730f_b4c1a221",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b86f25dd_d3694a5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-02-15T02:09:01Z",
      "side": 1,
      "message": "They are copyable, but only to other textures with exactly the same format.",
      "parentUuid": "1aa6caf9_139c445f",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dd168aa_730077c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-02-15T04:22:35Z",
      "side": 1,
      "message": "Gotcha. This function is also used in tests for B2T/T2B/T2T copy. Maybe we can introduce parameter aspect, just like https://chromium-review.googlesource.com/c/chromium/src/+/3457847/3/third_party/blink/renderer/modules/webgpu/texture_utils.cc#65.",
      "parentUuid": "b86f25dd_d3694a5f",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24406849_d02afa01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-16T23:27:14Z",
      "side": 1,
      "message": "I\u0027m not sure what we need this CL for, so if you want me to take a look again, please clarify and let me know",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78f5f8db_543654b8",
        "filename": "src/dawn/utils/TextureUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-15T08:45:21Z",
      "side": 1,
      "message": "I think this isn\u0027t the bug: the problem is that formats with multiple aspects have a texel byte size per aspect. Depth formats (except depth16unorm) always use 4 bytes per texel for the depth aspect, but the stencil8 is always a single byte per aspect.\n\nIf we wanted to fix this, we would need to make GetTexelBlockSizeInBytes take an aspect (defaulted to color?) as a parameter so we can return 4 or 1 depending on depth or stencil.",
      "revId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "8dbb735fd6ad8c08b34b50b9d68bb5162a6a231e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}