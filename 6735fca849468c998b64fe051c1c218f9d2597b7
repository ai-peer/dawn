{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d48a4659_2f18c1db",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-11-24T10:18:03Z",
      "side": 1,
      "message": "Why are these only emitting a deprecation warning and not erroring if the toggle is set to true? Shouldn\u0027t EMIT_DEPRECATION_WARNING(device, args...) be the same as DAWN_DEPRECATED_IF(device, true, args...)?\n\nAaah it is because DAWN_DEPRECATED_IF returns an error when this function returns void.\n\nIMHO we could make EmitDeprecationWarning return a MaybeError instead of adding these macros and then here do something like:\n\n```\nif (GetDevice()-\u003eConsumedError(GetDevice()-\u003eEmitDeprecationWarning(\"endPass() has been deprecated. Use end() instead.\"))) {\n  return;\n}\nEndPass();\n```\n\nRemoving the macros makes the code a bit more verbose but also clearer in what it does and that it can return (because it would be using DAWN_TRY instead of a bespoke macro)",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99b9281c_6cc5595a",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-11-28T22:46:12Z",
      "side": 1,
      "message": "[1].\nPlan: Additionally rename `EmitDeprecationWarning` to `EmitDeprecationPathError`\nFor macros, only remove `DAWN_EMIT_DEPRECATION_WARNING`. Still keep `DAWN_DEPRECATED_IF` (renamed to `DAWN_MAKE_DEPRECATION_ERROR` to keep EXPR outside) to make absl format vars stay shorter.\n\nQ: there\u0027s `DAWN_UNLIKELY` inside `ConsumedError`, will this impact code performance using deprecated path? (concerns at https://dawn-review.googlesource.com/c/dawn/+/111321/comment/ff5bf6c0_aae0928e/)",
      "parentUuid": "d48a4659_2f18c1db",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "013a164d_a3957cfd",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-11-28T23:11:58Z",
      "side": 1,
      "message": "Also it seems if include if we include error path in the `EmitDeprecationWarning` function instead of using macro, we could loose __FILE__, __func__, __LINE__ from the compiler info",
      "parentUuid": "99b9281c_6cc5595a",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78a9217e_b37bb346",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-28T23:22:03Z",
      "side": 1,
      "message": "I think losing FILE func LINE is fine for these - it\u0027s super explanatory where it\u0027s coming from. And, it\u0027s not like errors that we want to backtrace the stack in Dawn. These happen first thing in the frontend.\n\nthe DAWN_UNLIKELY is a minor nit. it\u0027s fine if we hit that code; was just a nice to have to avoid it. (one could also argue that it\u0027s better to have the deprecated path deoptimized so the new path is better)",
      "parentUuid": "013a164d_a3957cfd",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb992492_7261ee40",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-11-29T02:38:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78a9217e_b37bb346",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da35df28_abc49424",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1331,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-11-24T10:18:03Z",
      "side": 1,
      "message": "nit: I think both overloads could be replaced with a single one taking an std::string_view.",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c40dd74_4284211d",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 346,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-23T23:25:07Z",
      "side": 1,
      "message": "if everything uses the deprecation macro and goes through absl::StrFormat - can we remove this overload?",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68e70cd2_c11afd59",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 346,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-11-28T22:46:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c40dd74_4284211d",
      "revId": "6735fca849468c998b64fe051c1c218f9d2597b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}