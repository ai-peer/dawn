{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "59226ba6_4c75ae29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-29T16:47:10Z",
      "side": 1,
      "message": "This is basically the same as `--dump-ir --format none` isn\u0027t it? (this is what format none was added for, heh)",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b40eaaa9_d3fe3db5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-04-29T18:02:13Z",
      "side": 1,
      "message": "I guess so. I didn\u0027t even realize that there was a `none` format. I guess `--format none` is still useful for _just-validate_",
      "parentUuid": "59226ba6_4c75ae29",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c3fb029_89b8aafb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-29T18:09:54Z",
      "side": 1,
      "message": "My concern with `--format ir` is that it makes it look like the IR is a supported format, when, really it isn\u0027t. `--dump-ir --format none` makes it a lot clearer that this is an internal thing, not a format you\u0027re generating.",
      "parentUuid": "b40eaaa9_d3fe3db5",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "676e76c2_455470b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-04-29T18:20:49Z",
      "side": 1,
      "message": "Define \"supported format\"",
      "parentUuid": "9c3fb029_89b8aafb",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c09cbf77_1fd4ea17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-04-29T18:29:13Z",
      "side": 1,
      "message": "For IR, I\u0027d assume we could ingest what we\u0027re emitting.",
      "parentUuid": "676e76c2_455470b4",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68a8af38_65d8ab3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-04-29T18:33:34Z",
      "side": 1,
      "message": "Why? Tint doesn\u0027t ingest HLSL, MSL or GLSL? Nothing makes the claim that the output is stable, nor that anything is expected to be able to consume it.\nThe only way to discover this is with --help, which will include it at:\n\n```\n--format \u003cnone|spirv|spvasm|wgsl|msl|hlsl|glsl|ir\u003e\n                             Output format.\n                             If not provided, will be inferred from output filename extension:\n                               .spvasm -\u003e spvasm\n                               .spv    -\u003e spirv\n                               .wgsl   -\u003e wgsl\n                               .metal  -\u003e msl\n                               .hlsl   -\u003e hlsl\n -f                          short name for --format\n```\n\nFor development, it\u0027s one hell of a lot more convenient than the multi-flag thing that people would have to look up. It would also work with the testing infrastructure without bodges, if one day you were to add test expectations for SPIRV -\u003e IR or WGSL -\u003e IR.",
      "parentUuid": "c09cbf77_1fd4ea17",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49236b18_3dbfeb03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-29T18:42:49Z",
      "side": 1,
      "message": "I\u0027d expect HLSL to be consumed by an HLSL frontend, and MSL. I\u0027d assume the WGSL generated can be consumed by Tint and the IR as it\u0027s a _tint_ format. The fact it\u0027s advertised as a format is what would make me think it\u0027s stable and ingestable.\n\nI\u0027m not sure how seeing `--format none` and `--dump-ir` would be any different from how you find other flags with `--help`.",
      "parentUuid": "68a8af38_65d8ab3c",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7584c4fc_902cc062",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-04-29T21:08:11Z",
      "side": 1,
      "message": "The biggest difference here is that with `--format ir` we show the IR *after* running AST transforms. For example, right now I can\u0027t use `--dump-ir` if my WGSL contains `override` declarations, even if I pass the `--overrides` flag to invoke `SubstituteOverrides`. But with `--format ir` I can, because transforms are run first.\n\nIt seems vaguely useful to be able to see what the IR looks like after running other transforms using the command-line exe (e.g. \"what does my post-robustness IR look like, so I can think about how to implement range analysis\").\n\nI do understand Dan\u0027s concern, but I\u0027m not super worried. If somebody misinterprets our intent and tries to use the protobuf format as an input for a real use case and then we break them, that\u0027s on them :shrug:",
      "parentUuid": "49236b18_3dbfeb03",
      "revId": "d04d9bbfd10987eef9797f92ddba2d4d305a7369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}