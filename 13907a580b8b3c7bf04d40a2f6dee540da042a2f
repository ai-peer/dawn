{
  "comments": [
    {
      "key": {
        "uuid": "442e67bf_50799922",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "Looks good overall.",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "421f6165_e13bc521",
        "filename": "src/dawn_native/d3d12/QuerySetD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-20T16:21:23Z",
      "side": 1,
      "message": "nit: prefer camelCase: \"querySet\"",
      "range": {
        "startLine": 25,
        "startChar": 22,
        "endLine": 25,
        "endChar": 30
      },
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3bfe4fe_596b629c",
        "filename": "src/dawn_native/d3d12/QuerySetD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "[1]",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50bfc15d_5db66ea2",
        "filename": "src/dawn_native/d3d12/QuerySetD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "nit: return an ID3D12QueryHeap*",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a67042d_ec2799ac",
        "filename": "src/dawn_native/d3d12/QuerySetD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "Why is this needed? If it is needed for follow-up CLs, then we could use it instead of [1]",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6abf8dd8_398785bc",
        "filename": "src/dawn_native/d3d12/QuerySetD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-07-21T01:57:28Z",
      "side": 1,
      "message": "Actually they are different things, above is D3D12_QUERY_*HEAP*_TYPE which is only needed when creating ID3D12QueryHeap, here is D3D12_QUERY_TYPE which is required when calling BeginQuery/EndQuery/ResolveQueryData. I will remove it and add it when it\u0027s used.",
      "parentUuid": "6a67042d_ec2799ac",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bbfc8e0_d867bc2c",
        "filename": "src/dawn_native/d3d12/QuerySetD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-21T12:17:49Z",
      "side": 1,
      "message": "Ah thanks for the explanation, it sounds good, although the method could just be a conversion function that takes a wgpu::QueryType and returns a D3D12_QUERY_TYPE.",
      "parentUuid": "6abf8dd8_398785bc",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d05d37c_c5897375",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "Can we have a test just for one query type of what happens if we call destroy before we lose the reference to the QuerySet?\u0027\n\nAlso nit: comment before test (same for other tests)",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98b97662_ddfc47d7",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-07-21T09:52:33Z",
      "side": 1,
      "message": "\u003e we call destroy before we lose the reference to the QuerySet?\nDo you mean destroy a query set which is used by BeginQuery() or set it in render pass? If that, I will add the test when implementing occlusion query.",
      "parentUuid": "5d05d37c_c5897375",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cce00144_3e1ec5ee",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-21T12:17:49Z",
      "side": 1,
      "message": "Not even that. The goal is to get coverage of both when DestroyInternal is called in the destructor and when called because the application did .Destroy().",
      "parentUuid": "98b97662_ddfc47d7",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "832e65d6_505d42a7",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "nit: descriptor (same for other tests)",
      "range": {
        "startLine": 25,
        "startChar": 29,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37a4cdff_422a82a8",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "nit: DAWN_SKIP_TEST_IF",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22fe7f75_21239692",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "nit: Could have the call to SupportsExtensions here directly.",
      "range": {
        "startLine": 47,
        "startChar": 12,
        "endLine": 47,
        "endChar": 41
      },
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78d2c1a9_068a2aab",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-07-21T09:52:33Z",
      "side": 1,
      "message": "Need record the result and use it in the DAWN_SKIP_TEST_IF() in Setup, otherwise we need to call SupportsExtensions twice.",
      "parentUuid": "22fe7f75_21239692",
      "range": {
        "startLine": 47,
        "startChar": 12,
        "endLine": 47,
        "endChar": 41
      },
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4ffc574_2292fb34",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-21T12:17:49Z",
      "side": 1,
      "message": "Ah the naming was confusing, it looks like a local variable. GetRequiredExtensions looks like it is const (though we forgot to make it const), so it shouldn\u0027t modify internal state. Instead it\u0027s ok to call SupportsExtensions twice.",
      "parentUuid": "78d2c1a9_068a2aab",
      "range": {
        "startLine": 47,
        "startChar": 12,
        "endLine": 47,
        "endChar": 41
      },
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39392c20_f5ec8f61",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "nit: can be wgpu::PipelineStatisticName pipelineStatistics[2] or []",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 63
      },
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a830c95d_dc3f1a3e",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "Same comments as PipelineStatisticsQueryTests",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e9ba3f3_4b6c78b2",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-20T10:51:22Z",
      "side": 1,
      "message": "unit: Add this newline for occlusion query tests, or remove it here.",
      "revId": "13907a580b8b3c7bf04d40a2f6dee540da042a2f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}