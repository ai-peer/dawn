{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f8477c8_65c70efa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-06-11T08:03:52Z",
      "side": 1,
      "message": "PTAL. Thanks!",
      "revId": "d61b4c430e406379e276490995e425a502a5a88e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f1ddbf0_7f00e092",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 844,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-11T11:48:45Z",
      "side": 1,
      "message": "This is an interesting issue: while the tintProgram/tintSource and spirv can be consumed by the ShaderModule (because they aren\u0027t visible when the shaderModule is an error), the compilation messages must stay, even if an error happens after WGSL validation, in the frontend or the backends.\n\nWhat do you think of changing of separating the parts that are acquired by ShaderModule creation (TintProgram/Source/Spirv) and the ones that are just modified (compilation messages) things like DeviceBase::CreateShaderModuleImpl backend::ShaderModule::Initialize, ShaderModuleBase::InitializeBase would then take a unique_ptr\u003cParseResult\u003e and a CompilationMessages*. The CompilationMessages wouldn\u0027t be consumed until we\u0027re back to APICreateShaderModule that would then SetCompilationMessages on either the error or successful shadermodule.\n\nAustin WDYT of this?",
      "revId": "d61b4c430e406379e276490995e425a502a5a88e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d019c910_db052eaf",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-11T11:48:45Z",
      "side": 1,
      "message": "Why is the handling of warnings not in CompilationMessages directly?",
      "revId": "d61b4c430e406379e276490995e425a502a5a88e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4704b273_4fa263c3",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-06-11T15:12:28Z",
      "side": 1,
      "message": "\u003e Why is the handling of warnings not in CompilationMessages directly?\n\nBecause formatting the tint warnings require the tint::diag::list object (as the case of parseResult.tintProgram.Diagnostics()), which contains the source code information. When transfer the diagnostics list into OwnedCompilationMessages, only the type(error, warning or info), message (string), and position information (line number, position, and something similar) are kept, as same as what user can get by getCompilationInfo. With only these information and no source code, it would be hard to do the formatting (print the questionable part of source code).\nOn the other hand, the formatting method I know, tint::diag::Formatter.format, work in such way that take a tint::diag::list rather than CompilationMessages as input.\n\nIf there is a way to generate formatted warning just by using CompilationMessages, or we just skip the formatting (like the first patch), we can use CompilationMessages directly.",
      "parentUuid": "d019c910_db052eaf",
      "revId": "d61b4c430e406379e276490995e425a502a5a88e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a5b07c_fecd7a0b",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-15T12:50:44Z",
      "side": 1,
      "message": "CompilationMessage has three AddMessage variants:\n\n - AddMessage with raw data, only used in tests so it should really be AddMessageForTesting.\n - AddMessage with a single Diagnostic, only used internally so it should really be a private function.\n - AddMessages with a DiagList that\u0027s what is used in ShaderModule, and we can use the DiagList to format the warning.\n \nWould this work?",
      "parentUuid": "4704b273_4fa263c3",
      "revId": "d61b4c430e406379e276490995e425a502a5a88e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}