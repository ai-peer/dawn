{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c98a95ef_33a55650",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "this ternary always evaluates to one side. is this incomplete? probably you want to check if the usage needs to be reinterpreted",
      "range": {
        "startLine": 89,
        "startChar": 2,
        "endLine": 92,
        "endChar": 78
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8452fc2b_aba91411",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "\u003d default",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 22
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "944ca865_e1db687f",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "this could be a d3d:: helper",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 212,
        "endChar": 0
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcdce79f_92c68e7d",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 298,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "we should use a similar helper to d3d12 backend\u0027s SetDebugName. Maybe it can be a common utility.\nChecking Toggle::UseUserDefinedLabelsInBackend is important",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 298,
        "endChar": 1
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e8c5841_40f0c4b7",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 334,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "it would definitely be great if to share if there\u0027s a clean way to do it",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 334,
        "endChar": 56
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7662a1aa_2969f25a",
        "filename": "src/dawn/native/d3d11/TextureD3D11.h",
        "patchSetId": 5
      },
      "lineNbr": 101,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "\u003d default in the .cpp file",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 101,
        "endChar": 38
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc8a0575_3714e792",
        "filename": "src/dawn/native/d3d11/TextureD3D11.h",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-07T05:40:44Z",
      "side": 1,
      "message": "lazy creation of these is not going to be good for multithreading. I\u0027d like to avoid mutability like this if possible.\n\nA few options:\n - Can we create them up front on initialization based on the texture usage?\n - Can we create them on the fly on runtime, when needed?\n - Call the methods GetOrCreateD3D11XYZView() and don\u0027t make them const.\n\nIt depends on how heavy the memory cost is to create them or how heavy the runtime cost is to create them on the fly.\n\nIn the D3D12 backend even, RTV and DSV descriptors are always created on the fly since they\u0027re transient CPU-side allocations, not GPU side things.\n\nLater we can optimize things, but it should stay simple first.",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 107,
        "endChar": 82
      },
      "revId": "cadb965366ec12e95cad510a19cd50115b0cc358",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}