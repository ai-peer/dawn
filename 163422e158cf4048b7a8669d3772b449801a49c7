{
  "comments": [
    {
      "key": {
        "uuid": "f4a8fd92_b16a1121",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-07T23:49:46Z",
      "side": 1,
      "message": "This code is now duplicated. It\u0027d be nice if we could update QueueD3D12 to use the recording context as well and get rid of Device::OpenCommandList (could be a separate CL).",
      "range": {
        "startLine": 180,
        "startChar": 12,
        "endLine": 183,
        "endChar": 41
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1961a202_7467499e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-08T00:14:13Z",
      "side": 1,
      "message": "Deleting Device::OpenCommandList will happen in my next change list when I update QueueD3D12 to use CommandRecordingContext.",
      "parentUuid": "f4a8fd92_b16a1121",
      "range": {
        "startLine": 180,
        "startChar": 12,
        "endLine": 183,
        "endChar": 41
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28e2da14_5a528a70",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-08T00:27:06Z",
      "side": 1,
      "message": "Actually, I have QueueD3D12 converted on my local machine. If you\u0027d like for me to make it be part of this change, I\u0027m happy to do that.",
      "parentUuid": "1961a202_7467499e",
      "range": {
        "startLine": 180,
        "startChar": 12,
        "endLine": 183,
        "endChar": 41
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c760b21_daf27acf",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-08T00:42:44Z",
      "side": 1,
      "message": "I decided to just make it be part of this change.",
      "parentUuid": "28e2da14_5a528a70",
      "range": {
        "startLine": 180,
        "startChar": 12,
        "endLine": 183,
        "endChar": 41
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7f55ce0_8642cb50",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-07T23:49:46Z",
      "side": 1,
      "message": "This could be a private member function MaybeError Texture::Initialize(...);\nAnd then static Texture::Create will make the texture object and DAWN_TRY(texture-\u003eInitialize()).\n\nThat way, we can still use the member function helpers GetDepthOrArraySize(), etc.\n\nAnd then Initialize() will do the GPU allocation and assign mResource.",
      "range": {
        "startLine": 273,
        "startChar": 32,
        "endLine": 273,
        "endChar": 47
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc995900_75b42a08",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-08T00:14:13Z",
      "side": 1,
      "message": "I thought about using Initialize but had second thoughts when I considered that the class has another constructor which doesn\u0027t require Initialize. Would be confusing to new users of the class to know whether calling Initialize is necessary or not. The way I have factored it, calling Create allocates resources and can fail. If you have all of the resources already created ahead of time, use the constructor which can\u0027t fail and doesn\u0027t return an error. It\u0027s an implementation detail that Create calls the constructor.\n\nI\u0027ve never been a fan of two phrase creation because it means you that in the error case, you create something and then immediately delete it again.  Not the end of the world, however.  \n\nWhat do you think?",
      "parentUuid": "b7f55ce0_8642cb50",
      "range": {
        "startLine": 273,
        "startChar": 32,
        "endLine": 273,
        "endChar": 47
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d03e770_54154165",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-08T16:57:23Z",
      "side": 1,
      "message": "\u003e I\u0027ve never been a fan of two phrase creation because it means you that in the error case, you create something and then immediately delete it again.  Not the end of the world, however.  \n\nThis is true, but I don\u0027t feel strongly about optimizing the error case. We could change this if it turns out to be problem. For now, I\u0027d prefer simplifying the creation.\n\nSee cwallez@\u0027s other comment on Patchset 5, Line 292. Both the constructor and Initialize() are private so a new user isn\u0027t responsible for deciding whether or not to call it.",
      "parentUuid": "cc995900_75b42a08",
      "range": {
        "startLine": 273,
        "startChar": 32,
        "endLine": 273,
        "endChar": 47
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08e142a8_b2d42d2c",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-07T23:49:46Z",
      "side": 1,
      "message": "nit: We can use std::make_unique\u003cTexture\u003e(...) and then \nreturn dawnTexture.release();\n\nWhat you\u0027re doing will work just as well, but we already have the make_unique and return obj.release() in other places like Device::CreateBufferImpl, d3d12::Adapter::CreateDeviceImpl, etc.\n\nCorentin is also using unique_ptr in https://dawn-review.googlesource.com/c/dawn/+/11861",
      "range": {
        "startLine": 297,
        "startChar": 8,
        "endLine": 299,
        "endChar": 0
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "255f34f4_3c57bd17",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-08T00:14:13Z",
      "side": 1,
      "message": "It\u0027s generally not a good idea to mix and match reference counted and non-reference counted memory management. In fact, a good RefCounted base class will make the destructor private to the class so that the only way the object gets destroy is by calling Releasee. This prevents code from accidentally deleting the object out from other code which has outstanding references. \n\nI think we should keep the code the way I have it and remove existing places that use unique_ptr for referenced counted objects.\n\nWhat do you think?",
      "parentUuid": "08e142a8_b2d42d2c",
      "range": {
        "startLine": 297,
        "startChar": 8,
        "endLine": 299,
        "endChar": 0
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9747ad_6b832d7e",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-08T16:57:23Z",
      "side": 1,
      "message": "Sounds good to me.",
      "parentUuid": "255f34f4_3c57bd17",
      "range": {
        "startLine": 297,
        "startChar": 8,
        "endLine": 299,
        "endChar": 0
      },
      "revId": "163422e158cf4048b7a8669d3772b449801a49c7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}