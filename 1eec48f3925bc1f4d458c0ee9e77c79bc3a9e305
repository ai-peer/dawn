{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "417cc3b8_d5e58cd4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-24T14:15:43Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0285725_4e2c7de6",
        "filename": "src/dawn_native/CallbackTaskManager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-24T16:52:52Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 47,
        "endChar": 53
      },
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18d4f2fe_471671de",
        "filename": "src/dawn_native/CallbackTaskManager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-24T16:52:52Z",
      "side": 1,
      "message": "nit: is there a reason to not use std::function ? I think it is a bit cleaner to use because you can directly bind a lambda function.",
      "range": {
        "startLine": 62,
        "startChar": 43,
        "endLine": 62,
        "endChar": 93
      },
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5ec72dd_d6d59467",
        "filename": "src/dawn_native/CallbackTaskManager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-25T01:32:28Z",
      "side": 1,
      "message": "In fact there can be quite many variables that are involved in CreateRenderPipelineAsync(), personally I just don\u0027t want to pass so many arguments into a lambda function. What do you think?",
      "parentUuid": "18d4f2fe_471671de",
      "range": {
        "startLine": 62,
        "startChar": 43,
        "endLine": 62,
        "endChar": 93
      },
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e6189b3_bcbaa80f",
        "filename": "src/dawn_native/CallbackTaskManager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-25T01:32:28Z",
      "side": 1,
      "message": "[2]",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 110,
        "endChar": 59
      },
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbb97dde_c0d48006",
        "filename": "src/dawn_platform/WorkerThread.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-24T16:52:52Z",
      "side": 1,
      "message": "I think we should encapsulate how we mark the event complete here. I don\u0027t think we should add MarkAsComplete to dawn_platform::WaitableEvent. It feels like an implementation detail of AsyncWorkerThreadPool, and the Chromium implementation wouldn\u0027t use it.\n\nDo you think the following idea will work?\n\nstd::unique_ptr\u003cAsyncWaitableEvent\u003e event \u003d std::make_unique\u003cAsyncWaitableEvent\u003e();\nstd::thread thread([callback, userdata, eventPtr \u003d event.get()]() {\n    callback(userdata);\n    eventPtr-\u003emIsComplete \u003d true;\n    eventPtr-\u003emCondition.notify_all();\n});\nthread.detach();\n\nreturn event;\n\nAlso, because the condition variable is created and bound to the function strictly before the thread is launched, we don\u0027t need the additional condition variable around [1].",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "412a8f8c_68ff32f7",
        "filename": "src/dawn_platform/WorkerThread.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-25T01:32:28Z",
      "side": 1,
      "message": "Oh the condition variable around [1] is protecting the access at [2]: before [2] we need to ensure there has already been a waitableEvent.\n\nInside the \"callback\" attached to std::thread the waitableEvent should be deleted and released, which I think is what actually you prefer, so we cannot call any functions on the waitableEvent.",
      "parentUuid": "fbb97dde_c0d48006",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5fc3343_ccc62dae",
        "filename": "src/dawn_platform/WorkerThread.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-25T01:58:09Z",
      "side": 1,
      "message": "Oh I\u0027d like to say:\n\nbefore [2] we need to ensure there has already been a waitableEvent in WaitableTask.",
      "parentUuid": "412a8f8c_68ff32f7",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01bad7b2_04c4af8b",
        "filename": "src/dawn_platform/WorkerThread.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-25T05:10:22Z",
      "side": 1,
      "message": "Can we put the mIsComplete and mCondition inside a std::shared_ptr\u003cT\u003e ? Then the variables which indicate the event is done can outlive the event itself.",
      "parentUuid": "c5fc3343_ccc62dae",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d459d056_99b7b693",
        "filename": "src/dawn_platform/WorkerThread.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-25T06:03:08Z",
      "side": 1,
      "message": "Sorry I failed to understand your solution... Do you mean here we return a std::shared_ptr\u003cWaitableEvent\u003e instead of std::unique_ptr\u003cWaitableEvent\u003e ?",
      "parentUuid": "01bad7b2_04c4af8b",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4021f220_0b5abc39",
        "filename": "src/dawn_platform/WorkerThread.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-05-25T09:01:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d459d056_99b7b693",
      "revId": "1eec48f3925bc1f4d458c0ee9e77c79bc3a9e305",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}