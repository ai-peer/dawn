{
  "comments": [
    {
      "key": {
        "uuid": "fe8ed779_3e1579e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-24T07:32:34Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93eea61e_87e32832",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-24T16:43:28Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fc79f42_f6d51ab0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-24T17:50:34Z",
      "side": 1,
      "message": "LGTM too.",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdfd9b10_92b11441",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-24T16:43:28Z",
      "side": 1,
      "message": "What about depth for copies of 2D array layer (and eventually 3D) textures?",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3085ec0a_cfa5d872",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-27T05:26:31Z",
      "side": 1,
      "message": "I cannot implement this now because these CLs https://dawn-review.googlesource.com/c/dawn/+/24684 has not been landed.\n\nAccording to Vulkan SPEC:\n- When copying to or from a depth or stencil aspect, the data in buffer memory uses a layout that is a (mostly) tightly packed representation of the depth or stencil data. Specifically:\n\n- data copied to or from the stencil aspect of any depth/stencil format is tightly packed with one VK_FORMAT_S8_UINT value per texel.\n- data copied to or from the depth aspect of a VK_FORMAT_D32_SFLOAT or VK_FORMAT_D32_SFLOAT_S8_UINT format is tightly packed with one VK_FORMAT_D32_SFLOAT value per texel.\n- data copied to or from the depth aspect of a VK_FORMAT_X8_D24_UNORM_PACK32 or VK_FORMAT_D24_UNORM_S8_UINT format is packed with one 32-bit word per texel with the D24 value in the LSBs of the word, and undefined values in the eight MSBs.\n\nSo when we copy from or to the stencil aspect or the depth aspect of a D32 float, we can safely think there are no undefined contents within the buffer memory for each texel.\nWhen we copy from or to the depth aspect of a D24 float, we have to always do the buffer lazy initialization.\n\nI left a TODO in this CL about this issue. What do you think?",
      "parentUuid": "cdfd9b10_92b11441",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b78d8fce_38767c8f",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-27T08:22:04Z",
      "side": 1,
      "message": "Also maybe this should be a freestanding function in CommandBuffer.cpp that\u0027s where a bunch of utilities are, and this one only uses mSize.",
      "parentUuid": "3085ec0a_cfa5d872",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c0e13ea_e2ac8aca",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-27T08:54:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b78d8fce_38767c8f",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32844ae9_0ed9975c",
        "filename": "src/dawn_native/CommandValidation.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-27T08:22:04Z",
      "side": 1,
      "message": "nit: unused?",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89ea91b9_1beaf392",
        "filename": "src/dawn_native/CommandValidation.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-27T08:54:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32844ae9_0ed9975c",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45e087fb_cb18eaed",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-24T17:50:34Z",
      "side": 1,
      "message": "Looks like `EnsureDataInitializedAsDestination` code gets repeated because GL doesn\u0027t have a commandContext (will that always be true?). Maybe we can pass nullptr instead and eliminate the duplicate code.",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b1abf16_0fec7744",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-27T05:26:31Z",
      "side": 1,
      "message": "And the functions like InitializeToZero() and ClearBuffer() are also repeated in all backends. The main problem now is the definitions of CommandRecordingContext are different among all backend, and I think in the future we need to refactor the implementation of CommandRecordingContext to enable us do such code clean-ups, but not now. What do you think?",
      "parentUuid": "45e087fb_cb18eaed",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d9dbcb_d3af9b26",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-27T08:22:04Z",
      "side": 1,
      "message": "Yeah, now or in the future we\u0027ll need a CommandRecordingContestBase object with per-backend versions (that you can ToBackend()) and the buffer initialization skipping code could be in the frontend.\n\nThat said the code duplication is simple to fix in the future, and I\u0027ll add a task in the tracker to do the CommandRecordingContextBase thing in a future sprint (Jiawei, or probably someone else).",
      "parentUuid": "6b1abf16_0fec7744",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbf75156_bc2c1ef6",
        "filename": "src/tests/end2end/BufferZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-24T17:50:34Z",
      "side": 1,
      "message": "unit: typo (source \u003d\u003e destination buffer)?",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcea466_198bb8ce",
        "filename": "src/tests/end2end/BufferZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-27T05:26:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbf75156_bc2c1ef6",
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "783775e0_2d793faf",
        "filename": "src/tests/end2end/BufferZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-24T16:43:28Z",
      "side": 1,
      "message": "nit: Maybe we could have a TestCopyBufferToTexture helper that takes parameters:\n - shouldLazyClear\n - bufferOffset\n - extraBytes (after the copy in the buffeR)\n - width, height, depth\n - bytesPerRow, rowsPerImage\n\nI think then we could programmatically generate the cases you have here.",
      "range": {
        "startLine": 494,
        "startChar": 4,
        "endLine": 517,
        "endChar": 5
      },
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6ea6ca3_acb0bb59",
        "filename": "src/tests/end2end/BufferZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-24T17:50:34Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "783775e0_2d793faf",
      "range": {
        "startLine": 494,
        "startChar": 4,
        "endLine": 517,
        "endChar": 5
      },
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b19f70bf_7375f2f0",
        "filename": "src/tests/end2end/BufferZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-07-27T05:26:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6ea6ca3_acb0bb59",
      "range": {
        "startLine": 494,
        "startChar": 4,
        "endLine": 517,
        "endChar": 5
      },
      "revId": "3166ed7e2190cd3531bc109dae851658fdff29a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}