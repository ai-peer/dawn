{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72ba85c7_853cb0a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "You\u0027ll need to sign the CLA as well, it is part of the one time setup: https://dawn.googlesource.com/dawn/+/refs/heads/main/CONTRIBUTING.md#contributor-license-agreement",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f755de7_e7d6e24d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "Did you test that the behavior is what you expect by running ManualSurfaceTests? See https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/samples/ManualSurfaceTest.cpp;drc\u003d358a8bc6e5a06cdeb5677d4e43632f753f6879e6;l\u003d28",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9b9b84_66b55eec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "nit: Add a Bug: XXXXXX annotation to link this CL to the issue you reported.",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97e16a0f_053d3539",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3471636
      },
      "writtenOn": "2024-06-12T09:57:56Z",
      "side": 1,
      "message": "this is the CL following our discussion on  https://issues.chromium.org/issues/345948285",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32c330ca_671c5fee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "LGTM overall, thank you for the contribution!",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c720da_3af751b9",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "We don\u0027t use these pragmas, does it not compile without? We\u0027ll need to modify the src/dawn/native/CMakeLists.txt/BUILD.gn to add this.",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e619a776_a8380576",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "nit: This auto alpha mode should be UNREACHABLE as well as it is handled in the Dawn frontend.",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "703a39de_d92eb628",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2024-06-12T21:19:39Z",
      "side": 1,
      "message": "Even though `DXGI_ALPHA_MODE_STRAIGHT` is in the enum, attempting to create a \"straight\" swap chain will always return an error. We should consider disallowing this selection at the Dawn level and encourage people to use pre-multiplied instead.",
      "range": {
        "startLine": 106,
        "startChar": 19,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a7091e9_7c759dc8",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-13T14:13:46Z",
      "side": 1,
      "message": "https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d/PhysicalDeviceD3D.cpp;drc\u003d48aa946c141b86e55a7ab1c955a98aa214a8d5f5;l\u003d73 is where the allowed modes are determined. We could make Unpremultiplied just break and go to the UNREACHABLE().",
      "parentUuid": "703a39de_d92eb628",
      "range": {
        "startLine": 106,
        "startChar": 19,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5ff8bb5_25f8f0ff",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2024-06-12T21:19:39Z",
      "side": 1,
      "message": "Please use `DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL` here.\n\nThe Windows documentation has the following to say about `FLIP_DISCARD` swap chains.\n\n\u003e However, even when the application is not the only visible item on the screen, if the flip model is DXGI_SWAP_EFFECT_FLIP_DISCARD, the compositor can in some scenarios still perform this optimization, by drawing other content onto the application\u0027s back buffer.\n\nWe try hard to avoid having the GPU process get p00ed. However, when it does, would be good to provide another level of security and disallow this. \n\n`FLIP_SEQUENTIAL` swap chains have the added benefit that you can pass dirty regions and scroll rects to Present1 and minimize the amount of composition to the desktop.",
      "range": {
        "startLine": 217,
        "startChar": 31,
        "endLine": 217,
        "endChar": 60
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4678ef2_248aa41c",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-13T14:13:46Z",
      "side": 1,
      "message": "The swapchain textures are always marked as uninitialized (to be lazy-cleared) so we should be ok using `DXGI_SWAP_EFFECT_FLIP_DISCARD` to help the OS optimize things right?",
      "parentUuid": "c5ff8bb5_25f8f0ff",
      "range": {
        "startLine": 217,
        "startChar": 31,
        "endLine": 217,
        "endChar": 60
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22cafb75_6d7e2ff5",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "I\u0027ll let Rafael review the DComp logic here ^^\u0027",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ce7542_217baba4",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 236,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-12T10:32:49Z",
      "side": 1,
      "message": "```suggestion\n                DCompositionCreateDevice(NULL, IID_PPV_ARGS(\u0026compositionDevice)),\n```",
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b44da9f_510c97d1",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2024-06-12T21:19:39Z",
      "side": 1,
      "message": "@cwallez@chromium.org will `InitializeSwapChainFromScratch` ever be called multiple times? If so, we should create these objects into local variables and `std::move` them to the member variables only if all of them succeed.  \n\nThe way the code is currently written, a failure part of the way through means you\u0027re left with a partially initialized, and difficult to debug, state.",
      "range": {
        "startLine": 241,
        "startChar": 61,
        "endLine": 241,
        "endChar": 81
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fda45b1_36ce3759",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-13T14:13:46Z",
      "side": 1,
      "message": "It\u0027s a bit roundabout in the code but yes the objects are all freed immediately if the swapchain creation fails because the whole object gets destroyed.",
      "parentUuid": "6b44da9f_510c97d1",
      "range": {
        "startLine": 241,
        "startChar": 61,
        "endLine": 241,
        "endChar": 81
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97d72a6b_ae207de3",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2024-06-12T21:19:39Z",
      "side": 1,
      "message": "Please check the return value of `SetContent`, `SetRoot` and `Commit`.",
      "range": {
        "startLine": 247,
        "startChar": 1,
        "endLine": 249,
        "endChar": 40
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d50f008a_2c2b48ee",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 251,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2024-06-12T21:19:39Z",
      "side": 1,
      "message": "Would be good to save the composition device to a member variable in case we need it in the future. \n\nEither way, the local variable smart pointer is cleaned up at the closed curly brace so no need for the explicit assignment to nullptr.",
      "range": {
        "startLine": 251,
        "startChar": 12,
        "endLine": 251,
        "endChar": 29
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a72015b9_dad96cba",
        "filename": "src/dawn/native/d3d/SwapChainD3D.cpp",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2024-06-12T21:19:39Z",
      "side": 1,
      "message": "Since you\u0027re now releasing more than just the swap chain, should rename this to `ReleaseResources` or similar name that encompasses everything you\u0027re releasing.",
      "range": {
        "startLine": 297,
        "startChar": 16,
        "endLine": 297,
        "endChar": 36
      },
      "revId": "18b0affb50bf63300e6fb61a7e78b88b75ea78d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}