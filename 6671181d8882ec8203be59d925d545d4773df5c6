{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1b180fed_96e08418",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T12:40:54Z",
      "side": 1,
      "message": "Switching reviewers, Austin, myself (and Loko) are better reviewers for Vulkan.\n\nOut of curiosity, are you able to share what you are building with Dawn on Android? We are planning to support native use cases on Android eventually, but as you can tell we haven\u0027t looked at it just yet. There\u0027s tons of optimizations needed to run well on mobile tilers still.",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25838d4d_2384e11c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-04-28T12:58:16Z",
      "side": 1,
      "message": "I\u0027m building a hobby game engine: https://github.com/Chainsawkitten/HymnToBeauty",
      "parentUuid": "1b180fed_96e08418",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e87c682b_d3beb5b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T12:59:48Z",
      "side": 1,
      "message": "LGTM provided it is necessary in the Vulkan spec (and even if it isn\u0027t necessary but needed as a workaround, then we need to keep it as well, just under a Toggle)",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d836f38_95231ba6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T13:01:08Z",
      "side": 1,
      "message": "Amazing, thanks a ton for the fixes :)",
      "parentUuid": "25838d4d_2384e11c",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4473fbe0_fc336016",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T15:24:30Z",
      "side": 1,
      "message": "Let us know if the requests for changes are too much for a hobby project, we can  take over the patch if needed.",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37af72b1_e754e2e9",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T12:59:48Z",
      "side": 1,
      "message": "nit: slight preference for adding a signalSemaphores to the CommandRecordingContext and appending to it in SwapChainVk.cpp, this is the good place to store everything related to a submission.\n\nThen scopedSignalSemaphore could be pushed to the vector and the vector used directly in pSignalSemaphores.\n\nAnd then maybe a TODO(dawn:\u003csomething\u003e) to have an AppendSignalSemaphore() that modifies needsSubmit directly so we don\u0027t need to check both conditions in here.",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f109c847_878c30a3",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-04-28T13:30:34Z",
      "side": 1,
      "message": "Yes, I wasn\u0027t too happy with supplying an optional signal semaphore to the submission function. It\u0027s fine for now but if we want an optional fence in the future, then timeline semaphores etc, the function signature will get messy quickly. Adding it to the recording context might be cleaner.",
      "parentUuid": "37af72b1_e754e2e9",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bccd36e_2ede2da8",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-02T15:09:58Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f109c847_878c30a3",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "127d3a28_8e149952",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T12:59:48Z",
      "side": 1,
      "message": "nit: maybe rename `externalTextureSemaphore` to differentiate it from the other signal semaphores?",
      "range": {
        "startLine": 317,
        "startChar": 26,
        "endLine": 317,
        "endChar": 47
      },
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6292358f_ff997d55",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-02T15:09:58Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "127d3a28_8e149952",
      "range": {
        "startLine": 317,
        "startChar": 26,
        "endLine": 317,
        "endChar": 47
      },
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a7bf270_b9c48126",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T12:59:48Z",
      "side": 1,
      "message": "nit: Maybe the code in DetachFromSurfaceImpl() is sufficient and there is no need to eagerly destroy semaphores here.",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd399f32_d91f9982",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-04-28T13:30:34Z",
      "side": 1,
      "message": "`previousSwapChain` can be `this`. In that case I would be overwriting the contents of `mSwapChainSemaphores` when allocating the semaphores after this, meaning the semaphores would never be freed. In case `previousSwapChain` is `this`, I could reuse the semaphores instead of scheduling them for deletion and creating new ones, but this was the easiest way to handle both the case where `previousSwapChain` is `this` and when it isn\u0027t.",
      "parentUuid": "6a7bf270_b9c48126",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82da3b0_558e8ec3",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T15:24:30Z",
      "side": 1,
      "message": "I wrote that mechanism and forgot `previousSwapChain` could be `this` ^^. Agreed that it is easiest to schedule for deletion. However isn\u0027t there a problem where the deletion should wait for the presentation engine to be done (so the next AcquireImageKHR that returns that index) instead of calling DeleteWhenUnused which will only wait for the last submitted commands?",
      "parentUuid": "bd399f32_d91f9982",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41f557e2_bd073f18",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-05-02T12:06:03Z",
      "side": 1,
      "message": "You\u0027re right, and the same applies to the `VkSwapchainKHR`, which is currently destroyed in the same way, without waiting for presentation to complete. Unfortunately, there is no way in core Vulkan to know when presentation has completed. Using `vkAcquireNextImageKHR` doesn\u0027t work if the swapchain is out of date or retired.\nThis was addressed in `VK_EXT_swapchain_maintenance1` by adding a way to signal a fence in `vkQueuePresentKHR` (`VkSwapchainPresentFenceInfoEXT`). This fence is signalled when it is safe to destroy the resources associated with the presentation (eg. swapchain and wait semaphores).\nBut `VK_EXT_swapchain_maintenance1` was only recently released and barely any devices support it (no Android devices).",
      "parentUuid": "d82da3b0_558e8ec3",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2985cda8_ce9b19d5",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-02T13:11:37Z",
      "side": 1,
      "message": "Ah uh ok, thanks for the explanation! Can we add a TODO(dawn:269) explaining that and leave it for future us then?",
      "parentUuid": "41f557e2_bd073f18",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a725883_35a10a75",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T12:59:48Z",
      "side": 1,
      "message": "The spec for vkQueuePresentKHR says:\n\n\u003e Any writes to memory backing the images referenced by the pImageIndices and pSwapchains members of pPresentInfo, that are available before vkQueuePresentKHR is executed, are automatically made visible to the read access performed by the presentation engine. This automatic visibility operation for an image happens-after the semaphore signal operation, and happens-before the presentation engine accesses the image.\n\nIsn\u0027t that sufficient for the synchronization? Or does it only perform the memory operations and not the execution dependency? (the Vulkan spec could be made slightly more clear if it\u0027s not sufficient and I\u0027ll file a bug there)",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12c87291_5116d0a4",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-04-28T13:30:34Z",
      "side": 1,
      "message": "Note the language in that quote:\n\u003e This automatic visibility operation for an image happens-after the semaphore signal operation[...]\n\nSo we need a semaphore for this visibility operation to happen.\n\nThis is made explicit in this part of the spec:\n\u003e The processing of the presentation happens in issue order with other queue operations, but semaphores have to be used to ensure that prior rendering and other commands in the specified queue complete before the presentation begins.\n\nThough it\u0027s easy to miss this part of the spec as it comes after all the extension structs you can add in `VkPresentInfoKHR.pNext`. So you won\u0027t see it if you read the individual manual pages for `vkQueuePresentKHR` or `VkPresentInfoKHR`, you have to view the full spec.",
      "parentUuid": "5a725883_35a10a75",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1e1d145_f3dc56b0",
        "filename": "src/dawn/native/vulkan/SwapChainVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-28T15:24:30Z",
      "side": 1,
      "message": "Thank you for the reference, it makes sense.",
      "parentUuid": "12c87291_5116d0a4",
      "revId": "6671181d8882ec8203be59d925d545d4773df5c6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}