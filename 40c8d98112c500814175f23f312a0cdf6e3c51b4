{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "660d13c6_9ef985c5",
        "filename": ".gitattributes",
        "patchSetId": 8
      },
      "lineNbr": 10,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-05-24T23:31:27Z",
      "side": 1,
      "message": "This is to solve python presubmit found CR character error when developing on windows.",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40532fae_c782a826",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T00:41:30Z",
      "side": 1,
      "message": "(partial review)",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7258b3a3_564c94ae",
        "filename": "src/dawn/native/PipelineCache.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-05-24T23:31:27Z",
      "side": 1,
      "message": "This refactoring (Storing CachedBlob mBlob in PipelineCache, returning pointer to blob instead of Cachedblob) is to try to remove an extra copy for d3d12 pipelince cache at [1].\nBut I\u0027m not so sure if this is the right thing to do.",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b093f96_52b479b3",
        "filename": "src/dawn/native/PipelineCache.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T00:41:30Z",
      "side": 1,
      "message": "I think it\u0027s ok, but maybe mBlob can just be in the backend?\nthen D3D12::PipelineCache can hold a std::variant\u003cCachedBlob, ComPtr\u003cID3DBlob\u003e\u003e so we never have to do extra copies. the PipelineCache will give you an interface to get data/size regardless of which one we\u0027re holding.\n\nSerializeToBlobImpl could return a pair of pointer and size pointing to the backing storage.",
      "parentUuid": "7258b3a3_564c94ae",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19f72b28_56114ca2",
        "filename": "src/dawn/native/PipelineCache.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T01:48:59Z",
      "side": 1,
      "message": "^ scratch that.\n\nI think the best way to do this would be to change CachedBlob itself such that it\u0027s members are `mData`, `mSize` and `mDeleter`. And then, have different `Create` methods that populate those correctly.\n\nBasically, so CachedBlob because some opaque container for data and size, and can pass it any other kind of container and transfer ownership into the CachedBlob.\n\nsomething like:\n```\n\nclass CachedBlob {\n public:\n  static CachedBlob Create(size_t size);\n  \n  // need forward declare for this one.\n  static CachedBlob Create(ComPtr\u003cID3DBlob\u003e blob);\n\n private:\n  CachedBlob(uint8_t* data, size_t size, std::function\u003cvoid()\u003e deleter);\n\n  uint8_t* mData;\n  size_t mSize;\n  std::function\u003cvoid()\u003e mDeleter;\n};\n\nCachedBlob CachedBlob::Create(size_t size) {\n  uint8_t[] data \u003d new uint8_t[size];\n  return CachedBlob(data, size, [\u003d]() { delete[] data; });\n}\n\nCachedBlob CachedBlob::Create(ComPtr\u003cID3DBlob\u003e blob) {\n  // detach so the deleter callback can \"own\" the reference\n  ID3DBlob* ptr \u003d blob.Detach();\n  return CachedBlob(blob-\u003eGetBufferPointer(), blob-\u003eGetBufferSize(), [\u003d]() {\n    // Reattach and drop to delete it.\n    ComPtr\u003cID3DBlob\u003e blob;\n    blob.Attach(ptr);\n    blob \u003d nullptr;\n  });\n}\n```",
      "parentUuid": "9b093f96_52b479b3",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0383b81b_2f6851b8",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T00:41:30Z",
      "side": 1,
      "message": "could RecordIterable have a specialization for an array like T[N] ? then we don\u0027t need the size here",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23030902_e35416c7",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-05-25T18:28:59Z",
      "side": 1,
      "message": "I think we already have? https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/CacheKey.h;l\u003d182",
      "parentUuid": "0383b81b_2f6851b8",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd84581_597a39f9",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-05-25T18:30:14Z",
      "side": 1,
      "message": "Good to know. Great work on the powerful cache key serialization!",
      "parentUuid": "23030902_e35416c7",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0316687d_a56d1815",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-05-25T18:45:29Z",
      "side": 1,
      "message": "Actually though, looking at it, it records the size, but maybe we can remove that?",
      "parentUuid": "acd84581_597a39f9",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be908682_70c8ecdc",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-05-25T19:39:25Z",
      "side": 1,
      "message": "Hmm if that size constant change, meaning the length of the array change, so the serialized blob is different. I think it\u0027s ok to remove recording size",
      "parentUuid": "0316687d_a56d1815",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5201b92f_2057bfe1",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T00:41:30Z",
      "side": 1,
      "message": "would it be wrong to record the shader bytecode here instead of RenderPipelineD3D12?",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96ab4d9_2105fb79",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-05-25T18:26:19Z",
      "side": 1,
      "message": "The for (auto stage : IterateStages(GetStageMask())) at https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/RenderPipelineD3D12.cpp;l\u003d359?q\u003drenderpipelined3d12\u0026ss\u003dchromium\nindicate we might have only certain shader stage enabled.\nBut for WebGPU I think it\u0027s good to always only record VS and FS.",
      "parentUuid": "5201b92f_2057bfe1",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b2d3c75_3606cc87",
        "filename": "src/dawn/native/d3d12/CacheKeyD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T18:48:21Z",
      "side": 1,
      "message": "ok - I don\u0027t feel that strongly. I guess doing the stages here could be more than we need, but it would probably be OK since the other stages will be empty arrays which should serialize to at most 4 extra zeros.",
      "parentUuid": "e96ab4d9_2105fb79",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f93d999_18a93ca7",
        "filename": "src/dawn/native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 8
      },
      "lineNbr": 275,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T00:41:30Z",
      "side": 1,
      "message": "I think the signature is the only thing that matters for the pipeline cache.\nperhaps instead of using all of GetLayout()-\u003eGetCacheKey() we can just get the serialized signature blob?",
      "revId": "40c8d98112c500814175f23f312a0cdf6e3c51b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}