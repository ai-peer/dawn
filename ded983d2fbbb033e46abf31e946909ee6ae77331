{
  "comments": [
    {
      "key": {
        "uuid": "5e3c9635_851768a1",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-09-24T14:33:35Z",
      "side": 1,
      "message": "nit: To avoid this extra check on every descriptor allocation, we could make sure we always have a RingBuffer and associated ID3D12DescriptorHeap associated (basically we can create it in the constructor.)",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "115156db_71d4e191",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-27T04:05:56Z",
      "side": 1,
      "message": "I don\u0027t think this comment has been addressed.",
      "parentUuid": "5e3c9635_851768a1",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b678daf1_494c884d",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-09-24T14:33:35Z",
      "side": 1,
      "message": "If we run out of space we need to make sure we don\u0027t destroy the descriptor heap before in flight commands are finished.\n\nAlso when we need to switch heaps, we need to reencode the currently bound bindgroups, so the error should eventually get propagated outside of the DescriptorHeapAllocator.\n\nBasically for now the code is incorrect if we overflow the descriptor heap, if you want we can ASSERT it never happens, remove all the code if startOffset \u003d\u003d kInvalidOffset and deal with it in a follow-up CL.",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a728f91_3079bfdb",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-24T15:10:25Z",
      "side": 1,
      "message": "\u003e If we run out of space we need to make sure we don\u0027t destroy the descriptor heap before in flight commands are finished.\n\nWe could also bring back the mReleasedHandles SerialQueue and push a ComPtr\u003cID3D12DescriptorHeap\u003e there whenever we reset the RingBuffer. That way when we overflow the heap and make a new one, we\u0027ll keep the old one alive while it\u0027s in flight. Then, the code won\u0027t be wrong when we reallocate and we can add re-encoding bind groups later.\n\nIn fact, I think we need to do this? AllocateCPUHeap always makes a heap the size of the desired allocation, so I think we\u0027ll replace the RingBuffer every time.",
      "parentUuid": "b678daf1_494c884d",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f897616_227f4aea",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-09-26T19:08:57Z",
      "side": 1,
      "message": "Reverted.",
      "parentUuid": "1a728f91_3079bfdb",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7917f152_0f6ccf3b",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-09-24T14:33:35Z",
      "side": 1,
      "message": "nit: DescriptorHeap creation can be a in helper function.",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6985880_344f0037",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-09-24T15:10:25Z",
      "side": 1,
      "message": "[1]",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12723d68_f4aac6d9",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-09-26T19:08:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d6985880_344f0037",
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d0b19e1_2e831821",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-09-24T16:13:16Z",
      "side": 1,
      "message": "Nit: Use mCpuDescriptorHeapInfos.size() instead of a hardcoded size. If we need to change the size later on, we will not need to fixup this callsite.",
      "range": {
        "startLine": 122,
        "startChar": 33,
        "endLine": 122,
        "endChar": 69
      },
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab95ca36_93c01fff",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-09-26T19:08:57Z",
      "side": 1,
      "message": "Are you suggesting to split the loop? The D3D enum is for CPU and GPU heaps.",
      "parentUuid": "4d0b19e1_2e831821",
      "range": {
        "startLine": 122,
        "startChar": 33,
        "endLine": 122,
        "endChar": 69
      },
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "673f5616_4b49e614",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocator.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-09-24T14:33:35Z",
      "side": 1,
      "message": "nit: if Chromium (and Dawn) asks that all references are const as much as possible. Replace with a naked pointer?",
      "range": {
        "startLine": 67,
        "startChar": 53,
        "endLine": 67,
        "endChar": 81
      },
      "revId": "ded983d2fbbb033e46abf31e946909ee6ae77331",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}