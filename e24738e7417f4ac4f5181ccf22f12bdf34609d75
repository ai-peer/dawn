{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "57852178_1ec8b8af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "Sorry for the delay.",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d40b4e_821e2094",
        "filename": "generator/dawn_json_generator.py",
        "patchSetId": 12
      },
      "lineNbr": 954,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "nit: usual syntax is `TODO(crbug.com/dawn/2509):` or `TODO(dawn:2509):`",
      "range": {
        "startLine": 954,
        "startChar": 2,
        "endLine": 954,
        "endChar": 28
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14a24f80_45e28d55",
        "filename": "generator/dawn_json_generator.py",
        "patchSetId": 12
      },
      "lineNbr": 954,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "I think that\u0027s the old syntax. The new style guide (https://engdoc.corp.google.com/eng/doc/devguide/codehealth/development/practices/todo.md?cl\u003dhead) suggests this instead, (although I think I used \u0027:\u0027 instead of \u0027-\u0027 in the initial change incorrectly).",
      "parentUuid": "71d40b4e_821e2094",
      "range": {
        "startLine": 954,
        "startChar": 2,
        "endLine": 954,
        "endChar": 28
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4cdffbe_99a805ca",
        "filename": "generator/dawn_json_generator.py",
        "patchSetId": 12
      },
      "lineNbr": 954,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-02T22:13:30Z",
      "side": 1,
      "message": "TIL! We don\u0027t follow google3 style directly, but the public google style guide (which is usually the same) does allow the new style:\nhttps://google.github.io/styleguide/cppguide.html#TODO_Comments\nThe Chromium style guide still references the old style, but I don\u0027t think there\u0027s any reason for that.\nhttps://chromium.googlesource.com/chromium/src/+/main/styleguide/c++/c++-dos-and-donts.md#comment-style",
      "parentUuid": "14a24f80_45e28d55",
      "range": {
        "startLine": 954,
        "startChar": 2,
        "endLine": 954,
        "endChar": 28
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4698de0_b87feca4",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 123,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "Normally this shouldn\u0027t be needed because we typedef all our structs so they don\u0027t need `struct` in front. Is it needed here in particular for some reason?",
      "range": {
        "startLine": 123,
        "startChar": 12,
        "endLine": 123,
        "endChar": 71
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01f08e2a_be84d2f6",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 123,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Hmm not sure, I just got this from what we already had for `function pointer` types. Removing it from here doesn\u0027t seem to break anything though so done!\n\n(I didn\u0027t remove the other one in this CL for now, can do that in a follow up since I don\u0027t want to accidentally break something via that.)",
      "parentUuid": "a4698de0_b87feca4",
      "range": {
        "startLine": 123,
        "startChar": 12,
        "endLine": 123,
        "endChar": 71
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9716ee1e_ce7c2d75",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "I don\u0027t think callback infos should ever be extensible? (It would be kind of inconsistent, and I would expect any extension point for a function to be in another struct other than the callback info)",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a09265f5_cb862876",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-01T00:33:22Z",
      "side": 1,
      "message": "(looked it up)\n\nhttps://github.com/webgpu-native/webgpu-headers/issues/199#issuecomment-1710784711\n\n\u003e Make the callback info structs extensible. Change CallbackMode to an enum because now we donâ€™t need extensibility and it only has 3 options (None, AllowProcessEvents, AllowSpontaneous).",
      "parentUuid": "9716ee1e_ce7c2d75",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37583b7e_486bb823",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-01T20:50:18Z",
      "side": 1,
      "message": "Ahh I forgot about that, thanks for checking.\n\nIn that case we should make it extensible now (either make callback infos extensible unconditionally, or assert that dawn.json defines them as extensible)",
      "parentUuid": "a09265f5_cb862876",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8250f91c_55d80eb1",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "In this PS I removed it atm, will add it back, but to clarify, how would C++ users pass extensions? Since we flatten out the structs members as arguments to the APIs, it\u0027s not as clear how we would pass the extensions?",
      "parentUuid": "37583b7e_486bb823",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14f19e4c_732de9c1",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-02T22:13:30Z",
      "side": 1,
      "message": "Probably with an additional overload somehow that, for example:\n- uses a non-flattened struct instead of flattened args\n- takes an extra struct arg that\u0027s empty and extensible\n- takes nextInChain directly as an arg",
      "parentUuid": "8250f91c_55d80eb1",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ec19e29_1ec43495",
        "filename": "generator/templates/api.h",
        "patchSetId": 12
      },
      "lineNbr": 168,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-06T15:43:35Z",
      "side": 1,
      "message": "Ok sg! made them extensible again, but will add C++ overload for chains and stuff when we actually have them.",
      "parentUuid": "14f19e4c_732de9c1",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46dbdfa4_fd9a5f44",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 247,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 247,
        "endChar": 29
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b51c5e0b_91b6546a",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 247,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "See comment above",
      "parentUuid": "46dbdfa4_fd9a5f44",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 247,
        "endChar": 29
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93ecc1e7_3197143a",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "Curious why you needed F and T to be separate, instead of just having TemplatedCallbackName\u003cT\u003e like in the gist. Needed for type inference to work better in some cases I\u0027m guessing?",
      "range": {
        "startLine": 252,
        "startChar": 14,
        "endLine": 252,
        "endChar": 59
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95a121a0_3aee4892",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "I need to use `F` also because otherwise, it will only work with function pointers and non-capturing lambdas that match the signature will not work. By using the `F` and the `enable_if` we can catch both cases.",
      "parentUuid": "93ecc1e7_3197143a",
      "range": {
        "startLine": 252,
        "startChar": 14,
        "endLine": 252,
        "endChar": 59
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be9d1836_de000019",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 312,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 312,
        "startChar": 8,
        "endLine": 312,
        "endChar": 29
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a33c4562_a0d248a2",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 312,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "See comment above.",
      "parentUuid": "be9d1836_de000019",
      "range": {
        "startLine": 312,
        "startChar": 8,
        "endLine": 312,
        "endChar": 29
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcd7e39d_9030ad68",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 317,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "Should these be in the `detail` namespace since they\u0027re meant to be inferred? Or public namespace because they\u0027re named in a public API?\n\nActually I kind of wonder if we could inline the full function type here instead of adding the `Templated{{CallbackName}}` definitions at all...\n\nNot important to solve now, could be a followup.",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a98ad08_5f66a2f4",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 317,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcd7e39d_9030ad68",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "117089ee_8b8fe0a2",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 332,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "[1] these would be flipped",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e599d36d_7ee16ea0",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 332,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "117089ee_8b8fe0a2",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1b20171_324223af",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 383,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 383,
        "startChar": 8,
        "endLine": 383,
        "endChar": 29
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52ff2d3d_b1bc2637",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 383,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "See comment above.",
      "parentUuid": "c1b20171_324223af",
      "range": {
        "startLine": 383,
        "startChar": 8,
        "endLine": 383,
        "endChar": 29
      },
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc93af64_5364c74a",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 392,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "nit: I think it\u0027s more intuitive to have keep these in the usual order [callback, userdata]. (Call site at [1])",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eabb987_e18ad63b",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 392,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc93af64_5364c74a",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebdb7dad_11b063eb",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 401,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "I think this is not yet used?",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e2c7a2e_b3587980",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 12
      },
      "lineNbr": 401,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ebdb7dad_11b063eb",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "907d6e3d_42dd851f",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 12
      },
      "lineNbr": 84,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-30T04:40:43Z",
      "side": 1,
      "message": "I\u0027m not sure if there are any remaining breaking changes to callback signatures, but if there are then we should call this something like \"unstable\" or \"do not use\".\n\nThat said I think the only thing left is some changes to which enum values we pass in which cases. Were we planning on just dealing with that later? Can\u0027t remember what we said.",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b601a692_94e22206",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 12
      },
      "lineNbr": 84,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "I think the only other breaking change would be adding the `message` field to some of the other callbacks? (This one already has it so I don\u0027t think anything needs to change?)\n\nFor the enums, I was imagining we could probably mark ones for deprecation, then use like `default` or other handling in the callsites to prevent breaking anything else.",
      "parentUuid": "907d6e3d_42dd851f",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a3f45ec_acf5e074",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 12
      },
      "lineNbr": 84,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-02T22:13:30Z",
      "side": 1,
      "message": "Adding back nextInChain will also be a breaking change, though since we\u0027re moving everything to the C++ API right now it\u0027s probably much of a problem. We could just keep it in for this CL so we don\u0027t have to worry, but I think it\u0027s fine.",
      "parentUuid": "b601a692_94e22206",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29ca3ced_cad9e95f",
        "filename": "src/dawn/native/Instance.cpp",
        "patchSetId": 12
      },
      "lineNbr": 286,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T19:18:06Z",
      "side": 1,
      "message": "can we write APIRequestAdapterF using APIRequestAdapter2 ?",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13c92c54_2db4fece",
        "filename": "src/dawn/native/Instance.cpp",
        "patchSetId": 12
      },
      "lineNbr": 286,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29ca3ced_cad9e95f",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a57b186_7883df93",
        "filename": "src/dawn/wire/client/Instance.cpp",
        "patchSetId": 12
      },
      "lineNbr": 203,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T19:18:06Z",
      "side": 1,
      "message": "ditto - can you write RequestAdapterF using RequestAdapter2 ?",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ba7a0fe_5c43dd4c",
        "filename": "src/dawn/wire/client/Instance.cpp",
        "patchSetId": 12
      },
      "lineNbr": 203,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-02T21:16:27Z",
      "side": 1,
      "message": "Can\u0027t for the wire one atm until after we update Chromium side to overwrite the new proc for the wire. (Using the `userdata count` to redirect to different server callas atm.)",
      "parentUuid": "2a57b186_7883df93",
      "revId": "e24738e7417f4ac4f5181ccf22f12bdf34609d75",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}