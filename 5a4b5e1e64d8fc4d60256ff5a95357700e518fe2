{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9f69fbd5_77657f51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-14T15:50:22Z",
      "side": 1,
      "message": "LGTM, this looks a lot like `SharedTextureMemory` which is expected.",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f64445e_9e2687d4",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-14T15:50:22Z",
      "side": 1,
      "message": "```suggestion\nAfter creating the memory, the supported `wgpu::BufferUsage` can be queried.\n```",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8615f1fb_0953153c",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-15T17:22:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f64445e_9e2687d4",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4611909f_8f9e9e70",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-14T15:50:22Z",
      "side": 1,
      "message": "What about mapping?",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24f8fa04_0c2440b7",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-15T17:22:29Z",
      "side": 1,
      "message": "Added a section below.",
      "parentUuid": "4611909f_8f9e9e70",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "254fddf3_7ff81d20",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-16T06:21:08Z",
      "side": 1,
      "message": "maybe I\u0027m missing - I don\u0027t see the section?",
      "parentUuid": "24f8fa04_0c2440b7",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1212c33b_5d07a977",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-16T19:48:20Z",
      "side": 1,
      "message": "See L64.",
      "parentUuid": "254fddf3_7ff81d20",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82058855_934b87d5",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-14T15:50:22Z",
      "side": 1,
      "message": "Even with read only access? We have this capability being added for wgpu::SharedTextureMemory.",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab85db68_470830d9",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-14T22:59:57Z",
      "side": 1,
      "message": "I kept the rules restrictive just because it was simple. I don\u0027t have a use case case for simultaneous access in mind though. Are you aware of one?\n\nIt doesn\u0027t seem difficult to allow simultaneous access if we want it. The only restriction I can think of is when a buffer is mapped. Outside of mapping, I think we could even allow concurrent write access (on D3D12, buffers always decay to COMMON) (I will have to check the rules for other backends).",
      "parentUuid": "82058855_934b87d5",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f029bbae_9a4991b2",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-16T06:21:08Z",
      "side": 1,
      "message": "probably OK for now. we\u0027re adding concurrent read for SharedTextureMemory so maybe we\u0027ll have it anyway later\n\none thing I notice here is that the begin access descriptor and end access state are basically the same as SharedTextureMemory. It would be great if a bunch of the fence/synchronization code can get shared between the two of them when implemented. We don\u0027t have the share the actual structs (because they are likely disjoint chain roots), but the actual synchronization code would be good to share.",
      "parentUuid": "ab85db68_470830d9",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a4b9ea5_a29d191f",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-16T19:48:20Z",
      "side": 1,
      "message": "I kept the functionally initially stated: only one buffer allowed access at a time. It makes sense we could allow concurrent access in the future though.\n\nMakes sense about sharing Begin/EndAccess implementations. I will probably try creating a SharedResourceMemory base class.",
      "parentUuid": "f029bbae_9a4991b2",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7395769_4bbf1b5c",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-14T15:50:22Z",
      "side": 1,
      "message": "nit: Could we break line on each sentence for nicer diffs?",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11c9d210_057a95ef",
        "filename": "docs/dawn/features/shared_buffer_memory.md",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-15T17:22:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7395769_4bbf1b5c",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0cba81c_77e8bf26",
        "filename": "src/dawn/native/SharedBufferMemory.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-14T15:50:22Z",
      "side": 1,
      "message": "Maybe we can directly do that in Chromium?",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa2c913c_1288d1bd",
        "filename": "src/dawn/native/SharedBufferMemory.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-02-15T17:13:00Z",
      "side": 1,
      "message": "I\u0027m not opposed to helping with that issue, but it seems like a bigger detour than I\u0027m wanting to make at the moment. For now I\u0027d like to solve the issue the same way SharedTextureMemory did (with APIIsDeviceLost()).",
      "parentUuid": "b0cba81c_77e8bf26",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2121a15_d52ae727",
        "filename": "src/dawn/native/SharedBufferMemory.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-16T06:21:08Z",
      "side": 1,
      "message": "yea we need to fix up device lost handling for WebGPU in general first; so it\u0027s the same problem STM has",
      "parentUuid": "fa2c913c_1288d1bd",
      "revId": "5a4b5e1e64d8fc4d60256ff5a95357700e518fe2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}