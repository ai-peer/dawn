{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa74617_1e9fec55",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-26T20:06:36Z",
      "side": 0,
      "message": "Do we really need this constructor? What if we just got rid of it, and moved the `sType` defaulting to the declaration instead of the constructor?",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08f89562_17a89938",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-26T20:10:11Z",
      "side": 0,
      "message": "sType is in the wgpu::ChainedStruct base class though",
      "parentUuid": "6aa74617_1e9fec55",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c5c4dbd_b584ac04",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-26T20:30:28Z",
      "side": 0,
      "message": "Ohh, right. Kinda had the C pattern in my head where ChainedStruct is a member and not a base class. Too bad.\n\nThough... if ChainedStruct _were_ a member instead of a base class, would it have the same layout as the C struct, so reinterpret casts would be safe(r) for chain structs? Right now it looks like we are actually assuming they are safe - we assert the members line up, but don\u0027t assert anything about sType and nextInChain?:\nhttps://source.chromium.org/chromium/chromium/src/+/main:out/webview-Debug/gen/third_party/dawn/include/dawn/webgpu_cpp.h;l\u003d3408;drc\u003da0253e388931252decd5b6bc6fa098b06c03a95a\n\n(I also noticed we call it .nextInChain in C++ but .next in C for some reason)",
      "parentUuid": "08f89562_17a89938",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf6fd8ee_d29ddd5d",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-26T20:32:34Z",
      "side": 0,
      "message": "(And if it were a member then you could just initialize it with `{ nullptr, SType::{{type.name.CamelCase()}} }` I think)",
      "parentUuid": "4c5c4dbd_b584ac04",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6880537_0bdd6e40",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-26T20:38:43Z",
      "side": 0,
      "message": "yes, I think we can make it have the same layout\n\nthe problem is that then to chain ityou would have to do.\n\n```\nwgpu::MyStruct s;\nmyRoot.nextInChain \u003d reinterpret_cast\u003cwgpu::ChainedStruct*\u003e(\u0026s);\n```\n\nwhich is a little unfortunate\nor we make .nextInChain be `void*` which is also a little unfortunate because then iteration is a pain.\n\n\nwe call in \"nextInChain\" because IDK that\u0027s what we wanted to call it.\nbut for C reasons, you access it at .chain.next",
      "parentUuid": "bf6fd8ee_d29ddd5d",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2564050f_a2e91cbe",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-04-26T21:38:57Z",
      "side": 0,
      "message": "... Right, I remember now, on both accounts.\n\nWe could have a method that returns the reinterpreted pointer, or require pointing to the nextInChain member, or... do some conversion magic to allow assigning ExtensionStruct* into a ChainedStruct* (https://godbolt.org/z/6dW3Eea4e not great but works)\n\nWhat you have is probably better though.",
      "parentUuid": "e6880537_0bdd6e40",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4aff0a86_11803be1",
        "filename": "generator/templates/api_cpp.h",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-29T16:32:25Z",
      "side": 0,
      "message": "Acknowledged. we can also revisit this sometime",
      "parentUuid": "2564050f_a2e91cbe",
      "revId": "c35ceac77097a9eb6a843636e11dff76dfc156cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}