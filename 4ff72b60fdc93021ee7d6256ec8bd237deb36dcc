{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "120bfb56_8cd5f0e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-01T20:33:19Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "720d12b5_88927dcf",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "why?",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc84679_c096cf17",
        "filename": "src/tint/ir/access.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "Bit overloaded. How about `Object()`?",
      "range": {
        "startLine": 37,
        "startChar": 11,
        "endLine": 37,
        "endChar": 17
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8192533_0ab52a25",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 8
      },
      "lineNbr": 885,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "nit: cast not necessary",
      "range": {
        "startLine": 885,
        "startChar": 44,
        "endLine": 885,
        "endChar": 67
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1952acf_ade48952",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 8
      },
      "lineNbr": 885,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "nit: `object`",
      "range": {
        "startLine": 885,
        "startChar": 31,
        "endLine": 885,
        "endChar": 37
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83cd341a_c5076463",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 8
      },
      "lineNbr": 900,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "I don\u0027t understand why we need this. If the underlying object has a constant value, then the access chain should also resolve to a constant value - so why didn\u0027t we just emit that to start with?",
      "range": {
        "startLine": 897,
        "startChar": 0,
        "endLine": 900,
        "endChar": 13
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79041064_a6e772ff",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 8
      },
      "lineNbr": 917,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "instead of `std::reverse`, you can use `utils::Reverse(accessors)` - does it without moving data around.",
      "range": {
        "startLine": 917,
        "startChar": 30,
        "endLine": 917,
        "endChar": 39
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c632de10_f94d3289",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 8
      },
      "lineNbr": 917,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-01T21:01:22Z",
      "side": 1,
      "message": "Why do we do this as two passes? Why can\u0027t you walk down the expression chain once, grabbing the indices, then just reverse that?",
      "range": {
        "startLine": 917,
        "startChar": 8,
        "endLine": 917,
        "endChar": 42
      },
      "revId": "4ff72b60fdc93021ee7d6256ec8bd237deb36dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}