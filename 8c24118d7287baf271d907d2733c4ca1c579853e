{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f8c93b3_b60be982",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "LGTM",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dc9d43e_ccf71418",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "nit: -\u003e T maybe to help readers see what the type of the functions should be?",
      "range": {
        "startLine": 66,
        "startChar": 32,
        "endLine": 66,
        "endChar": 33
      },
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1242c62a_ced9f538",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "nit: ResultOrError\u003cT\u003e",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 6
      },
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aefdd58_bac66fe2",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 111,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "u-nit: WDYT of moving all the type aliases and static asserts at the top so the logic with the blob is closer to [a]?",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69fec932_ced414ea",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "optional-nit: it must return either T or ResultOrError\u003cT\u003e, not sure how to phrase this tersely.",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6fa5228_3c8703b4",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "[a]",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd239fd4_99322345",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 142,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "Why do we need to log? If we didn\u0027t have this I think we could use DAWN_TRY",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312ef087_6f41cf56",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 142,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-09T16:30:08Z",
      "side": 1,
      "message": "the thought was that if your Chrome cache gets corrupted which can sometimes happen, we wouldn\u0027t want to completely fail but instead fallback to not using the cache. Then, re-storing later will eventually overwrite the bad entries.\n\nTBH I don\u0027t understand what happens when the cache goes wrong too much. Most of the issue reports say that Chrome hangs or does nothing entirely on startup, so maybe the issue is that it fails to open the cache at all, and doesn\u0027t yield bad entries. I have run into issues in the past though where the browser mostly works but some profile stuff is broken - and you need to wipe user-data-dir to fix it.\n\nNot sure if it\u0027s worth doing now though since we\u0027re not always able to detect a bad cache blob anyway. like FXC blobs/D3D blobs are opaque and we don\u0027t get a success result until we pass it to pipeline creation.\nOther bits of reflection data could be more error-detectable cause we would have the deserialize it from the blob.\n\nWDYT?",
      "parentUuid": "dd239fd4_99322345",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b4df38b_696f235b",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "nit: Would DAWN_TRY_ASSIGN work?",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "876ddb57_d2b3a669",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 146,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-09T16:30:08Z",
      "side": 1,
      "message": "I don\u0027t think so because we return ResultOrError\u003cCacheResult\u003cT\u003e\u003e, not ResultOrError\u003cT\u003e\n\nMaybe it can work with an implicit conversion though?",
      "parentUuid": "9b4df38b_696f235b",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96c0adf4_4c626676",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 148,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "note: I was mildly expecting that we would try to store the result in the cache at this point. Do we want to keep that outside for some reason?",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f216104_33e9fc90",
        "filename": "src/dawn/native/CacheRequest.h",
        "patchSetId": 13
      },
      "lineNbr": 148,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-09T16:30:08Z",
      "side": 1,
      "message": "may add it later but wasn\u0027t sure without finishing up usages of LoadOrRun in the various backends.\n\nThere were some unclear lifetime concerns about usage of the computed result and storing it. We want to be able to defer the store till later, so it doesn\u0027t block immediate usage of the pipeline/shader.\n\nIf we store immediately, then I think we need to do a copy to do that, because whoever is using the CacheResult\u003cT\u003e after LoadOrRun could drop it immediately after and we\u0027ll have a use-after-free.\nDeferred storage could look more like you do `CacheResult\u003cT\u003e::EnsureStored(BlobCache*);` once you\u0027re done using it so we don\u0027t need to copy.\nMetal shaders especially, since in order to store, we need to serialize the string, and a few reflection booleans as well. That serialization shouldn\u0027t need to happen before you can use the MTLFunction.\n\nNot sure yet though tbh",
      "parentUuid": "96c0adf4_4c626676",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eecb477_94adb5a7",
        "filename": "src/dawn/native/CacheResult.h",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "nit: leftover? I\u0027m not sure what this forward declaration is for.",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ce44f91_114e938f",
        "filename": "src/dawn/native/CacheResult.h",
        "patchSetId": 13
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "ditto",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "607959c8_4e9ece0f",
        "filename": "src/dawn/native/CacheResult.h",
        "patchSetId": 13
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "nit: I\u0027m not sure why we need the whole panoply of conversions etc. Maybe we can come back later to trim the unused ones we know which are used.",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52e70dac_969f7336",
        "filename": "src/dawn/tests/unittests/native/CacheRequestTests.cpp",
        "patchSetId": 13
      },
      "lineNbr": 177,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-09T15:26:40Z",
      "side": 1,
      "message": "nit: Maybe we should test that UnsafeUnkeyed values are also passed.",
      "revId": "8c24118d7287baf271d907d2733c4ca1c579853e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}