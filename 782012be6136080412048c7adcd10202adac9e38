{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "baa6f8ec_2bb6e835",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-03T01:38:51Z",
      "side": 1,
      "message": "LGTM",
      "revId": "782012be6136080412048c7adcd10202adac9e38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4aa460c6_55f6561f",
        "filename": "generator/dawn_json_generator.py",
        "patchSetId": 6
      },
      "lineNbr": 693,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-03-03T01:11:08Z",
      "side": 1,
      "message": "Do we want/need support for floats here?",
      "revId": "782012be6136080412048c7adcd10202adac9e38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b743c1f4_36757972",
        "filename": "generator/templates/dawn/native/api_absl_format.h",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-03-03T01:11:08Z",
      "side": 1,
      "message": "This is a nice generalization of the serialization output!\n\nNot a problem that needs to be solved now, but I feel like we\u0027re likely to hit a point in the not-so-distant future where we may want an object to have both a nice formatting for error messages AND a serialized format. It\u0027s not clear to me how we\u0027d manage that with the Abseil formatting, but something to keep in mind.",
      "revId": "782012be6136080412048c7adcd10202adac9e38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf9c7728_a973982d",
        "filename": "generator/templates/dawn/native/api_absl_format.h",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-03T01:38:51Z",
      "side": 1,
      "message": "indeed. for key generation, this is currently pretty fat. We don\u0027t really need to fully stringify member names, etc. Also don\u0027t need to fully stringify enums. It is more concise to turn the enum into a number. Type names as well could be integer ids.\n\nBut, probably ok that it\u0027s fat for now until we measure it to be a big problem.",
      "parentUuid": "b743c1f4_36757972",
      "revId": "782012be6136080412048c7adcd10202adac9e38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87c15814_0fdf0a24",
        "filename": "src/dawn/native/BindingInfo.cpp",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-03T01:38:51Z",
      "side": 1,
      "message": "so this looks like:\n\nmyBindingInfoType: { ...stuff }\n\nwhat if we exclude myBindingInfoType and instead serialization of \"stuff\" (buffer binding layout, sampling binding layout, etc.) includes the name of the struct in front?\n\n\nSo \"BufferBindingLayout {  ...contents  }\"\nthen, we might not need myBindingInfoType\n\nBecause right now, the serialization of two structs, with different types, looks identical since it doesn\u0027t include the struct name. I don\u0027t think we have such structs with identical layouts, but if could be a source of obscure bugs in the future if two keys collide because they serialized in this way.",
      "range": {
        "startLine": 52,
        "startChar": 87,
        "endLine": 52,
        "endChar": 93
      },
      "revId": "782012be6136080412048c7adcd10202adac9e38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}