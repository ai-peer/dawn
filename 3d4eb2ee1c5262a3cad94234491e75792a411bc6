{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "496799c6_def8498e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2024-03-05T02:55:01Z",
      "side": 1,
      "message": "Not passing all tests yet, asking questions about [1]",
      "revId": "3d4eb2ee1c5262a3cad94234491e75792a411bc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97aa242f_ad587450",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1901,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2024-03-05T02:55:01Z",
      "side": 1,
      "message": "[1] Question for failing `webgpu:api,validation,state,device_lost,destroy:createComputePipelineAsync:*`\n\nFailing for the last bit \n\"// Destroy the device, and expect it to be lost.\"\n\"// After device destroy, creation should still resolve successfully.\"\n\nhttps://github.com/gpuweb/cts/blob/main/src/webgpu/api/validation/state/device_lost/destroy.spec.ts#L518-L532\n\nI\u0027m not sure what to do to fit those requirements. APICreateComputePipelineAsyncF always return a future with a event. and I think `CreateComputePipelineAsyncEvent::Complete` looks good to all device lost cases?",
      "revId": "3d4eb2ee1c5262a3cad94234491e75792a411bc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cadde47_135831f7",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1901,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-05T18:17:01Z",
      "side": 1,
      "message": "I think that instead, you would handle it a bit earlier at [2]. I think you would make an error pipeline `ComputePipelineBase::MakeError`, and create an already-completed CreateComputePipelineAsyncEvent with it.\n\nThen CreateComputePipelineAsyncEvent::Complete will call the callback with that error pipeline but using the Success status",
      "parentUuid": "97aa242f_ad587450",
      "revId": "3d4eb2ee1c5262a3cad94234491e75792a411bc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e1a3305_d4ec4990",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1901,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2024-03-05T18:40:29Z",
      "side": 1,
      "message": "Oh good to know we can create an error pipeline. Thanks.",
      "parentUuid": "0cadde47_135831f7",
      "revId": "3d4eb2ee1c5262a3cad94234491e75792a411bc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45154507_71bb305d",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1901,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2024-03-07T22:14:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e1a3305_d4ec4990",
      "revId": "3d4eb2ee1c5262a3cad94234491e75792a411bc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}