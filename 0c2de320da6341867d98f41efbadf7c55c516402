{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "23a22d55_2385d758",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-06-30T08:50:45Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8a04153_3f0b505b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-30T13:51:51Z",
      "side": 1,
      "message": "LGTM",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5124f8ac_4842e2e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-06-30T18:18:59Z",
      "side": 1,
      "message": "It\u0027s worth thinking about another aspect, but I\u0027m not sure it affects the correctness of the change.\n\n\nIndices should not be allowed to be too large. If they are bigger than INT_MAX, then backends might treat them as negative. \n\nThe robustness clamping code first converts the index to u32, then uses \u0027min\u0027.  That\u0027s believed to be safe.  (The max buffer size is limited to make sure there are never more than INT_MAX elements in a runtime-sized array.)\n\nIf robustness is not applied, then negative indices are able to pass through to the backend.\n\nIn LLVM and SPIR-V array indices are considered to be *signed*.\nThere was a long discussion related to this in WGSL: https://github.com/gpuweb/gpuweb/issues/1135 \n\nSo let\u0027s split cases:\n- A negative index is passed to the backend.  \n    - If the runtime-sized array is the only thing in the buffer, then RBA2 will catch the problem.  That\u0027s good.\n    - If the runtime-sized array is not the first field in the buffer, then the code may access the wrong data still inside the buffer.  Backends will treat that as undefined behaviour. \n- A large unsigned index is passed to the backend.    If it\u0027s below INT_MAX, then RBA2 handles it. If it\u0027s above INT_MAX, then it\u0027s treated as a negative index.\n\n\nSo I think this ends up with the same concern I posted earlier.\nThis change is only safe if the runtime-sized array is the only thing in the buffer.",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7330dd72_b4b24781",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-07-03T07:51:36Z",
      "side": 1,
      "message": "Hi David,\n\nThanks for your comments here! Since there are problems with signed integer indexing, I suggest in this CL we just skip robustness transform on unsized arrays with an unsigned integer index, then we won\u0027t meet the issues you mentioned about using signed integer as indices. What do you think?",
      "parentUuid": "5124f8ac_4842e2e5",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffa718de_c28ac15f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-05T07:56:48Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7330dd72_b4b24781",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22cf6fdf_c3828114",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-30T13:51:51Z",
      "side": 1,
      "message": "nit: Unsized",
      "range": {
        "startLine": 270,
        "startChar": 15,
        "endLine": 270,
        "endChar": 21
      },
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9237d178_c4796c10",
        "filename": "src/dawn/native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-07-03T07:51:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22cf6fdf_c3828114",
      "range": {
        "startLine": 270,
        "startChar": 15,
        "endLine": 270,
        "endChar": 21
      },
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "821c4e94_9eaf9d77",
        "filename": "src/tint/ast/transform/robustness.cc",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-06-30T17:19:04Z",
      "side": 1,
      "message": "This is too loose.\n\nConsider this storage buffer:\n\nstruct contents {\n       a: int,\n       b: array\u003cint\u003e,\n}\n  \nvar\u003cstorage\u003e buf: contents;\n\nThen accessing    buf.b[-1]  will be undefined behaviour, and robustness2 will not protect against it because it\u0027s still within the bounds.",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6196330_c935a720",
        "filename": "src/tint/ast/transform/robustness.cc",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-04T11:38:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "821c4e94_9eaf9d77",
      "revId": "0c2de320da6341867d98f41efbadf7c55c516402",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}