{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b0795f66_e5d7da4c",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T18:48:04Z",
      "side": 1,
      "message": "should this be `aiaf_f32i32f16` as it\u0027s both `ai` and `af`?",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7359daf4_4cc71617",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T18:54:30Z",
      "side": 1,
      "message": "Inspired from `aiu32` which doesn\u0027t split `ai` from `i32`. Not sure what\u0027s the right way.",
      "parentUuid": "b0795f66_e5d7da4c",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd66aabd_317c7f82",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T19:08:18Z",
      "side": 1,
      "message": "Yea, they don\u0027t seem to be consistent as there is an `af_f32` below.\n\nFrom my reading of this, I\u0027d guess it was `abstract float`, `i32`, and `f16`, not `abstract-int`, `abstract-float`, `f32`, `i32`, and `f16`.",
      "parentUuid": "7359daf4_4cc71617",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96d74bc3_fdea9dbf",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T19:11:33Z",
      "side": 1,
      "message": "Thoughts, Ben? I don\u0027t really mind what direction we go with this. Naming is hard ðŸ˜Š",
      "parentUuid": "bd66aabd_317c7f82",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4330b822_39921f69",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-18T20:39:42Z",
      "side": 1,
      "message": "My brain parses this as `af`. `i32`. `f16`.\nPrior to abstracts, we had `[fui]+32`. So maybe it would be more consistent / reduce ambiguity to change abstracts to `[fi]a`, keeping the precision as the RHS. Then this would be:\n\n`fai32f16`\n\nor maybe we should reduce ambiguity further with:\n\n`fa_i32_f16`\n\nThoughts?",
      "parentUuid": "96d74bc3_fdea9dbf",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9a6c084_2036415c",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T20:50:45Z",
      "side": 1,
      "message": "Wouldn\u0027t this be `faiaf32i32f16` ?",
      "parentUuid": "4330b822_39921f69",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39e20020_6a0b0e28",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-18T23:12:53Z",
      "side": 1,
      "message": "Yeah, I screwed that up royally, sorry. Let\u0027s try that again:\n\n`fiafi32f16` or `fia_fi32_f16`\n\nwhich is read as:\n\n`[float, int] x abstract`, `[float, int] x 32-bit`, `[float] x 16-bit`.",
      "parentUuid": "f9a6c084_2036415c",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1adf0ca9_28cd30d1",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T14:11:44Z",
      "side": 1,
      "message": "Yeah, I like what you propose, Ben, with the underscores. I\u0027ll leave this as is, and follow up with a change that normalizes all of the Type matchers. Cool?",
      "parentUuid": "39e20020_6a0b0e28",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8097cde_4253158c",
        "filename": "src/tint/intrinsics.def",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T14:21:53Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "1adf0ca9_28cd30d1",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa20b0bf_8b05ed0e",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T18:48:04Z",
      "side": 1,
      "message": "These are only used once, can we just inline them?",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6038c4f2_b5ee63a8",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T18:54:30Z",
      "side": 1,
      "message": "The point is to match the alias declared in intrinsics.def.",
      "parentUuid": "fa20b0bf_8b05ed0e",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53b6ad65_0bcc307f",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T19:08:18Z",
      "side": 1,
      "message": "Can we just do that with a comment above the usage instead of having to jump around the file to understand the context?",
      "parentUuid": "6038c4f2_b5ee63a8",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de0d25ea_ee4d4270",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T15:04:37Z",
      "side": 1,
      "message": "This is the remaining open comment. Dan, are you happy with this landing?",
      "parentUuid": "53b6ad65_0bcc307f",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1c9f560_183b8343",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T15:06:02Z",
      "side": 1,
      "message": "I\u0027m not using these aliases in TypeDispatch, so they\u0027re not just used once anymore.",
      "parentUuid": "de0d25ea_ee4d4270",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a660f259_624b7982",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-19T15:42:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1c9f560_183b8343",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0255c0d_7edf07e2",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T18:48:04Z",
      "side": 1,
      "message": "Why not a switch like ZeroTypeDispatch below?",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6c320e7_d6785ba4",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T18:54:30Z",
      "side": 1,
      "message": "With `if consexpr`, this will only generate the code for the types passed into the tuple. This is important because with a Switch of all types, the callback function must support all types, which isn\u0027t always possible.",
      "parentUuid": "b0255c0d_7edf07e2",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d032567_0b93360e",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T19:08:18Z",
      "side": 1,
      "message": "Is that the case here that we can\u0027t support all types? Or is this in case we run into that in the future?",
      "parentUuid": "c6c320e7_d6785ba4",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c02323a_7849ab74",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T19:10:24Z",
      "side": 1,
      "message": "We don\u0027t want to switch on all types - only the ones we can support for the given operation. This generic solution allows us to only handle the types we specify in the tuple.",
      "parentUuid": "9d032567_0b93360e",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a34f843_82f07808",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T19:23:24Z",
      "side": 1,
      "message": "I guess my question is, do we _need_ to do that? For this CL, does the function only work for those types? Are we doing it for code size reasons? Perf reasons? Or does the code just not build?\n\nThe reason I ask is that things have been getting converted over to `Switch` so it\u0027s weird to see non-switch things, and I\u0027m trying to figure out how we convey that this instance is different.",
      "parentUuid": "7c02323a_7849ab74",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db688262_4a03d74e",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T19:24:55Z",
      "side": 1,
      "message": "Ah, I understand what you\u0027re asking now. Yes, we need it, otherwise we\u0027ll be trying to apply unary minus to a bool, for example.",
      "parentUuid": "2a34f843_82f07808",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e8d1d1c_fb18545b",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-18T20:39:42Z",
      "side": 1,
      "message": "We are losing here the performance gains of `Switch` though. My solution was to hand-roll a separate dispatch function per matcher set. It\u0027s more code, but it\u0027s faster, and (IMO) a bit easier to understand what\u0027s going on.\n\nI like your idea of matching the name of the set of types with those declared in `intrinsics.def`. If we want to keep these in sync, it wouldn\u0027t be impossible to generate the `Dispatch` functions from the `intrinsic.def` file, keeping both performance and having a single-source-of-truth.",
      "parentUuid": "db688262_4a03d74e",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7381232_62219bdf",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T21:08:27Z",
      "side": 1,
      "message": "Okay, then I guess I\u0027ll replace this and hand-roll specific ones per matcher set. W can look at generating later if it makes sense.",
      "parentUuid": "2e8d1d1c_fb18545b",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc66202f_1c9caf7c",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T14:11:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7381232_62219bdf",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb52acb6_f5afd296",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3037,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T18:48:04Z",
      "side": 1,
      "message": "This isn\u0027t necessarily correct, per the spec the answer could be -0 or 0.",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac3cb6e1_a9a886a9",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3037,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T19:11:33Z",
      "side": 1,
      "message": "So I should just remove the 0 test case?",
      "parentUuid": "bb52acb6_f5afd296",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2087766c_bb98b1da",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3037,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T19:23:24Z",
      "side": 1,
      "message": "I\u0027m not really sure, I guess in our implementation we know it will be -0.0? Just the spec is strange in this instance? Either answer is technically correct, so if we always know we\u0027ll return -0.0 then maybe it\u0027s fine?",
      "parentUuid": "ac3cb6e1_a9a886a9",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "513b7fc5_e1d2e6b9",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3037,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-18T20:44:12Z",
      "side": 1,
      "message": "I\u0027m happy for our internal tests to check for better correctness than is necessary. I vote to keep the test.",
      "parentUuid": "2087766c_bb98b1da",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f05abc6_9e35f09b",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3045,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T18:48:04Z",
      "side": 1,
      "message": "What happens if I do unary minus on the smallest i32, f32, etc?",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24534f67_b84a7cfb",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3045,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T21:08:27Z",
      "side": 1,
      "message": "I missed this comment! If by \"smallest\" you mean \"minimum\", we can\u0027t unary minus the smallest i32 because the result doesn\u0027t fit in an i32. We could do for f32 though.",
      "parentUuid": "7f05abc6_9e35f09b",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14e42a06_8c23368e",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3045,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T14:11:44Z",
      "side": 1,
      "message": "Nevermind what I wrote. The spec basically says that unary minus of the lowest finite value (the minimum) for signed ints does the 2s complement thing (returns the same value). Added the missing cases.",
      "parentUuid": "24534f67_b84a7cfb",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d869a169_7d92a88a",
        "filename": "src/tint/traits.h",
        "patchSetId": 4
      },
      "lineNbr": 166,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-18T20:39:42Z",
      "side": 1,
      "message": "Might be more symmetrical to call this `traits::IsAnyOf`? It\u0027s effectively the same thing as the runtime check.",
      "range": {
        "startLine": 166,
        "startChar": 15,
        "endLine": 166,
        "endChar": 22
      },
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6db91600_f47e62fd",
        "filename": "src/tint/traits.h",
        "patchSetId": 4
      },
      "lineNbr": 166,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T21:08:27Z",
      "side": 1,
      "message": "True, but as I\u0027ll be removing my generic `TypeDispatch` for specific ones, I won\u0027t need this anymore, so I\u0027ll delete.",
      "parentUuid": "d869a169_7d92a88a",
      "range": {
        "startLine": 166,
        "startChar": 15,
        "endLine": 166,
        "endChar": 22
      },
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd74bef7_6a7c82a1",
        "filename": "src/tint/traits.h",
        "patchSetId": 4
      },
      "lineNbr": 166,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T14:11:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6db91600_f47e62fd",
      "range": {
        "startLine": 166,
        "startChar": 15,
        "endLine": 166,
        "endChar": 22
      },
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d98b4cab_73702745",
        "filename": "src/tint/writer/msl/generator_impl_unary_op_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-07-18T18:48:04Z",
      "side": 1,
      "message": "Why remove the unary minus part of the test?",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70484dec_49cdea27",
        "filename": "src/tint/writer/msl/generator_impl_unary_op_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-18T18:54:30Z",
      "side": 1,
      "message": "Now that we handle this at compile time, we no longer generate the call to the function. This test is now just useful in showing us that we emit `(-2147483647 - 1)`.",
      "parentUuid": "d98b4cab_73702745",
      "revId": "21a6dfc55815ebbca77a0cd4fd677e7cba0bc9bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}