{
  "comments": [
    {
      "key": {
        "uuid": "668a9354_703b75da",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-02T04:52:11Z",
      "side": 1,
      "message": "nit: If possible, I think it would make more sense to just check \u0027globalInfo.externalMemoryCapabilities\u0027 here, and set it to true if \u003e\u003d Vulkan 1.1.\n\nAlso if you did this, I think you could change this back to VulkanGlobalKnobs?",
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5700dd20_a42de74d",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-02T16:01:53Z",
      "side": 1,
      "message": "Here\u0027s the thing:\nhttps://github.com/KhronosGroup/Vulkan-Docs/issues/682\n\nThat thread summarized is that 1.1 isn\u0027t required to report these extensions. I don\u0027t have a device that does this to test, but I believe that if we request any extension that wasn\u0027t reported the device will fail to be created. And, currently we request extensions based on the knobs. So thats why I ended up leaving the knobs as-is, kind of a reflection of what extensions the device actually has.",
      "parentUuid": "668a9354_703b75da",
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9032ac38_a2876c6e",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-02T17:55:17Z",
      "side": 1,
      "message": "Ah, I see, didn\u0027t realize this was controlling extension requests as well. It would be nice if we could detangle this somehow so we could use a single check here, but fine to leave as is for now.",
      "parentUuid": "5700dd20_a42de74d",
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc05eefc_9edaa481",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-01T11:18:32Z",
      "side": 1,
      "message": "I\u0027m not sure that this entry point would have the name with the KHR suffix in 1.1. Maybe we need to do\n\n if (extension)\n    load with KHR\n else if (\u003e 1.1)\n    load without KHR suffix\n\n The problem is that they would go to two different members of VulkanFunctions, so maybe we can modify GET_INSTANCE_PROC to take an optional extension suffix so it loads with the suffix but stores in the member without the suffix.\n\nWDYT?",
      "range": {
        "startLine": 79,
        "startChar": 30,
        "endLine": 79,
        "endChar": 74
      },
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6459bfaf_45755e81",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2019-08-01T17:39:09Z",
      "side": 1,
      "message": "Right, so I was thinking about this for a while. If you check the Vulkan spec for 1.1 it doesn\u0027t say anything about the KHR versions. However, the 1.1 + extensions spec says: \n\n\"All functionality in this extension is included in core Vulkan 1.1, with the KHR suffix omitted. The original type, enum and command names are still available as aliases of the core functionality.\"\n\nSo this leads me to interpret that the code works as-is in 1.1. Then that only leaves the style question of if we want the KHR suffix in the codebase. My impression is that we are targeting 1.0 and using some extensions on top of that, so I\u0027m leaning towards keeping the KHR suffix. I think setting api to 1.1 is just a fix for getting these extensions enabled on more platforms, but we are still coding as if we were in 1.0. Thoughts?",
      "parentUuid": "dc05eefc_9edaa481",
      "range": {
        "startLine": 79,
        "startChar": 30,
        "endLine": 79,
        "endChar": 74
      },
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d87bc97_17a9c25c",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-01T17:57:50Z",
      "side": 1,
      "message": "Ah if the spec forces KHR to be present in 1.1, the current code sounds fine.",
      "parentUuid": "6459bfaf_45755e81",
      "range": {
        "startLine": 79,
        "startChar": 30,
        "endLine": 79,
        "endChar": 74
      },
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ca0945a_f7acc514",
        "filename": "src/dawn_native/vulkan/VulkanFunctions.cpp",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-02T04:52:11Z",
      "side": 1,
      "message": "All sounds great to me.",
      "parentUuid": "1d87bc97_17a9c25c",
      "range": {
        "startLine": 79,
        "startChar": 30,
        "endLine": 79,
        "endChar": 74
      },
      "revId": "172509fec05e0adb5e6b5743ef0c5f5ac89ae9de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}