{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c5fcdd86_5e86fbb2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-01-29T21:25:14Z",
      "side": 1,
      "message": "PTAL. Thank you!",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f556af_c4e8d588",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-01-29T21:25:14Z",
      "side": 1,
      "message": "We have a lot of `ArrayLayer` related info here and there for texture descriptor. I suppose it is fine. If you think it\u0027s annoying, I can replace it with `depth` in a separate code refactoring patch.",
      "range": {
        "startLine": 28,
        "startChar": 41,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f7a1274_497364c4",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-01-29T23:41:11Z",
      "side": 1,
      "message": "What about having two separate functions, one as this was, and one for 3D that takes a full (optional?) wgpu::Extent3D instead of depth,width,height?\n\nRequired depth but optional width/height for a helper function to create 3d textures is weird.",
      "parentUuid": "b2f556af_c4e8d588",
      "range": {
        "startLine": 28,
        "startChar": 41,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f13ecf26_cc00afac",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-01-30T00:57:48Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "1f7a1274_497364c4",
      "range": {
        "startLine": 28,
        "startChar": 41,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8ac3eb_59f7fbe5",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-01-29T23:41:11Z",
      "side": 1,
      "message": "nit: It isn\u0027t a problem in practice, but this permanently alters the descriptor. If the invalidDimensions array were re-ordered, it would change the test behavior.\n\nPerhaps simply move the definition of `descriptor` inside this loop.",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b580bb15_b95ce01c",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-01-30T00:57:48Z",
      "side": 1,
      "message": "My mistake. Done.",
      "parentUuid": "0f8ac3eb_59f7fbe5",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e82a6ee6_dcdd9faa",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-01-29T23:41:11Z",
      "side": 1,
      "message": "aside: Hm, this is a small mismatch between the C and JS APIs. Zero in JS actually means zero, not \"auto\". I don\u0027t know if we should change it (to WGPU_WHOLE_SIZE), but maybe.",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24201d9a_17e7b13a",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-01-30T00:57:48Z",
      "side": 1,
      "message": "Maybe not? I visited CTS, and found that tests in CTS (creating_texture_view_on_a_2D_non_array_texture and creating_texture_view_on_a_2D_array_texture in createView.spec.ts) also followed this rule. I also read the WebGPU spec, it says \"if undefined, defaults to ...\" for mipLevelCount and arrayLayerCount, it doesn\u0027t mention \"0\", though. So, it seems that CTS treated \"0\" as \"undefined\" for this special case.",
      "parentUuid": "e82a6ee6_dcdd9faa",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85dfe651_7bb57c37",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-01-30T05:03:40Z",
      "side": 1,
      "message": "The spec is correct, CTS needs to be fixed (test is probably from before we got clarity on that)",
      "parentUuid": "24201d9a_17e7b13a",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b36174a_cbd5203c",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-02-01T07:09:26Z",
      "side": 1,
      "message": "OK. That makes sense. If mipLevelCount or arrayLayerCount is assigned to \u0027undefined\u0027 at JS side (and being assigned to zero is invalid at JS side), what value is it at Dawn side? I can submit a separate patch to fix that issue in both CTS and dawn.",
      "parentUuid": "85dfe651_7bb57c37",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbd2df6e_e0aad66e",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-01T15:33:00Z",
      "side": 1,
      "message": "As usual this is a change we should discuss in webgpu-native. Like always I\u0027m mildly concerned that 0 initialization won\u0027t mean the default values for C.",
      "parentUuid": "0b36174a_cbd5203c",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fd88b5c_81f1583e",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-02-01T17:58:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fbd2df6e_e0aad66e",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b45b49e8_3c0c4e7a",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-02-02T01:34:08Z",
      "side": 1,
      "message": "https://github.com/gpuweb/gpuweb/pull/945\nhttps://github.com/webgpu-native/webgpu-headers/issues/77\nhttps://github.com/gpuweb/cts/pull/450",
      "parentUuid": "0fd88b5c_81f1583e",
      "revId": "e3fc38b29f5b45f7d3fd00d1eee373d3326a4202",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}