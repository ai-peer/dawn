{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e486c0ac_00dbaad0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-26T23:54:24Z",
      "side": 1,
      "message": "PTAL! This is take 2 after https://dawn-review.googlesource.com/c/dawn/+/67000 was reverted. The primary change this time is that pass encoders have been updated to no longer leave invalid pointers in the EncoderContext after they\u0027ve been deleted, which should avoid the use after free issue that we had previously.",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73c91832_4157bff6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-27T04:26:07Z",
      "side": 1,
      "message": "LGTM",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e704238_423f4b9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-27T07:50:22Z",
      "side": 1,
      "message": "LGTM",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf057cb2_b837caa3",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-27T16:07:37Z",
      "side": 1,
      "message": "[1]",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40f024f8_73a76f7d",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-27T07:50:22Z",
      "side": 1,
      "message": "Maybe the encoding context should keep a ref? This new error means that JS is able to observe garbage collection by doing:\n\nlet encoder \u003d ...;\nencoder.beginComputePass();\n\n// wait for the unhandled error callback here.\n\nWe can fix this in a follow-up, or file an issue for it.",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e120207_92a007e1",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-27T15:43:17Z",
      "side": 1,
      "message": "it shouldn\u0027t get the error until Finish(), so not observable (which we should add a test though)\n\nAlthough I guess the error message might be different which could potentially be observed. We can make the message the same?",
      "parentUuid": "40f024f8_73a76f7d",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "874f62a3_764c1bee",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-27T16:07:09Z",
      "side": 1,
      "message": "Ah thanks for the explanation. Error vs. no error was a big difference that could surprise sites in the wild, but since it is only a message difference I think it\u0027ll be ok. A test to make sure the error is done at Finish would be good along with an explanation of why it is important to test that.",
      "parentUuid": "1e120207_92a007e1",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "214995ae_5a888fef",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-27T16:07:37Z",
      "side": 1,
      "message": "This was the primary thing I struggled with. Keeping a Ref to the PassEncoder anywhere creates a reference loop: CommandEncoder owns the EncodingContext, and the Passes keep a Ref to the CommandEncoder, so if the EncodingContext keeps a ref to the Pass then you could drop both the unfinished Pass and the CommandEncoder and they\u0027d never be deleted.\n\nStill open to better recommendations than this, though!\n\nAlso, given how the EncodingContext handles errors (See [1]), it would store the error until the CommandEncoder calls Finish(), which prevents the garbage collect from being directly observed. \n\nI guess you could presumably set up a whole bunch of encoders with de-referenced passes and call finish on the CommandEncoders at a steady cadence and see which one starts complaining about the Pass being deleted. To avoid that concern I\u0027ve simply made it report the same error as not ending the pass.",
      "parentUuid": "40f024f8_73a76f7d",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c28368e_c9d4441c",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-27T07:50:22Z",
      "side": 1,
      "message": "Can\u0027t it be in the destructor?",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f02df6d_c23c335c",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-27T16:07:37Z",
      "side": 1,
      "message": "Tried that first! It crashed a lot.",
      "parentUuid": "7c28368e_c9d4441c",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5cfe9f5_342210fd",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-27T16:12:38Z",
      "side": 1,
      "message": "Weird, do you know why it crashes? We\u0027re not using anything but the pointer so it seems it should work (there are no destructor order shenanigans?)",
      "parentUuid": "8f02df6d_c23c335c",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab119a6_15322769",
        "filename": "src/dawn_native/ProgrammablePassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-27T16:39:44Z",
      "side": 1,
      "message": "In EnsurePassExited I\u0027m generating an error message that uses the pass as one of the formatting inputs. I can\u0027t point at a specific spot and say \"This is what caused the crash\", but it was generally doing a lot more with the pointer in the formatting code than I was comfortable with happening in a destructor. I moved the code to DeleteThis() when I realized what was going on.",
      "parentUuid": "a5cfe9f5_342210fd",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af36b116_cb940daa",
        "filename": "src/tests/unittests/validation/CommandBufferValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-27T04:26:07Z",
      "side": 1,
      "message": "also test the case where you don\u0027t ever call Finish()\n{\n  wgpu::CommandEncoder encoder \u003d device.CreateCommandEncoder();\n  wgpu::RenderPassEncoder pass \u003d encoder.BeginRenderPass(\u0026dummyRenderPass);\n}\n\nwhich generates the error internally but never surfaces it anywhere - so the uncaptured error callback shouldn\u0027t be called",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3616931c_ff4be897",
        "filename": "src/tests/unittests/validation/CommandBufferValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-10-27T16:07:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af36b116_cb940daa",
      "revId": "1dff39d4e4c877e3e055688ec566bc1497e30e0f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}