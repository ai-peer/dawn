{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d154dacf_e2b42407",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:05:46Z",
      "side": 1,
      "message": "Suggest adding a protected `Instruction::AddOperand(object)` which does the `TINT_ASSERT()`, `operands_.Push()` and `AddUsage()`.\n\nCan be done as followup.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 5
      },
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "058810b4_d37dee99",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "I added the `AddOperand` helper (to `OperandInstruction`), but I didn\u0027t push the `TINT_ASSERT` calls into it since it\u0027s the sub-classes that know whether or not an operand can be `nullptr`.",
      "parentUuid": "d154dacf_e2b42407",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 5
      },
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aff4918_4a25b385",
        "filename": "src/tint/ir/branch.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "Why `4` here? it seems like no operand branches would be more common?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e495e05_d1cd0428",
        "filename": "src/tint/ir/branch.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Changed to `1` for now.\n\nWe have `breakif`, `if`, and `switch` which have a condition operand, and `return` will often have an operand too. The others will sometimes have block arguments to pass.",
      "parentUuid": "9aff4918_4a25b385",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69a520c4_7e1bf4a0",
        "filename": "src/tint/ir/break_if.cc",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "Could `Branch` have a `SetArgs` call which does this `for` loop so we don\u0027t have to repeate it in each constructor?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d329fdb1_b8884468",
        "filename": "src/tint/ir/break_if.cc",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:05:46Z",
      "side": 1,
      "message": "Or `Instruction::AddOperands()`",
      "parentUuid": "69a520c4_7e1bf4a0",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cae00f35_424f7336",
        "filename": "src/tint/ir/break_if.cc",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Added `OperandInstruction::AddOperands()`. There\u0027s some asymmetry here with `AddOperand` as I put the `TINT_ASSERT` in `AddOperands()` but not in `AddOperand()` (see comment in the other thread).",
      "parentUuid": "d329fdb1_b8884468",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "198a7fbd_4bd597ff",
        "filename": "src/tint/ir/builtin.cc",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "Ditto `SetArgs` method on `Call`?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "140b0091_d6834e62",
        "filename": "src/tint/ir/builtin.cc",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Did this with `AddOperands()`.",
      "parentUuid": "198a7fbd_4bd597ff",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9204ca3d_226a6d30",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "Is there something we can do it make these not require a `Slice().Reinterpret\u003cconst Value*\u003e()` when passing the value list?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "873b1192_7c5b6b7b",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:05:46Z",
      "side": 1,
      "message": "Should be doable with another constructor on `Slice` similar to `Vector`\u0027s:\n\n```\n    /// Copy constructor with covariance / const conversion\n    /// @param other the vector to copy\n    /// @see CanReinterpretSlice for rules about conversion\n    template \u003ctypename U,\n              size_t N2,\n              ReinterpretMode MODE,\n              typename \u003d std::enable_if_t\u003cCanReinterpretSlice\u003cMODE, T, U\u003e\u003e\u003e\n    Vector(const Vector\u003cU, N2\u003e\u0026 other) {  // NOLINT(runtime/explicit)\n        Copy(other.impl_.slice.template Reinterpret\u003cT, MODE\u003e);\n    }\n```\n\nFeel free to file a bug and I\u0027ll add it.",
      "parentUuid": "9204ca3d_226a6d30",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf5d7eb_0f2fda91",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-06-06T10:38:30Z",
      "side": 1,
      "message": "This should do the trick:\n\n```\n    /// Copy constructor with covariance / const conversion\n    /// @param other the slice to copy\n    /// @see CanReinterpretSlice for rules about conversion\n    template \u003ctypename U,\n              typename \u003d std::enable_if_t\u003cCanReinterpretSlice\u003cReinterpretMode::kSafe, T, U\u003e\u003e\u003e\n    Slice(const Slice\u003cU\u003e\u0026 other) {  // NOLINT(runtime/explicit)\n        *this \u003d other.template Reinterpret\u003cT, ReinterpretMode::kSafe\u003e();\n    }\n\n```",
      "parentUuid": "873b1192_7c5b6b7b",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a2ff1a_32299a28",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T14:09:51Z",
      "side": 1,
      "message": "I needed it too:\nhttps://dawn-review.googlesource.com/c/dawn/+/136200",
      "parentUuid": "6cf5d7eb_0f2fda91",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ba1a807_14b8ccc1",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19a2ff1a_32299a28",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0769334c_128c2b9b",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 576,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "nit: `tint::ir::` shouldn\u0027t be needed I don\u0027t think",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cf3295f_e4ed71d6",
        "filename": "src/tint/ir/disassembler.cc",
        "patchSetId": 5
      },
      "lineNbr": 576,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0769334c_128c2b9b",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3624ad78_e33b06c1",
        "filename": "src/tint/ir/if.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-06T01:25:46Z",
      "side": 1,
      "message": "Should this be `operands[0]` ?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "956a5eb4_e2e21cbc",
        "filename": "src/tint/ir/if.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3624ad78_e33b06c1",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dbe154d_f0992b2d",
        "filename": "src/tint/ir/if.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-06T01:25:46Z",
      "side": 1,
      "message": "Remove?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9839370_e35e584e",
        "filename": "src/tint/ir/if.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dbe154d_f0992b2d",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b34c64a_774d5603",
        "filename": "src/tint/ir/switch.h",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-06T01:25:46Z",
      "side": 1,
      "message": "operands_[0]?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b641cf4_eb99fd2a",
        "filename": "src/tint/ir/switch.h",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b34c64a_774d5603",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96c4ca71_b916b439",
        "filename": "src/tint/ir/switch.h",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-06T01:25:46Z",
      "side": 1,
      "message": "Remove?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e4f3602_e7cd5889",
        "filename": "src/tint/ir/switch.h",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96c4ca71_b916b439",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2edd629d_9bc072c1",
        "filename": "src/tint/ir/swizzle.cc",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "This is a use after move, need to keep the `_`.",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d2201be_14cddf6f",
        "filename": "src/tint/ir/swizzle.cc",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:05:46Z",
      "side": 1,
      "message": "Great spot!",
      "parentUuid": "2edd629d_9bc072c1",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da9ce754_9393b110",
        "filename": "src/tint/ir/swizzle.cc",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d2201be_14cddf6f",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81490592_0fdbf559",
        "filename": "src/tint/ir/user_call.h",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:05:46Z",
      "side": 1,
      "message": "Random thoughts - not asking for changes:\n\nIf we can guarantee that there\u0027s no way that `operands_[0]` is anything _but_ an `ir::Function`, then we can `static_cast` here and avoid the dynamic cast.\n\nWith `ReplaceWith()`, you probably could change the type of the operand to **any** `ir::Value` class - including those which are not `ir::Function`. In this situation you\u0027d have an operand pointer, but `Func()` would return `nullptr`. This is an interesting class of bugs.\n\nThe `CloneContext` has [some guards](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tint/clone_context.h;l\u003d590-603) that [caught this kind of issue](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tint/clone_context_test.cc;l\u003d1127-1152), but this had the benefit of having static type information about the member pointer, which we don\u0027t have with the IR.\n\nAnyway - this kind of issue would definitely would be a head scratcher, but a whole lot safer than `static_cast`-ing to the wrong thing. The validator should pick up that `Func()` returned nullptr, so probably not that serious.\n\nIf this did become an issue we could possibly make a tuple variant of `OperandInstruction`.",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 80
      },
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe4a5ee_edd5e24e",
        "filename": "src/tint/ir/var.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:35:13Z",
      "side": 1,
      "message": "We always push an `operand_` so is the length check needed?",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf61ed37_da9577ce",
        "filename": "src/tint/ir/var.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T18:04:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffe4a5ee_edd5e24e",
      "revId": "1abdc76b6965412518999828a9413f5d5d8e8ea3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}