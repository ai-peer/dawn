{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4e6202c5_ba3d700d",
        "filename": "src/tint/resolver/dependency_graph.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-02T17:11:19Z",
      "side": 1,
      "message": "Prior to this `globals_` did not contain empty symbols. Did you take a look at the usages to verify having the `Symbol()` values in there is OK?",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef081c8f_e27243bb",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 755,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-02T17:11:19Z",
      "side": 1,
      "message": "Would this be better outputting the `cond` as well? So you\u0027d see `static assertion \"(1 + 2) \u003d\u003d 4\" failed`?",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bb54946_4e980eef",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 755,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-08-02T18:00:51Z",
      "side": 1,
      "message": "The expression is squiggly highlighted in the diagnostic.\nI would love to expand the expression to the values, GCC-esq, but I found I couldn\u0027t actually test this as we don\u0027t have any binary ops implemented for `@const` yet!",
      "parentUuid": "ef081c8f_e27243bb",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14c4b110_6d0ee5f1",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 755,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-02T18:02:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4bb54946_4e980eef",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab03b65_55c3a32e",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 758,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-02T17:11:19Z",
      "side": 1,
      "message": "Why does this create a semantic node? Can\u0027t we, basically, just remove the static_assert now that we\u0027ve validated the condition is true?",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7712a0a7_b8859f9e",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 758,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-08-02T18:00:51Z",
      "side": 1,
      "message": "We can\u0027t remove the static_assert as the AST is immutable. There\u0027s limited value in the sem node, but not having a sem node would be a first, and I suspect something might break if there was no mapping.",
      "parentUuid": "eab03b65_55c3a32e",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0497c35_72e44f19",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 758,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-02T18:02:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7712a0a7_b8859f9e",
      "revId": "f19d584e76b93058244a565b8f3149bd34e42056",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}