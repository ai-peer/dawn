{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "80c2050f_b21e8069",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-29T19:40:26Z",
      "side": 1,
      "message": "Corentin, Austin: PTAL. Thanks!\n\nBTW it turns out we rely on some EGL 1.5 behaviour (EGLImage, context creation w/version) without checking extensions, so I\u0027ve set 1.5 as the minimum for now. (We should still check how prevalent 1.5 is, but it did come out in 2014.)",
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec548cc3_38b446aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "LGTM",
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01080983_667627db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-30T12:31:56Z",
      "side": 1,
      "message": "No additional comments. LGTM",
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd572c8e_57a01c17",
        "filename": "src/dawn/native/opengl/BackendGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "nit: DeviceBase has a version of ConsumedError that takes ResultOrError\u003cT\u003e - perhaps we can add one to the Instance too?\nThen we don\u0027t need to worry about manually doing AcquireError/AcquireSuccess in this function.\njust:\n```\nstd::unique_ptr\u003cDevice::Context\u003e context;\nif (GetInstance()-\u003eConsumedError(Create.., \u0026context)) {\n  return {};\n}\n// now, |context| is populated\n```",
      "range": {
        "startLine": 62,
        "startChar": 23,
        "endLine": 62,
        "endChar": 36
      },
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24741821_4202e244",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "\"If no display connection matching native_display is available, EGL_NO_DISPLAY is returned. No error is generated.\"\n\nso maybe CheckEGL doesn\u0027t make the most sense since egl.GetError() wouldn\u0027t give you the error.\nWe can instead do DAWN_INVALID_IF display \u003d\u003d EGL_NO_DISPLAY",
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a9bfe13_0f92c5c8",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "ditto DAWN_INVALID_IF(version check, \"EGL version (%u.%u) must be at least 1.5\") or something",
      "range": {
        "startLine": 42,
        "startChar": 15,
        "endLine": 42,
        "endChar": 34
      },
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea74d10_c8ebd754",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "existing nit as I was checking docs for error conditions\n\nshould we be calling eglChooseConfig twice? One to determine the number of configs matching `config_attribs`, a second time to get all the configs.\n\nI\u0027m not sure when there are multiple framebuffer configurations and what we would do about it if we had multiple though.\n\nSeparately though, we should probably DAWN_INVALID_IF(num_config \u003d\u003d 0) after this since that would mean we didn\u0027t find any compatible configs.",
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf44f121_7b96fc58",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "can be separate CL: should this do error checks too? and then GetGL can consume the error and fire off a DeviceLost",
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e0b9443_85a62c46",
        "filename": "src/dawn/native/opengl/UtilsEGL.h",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-29T21:01:32Z",
      "side": 1,
      "message": "if you\u0027d like, we can do the error injection thing that we do in Vulkan/D3D - that way the fuzzers can find issues where we get an error, don\u0027t handle it fully and then do something bad like deref an invalid pointer or leak memory. could be a follow-up",
      "range": {
        "startLine": 27,
        "startChar": 11,
        "endLine": 27,
        "endChar": 19
      },
      "revId": "507444caa2b51da6ef19398b7677333b650a8cbc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}