{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9b71a716_bfb487f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-26T06:44:32Z",
      "side": 1,
      "message": "Likely the last piece of cake feature-wise for the d3d11 backend, PTAL.",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba5a5ade_ab42c836",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-26T23:54:00Z",
      "side": 1,
      "message": "do we really need to copy to a new texture?\n\nI asked microsoft folks, and they said that in D3D11, D24_UNORM_S8_UINT can have a view created with X24_TYPELESS_G8_UINT. I\u0027d assume you can do likewise with D32_FLOAT_S8X24_UINT --\u003e DXGI_FORMAT_X32_TYPELESS_G8X24_UINT.\n\nthen you can bind that to the shader and use textureLoad",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6caf707_b5b46239",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-27T01:15:49Z",
      "side": 1,
      "message": "Good to know that, thanks! Let me have a try.",
      "parentUuid": "ba5a5ade_ab42c836",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec4415e8_7c34a4cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-27T02:15:15Z",
      "side": 1,
      "message": "After recalling the dawn:1827 a little bit, I\u0027ve realized what was the actual problem. Indeed textureLoad can work with  X24_TYPELESS_G8_UINT/X32_TYPELESS_G8X24_UINT. However, currently Tint assumes to always sample the first component, which is the unused one in this case. See the dump WGSL and HLSL below. It\u0027s hardcoded to `texel[0]`. On D3D12, we are using `Shader4ComponentMapping` to solve this problem. But it\u0027s not available on D3D11. Probably we can fix the hardcoding in Tint. Nonetheless, it would be not very easy as far as I can see it. Sampling from stencil seems to be very rare case, so it\u0027s probably not worth making such changes in Tint.\n\n\n```\nInfo: // Dumped WGSL:\n\n                @group(0) @binding(0) var tex : texture_2d\u003cu32\u003e;\n\n                @fragment\n                fn main(@builtin(position) FragCoord : vec4f) -\u003e @location(0) vec4f {\n                    var texel \u003d textureLoad(tex, vec2i(FragCoord.xy), 0);\n                    return vec4f(f32(texel[0]) / 255.0, 0.0, 0.0, 0.0);\n                }\n\n\nInfo: /* Dumped generated HLSL */\nint2 tint_ftoi(float2 v) {\n  return ((v \u003c (2147483520.0f).xx) ? ((v \u003c (-2147483648.0f).xx) ? (-2147483648).xx : int2(v)) : (2147483647).xx);\n}\n\nTexture2D\u003cuint4\u003e tex : register(t0);\n\nstruct tint_symbol_1 {\n  float4 FragCoord : SV_Position;\n};\nstruct tint_symbol_2 {\n  float4 value : SV_Target0;\n};\n\nfloat4 main_inner(float4 FragCoord) {\n  uint4 texel \u003d tex.Load(int3(tint_ftoi(FragCoord.xy), 0));\n  return float4((float(texel[0]) / 255.0f), 0.0f, 0.0f, 0.0f);\n}\n\ntint_symbol_2 main(tint_symbol_1 tint_symbol) {\n  const float4 inner_result \u003d main_inner(tint_symbol.FragCoord);\n  tint_symbol_2 wrapper_result \u003d (tint_symbol_2)0;\n  wrapper_result.value \u003d inner_result;\n  return wrapper_result;\n}\n\n\n```",
      "parentUuid": "b6caf707_b5b46239",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fda04ecf_fee54c60",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-27T22:51:19Z",
      "side": 1,
      "message": "darn. thanks for the explanation.\n\nI think it should be possible to do a GPU blit. It would basically be the inverse of [BlitR8ToStencil](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/BlitBufferToDepthStencil.cpp;l\u003d316?q\u003dBlitR8ToStencil\u0026sq\u003d)\n\nYou\u0027ll perform 8 draws, one for each bit, setting the stencilReadMask appropriately so the corresponding bit is set. (0b00000001, 0b00000010, 0b00000100, ...) If the stencil test *passes*, that means that that bit is indeed set in the source stencil texture. You can set the bit accordingly in the R8 output texture by using Blend operation Add, and returning a fragment color equal to the bit mask. Effectively, you\u0027ll accumulate the R8 output one bit at a time.\n\nthe current thing works though - so feel free to address this as a follow-up.",
      "parentUuid": "ec4415e8_7c34a4cf",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af2eb800_a696d0cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-28T03:17:09Z",
      "side": 1,
      "message": "A really smart idea of GPU blit, thanks!\nLet\u0027s see if we will need to improve with it moving forward.",
      "parentUuid": "fda04ecf_fee54c60",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb30a6fb_714806a1",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-27T22:51:19Z",
      "side": 1,
      "message": "why not add this usage when you create `mTextureForStencilSampling` instead? It doesn\u0027t need to be done for all Interm textures",
      "range": {
        "startLine": 286,
        "startChar": 4,
        "endLine": 291,
        "endChar": 0
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b8ebcc0_f3c135a1",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-28T03:17:09Z",
      "side": 1,
      "message": "Sounds good!\nIt seems I was in blackout thinking about how to add the usage.",
      "parentUuid": "fb30a6fb_714806a1",
      "range": {
        "startLine": 286,
        "startChar": 4,
        "endLine": 291,
        "endChar": 0
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab68619c_ad06f91e",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1116,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-27T22:51:19Z",
      "side": 1,
      "message": "typo: component",
      "range": {
        "startLine": 1116,
        "startChar": 38,
        "endLine": 1116,
        "endChar": 48
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e71c8b4_bb20cef2",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1116,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-28T03:17:09Z",
      "side": 1,
      "message": "Thanks for catching it!",
      "parentUuid": "ab68619c_ad06f91e",
      "range": {
        "startLine": 1116,
        "startChar": 38,
        "endLine": 1116,
        "endChar": 48
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33df3505_984672a9",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1136,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-27T22:51:19Z",
      "side": 1,
      "message": "this is a slight deuplication of some existing code to create ID3D11ShaderResourceView\n\nInstead, you could use a change mTextureForStencilSampling to a Ref\u003cTextureViewBase\u003e, \n\nThen this function would simply `return mTextureViewForStencilSampling-\u003eCreateD3D11ShaderResourceView()`.\n\nYou can still update it above using `mTextureViewForStencilSampling-\u003eGetTexture()-\u003eWriteInternal(...)`",
      "range": {
        "startLine": 1125,
        "startChar": 4,
        "endLine": 1136,
        "endChar": 55
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb931390_dd0e3aa4",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1136,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-28T03:17:09Z",
      "side": 1,
      "message": "Great, it would be better with less duplication.\nOne minor thing is that probably we should still keep Ref to the texture rather than a view, as conceptually there could various mipmap level views.",
      "parentUuid": "33df3505_984672a9",
      "range": {
        "startLine": 1125,
        "startChar": 4,
        "endLine": 1136,
        "endChar": 55
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa30fc7c_74765ec4",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1136,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-31T06:18:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "cb931390_dd0e3aa4",
      "range": {
        "startLine": 1125,
        "startChar": 4,
        "endLine": 1136,
        "endChar": 55
      },
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}