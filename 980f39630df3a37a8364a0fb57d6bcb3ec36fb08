{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9b71a716_bfb487f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-26T06:44:32Z",
      "side": 1,
      "message": "Likely the last piece of cake feature-wise for the d3d11 backend, PTAL.",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba5a5ade_ab42c836",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-26T23:54:00Z",
      "side": 1,
      "message": "do we really need to copy to a new texture?\n\nI asked microsoft folks, and they said that in D3D11, D24_UNORM_S8_UINT can have a view created with X24_TYPELESS_G8_UINT. I\u0027d assume you can do likewise with D32_FLOAT_S8X24_UINT --\u003e DXGI_FORMAT_X32_TYPELESS_G8X24_UINT.\n\nthen you can bind that to the shader and use textureLoad",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6caf707_b5b46239",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-27T01:15:49Z",
      "side": 1,
      "message": "Good to know that, thanks! Let me have a try.",
      "parentUuid": "ba5a5ade_ab42c836",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec4415e8_7c34a4cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-07-27T02:15:15Z",
      "side": 1,
      "message": "After recalling the dawn:1827 a little bit, I\u0027ve realized what was the actual problem. Indeed textureLoad can work with  X24_TYPELESS_G8_UINT/X32_TYPELESS_G8X24_UINT. However, currently Tint assumes to always sample the first component, which is the unused one in this case. See the dump WGSL and HLSL below. It\u0027s hardcoded to `texel[0]`. On D3D12, we are using `Shader4ComponentMapping` to solve this problem. But it\u0027s not available on D3D11. Probably we can fix the hardcoding in Tint. Nonetheless, it would be not very easy as far as I can see it. Sampling from stencil seems to be very rare case, so it\u0027s probably not worth making such changes in Tint.\n\n\n```\nInfo: // Dumped WGSL:\n\n                @group(0) @binding(0) var tex : texture_2d\u003cu32\u003e;\n\n                @fragment\n                fn main(@builtin(position) FragCoord : vec4f) -\u003e @location(0) vec4f {\n                    var texel \u003d textureLoad(tex, vec2i(FragCoord.xy), 0);\n                    return vec4f(f32(texel[0]) / 255.0, 0.0, 0.0, 0.0);\n                }\n\n\nInfo: /* Dumped generated HLSL */\nint2 tint_ftoi(float2 v) {\n  return ((v \u003c (2147483520.0f).xx) ? ((v \u003c (-2147483648.0f).xx) ? (-2147483648).xx : int2(v)) : (2147483647).xx);\n}\n\nTexture2D\u003cuint4\u003e tex : register(t0);\n\nstruct tint_symbol_1 {\n  float4 FragCoord : SV_Position;\n};\nstruct tint_symbol_2 {\n  float4 value : SV_Target0;\n};\n\nfloat4 main_inner(float4 FragCoord) {\n  uint4 texel \u003d tex.Load(int3(tint_ftoi(FragCoord.xy), 0));\n  return float4((float(texel[0]) / 255.0f), 0.0f, 0.0f, 0.0f);\n}\n\ntint_symbol_2 main(tint_symbol_1 tint_symbol) {\n  const float4 inner_result \u003d main_inner(tint_symbol.FragCoord);\n  tint_symbol_2 wrapper_result \u003d (tint_symbol_2)0;\n  wrapper_result.value \u003d inner_result;\n  return wrapper_result;\n}\n\n\n```",
      "parentUuid": "b6caf707_b5b46239",
      "revId": "980f39630df3a37a8364a0fb57d6bcb3ec36fb08",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}