{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "29a507e9_c7b46981",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-06T20:55:05Z",
      "side": 1,
      "message": "LGTM",
      "revId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "824dcf3a_be90cf0f",
        "filename": "src/dawn/tests/unittests/wire/WireInjectBufferTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-06T20:55:05Z",
      "side": 1,
      "message": "Could we have a couple tests like the ones for texture injection where we check that the reflection (buffer.GetUsage/GetSize()) returns the descriptor\u0027s data even if it is utter garbage?",
      "revId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ffa53f3_f426c4b0",
        "filename": "src/dawn/tests/unittests/wire/WireInjectBufferTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2024-05-06T21:53:16Z",
      "side": 1,
      "message": "Which texture injection test are you referring to? Maybe I\u0027m misunderstanding, but isn\u0027t WireInjectBufferTests.ReservedBufferReflection doing exactly that?",
      "parentUuid": "824dcf3a_be90cf0f",
      "revId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4233e590_603275ad",
        "filename": "src/dawn/tests/unittests/wire/WireInjectBufferTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-06T22:46:30Z",
      "side": 1,
      "message": "yea, I think you\u0027ve covered it.",
      "parentUuid": "5ffa53f3_f426c4b0",
      "revId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45215c25_f731997f",
        "filename": "src/dawn/tests/unittests/wire/WireInjectBufferTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-07T08:05:42Z",
      "side": 1,
      "message": "Mmmh I just commented on it and didn\u0027t see it /facepalm",
      "parentUuid": "4233e590_603275ad",
      "revId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "0413fdcc6a94a9299283df6b71733d791799b500",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}