{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d81d29c_7373cd79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-16T02:04:29Z",
      "side": 1,
      "message": "The D3D12DescriptorHeapTests.EncodeManyUBO end2end tests uses R32Float and blend and unfortunately webgpu don\u0027t have default blend capability for that. But turns out switching to R16Float the result will overflow. (Expected is 2098176 here)\nIs there another for for testing the heapSize? maybe not using blend add? Does compute shader also has the same \"heap\" so we can test against that?\n(Added code is for checking float16 texture result against float expected value)",
      "revId": "bc3dc2f7450885335110904e83944bcbaebb0d66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "798e096e_22e8e731",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-16T03:06:25Z",
      "side": 1,
      "message": "I think it should work with storage buffers and a compute shader instead.\n\nThis allocator is used for D3D12 Constant Buffer Views (uniform buffers), Unordered Access Views (storage buffers and writeonly storage textures), and Shader Resource Views (readonly storage buffers, readonly storage textures, sampled textures).\n\n+cc Bryan - he wrote the allocator and tests and may know better.",
      "parentUuid": "7d81d29c_7373cd79",
      "revId": "bc3dc2f7450885335110904e83944bcbaebb0d66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8797c954_0f1a425a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-07-16T22:20:39Z",
      "side": 1,
      "message": "Thanks. Another idea - could lower kShaderVisibleSmallHeapSizes[0] so the sum doesn\u0027t overflow. Simpler than re-writing this using SSBO.",
      "parentUuid": "798e096e_22e8e731",
      "revId": "bc3dc2f7450885335110904e83944bcbaebb0d66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7a5e323_4fdfbcc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-19T17:33:38Z",
      "side": 1,
      "message": "Hi Bryan. Is changing this only affecting the testing?\nstatic constexpr const uint32_t kShaderVisibleSmallHeapSizes[] \u003d {1024, 512};\n\nI think this is where it will impact, but not sure how the value correlates to kShaderVisibleSmallHeapSizes. say the limit is 65504 here.\nconst uint32_t heapSize \u003d\n        mD3DDevice-\u003eGetViewShaderVisibleDescriptorAllocator()-\u003eGetShaderVisibleHeapSizeForTesting();",
      "parentUuid": "8797c954_0f1a425a",
      "revId": "bc3dc2f7450885335110904e83944bcbaebb0d66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}