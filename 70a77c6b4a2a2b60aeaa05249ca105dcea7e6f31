{
  "comments": [
    {
      "key": {
        "uuid": "2f9b9c7d_76f9f803",
        "filename": "src/dawn_native/Error.cpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-15T22:08:25Z",
      "side": 1,
      "message": "This would also happen in real life when we get bad HRESULTs that aren\u0027t DEVICE_REMOVED. Generally this shouldn\u0027t happen at all unless there\u0027s a programming error in Dawn. However, I think it makes sense to allow these other unexpected errors on shut down because if we did get an error like this, we would treat it as \"device lost\" and shut down.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 85
      },
      "revId": "70a77c6b4a2a2b60aeaa05249ca105dcea7e6f31",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24fa7931_79078f0d",
        "filename": "src/dawn_native/Error.cpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-15T22:27:50Z",
      "side": 1,
      "message": "I had basically the same thought. +1",
      "parentUuid": "2f9b9c7d_76f9f803",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 85
      },
      "revId": "70a77c6b4a2a2b60aeaa05249ca105dcea7e6f31",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b57cef_5a4b6219",
        "filename": "src/dawn_native/d3d12/D3D12Error.cpp",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-15T22:27:50Z",
      "side": 1,
      "message": "sprintf is generally avoided as unsafe; we could use snprintf, or we could use `ostringstream`.\n\n  std::string message;\n  {\n    std::ostringstream ss;\n    ss \u003c\u003c context;\n    ss \u003c\u003c \" failed with \";\n    if (result \u003d\u003d E_FAKE_ERROR_FOR_TESTING) {\n      ss \u003c\u003c \"E_FAKE_ERROR_FOR_TESTING\";\n    } else {\n      ss \u003c\u003c std::uppercase \u003c\u003c std::setfill(\u00270\u0027) \u003c\u003c std::setw(8) \u003c\u003c std::hex \u003c\u003c result;\n    }\n    message \u003d ss.str();\n  }",
      "revId": "70a77c6b4a2a2b60aeaa05249ca105dcea7e6f31",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}