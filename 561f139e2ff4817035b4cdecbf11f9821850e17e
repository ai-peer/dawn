{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74d43f0c_df6a9f8f",
        "filename": "src/dawn/common/WeakRefSupport.h",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-24T17:21:23Z",
      "side": 1,
      "message": "I\u0027m trying to see if there\u0027s another way to make the analyzer happy. I believe that what we\u0027re doing here is correct, but it\u0027s still slightly unsafe if the constructor of WeakRefData tries to do something with `this` more than just store it.\n\nI think potentially a better way to make it happy would be to simply pass `this` into the WeakRefData constructor - so it would store a WeakRefSupportBase* instead of a RefCounted*. Then, perform the casts only inside UnsafeGet / TryGetRef which happen well after construction when the RefCounted base type has definitely been fully constructed.",
      "revId": "561f139e2ff4817035b4cdecbf11f9821850e17e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e4485fb_8988ef6b",
        "filename": "src/dawn/common/WeakRefSupport.h",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-07-24T22:31:45Z",
      "side": 1,
      "message": "So as discussed offline, the suggested way doesn\u0027t work because of the way that the objects class hierarchy is structured. (It fails at compile time because `WeakRefSupportBase` doesn\u0027t directly inherit `RefCounted` so the case in `UnsafeGet`/`TryGetRef` doesn\u0027t compile.)\n\nWe also tried the memcpy alternative that Tint uses for their `Bitcast`, but still seemed to run into a CFI error, just later down the usage. Decided to just go with the exception for now given that we are confident that it\u0027s safe.",
      "parentUuid": "74d43f0c_df6a9f8f",
      "revId": "561f139e2ff4817035b4cdecbf11f9821850e17e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba68c969_1cbd4395",
        "filename": "src/dawn/common/WeakRefSupport.h",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1003976
      },
      "writtenOn": "2023-07-25T19:20:10Z",
      "side": 1,
      "message": "You can add `__attribute__((no_sanitize(\"cfi-derived-cast\")))` to this function instead of adding an entry to the Chrome ignorelist.",
      "parentUuid": "0e4485fb_8988ef6b",
      "revId": "561f139e2ff4817035b4cdecbf11f9821850e17e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdda9f80_8846c976",
        "filename": "tools/cfi/ignores.txt",
        "patchSetId": 4
      },
      "lineNbr": 8,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-07-24T22:51:43Z",
      "side": 1,
      "message": "do we need this file, or only the chromium side version of ignores.txt?",
      "revId": "561f139e2ff4817035b4cdecbf11f9821850e17e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5091a4fb_e30d8119",
        "filename": "tools/cfi/ignores.txt",
        "patchSetId": 4
      },
      "lineNbr": 8,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-07-24T23:19:44Z",
      "side": 1,
      "message": "IIUC, we don\u0027t actually have any CI bots that are building Dawn standalone with CFI, but in theory if we ever did, this would be needed. (Though I think we would also need the `dawn/native` exceptions as well to really make it work.)\n\nI just added it here for completeness for now.",
      "parentUuid": "fdda9f80_8846c976",
      "revId": "561f139e2ff4817035b4cdecbf11f9821850e17e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}