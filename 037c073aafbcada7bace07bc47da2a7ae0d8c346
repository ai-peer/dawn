{
  "comments": [
    {
      "key": {
        "uuid": "b3f1f426_37ba552f",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 1057,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-29T11:20:13Z",
      "side": 1,
      "message": "nit: these would probably need to contain rg / rgba like the metal names. Also why start the numbering at 100?",
      "range": {
        "startLine": 1043,
        "startChar": 36,
        "endLine": 1057,
        "endChar": 10
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fffa835_ea41c7a0",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 1057,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "We should have the numbering be contiguous with the other numbers, because sparse enums hurt compiler optimization of switch blocks.",
      "parentUuid": "b3f1f426_37ba552f",
      "range": {
        "startLine": 1043,
        "startChar": 36,
        "endLine": 1057,
        "endChar": 10
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a36ddef_5fb63250",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 1057,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "nit: might be nice to name these \"BC\" instead of \"bc\" so they capitalize more nicely\"",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baad7938_bd8fa753",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 1057,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a36ddef_5fb63250",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5730eaa_f5d69dec",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 1057,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9fffa835_ea41c7a0",
      "range": {
        "startLine": 1043,
        "startChar": 36,
        "endLine": 1057,
        "endChar": 10
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0816e0cd_b4806d8a",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-29T11:20:13Z",
      "side": 1,
      "message": "nit: This is true for all compressed formats we could rename IsBCFormat to IsCompressedFormat",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22cd090c_c75fc7aa",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "The usage of IsBCFormat below is specific to BC (although most of the compressed formats use 4x4 blocks as well). Maybe it should just be several helpers? IsCompressedFormat here, Is4x4CompressedFormat at [1], and IsWritableFormat at [2].",
      "parentUuid": "0816e0cd_b4806d8a",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5447f531_9bedf907",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22cd090c_c75fc7aa",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27e04cf7_009f8c96",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "I\u0027m pretty sure we have this same math in multiple places in the code now. Let\u0027s extract it into a helper.",
      "range": {
        "startLine": 168,
        "startChar": 16,
        "endLine": 168,
        "endChar": 83
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8e2bfef_7d1d0bb4",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Oh after searching all the code of Dawn I failed to find another place that uses this math.\nThe other place that uses \"Log2\" is here:\nhttps://cs.chromium.org/chromium/src/third_party/dawn/src/dawn_native/PerStage.h?l\u003d68",
      "parentUuid": "27e04cf7_009f8c96",
      "range": {
        "startLine": 168,
        "startChar": 16,
        "endLine": 168,
        "endChar": 83
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "899d7a1d_77fba1e5",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "[1]",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ef98951_94904cb7",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "899d7a1d_77fba1e5",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edad8ea7_0941c430",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-29T11:20:13Z",
      "side": 1,
      "message": "nit: This would be a getter function as well probably, ditto for height.",
      "range": {
        "startLine": 174,
        "startChar": 45,
        "endLine": 174,
        "endChar": 63
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70d01225_6b2cee85",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Now I think we can directly use 4 here because this block of code is under \"if(Is4x4CompressedFormat(format))\".",
      "parentUuid": "edad8ea7_0941c430",
      "range": {
        "startLine": 174,
        "startChar": 45,
        "endLine": 174,
        "endChar": 63
      },
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "356d9d49_2cfeb3f2",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "[2]",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01a39299_015c9364",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "356d9d49_2cfeb3f2",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0b8de68_ff181b1c",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 210,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-29T11:20:13Z",
      "side": 1,
      "message": "This would be invalid for all compressed texture formats. Also we should use a whitelist instead of a blacklist so that we don\u0027t forget to update it, for example when we add storage textures.",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75e85ca_a9861b60",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 210,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-30T07:47:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0b8de68_ff181b1c",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "883f13f9_be697c5c",
        "filename": "src/tests/unittests/validation/TextureValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-05-29T23:24:42Z",
      "side": 1,
      "message": "Can you add a test for a multiple-of-4, but non-square, non-power-of-two size? Like 12x32.",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c096cdf_c8ad387e",
        "filename": "src/tests/unittests/validation/TextureValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 324,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-29T11:20:13Z",
      "side": 1,
      "message": "Is it valid to create 2D array (and 3D) textures with a BC format?",
      "revId": "037c073aafbcada7bace07bc47da2a7ae0d8c346",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}