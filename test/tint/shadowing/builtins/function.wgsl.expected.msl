#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_symbol {
  /* 0x0000 */ tint_array<uint4, 1> buffer_size;
};

void min_1() {
}

void f(int i, device tint_array<float4, 1>* const tint_symbol_2, const constant tint_symbol* const tint_symbol_3) {
  min_1();
  (*(tint_symbol_2))[min(uint(i), (((*(tint_symbol_3)).buffer_size[0u][0u] / 16u) - 1u))] = float4(1.0f);
}

