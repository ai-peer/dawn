SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %a:ptr<function, i32, read_write> = var
    %b:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %indexable:ptr<function, array<i32, 2>, read_write> = var
    store %a, 0i
    store %b, 1i
    store %x_GLF_color, vec4<f32>(0.0f)
    store %i, 0i
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %9:i32 = load %i
        %10:bool = lt %9, 10i
        if %10 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %11:i32 = load %i
        %12:bool = gt %11, 1i
        if %12 [t: %b7] {  # if_2
          %b7 = block {  # true
            %13:i32 = load %a
            %14:i32 = add %13, 1i
            store %a, %14
            if false [t: %b8] {  # if_3
              %b8 = block {  # true
                store %i_1, 0i
                loop [b: %b9, c: %b10] {  # loop_2
                  %b9 = block {  # body
                    %15:i32 = load %i_1
                    %16:bool = lt %15, 10i
                    if %16 [t: %b11, f: %b12] {  # if_4
                      %b11 = block {  # true
                        exit_if  # if_4
                      }
                      %b12 = block {  # false
                        exit_loop  # loop_2
                      }
                    }
                    ret
                  }
                  %b10 = block {  # continuing
                    next_iteration %b9
                  }
                }
                exit_if  # if_3
              }
            }
            exit_if  # if_2
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        %17:i32 = load %i
        %18:i32 = add %17, 1i
        store %i, %18
        next_iteration %b3
      }
    }
    store %i_2, 0i
    loop [b: %b13, c: %b14] {  # loop_3
      %b13 = block {  # body
        %19:i32 = load %i_2
        %20:bool = lt %19, 10i
        if %20 [t: %b15, f: %b16] {  # if_5
          %b15 = block {  # true
            exit_if  # if_5
          }
          %b16 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_65:i32 = load %b
        store %indexable, array<i32, 2>(1i, 2i)
        %22:i32 = load %a
        %23:ptr<function, i32, read_write> = access %indexable, %x_65
        %24:i32 = load %23
        %25:i32 = add %22, %24
        store %a, %25
        continue %b14
      }
      %b14 = block {  # continuing
        %26:i32 = load %i_2
        %27:i32 = add %26, 1i
        store %i_2, %27
        next_iteration %b13
      }
    }
    %28:i32 = load %a
    %29:bool = eq %28, 28i
    if %29 [t: %b17] {  # if_6
      %b17 = block {  # true
        store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
        exit_if  # if_6
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b18 {
  %b18 = block {
    %31:void = call %main_1
    %32:vec4<f32> = load %x_GLF_color
    %33:main_out = construct %32
    ret %33
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
