SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %data:ptr<private, array<i32, 9>, read_write> = var
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %temp:ptr<private, array<i32, 7>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%func_i1_ = func(%a:ptr<function, i32, read_write>):f32 -> %b2 {
  %b2 = block {
    %b:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %x_115:ptr<function, bool, read_write> = var
    %x_116:ptr<function, bool, read_write> = var
    store %b, 0i
    %11:ptr<private, i32, read_write> = access %data, 0i
    store %11, 5i
    %12:ptr<private, i32, read_write> = access %data, 2i
    store %12, 0i
    %13:ptr<private, i32, read_write> = access %data, 4i
    store %13, 0i
    %14:ptr<private, i32, read_write> = access %data, 6i
    store %14, 0i
    %15:ptr<private, i32, read_write> = access %data, 8i
    store %15, 0i
    %16:f32 = load_vector_element %gl_FragCoord, 0u
    %17:bool = gte %16, 0.0f
    if %17 [t: %b3] {  # if_1
      %b3 = block {  # true
        loop [b: %b4, c: %b5] {  # loop_1
          %b4 = block {  # body
            %18:i32 = load %b
            %19:i32 = load %a
            %20:bool = lte %18, %19
            if %20 [t: %b6, f: %b7] {  # if_2
              %b6 = block {  # true
                exit_if  # if_2
              }
              %b7 = block {  # false
                exit_loop  # loop_1
              }
            }
            %21:i32 = load %b
            %22:bool = lte %21, 5i
            if %22 [t: %b8] {  # if_3
              %b8 = block {  # true
                %x_87:i32 = load %b
                %24:ptr<private, i32, read_write> = access %temp, %x_87
                %25:i32 = load %b
                %26:ptr<private, i32, read_write> = access %data, %25
                %27:i32 = load %26
                store %24, %27
                %28:i32 = load %b
                %29:i32 = add %28, 2i
                store %b, %29
                exit_if  # if_3
              }
            }
            continue %b5
          }
          %b5 = block {  # continuing
            next_iteration %b4
          }
        }
        exit_if  # if_1
      }
    }
    store %i, 0i
    loop [b: %b9, c: %b10] {  # loop_2
      %b9 = block {  # body
        %30:i32 = load %i
        %31:bool = lt %30, 3i
        if %31 [t: %b11, f: %b12] {  # if_4
          %b11 = block {  # true
            exit_if  # if_4
          }
          %b12 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_101:i32 = load %i
        %33:ptr<private, i32, read_write> = access %data, %x_101
        %34:ptr<private, i32, read_write> = access %temp, 0i
        %35:i32 = load %34
        %36:i32 = add %35, 1i
        store %33, %36
        continue %b10
      }
      %b10 = block {  # continuing
        %37:i32 = load %i
        %38:i32 = add %37, 1i
        store %i, %38
        next_iteration %b9
      }
    }
    %39:ptr<private, i32, read_write> = access %temp, 0i
    %40:i32 = load %39
    %x_110:bool = eq %40, 5i
    store %x_116, %x_110
    if %x_110 [t: %b13] {  # if_5
      %b13 = block {  # true
        %42:ptr<private, i32, read_write> = access %data, 0i
        %43:i32 = load %42
        %44:bool = eq %43, 6i
        store %x_115, %44
        %45:bool = load %x_115
        store %x_116, %45
        exit_if  # if_5
      }
    }
    %46:bool = load %x_116
    if %46 [t: %b14, f: %b15] {  # if_6
      %b14 = block {  # true
        ret 1.0f
      }
      %b15 = block {  # false
        ret 0.0f
      }
    }
    unreachable
  }
}
%main_1 = func():void -> %b16 {
  %b16 = block {
    %i_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    store %i_1, 0i
    loop [b: %b17, c: %b18] {  # loop_3
      %b17 = block {  # body
        %51:i32 = load %i_1
        %52:bool = lt %51, 6i
        if %52 [t: %b19, f: %b20] {  # if_7
          %b19 = block {  # true
            exit_if  # if_7
          }
          %b20 = block {  # false
            exit_loop  # loop_3
          }
        }
        %53:i32 = load %i_1
        store %param, %53
        %x_55:f32 = call %func_i1_, %param
        %55:i32 = load %i_1
        store %param_1, %55
        %x_57:f32 = call %func_i1_, %param_1
        %57:bool = eq %x_57, 1.0f
        if %57 [t: %b21, f: %b22] {  # if_8
          %b21 = block {  # true
            store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
            exit_if  # if_8
          }
          %b22 = block {  # false
            store %x_GLF_color, vec4<f32>(0.0f)
            exit_if  # if_8
          }
        }
        continue %b18
      }
      %b18 = block {  # continuing
        %58:i32 = load %i_1
        %59:i32 = add %58, 1i
        store %i_1, %59
        next_iteration %b17
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b23 {
  %b23 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %62:void = call %main_1
    %63:vec4<f32> = load %x_GLF_color
    %64:main_out = construct %63
    ret %64
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
