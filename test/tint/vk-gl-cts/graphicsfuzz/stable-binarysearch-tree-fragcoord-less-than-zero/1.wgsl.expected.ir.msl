SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: BST = struct @align(4) {
  data:i32 @offset(0)
  leftIndex:i32 @offset(4)
  rightIndex:i32 @offset(8)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %tree_1:ptr<private, array<BST, 10>, read_write> = var
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%makeTreeNode_struct_BST_i1_i1_i11_i1_ = func(%tree:ptr<function, BST, read_write>, %data:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %x_169:i32 = load %data
    %8:ptr<function, i32, read_write> = access %tree, 0u
    store %8, %x_169
    %9:ptr<function, i32, read_write> = access %tree, 1u
    store %9, -1i
    %10:ptr<function, i32, read_write> = access %tree, 2u
    store %10, -1i
    ret
  }
}
%insert_i1_i1_ = func(%treeIndex:ptr<function, i32, read_write>, %data_1:ptr<function, i32, read_write>):void -> %b3 {
  %b3 = block {
    %baseIndex:ptr<function, i32, read_write> = var
    %param:ptr<function, BST, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, BST, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    store %baseIndex, 0i
    loop [b: %b4, c: %b5] {  # loop_1
      %b4 = block {  # body
        %x_178:i32 = load %baseIndex
        %x_179:i32 = load %treeIndex
        %21:bool = lte %x_178, %x_179
        if %21 [t: %b6, f: %b7] {  # if_1
          %b6 = block {  # true
            exit_if  # if_1
          }
          %b7 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_182:i32 = load %data_1
        %x_183:i32 = load %baseIndex
        %24:ptr<private, i32, read_write> = access %tree_1, %x_183, 0u
        %x_185:i32 = load %24
        %26:bool = lte %x_182, %x_185
        if %26 [t: %b8, f: %b9] {  # if_2
          %b8 = block {  # true
            %x_190:i32 = load %baseIndex
            %28:ptr<private, i32, read_write> = access %tree_1, %x_190, 1u
            %x_192:i32 = load %28
            %30:bool = eq %x_192, -1i
            if %30 [t: %b10, f: %b11] {  # if_3
              %b10 = block {  # true
                %x_197:i32 = load %baseIndex
                %x_198:i32 = load %treeIndex
                %33:ptr<private, i32, read_write> = access %tree_1, %x_197, 1u
                store %33, %x_198
                %x_200:i32 = load %treeIndex
                %35:ptr<private, BST, read_write> = access %tree_1, %x_200
                %x_202:BST = load %35
                store %param, %x_202
                %x_203:i32 = load %data_1
                store %param_1, %x_203
                %38:void = call %makeTreeNode_struct_BST_i1_i1_i11_i1_, %param, %param_1
                %x_205:BST = load %param
                %40:ptr<private, BST, read_write> = access %tree_1, %x_200
                store %40, %x_205
                ret
              }
              %b11 = block {  # false
                %x_207:i32 = load %baseIndex
                %42:ptr<private, i32, read_write> = access %tree_1, %x_207, 1u
                %x_209:i32 = load %42
                store %baseIndex, %x_209
                continue %b5
              }
            }
            exit_if  # if_2
          }
          %b9 = block {  # false
            %x_210:i32 = load %baseIndex
            %45:ptr<private, i32, read_write> = access %tree_1, %x_210, 2u
            %x_212:i32 = load %45
            %47:bool = eq %x_212, -1i
            if %47 [t: %b12, f: %b13] {  # if_4
              %b12 = block {  # true
                %x_217:i32 = load %baseIndex
                %x_218:i32 = load %treeIndex
                %50:ptr<private, i32, read_write> = access %tree_1, %x_217, 2u
                store %50, %x_218
                %x_220:i32 = load %treeIndex
                %52:ptr<private, BST, read_write> = access %tree_1, %x_220
                %x_222:BST = load %52
                store %param_2, %x_222
                %x_223:i32 = load %data_1
                store %param_3, %x_223
                %55:void = call %makeTreeNode_struct_BST_i1_i1_i11_i1_, %param_2, %param_3
                %x_225:BST = load %param_2
                %57:ptr<private, BST, read_write> = access %tree_1, %x_220
                store %57, %x_225
                ret
              }
              %b13 = block {  # false
                %x_227:i32 = load %baseIndex
                %59:ptr<private, i32, read_write> = access %tree_1, %x_227, 2u
                %x_229:i32 = load %59
                store %baseIndex, %x_229
                continue %b5
              }
            }
            exit_if  # if_2
          }
        }
        continue %b5
      }
      %b5 = block {  # continuing
        next_iteration %b4
      }
    }
    ret
  }
}
%search_i1_ = func(%t:ptr<function, i32, read_write>):i32 -> %b14 {
  %b14 = block {
    %index:ptr<function, i32, read_write> = var
    %currentNode:ptr<function, BST, read_write> = var
    %x_231:ptr<function, i32, read_write> = var
    store %index, 0i
    loop [b: %b15, c: %b16] {  # loop_2
      %b15 = block {  # body
        %x_236:i32 = load %index
        %67:bool = neq %x_236, -1i
        if %67 [t: %b17, f: %b18] {  # if_5
          %b17 = block {  # true
            exit_if  # if_5
          }
          %b18 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_239:i32 = load %index
        %69:ptr<private, BST, read_write> = access %tree_1, %x_239
        %x_241:BST = load %69
        store %currentNode, %x_241
        %71:ptr<function, i32, read_write> = access %currentNode, 0u
        %x_243:i32 = load %71
        %x_244:i32 = load %t
        %74:bool = eq %x_243, %x_244
        if %74 [t: %b19] {  # if_6
          %b19 = block {  # true
            %x_248:i32 = load %t
            ret %x_248
          }
        }
        %x_249:i32 = load %t
        %77:ptr<function, i32, read_write> = access %currentNode, 0u
        %x_251:i32 = load %77
        %79:bool = gt %x_249, %x_251
        if %79 [t: %b20, f: %b21] {  # if_7
          %b20 = block {  # true
            %80:ptr<function, i32, read_write> = access %currentNode, 2u
            %x_257:i32 = load %80
            store %x_231, %x_257
            exit_if  # if_7
          }
          %b21 = block {  # false
            %82:ptr<function, i32, read_write> = access %currentNode, 1u
            %x_259:i32 = load %82
            store %x_231, %x_259
            exit_if  # if_7
          }
        }
        %x_260:i32 = load %x_231
        store %index, %x_260
        continue %b16
      }
      %b16 = block {  # continuing
        next_iteration %b15
      }
    }
    ret -1i
  }
}
%main_1 = func():void -> %b22 {
  %b22 = block {
    %treeIndex_1:ptr<function, i32, read_write> = var
    %param_4:ptr<function, BST, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    %param_6:ptr<function, i32, read_write> = var
    %param_7:ptr<function, i32, read_write> = var
    %param_8:ptr<function, i32, read_write> = var
    %param_9:ptr<function, i32, read_write> = var
    %param_10:ptr<function, i32, read_write> = var
    %param_11:ptr<function, i32, read_write> = var
    %param_12:ptr<function, i32, read_write> = var
    %param_13:ptr<function, i32, read_write> = var
    %param_14:ptr<function, i32, read_write> = var
    %param_15:ptr<function, i32, read_write> = var
    %param_16:ptr<function, i32, read_write> = var
    %param_17:ptr<function, i32, read_write> = var
    %param_18:ptr<function, i32, read_write> = var
    %param_19:ptr<function, i32, read_write> = var
    %param_20:ptr<function, i32, read_write> = var
    %param_21:ptr<function, i32, read_write> = var
    %param_22:ptr<function, i32, read_write> = var
    %param_23:ptr<function, i32, read_write> = var
    %count:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %result:ptr<function, i32, read_write> = var
    %param_24:ptr<function, i32, read_write> = var
    store %treeIndex_1, 0i
    %111:ptr<private, BST, read_write> = access %tree_1, 0i
    %x_88:BST = load %111
    store %param_4, %x_88
    store %param_5, 9i
    %113:void = call %makeTreeNode_struct_BST_i1_i1_i11_i1_, %param_4, %param_5
    %x_90:BST = load %param_4
    %115:ptr<private, BST, read_write> = access %tree_1, 0i
    store %115, %x_90
    %x_92:i32 = load %treeIndex_1
    %117:i32 = add %x_92, 1i
    store %treeIndex_1, %117
    %x_94:i32 = load %treeIndex_1
    store %param_6, %x_94
    store %param_7, 5i
    %119:void = call %insert_i1_i1_, %param_6, %param_7
    %x_96:i32 = load %treeIndex_1
    %121:i32 = add %x_96, 1i
    store %treeIndex_1, %121
    %x_98:i32 = load %treeIndex_1
    store %param_8, %x_98
    store %param_9, 12i
    %123:void = call %insert_i1_i1_, %param_8, %param_9
    %x_100:i32 = load %treeIndex_1
    %125:i32 = add %x_100, 1i
    store %treeIndex_1, %125
    %x_102:i32 = load %treeIndex_1
    store %param_10, %x_102
    store %param_11, 15i
    %127:void = call %insert_i1_i1_, %param_10, %param_11
    %x_104:i32 = load %treeIndex_1
    %129:i32 = add %x_104, 1i
    store %treeIndex_1, %129
    %x_106:i32 = load %treeIndex_1
    store %param_12, %x_106
    store %param_13, 7i
    %131:void = call %insert_i1_i1_, %param_12, %param_13
    %x_108:i32 = load %treeIndex_1
    %133:i32 = add %x_108, 1i
    store %treeIndex_1, %133
    %x_110:i32 = load %treeIndex_1
    store %param_14, %x_110
    store %param_15, 8i
    %135:void = call %insert_i1_i1_, %param_14, %param_15
    %x_112:i32 = load %treeIndex_1
    %137:i32 = add %x_112, 1i
    store %treeIndex_1, %137
    %x_114:i32 = load %treeIndex_1
    store %param_16, %x_114
    store %param_17, 2i
    %139:void = call %insert_i1_i1_, %param_16, %param_17
    %x_116:i32 = load %treeIndex_1
    %141:i32 = add %x_116, 1i
    store %treeIndex_1, %141
    %x_118:i32 = load %treeIndex_1
    store %param_18, %x_118
    store %param_19, 6i
    %143:void = call %insert_i1_i1_, %param_18, %param_19
    %x_120:i32 = load %treeIndex_1
    %145:i32 = add %x_120, 1i
    store %treeIndex_1, %145
    %x_122:i32 = load %treeIndex_1
    store %param_20, %x_122
    store %param_21, 17i
    %147:void = call %insert_i1_i1_, %param_20, %param_21
    %x_124:i32 = load %treeIndex_1
    %149:i32 = add %x_124, 1i
    store %treeIndex_1, %149
    %x_126:i32 = load %treeIndex_1
    store %param_22, %x_126
    store %param_23, 13i
    %151:void = call %insert_i1_i1_, %param_22, %param_23
    store %count, 0i
    store %i, 0i
    loop [b: %b23, c: %b24] {  # loop_3
      %b23 = block {  # body
        %x_132:i32 = load %i
        %153:bool = lt %x_132, 20i
        if %153 [t: %b25, f: %b26] {  # if_8
          %b25 = block {  # true
            exit_if  # if_8
          }
          %b26 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_155:ptr<function, bool, read_write> = var
        %x_156_phi:ptr<function, bool, read_write> = var
        %x_135:i32 = load %i
        store %param_24, %x_135
        %x_136:i32 = call %search_i1_, %param_24
        store %result, %x_136
        %x_137:i32 = load %i
        switch %x_137 [c: (2i 5i 6i 7i 8i 9i 12i 13i 15i 17i, %b27), c: (default, %b28)] {  # switch_1
          %b27 = block {  # case
            %x_147:i32 = load %result
            %x_148:i32 = load %i
            %x_149:bool = eq %x_147, %x_148
            store %x_156_phi, %x_149
            %162:bool = eq %x_149, false
            if %162 [t: %b29] {  # if_9
              %b29 = block {  # true
                %x_154:f32 = load_vector_element %gl_FragCoord, 0u
                %164:bool = lt %x_154, 0.0f
                store %x_155, %164
                %165:bool = load %x_155
                store %x_156_phi, %165
                exit_if  # if_9
              }
            }
            %x_156:bool = load %x_156_phi
            if %x_156 [t: %b30] {  # if_10
              %b30 = block {  # true
                %x_159:i32 = load %count
                %168:i32 = add %x_159, 1i
                store %count, %168
                exit_if  # if_10
              }
            }
            exit_switch  # switch_1
          }
          %b28 = block {  # case
            %x_141:i32 = load %result
            %170:bool = eq %x_141, -1i
            if %170 [t: %b31] {  # if_11
              %b31 = block {  # true
                %x_145:i32 = load %count
                %172:i32 = add %x_145, 1i
                store %count, %172
                exit_if  # if_11
              }
            }
            exit_switch  # switch_1
          }
        }
        continue %b24
      }
      %b24 = block {  # continuing
        %x_161:i32 = load %i
        %174:i32 = add %x_161, 1i
        store %i, %174
        next_iteration %b23
      }
    }
    %x_163:i32 = load %count
    %176:bool = eq %x_163, 20i
    if %176 [t: %b32, f: %b33] {  # if_12
      %b32 = block {  # true
        store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
        exit_if  # if_12
      }
      %b33 = block {  # false
        store %x_GLF_color, vec4<f32>(0.0f, 0.0f, 1.0f, 1.0f)
        exit_if  # if_12
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b34 {
  %b34 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %179:void = call %main_1
    %180:vec4<f32> = load %x_GLF_color
    %181:main_out = construct %180
    ret %181
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
