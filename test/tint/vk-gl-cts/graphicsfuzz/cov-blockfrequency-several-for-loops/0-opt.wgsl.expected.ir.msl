SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %c:ptr<function, vec4<f32>, read_write> = var
    %a:ptr<function, i32, read_write> = var
    %i1:ptr<function, i32, read_write> = var
    %i2:ptr<function, i32, read_write> = var
    %i3:ptr<function, i32, read_write> = var
    %i4:ptr<function, i32, read_write> = var
    %i5:ptr<function, i32, read_write> = var
    %i6:ptr<function, i32, read_write> = var
    %i7:ptr<function, i32, read_write> = var
    %i8_1:ptr<function, i32, read_write> = var
    store %c, vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f)
    store %a, 0i
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        loop [b: %b5, c: %b6] {  # loop_2
          %b5 = block {  # body
            %x_46:i32 = load %a
            store_vector_element %c, %x_46, 1.0f
            store %i1, 0i
            loop [b: %b7, c: %b8] {  # loop_3
              %b7 = block {  # body
                %x_52:i32 = load %i1
                %16:bool = lt %x_52, 1i
                if %16 [t: %b9, f: %b10] {  # if_1
                  %b9 = block {  # true
                    exit_if  # if_1
                  }
                  %b10 = block {  # false
                    exit_loop  # loop_3
                  }
                }
                store %i2, 0i
                loop [b: %b11, c: %b12] {  # loop_4
                  %b11 = block {  # body
                    %x_59:i32 = load %i2
                    %18:bool = lt %x_59, 1i
                    if %18 [t: %b13, f: %b14] {  # if_2
                      %b13 = block {  # true
                        exit_if  # if_2
                      }
                      %b14 = block {  # false
                        exit_loop  # loop_4
                      }
                    }
                    store %i3, 0i
                    loop [b: %b15, c: %b16] {  # loop_5
                      %b15 = block {  # body
                        %x_66:i32 = load %i3
                        %20:bool = lt %x_66, 1i
                        if %20 [t: %b17, f: %b18] {  # if_3
                          %b17 = block {  # true
                            exit_if  # if_3
                          }
                          %b18 = block {  # false
                            exit_loop  # loop_5
                          }
                        }
                        store %i4, 0i
                        loop [b: %b19, c: %b20] {  # loop_6
                          %b19 = block {  # body
                            %x_73:i32 = load %i4
                            %22:bool = lt %x_73, 1i
                            if %22 [t: %b21, f: %b22] {  # if_4
                              %b21 = block {  # true
                                exit_if  # if_4
                              }
                              %b22 = block {  # false
                                exit_loop  # loop_6
                              }
                            }
                            store %i5, 0i
                            loop [b: %b23, c: %b24] {  # loop_7
                              %b23 = block {  # body
                                %x_80:i32 = load %i5
                                %24:bool = lt %x_80, 1i
                                if %24 [t: %b25, f: %b26] {  # if_5
                                  %b25 = block {  # true
                                    exit_if  # if_5
                                  }
                                  %b26 = block {  # false
                                    exit_loop  # loop_7
                                  }
                                }
                                store %i6, 0i
                                loop [b: %b27, c: %b28] {  # loop_8
                                  %b27 = block {  # body
                                    %x_87:i32 = load %i6
                                    %26:bool = lt %x_87, 1i
                                    if %26 [t: %b29, f: %b30] {  # if_6
                                      %b29 = block {  # true
                                        exit_if  # if_6
                                      }
                                      %b30 = block {  # false
                                        exit_loop  # loop_8
                                      }
                                    }
                                    store %i7, 0i
                                    loop [b: %b31, c: %b32] {  # loop_9
                                      %b31 = block {  # body
                                        %x_94:i32 = load %i7
                                        %28:bool = lt %x_94, 1i
                                        if %28 [t: %b33, f: %b34] {  # if_7
                                          %b33 = block {  # true
                                            exit_if  # if_7
                                          }
                                          %b34 = block {  # false
                                            exit_loop  # loop_9
                                          }
                                        }
                                        store %i8_1, 0i
                                        loop [b: %b35, c: %b36] {  # loop_10
                                          %b35 = block {  # body
                                            %x_101:i32 = load %i8_1
                                            %30:bool = lt %x_101, 17i
                                            if %30 [t: %b37, f: %b38] {  # if_8
                                              %b37 = block {  # true
                                                exit_if  # if_8
                                              }
                                              %b38 = block {  # false
                                                exit_loop  # loop_10
                                              }
                                            }
                                            %x_104:i32 = load %a
                                            %32:i32 = add %x_104, 1i
                                            store %a, %32
                                            continue %b36
                                          }
                                          %b36 = block {  # continuing
                                            %x_106:i32 = load %i8_1
                                            %34:i32 = add %x_106, 1i
                                            store %i8_1, %34
                                            next_iteration %b35
                                          }
                                        }
                                        continue %b32
                                      }
                                      %b32 = block {  # continuing
                                        %x_108:i32 = load %i7
                                        %36:i32 = add %x_108, 1i
                                        store %i7, %36
                                        next_iteration %b31
                                      }
                                    }
                                    continue %b28
                                  }
                                  %b28 = block {  # continuing
                                    %x_110:i32 = load %i6
                                    %38:i32 = add %x_110, 1i
                                    store %i6, %38
                                    next_iteration %b27
                                  }
                                }
                                continue %b24
                              }
                              %b24 = block {  # continuing
                                %x_112:i32 = load %i5
                                %40:i32 = add %x_112, 1i
                                store %i5, %40
                                next_iteration %b23
                              }
                            }
                            continue %b20
                          }
                          %b20 = block {  # continuing
                            %x_114:i32 = load %i4
                            %42:i32 = add %x_114, 1i
                            store %i4, %42
                            next_iteration %b19
                          }
                        }
                        continue %b16
                      }
                      %b16 = block {  # continuing
                        %x_116:i32 = load %i3
                        %44:i32 = add %x_116, 1i
                        store %i3, %44
                        next_iteration %b15
                      }
                    }
                    continue %b12
                  }
                  %b12 = block {  # continuing
                    %x_118:i32 = load %i2
                    %46:i32 = add %x_118, 1i
                    store %i2, %46
                    next_iteration %b11
                  }
                }
                continue %b8
              }
              %b8 = block {  # continuing
                %x_120:i32 = load %i1
                %48:i32 = add %x_120, 1i
                store %i1, %48
                next_iteration %b7
              }
            }
            continue %b6
          }
          %b6 = block {  # continuing
            %x_123:f32 = load_vector_element %gl_FragCoord, 0u
            %50:bool = lt %x_123, -1.0f
            %51:bool = eq %50, false
            break_if %51 %b5
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        %x_126:f32 = load_vector_element %gl_FragCoord, 1u
        %53:bool = lt %x_126, -1.0f
        %54:bool = eq %53, false
        break_if %54 %b3
      }
    }
    %x_128:vec4<f32> = load %c
    store %x_GLF_color, %x_128
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b39 {
  %b39 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %58:void = call %main_1
    %59:vec4<f32> = load %x_GLF_color
    %60:main_out = construct %59
    ret %60
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
