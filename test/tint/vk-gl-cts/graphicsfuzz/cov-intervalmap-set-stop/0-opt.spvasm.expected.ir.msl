SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%func_ = func():vec3<f32> -> %b2 {
  %b2 = block {
    %v:ptr<function, vec2<f32>, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %k:ptr<function, i32, read_write> = var
    store %v, vec2<f32>(1.0f)
    store %i, 0i
    store %k, 0i
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %6:i32 = load %k
        %7:bool = lt %6, 2i
        if %7 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %8:f32 = load_vector_element %v, 1u
        %9:f32 = add %8, 1.0f
        %10:bool = gt %9, 4.0f
        if %10 [t: %b7] {  # if_2
          %b7 = block {  # true
            exit_loop  # loop_1
          }
        }
        store_vector_element %v, 1u, 1.0f
        %11:i32 = load %i
        %12:i32 = add %11, 1i
        store %i, %12
        continue %b4
      }
      %b4 = block {  # continuing
        %13:i32 = load %k
        %14:i32 = add %13, 1i
        store %k, %14
        next_iteration %b3
      }
    }
    %15:i32 = load %i
    %16:bool = lt %15, 10i
    if %16 [t: %b8, f: %b9] {  # if_3
      %b8 = block {  # true
        ret vec3<f32>(1.0f, 0.0f, 0.0f)
      }
      %b9 = block {  # false
        ret vec3<f32>(0.0f, 0.0f, 1.0f)
      }
    }
    unreachable
  }
}
%main_1 = func():void -> %b10 {
  %b10 = block {
    %j:ptr<function, i32, read_write> = var
    %data:ptr<function, array<vec3<f32>, 2>, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %x_80:ptr<function, bool, read_write> = var
    %x_81:ptr<function, bool, read_write> = var
    store %j, 0i
    loop [b: %b11, c: %b12] {  # loop_2
      %b11 = block {  # body
        %23:i32 = load %j
        %24:bool = lt %23, 1i
        if %24 [t: %b13, f: %b14] {  # if_4
          %b13 = block {  # true
            exit_if  # if_4
          }
          %b14 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_52:i32 = load %j
        %x_53:vec3<f32> = call %func_
        %27:ptr<function, vec3<f32>, read_write> = access %data, %x_52
        store %27, %x_53
        continue %b12
      }
      %b12 = block {  # continuing
        %28:i32 = load %j
        %29:i32 = add %28, 1i
        store %j, %29
        next_iteration %b11
      }
    }
    store %j_1, 0i
    loop [b: %b15, c: %b16] {  # loop_3
      %b15 = block {  # body
        %30:i32 = load %j_1
        %31:bool = lt %30, 1i
        if %31 [t: %b17, f: %b18] {  # if_5
          %b17 = block {  # true
            exit_if  # if_5
          }
          %b18 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_64:i32 = load %j_1
        %x_67:vec3<f32> = call %func_
        %34:i32 = mul 4i, %x_64
        %35:i32 = add %34, 1i
        %36:ptr<function, vec3<f32>, read_write> = access %data, %35
        store %36, %x_67
        continue %b16
      }
      %b16 = block {  # continuing
        %37:i32 = load %j_1
        %38:i32 = add %37, 1i
        store %j_1, %38
        next_iteration %b15
      }
    }
    %39:ptr<function, vec3<f32>, read_write> = access %data, 0i
    %40:vec3<f32> = load %39
    %41:vec3<bool> = eq %40, vec3<f32>(1.0f, 0.0f, 0.0f)
    %x_74:bool = all %41
    store %x_81, %x_74
    if %x_74 [t: %b19] {  # if_6
      %b19 = block {  # true
        %43:ptr<function, vec3<f32>, read_write> = access %data, 1i
        %44:vec3<f32> = load %43
        %45:vec3<bool> = eq %44, vec3<f32>(1.0f, 0.0f, 0.0f)
        %46:bool = all %45
        store %x_80, %46
        %47:bool = load %x_80
        store %x_81, %47
        exit_if  # if_6
      }
    }
    %48:bool = load %x_81
    if %48 [t: %b20, f: %b21] {  # if_7
      %b20 = block {  # true
        store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
        exit_if  # if_7
      }
      %b21 = block {  # false
        store %x_GLF_color, vec4<f32>(0.0f)
        exit_if  # if_7
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b22 {
  %b22 = block {
    %50:void = call %main_1
    %51:vec4<f32> = load %x_GLF_color
    %52:main_out = construct %51
    ret %52
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
