SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: BST = struct @align(4) {
  data:i32 @offset(0)
  leftIndex:i32 @offset(4)
  rightIndex:i32 @offset(8)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %tree:ptr<private, array<BST, 10>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%makeTreeNode_struct_BST_i1_i1_i11_i1_ = func(%node:ptr<function, BST, read_write>, %data:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %6:ptr<function, i32, read_write> = access %node, 0u
    %7:i32 = load %data
    store %6, %7
    %8:ptr<function, i32, read_write> = access %node, 1u
    store %8, -1i
    %9:ptr<function, i32, read_write> = access %node, 2u
    store %9, -1i
    ret
  }
}
%insert_i1_i1_ = func(%treeIndex:ptr<function, i32, read_write>, %data_1:ptr<function, i32, read_write>):void -> %b3 {
  %b3 = block {
    %baseIndex:ptr<function, i32, read_write> = var
    %param:ptr<function, BST, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, BST, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    store %baseIndex, 0i
    loop [b: %b4, c: %b5] {  # loop_1
      %b4 = block {  # body
        %18:i32 = load %baseIndex
        %19:i32 = load %treeIndex
        %20:bool = lte %18, %19
        if %20 [t: %b6, f: %b7] {  # if_1
          %b6 = block {  # true
            exit_if  # if_1
          }
          %b7 = block {  # false
            exit_loop  # loop_1
          }
        }
        %21:i32 = load %data_1
        %22:i32 = load %baseIndex
        %23:ptr<private, i32, read_write> = access %tree, %22, 0u
        %24:i32 = load %23
        %25:bool = lte %21, %24
        if %25 [t: %b8, f: %b9] {  # if_2
          %b8 = block {  # true
            %26:i32 = load %baseIndex
            %27:ptr<private, i32, read_write> = access %tree, %26, 1u
            %28:i32 = load %27
            %29:bool = eq %28, -1i
            if %29 [t: %b10, f: %b11] {  # if_3
              %b10 = block {  # true
                %x_186:i32 = load %baseIndex
                %31:ptr<private, i32, read_write> = access %tree, %x_186, 1u
                %32:i32 = load %treeIndex
                store %31, %32
                %x_189:i32 = load %treeIndex
                %34:ptr<private, BST, read_write> = access %tree, %x_189
                %35:BST = load %34
                store %param, %35
                %36:i32 = load %data_1
                store %param_1, %36
                %37:void = call %makeTreeNode_struct_BST_i1_i1_i11_i1_, %param, %param_1
                %38:ptr<private, BST, read_write> = access %tree, %x_189
                %39:BST = load %param
                store %38, %39
                ret
              }
              %b11 = block {  # false
                %40:i32 = load %baseIndex
                %41:ptr<private, i32, read_write> = access %tree, %40, 1u
                %42:i32 = load %41
                store %baseIndex, %42
                continue %b5
              }
            }
            exit_if  # if_2
          }
          %b9 = block {  # false
            %43:i32 = load %baseIndex
            %44:ptr<private, i32, read_write> = access %tree, %43, 2u
            %45:i32 = load %44
            %46:bool = eq %45, -1i
            if %46 [t: %b12, f: %b13] {  # if_4
              %b12 = block {  # true
                %x_206:i32 = load %baseIndex
                %48:ptr<private, i32, read_write> = access %tree, %x_206, 2u
                %49:i32 = load %treeIndex
                store %48, %49
                %x_209:i32 = load %treeIndex
                %51:ptr<private, BST, read_write> = access %tree, %x_209
                %52:BST = load %51
                store %param_2, %52
                %53:i32 = load %data_1
                store %param_3, %53
                %54:void = call %makeTreeNode_struct_BST_i1_i1_i11_i1_, %param_2, %param_3
                %55:ptr<private, BST, read_write> = access %tree, %x_209
                %56:BST = load %param_2
                store %55, %56
                ret
              }
              %b13 = block {  # false
                %57:i32 = load %baseIndex
                %58:ptr<private, i32, read_write> = access %tree, %57, 2u
                %59:i32 = load %58
                store %baseIndex, %59
                continue %b5
              }
            }
            exit_if  # if_2
          }
        }
        continue %b5
      }
      %b5 = block {  # continuing
        next_iteration %b4
      }
    }
    ret
  }
}
%search_i1_ = func(%t:ptr<function, i32, read_write>):i32 -> %b14 {
  %b14 = block {
    %index:ptr<function, i32, read_write> = var
    %currentNode:ptr<function, BST, read_write> = var
    %x_220:ptr<function, i32, read_write> = var
    store %index, 0i
    loop [b: %b15, c: %b16] {  # loop_2
      %b15 = block {  # body
        %65:i32 = load %index
        %66:bool = neq %65, -1i
        if %66 [t: %b17, f: %b18] {  # if_5
          %b17 = block {  # true
            exit_if  # if_5
          }
          %b18 = block {  # false
            exit_loop  # loop_2
          }
        }
        %67:i32 = load %index
        %68:ptr<private, BST, read_write> = access %tree, %67
        %69:BST = load %68
        store %currentNode, %69
        %70:ptr<function, i32, read_write> = access %currentNode, 0u
        %71:i32 = load %70
        %72:i32 = load %t
        %73:bool = eq %71, %72
        if %73 [t: %b19] {  # if_6
          %b19 = block {  # true
            %x_237:i32 = load %t
            ret %x_237
          }
        }
        %75:i32 = load %t
        %76:ptr<function, i32, read_write> = access %currentNode, 0u
        %77:i32 = load %76
        %78:bool = gt %75, %77
        if %78 [t: %b20, f: %b21] {  # if_7
          %b20 = block {  # true
            %79:ptr<function, i32, read_write> = access %currentNode, 2u
            %80:i32 = load %79
            store %x_220, %80
            exit_if  # if_7
          }
          %b21 = block {  # false
            %81:ptr<function, i32, read_write> = access %currentNode, 1u
            %82:i32 = load %81
            store %x_220, %82
            exit_if  # if_7
          }
        }
        %83:i32 = load %x_220
        store %index, %83
        continue %b16
      }
      %b16 = block {  # continuing
        next_iteration %b15
      }
    }
    ret -1i
  }
}
%main_1 = func():void -> %b22 {
  %b22 = block {
    %treeIndex_1:ptr<function, i32, read_write> = var
    %param_4:ptr<function, BST, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    %param_6:ptr<function, i32, read_write> = var
    %param_7:ptr<function, i32, read_write> = var
    %param_8:ptr<function, i32, read_write> = var
    %param_9:ptr<function, i32, read_write> = var
    %param_10:ptr<function, i32, read_write> = var
    %param_11:ptr<function, i32, read_write> = var
    %param_12:ptr<function, i32, read_write> = var
    %param_13:ptr<function, i32, read_write> = var
    %param_14:ptr<function, i32, read_write> = var
    %param_15:ptr<function, i32, read_write> = var
    %param_16:ptr<function, i32, read_write> = var
    %param_17:ptr<function, i32, read_write> = var
    %param_18:ptr<function, i32, read_write> = var
    %param_19:ptr<function, i32, read_write> = var
    %param_20:ptr<function, i32, read_write> = var
    %param_21:ptr<function, i32, read_write> = var
    %param_22:ptr<function, i32, read_write> = var
    %param_23:ptr<function, i32, read_write> = var
    %count:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %result:ptr<function, i32, read_write> = var
    %param_24:ptr<function, i32, read_write> = var
    store %treeIndex_1, 0i
    %110:ptr<private, BST, read_write> = access %tree, 0i
    %111:BST = load %110
    store %param_4, %111
    store %param_5, 9i
    %112:void = call %makeTreeNode_struct_BST_i1_i1_i11_i1_, %param_4, %param_5
    %113:ptr<private, BST, read_write> = access %tree, 0i
    %114:BST = load %param_4
    store %113, %114
    %115:i32 = load %treeIndex_1
    %116:i32 = add %115, 1i
    store %treeIndex_1, %116
    %117:i32 = load %treeIndex_1
    store %param_6, %117
    store %param_7, 5i
    %118:void = call %insert_i1_i1_, %param_6, %param_7
    %119:i32 = load %treeIndex_1
    %120:i32 = add %119, 1i
    store %treeIndex_1, %120
    %121:i32 = load %treeIndex_1
    store %param_8, %121
    store %param_9, 12i
    %122:void = call %insert_i1_i1_, %param_8, %param_9
    %123:i32 = load %treeIndex_1
    %124:i32 = add %123, 1i
    store %treeIndex_1, %124
    %125:i32 = load %treeIndex_1
    store %param_10, %125
    store %param_11, 15i
    %126:void = call %insert_i1_i1_, %param_10, %param_11
    %127:i32 = load %treeIndex_1
    %128:i32 = add %127, 1i
    store %treeIndex_1, %128
    %129:i32 = load %treeIndex_1
    store %param_12, %129
    store %param_13, 7i
    %130:void = call %insert_i1_i1_, %param_12, %param_13
    %131:i32 = load %treeIndex_1
    %132:i32 = add %131, 1i
    store %treeIndex_1, %132
    %133:i32 = load %treeIndex_1
    store %param_14, %133
    store %param_15, 8i
    %134:void = call %insert_i1_i1_, %param_14, %param_15
    %135:i32 = load %treeIndex_1
    %136:i32 = add %135, 1i
    store %treeIndex_1, %136
    %137:i32 = load %treeIndex_1
    store %param_16, %137
    store %param_17, 2i
    %138:void = call %insert_i1_i1_, %param_16, %param_17
    %139:i32 = load %treeIndex_1
    %140:i32 = add %139, 1i
    store %treeIndex_1, %140
    %141:i32 = load %treeIndex_1
    store %param_18, %141
    store %param_19, 6i
    %142:void = call %insert_i1_i1_, %param_18, %param_19
    %143:i32 = load %treeIndex_1
    %144:i32 = add %143, 1i
    store %treeIndex_1, %144
    %145:i32 = load %treeIndex_1
    store %param_20, %145
    store %param_21, 17i
    %146:void = call %insert_i1_i1_, %param_20, %param_21
    %147:i32 = load %treeIndex_1
    %148:i32 = add %147, 1i
    store %treeIndex_1, %148
    %149:i32 = load %treeIndex_1
    store %param_22, %149
    store %param_23, 13i
    %150:void = call %insert_i1_i1_, %param_22, %param_23
    store %count, 0i
    store %i, 0i
    loop [b: %b23, c: %b24] {  # loop_3
      %b23 = block {  # body
        %151:i32 = load %i
        %152:bool = lt %151, 20i
        if %152 [t: %b25, f: %b26] {  # if_8
          %b25 = block {  # true
            exit_if  # if_8
          }
          %b26 = block {  # false
            exit_loop  # loop_3
          }
        }
        %153:i32 = load %i
        store %param_24, %153
        %x_132:i32 = call %search_i1_, %param_24
        store %result, %x_132
        %x_133:i32 = load %i
        switch %x_133 [c: (2i 5i 6i 7i 8i 9i 12i 13i 15i 17i, %b27), c: (default, %b28)] {  # switch_1
          %b27 = block {  # case
            %156:i32 = load %result
            %157:i32 = load %i
            %158:bool = eq %156, %157
            if %158 [t: %b29] {  # if_9
              %b29 = block {  # true
                %159:i32 = load %count
                %160:i32 = add %159, 1i
                store %count, %160
                exit_if  # if_9
              }
            }
            exit_switch  # switch_1
          }
          %b28 = block {  # case
            %161:i32 = load %result
            %162:bool = eq %161, -1i
            if %162 [t: %b30] {  # if_10
              %b30 = block {  # true
                %163:i32 = load %count
                %164:i32 = add %163, 1i
                store %count, %164
                exit_if  # if_10
              }
            }
            exit_switch  # switch_1
          }
        }
        continue %b24
      }
      %b24 = block {  # continuing
        %165:i32 = load %i
        %166:i32 = add %165, 1i
        store %i, %166
        next_iteration %b23
      }
    }
    %167:i32 = load %count
    %168:bool = eq %167, 20i
    if %168 [t: %b31, f: %b32] {  # if_11
      %b31 = block {  # true
        store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
        exit_if  # if_11
      }
      %b32 = block {  # false
        store %x_GLF_color, vec4<f32>(0.0f, 0.0f, 1.0f, 1.0f)
        exit_if  # if_11
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b33 {
  %b33 = block {
    %170:void = call %main_1
    %171:vec4<f32> = load %x_GLF_color
    %172:main_out = construct %171
    ret %172
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
