SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:1206 internal compiler error: main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %GLF_live15c:ptr<function, vec4<f32>, read_write> = var
    %GLF_live15i:ptr<function, i32, read_write> = var
    %GLF_live15d:ptr<function, vec4<f32>, read_write> = var
    %GLF_live15i_1:ptr<function, i32, read_write> = var
    store %GLF_live15c, vec4<f32>(0.0f)
    store %GLF_live15i, 0i
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %7:i32 = load %GLF_live15i
        %8:bool = lt %7, 4i
        if %8 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %9:i32 = load %GLF_live15i
        %10:bool = gte %9, 3i
        if %10 [t: %b7] {  # if_2
          %b7 = block {  # true
            exit_loop  # loop_1
          }
        }
        %11:f32 = load_vector_element %GLF_live15c, 1u
        %12:bool = gte %11, 1.0f
        if %12 [t: %b8] {  # if_3
          %b8 = block {  # true
            %x_10:i32 = load %GLF_live15i
            store_vector_element %GLF_live15c, %x_10, 1.0f
            exit_if  # if_3
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        %14:i32 = load %GLF_live15i
        %15:i32 = add %14, 1i
        store %GLF_live15i, %15
        next_iteration %b3
      }
    }
    store %GLF_live15d, vec4<f32>(0.0f)
    store %GLF_live15i_1, 0i
    loop [b: %b9, c: %b10] {  # loop_2
      %b9 = block {  # body
        %16:i32 = load %GLF_live15i_1
        %17:bool = lt %16, 4i
        if %17 [t: %b11, f: %b12] {  # if_4
          %b11 = block {  # true
            exit_if  # if_4
          }
          %b12 = block {  # false
            exit_loop  # loop_2
          }
        }
        %18:i32 = load %GLF_live15i_1
        %19:bool = gte %18, 3i
        if %19 [t: %b13] {  # if_5
          %b13 = block {  # true
            exit_loop  # loop_2
          }
        }
        %20:f32 = load_vector_element %GLF_live15d, 1u
        %21:bool = gte %20, 1.0f
        if %21 [t: %b14] {  # if_6
          %b14 = block {  # true
            %x_15:i32 = load %GLF_live15i_1
            store_vector_element %GLF_live15d, %x_15, 1.0f
            exit_if  # if_6
          }
        }
        continue %b10
      }
      %b10 = block {  # continuing
        %23:i32 = load %GLF_live15i_1
        %24:i32 = add %23, 1i
        store %GLF_live15i_1, %24
        next_iteration %b9
      }
    }
    store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b15 {
  %b15 = block {
    %26:void = call %main_1
    %27:vec4<f32> = load %x_GLF_color
    %28:main_out = construct %27
    ret %28
  }
}

invalid entry point IO struct uses
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
