#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct str {
  tint_array<int, 4> arr;
};

tint_array<int, 4> func(threadgroup tint_array<int, 4>* const pointer) {
  volatile bool tint_loop_preserving_true = true;
  return *(pointer);
}

void tint_symbol_inner(uint local_invocation_index, threadgroup str* const tint_symbol_1) {
  volatile bool tint_loop_preserving_true_1 = true;
  for(uint idx = local_invocation_index; ((idx < 4u)) && tint_loop_preserving_true_1; idx = (idx + 1u)) {
    uint const i = idx;
    (*(tint_symbol_1)).arr[i] = 0;
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  tint_array<int, 4> const r = func(&((*(tint_symbol_1)).arr));
}

kernel void tint_symbol(uint local_invocation_index [[thread_index_in_threadgroup]]) {
  volatile bool tint_loop_preserving_true_2 = true;
  threadgroup str tint_symbol_2;
  tint_symbol_inner(local_invocation_index, &(tint_symbol_2));
  return;
}

