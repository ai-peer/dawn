SKIP: FAILED

#include <metal_stdlib>
using namespace metal;
template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct str {
  int i;
};

threadgroup tint_array<str, 4> S;
void func(threadgroup str* pointer) {
  pointer = str{};
}
kernel void tint_symbol() {
  func(S[2]);
}
program_source:19:32: error: program scope variable must reside in constant address space
threadgroup tint_array<str, 4> S;
                               ^
program_source:21:13: error: assigning to 'threadgroup str *' from incompatible type 'str'
  pointer = str{};
            ^~~~~

