SKIP: FAILED

#include <metal_stdlib>
using namespace metal;
template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct str {
  tint_array<int, 4> arr;
};

void func(thread tint_array<int, 4>* pointer) {
  pointer = tint_array<int, 4>{};
}
kernel void tint_symbol() {
  str F = {};
  func(F.arr);
}
program_source:20:13: error: assigning to 'tint_array<int, 4> *' from incompatible type 'tint_array<int, 4>'
  pointer = tint_array<int, 4>{};
            ^~~~~~~~~~~~~~~~~~~~
program_source:24:3: error: no matching function for call to 'func'
  func(F.arr);
  ^~~~
program_source:19:6: note: candidate function not viable: no known conversion from 'tint_array<int, 4>' to 'tint_array<int, 4> *' for 1st argument; take the address of the argument with &
void func(thread tint_array<int, 4>* pointer) {
     ^

