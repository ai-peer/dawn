; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 81
; Schema: 0
               OpCapability Shader
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %compute_main "compute_main" %compute_main_local_invocation_index_Input
               OpExecutionMode %compute_main LocalSize 1 1 1
               OpName %local_invocation_index_1 "local_invocation_index_1"
               OpMemberName %S_atomic 0 "x"
               OpMemberName %S_atomic 1 "a"
               OpMemberName %S_atomic 2 "y"
               OpName %S_atomic "S_atomic"
               OpName %wg "wg"
               OpName %compute_main_local_invocation_index_Input "compute_main_local_invocation_index_Input"
               OpName %compute_main_inner "compute_main_inner"
               OpName %local_invocation_index_2 "local_invocation_index_2"
               OpName %idx "idx"
               OpName %x_35 "x_35"
               OpName %compute_main_1 "compute_main_1"
               OpName %x_53 "x_53"
               OpName %compute_main_inner_0 "compute_main_inner"
               OpName %local_invocation_index_1_param "local_invocation_index_1_param"
               OpName %compute_main "compute_main"
               OpMemberDecorate %S_atomic 0 Offset 0
               OpDecorate %_arr_uint_uint_10 ArrayStride 4
               OpMemberDecorate %S_atomic 1 Offset 4
               OpMemberDecorate %S_atomic 2 Offset 44
               OpDecorate %compute_main_local_invocation_index_Input BuiltIn LocalInvocationIndex
       %uint = OpTypeInt 32 0
%_ptr_Private_uint = OpTypePointer Private %uint
          %4 = OpConstantNull %uint
%local_invocation_index_1 = OpVariable %_ptr_Private_uint Private %4
        %int = OpTypeInt 32 1
    %uint_10 = OpConstant %uint 10
%_arr_uint_uint_10 = OpTypeArray %uint %uint_10
   %S_atomic = OpTypeStruct %int %_arr_uint_uint_10 %uint
%_ptr_Workgroup_S_atomic = OpTypePointer Workgroup %S_atomic
         %wg = OpVariable %_ptr_Workgroup_S_atomic Workgroup
%_ptr_Input_uint = OpTypePointer Input %uint
%compute_main_local_invocation_index_Input = OpVariable %_ptr_Input_uint Input
       %void = OpTypeVoid
         %16 = OpTypeFunction %void %uint
%_ptr_Function_uint = OpTypePointer Function %uint
     %uint_0 = OpConstant %uint 0
%_ptr_Workgroup_int = OpTypePointer Workgroup %int
      %int_0 = OpConstant %int 0
%_ptr_Workgroup_uint = OpTypePointer Workgroup %uint
     %uint_2 = OpConstant %uint 2
       %bool = OpTypeBool
      %false = OpConstantFalse %bool
%_ptr_Workgroup_uint_0 = OpTypePointer Workgroup %uint
     %uint_1 = OpConstant %uint 1
   %uint_264 = OpConstant %uint 264
      %int_4 = OpConstant %int 4
         %51 = OpTypeFunction %void
%compute_main_inner = OpFunction %void None %16
%local_invocation_index_2 = OpFunctionParameter %uint
         %17 = OpLabel
        %idx = OpVariable %_ptr_Function_uint Function
               OpStore %idx %uint_0
         %21 = OpAccessChain %_ptr_Workgroup_int %wg %uint_0
               OpStore %21 %int_0
         %24 = OpAccessChain %_ptr_Workgroup_uint %wg %uint_2
               OpStore %24 %uint_0
               OpStore %idx %local_invocation_index_2
               OpBranch %29
         %29 = OpLabel
               OpLoopMerge %30 %28 None
               OpBranch %27
         %27 = OpLabel
         %31 = OpLoad %uint %idx
         %32 = OpULessThan %bool %31 %uint_10
         %34 = OpLogicalEqual %bool %32 %false
               OpSelectionMerge %36 None
               OpBranchConditional %34 %37 %36
         %37 = OpLabel
               OpBranch %30
         %36 = OpLabel
       %x_35 = OpLoad %uint %idx
         %39 = OpAccessChain %_ptr_Workgroup_uint_0 %wg %uint_1 %x_35
               OpAtomicStore %39 %uint_2 %uint_0 %uint_0
               OpBranch %28
         %28 = OpLabel
         %43 = OpLoad %uint %idx
         %44 = OpIAdd %uint %43 %uint_1
               OpStore %idx %44
               OpBranch %29
         %30 = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_264
         %47 = OpAccessChain %_ptr_Workgroup_uint_0 %wg %uint_1 %int_4
               OpAtomicStore %47 %uint_2 %uint_0 %uint_1
               OpReturn
               OpFunctionEnd
%compute_main_1 = OpFunction %void None %51
         %52 = OpLabel
       %x_53 = OpLoad %uint %local_invocation_index_1
         %54 = OpFunctionCall %void %compute_main_inner %x_53
               OpReturn
               OpFunctionEnd
%compute_main_inner_0 = OpFunction %void None %16
%local_invocation_index_1_param = OpFunctionParameter %uint
         %57 = OpLabel
         %58 = OpIEqual %bool %local_invocation_index_1_param %uint_0
               OpSelectionMerge %59 None
               OpBranchConditional %58 %60 %59
         %60 = OpLabel
         %61 = OpAccessChain %_ptr_Workgroup_int %wg %uint_0
               OpStore %61 %int_0
         %62 = OpAccessChain %_ptr_Workgroup_uint %wg %uint_2
               OpStore %62 %uint_0
               OpBranch %59
         %59 = OpLabel
               OpBranch %63
         %63 = OpLabel
               OpBranch %66
         %66 = OpLabel
         %68 = OpPhi %uint %local_invocation_index_1_param %63 %69 %65
               OpLoopMerge %67 %65 None
               OpBranch %64
         %64 = OpLabel
         %70 = OpUGreaterThanEqual %bool %68 %uint_10
               OpSelectionMerge %71 None
               OpBranchConditional %70 %72 %71
         %72 = OpLabel
               OpBranch %67
         %71 = OpLabel
         %73 = OpAccessChain %_ptr_Workgroup_uint_0 %wg %uint_1 %68
               OpAtomicStore %73 %uint_2 %uint_0 %uint_0
               OpBranch %65
         %65 = OpLabel
         %69 = OpIAdd %uint %68 %uint_1
               OpBranch %66
         %67 = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_264
               OpStore %local_invocation_index_1 %local_invocation_index_1_param
         %76 = OpFunctionCall %void %compute_main_1
               OpReturn
               OpFunctionEnd
%compute_main = OpFunction %void None %51
         %78 = OpLabel
         %79 = OpLoad %uint %compute_main_local_invocation_index_Input
         %80 = OpFunctionCall %void %compute_main_inner_0 %79
               OpReturn
               OpFunctionEnd
