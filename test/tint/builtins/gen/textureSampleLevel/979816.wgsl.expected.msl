#include <metal_stdlib>

using namespace metal;
struct GammaTransferParams {
  /* 0x0000 */ float G;
  /* 0x0004 */ float A;
  /* 0x0008 */ float B;
  /* 0x000c */ float C;
  /* 0x0010 */ float D;
  /* 0x0014 */ float E;
  /* 0x0018 */ float F;
  /* 0x001c */ uint padding;
};

struct ExternalTextureParams {
  /* 0x0000 */ uint numPlanes;
  /* 0x0004 */ int8_t tint_pad[12];
  /* 0x0010 */ float3x4 yuvToRgbConversionMatrix;
  /* 0x0040 */ GammaTransferParams gammaDecodeParams;
  /* 0x0060 */ GammaTransferParams gammaEncodeParams;
  /* 0x0080 */ float3x3 gamutConversionMatrix;
};

float gammaCorrection(float v, GammaTransferParams params) {
  if ((fabs(v) < params.D)) {
    return (sign(v) * ((params.C * fabs(v)) + params.F));
  }
  return ((sign(v) * pow(((params.A * fabs(v)) + params.B), params.G)) + params.E);
}

float4 textureSampleExternal(texture2d<float, access::sample> plane0, texture2d<float, access::sample> plane1, sampler smp, float2 coord, ExternalTextureParams params) {
  float3 color = 0.0f;
  if ((params.numPlanes == 1u)) {
    color = float4(plane0.sample(smp, coord, level(0.0f))).rgb;
  } else {
    color = (float4(plane0.sample(smp, coord, level(0.0f))[0], float4(plane1.sample(smp, coord, level(0.0f))).rg, 1.0f) * params.yuvToRgbConversionMatrix);
  }
  float const tint_symbol_1 = gammaCorrection(color[0], params.gammaDecodeParams);
  color[0] = tint_symbol_1;
  float const tint_symbol_2 = gammaCorrection(color[1], params.gammaDecodeParams);
  color[1] = tint_symbol_2;
  float const tint_symbol_3 = gammaCorrection(color[2], params.gammaDecodeParams);
  color[2] = tint_symbol_3;
  color = (params.gamutConversionMatrix * color);
  float const tint_symbol_4 = gammaCorrection(color[0], params.gammaEncodeParams);
  color[0] = tint_symbol_4;
  float const tint_symbol_5 = gammaCorrection(color[1], params.gammaEncodeParams);
  color[1] = tint_symbol_5;
  float const tint_symbol_6 = gammaCorrection(color[2], params.gammaEncodeParams);
  color[2] = tint_symbol_6;
  return float4(color, 1.0f);
}

void textureSampleLevel_979816(texture2d<float, access::sample> tint_symbol_7, texture2d<float, access::sample> tint_symbol_8, sampler tint_symbol_9, const constant ExternalTextureParams* const tint_symbol_10) {
  float4 res = textureSampleExternal(tint_symbol_7, tint_symbol_8, tint_symbol_9, float2(), *(tint_symbol_10));
}

struct tint_symbol {
  float4 value [[position]];
};

float4 vertex_main_inner(texture2d<float, access::sample> tint_symbol_11, texture2d<float, access::sample> tint_symbol_12, sampler tint_symbol_13, const constant ExternalTextureParams* const tint_symbol_14) {
  textureSampleLevel_979816(tint_symbol_11, tint_symbol_12, tint_symbol_13, tint_symbol_14);
  return float4();
}

vertex tint_symbol vertex_main(texture2d<float, access::sample> tint_symbol_15 [[texture(0)]], texture2d<float, access::sample> tint_symbol_16 [[texture(1)]], sampler tint_symbol_17 [[sampler(0)]], const constant ExternalTextureParams* tint_symbol_18 [[buffer(2)]]) {
  float4 const inner_result = vertex_main_inner(tint_symbol_15, tint_symbol_16, tint_symbol_17, tint_symbol_18);
  tint_symbol wrapper_result = {};
  wrapper_result.value = inner_result;
  return wrapper_result;
}

fragment void fragment_main(texture2d<float, access::sample> tint_symbol_19 [[texture(0)]], texture2d<float, access::sample> tint_symbol_20 [[texture(1)]], sampler tint_symbol_21 [[sampler(0)]], const constant ExternalTextureParams* tint_symbol_22 [[buffer(2)]]) {
  textureSampleLevel_979816(tint_symbol_19, tint_symbol_20, tint_symbol_21, tint_symbol_22);
  return;
}

kernel void compute_main(texture2d<float, access::sample> tint_symbol_23 [[texture(0)]], texture2d<float, access::sample> tint_symbol_24 [[texture(1)]], sampler tint_symbol_25 [[sampler(0)]], const constant ExternalTextureParams* tint_symbol_26 [[buffer(2)]]) {
  textureSampleLevel_979816(tint_symbol_23, tint_symbol_24, tint_symbol_25, tint_symbol_26);
  return;
}

