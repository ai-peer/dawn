#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct MyStruct {
  float f1;
};

constant int v1 = 1;

constant uint v2 = 1u;

constant float v3 = 1.0f;

constant int3 v4 = int3(1);

constant uint3 v5 = uint3(1u);

constant float3 v6 = float3(1.0f);

constant float3x3 v7 = float3x3(float3(1.0f), float3(1.0f), float3(1.0f));

constant MyStruct v8 = {};

constant tint_array<float, 10> v9 = {};

struct tint_symbol_1 {
  float4 value [[color(0)]];
};

float4 tint_symbol_inner() {
  return float4(0.0f);
}

fragment tint_symbol_1 tint_symbol() {
  float4 const inner_result = tint_symbol_inner();
  tint_symbol_1 wrapper_result = {};
  wrapper_result.value = inner_result;
  return wrapper_result;
}

