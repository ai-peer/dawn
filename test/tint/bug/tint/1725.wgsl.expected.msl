#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_symbol_13 {
  /* 0x0000 */ tint_array<uint, 1> arr;
};

struct tint_symbol_7 {
  /* 0x0000 */ tint_array<uint4, 1> buffer_size;
};

void tint_symbol_1_inner(uint tint_symbol_2, const constant tint_symbol_7* const tint_symbol_9, const device tint_array<uint, 1>* const tint_symbol_10) {
  int const tint_symbol_3 = 0;
  int const tint_symbol_4 = 0;
  int const tint_symbol_5 = 0;
  uint const index = tint_symbol_2;
  bool const predicate = (uint(index) <= (((*(tint_symbol_9)).buffer_size[0u][0u] / 4u) - 1u));
  uint predicated_expr = 0u;
  if (predicate) {
    predicated_expr = (*(tint_symbol_10))[index];
  }
  uint const tint_symbol_6 = predicated_expr;
}

kernel void tint_symbol_1(const constant tint_symbol_7* tint_symbol_11 [[buffer(30)]], const device tint_symbol_13* tint_symbol_12 [[buffer(0)]], uint tint_symbol_2 [[thread_index_in_threadgroup]]) {
  tint_symbol_1_inner(tint_symbol_2, tint_symbol_11, &((*(tint_symbol_12)).arr));
  return;
}

