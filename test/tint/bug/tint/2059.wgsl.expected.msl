#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 elements;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct S_tint_packed_vec3 {
  /* 0x0000 */ tint_array<tint_packed_vec3_f32_array_element, 3> m;
};

struct S {
  float3x3 m;
};

void assign_and_preserve_padding_1(device tint_array<tint_packed_vec3_f32_array_element, 3>* const dest, float3x3 value) {
  (*(dest))[0u].elements = packed_float3(value[0u]);
  (*(dest))[1u].elements = packed_float3(value[1u]);
  (*(dest))[2u].elements = packed_float3(value[2u]);
}

void assign_and_preserve_padding(device S_tint_packed_vec3* const dest, S value) {
  assign_and_preserve_padding_1(&((*(dest)).m), value.m);
}

void assign_and_preserve_padding_2(device tint_array<S_tint_packed_vec3, 4>* const dest, tint_array<S, 4> value) {
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    assign_and_preserve_padding(&((*(dest))[i]), value[i]);
  }
}

kernel void tint_symbol_1(device S_tint_packed_vec3* tint_symbol_8 [[buffer(0)]], device tint_array<S_tint_packed_vec3, 4>* tint_symbol_9 [[buffer(1)]]) {
  float3x3 m = float3x3(0.0f);
  for(uint c = 0u; (c < 3u); c = (c + 1u)) {
    m[c] = float3(float(((c * 3u) + 1u)), float(((c * 3u) + 2u)), float(((c * 3u) + 3u)));
  }
  S const tint_symbol_2 = {.m=m};
  assign_and_preserve_padding(tint_symbol_8, tint_symbol_2);
  S const tint_symbol_3 = {.m=m};
  S const tint_symbol_4 = {.m=(m * 2.0f)};
  S const tint_symbol_5 = {.m=(m * 3.0f)};
  S const tint_symbol_6 = {.m=(m * 4.0f)};
  tint_array<S, 4> const tint_symbol_7 = tint_array<S, 4>{tint_symbol_3, tint_symbol_4, tint_symbol_5, tint_symbol_6};
  assign_and_preserve_padding_2(tint_symbol_9, tint_symbol_7);
  return;
}

