#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

int foo() {
  volatile bool tint_loop_preserving_true = true;
  return 1;
}

fragment void tint_symbol() {
  volatile bool tint_loop_preserving_true_1 = true;
  tint_array<float, 4> arr = tint_array<float, 4>{};
  {
    int const tint_symbol_1 = foo();
    int const a_save = tint_symbol_1;
    while (tint_loop_preserving_true_1) {
      {
        float const x = arr[a_save];
        break;
      }
    }
  }
  return;
}

