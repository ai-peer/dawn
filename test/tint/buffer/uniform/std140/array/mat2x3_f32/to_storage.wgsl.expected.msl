#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_vec3_struct {
  /* 0x0000 */ packed_float3 elements;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

float2x3 unpack_array(tint_array<tint_vec3_struct, 2> in) {
  float2x3 result = float2x3(0.0f);
  for(uint i = 0u; (i < 2u); i = (i + 1u)) {
    result[i] = float3(in[i].elements);
  }
  return result;
}

tint_array<float2x3, 4> unpack_array_1(tint_array<tint_array<tint_vec3_struct, 2>, 4> in) {
  tint_array<float2x3, 4> result = {};
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    result[i] = unpack_array(in[i]);
  }
  return result;
}

void assign_and_preserve_padding_1(device tint_array<tint_vec3_struct, 2>* const dest, float2x3 value) {
  (*(dest))[0u].elements = packed_float3(value[0u]);
  (*(dest))[1u].elements = packed_float3(value[1u]);
}

void assign_and_preserve_padding(device tint_array<tint_array<tint_vec3_struct, 2>, 4>* const dest, tint_array<float2x3, 4> value) {
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    assign_and_preserve_padding_1(&((*(dest))[i]), value[i]);
  }
}

kernel void f(device tint_array<tint_array<tint_vec3_struct, 2>, 4>* tint_symbol [[buffer(1)]], const constant tint_array<tint_array<tint_vec3_struct, 2>, 4>* tint_symbol_1 [[buffer(0)]]) {
  assign_and_preserve_padding(tint_symbol, unpack_array_1(*(tint_symbol_1)));
  assign_and_preserve_padding_1(&((*(tint_symbol))[1]), unpack_array((*(tint_symbol_1))[2]));
  (*(tint_symbol))[1][0].elements = packed_float3(float3((*(tint_symbol_1))[0][1].elements).zxy);
  (*(tint_symbol))[1][0].elements[0] = (*(tint_symbol_1))[0][1].elements[0];
  return;
}

