#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_vec3_struct {
  /* 0x0000 */ packed_half3 elements;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

kernel void f(const constant tint_array<tint_vec3_struct, 4>* tint_symbol_1 [[buffer(0)]]) {
  thread tint_array<tint_vec3_struct, 4> tint_symbol = {};
  tint_symbol = *(tint_symbol_1);
  tint_symbol[1].elements = (*(tint_symbol_1))[0].elements;
  tint_symbol[1].elements = packed_half3(half3((*(tint_symbol_1))[0].elements).zxy);
  tint_symbol[0].elements[1] = (*(tint_symbol_1))[1].elements[0];
  return;
}

