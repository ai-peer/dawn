#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_vec3_struct {
  /* 0x0000 */ packed_half3 elements;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

half2x3 unpack_array(tint_array<tint_vec3_struct, 2> in) {
  half2x3 result = half2x3(0.0h);
  for(uint i = 0u; (i < 2u); i = (i + 1u)) {
    result[i] = half3(in[i].elements);
  }
  return result;
}

struct S {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 4> tint_pad_1;
  /* 0x0008 */ tint_array<tint_vec3_struct, 2> m;
  /* 0x0018 */ tint_array<int8_t, 40> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

void assign_and_preserve_padding_2(device tint_array<tint_vec3_struct, 2>* const dest, half2x3 value) {
  (*(dest))[0u].elements = packed_half3(value[0u]);
  (*(dest))[1u].elements = packed_half3(value[1u]);
}

void assign_and_preserve_padding_1(device S* const dest, S value) {
  (*(dest)).before = value.before;
  assign_and_preserve_padding_2(&((*(dest)).m), unpack_array(value.m));
  (*(dest)).after = value.after;
}

void assign_and_preserve_padding(device tint_array<S, 4>* const dest, tint_array<S, 4> value) {
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    assign_and_preserve_padding_1(&((*(dest))[i]), value[i]);
  }
}

kernel void f(device tint_array<S, 4>* tint_symbol [[buffer(1)]], const constant tint_array<S, 4>* tint_symbol_1 [[buffer(0)]]) {
  assign_and_preserve_padding(tint_symbol, *(tint_symbol_1));
  assign_and_preserve_padding_1(&((*(tint_symbol))[1]), (*(tint_symbol_1))[2]);
  assign_and_preserve_padding_2(&((*(tint_symbol))[3].m), unpack_array((*(tint_symbol_1))[2].m));
  (*(tint_symbol))[1].m[0].elements = packed_half3(half3((*(tint_symbol_1))[0].m[1].elements).zxy);
  return;
}

