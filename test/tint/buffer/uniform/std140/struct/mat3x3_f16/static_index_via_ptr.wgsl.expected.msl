#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_vec3_struct {
  /* 0x0000 */ packed_half3 elements;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

half3x3 unpack_array(tint_array<tint_vec3_struct, 3> in) {
  half3x3 result = half3x3(0.0h);
  for(uint i = 0u; (i < 3u); i = (i + 1u)) {
    result[i] = half3(in[i].elements);
  }
  return result;
}

struct Inner {
  /* 0x0000 */ tint_array<tint_vec3_struct, 3> m;
  /* 0x0018 */ tint_array<int8_t, 40> tint_pad_1;
};

struct Outer {
  /* 0x0000 */ tint_array<Inner, 4> a;
};

kernel void f(const constant tint_array<Outer, 4>* tint_symbol [[buffer(0)]]) {
  tint_array<Outer, 4> const l_a = *(tint_symbol);
  Outer const l_a_3 = (*(tint_symbol))[3];
  tint_array<Inner, 4> const l_a_3_a = (*(tint_symbol))[3].a;
  Inner const l_a_3_a_2 = (*(tint_symbol))[3].a[2];
  half3x3 const l_a_3_a_2_m = unpack_array((*(tint_symbol))[3].a[2].m);
  half3 const l_a_3_a_2_m_1 = half3((*(tint_symbol))[3].a[2].m[1].elements);
  half const l_a_3_a_2_m_1_0 = (*(tint_symbol))[3].a[2].m[1].elements[0];
  return;
}

