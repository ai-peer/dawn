#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_vec3_struct {
  /* 0x0000 */ packed_float3 elements;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

float2x3 unpack_array(tint_array<tint_vec3_struct, 2> in) {
  float2x3 result = float2x3(0.0f);
  for(uint i = 0u; (i < 2u); i = (i + 1u)) {
    result[i] = float3(in[i].elements);
  }
  return result;
}

struct S {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad_1;
  /* 0x0010 */ tint_array<tint_vec3_struct, 2> m;
  /* 0x0030 */ tint_array<int8_t, 16> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

void a(tint_array<S, 4> a_1) {
}

void b(S s) {
}

void c(float2x3 m) {
}

void d(float3 v) {
}

void e(float f_1) {
}

kernel void f(const constant tint_array<S, 4>* tint_symbol [[buffer(0)]]) {
  a(*(tint_symbol));
  b((*(tint_symbol))[2]);
  c(unpack_array((*(tint_symbol))[2].m));
  d(float3((*(tint_symbol))[0].m[1].elements).zxy);
  e(float3((*(tint_symbol))[0].m[1].elements).zxy[0]);
  return;
}

