{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "675c5066_9bb1dd33",
        "filename": "src/dawn_native/CommandBufferStateTracker.cpp",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T14:33:10Z",
      "side": 1,
      "message": "nit: we could get the pipeline once for both vertex buffer checks and index buffer checks.",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef14075e_03d41a94",
        "filename": "src/dawn_native/CommandBufferStateTracker.cpp",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T20:06:12Z",
      "side": 1,
      "message": "I don\u0027t think so, because it needs to be guarded by the aspect. Otherwise, it\u0027ll hit the ASSERT in a compute pass that the type is not a render pipeline.",
      "parentUuid": "675c5066_9bb1dd33",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22a3a2b8_e8681c15",
        "filename": "src/dawn_native/CommandBufferStateTracker.cpp",
        "patchSetId": 12
      },
      "lineNbr": 219,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T14:33:10Z",
      "side": 1,
      "message": "nit: that\u0027s checked in the getter so we could remove it.",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55ceb7d9_a80834ad",
        "filename": "src/dawn_native/CommandBufferStateTracker.cpp",
        "patchSetId": 12
      },
      "lineNbr": 219,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22a3a2b8_e8681c15",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e02a9fb_ebcb3808",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T14:33:10Z",
      "side": 1,
      "message": "nit: I was also suggesting to have an offset into the clientParams and validatedParams buffers to avoid using the length \"hack\".",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "431aa222_e95d64f5",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T16:03:33Z",
      "side": 1,
      "message": "why? that means we have to schedule even more uniform buffer writes in the past. maxComputeWorkgroupsPerDimension is basically constant (eventually can be a spec constant), and the offset can already be inferred from the length. So it\u0027s not necessary to add additional complexity with buffer writes until we want to batch and schedule the entire validation earlier in the past (when we have generalized time-traveling).",
      "parentUuid": "3e02a9fb_ebcb3808",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3d09bc4_537046e3",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T16:11:07Z",
      "side": 1,
      "message": "Because subjectively I think it is simpler and that we don\u0027t really need to optimize for the uniform buffer write. But either way seems ok.",
      "parentUuid": "431aa222_e95d64f5",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "583886fc_058b5c79",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T20:06:12Z",
      "side": 1,
      "message": "ok. I can\u0027t debug the issue I saw in patchset 11 right now, so keeping the uniform buffer per-dispatchIndirect and added the offset into it.",
      "parentUuid": "d3d09bc4_537046e3",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18657572_42ea88db",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T14:33:10Z",
      "side": 1,
      "message": "Maybe this is not strictly needed so we reapplied the state manually. I\u0027m that things like dirty bits might not be 100% correct (it looks like it might be ok now, but it\u0027s brittle in the future).",
      "range": {
        "startLine": 458,
        "startChar": 0,
        "endLine": 460,
        "endChar": 47
      },
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95fc79b8_319f8fb1",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T20:06:12Z",
      "side": 1,
      "message": "it is needed because the code above only applies the state if a pipeline / bind group is non-null.\n\nIt\u0027s problematic if there is *no* pipeline set, you snapshot state into |prev|, SetPipeline on the current state, then restore |prev| (the pipeline is not unset!), then perform a draw/dispatch.\n\nInstead of an error that no pipeline is set, you\u0027ll either successfully do the draw/dispatch or get a different, confusing error that your bindings are wrong.\n\nAdded a test for this",
      "parentUuid": "18657572_42ea88db",
      "range": {
        "startLine": 458,
        "startChar": 0,
        "endLine": 460,
        "endChar": 47
      },
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b4fbe51_336edaef",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 12
      },
      "lineNbr": 256,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T14:33:10Z",
      "side": 1,
      "message": "ditto",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a72377a7_e35e74c3",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 12
      },
      "lineNbr": 256,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b4fbe51_336edaef",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b5be14c_0638a3b3",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 162,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-28T14:33:10Z",
      "side": 1,
      "message": "I assume leftover debug code will be removed?",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77252077_4938495b",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 162,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-28T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b5be14c_0638a3b3",
      "revId": "6eeb14fbc620deb4b9fa87aa09b5e8bf6100a806",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}