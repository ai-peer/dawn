{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7ac031e3_5ce47ce7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-10T02:48:27Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9015e2c1_331b98a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdabd07b_d3e54958",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 905,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-09-10T08:00:28Z",
      "side": 1,
      "message": "Do you mean all the members of limits have no default values?",
      "range": {
        "startLine": 905,
        "startChar": 81,
        "endLine": 905,
        "endChar": 105
      },
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b69a5c1_fab2accc",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 912,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "note: maybe we need to rename this limits in the spec now that we renamed SAMPLED-\u003eTEXTURE_BINDING",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c3dd113_be7fac0a",
        "filename": "src/dawn_native/Adapter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "If we change the function to return a boolean I think these ASSERTs should be actual validation and return false.",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59d40e1a_06a95676",
        "filename": "src/dawn_native/Adapter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "side-note: what do you think of having FromAPI and ToAPI in dawn_platform.h similarly to dawn_wire? It would make these casts more safe since they would be purely autogenerated.",
      "range": {
        "startLine": 123,
        "startChar": 25,
        "endLine": 123,
        "endChar": 63
      },
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1dcca86_0b973c24",
        "filename": "src/dawn_native/Adapter.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "Shouldn\u0027t GetLimits return a boolean to say if it succeeded or not based on the validation rules you described in crbug.com/dawn/1104 ? Added a comment there too.",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e03e67e_a2cc35a5",
        "filename": "src/dawn_native/Adapter.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "When we have extension limits we\u0027ll have to turn this into a struct of all the limits. Might be worth doing it now? This way the internal code will do GetLimits().v1.maxBufferBindingSize something like that?",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c305052_83d9a233",
        "filename": "src/dawn_native/Limits.cpp",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "maxTextureArrayLayers is not 256. It might need to be changed in Constants.h though.",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d59359e4_59606d19",
        "filename": "src/dawn_native/Limits.cpp",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "maxStorageBuffersPerShaderStage is 8",
      "range": {
        "startLine": 29,
        "startChar": 47,
        "endLine": 29,
        "endChar": 48
      },
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3082882_992ace48",
        "filename": "src/dawn_native/Limits.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "nit: This doesn\u0027t exactly assign limits since it just transforms \"in\" to have explicit default values. Maybe it should be called something like ReifyDefaultLimits and either do it in-place or return the reifed limit by value (since it is a newly created object)",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c38367e2_c0559418",
        "filename": "src/tests/unittests/validation/RequestDeviceValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "Why do we need to use STREQ for comparing a const char* to nullptr?",
      "range": {
        "startLine": 31,
        "startChar": 8,
        "endLine": 31,
        "endChar": 20
      },
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d016462_2482bffb",
        "filename": "src/tests/unittests/validation/RequestDeviceValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "Does the spec actually allow that? Weird.",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b09100_7adbebd5",
        "filename": "src/tests/unittests/validation/RequestDeviceValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-10T08:48:36Z",
      "side": 1,
      "message": "Note: maybe we need validation that alignments requested must be a power of 2.",
      "revId": "89816f34d0e2bf4b33c2b3f36b6fa06f65cfc019",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}