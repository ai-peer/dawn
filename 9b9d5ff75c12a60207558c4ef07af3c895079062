{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0531d38a_96522997",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2024-04-03T00:17:25Z",
      "side": 1,
      "message": "I wasn\u0027t sure whether to make a refactor like this, which is to make `GetTextureUsage` (based on `GetTextureQueries`) and then make GetTextureQueries and `GetTextureLoads` from this OR, change `GetTextureQueries` to `GetTextureUsage` and update the code that\u0027s using it. In particular, the code that categorizes `textureLoad` if multisampled as `textureNumLevels` in `GetTextureQueries` is not commented so I have no clue why that\u0027s considered a `textureNumLevels`.\n\nI also wasn\u0027t sure if I should create the enum TextureBuiltinType or just use wgsl::BuiltinFn but for now I just copied this pattern.\n\nI also only made 1 test because I didn\u0027t want to throw a bunch of work away if this is not the correct direction.\n\nNote: The plan for this code is to validate out calls to `textureLoad` for depth textures. I think that means `texture_depth???` and not a depth format texture bound as `texture_2d\u003cf32\u003e`\n\nMy thought was, given the list of texture group/bindings used with `textureLoad` I\u0027d iterate over the texture bindings and reject if one of them is a `texture_depth???` binding.  On the other hand I see from the tree walker that WGSL also has this info so maybe I should add that info. Instead binding+group it would be the type (as in `ty-\u003eUnwrapRef()`). Then I wouldn\u0027t have to iterate over the result in dawn.\n\nLooking forward to your feedback.",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fed9d4c_772c81ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-03T13:52:45Z",
      "side": 1,
      "message": "The `textureLoad` is marked that way because it\u0027s treated the same way in the backend transform. It could be changed with a new enum entry added if we desired.\n\nJust to make sure I understand what this is for. In compat the `texture_depth_*` items are not allowed to be used in `textureLoad` queries. So, you\u0027re attempting to retrieve all the things used in a `textureLoad` and then determining if they\u0027re a `texture_depth_*` type such that dawn can then throw a validation error?\n\nDoes this always need to be done for the GLSL backend?",
      "parentUuid": "0531d38a_96522997",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af3a2cd5_a7893fab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2024-04-03T16:23:22Z",
      "side": 1,
      "message": "It needs to be done in validation when running in compat mode so the check will be in src/dawn/native and be like\n\n```\nif (in-compat-mode \u0026\u0026 depth-texture-is-used-with-texture-load) { error }\n```\n\nProbably in `RenderPipeline.cpp` in `ValidateRenderPipelineDescriptor` and a similar one for compute pipelines",
      "parentUuid": "5fed9d4c_772c81ff",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43c53845_92318527",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-04T17:50:59Z",
      "side": 1,
      "message": "Before digging into this, we had one more clarification. You\u0027d mentioned `texture_2d` isn\u0027t included here, but it sounded like from other chat messages that it should be? Like, Dawn can pretend a `texture_2d` is a  depth texture. So, this validation has to be on the Dawn side because only dawn knows about the hidden depth texture_2d textures?\n\nIs that correct, and if so, does this need to be updated to handle `texture_2d` textures?",
      "parentUuid": "af3a2cd5_a7893fab",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e188ecc_2a8d072f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2024-04-08T19:43:28Z",
      "side": 1,
      "message": "I don\u0027t think we care about `texture_2d`. I know it works in WebGL1 for 11+ years. Like here\u0027s a demo from 2011 that uses a depth texture as `texture_2d` (press `d` 3 times). https://webglsamples.org/field/field.html\n\nCompat\u0027s goal is to be WebGL1/2++ so it would be strange if compat didn\u0027t support this and people were forced to stay in WebGL to get the feature. I don\u0027t think anything in the chat suggests using a depth texture as `texture_2d` doesn\u0027t work. The spec says, as long as TEXTURE_COMPARE_MODE is none then it works. setting a sampler to have a comparison mode makes it a `sampler_comparison` not a `sampler`. A `sampler_comparison` is only compatible with `texture_depth???` textures, not `texture_2d`.",
      "parentUuid": "43c53845_92318527",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad34db4a_c242d9ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-09T14:33:44Z",
      "side": 1,
      "message": "If texture_2d doesn\u0027t matter, does this mean we can do this inside Tint in a transform? Is there any information that needs to come from Dawn?",
      "parentUuid": "8e188ecc_2a8d072f",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8195527f_4747d365",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2024-04-09T22:10:30Z",
      "side": 1,
      "message": "No, this is something that is supposed to happen in dawn. You should be able to write code like this\n\n```js\nconst module \u003d device.createShaderModule({ code: `\n\n  @group(0) @binding(0) var td: texture_depth_2d;\n  @group(0) @binding(0) var t2d: texture_2d\u003cf32\u003e;\n  @group(0) @binding(1) var s: sampler;\n  \n  @vertex fn codeThatUsesTextureLoadWithDepth() {\n    let v \u003d textureLoad(td, vec2i(0), 0);\n  }\n\n  @vertex fn codeThatDoesNotUseTextureLoadWithDepth() {\n    let v \u003d textureSample(t2d, s, vec2f(0));\n  }\n\n  `,\n});\n\ndevice.createRenderPipleine({\n  vertex: {\n    module,\n    entryPoint: compatibilityMode\n       ? \u0027codeThatDoesNotUseTextureLoadWithDepth\u0027\n       : \u0027codeThatUsesTextureLoadWithDepth\u0027,\n  },\n  ...\n```",
      "parentUuid": "ad34db4a_c242d9ca",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8fbf37a_60d2bea9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-04-10T13:48:16Z",
      "side": 1,
      "message": "That seems fine? Dawn would pass in a `compat` flag to the tint backend writer. That writer already run `singleEntryPoint` so it would strip out one or the other of those two entry points. Then the writer, if it sees a `texture_depth` usedd with a `textureLoad` during validation would fail?",
      "parentUuid": "8195527f_4747d365",
      "revId": "9b9d5ff75c12a60207558c4ef07af3c895079062",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}