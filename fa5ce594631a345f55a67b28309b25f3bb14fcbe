{
  "comments": [
    {
      "key": {
        "uuid": "ab476f31_5658cd0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-08T07:09:31Z",
      "side": 1,
      "message": "Let\u0027s wait to see if Bryan\u0027s concern is addressed, but LGTM",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b4e124d_73531db4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T17:48:27Z",
      "side": 1,
      "message": "LGTM.",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47589758_b3ca22d9",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-08T07:09:31Z",
      "side": 1,
      "message": "[1]",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b31bdae_a0bcd7f2",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 261,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T17:48:27Z",
      "side": 1,
      "message": "nit: the written range DOES need to be passed to Unmap but MUST be kept empty (upon init). Although not GPU readable, the empty written range must be specified because the CPU doesn\u0027t need to write. Consider clarifying and the link to MSDN [1].\n\n[1] https://docs.microsoft.com/en-us/windows/win32/api/d3d12/nf-d3d12-id3d12resource-unmap",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8af7a65_0e585b75",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-08T18:03:48Z",
      "side": 1,
      "message": "Instead of adding !\u003d readback to the condition, it could be an assert, because it should never happen.",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f73c24d6_0df33554",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T18:23:27Z",
      "side": 1,
      "message": "@CW, WDYT of isWrite \u003d \u003ccondition\u003e in Buffer::MapAtCreationImpl?\n\nOtherwise, looks like removing it would trigger the ASSERT (but it\u0027s still valid to map a read-back heap).",
      "parentUuid": "d8af7a65_0e585b75",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa51f79d_f3a9de3a",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-08T18:49:20Z",
      "side": 1,
      "message": "Maybe I\u0027m not following the discussion. But isn\u0027t the ASSERT happening because we\u0027ve added MapRead back to Buffer::IsMapWritable() ? I\u0027m not sure why that was added back. I thought in another thread Corentin mentioned that this function is NOT used to determine which heap we use. It happens at [1].",
      "parentUuid": "f73c24d6_0df33554",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36cad753_9d30adbd",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T19:11:45Z",
      "side": 1,
      "message": "Correct. It was \"added back\" (really, untouched) because if we remove it, we will now create a UPLOAD heap (surprise!) which seems wrong to me since mapping a read-back heap is allowed and worked as such previously.",
      "parentUuid": "fa51f79d_f3a9de3a",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc83fccf_65f652b3",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-08T19:14:07Z",
      "side": 1,
      "message": "Why does it create an UPLOAD heap given the condition at [1] ? The D3D12HeapType(..) helper used in buffer creation does not check IsMapWritable(). If the usage has MapRead usage, it will be created on D3D12_HEAP_TYPE_READBACK",
      "parentUuid": "36cad753_9d30adbd",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0160eec_5c67d24f",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T19:56:04Z",
      "side": 1,
      "message": "It\u0027s not buffer creation that uses IsMapWritable() but MapAtCreation() which if removed, creates an UPLOAD heap too (error buffer) which does not look correct.",
      "parentUuid": "fc83fccf_65f652b3",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c90e5f15_cddf9a6e",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-08T19:59:16Z",
      "side": 1,
      "message": "It does create an UPLOAD buffer, though it isn\u0027t an error buffer.\n\nIt creates an UPLOAD buffer, which the user can populate with data by calling GetMappedRange(). and then on Unmap(), Dawn will enqueue a copy from that UPLOAD buffer into the READBACK buffer. This sounds correct to me.",
      "parentUuid": "c0160eec_5c67d24f",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2549b1ff_6084386d",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T20:13:41Z",
      "side": 1,
      "message": "If the usage is MapRead, we shouldn\u0027t need to be writing and mapping a READBACK heap for reading doesn\u0027t require an UPLOAD heap.\n\nI say \"error buffer\" because the comment says so (is it wrong?), Buffer.cpp:182. Note: previously, this didn\u0027t happen so it wasn\u0027t required even before the change. \n\nAm I missing something?",
      "parentUuid": "c90e5f15_cddf9a6e",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fa4d557_b57d98c8",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-08T20:33:20Z",
      "side": 1,
      "message": "Hm so the READBACK heap isn\u0027t being mapped (or shouldn\u0027t be). A separate staging buffer in the UPLOAD heap is mapped.\n\nExample:\n\n// Internally, this allocates BOTH a readbackBuffer and mapped uploadBuffer (staging)\nwgpu::Buffer buffer \u003d device.CreateBuffer(\n    wgpu::BufferUsage::MapRead, mappedAtCreation \u003d true);\n\n// This returns a pointer to mapped data for |uploadBuffer|\nvoid* data \u003d buffer.GetMappedRange();\nmemcpy(data, myData, sizeof(myData));\n\n// This flushes a copy from |uploadBuffer| into |readbackBuffer|\nbuffer.Unmap();\n\n\n^^ Note that the READBACK heap is never mapped. We use a staging buffer in the UPLOAD heap to copy data in.\n\n\nNow, it should be possible to do\n\n\nawait buffer.MapAsync();\n\nvoid* readbackData \u003d buffer.GetMappedRange();\n\nAnd see that readbackData has |myData|.\n\nAll that being said, idk why someone would have a MapRead buffer and do mappedAtCreation \u003d true, but it should work.\n\n----\n\n\nThe comment in Buffer.cpp:182 could probably be more specific. GetDevice()-\u003eCreateStagingBuffer() is what\u0027s making the staging uploadBuffet, but that\u0027s not the error buffer. The comment means that if any of the DAWN_TRYs in the function (MapAtCreationImpl or CreateStagingBuffer) fail, THEN the buffer will be replaced with an error buffer. See https://source.chromium.org/chromium/chromium/src/+/master:third_party/dawn/src/dawn_native/Device.cpp;l\u003d608;drc\u003dcf75366215a81fe70bb3cbe8a4685ba6cdc06276;bpv\u003d1;bpt\u003d1",
      "parentUuid": "2549b1ff_6084386d",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "296f0e29_21f178f4",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-08T21:35:16Z",
      "side": 1,
      "message": "\u003e ^^ Note that the READBACK heap is never mapped. We use a staging buffer in the UPLOAD heap to copy data in.\n\nOK but I still don\u0027t understand why we should do so now (it didn\u0027t before, right?). If usage is MapRead, a READBACK heap is already mappable and Unmap becomes a no-op (what D3D expects). None of this staging + copy is needed for reading which is why PS5 works.\n\n\u003e All that being said, idk why someone would have a MapRead buffer and do mappedAtCreation \u003d true, but it should work.\n\nYup, maybe \"IsMapWritable\" really means \"IsMappable\" since a READBACK heap can be mapped as if mapped through MapAsync.",
      "parentUuid": "9fa4d557_b57d98c8",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b664771_4b74c16c",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-08T21:48:51Z",
      "side": 1,
      "message": "Ok, sorry I realize now we were on the same page. I thought that somehow the MapRead buffer was being created in the UPLOAD heap and didn\u0027t think that was the case.\n\nAs long as writing the data in the READBACK heap without setting mWrittenRange, and then reading it back works, then it is makes sense to not create the extra buffer in the UPLOAD heap. I think either the current code or your suggestion to change the |isWrite| parameter to be false is ok.",
      "parentUuid": "296f0e29_21f178f4",
      "revId": "fa5ce594631a345f55a67b28309b25f3bb14fcbe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}