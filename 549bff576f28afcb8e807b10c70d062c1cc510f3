{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "549a7466_96d66ead",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-17T21:02:28Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c390e708_6dcd2e12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-20T11:45:43Z",
      "side": 1,
      "message": "Looks amazing, looking forward to it when we\u0027re able to re-land abseil.",
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5e11b8f_4a462632",
        "filename": "docs/validation_errors.md",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-20T11:45:43Z",
      "side": 1,
      "message": "This might be in an errors.md given there is a lot more validation. Would be nice!",
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "860605f3_4d3bd6e4",
        "filename": "docs/validation_errors.md",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-23T20:39:07Z",
      "side": 1,
      "message": "Done. Moved to errors.md, updated the text to take into account the wider scope, and added a bit more content.",
      "parentUuid": "e5e11b8f_4a462632",
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf7fc03_270425df",
        "filename": "docs/validation_errors.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-17T21:02:28Z",
      "side": 1,
      "message": "uint: whitespace",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 2
      },
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b30d41ac_7ed6191e",
        "filename": "generator/templates/dawn_native/webgpu_absl_format.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-20T11:45:43Z",
      "side": 1,
      "message": "nit: slight preference for adding type aliases for FooBase for pure_frontend_types in their respective header (sorry I wasn\u0027t super clear earlier). Otherwise a pattern we can use in templates is:\n\n  {% set Base \u003d if type.name.canonical_case() in pure_frontend_types: \"Base\" else \"\"%}\n  class {{type.name.CamelCase()}}{{Base}}\n  \nThis is used extensively in wire templates to add {{Out}} or {{Return}} to types as needed.",
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f420e621_a1d65f62",
        "filename": "generator/templates/dawn_native/webgpu_absl_format.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-23T20:39:07Z",
      "side": 1,
      "message": "Done. Added the `using` statements to each applicable header, though it still needs the `{% set Base \u003d ...` pattern in the header because otherwise you get a conflict in the forward declaration between the `class` and the `using`.",
      "parentUuid": "b30d41ac_7ed6191e",
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "853aa2a8_ea2b250d",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-20T11:45:43Z",
      "side": 1,
      "message": "optional nit: We could say what that it is the minimum alignment for a specific buffer binding type.",
      "range": {
        "startLine": 93,
        "startChar": 79,
        "endLine": 93,
        "endChar": 80
      },
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d406390_9c18fcc1",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-09-23T20:39:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "853aa2a8_ea2b250d",
      "range": {
        "startLine": 93,
        "startChar": 79,
        "endLine": 93,
        "endChar": 80
      },
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b40bb2f_e67c6cdc",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 3
      },
      "lineNbr": 287,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-17T21:02:28Z",
      "side": 1,
      "message": "nit: maybe \"of type Buffer\" ? \"as\" makes it sound like a cast has occured\n\nor perhaps match the language in the spec and say\n\"validating BufferBindingLayout entries[%u]\"",
      "range": {
        "startLine": 287,
        "startChar": 61,
        "endLine": 287,
        "endChar": 72
      },
      "revId": "549bff576f28afcb8e807b10c70d062c1cc510f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}