{
  "comments": [
    {
      "key": {
        "uuid": "a36ea2c7_fdeb7a2f",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T00:25:26Z",
      "side": 1,
      "message": "A few concerns with using the device command serial:\n\nAt [1], we only Invalidate and re-Populate bind groups in mBindGroupLayoutMask. This is not sufficient because there could be other bind groups not in the mask that have an old serial. There can be multiple heaps bound per-submission so we either need to track and Invalidate ALL bind groups, or use a heap-level serial.\n\nFor example:\n - SetPiplineLayout that has LayoutA\n - SetBindGroup (0, A) -\u003e serial 1\n\n - SetPipeineLayout that has LayoutB and LayoutC\n - SetBindGroup (1, B), (2, C) -\u003e Reallocate -\u003e serial 1\n   BindGroup A is NOT invalidated, because it wasn\u0027t at index (1 or 2)\n\n - SetPiplineLayout that has LayoutA\n - SetBindGroup (0, A) -\u003e serial 1 -\u003e Skips Populate because the device-level serial is\n   is the same.\n\nIf I understand correctly, we went back to using a device-level serial instead of a heap-level serial because of:\n\n\u003e If the ringbuffer rotates, using the same bounded heap, a previously reclaimed allocation is wrongly considered \"still valid\" because the heap serial did not change and the allocation wouldn\u0027t get re-created. Ringbuffer assumes the client does not need to know if the allocation is freed - which is not the case for bindgroups would could be dirtied frequently.\n\nHowever, going back to a device-level serial prevents us from reusing populated descriptor allocations between multiple consecutive queue submissions.\n\nSuggestion: have a heap-level serial and increment it BOTH when the ringbuffer rotates, and when we reallocate.\n\nWhat do you think?",
      "range": {
        "startLine": 34,
        "startChar": 8,
        "endLine": 44,
        "endChar": 71
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb9251e2_b03b8af2",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 44,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-29T02:20:14Z",
      "side": 1,
      "message": "I wouldn\u0027t want to use the heap serial for tracking ringbuffer allocations. It would be unable to GC until the heap changes, which is efficiently reverting back to the linear allocator. Also, missing a means to notify the client when the ringbuffer rotates.\n\nCouldn\u0027t we detect both events by using separate serials? A device-level serial for the ringbuffer rotations and a heap serial for heap changes. The latter is incremented by the device and former upon `didReallocation \u003d true`. So long as both are checked, the situation as described cannot happen while re-use of the heaps still occurs across submissions.\n\nWDYT?",
      "parentUuid": "a36ea2c7_fdeb7a2f",
      "range": {
        "startLine": 34,
        "startChar": 8,
        "endLine": 44,
        "endChar": 71
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158560a2_c8264f43",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T05:25:54Z",
      "side": 1,
      "message": "Hm, I think we\u0027re getting terminology mixed up.\n\nWe still use the device pending/completed serial at [2] for tracking/deallocating ring buffer allocations. On Tick, we will mark descriptor space that is no longer in-flight on the GPU as free. But we use the heap serial for checking when a BindGroup needs to be repopulated.\n\nHowever, we can\u0027t use the device-level serial for ringbuffer rotations because there can be multiple heaps per pending serial. Thus, the serial that tracks rotations needs to be heap-level. My suggestion is to fold rotations and reallocations into the same serial.",
      "parentUuid": "cb9251e2_b03b8af2",
      "range": {
        "startLine": 34,
        "startChar": 8,
        "endLine": 44,
        "endChar": 71
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f27a52a7_31f90158",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 44,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-29T17:17:56Z",
      "side": 1,
      "message": "How would the heap serial get incremented when the ringbuffer rotates? This is not clear to me in order to use a single heap serial for both events.\n\n\u003e However, we can\u0027t use the device-level serial for ringbuffer rotations because there can be multiple heaps per pending serial.\n\nIf we check two serials upon Populate(), then that condition will be correctly detected via the heap serial that is only incremented on heap change.",
      "parentUuid": "158560a2_c8264f43",
      "range": {
        "startLine": 34,
        "startChar": 8,
        "endLine": 44,
        "endChar": 71
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44a3fd9f_f0d40985",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T17:59:57Z",
      "side": 1,
      "message": "You\u0027re right, one serial may not be easy to use. One or two serials, or a serial and an offset into the ring buffer, it doesn\u0027t matter to me. We just need to fix the problem of not Invalidating enough descriptors.",
      "parentUuid": "f27a52a7_31f90158",
      "range": {
        "startLine": 34,
        "startChar": 8,
        "endLine": 44,
        "endChar": 71
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee669ff1_997e4ec3",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T00:25:26Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 106,
        "startChar": 16,
        "endLine": 113,
        "endChar": 17
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "703993fa_c413b461",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 36
      },
      "lineNbr": 131,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T05:25:54Z",
      "side": 1,
      "message": "[2]",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 131,
        "endChar": 5
      },
      "revId": "4bd44c594b5741e1f8539589ccdcfec1ef30eb23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}