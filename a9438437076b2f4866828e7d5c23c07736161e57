{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "00d6ff2b_12c821eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-09T16:43:38Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "a9438437076b2f4866828e7d5c23c07736161e57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c795f88_209acef9",
        "filename": "src/dawn/native/CacheKeySerializer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-09T16:43:38Z",
      "side": 1,
      "message": "TBH, not sure if use of absl is necessary for this.\nWe technically only need a binary format, not a human-readable one. Use of absl means that everything necessarily must be stringified with delimiters.\n\nAlso the need for a constexpr format means more template complexity to produce the format string, when everything is actually always %u or %#s. (sorry - I know the templates took some time to figure out).\nWhich means we could otherwise just append to a byte vector instead of absl::FormatSink. But it\u0027s convenient for now and makes the testing simple. Don\u0027t want to block progress here too much. I think we can move forward with this approach, and we can always iterate on CacheKeySerializerImpl in the future.\n\nAlso, I don\u0027t know how much value there is in having CacheKeySerializerImpl be able to directly use \"{%u:%#s,%u:%#s}\" when in your following CL, each #%s itself contains additional nested absl::StrFormat(...). I\u0027m pretty sure the compiler won\u0027t be able to magically compute ahead of time how much total string space is necessary and is going to end up generating code that does appends to a std::string - especially since some of the types have variable-length arrays of data.\nIn other words, we could just call absl::StrFormat(\"#%s\", t) on all the inputs individually and append them with the index and delimiters manually. There\u0027s value when sink-\u003eAppend() takes in a constexpr expression, but that\u0027s hardly going to ever be the case for us.",
      "range": {
        "startLine": 27,
        "startChar": 7,
        "endLine": 31,
        "endChar": 69
      },
      "revId": "a9438437076b2f4866828e7d5c23c07736161e57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e52f98c_eeb7bb2a",
        "filename": "src/dawn/native/CacheKeySerializer.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-09T16:43:38Z",
      "side": 1,
      "message": "nit: probably `const auto\u0026`",
      "range": {
        "startLine": 91,
        "startChar": 33,
        "endLine": 91,
        "endChar": 37
      },
      "revId": "a9438437076b2f4866828e7d5c23c07736161e57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e137d5f_32ecaa88",
        "filename": "src/dawn/tests/unittests/native/CacheKeySerializerTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-09T16:43:38Z",
      "side": 1,
      "message": "Using has_alt_flag and %s vs #%s requires a weird specific knowledge that in Dawn, we\u0027re using #%s for cache key serialization, and %s for other string formatting.\n\nWhat about a solution where we define AbslFormatConvert for wrapper struct CacheKeyInput\u003cT\u003e to call something like CacheKeyFormat? I think it would be more clear, and we wouldn\u0027t have need for an \"Unexpected\" branch.\n\nhttps://godbolt.org/z/c3s7Wfo95",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "a9438437076b2f4866828e7d5c23c07736161e57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}