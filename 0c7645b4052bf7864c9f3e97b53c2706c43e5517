{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b105cc5_70eff80d",
        "filename": "src/dawn/native/PipelineCache.cpp",
        "patchSetId": 14
      },
      "lineNbr": 21,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-18T17:57:56Z",
      "side": 1,
      "message": "do we need to store mBlob at all? I think vulkan::PipelineCache::Initialize(DeviceBase* device) could take the device and key instead, and make the backend cache object there",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 35
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d56e5135_b5456877",
        "filename": "src/dawn/native/PipelineCache.cpp",
        "patchSetId": 14
      },
      "lineNbr": 21,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-21T03:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b105cc5_70eff80d",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 35
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34c6d913_af4293f1",
        "filename": "src/dawn/native/PipelineCache.cpp",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-18T17:57:56Z",
      "side": 1,
      "message": "if we need to keep mBlob around, `mBlob \u003d ...`?",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9d2f2e1_8625cdd3",
        "filename": "src/dawn/native/PipelineCache.cpp",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-21T03:11:24Z",
      "side": 1,
      "message": "We don\u0027t need it around since it can change throughout it\u0027s time. Also removed mBlob entirely.",
      "parentUuid": "34c6d913_af4293f1",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d837d338_e87fd644",
        "filename": "src/dawn/native/PipelineCache.h",
        "patchSetId": 14
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-18T17:57:56Z",
      "side": 1,
      "message": "so maybe it should just be RefCounted, not ObjectBase? - or can it just be unique_ptr ?",
      "range": {
        "startLine": 24,
        "startChar": 75,
        "endLine": 26,
        "endChar": 98
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a4bfe12_a0c789f4",
        "filename": "src/dawn/native/PipelineCache.h",
        "patchSetId": 14
      },
      "lineNbr": 26,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-21T03:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d837d338_e87fd644",
      "range": {
        "startLine": 24,
        "startChar": 75,
        "endLine": 26,
        "endChar": 98
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7fa633c_b3bb334d",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-18T17:57:56Z",
      "side": 1,
      "message": "what is `(void)0` for?",
      "range": {
        "startLine": 80,
        "startChar": 43,
        "endLine": 80,
        "endChar": 50
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e017b1d_4fedd0e0",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-21T03:11:24Z",
      "side": 1,
      "message": "Hmm maybe there\u0027s a better way to do this, but the try with cleanup overload is trying to return nothing here instead of the default error and the `(void)0` gets rid of the compiler errors. Idea is that cache initialization shouldn\u0027t really cause an error.",
      "parentUuid": "e7fa633c_b3bb334d",
      "range": {
        "startLine": 80,
        "startChar": 43,
        "endLine": 80,
        "endChar": 50
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cefc8b5_52e6f72a",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-22T03:03:42Z",
      "side": 1,
      "message": "mm.. that seems like quite a bit of magic. Do we really need it?\n\nA few thoughts: \n 1. It\u0027s super not clear that this can fail, and that\u0027s actually OK because GetHandle() will return VK_NULL_HANDLE which is valid to pass to vkCreate*Pipelines. However, I don\u0027t know if this is the best design - it depends on how D3D12 will work. But silently failing and having the behavior of failed-to-create-cache look just like no-cache-at-all might not be as ergonomic in D3D12 (or maybe it will)\n 2. We should just assign mHandle to VK_NULL_HANDLE before the call instead of doing it in the {} block. Vulkan spec requires it to not be set if the call fails.\n 3. We could do: device-\u003eConsumeError(CheckVkSuccess(..)) without the DAWN_TRY. no need for the void(0) thing.",
      "parentUuid": "6e017b1d_4fedd0e0",
      "range": {
        "startLine": 80,
        "startChar": 43,
        "endLine": 80,
        "endChar": 50
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e03c4ab4_278a8e4a",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-27T23:02:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1cefc8b5_52e6f72a",
      "range": {
        "startLine": 80,
        "startChar": 43,
        "endLine": 80,
        "endChar": 50
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f328f7_e1c9ff67",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-18T17:57:56Z",
      "side": 1,
      "message": "do we need deferred deletion? IIUC, the cache should only be used on the CPU for the duration of the call to vkCreateGraphicsPipelines or vkCreateComputePipelines",
      "range": {
        "startLine": 86,
        "startChar": 12,
        "endLine": 86,
        "endChar": 66
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5919563_cfcb732a",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-21T03:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3f328f7_e1c9ff67",
      "range": {
        "startLine": 86,
        "startChar": 12,
        "endLine": 86,
        "endChar": 66
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38576a6b_8f2c36a9",
        "filename": "src/dawn/native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 569,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-18T17:57:56Z",
      "side": 1,
      "message": "It looks like `GetOrCreate...` always creates, so we may as well call `PipelineCache::Create`\n\nAlso, I don\u0027t think currently it makes sense to have a method like GetOrCreate in the frontend since the cache both gets created and used in the backend; we don\u0027t need it in the frontend.\nI think the frontend bit makes sense in a future where we use the monolithic cache objects and it lives on the Device/Adapter, but right now, the cache\u0027s lifetime is scoped to this function call.\n\nTo make things simpler, I think the cache could even be just some simple stack-allocated object in this function which loads/stores to the blob cache",
      "range": {
        "startLine": 569,
        "startChar": 52,
        "endLine": 569,
        "endChar": 76
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac20e19c_5d92145f",
        "filename": "src/dawn/native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 569,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-21T03:11:24Z",
      "side": 1,
      "message": "Hmm thought about this some more, and while I agree that we don\u0027t NEED it in the frontend for this change, I think it would be best to have the skeleton here for it. This way if we parallelize work, we sort of lock in general flow early on so its easier to modify later.",
      "parentUuid": "38576a6b_8f2c36a9",
      "range": {
        "startLine": 569,
        "startChar": 52,
        "endLine": 569,
        "endChar": 76
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c829e9a_79936bfe",
        "filename": "src/dawn/native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 569,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-22T03:03:42Z",
      "side": 1,
      "message": "ok I still kinda disagree though because if we modify this for a monolithic cache, we won\u0027t be calling GetOrCreate with a pipeline. it\u0027ll just be something like device-\u003eGetPipelineCache().\n\nAnd, it\u0027s not clear to me right now that we will need to simultaneously support both monolithic and disjoint pipeline caches. But if we do, I don\u0027t think calling GetOrCreatePipelineCache(nullptr) would be the most intuitive way to get the monolithic cache. It\u0027s not clearly obvious from the interface that that is what it does.\n\nWould probably be preferable to instead so something like:\n```\nif (monolithic) {\n  cache \u003d device-\u003eGetOrCreatePipelineCache()\n} else {\n  cache \u003d PipelineCache::Create(device, pipeline-\u003eGetCacheKey());\n}\n```",
      "parentUuid": "ac20e19c_5d92145f",
      "range": {
        "startLine": 569,
        "startChar": 52,
        "endLine": 569,
        "endChar": 76
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5288b512_b983398d",
        "filename": "src/dawn/native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 569,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-27T23:02:31Z",
      "side": 1,
      "message": "Modified to take the cache key as we discussed offline.",
      "parentUuid": "7c829e9a_79936bfe",
      "range": {
        "startLine": 569,
        "startChar": 52,
        "endLine": 569,
        "endChar": 76
      },
      "revId": "0c7645b4052bf7864c9f3e97b53c2706c43e5517",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}