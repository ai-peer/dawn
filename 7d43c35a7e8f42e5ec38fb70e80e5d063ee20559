{
  "comments": [
    {
      "key": {
        "uuid": "032c006a_dd17b4e4",
        "filename": "src/dawn_native/ResourceHeap.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "This is weird, I would have assumed \"ResourceHeap\" represented a heap of resources, while here it is a resource in a heap. Maybe HeapResource?",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 47
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0e91d04_46291fdb",
        "filename": "src/dawn_native/ResourceHeap.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-07T20:01:21Z",
      "side": 1,
      "message": "ResourceHeap (which inherits ResourceHeapBase) actually does have a heap though. So what\u0027s confusing here is that \"resource heap\" sounds like it\u0027s just a heap, but in fact it\u0027s \"heap and maybe a resource\"? Under what conditions does it have a resource? (is it just when it\u0027s directly allocated?)",
      "parentUuid": "032c006a_dd17b4e4",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 47
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c615cb94_9490af74",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "I\u0027m not sure it makes sense to have offset here if mResourceHeap has both the heap and the resource itself.",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d4a95a7_648a0a70",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "This wouldn\u0027t be needed if the we put the heaps in mUsedComObjectRefs via ReferenceUntilUnused",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9b1a857_ea0a7009",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 357,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "nit: spell out simple types",
      "range": {
        "startLine": 357,
        "startChar": 8,
        "endLine": 357,
        "endChar": 13
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83762bc3_18ec5010",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 357,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-07T20:01:21Z",
      "side": 1,
      "message": "I think this is an iterator type which is not simple, in which case auto is fine.",
      "parentUuid": "b9b1a857_ea0a7009",
      "range": {
        "startLine": 357,
        "startChar": 8,
        "endLine": 357,
        "endChar": 13
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb42847_43335c9e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "Would it make sense for the choice of direct vs. placed to be done by the allocator itself? This way the device doesn\u0027t need to know about direct vs. sub-allocated.",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28160307_aed46d70",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 143,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "nit: this could probably be and std::array with some static asserts to make sure D3D12_HEAP_TYPE is packed correctly in it.",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "889a4e40_3b92e698",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "Can\u0027t this function and associated constants just be replaced by:\n\n  heapDesc.Properties.Type \u003d mHeapType?",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 59
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c9942dd_5640729d",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "What\u0027s different with MSAA resource heaps? (explain that they have different alignment constraints)",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "901a6f53_e21e0520",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "Can\u0027t the correct type be used for the function parameter?",
      "range": {
        "startLine": 79,
        "startChar": 25,
        "endLine": 79,
        "endChar": 67
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de070a7c_48b6d89d",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "note: I\u0027m not sure if we have the OOM error yet but that would be one place where we should use it.",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "811d9ed0_4ae25c6b",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-07T20:01:21Z",
      "side": 1,
      "message": "I don\u0027t think we do, but a TODO(crbug.com/dawn/153) would be good.",
      "parentUuid": "de070a7c_48b6d89d",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c377ad6_721bbc79",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "Maybe \"whose lifetime is the same as the allocation\u0027s lifetime\"?",
      "range": {
        "startLine": 115,
        "startChar": 77,
        "endLine": 116,
        "endChar": 22
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61570564_4bfaec1d",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "The pages linked don\u0027t seem to mention that the size must be a multiple of the alignment.",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 47
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69c2414e_318fe540",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-02T19:19:55Z",
      "side": 1,
      "message": "See remarks in getresourceallocationinfo (note: this change is specific to buffers).",
      "parentUuid": "61570564_4bfaec1d",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 47
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cd2a18d_6ef7574e",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-07T20:01:21Z",
      "side": 1,
      "message": "I don\u0027t see that it says the size is a multiple of alignment, but that the size of a buffer is always a multiple of 64K. It seems like there are 2 possible alignments for heaps, but buffer sizes are always 64K.",
      "parentUuid": "69c2414e_318fe540",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 47
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5068590_6c210cc1",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-07T20:01:21Z",
      "side": 1,
      "message": "nit: this is used 3 times, maybe have a variable for it",
      "range": {
        "startLine": 136,
        "startChar": 12,
        "endLine": 136,
        "endChar": 55
      },
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab3cabd2_e5106cd8",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "This could be replaced by ReferenceUntilUnused",
      "revId": "7d43c35a7e8f42e5ec38fb70e80e5d063ee20559",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}