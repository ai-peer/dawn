{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cddbb754_ca3e162f",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: prefer to name it something that communicates what it is, like: \"queryAvailabilities\"",
      "range": {
        "startLine": 422,
        "startChar": 37,
        "endLine": 422,
        "endChar": 44
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cc4071b_afb3501d",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 424,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: ASSERT non-null",
      "range": {
        "startLine": 424,
        "startChar": 34,
        "endLine": 424,
        "endChar": 42
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "682d71df_0690177f",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 431,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "typo: \"timestampWrites\" ?",
      "range": {
        "startLine": 431,
        "startChar": 61,
        "endLine": 431,
        "endChar": 79
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "899d92fd_544ca46a",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 466,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "typo: \"timestampWrites\" ?",
      "range": {
        "startLine": 466,
        "startChar": 61,
        "endLine": 466,
        "endChar": 79
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb47a521_e7686b57",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "this doesn\u0027t need to be Ref\u003c\u003e, it can be a raw QuerySetBase*.\n\nThe ref will be added when we push it back into timestampWritesAtBeginning/End.\n\nAlso, ASSERT it is non-null",
      "range": {
        "startLine": 667,
        "startChar": 20,
        "endLine": 667,
        "endChar": 37
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d71795_1fbc9eeb",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: std::move",
      "range": {
        "startLine": 684,
        "startChar": 39,
        "endLine": 684,
        "endChar": 65
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34425fc9_226ca253",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 697,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: std::move",
      "range": {
        "startLine": 697,
        "startChar": 61,
        "endLine": 697,
        "endChar": 81
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f468037a_9fed89a4",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 736,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "this doesn\u0027t need to be Ref\u003c\u003e, it can be a raw QuerySetBase*.\n\nThe ref will be added when we push it back into timestampWritesAtBeginning/End.\n\nAlso, ASSERT it is non-null",
      "range": {
        "startLine": 736,
        "startChar": 20,
        "endLine": 736,
        "endChar": 38
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc2450d5_b46f3c7b",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 844,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: std::move",
      "range": {
        "startLine": 844,
        "startChar": 39,
        "endLine": 844,
        "endChar": 65
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71bbbf74_948c7e5f",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 853,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: std::move",
      "range": {
        "startLine": 853,
        "startChar": 44,
        "endLine": 853,
        "endChar": 64
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0266e31a_681ac6be",
        "filename": "src/dawn/native/Commands.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "I\u0027m curious whether we need this in the begin pass command. Not sure what Part 2 of the implementation looks like.\n\n\nI\u0027m thinking though instead of adding it here, we can encode WriteTimestamp immediately after creating the pass.\n\n  ComputePassEncoder* passEncoder \u003d new ComputePassEncoder(\n                device, descriptor, this, \u0026mEncodingContext, timestampWritesAtEnd);\n\n  for (const auto\u0026 timestampWrite : timestampWritesAtBegin) {\n    passEncoder-\u003eWriteTimestamp(...);\n  }",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 52
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "761c6b11_511b79be",
        "filename": "src/dawn/native/Commands.h",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "similarly, not sure we need these inside the EndCmd\n\ncould it look like:\n\n  void ComputePassEncoder::APIEnd() {\n      for (const auto\u0026 timestampWrite : timestampWritesAtEnd) {\n        this-\u003eWriteTimestamp(...);\n     } \n     allocator-\u003eAllocate\u003cEndComputePassCmd\u003e(Command::EndComputePass); \n  }\n\n?",
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9360612a_3fc63268",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: construct by value instead of const\u0026 and use std::move",
      "range": {
        "startLine": 119,
        "startChar": 42,
        "endLine": 120,
        "endChar": 54
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6471c95f_4e7a982a",
        "filename": "src/dawn/native/ComputePassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "std::move",
      "range": {
        "startLine": 159,
        "startChar": 43,
        "endLine": 159,
        "endChar": 64
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "016bed5b_1ca1cc97",
        "filename": "src/dawn/native/RenderPassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "nit: construct by value instead of const\u0026 and use std::move",
      "range": {
        "startLine": 72,
        "startChar": 10,
        "endLine": 72,
        "endChar": 53
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c50733_a9e8a1d9",
        "filename": "src/dawn/native/RenderPassEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-01T18:33:46Z",
      "side": 1,
      "message": "std::move",
      "range": {
        "startLine": 129,
        "startChar": 43,
        "endLine": 129,
        "endChar": 64
      },
      "revId": "a2fbf0c6601868c287ff355102992b5e045d64d5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}