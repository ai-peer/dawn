{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f303a2c_d05db4ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-29T13:52:54Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37ccc82e_74cbb334",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-29T13:52:54Z",
      "side": 1,
      "message": "It seems that we\u0027re only using -\u003eInsert so it may be slightly overkill to inherit from std::vector. I think inheriting from the STL is generally frowned upon because you can\u0027t add a virtual destructor (but it\u0027s ok if you are careful to not deallocate the object through a pointer to std::vector).",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "492babb1_a6fecb34",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-03-29T20:50:20Z",
      "side": 1,
      "message": "I am using the ctor with initializer lists a bit in the tests, and would probably want some of the basic utils implemented for later on (i.e. begin/end/size/etc).\n\nIt\u0027s possible to just have the vector as a member and redirect everything if we have a strong preference, but otherwise the cache key is supposed to be relatively simple without any crazy dtor stuff so would be nice to keep it like this.",
      "parentUuid": "37ccc82e_74cbb334",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88ba22b6_1ec8d830",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-29T13:52:54Z",
      "side": 1,
      "message": "nit: we usually avoid C-style casts, instead we use static_cast and friends.\n\nOr constructor cast size_t(foo)",
      "range": {
        "startLine": 59,
        "startChar": 19,
        "endLine": 59,
        "endChar": 27
      },
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f4b6580_35083c50",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-03-29T20:50:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88ba22b6_1ec8d830",
      "range": {
        "startLine": 59,
        "startChar": 19,
        "endLine": 59,
        "endChar": 27
      },
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f406dc_e782b33d",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-29T13:52:54Z",
      "side": 1,
      "message": "ditto",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "572afce8_8f68e89e",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-03-29T20:50:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3f406dc_e782b33d",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6712191_706351be",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-29T13:52:54Z",
      "side": 1,
      "message": "nit: Does char[N] always mean that we have the null terminator inside the array? Since we\u0027re doing binary data, we could just include it, in case it\u0027s a char[] without null terminator.",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8efaa0d2_5ade18aa",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-03-29T20:50:20Z",
      "side": 1,
      "message": "This was mainly intended for string literals (which would have the null terminator at the end), so that they match the serialization for a string. I don\u0027t foresee us using this overload for actual data since that would imply the data was (sorta) available at build time. Instead, the overload for */size would make more sense, and in that case we don\u0027t drop anything.",
      "parentUuid": "b6712191_706351be",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4863b83_e7dec24a",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-03-29T22:11:48Z",
      "side": 1,
      "message": "seems like maybe it\u0027s not worth doing anything special to drop the null terminator though? In the tests, you can also push back a `\\0` for the comparison, and for std::string, push back chars one-by-one to avoid inserting a `\\0`.",
      "parentUuid": "8efaa0d2_5ade18aa",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9d2c80b_3d186fd2",
        "filename": "src/dawn/native/CacheKey.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-03-30T23:37:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4863b83_e7dec24a",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81165175_ba48f2b1",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-29T13:52:54Z",
      "side": 1,
      "message": "ditto casts.",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3477240_98eddab4",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-03-29T20:50:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81165175_ba48f2b1",
      "revId": "90b8fe93792c5eef5673aabfe770b1be043ff966",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}