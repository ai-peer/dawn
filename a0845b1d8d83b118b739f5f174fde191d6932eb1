{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0ca2a49d_a8b789c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "LGTM, this is much better and makes CopyTextureForBrowser basically complete up to additional color spaces.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d30207_8a2ed744",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 881,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: usually \"invalid\" is called \"undefined\" and has the value 0, so that 0 init is the same as the empty JS dict.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae383899_b6804357",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 888,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: \"src color space\", and \"dst color space\"\n\nBut also it really seems like it could be in the main options. We can add the transfer matrices in the main options with an extension struct too.",
      "range": {
        "startLine": 888,
        "startChar": 22,
        "endLine": 888,
        "endChar": 35
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82fb3a3e_2480a74c",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 898,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Maybe add \"tags\": [\"deprecated\"] to alpha op since it is deprecated.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0f3af10_f93688e0",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Can be in a follow-up but the names don\u0027t all follow the same convention: conversionMatrix or conversion_matrix?\n\nAlso the u_ prefix is unnecessary since the structure is nested in a \"uniforms\" variable.",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97ae724_b2f7cf78",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: bool?",
      "range": {
        "startLine": 70,
        "startChar": 78,
        "endLine": 70,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "648f1072_6f8d2375",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: select() is not more efficient, nor more readable than just doing (if value \u003c ....) Can we just have a condition and wrap the computations of gamma_part and linear_part in there?\n\nDitto for colorSpaceIsExtended above.",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef515179_c6a6179d",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: name these constants?",
      "range": {
        "startLine": 146,
        "startChar": 49,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7f8ae26_443a24dd",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "To make the code a bit less fragile, can we have the enum the ColorSpaceInfo is for encoded in ColorSpaceInfo so we can assert that casting the value to an integer is the correct way to index the array?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8119de98_6ee798da",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit mathematics",
      "range": {
        "startLine": 340,
        "startChar": 15,
        "endLine": 340,
        "endChar": 25
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0460898e_f873f594",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: matrices",
      "range": {
        "startLine": 371,
        "startChar": 19,
        "endLine": 371,
        "endChar": 26
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b53012fc_e8a4e183",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 545,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: this and the same for the dst Tetxture can be put inside the !skipColorSpaceConversion block below.\n\nBut also why is it skipped if we don\u0027t do a color space conversion?",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 545,
        "endChar": 13
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64f53f4_4fa3725f",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 555,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: ditto, name these constants?",
      "range": {
        "startLine": 555,
        "startChar": 29,
        "endLine": 555,
        "endChar": 33
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35f11ba8_d5fe8f42",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 558,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Is the cast really needed? I thought C++ conversion of booleans to integers was well defined to give 0 and 1.",
      "range": {
        "startLine": 558,
        "startChar": 20,
        "endLine": 558,
        "endChar": 67
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3258be83_e915b094",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 575,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "ditto, same as src",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bbec4ff_099714c1",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Can we have a device-\u003eEmitDerprecationWarning if these are used?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4cbe546_b5160f71",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: this seems to have moved between patchsets and should be around EXPECT_TEXTURE_EQ",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07e37ea1_34743614",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 663,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "I\u0027m not sure this is the best shape to make these functions extensible to more color spaces, but we can see later.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f3beb6_de61d7ac",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: Color",
      "range": {
        "startLine": 258,
        "startChar": 50,
        "endLine": 258,
        "endChar": 63
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e9970f_1fa8f009",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 286,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "What about Display P3 to SRGB?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}