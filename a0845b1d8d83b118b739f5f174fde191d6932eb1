{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0ca2a49d_a8b789c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "LGTM, this is much better and makes CopyTextureForBrowser basically complete up to additional color spaces.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5157132a_be673dc4",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 872,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "nit: \"sep*e*rate\" -\u003e \"sep*a*rate\".\n\nThat said though, I don\u0027t think this name is very clear. I prefer just \"unpremultiplied\".",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c044199_aad6025b",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 872,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5157132a_be673dc4",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5fb0961_4f7ab59b",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "Since we now have the generalized conversion code in the shader (nice!) does Dawn really need to understand sRGB and display p3? Could we just have Chromium pass the gamma parameters and conversion matrix instead? (Or maybe the conversion matrix and \"is sRGB encoded\" for src/dst)\n\nThis could simplify a few things:\n\n- less or no work would be required in Dawn for new src color space support\n- we wouldn\u0027t need ValidateCopyTextureColorSpaceConversion\n- we would move all of the ColorSpaceTable data to Blink where it\u0027s probably already known? (Maybe this isn\u0027t true, I don\u0027t know if Chromium has it in Blink or in the GPU process. Maybe we would need to make this call from the GPU process which would be harder.)\n\nThough it also makes the stepsMask more complicated to compute because we would need to compare the actual parameters passed in. Also we would still end up needing some ColorSpaceTable data in the tests.\n\n(We should discuss this further before you make a change. Probably shouldn\u0027t do it in this CL but we could do it before integrating into Chromium if we want to avoid conflicts.)",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "071a10b7_6f26b855",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T00:45:46Z",
      "side": 1,
      "message": "\u003e we would move all of the ColorSpaceTable data to Blink where it\u0027s probably already known?\nNo, chromium doesn\u0027t have it. Chromium calculate all of the matrices and transferFn parameters in runtime(Chromium only have the basic color space metas, e.g. rx, ry, gx, gy, bx, by and white point). So I think we still need to have the similar table in blink.\n\nThe only concern here is the data it transfers between client and server. With ID, we have less bytes to transfer and the serialization/deserialization doesn\u0027t touch the value we need in conversion.\nBTW, Chromium has a comments in the ColorSpace IDs part but I\u0027m not quite sure I fully understand it. It says, \n\"// Used to represet a color space for the purpose of color conversion.\n// This is designed to be safe and compact enough to send over IPC\n// between any processes.\n\"\n(https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_space.h;l\u003d59)",
      "parentUuid": "c5fb0961_4f7ab59b",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e8ab818_8f00cb04",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T02:04:06Z",
      "side": 1,
      "message": "I don\u0027t really know how those work either or how they\u0027re used. (The main thing I don\u0027t know is whether or how Chromium would get from a user-provided image file to one of these color spaces. Maybe it would always use the \"CUSTOM\" modes.)\n\nThe definitions for srgb and display-p3 are interesting, though (CreateSRGB and CreateDisplayP3D65).",
      "parentUuid": "071a10b7_6f26b855",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "804c7bff_802ba2d2",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T02:36:40Z",
      "side": 1,
      "message": "\u003e The main thing I don\u0027t know is whether or how Chromium would get from a user-provided image file to one of these color spaces. Maybe it would always use the \"CUSTOM\" modes.\n\nI think they have a ICCProfile compare function. https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/third_party/skcms/skcms.cc;l\u003d1567;drc\u003d94c6fda0960a28d2f7083624c6643ae89cb8d57f\nand do things like this\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/src/core/SkColorSpace.cpp;l\u003d196;drc\u003d94c6fda0960a28d2f7083624c6643ae89cb8d57f;bpv\u003d0;bpt\u003d1",
      "parentUuid": "4e8ab818_8f00cb04",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "296e727a_07409065",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T03:02:09Z",
      "side": 1,
      "message": "Nice find!\n\nNow thinking about it, it makes sense Chromium would be willing to do this in order to prevent the shader from being regenerated and recompiled. But since we don\u0027t regenerate the shader, I don\u0027t think it\u0027s super necessary for Dawn. I\u0027m not so worried about copying over a few extra floats in the wire command.\n\nIt\u0027s interesting that the code you linked only detects when a profile \u003d\u003d sRGB (but not Display-P3 or Adobe RGB or other common profiles). Maybe those are somewhere else.\n\nI also don\u0027t know how common it is for user images to have ICC profiles that don\u0027t match one of the common profiles. But if Dawn supports only a few (like sRGB and Display-P3) then there will certainly be plenty of others that show up, at least Adobe RGB, Display P3, and ProPhoto like on https://webkit.org/blog-files/color-gamut/\n\nOTOH the spec dictates a small possible list of _destination_ color spaces, so using presets there makes sense.\n\nWhat I\u0027m currently envisioning would have CopyTextureForBrowser pass the following:\n\n- srcAlphaMode: enum { premul, unpremul }\n- srcTransferFunctionParameters: f32 A,B,C,E,F,G,epsilon\n- 3x3 f32 conversion matrix\n- dstTransferFunction: enum { linear, srgb } // doesn\u0027t make sense to specify the whole color space because it would make it non-orthogonal to the conversion matrix\n- dstAlphaMode: enum { premul, unpremul }",
      "parentUuid": "804c7bff_802ba2d2",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ba38dc7_ae1d8d85",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T03:31:19Z",
      "side": 1,
      "message": "(Take CopyExternalImageToTexture() implementation in blink side in consideration)\nThe only place we could get the color space info from ExternalImage is PaintImage generated from StaticBitmapImage. It has methods to return pointer to SkColorSpace object. But SkColorSpace doesn\u0027t have any methods that could return transferFn params or conversion matrix. (https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/include/core/SkColorSpace.h;drc\u003d94c6fda0960a28d2f7083624c6643ae89cb8d57f;l\u003d104)\nIt provides a function to compare whether to SkColorSpace are the same.\n\nIf we don\u0027t add methods in SkColorSpace to return those meta infos, the logic should be:\nin gpu_queue.cc or a new gpu_xxx.h file, we hold the conversion matrix and transferFn for known supported color space. Create SkColorSpace with them and compare it with the input. Then transfer the matrix and transferFn params to Dawn.\n\nBut we don\u0027t have abilities to support CUSTOM color space, I think. So maybe we should expand the SkColorSpace API?",
      "parentUuid": "296e727a_07409065",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ac263ce_2724594e",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T04:11:43Z",
      "side": 1,
      "message": "(More thoughts)\nSo, finally, we need to get something like skcms_ICCProfile(https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/include/third_party/skcms/skcms.h;l\u003d156;drc\u003d94c6fda0960a28d2f7083624c6643ae89cb8d57f) in blink side for input ExternalImage.\nAnd for dst color space, we could get similar infos too.\nSo we need to do precompute in blink side for :\n1. For dst color space, get the inverse matrix of toXYZD50.\n2. Precompute the conversion matrix by dst.fromXYZD50 * src.toXYZD50.\n3. Compute the encoding transferFn from the known decoding transferFn\n\n\u003e dstTransferFunction: enum { linear, srgb } // doesn\u0027t make sense to specify the whole color space because it would make it non-orthogonal to the conversion matrix\nWhy this doesn\u0027t transfer all parameters but with these enums? I assume that this needs Dawn to keep some parameters.\n\nAnd we could transfer final results to CopyTextureForBrowser with:\n- needColorSpaceConversion: bool // fast path to skip conversions.\n- srcAlphaMode: enum { premul, unpremul }\n- srcTransferFunctionParameters: f32 A,B,C,E,F,G,epsilon\n- 3x3 f32 conversion matrix\n- dstTransferFunctionParameters: f32 A,B,C,E,F,G,epsilon\n- dstAlphaMode: enum { premul, unpremul }\n\nWDYT?",
      "parentUuid": "9ba38dc7_ae1d8d85",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "374f8454_66e90580",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 880,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-14T04:42:42Z",
      "side": 1,
      "message": "Because destination is specified by the WebGPU spec and it can only be \"srgb\" right now (and later \"srgb-linear\" and \"display-p3\" probably). We could also just pass all of the parameters but it\u0027s not strictly necessary - in fact we could even hardcode the srgb numbers into the shader for the destination if we wanted to (I don\u0027t think we need to).\n\nThe parameters sound good to me. needColorSpaceConversion could possibly be determined by Dawn but maybe it\u0027s better to have it explicit.",
      "parentUuid": "8ac263ce_2724594e",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d30207_8a2ed744",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 881,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: usually \"invalid\" is called \"undefined\" and has the value 0, so that 0 init is the same as the empty JS dict.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ae42f18_1c7f9184",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 881,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Thanks for telling this! We don\u0027t need these enums any more.",
      "parentUuid": "f3d30207_8a2ed744",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae383899_b6804357",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 888,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: \"src color space\", and \"dst color space\"\n\nBut also it really seems like it could be in the main options. We can add the transfer matrices in the main options with an extension struct too.",
      "range": {
        "startLine": 888,
        "startChar": 22,
        "endLine": 888,
        "endChar": 35
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0ee3ded_bc7d47e7",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 888,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "We don\u0027t have color space conversion struct any more",
      "parentUuid": "ae383899_b6804357",
      "range": {
        "startLine": 888,
        "startChar": 22,
        "endLine": 888,
        "endChar": 35
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82fb3a3e_2480a74c",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 898,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Maybe add \"tags\": [\"deprecated\"] to alpha op since it is deprecated.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff25f76e_e94c1cda",
        "filename": "dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 898,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82fb3a3e_2480a74c",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0f3af10_f93688e0",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Can be in a follow-up but the names don\u0027t all follow the same convention: conversionMatrix or conversion_matrix?\n\nAlso the u_ prefix is unnecessary since the structure is nested in a \"uniforms\" variable.",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e4bc8ac_23fcd57b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0f3af10_f93688e0",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c12217f_475d5f41",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "Instead of vec4+vec3 could this just be a struct with 7 f32s and 1 u32 (which can then be properly named as A, B, G, E, epsilon, C, F, colorSpaceExtended)?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "434e5af0_6be94ff9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c12217f_475d5f41",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97ae724_b2f7cf78",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: bool?",
      "range": {
        "startLine": 70,
        "startChar": 78,
        "endLine": 70,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db92a3f7_1892b8aa",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f97ae724_b2f7cf78",
      "range": {
        "startLine": 70,
        "startChar": 78,
        "endLine": 70,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "829e2471_87befa15",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "I don\u0027t quite understand why you need the colorSpaceIsExtended option at all. (Maybe just because I\u0027ve been thinking only about srgb and display-p3.)\n\nIIUC either colorSpaceIsExtended and you need to handle negative numbers, or it\u0027s not and you can pretend they don\u0027t exist. Here, I think the select() calls have no effect for this reason.\n\nAlso, they don\u0027t save any performance because sign() and abs() occur unconditionally. sign() and abs() are very cheap so I think you should just use them without the select() which will also be cheaper.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f17c8444_21f9909f",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T00:59:20Z",
      "side": 1,
      "message": "Oh, I see. There is some difference between chromium implementation and css spec here.\nIt seems that in css color space spec, we need to handle sign always(https://www.w3.org/TR/css-color-4/#color-conversion-code). But in chromium code to generate decoding/encoding result, it has a extended_ attributes to decide whether we needs sign() and abs()(https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_transform.cc;l\u003d328;drc\u003d94c6fda0960a28d2f7083624c6643ae89cb8d57f;bpv\u003d1;bpt\u003d1).\n\nAnd for display-P3, it generates the code that doesn\u0027t consider the sign but for extended-srgb, it uses it.\n\nI think we could align with css color space spec here.",
      "parentUuid": "829e2471_87befa15",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07243138_2e01df13",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T02:04:06Z",
      "side": 1,
      "message": "That change in the CSS spec is quite new, so that makes sense. And yes, we explicitly want to implement the latest CSS definitions.\n\nChromium is probably just omitting generation of sign()/abs() if it\u0027s not needed, for some performance. I don\u0027t suspect it\u0027s ever harmful to include them - it only makes a difference for negative values and I don\u0027t even know whether we can get negative display-p3 values into the conversion code in Chromium. (It seems very unlikely to me that anything is expecting negative values to have any other behavior anyway.)",
      "parentUuid": "f17c8444_21f9909f",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d1f9240_715065be",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07243138_2e01df13",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "648f1072_6f8d2375",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: select() is not more efficient, nor more readable than just doing (if value \u003c ....) Can we just have a condition and wrap the computations of gamma_part and linear_part in there?\n\nDitto for colorSpaceIsExtended above.",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b70048cf_3c12a8d2",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "I suggested this because it seemed better to do one vectorized select() than three separate branches or branching function calls. Maybe it\u0027s not helpful though, especially now that there\u0027s more multiplication inside each part?",
      "parentUuid": "648f1072_6f8d2375",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1715c033_a2d57f95",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T14:40:39Z",
      "side": 1,
      "message": "Yeah I think branches are marginally better now.",
      "parentUuid": "b70048cf_3c12a8d2",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef39cef_aa18fcf1",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-09T07:32:44Z",
      "side": 1,
      "message": "Double check here:\nIf we don\u0027t use select, I think gamma_conversion() could only accept a single scalar but not vectors. Because color.rgb might have the cases that color.r and color.g greater than epsilon but color.b smaller than epsilon. I don\u0027t think vectorize if could handle this.",
      "parentUuid": "1715c033_a2d57f95",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf731356_61eba51b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-10T06:47:24Z",
      "side": 1,
      "message": "I think it is Done.",
      "parentUuid": "fef39cef_aa18fcf1",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a678755_cc1f87b4",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-14T04:42:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cf731356_61eba51b",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 81
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e37027f_de6b7971",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "nit: Since this changes value throughout the function and isn\u0027t always the \"src color\", perhaps rename to just \"color\"",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "947f7747_a67add45",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e37027f_de6b7971",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef515179_c6a6179d",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: name these constants?",
      "range": {
        "startLine": 146,
        "startChar": 49,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a6aaf7b_0fd9fa44",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef515179_c6a6179d",
      "range": {
        "startLine": 146,
        "startChar": 49,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7f8ae26_443a24dd",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "To make the code a bit less fragile, can we have the enum the ColorSpaceInfo is for encoded in ColorSpaceInfo so we can assert that casting the value to an integer is the correct way to index the array?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a911ec6_472fc629",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Strengthen them and move them to the test file",
      "parentUuid": "e7f8ae26_443a24dd",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8119de98_6ee798da",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit mathematics",
      "range": {
        "startLine": 340,
        "startChar": 15,
        "endLine": 340,
        "endChar": 25
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a661242f_85e8afc9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T00:45:46Z",
      "side": 1,
      "message": "Really sry for these mis-spelling issues(in long time). I\u0027ve installed a vscode plug in named Code Spell Checker(https://marketplace.visualstudio.com/items?itemName\u003dstreetsidesoftware.code-spell-checker) to see whether it helps.",
      "parentUuid": "8119de98_6ee798da",
      "range": {
        "startLine": 340,
        "startChar": 15,
        "endLine": 340,
        "endChar": 25
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e4686d3_4faec0a0",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 340,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a661242f_85e8afc9",
      "range": {
        "startLine": 340,
        "startChar": 15,
        "endLine": 340,
        "endChar": 25
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0460898e_f873f594",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: matrices",
      "range": {
        "startLine": 371,
        "startChar": 19,
        "endLine": 371,
        "endChar": 26
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b6dc368_cf8f249c",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 371,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0460898e_f873f594",
      "range": {
        "startLine": 371,
        "startChar": 19,
        "endLine": 371,
        "endChar": 26
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ead6ba05_93269acb",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 524,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "Nice that you found these docs that describe exactly what we\u0027re doing here!",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8b4daf6_37568481",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 525,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "\"premultiplied; alpha\"",
      "range": {
        "startLine": 525,
        "startChar": 50,
        "endLine": 525,
        "endChar": 69
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58294e24_d7548f22",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 525,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8b4daf6_37568481",
      "range": {
        "startLine": 525,
        "startChar": 50,
        "endLine": 525,
        "endChar": 69
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cfc93bd_a33f582c",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 538,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "nit: I think this would be clearer inverted, like \"needsColorSpaceConversion\".",
      "range": {
        "startLine": 538,
        "startChar": 13,
        "endLine": 538,
        "endChar": 37
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6ee4600_163c7e73",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 538,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cfc93bd_a33f582c",
      "range": {
        "startLine": 538,
        "startChar": 13,
        "endLine": 538,
        "endChar": 37
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa788d23_b1b4521b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 544,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "nit: Unpremultiply\n\n(But these comments can be removed when you name the 0x constants anyway.)",
      "range": {
        "startLine": 544,
        "startChar": 39,
        "endLine": 544,
        "endChar": 52
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "519184db_6d95312d",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 544,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa788d23_b1b4521b",
      "range": {
        "startLine": 544,
        "startChar": 39,
        "endLine": 544,
        "endChar": 52
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b53012fc_e8a4e183",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 545,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: this and the same for the dst Tetxture can be put inside the !skipColorSpaceConversion block below.\n\nBut also why is it skipped if we don\u0027t do a color space conversion?",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 545,
        "endChar": 13
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a26caa02_da10b267",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 545,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "We have to handle the alpha state if there is a color conversion OR srcTextureAlphaState !\u003d dstTextureAlphaState. 0x01 means \"unpremultiply the source\" so we only need to do it if the source is premultiplied, AND there is either a conversion or the dstTextureAlphaState is different.\n\nLogic looks correct to me. Could maybe be slightly clearer if written as:\n\n        if (options-\u003esrcTextureAlphaState \u003d\u003d wgpu::AlphaState::Premultiplied) {\n            if (needsColorSpaceConversion ||\n                options-\u003esrcTextureAlphaState !\u003d options-\u003edstTextureAlphaState) {",
      "parentUuid": "b53012fc_e8a4e183",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 545,
        "endChar": 13
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e67ed963_702e3f45",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 545,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a26caa02_da10b267",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 545,
        "endChar": 13
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9b575f2_d88b1f58",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 545,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T14:40:39Z",
      "side": 1,
      "message": "I think it was only done for the dst, not the src.",
      "parentUuid": "e67ed963_702e3f45",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 545,
        "endChar": 13
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85b8f6b8_b9d383f8",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 545,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-09T08:11:55Z",
      "side": 1,
      "message": "I misread, src is ok too.",
      "parentUuid": "e9b575f2_d88b1f58",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 545,
        "endChar": 13
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64f53f4_4fa3725f",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 555,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: ditto, name these constants?",
      "range": {
        "startLine": 555,
        "startChar": 29,
        "endLine": 555,
        "endChar": 33
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c4d7ef0_febf034e",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 555,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a64f53f4_4fa3725f",
      "range": {
        "startLine": 555,
        "startChar": 29,
        "endLine": 555,
        "endChar": 33
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35f11ba8_d5fe8f42",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 558,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Is the cast really needed? I thought C++ conversion of booleans to integers was well defined to give 0 and 1.",
      "range": {
        "startLine": 558,
        "startChar": 20,
        "endLine": 558,
        "endChar": 67
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e6c0e43_825eae4b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 558,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "I think you\u0027re right. And it seems I\u0027m too careful here to add the static_cast",
      "parentUuid": "35f11ba8_d5fe8f42",
      "range": {
        "startLine": 558,
        "startChar": 20,
        "endLine": 558,
        "endChar": 67
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3258be83_e915b094",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 575,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "ditto, same as src",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9ea0112_1884a14c",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 575,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "ditto, looks OK to me.",
      "parentUuid": "3258be83_e915b094",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b794651a_d4ba1ecf",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 575,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9ea0112_1884a14c",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bbec4ff_099714c1",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "Can we have a device-\u003eEmitDerprecationWarning if these are used?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44f2c43a_111e78b9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Sry, I don\u0027t find the EmitDeprecationWarning in device. Instead, I\u0027m using dawn::WarningLog for this. Is it Ok?",
      "parentUuid": "4bbec4ff_099714c1",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97b69088_083d6492",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T14:40:39Z",
      "side": 1,
      "message": "https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/Device.h;drc\u003d2494c9be8f06f43675bbd2482d127e7630468fa7;l\u003d322",
      "parentUuid": "44f2c43a_111e78b9",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b08cd66_a52e39bc",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-09T07:32:44Z",
      "side": 1,
      "message": "Sry, I don\u0027t noticed the typo.... Thanks for pointing to the function.",
      "parentUuid": "97b69088_083d6492",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "823022d0_a1a6ca8a",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-10T06:47:24Z",
      "side": 1,
      "message": "It seems using device-\u003eEmitDpreciationWarning causes errors in current AlphaOp end2end cases. It yields: Expected equality of these values:\n  mLastWarningCount\n    Which is: 0\n  dawn_native::GetDeprecationWarningCountForTesting(device.Get())\n    Which is: 1\n    \nSince it is used only in blink implementation part, this deprecation shouldn\u0027t affect many client users.\nWould you mind me to use a follow up CL to remove all the AlphaOp?",
      "parentUuid": "2b08cd66_a52e39bc",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44bfd03a_f77b7a21",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-10T09:36:34Z",
      "side": 1,
      "message": "You can wrap the calls with EXPECT_DEPRECATION_WARNING to fix this error. This makes it clear when tests are using deprecated behavior.",
      "parentUuid": "823022d0_a1a6ca8a",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "155a76b8_7ea6586e",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-13T01:33:49Z",
      "side": 1,
      "message": "It cannot fix the error. The reason is that we don\u0027t define a invalid alphaOp and AlphaOp::DontChange is the default one. This makes options-\u003ealphaOp \u003d\u003d wgpu::AlphaOp::DontChange won\u0027t trigger the deprecation warning. And EXPECT_DEPRECATION_WARNING always expect warning + 1.\n\nBut I don\u0027t think we need to worry about this because I\u0027ll handle the alphaOp issue immediately after this CL landed.",
      "parentUuid": "44bfd03a_f77b7a21",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a782699_cf702b7c",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 582,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-14T04:42:42Z",
      "side": 1,
      "message": "In that case I agree it\u0027s OK to not have the deprecation warning since it\u0027s only used by Blink.",
      "parentUuid": "155a76b8_7ea6586e",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10fb13c7_d931a744",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 5
      },
      "lineNbr": 588,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "Nice simple handling of the old alphaOp modes!",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4cbe546_b5160f71",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: this seems to have moved between patchsets and should be around EXPECT_TEXTURE_EQ",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf7160d7_99956197",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4cbe546_b5160f71",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07e37ea1_34743614",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 663,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "I\u0027m not sure this is the best shape to make these functions extensible to more color spaces, but we can see later.",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de3fa681_edfc6641",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 663,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T00:45:46Z",
      "side": 1,
      "message": "No, it is not, so I have a TODO in line 637. Plan to calculate the result in CPU or Compute shader with the basic color space info (which means we\u0027ll calculate the conversion matrix, transferFn). But it is a big change, so I plan to have it in a following up CL.",
      "parentUuid": "07e37ea1_34743614",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "429a6dbb_bf2de096",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 822,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "Apple\u0027s what?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b26b558_28ea2d4d",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 822,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T00:45:46Z",
      "side": 1,
      "message": "Oops...",
      "parentUuid": "429a6dbb_bf2de096",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c605c90b_ff4cfc32",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 822,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b26b558_28ea2d4d",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f3beb6_de61d7ac",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "nit: Color",
      "range": {
        "startLine": 258,
        "startChar": 50,
        "endLine": 258,
        "endChar": 63
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c188737_37e32847",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8f3beb6_de61d7ac",
      "range": {
        "startLine": 258,
        "startChar": 50,
        "endLine": 258,
        "endChar": 63
      },
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e9970f_1fa8f009",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 286,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T13:58:34Z",
      "side": 1,
      "message": "What about Display P3 to SRGB?",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73529b04_171ab727",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 286,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-12-08T00:03:47Z",
      "side": 1,
      "message": "It\u0027s in the block above this one. Maybe you meant SRGB to DisplayP3?",
      "parentUuid": "22e9970f_1fa8f009",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5c3691c_289ae618",
        "filename": "src/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 286,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-12-08T08:42:38Z",
      "side": 1,
      "message": "No need for these enums",
      "parentUuid": "73529b04_171ab727",
      "revId": "a0845b1d8d83b118b739f5f174fde191d6932eb1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}