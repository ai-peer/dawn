{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e147a9b0_585de246",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-04-02T16:36:05Z",
      "side": 1,
      "message": "+Austin\n\nI got this working for GLES/Swiftshader (happened to be the first backend I narrowed down to). The tests are ported from SamplerTests.cpp - I can potentially massage tests of static sampling into that file instead.\n\nAustin/Corentin, do the GL backend changes look like what you would expect for the \"frontend\" implementation? I hadn\u0027t realized that this would be more like the \"frontend of the backends\" so to speak.",
      "revId": "f4a6e8f732612acb656033894804a646af00a686",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70566706_fee20ccc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-04-02T16:37:05Z",
      "side": 1,
      "message": "+Nicolette +Saif FYI on this WIP",
      "revId": "f4a6e8f732612acb656033894804a646af00a686",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18ec8693_aaa4ef4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-04-02T16:39:10Z",
      "side": 1,
      "message": "\u003e +Austin\n\u003e \n\u003e I got this working for GLES/Swiftshader (happened to be the first backend I narrowed down to). The tests are ported from SamplerTests.cpp - I can potentially massage tests of static sampling into that file instead.\n\nTo be clear, by \"working\" I mean \"the tests added here pass with this backend.\" Maybe when I do more extensive tests it will fall down :).\n\n\u003e \n\u003e Austin/Corentin, do the GL backend changes look like what you would expect for the \"frontend\" implementation? I hadn\u0027t realized that this would be more like the \"frontend of the backends\" so to speak.",
      "parentUuid": "e147a9b0_585de246",
      "revId": "f4a6e8f732612acb656033894804a646af00a686",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed3fac3a_1eb9ef87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-02T17:38:09Z",
      "side": 1,
      "message": "(didn\u0027t really look at tests yet, just responding to this thread)\n\nSo it\u0027s not exactly what I expected, but this solution is pretty simple. I imagine the solution is pretty similar in the other backends as well.\n\nWhat I expected was that in ExtractAndExpandBglEntries we would do something like convert the static sampler binding layouts to normal sampler binding layouts (and store the static sampler elsewhere in the BGL).\nThen, in DeviceBase::CreateBindGroup, after validation, we would patch up the descriptor the application passed in to include a new entry which has the sampler from the BGL in it.\nThen.. all the backends would take the normal sampler route and the static sampler path could remain UNREACHABLE.\n^^ details of all that TBD.\n\nThat said, given how simple your solution is, if it continues to be that simple in the other backends, maybe it\u0027s better..? essentially - we polyfill in the backend, not in the frontend. Because the backend polyfill is so straightforward.",
      "parentUuid": "18ec8693_aaa4ef4c",
      "revId": "f4a6e8f732612acb656033894804a646af00a686",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ddc89da_0bd4e9f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-04-03T12:01:04Z",
      "side": 1,
      "message": "Thanks, Austin! I now have insight into what you were thinking. I explored that solution this morning, didn\u0027t get it all quite working, but did see that there is a bit of messiness from my POV in that in DeviceBase::CreateBindGroup() we need to create a new BindGroupDescriptor as we can\u0027t overwrite the `entries` field in BindGroupDescriptor [1]. Corentin mentioned that that codepoint can be hot.\n\nWhat I\u0027m planning on doing is cleaning up the tests here and getting this CL ready to go with the feature being currently supported only on GL in order to get a checkpoint into the codebase. Then before I go OOO I\u0027ll see if I can dig into the real Vulkan backend. I can pick up on the other implementations when I\u0027m back and/or the tests and GL impl will hopefully be in the codebase in case someone else wants to work on those implementations in the meantime.\n\nLet me know if any of that doesn\u0027t make sense to you!\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:out/android-Debug/gen/third_party/dawn/emscripten-bits/system/include/webgpu/webgpu_cpp.h;l\u003d1619?q\u003dBindGroupDescriptor\u0026ss\u003dchromium",
      "parentUuid": "ed3fac3a_1eb9ef87",
      "revId": "f4a6e8f732612acb656033894804a646af00a686",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}