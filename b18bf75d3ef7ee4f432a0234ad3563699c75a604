{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47ca04ef_38b91c1a",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-03T19:28:22Z",
      "side": 1,
      "message": "There seems to be an implicit assumption that this is always called by a scalar and and a non-scalar. If this is called with a vec2 and a vec3 for instance the indexing on 502 will be incorrect.\n\nShould we add an assert in here that `n0 \u003d\u003d 1 || n1 \u003d\u003d 1`?",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7eac6e7_a1e7c174",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T14:13:47Z",
      "side": 1,
      "message": "Yes, there are a few assumptions in place, but as our asserts are present in Release builds, I hesitate to add them. I\u0027m not too worried, though, as these are private functions used only by the implementation below, not part of a public API. Also, if we do miuses them, it\u0027ll crash pretty spectacularly.",
      "parentUuid": "47ca04ef_38b91c1a",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5557fba4_7594a89f",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-04T14:28:32Z",
      "side": 1,
      "message": "Will it crash, or just index out of bounds? I\u0027m not too concerned about the cost of having asserts in the release build, we can always re-evaluate that if we find it\u0027s slowing things down.",
      "parentUuid": "d7eac6e7_a1e7c174",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c3db3da_0f712357",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T15:50:17Z",
      "side": 1,
      "message": "My experience is that it often crashes. But even if it doesn\u0027t, we run our unit tests with ASAN and UBSAN builds on Kokoro, and we\u0027ve relied on that a lot for this codebase.",
      "parentUuid": "5557fba4_7594a89f",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "408a0d8a_0fe76aa6",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 786,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-03T19:28:22Z",
      "side": 1,
      "message": "Should we note somewhere that the types of `args` have to be the same? (Or, the deepest element types have to be the same?)",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1466a9d_7d615911",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 786,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T14:13:47Z",
      "side": 1,
      "message": "This is the basic assumption for _all_ the op and builtin implementations, that the CreateElement callback takes the same type for all args (at least so far). The `add_values` lambda would fail to compile if it weren\u0027t the case.",
      "parentUuid": "408a0d8a_0fe76aa6",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ccfbe9_d7cbe7ca",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3227,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-03T19:28:22Z",
      "side": 1,
      "message": "This would be a lot more readable if all the cases were listed out instead of generated. It\u0027s really hard to figure out what exactly is being tested, and I can\u0027t tell you from reading this if there are cases missing.",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ceddcbc_9a6a5a4f",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3227,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T14:13:47Z",
      "side": 1,
      "message": "It\u0027s a trade-off. On the one hand, expanding it out makes it easier to see the tests, but makes it harder to add/change them because of the copy-pasta. Further, having the function makes it clear why certain cases are added, like overflow vs non-overflow. I\u0027d like to keep as-is, especially as there are 7 types being tested here. As we add many more tests, we\u0027ll see how this goes. Maybe we\u0027ll expand these out later.",
      "parentUuid": "a6ccfbe9_d7cbe7ca",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61c97c7a_855d7227",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3227,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-04T14:28:32Z",
      "side": 1,
      "message": "For test cases, having them readable is more important then harder to change. Like, with this trying to figure out what is being tested for each type is .... really hard. I couldn\u0027t tell you if this was sufficiently covered in each case.\n\nWhat about if we broke `OpAddCases` into `OpAddInt` and `OpAddFloat` cases? It would make less conditionals in the method, but keep the duplication here lower?",
      "parentUuid": "0ceddcbc_9a6a5a4f",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ede84aee_658dd602",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3227,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T15:50:17Z",
      "side": 1,
      "message": "Okay, I simplified things. I added a `bool is_overflow` defaulted to false for each case, and added a check to skip overflow cases for AInt and AFloat in the testing function itself. I also split up the function to add cases into two: `OpAddIntCases` and `OpAddFloatCases`. There is copy-paste of entries between the two, but I think it\u0027s an okay compromise.",
      "parentUuid": "61c97c7a_855d7227",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2174e14_779fca4c",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3227,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T17:40:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ede84aee_658dd602",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7915862_b9bb96b0",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3240,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-03T19:28:22Z",
      "side": 1,
      "message": "This error is weird as it shows the overflowed value, instead of what it would have calcluated too. Should we promote the math to int64_t and emit that value so we see the correct positive number?",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "846956cb_7443224c",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3240,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T14:13:47Z",
      "side": 1,
      "message": "Problem is that we\u0027re already using 64-bit values for abstracts. Ben suggested we go with this. I think it\u0027s still helpful because the user sees that the result is not what they expect.",
      "parentUuid": "c7915862_b9bb96b0",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ebc7714_80254886",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3240,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-04T14:28:32Z",
      "side": 1,
      "message": "Coudl we instead write out \u0027\u003cval\u003e + \u003cva\u003e\u0027 cannot be represented as \u0027abstract-int\u0027?",
      "parentUuid": "846956cb_7443224c",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d513c553_2353565a",
        "filename": "src/tint/resolver/const_eval_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 3240,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-08-04T15:50:17Z",
      "side": 1,
      "message": "I\u0027m going to push back on this for now. I think there is some value in seeing the result of the operation, as it gives a clue to what\u0027s the problem. For example, it will say the \"inf\" cannot be represented, which is more useful than seeing the two large floats that will lead to \"inf\". We can revisit this in the future.",
      "parentUuid": "9ebc7714_80254886",
      "revId": "b18bf75d3ef7ee4f432a0234ad3563699c75a604",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}