{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "00737272_1cbd77f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-17T21:49:32Z",
      "side": 1,
      "message": "How much value do we get by factoring it this way given that d3d11 needs a flat binding model? a lot of the concepts might not be sharable.\n\nEverything is space 0 so the shared code doesn\u0027t really need to know about space for d3d11.\nPerBindGroupDynamicStorageBufferLengthInfo refers to the root constants, but that doesn\u0027t exist in d3d11 - to my knowledge",
      "revId": "3b570727f98c5470ce5b670e3ec6b886fa8355d0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ca65ea7_453f2ebd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-03-17T22:45:56Z",
      "side": 1,
      "message": "You are right. I changed those method to virtual methods in the d3d::PipelineLayout. So for D3D11 backend, they will just return space(0), and register which could be computed from the pipeline layout.",
      "parentUuid": "00737272_1cbd77f0",
      "revId": "3b570727f98c5470ce5b670e3ec6b886fa8355d0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36801477_facce0a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-03-17T22:49:59Z",
      "side": 1,
      "message": "For the PerBindGroupDynamicStorageBufferLengthInfo, I am not sure how is it used in tint. I saw, ShaderModuleD3D12 set it into `arrayLengthFromUniform.bindpoint_to_size_index` at[1]. I though tint needs it for generating HLSL, right?\n\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/ShaderModuleD3D12.cpp;drc\u003deb1d40909d27c1c089c5f7b866f4fb0437f2683f;bpv\u003d1;bpt\u003d1;l\u003d562?q\u003dPipeLinelayoutD3d12\u0026ss\u003dchromium%2Fchromium%2Fsrc",
      "parentUuid": "0ca65ea7_453f2ebd",
      "revId": "3b570727f98c5470ce5b670e3ec6b886fa8355d0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67fd1b9e_967c320e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-20T15:39:02Z",
      "side": 1,
      "message": "Tint expects Dawn to bind a uniform buffer at `arrayLengthFromUniform.ubo_binding` which stores an array of buffer sizes for the dynamically bound buffers.\n\n`arrayLengthFromUniform.bindpoint_to_size_index` is a mapping of the bind points (group, binding) to the index into that buffer where there size should be stored.\n\nDawn needs to prepare this uniform buffer and bind it to `ubo_binding`.\n\nThis ubo_binding can (probably?) be the same uniform buffer we store all the other constants in the d3d11 backend (num workgroups, first index/offset, etc.) since we don\u0027t have root constants (crbug.com/dawn/1716).\n\nThe absence of root constants in d3d11 makes me think that the common d3d::BindGroupLayout and d3d::PipelineLayout base classes are unnecessary or even misleading since the binding models are fairly different. Since it appears only a small portion is shared, it could be better to factor out the code to build the mapping of bind points to index-into-uniform-buffer as a helper function somewhere.",
      "parentUuid": "36801477_facce0a2",
      "revId": "3b570727f98c5470ce5b670e3ec6b886fa8355d0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}