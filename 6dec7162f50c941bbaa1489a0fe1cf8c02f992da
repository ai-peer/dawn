{
  "comments": [
    {
      "key": {
        "uuid": "3497c015_7b9bc5fd",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-26T11:24:04Z",
      "side": 1,
      "message": "With a helper function we could remove the need to specify the type of Params when creating a ParamGenerator.\n\nAlso there is a lot of magic here but maybe we only need a 2D param. WDYT?",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a349bf7_20d1414a",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T14:46:39Z",
      "side": 1,
      "message": "1D param will also be useful I think.\nAnd, I think making it work for both 1D and 2D params would be enough magic or special-casing that the general case of n-D params isn\u0027t more complex.\n\nMore params could also be useful. ex.) it could be nice paramterize tests like the one I have now by both \"method\" and \"size\" in case there are nonlinear perf characteristics which change with the size of the data being operated on (or something analogous).",
      "parentUuid": "3497c015_7b9bc5fd",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f2cc1b7_bd145393",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-26T16:26:00Z",
      "side": 1,
      "message": "Should just be !(*this \u003d\u003d other) or similar",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbae1fde_3d03cd14",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T16:37:28Z",
      "side": 1,
      "message": "Good idea, thanks!",
      "parentUuid": "8f2cc1b7_bd145393",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0039f6c9_1f45696a",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T22:47:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbae1fde_3d03cd14",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f1f6849_2816aba8",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-26T11:24:04Z",
      "side": 1,
      "message": "I think this could  be replaced by operator \u003c\u003c with ostringstream, which might allow getting rid of [1]",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4538f08a_5c70bf9b",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T22:47:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f1f6849_2816aba8",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ddb5f6_6374200c",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-26T16:26:00Z",
      "side": 1,
      "message": "Does this do anything? Remove this or add a comment",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a300581_9cca01f0",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T16:37:28Z",
      "side": 1,
      "message": "I\u0027ll add a comment. It makes sure we flush the SetSubData\u0027s for this batch of iterations.",
      "parentUuid": "73ddb5f6_6374200c",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0375e15a_d5a9bfbf",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T22:47:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a300581_9cca01f0",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e753daff_9d058503",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-26T16:26:00Z",
      "side": 1,
      "message": "Should this be in FinishTest?",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b28442_455047ec",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T16:37:28Z",
      "side": 1,
      "message": "I\u0027ll add a comment.\nIt shouldn\u0027t because then the calibration step will compute a ridiculously high number of steps to execute because it can\u0027t determine how long stuff will take to last 1 second.\n\nAlthough now that I think about it, maybe we can have:\n\nvoid Step() {\n  // stuff\n  if (mIsCalibrating) WaitForGPU();\n}\n\nvoid FinishTest() {\n  WaitForGPU();\n}",
      "parentUuid": "e753daff_9d058503",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31160530_9f7359d4",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T16:45:56Z",
      "side": 1,
      "message": "Start/FinishTest are kinda like SetUp() and TearDown() that count for time. We do\n\ntimer-\u003eStart();\nStartTest();\nfor s in steps: Step();\nFinishTest();\ntimer-\u003eStop();\n\n\nI took them from ANGLE, but looking again, there are 0 perf tests that actually override them. I\u0027ll remove them from the harness for now until we need them.",
      "parentUuid": "b3b28442_455047ec",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77c5ccb0_9dfbe1ea",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T22:47:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31160530_9f7359d4",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "640c328a_62aa8bfc",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-26T11:24:04Z",
      "side": 1,
      "message": "Maybe this could be using some macro magic to become:\n\nDAWN_INSTANTIATE_PERF_TEST_SUITE_P(BufferUploadPerf,\n    {D3D12Backend, MetalBackend, OpenGLBackend, VulkanBackend},\n    {UploadMethod::SetSubData, UploadMethod::CreateBufferMapped});",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 117,
        "endChar": 24
      },
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aedf503_994bc266",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T22:47:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "640c328a_62aa8bfc",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 117,
        "endChar": 24
      },
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fc96524_2066d9cd",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-26T11:24:04Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 122,
        "startChar": 70,
        "endLine": 123,
        "endChar": 37
      },
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18b653d0_cc0dd64c",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T22:47:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fc96524_2066d9cd",
      "range": {
        "startLine": 122,
        "startChar": 70,
        "endLine": 123,
        "endChar": 37
      },
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d728a1c_eeab82b6",
        "filename": "src/tests/perf_tests/DawnPerfTest.h",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-26T16:26:00Z",
      "side": 1,
      "message": "This is virtual but private. Is it even possible to override?",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0a2cfff_dc6e7970",
        "filename": "src/tests/perf_tests/DawnPerfTest.h",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-26T16:37:28Z",
      "side": 1,
      "message": "Yes. Step() is also virtual and private and it\u0027s overriden in BufferUploadPerf.\n\nvirtual private lets derived classes define functionality without exposing access to them. This is so that StartTest(), Step(), and FinishTest() can only be called the way we want them to in DoRunLoop.",
      "parentUuid": "6d728a1c_eeab82b6",
      "revId": "6dec7162f50c941bbaa1489a0fe1cf8c02f992da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}