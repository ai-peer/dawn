{
  "comments": [
    {
      "key": {
        "uuid": "31f5f35c_f8e55245",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "could this return a unique_ptr? It would convey clearer ownership. Could be separate CL.",
      "range": {
        "startLine": 30,
        "startChar": 62,
        "endLine": 30,
        "endChar": 78
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cf014fe_e3b279a5",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "This doesn\u0027t reach into the memoryTransfer, so maybe it doesn\u0027t need to be manually implemented?",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81a2baeb_78bf5cbc",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "This sets buffer-\u003esize. When the client does MapRead/WriteAsync, it needs to know the size of the Read/Write handle. When we integrate into Chromium this is where shared memory is allocated.",
      "parentUuid": "1cf014fe_e3b279a5",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10ea290d_c87ccdf8",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-10T09:30:04Z",
      "side": 1,
      "message": "Sounds good.",
      "parentUuid": "81a2baeb_78bf5cbc",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d54d1368_cac0599e",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "Does this apply to the read/writeCallback above too? If so, one tag should be used for both. Also, the tag doesn\u0027t have to be inside MapRequestData, unless multiple requests of different types can be in `requests` at once.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "084b2baa_0f26a065",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T02:24:01Z",
      "side": 1,
      "message": "- Yes we could use a tagged pointer for the callback functions.\n- Although I\u0027m not sure how we could ergonomically have a single tag and two pointers. Seems easier and equally space efficient to use two tagged pointers.\n- Multiple request types can be in `requests` because the client can submit whatever it wants.",
      "parentUuid": "d54d1368_cac0599e",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90f1fb76_28c6251c",
        "filename": "src/dawn_wire/client/Client.cpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "Maybe comment about what this case means, e.g. \"if preallocated memory isn\u0027t provided, fall back to inline memory\"",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c4ce375_d711b12f",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "nit: newline between ctor/dtor?",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d7e080c_9a4566a7",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "This should produce an error that\u0027s propagated and causes a device loss. The client should in general be defensive towards the server (and not just the server being defensive towards the client)",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4037fc1_d43bf8dc",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "Sounds good to do this for Deserialize functions",
      "parentUuid": "3d7e080c_9a4566a7",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cfb9d7d_b4cd99b5",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "same",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2975d06b_2d41184c",
        "filename": "src/dawn_wire/server/ObjectStorage.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "should this have TODO: tagged union?",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "443209df_0f6d62e1",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-08T22:59:53Z",
      "side": 1,
      "message": "This is the only Deserialize method that returns a bool.\nMaybe the others should return a success status as well? (or take in bool* success)",
      "range": {
        "startLine": 166,
        "startChar": 8,
        "endLine": 166,
        "endChar": 52
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5062ef09_c652db88",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-09T01:55:34Z",
      "side": 1,
      "message": "Result\u003c\u003e would be nice if we can use it here.",
      "parentUuid": "443209df_0f6d62e1",
      "range": {
        "startLine": 166,
        "startChar": 8,
        "endLine": 166,
        "endChar": 52
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "555dfe05_a75a7626",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T02:24:01Z",
      "side": 1,
      "message": "I don\u0027t think we want to expose the headers for Result as part of Dawn\u0027s public API. @cwallez?",
      "parentUuid": "5062ef09_c652db88",
      "range": {
        "startLine": 166,
        "startChar": 8,
        "endLine": 166,
        "endChar": 52
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34191baa_53d670c0",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "Yeah that\u0027d be exposing an implementation detail.",
      "parentUuid": "555dfe05_a75a7626",
      "range": {
        "startLine": 166,
        "startChar": 8,
        "endLine": 166,
        "endChar": 52
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd711c5a_8887a2f5",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "This is a bit like magic, I\u0027m wondering if we could avoid counting the data in GetRequireSize() and instead call GetCmdSpace twice.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee9a3684_010fe54b",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "This would require manually implementing the command handlers -- which we could do.\n\nThe bigger problem  is that two calls to GetCmdSpace could get split by a Flush(). This is why previously, I had Serialize functions not perform the serialization and just return a \"SerializeInfo\".\n  cmd.data \u003d info.ptr\n  cmd.dataLength \u003d info.serializedSize\nAnd we let the autogen serialization handle everything.\n\nAnother alternative I can think of right now is to have cmd.Serialize(...) output a struct of all the pointers to members that were |skip_serialize \u003d\u003d true|\n\nWDYT?",
      "parentUuid": "cd711c5a_8887a2f5",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "364306ef_9212f580",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-10T09:30:04Z",
      "side": 1,
      "message": "Wouldn\u0027t this work? Make skip_serialize skip the member in GetCmdSpace and the \"Transfer\" version of the records. Then on the wire everything is serialized but the pointer.\n\nThen code here becomes\n\n  size_t commandSize \u003d cmd.GetRequiredSize();\n  size_t requiredSize \u003d commandSize + handleInitializeInfoLength;\n  char* allocatedBuffer \u003d static_cast\u003cchar*\u003e(GetCmdSpace(requiredSize));\n  cmd.Serialize(allocatedBuffer);\n  bufferData-\u003ereadHandle-\u003eSerializeInitialize(ptr, dataLength, allocatedBuffer + commandSize);\n\nIt removes one of the pointer arithmetic things but doesn\u0027t get rid of them completely.",
      "parentUuid": "ee9a3684_010fe54b",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be97cb1_2bda21ad",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "Shouldn\u0027t this be u64 to match the WebGPU buffers being 64bit sized?",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c58d0fba_74b7abca",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "I think it would make more sense for it to be size_t. I avoided that because that wouldn\u0027t work nicely if client/server were on different architectures over the network or something. And u64 seems like an excessive amount of data to serialize without a more optimal implementation. We could make it u64 to cover all cases though. WDYT?",
      "parentUuid": "6be97cb1_2bda21ad",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dafca0e3_d65da046",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-10T09:30:04Z",
      "side": 1,
      "message": "TBH I\u0027m not too worried about 4 additional bytes for this given the amount of work that happens around ReadHandle etc (like there\u0027s at least a malloc)",
      "parentUuid": "c58d0fba_74b7abca",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb6ceb80_ee38e03a",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransfer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "Note: I\u0027m not sure what the standard is in Chromium to split a class over multiple files. I was surprised to find this here.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cffe607_eef30267",
        "filename": "src/include/dawn_wire/WireClient.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "nit: implementation in the cpp file.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a548507_02dd2ef8",
        "filename": "src/include/dawn_wire/WireClient.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "Open as in it received the data?",
      "range": {
        "startLine": 59,
        "startChar": 55,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6222cea9_5db6a955",
        "filename": "src/include/dawn_wire/WireClient.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "Maybe server::SendInitialData -\u003e client::ReceiveInitialData",
      "parentUuid": "7a548507_02dd2ef8",
      "range": {
        "startLine": 59,
        "startChar": 55,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d305fef_740bede7",
        "filename": "src/include/dawn_wire/WireClient.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-10T09:30:04Z",
      "side": 1,
      "message": "Sounds good.",
      "parentUuid": "6222cea9_5db6a955",
      "range": {
        "startLine": 59,
        "startChar": 55,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0330757c_47d66229",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "u-nit: forward declare MemoryTransfer and put it after the Server that\u0027s the main class here? Same thing for the client. Also MemoryTransfer seems like it is missing a word like \"manager\" or \"service\" in the name?",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ae9f654_5772ee02",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "nit: \u003d default should be in the cpp file. Ditto in other places in this file and in the client.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6f7751d_a4d3d62d",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "Just so I understand, this Serializes an initialization message from the server ReadHandle to the client ReadHandle? I can\u0027t find a better name, except maybe SerializeInitializeMessage, but the comment could be more clear as to what happens.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57640e6f_734fa481",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "Maybe server::SendInitialData -\u003e client::ReceiveInitialData",
      "parentUuid": "b6f7751d_a4d3d62d",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d81f8bf1_79133051",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "Can\u0027t the data be passed to DeserializeClose directly instead of having this state modifying function? Alternatively SetTarget isn\u0027t overridable and just sets protected members.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21956d9a_23e22798",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "When we call DeserializeClose() we don\u0027t have access to the mapped pointers anymore. We could store it on the buffer or on the handle (inside the mapping callback). I prefer the handle so this isn\u0027t tied strictly to buffer mapping.\n\nTherefore, not overrideable with protected members sounds good.\u0027",
      "parentUuid": "d81f8bf1_79133051",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef4a821b_ad8a3a18",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T14:58:50Z",
      "side": 1,
      "message": "As we add more dependency injection this will grow, maybe it would be a good time to introduce a \"descriptor\" for the creation of WireServer, ditto for the client.",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b549396_e733ead3",
        "filename": "src/include/dawn_wire/WireServer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T16:32:07Z",
      "side": 1,
      "message": "Sounds good",
      "parentUuid": "ef4a821b_ad8a3a18",
      "revId": "7cf7551ddc4d59a096a4355861e7ba0e623a0090",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}