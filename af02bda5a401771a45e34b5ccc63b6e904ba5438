{
  "comments": [
    {
      "key": {
        "uuid": "5e3e43ec_28d3cf81",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T21:24:46Z",
      "side": 1,
      "message": "Could these two pieces of functionality - injecting errors and checking for errors - be separate?\n\n VkResult allocationResult \u003d INJECT_ERROR_OR_RUN(mDevice-\u003efn.AllocateMemory(...));\n if (allocationResult \u003d\u003d VK_ERROR_OUT_OF_DEVICE_MEMORY) {\n   return DAWN_OUT_OF_MEMORY_ERROR(\"OOM while creating the VkMemory\");\n }\n DAWN_TRY(CheckVkSuccess(allocationResult, \"vkAllocateMemory\"));",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40c77c17_ecc8c3b7",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T22:13:45Z",
      "side": 1,
      "message": "This doesn\u0027t work where INJECT_ERROR_OR_RUN does run vkAllocateMemory, but then CheckVkSuccess, creates a fake error. Then we ran vkAllocateMemory when we shouldn\u0027t have.",
      "parentUuid": "5e3e43ec_28d3cf81",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64c894ca_da5c269e",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T22:22:43Z",
      "side": 1,
      "message": "I\u0027m imagining reverting CheckVkSuccess so that it no longer creates fake errors, and moving the fake error creation out.\n\nMaybe that\u0027s too intrusive/hard to maintain since I guess it would affect a ton of callsites in the vk backend.",
      "parentUuid": "40c77c17_ecc8c3b7",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d88a9e97_909ec400",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T22:33:30Z",
      "side": 1,
      "message": "Hm.. how does INJECT_ERROR_OR_RUN know what kind of errors to produce?\n\nI tried some other idea once which replaced all the VulkanFunctions on mDevice-\u003efn with wrappers that might return an error VkResult. But because there are so many possible VkResults, it was hard to do this correctly.",
      "parentUuid": "64c894ca_da5c269e",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dd94fd7_de87179c",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T22:42:48Z",
      "side": 1,
      "message": "I guess we would need two INJECT_ macros, similar to this patch, one for generic and one for generic+OOM.",
      "parentUuid": "d88a9e97_909ec400",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "418b1b0c_cca8f1e7",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T22:54:18Z",
      "side": 1,
      "message": "Hm.. okay I\u0027ll try that. I wanted to abolish and disallow usage of VkResult to ensure we allow error injection everywhere, but maybe INJECT_ERROR_OR_RUN could yield \"safe\" wrappers of VkResult or something like that.",
      "parentUuid": "8dd94fd7_de87179c",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49c5a59f_ac74b87f",
        "filename": "src/dawn_native/vulkan/ResourceMemoryAllocatorVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-13T01:09:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "418b1b0c_cca8f1e7",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef77fab7_761837c4",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-12-12T14:53:46Z",
      "side": 1,
      "message": "Not super happy about how this adds hidden code behind CheckVkSuccess in all configurations. How about having a flag like DAWN_ENABLE_VK_ERROR_INJECTION that uses the code below, and otherwise just proxies CheckVkSuccess to CheckVkSuccessImpl?",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34f83737_661fb678",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T17:34:41Z",
      "side": 1,
      "message": "I have something like this locally. I\u0027m thinking it defaults to (use_fuzzing_engine || is_debug) ? So it works when fuzzing, and in Debug builds (for coverage)",
      "parentUuid": "ef77fab7_761837c4",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e0c12a6_d696590d",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-13T01:09:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34f83737_661fb678",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b905bae_503ed97b",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-12-12T14:53:46Z",
      "side": 1,
      "message": "nit: Why can\u0027t this be DAWN_OUT_OF_MEMORY_ERROR? __FILE__ __func__ and __LINE__ should be correct. Ditto everywhere else.",
      "range": {
        "startLine": 73,
        "startChar": 19,
        "endLine": 74,
        "endChar": 59
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e046b54_63897014",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T17:34:41Z",
      "side": 1,
      "message": "1. __func__ becomes something empty inside this lambda :(\n2. It\u0027s a lambda because I couldn\u0027t figure out how to only use |resultIn| once so that something like CheckVkSuccess(vkCreateBuffer(...)) doesn\u0027t run twice -- without creating a new function scope.",
      "parentUuid": "2b905bae_503ed97b",
      "range": {
        "startLine": 73,
        "startChar": 19,
        "endLine": 74,
        "endChar": 59
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba0c40fe_8d8962cf",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T20:04:08Z",
      "side": 1,
      "message": "Oh wait, if we DAWN_TRY inside CheckVkSuccess macro, then we\u0027ll still append the backtrace at the real callsite",
      "parentUuid": "5e046b54_63897014",
      "range": {
        "startLine": 73,
        "startChar": 19,
        "endLine": 74,
        "endChar": 59
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68b673ca_7b5b54be",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-13T01:09:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba0c40fe_8d8962cf",
      "range": {
        "startLine": 73,
        "startChar": 19,
        "endLine": 74,
        "endChar": 59
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10626ea8_b02bb6a4",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T21:24:46Z",
      "side": 1,
      "message": "should this be func instead of __func__?",
      "range": {
        "startLine": 76,
        "startChar": 86,
        "endLine": 76,
        "endChar": 94
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0e85e98_a77bb92c",
        "filename": "src/dawn_native/vulkan/VulkanError.h",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-13T01:09:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10626ea8_b02bb6a4",
      "range": {
        "startLine": 76,
        "startChar": 86,
        "endLine": 76,
        "endChar": 94
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "264c5fe9_6addfb71",
        "filename": "src/dawn_native/vulkan/VulkanErrorInjector.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-12-12T14:53:46Z",
      "side": 1,
      "message": "Can\u0027t we just check the numbers of call to CheckVkSuccess overall instead of per-line? Execution should be 100% reproducible no?",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8560ca6f_c043fdc2",
        "filename": "src/dawn_native/vulkan/VulkanErrorInjector.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-12T17:34:41Z",
      "side": 1,
      "message": "Maybe..? I could see Tick() happening a variable number of times while waiting for a buffer mapping to complete. For situations like that, I think the callsite id helps fuzzing cases be more reproducible.\n\nMaybe not though. When timing is involved, fuzzing might be pretty flaky regardless because it\u0027ll call Tick() multiple times in a row instead of once every few microseconds.",
      "parentUuid": "264c5fe9_6addfb71",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "019acc6e_7b4796c8",
        "filename": "src/dawn_native/vulkan/VulkanErrorInjector.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-13T01:09:35Z",
      "side": 1,
      "message": "Nevermind, I\u0027ve decided the overall count is better and we don\u0027t need this hashing.",
      "parentUuid": "8560ca6f_c043fdc2",
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4963ed1f_540d1ab3",
        "filename": "src/dawn_native/vulkan/VulkanErrorInjector.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-12-12T14:53:46Z",
      "side": 1,
      "message": "We probably don\u0027t need the file and line for injecting errors. See [1]",
      "range": {
        "startLine": 32,
        "startChar": 56,
        "endLine": 34,
        "endChar": 65
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f96efeb_e1cc670e",
        "filename": "src/dawn_native/vulkan/VulkanErrorInjector.h",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-13T01:09:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4963ed1f_540d1ab3",
      "range": {
        "startLine": 32,
        "startChar": 56,
        "endLine": 34,
        "endChar": 65
      },
      "revId": "af02bda5a401771a45e34b5ccc63b6e904ba5438",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}