{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ef1030c2_44efa0f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-17T17:17:19Z",
      "side": 1,
      "message": "@senorblanco@chromium.org FYI",
      "range": {
        "startLine": 17,
        "startChar": 16,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f34b7226_254f10a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-17T23:26:59Z",
      "side": 1,
      "message": "The GLSL fix looks good, but @gman@chromium.org should take a look. \n\nThat said, I think the OpenGL backend\u0027s approach might be better than what you\u0027re proposing for D3D: rather than statically subtracting off 2 from maxVertexAttributes, let maxVertexAttributes be the upper hardware limit, but subtract off slots only if vertex_index or instance_index are used.\n\nSee: https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/RenderPipeline.cpp;l\u003d218",
      "parentUuid": "ef1030c2_44efa0f2",
      "range": {
        "startLine": 17,
        "startChar": 16,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab3def08_52210983",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-01-18T03:09:45Z",
      "side": 1,
      "message": "Oh I am not proposing anything for D3D. I am just trying to align with the current WebGPU SPEC, which says `attrib.shaderLocation is \u003c device.[[device]].[[limits]].maxVertexAttributes.`. I can only choose 30 instead of 32 as `maxVertexAttributes` on D3D because the vertex shader with 32 `float32x4` user-defined inputs and `SV_VertexID` or `SV_InstanceID` cannot be compiled with FXC or DXC.\n\nNow In WebGPU SPEC only user-defined variables are counted and the slots for built-in variables are always reserved (for example, `maxInterStageShaderVariables` and `maxInterStageShaderComponents`). I think such rules are clear and easy to understand and we should keep them.",
      "parentUuid": "f34b7226_254f10a2",
      "range": {
        "startLine": 17,
        "startChar": 16,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be9649e4_3d1d7399",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-18T16:06:33Z",
      "side": 1,
      "message": "Hmm. With your change I see D3D subtracting off 2 from the device-provided value, while GLSL uses it directly and subtracts it off during (compat) validation.",
      "parentUuid": "ab3def08_52210983",
      "range": {
        "startLine": 17,
        "startChar": 16,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a85676b5_e36ba459",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-18T16:53:00Z",
      "side": 1,
      "message": "I believe the maximum limits we advertise have to be this way, otherwise if you you all the vertex attributes AND Vertex_ID, the d3d backend will fail to compile the shader",
      "parentUuid": "be9649e4_3d1d7399",
      "range": {
        "startLine": 17,
        "startChar": 16,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8db2fce6_c71bd51d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2024-01-18T17:12:52Z",
      "side": 1,
      "message": "The WebGPU spec says they just work, no having to count vertex_index and instance_index as attributes, so this seems correct for the current spec for non-compat\n\nThe compat spec says vertex_index and instance_index each count as an attribute which is different than the non-compat spec. This is because GLES 3.1 only guarantees 16 attributes so if we followed this non-compat rules in compat mode, compat would have to set the limit to 14.\n\nAssuming the other APIs can always handle 16 + vertex_index and instance_index than this is fine.",
      "parentUuid": "a85676b5_e36ba459",
      "range": {
        "startLine": 17,
        "startChar": 16,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a7b6c92_9de0e512",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-01-17T09:15:19Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0790c9b_3f09b8af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-17T10:31:28Z",
      "side": 1,
      "message": "LGTM",
      "revId": "6fa3a393791c9dc4dd7e591a5f612c3fb7b3d148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}