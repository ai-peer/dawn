{
  "comments": [
    {
      "key": {
        "uuid": "940285e0_64be7960",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T14:48:00Z",
      "side": 1,
      "message": "Instead of computing this at the BindGroupStateTracker, how about computing it in TransitionForPass? At [1].\n\nAsking for this because we are trying to remove the extra command walking required for bindgroups so we don\u0027t want to add more code to it.\n\nThis would allow reverting the changes to BindGroupLayoutD3D12 too.",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e00ad59_9ecc2efe",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "940285e0_64be7960",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f40f24af_0cc21e9b",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T14:48:00Z",
      "side": 1,
      "message": "[1]\n\nWe could OR the usage of all the buffers and the usage of all the textures, then check for UAV usages at the end.",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4d6e45a_6dff55ce",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f40f24af_0cc21e9b",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efbdb990_9bb19579",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 917,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T14:48:00Z",
      "side": 1,
      "message": "There is significant overlapping logic between this and SetupEmulatedRenderPass for deciding to clear uninitialized subresources or setting the initialized bit. Can we factor them?\n\nSince D3D12 render passes are the future, how about code that does the following:\n\n - Stack-allocate all the data needed for a D3D12 BeginRenderPass call\n - Fill it with data, while doing the load-\u003eclear conversion if needed and tagging subresources as un/initialized.\n - if (has native render passes) BeginRenderPass\n - else EmulateBeginRenderPass from the data needed for BeginRenderPass",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0bd2b4b_79df7db9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 917,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done. Also note that things could be a bit more uniform if we did EmulateEndRenderPass in place of ResolveMultisampledRenderPass.",
      "parentUuid": "efbdb990_9bb19579",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b8ebe3_a6a1622f",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T19:25:13Z",
      "side": 1,
      "message": "If renderPassTracker is only going to be used in SetupRenderPass, why do we need to store it here in the caller?",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1156,
        "endChar": 76
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ac7a52_12ba87db",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-06T20:12:51Z",
      "side": 1,
      "message": "I found the subresource parameters struct that is set (as a pointer) when using end access resolve must be kept alive until after EndRenderPass() is called. Declaring this inside SetupRenderPass would mean the subresource parameter\u0027s memory is destroyed after going out of scope.",
      "parentUuid": "07b8ebe3_a6a1622f",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1156,
        "endChar": 76
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2684e7c7_be20ddd9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T21:04:34Z",
      "side": 1,
      "message": "Reading through the D3D12 code, it appears you are correct. :-( \n\nPlease add a comment that describes this pit fall so that people do not end up re-figuring this out in the future.",
      "parentUuid": "14ac7a52_12ba87db",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1156,
        "endChar": 76
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41591a21_df75bab0",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2684e7c7_be20ddd9",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1156,
        "endChar": 76
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83303a75_6700ce7c",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T14:48:00Z",
      "side": 1,
      "message": "We could do the cast on Open so we don\u0027t pay the cost every time we call this function. In this function we could still assert that it is not nullptr, because callers should check for the features to be present before calling GetCommandList4.",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "addca636_2ba5331b",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T19:25:13Z",
      "side": 1,
      "message": "Since CopyTo addrefs the pointer and assigns it to a naked pointer, you\u0027re leaking memory here. \n\nInstead, create a new mD3D12CommandList4 ComPtr variable that is lazily initialized when GetCommandList4 is called. Lazy initialization should use the As member of ComPtr.",
      "range": {
        "startLine": 89,
        "startChar": 7,
        "endLine": 90,
        "endChar": 62
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23a2fadf_55f6759f",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-07T21:09:11Z",
      "side": 1,
      "message": "Must I do initialize lazily? Is there a reason I can\u0027t initialize mD3D12CommandList4 in Open() as Corentin suggests with the As member?",
      "parentUuid": "addca636_2ba5331b",
      "range": {
        "startLine": 89,
        "startChar": 7,
        "endLine": 90,
        "endChar": 62
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e5edea6_bec02d0c",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-07T22:01:46Z",
      "side": 1,
      "message": "Using As in Open is fine with me.",
      "parentUuid": "23a2fadf_55f6759f",
      "range": {
        "startLine": 89,
        "startChar": 7,
        "endLine": 90,
        "endChar": 62
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0c6f6c1_1b4d2f1c",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e5edea6_bec02d0c",
      "range": {
        "startLine": 89,
        "startChar": 7,
        "endLine": 90,
        "endChar": 62
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd394ffa_5e2f722f",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83303a75_6700ce7c",
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a6e9302_4cd09d4c",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T19:25:13Z",
      "side": 1,
      "message": "I\u0027m not really sure why the original calls to CheckFeatureSupport are guarded with these braces. Seems unnecessary.\n\nIf you wouldn\u0027t mind, please remove these as part of your change.",
      "range": {
        "startLine": 28,
        "startChar": 7,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "560047dd_9d8b1c5a",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-08T17:59:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a6e9302_4cd09d4c",
      "range": {
        "startLine": 28,
        "startChar": 7,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9faca96a_ed01f1ee",
        "filename": "src/dawn_native/d3d12/RenderPassTrackerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-06T14:48:00Z",
      "side": 1,
      "message": "I\u0027m surprised this is a thing, do you know what optimization can be done if this flag isn\u0027t present?",
      "range": {
        "startLine": 56,
        "startChar": 31,
        "endLine": 56,
        "endChar": 70
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a3012c9_fbfc5cf0",
        "filename": "src/dawn_native/d3d12/RenderPassTrackerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-11-06T18:45:15Z",
      "side": 1,
      "message": "Per MSDN [1]: \"Unordered access view (UAV) writes are permitted within a render pass, but you must specifically indicate that you\u0027ll be issuing UAV writes within the render pass by specifying D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES, so that the display driver can opt out of tiling if necessary.\"\n\nIt seems like this could be to mitigate performance on RENDER_PASS_TIER_1 [2] systems that cannot write UAVs efficiently when tiling.\n\n[1] https://docs.microsoft.com/en-us/windows/win32/direct3d12/direct3d-12-render-passes\n[2] https://docs.microsoft.com/en-us/windows/win32/api/d3d12/ne-d3d12-d3d12_render_pass_tier",
      "parentUuid": "9faca96a_ed01f1ee",
      "range": {
        "startLine": 56,
        "startChar": 31,
        "endLine": 56,
        "endChar": 70
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1c45ae6_6712bea4",
        "filename": "src/dawn_native/d3d12/RenderPassTrackerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-11-06T19:25:13Z",
      "side": 1,
      "message": "storeOp is not used in this method. I presume you will need to use it to set StencilEndingAccess.",
      "range": {
        "startLine": 167,
        "startChar": 45,
        "endLine": 167,
        "endChar": 67
      },
      "revId": "05b71723631abcc6256d756c30dead4d05e69c63",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}