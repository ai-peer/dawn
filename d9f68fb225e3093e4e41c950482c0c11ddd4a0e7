{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a07c45f_970188ec",
        "filename": "src/tint/api/common/override_id.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-31T18:08:04Z",
      "side": 1,
      "message": "nit: double blank line.",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e731022f_cc55ca78",
        "filename": "src/tint/utils/reflection/reflection.h",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-31T18:08:04Z",
      "side": 1,
      "message": "How impossible is it to stick the static_assert inside the ForeachField? It might work because ForeachField is instantiated only when called.",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3c843d9_038e11c9",
        "filename": "src/tint/utils/reflection/reflection.h",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T18:12:44Z",
      "side": 1,
      "message": "It can\u0027t be done as the class hasn\u0027t finished being instantiated, so the size is not known. Also, I don\u0027t know if we always want to assert all fields are reflected for every class.",
      "parentUuid": "e731022f_cc55ca78",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e8116b0_d1a6fb95",
        "filename": "src/tint/utils/reflection/reflection.h",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-31T18:08:04Z",
      "side": 1,
      "message": "With some offsetof trick this might be possible to check statically as well? Ah it would require making a second list of pointer to member. Heh.",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "928bd21d_dc1a62fe",
        "filename": "src/tint/utils/reflection/reflection.h",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T18:12:44Z",
      "side": 1,
      "message": "Yeah, I had an implementation that checked the offsets of each field was in the right place, but it requires duplicating the field list outside of the class due to the instantiating issue again. I decided this is probably fine. You get to see all the types, field indices and expected byte offset in the assertion failure.",
      "parentUuid": "0e8116b0_d1a6fb95",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eacb3d38_0e731201",
        "filename": "src/tint/utils/reflection/reflection.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-31T18:08:04Z",
      "side": 1,
      "message": "Does that ever that a virtual class has tint reflection?",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20df24eb_1c9020f3",
        "filename": "src/tint/utils/reflection/reflection.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T18:12:44Z",
      "side": 1,
      "message": "Parse failure on your sentence, but there are virtual classes with reflection. All classes using the `Castable` system are virtual.",
      "parentUuid": "eacb3d38_0e731201",
      "revId": "d9f68fb225e3093e4e41c950482c0c11ddd4a0e7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}