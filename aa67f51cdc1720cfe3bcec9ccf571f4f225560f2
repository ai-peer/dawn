{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d5cc077e_44d07513",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-29T21:00:20Z",
      "side": 1,
      "message": "Note: I\u0027m removing the global lock for Release calls in the next CL to derisk this. (I ran the tests on that CL)\n\nremoving that lock makes it so that DestroyImpl may be called whenever someone drops a resource on another thread.\n\nI did a find and replace to tag all DestroyImpl with `// CHECK THREADSAFE` so that you can have the context for all of them in the CL.\nI will remove that comment after review.",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b8c2cc3_326e365b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "LGTM, though In general I\u0027m mildly concerned that we are adding mutex and atomics in places without a global view of how we\u0027d like to make things thread safe. Though that\u0027s more of the short-term benefits for Graphite and we\u0027ll get back later to doing a more consistent MT work.",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ccf6864_2b03bf3d",
        "filename": "src/dawn/native/ExecutionQueue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "This seems like there could be a race?",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34e544b9_cfc734e9",
        "filename": "src/dawn/native/ExecutionQueue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "yea, I\u0027m not sure what to do to make it clearly safe. all this specific CL needs is to query the pending command serial so that resources can be enqueued after some point. And it\u0027s fine if that is slightly later if someone incremented the serial at the same time.\n\nthe other cases like AssumeCommandsCompleted, HasScheduledCommands, and GetScheduledWorkDoneSerial are all called while the device lock is being held. Ideally the execution queue should be separated out with its own lock where needed but - we\u0027re still in the middle of that refactor",
      "parentUuid": "7ccf6864_2b03bf3d",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b806a99_fc474581",
        "filename": "src/dawn/native/ExecutionQueue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-04T03:50:04Z",
      "side": 1,
      "message": "I suppose I should do something about it though. two options I can think of:\n 1. just move the stuff around so I can safely mutex-protect all the mutating stuff on ExecutionQueue\n 2. leave ExecutionQueue as is, and have a separate atomic DeviceBase::mPendingCommandSerialForDeletion that we use for deletion. Kind of a duplication but makes it more clear that only that serial is thread-safe, and other bits of ExecutionQueueBase are not. it\u0027ll get updated next to IncrementLastSubmittedCommandSerial so it should be clear that there is a single writer to mPendingCommandSerialForDeletion assuming the global lock has been acquired in order to call IncrementLastSubmittedCommandSerial",
      "parentUuid": "34e544b9_cfc734e9",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64c8c41c_9be77d3e",
        "filename": "src/dawn/native/ExecutionQueue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-04T17:25:40Z",
      "side": 1,
      "message": "discussed on vc to leave TODO about this. Additionally though, I made only the last submitted serial atomic, and not the completed serial.\n\nOnly the pending one is actually needed by another thread. Keeping it more restricted is better so that TSAN will complain if we do something unsafe with the completed serial.",
      "parentUuid": "2b806a99_fc474581",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "577d6b42_cd4d5987",
        "filename": "src/dawn/native/ExecutionQueue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "ditto",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34128b11_4d254b87",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 362,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "This should probably use .Use to make the extraction of tasks atomic.",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1416ae16_01a53bad",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 362,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-01T21:01:01Z",
      "side": 1,
      "message": "Agreed, I think that `IterateUpTo` returns an iterator so the `Guard` might be gone.",
      "parentUuid": "34128b11_4d254b87",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9d9170c_7ddbc544",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 362,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1416ae16_01a53bad",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f9b7254_d6a26864",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "Ditto? Or we could have a helper in SerialQueues to acquire all the T up to a certain serial.",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11022997_f875dd2c",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-01T21:01:01Z",
      "side": 1,
      "message": "+1 to this since in most places I see `IterateUpTo` is called and then at the end of the loop we do a `ClearUpTo`. We could have a version where we pass a lambda and call it something like `ProcessUpTo`? If we do that, then we don\u0027t need the loop and we can actually rely on the `Guard` in the comment above to hold the lock the whole time.",
      "parentUuid": "4f9b7254_d6a26864",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "774f479b_0f1d4dd9",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "Done, with Use() for now",
      "parentUuid": "11022997_f875dd2c",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b4ba6b5_7f164013",
        "filename": "src/dawn/native/SwapChain.h",
        "patchSetId": 7
      },
      "lineNbr": 72,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-01T21:01:01Z",
      "side": 1,
      "message": "Hmm, would it make sense to make the `Texture` hold a ref to the `SwapChain` in this case? Then we don\u0027t need this lock before destroy? So this would just drop the `Texture` ref in here, and when the `Texture` goes away then both will go away at the same time in a thread-safe manner?",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 72,
        "endChar": 56
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00189249_854cb7dc",
        "filename": "src/dawn/native/SwapChain.h",
        "patchSetId": 7
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-02T12:54:02Z",
      "side": 1,
      "message": "As long as the texture doesn\u0027t do anything with the swapchain until it is destroyed, I think that works. It means that the CPU data is reclaimed when both are at refcount 0, but that seems fine.",
      "parentUuid": "8b4ba6b5_7f164013",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 72,
        "endChar": 56
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db166c8_78cfd65e",
        "filename": "src/dawn/native/SwapChain.h",
        "patchSetId": 7
      },
      "lineNbr": 72,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "this sounds reasonable, but it\u0027s not straightforward to do. I\u0027ll file a webgpu.h issue about whether this is the lifetime that should be expected and keep the code as-is for now.",
      "parentUuid": "00189249_854cb7dc",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 72,
        "endChar": 56
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04d9d86e_ecc989e3",
        "filename": "src/dawn/native/SwapChain.h",
        "patchSetId": 7
      },
      "lineNbr": 72,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-03T23:11:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9db166c8_78cfd65e",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 72,
        "endChar": 56
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f68ed22_e80051ca",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 710,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "It might be worth noting the intercation with SwapChain here.",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d7d08b7_84fbc022",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 710,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f68ed22_e80051ca",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39e98cd4_03905150",
        "filename": "src/dawn/native/null/DeviceNull.cpp",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-30T15:05:33Z",
      "side": 1,
      "message": "What are these annotations?",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc89c01_de1fcffa",
        "filename": "src/dawn/native/null/DeviceNull.cpp",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "me tagging everything that would be affected so the CL has context when reviewing, but i\u0027ll remove before submitting",
      "parentUuid": "39e98cd4_03905150",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb09af2_34047ba9",
        "filename": "src/dawn/native/null/DeviceNull.cpp",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-10T13:15:22Z",
      "side": 1,
      "message": "They still need to be removed!",
      "parentUuid": "dcc89c01_de1fcffa",
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c1800c_05208975",
        "filename": "src/dawn/native/vulkan/DeviceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-01T21:01:01Z",
      "side": 1,
      "message": "Thoughts on making these just return `Guards` instead? Might require making some aspects of `MutexProtected` public though?",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 66,
        "endChar": 80
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e524e984_a3348c9f",
        "filename": "src/dawn/native/vulkan/DeviceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-03T21:36:25Z",
      "side": 1,
      "message": "I think it\u0027s slightly better this way because you avoid acquiring the lock until it is actually used. Also though, you can\u0027t get the guard directly without using operator-\u003e or Use with a lambda",
      "parentUuid": "03c1800c_05208975",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 66,
        "endChar": 80
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd68a60c_f49b8d89",
        "filename": "src/dawn/native/vulkan/DeviceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-03T23:11:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e524e984_a3348c9f",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 66,
        "endChar": 80
      },
      "revId": "aa67f51cdc1720cfe3bcec9ccf571f4f225560f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}