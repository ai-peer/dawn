{
  "comments": [
    {
      "key": {
        "uuid": "955d5bc3_8894bf9c",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-03-04T17:50:55Z",
      "side": 1,
      "message": "nit: external is a property of ownership, not the method or how memory was allocated. Maybe \u0027AllocationMethod::Unknown\u0027 or a \"isExternal\" member?",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "665268e8_3690a7d9",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T18:59:25Z",
      "side": 1,
      "message": "+1 to finding a better comment and name, though I do not have a suggestion. All of this memory is internal to Dawn since Dawn is managing it.",
      "parentUuid": "955d5bc3_8894bf9c",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ed6825_42bffc7b",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T22:33:06Z",
      "side": 1,
      "message": "My main motivation to add this was that I needed externally owned textures to not be kDirect, and kExternal was chosen in that the ResidencyManager and AllocationManager treat them differently because they\u0027re owned externally. I\u0027m changing to kUnknown for now, as it is correct in the the strict sense of \"AllocationMethod\".",
      "parentUuid": "665268e8_3690a7d9",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf7a9550_4b0b0205",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T18:59:25Z",
      "side": 1,
      "message": "Isn\u0027t ASSERT only evaluated in debug builds? If so, this will return nullptr in retail builds and likely crash in the caller.",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2055c4c1_3e673fa3",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T22:33:06Z",
      "side": 1,
      "message": "ASSERT is debug only. Crashing on failure would be the correct behavior - this was to ensure GetD3D12Heap() is used only when the stored D3D12Pageable was initially created as a ID3D12Heap (suballocated resources). If the ID3D12Pageable was not created as an ID3D12Heap (direct allocations), GetD3D12Heap shouldn\u0027t be used - instead GetD3D12Pageable should be used.\n\nAdded a comment.",
      "parentUuid": "bf7a9550_4b0b0205",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "795847af_af10eaba",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T23:14:21Z",
      "side": 1,
      "message": "If ASSERT is debug-only, then your current code will have different behavior in retail vs. debug.  In debug, if the \u0027As\u0027 call succeeds, you\u0027ll return a valid object. In retail, you always return a ComPtr that has a nullptr member variable.\n\nWe should avoid writing code that behaves differently in debug vs. retail because retail only bugs can be a pain to debug.",
      "parentUuid": "2055c4c1_3e673fa3",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12438bfa_694da027",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T23:50:08Z",
      "side": 1,
      "message": "Makes sense. Will remove.",
      "parentUuid": "795847af_af10eaba",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc5bfb5f_7a26e87c",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-05T17:58:57Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "12438bfa_694da027",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52d4af10_2b6ff493",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-04T09:59:26Z",
      "side": 1,
      "message": "This heap is leaked at the moment. Somewhere in the deallocation method call chain we should detect that the resource is direct and delete the heap.",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "765eda6d_c23a93e3",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-03-04T17:50:55Z",
      "side": 1,
      "message": "+1. Also, why are we storing committedResource on the RHA twice?",
      "parentUuid": "52d4af10_2b6ff493",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cb07db6_f4ddecfe",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T18:59:25Z",
      "side": 1,
      "message": "+1 to eliminating the leak. You should be able to use std::make_unique and pass ownership to the constructor using std::move",
      "parentUuid": "765eda6d_c23a93e3",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92af3c5d_2ca315af",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T22:33:06Z",
      "side": 1,
      "message": "Fixed in ResourceAllocatorManager::DeallocateMemory\n\n@Bryan - Although we are literally storing committedResource twice - these intended to be seen as two separate abstractions intended to make Dawn\u0027s allocation paradigm more uniform with D3D12 (note the comment). committedResource as stored on Heap represents D3D12\u0027s \"implicit heap\" as an ID3D12Pageable, which is very useful for simplifying ResidencyManager. committedResource as stored in the RHA represents the actual ID3D12Resource, which is used throughout the rest of Dawn - as well as controls the resource\u0027s lifetime with the ComPtr. I do not see a simple way to avoid duplicating this - nor do I see a significant value in doing so.\n\n@Rafael - this was just something I mixed up when splitting the change. I had done a number of iterations around it and found using the ResourceAllocatorManager::DeallocateMem function to be the best place for destruction. I tried smart pointers for this - but the structure here makes it more difficult than it seems, at least without duplicating/adding some fields.",
      "parentUuid": "4cb07db6_f4ddecfe",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fa4d713_8eae1f66",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T23:14:21Z",
      "side": 1,
      "message": "Reactivating because you\u0027re latest iteration still leaks memory. Even though you\u0027re running an in-place destructor, the memory for the Heap object remains and is leaked.  \n\nI think you should be able to make the Heap object using std::make_unique in ResourceAllocatorManager::CreateCommittedResource. You can use std::move to transfer that to the ResourceHeapAllocation constructor.  ResourceHeapAllocation can then store the std::unique_ptr as a member variable. In the Invalidate call, it can reset the unique_ptr and delete the memory for the Heap. The destructor of Heap will release the reference to the committed resource.",
      "parentUuid": "92af3c5d_2ca315af",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "157e51a4_228893ca",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T23:50:08Z",
      "side": 1,
      "message": "Oh.\n\nWhat you describe works - but it requires another member (unique_ptr\u003cHeap\u003e mImplicitHeap) on the ResourceHeapAllocation. This member would be unused on most ResourceHeapAllocations, because suballocation seem to be more common. We could avoid this extra member by doing things manually as my current solution does - just with the delete operator. It seems like you\u0027re partial to a smart pointer solution though.",
      "parentUuid": "7fa4d713_8eae1f66",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "498a0b18_f87040ee",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-05T10:48:49Z",
      "side": 1,
      "message": "The complexity here is that implicit heaps should be destroyed as soon as their resource is freed while suballocation heaps should not. All three of the solutions (manual delete in DeallocateResource, an additional mImplicitHeap unique pointer, or making ResourceHeapBase refcounted) sound fine.",
      "parentUuid": "157e51a4_228893ca",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "523b9509_ee9746bd",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-05T17:58:57Z",
      "side": 1,
      "message": "Fixed - with \"delete heap\" in ResourceAllocatorManager::DeallocateMem",
      "parentUuid": "498a0b18_f87040ee",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ed6022f_a35470d3",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-03-04T17:50:55Z",
      "side": 1,
      "message": "nit: forward declare?",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4afc0fe2_9de895a8",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T22:33:06Z",
      "side": 1,
      "message": "Not possible. The RMA constructor takes a ResourceHeapBase, so the implicit cast requires HeapD3D12.",
      "parentUuid": "0ed6022f_a35470d3",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34d82c3_6f6d4cc9",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-03-04T17:50:55Z",
      "side": 1,
      "message": "nit: ASSERT(info.mMethod \u003d\u003d External \u0026\u0026 heap \u003d\u003d nullptr)?",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62eb4d42_d5cd9b15",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T18:59:25Z",
      "side": 1,
      "message": "+1 and have each expression as its own ASSERT for better debugging.",
      "parentUuid": "c34d82c3_6f6d4cc9",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bc2d969_fe42c237",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T22:33:06Z",
      "side": 1,
      "message": "Done.\n\n@Rafael - the expressions are not independent of each other.",
      "parentUuid": "62eb4d42_d5cd9b15",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbbd50b_a17965a3",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-04T23:14:21Z",
      "side": 1,
      "message": "ASSERT(A \u0026\u0026 B) should always be re-written as:\nASSERT(A);\nASSERT(B);\n\nYour latest patchset has ASSERT(A \u003d\u003d B) which, I agree, can\u0027t be split up into two.",
      "parentUuid": "9bc2d969_fe42c237",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "462a7752_4072155c",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-04T09:59:26Z",
      "side": 1,
      "message": "Why is this include needed?",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01bdd44b_29622fb8",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-04T22:33:06Z",
      "side": 1,
      "message": "It isn\u0027t right now. Removed.",
      "parentUuid": "462a7752_4072155c",
      "revId": "d6c4ed9f6acd71dba91787c4d7529ff366d38ead",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}