{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "71c6c374_8c1db890",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-11-03T11:06:14Z",
      "side": 1,
      "message": "Overall it\u0027s weird that dawn::wire::server would allow reuse of an ID with the same generation number. I thought I remembered we had a check that version numbers are strictly increasing but can\u0027t find it anymore. Should we add such a check back? It would fix this issue and other issues like it in the future.",
      "revId": "1fb2363676cf0f446e964d6477d4d19784419ebc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5827a07_6130d24d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-11-04T01:06:29Z",
      "side": 1,
      "message": "It\u0027s would be great if we could have a sound fix. Maybe we need to spend some time re-working it out if we can\u0027t find the old one back. Anyway, do we need to land a quick fix first, as it\u0027s P1 issue? I am a bit upset about how severely the bug impacts.",
      "parentUuid": "71c6c374_8c1db890",
      "revId": "1fb2363676cf0f446e964d6477d4d19784419ebc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bb8e922_3196b344",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-11-04T01:41:11Z",
      "side": 1,
      "message": "hm I could take a look at doing the Allocate change since I\u0027m a bit more familiar with the wire code? I\u0027m not sure what another quick fix would be since the reuse of an object is pretty significant",
      "parentUuid": "c5827a07_6130d24d",
      "revId": "1fb2363676cf0f446e964d6477d4d19784419ebc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d5e628c_dc1b9ea3",
        "filename": "src/dawn/wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-11-03T06:22:46Z",
      "side": 1,
      "message": "[1]\n```\nif (id_to_last_generation_map_[bufferResult.id] \u003e\u003d bufferRessult.generation) {\n    return fase;\n}\n```",
      "revId": "1fb2363676cf0f446e964d6477d4d19784419ebc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec7ff9f2_2bbb206d",
        "filename": "src/dawn/wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-11-03T06:57:14Z",
      "side": 1,
      "message": "`BufferObjects().Allocate` is widely used. It\u0027d a little more complex to modify it.\n\nAnother simpler fix could be the checking here. Does this make sense?\n\n```\nif (resultData-\u003egeneration !\u003d 0 \u0026\u0026 resultData-\u003egeneration \u003e\u003d bufferResult.generation) {\n    return false;\n}\n```",
      "revId": "1fb2363676cf0f446e964d6477d4d19784419ebc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6fb0c29_dc6e3975",
        "filename": "src/dawn/wire/server/ServerBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-11-03T06:22:46Z",
      "side": 1,
      "message": "[2]\n```\nid_to_last_generation_map_[bufferResult.id] \u003d bufferRessult.generation;\n```",
      "revId": "1fb2363676cf0f446e964d6477d4d19784419ebc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}