{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3f435780_d9bc2736",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-12T07:04:30Z",
      "side": 1,
      "message": "LGTM",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b80200e8_6c3a7cc6",
        "filename": "src/dawn_native/RenderEncoderBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-12T07:04:30Z",
      "side": 1,
      "message": "Maybe \"%s writes depth while %s has depthReadOnly is true\". Ditto below. See docs/errors.md as well.",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aedbd240_5d4305e7",
        "filename": "src/dawn_native/RenderEncoderBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b80200e8_6c3a7cc6",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b4db3fa_02c2230c",
        "filename": "src/dawn_native/RenderEncoderBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Done\n\nGood to know the doc.",
      "parentUuid": "b80200e8_6c3a7cc6",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae08a67d_e1ddc8a3",
        "filename": "src/dawn_native/RenderEncoderBase.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-12T07:04:30Z",
      "side": 1,
      "message": "Can we add the render bundle descriptor depth/stencilReadOnly in this CL https://gpuweb.github.io/gpuweb/#dictdef-gpurenderbundleencoderdescriptor ?",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "357f9c59_3b814da9",
        "filename": "src/dawn_native/RenderEncoderBase.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "depth/stencilReadOnly are set via default values (false) here. How about add them explicitly in another patch? We may need to add some unittests to cover the explicit values. I planed to do so but forgot to mention renderbundle in TODO in PipelineAndPassCompabilityTests. Now I update the TODOs and add the rendlebundle related test into the TODOs.",
      "parentUuid": "ae08a67d_e1ddc8a3",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bc21907_15225fe1",
        "filename": "src/dawn_native/RenderEncoderBase.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-13T00:23:04Z",
      "side": 1,
      "message": "I investigated more about depth/stencilReadOnly in RenderBundle. I feel like that the depth/stencilReadOnly in RenderBundleEncoderDescriptor at https://gpuweb.github.io/gpuweb/#dictdef-gpurenderbundleencoderdescriptor doesn\u0027t make sense. RenderBundleEncoder is a child class of RenderEncoderBase, which has internal arguments [[depthReadOnly]] and [[stencilReadOnly]], we can set those internal arguments to false as default. Then RenderBundleEncoderDescriptor\u0027s counterpart arguments depth/stencilReadOnly are not necessary. And we can also do the validation for setPipeline, no matter it is called by an instance of renderPassEncoder, or renderBundleEncoder. But renderBundleEncoder\u0027s validation always succeed because depth/stencilReadOnly are always false. The check actually defers to executeBundles: we need to make sure that every renderbundle\u0027s every pipeline\u0027s writeDepth/Stencil should be compatible with renderPass\u0027s depth/stencilReadOnly arguments.\n\nEven we include these redundant depth/stencilReadOnly in RenderBundleEncoderDescriptor in the spec, they are actually useless. We still need to check the compatibility during executeBundles. And these redundant arguments has side effect: these two arguments in RenderBundleEncoderDescriptor might be set true and mislead validation.\n\nSo I tend to remove depth/stencilReadOnly at RenderBundleEncoderDescriptor (https://gpuweb.github.io/gpuweb/#dictdef-gpurenderbundleencoderdescriptor). And just say that the internal values [[depthReadOnly]] (https://gpuweb.github.io/gpuweb/#dom-gpurenderencoderbase-depthreadonly-slot) and [[stencilReadOnly]] in RenderEncoderBase are false by default, and they can be set during beginRenderPass(). \n\nWDYT?",
      "parentUuid": "357f9c59_3b814da9",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96bba38_efe1f971",
        "filename": "src/dawn_native/RenderEncoderBase.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-13T04:37:36Z",
      "side": 1,
      "message": "\u003e Even we include these redundant depth/stencilReadOnly in RenderBundleEncoderDescriptor in the spec, they are actually useless.\n\nI believe this is because Mozilla\u0027s implementation would like to directly record the native bundle in the backends (like the D3D12 bundle or Vulkan secondary command buffer). Doing so requires knowing if the render pass writes to any depth/stencil attachments for the render pass (Vulkan\u0027s render pass + pipeline compatibility).",
      "parentUuid": "3bc21907_15225fe1",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15efb681_345ba55a",
        "filename": "src/dawn_native/RenderEncoderBase.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-13T19:10:08Z",
      "side": 1,
      "message": "Adding TODOs sounds good, as a u-u-nit: maybe we can have explicit false,false in RenderBundleEncoder creation. The defaulting here doesn\u0027t bring much more readability and risks being forgotten and puzzling readers ðŸ˜Š\n\nYeah I believe the booleans are there in RenderBundleEncoderDescriptor because of wgpu. I distinctly remember suggesting that we automatically compute them during encoding, so I assume Dzmitry pushed back.",
      "parentUuid": "f96bba38_efe1f971",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a6551a7_26c5bcfa",
        "filename": "src/dawn_native/RenderEncoderBase.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-14T04:05:50Z",
      "side": 1,
      "message": "Done.\n\nGood to know previous discussions around the spec. Thank you, Austin and Corentin. So, I think I will add these two parameters depthReadOnly/stencilReadOnly into RenderBundleEncoderDescriptor and do a similar but fake validation in RenderBundle.SetPipeline(), and do a real validation in RenderPassEncoder.executeBundles() in the following patch.\n\nFor the spec problem, maybe I can submit a PR and discuss it again. I still think that adding these two parameters in RenderBundleEncoderDescriptor makes no sense. One more reason is that depthReadOnly/stencilReadOnly need to be the same (true or false) if the attachment\u0027s format has both depth and stencil aspect. But we cannot know that information in RenderBundle and we can set depthReadOnly and stencilReadOnly at will, which is nonsense though. But I may defer this to the time when I finish the implementation of readonly depth/stencil attachment in various backends and know more about the situations/problems Dzmitry defended.",
      "parentUuid": "15efb681_345ba55a",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd408dbd_2daa6606",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-12T07:04:30Z",
      "side": 1,
      "message": "u-nit: this is used only in CreateRenderPassDescriptor and could take advantage of defaults (only size {kSize, kSize}, usage and format need to be specified)",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "403a3f90_389a5d06",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Done\n\nI feel like the CreateTexture() function may be needed by more caller(s) if we added more tests later. But we can do that later if needed.",
      "parentUuid": "cd408dbd_2daa6606",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa6c7052_9ec78931",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd408dbd_2daa6606",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30ff8606_4c2ace60",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-12T07:04:30Z",
      "side": 1,
      "message": "Note: not here but in the CTS we will have to check that [[writes_stencil]] is computed correctly based on all the op and stencil vs. back.",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9adb95b7_5c82e0ca",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "30ff8606_4c2ace60",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22a496ab_14bb2564",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Ack. You are talking about CTS, not any change needed in this patch, right? \n\nbtw, writeDepth can be set true while depth test is actually disabled (depth\u0027s compareFunction is \"Always\", which means depth test always passes. No depth test at all). And the WebGPU spec doesn\u0027t require depth test to be really enabled when we set writeDepth: https://www.w3.org/TR/webgpu/#render-pipeline-creation. Note that WebGPU doesn\u0027t have an explicit boolean named enableDepthTest like some native graphics APIs. \n\nstencil is the same as depth.",
      "parentUuid": "30ff8606_4c2ace60",
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a3495c6_bca44fef",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-12T07:04:30Z",
      "side": 1,
      "message": "nit: stencil\n\nNote also that we have a number of RenderPass / RenderPipeline compatibility tests in RenderPipelineValidationTests. Maybe they are there already?",
      "range": {
        "startLine": 116,
        "startChar": 13,
        "endLine": 116,
        "endChar": 19
      },
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a65a567f_4efd89a2",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Done.\n\nYeah. I also noticed that there are two tests related to pipeline and pass compability in RenderPipelineValidationTest: one is for multisample, another is for vertexOnly pipeline. We can move them into this file if needed. I feel like that we need a lot more tests for pipeline and pass compatibility tests. So I created a standalone test file here in order to reuse functions. Many of them are not related to issue 485, actually.",
      "parentUuid": "7a3495c6_bca44fef",
      "range": {
        "startLine": 116,
        "startChar": 13,
        "endLine": 116,
        "endChar": 19
      },
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f93dc890_38bad36d",
        "filename": "src/tests/unittests/validation/PipelineAndPassCompatibilityTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-10-12T18:00:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a3495c6_bca44fef",
      "range": {
        "startLine": 116,
        "startChar": 13,
        "endLine": 116,
        "endChar": 19
      },
      "revId": "86ed4060641a5e905e928b58448ae841eda0e481",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}