{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21d70d63_5f1e0456",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.cc",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-12-04T21:04:03Z",
      "side": 1,
      "message": "`[1]`",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c89427a8_25f3f967",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.cc",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-12-04T21:04:03Z",
      "side": 1,
      "message": "Comment removed by: Ben Clayton; Reason: double comment.",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3678ed26_5d5116d9",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 282,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-12-04T20:58:45Z",
      "side": 1,
      "message": "[1]",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f911f926_ef3c7173",
        "filename": "test/tint/array/assign_to_function_var.wgsl.expected.glsl",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-12-04T20:50:13Z",
      "side": 1,
      "message": "Shouldn\u0027t this be `0_1` instead of `0_0`?",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a21f52ed_1d2edd52",
        "filename": "test/tint/array/assign_to_function_var.wgsl.expected.glsl",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-12-04T20:58:45Z",
      "side": 1,
      "message": "Hmm.... This feels like sharing same block definition similar to [1]? The block name is `src_uniform_block_0_0` for both\n\nBut looks like glsl ast_printer has something wrong when doing wgsl-\u003eglsl, it simply append `_ubo` and `_ssbo`",
      "parentUuid": "f911f926_ef3c7173",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "208d1968_2b52f65c",
        "filename": "test/tint/array/assign_to_function_var.wgsl.expected.glsl",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-12-04T21:04:03Z",
      "side": 1,
      "message": "It is because the same structure `S` is used by two different binding points and `wrapper_structs.GetOrCreate` (`[1]`) will only call the lambda on the first time the map entry is created.\n\nBecause of this, I\u0027m unconvinced this CL is fixing the issue it is trying to.",
      "parentUuid": "a21f52ed_1d2edd52",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "748670d4_e97213d9",
        "filename": "test/tint/array/assign_to_function_var.wgsl.expected.glsl",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-12-04T21:32:33Z",
      "side": 1,
      "message": "They are sharing the same struct only when their inner content is the same, and this won\u0027t fail the GLSL compiler/linker. (Failure case is two block with same name having different inner content)\n\nDo you think we need to explicitly declare these blocks with same inner content as different blocks in wgsl?",
      "parentUuid": "208d1968_2b52f65c",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec266244_1c4fdffd",
        "filename": "test/tint/array/assign_to_function_var.wgsl.expected.glsl",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-12-05T14:50:40Z",
      "side": 1,
      "message": "```\nstruct X { x : vec4f }\nstruct Y { y : vec4i }\n\n@group(0) @binding(0) var\u003cuniform\u003e ð : X;\n@group(0) @binding(0) var\u003cuniform\u003e ñ : Y;\n\n@vertex fn V() -\u003e @builtin(position) vec4f {\n  _ \u003d ð;\n  return vec4f();\n}\n\n@fragment fn F() {\n  _ \u003d ñ;\n}\n```\n\n`ð` and `ñ` are unicode, which get renamed to `tint_symbol` (with a suffix if that\u0027s already taken).\nGiven that the [`Renamer` transform](https://dawn.googlesource.com/dawn/+/refs/heads/main/src/tint/lang/glsl/writer/ast_printer/ast_printer.cc#154) comes after the [`SingleEntryPoint` transform](https://dawn.googlesource.com/dawn/+/refs/heads/main/src/tint/lang/glsl/writer/ast_printer/ast_printer.cc#150), I\u0027d expect this to produce the two shaders:\n\n```\n#version 310 es\n\nlayout(binding \u003d 0, std140) uniform tint_symbol_block_0_0_ubo {\n  vec4 inner;\n} tint_symbol;\n\nvec4 V() {\n  return vec4(0.0f);\n}\n\nvoid main() {\n  gl_PointSize \u003d 1.0;\n  vec4 inner_result \u003d V();\n  gl_Position \u003d inner_result;\n  gl_Position.y \u003d -(gl_Position.y);\n  gl_Position.z \u003d ((2.0f * gl_Position.z) - gl_Position.w);\n  return;\n}\n```\n\nand \n\n```\n#version 310 es\nprecision highp float;\n\nlayout(binding \u003d 0, std140) uniform tint_symbol_block_0_0_ubo {\n  ivec4 inner;\n} tint_symbol;\n\nvoid F() {\n}\n\nvoid main() {\n  F();\n  return;\n}\n```\n\nWhich I believe violatess the `Failure case is two block with same name having different inner content` rule.\n\nHowever, using the `tint` command line, I saw that it had renamed the second block to `tint_symbol_1_block_0_0_ubo`. This is unfortunately [a different bug we need to fix](https://bugs.chromium.org/p/tint/issues/detail?id\u003d2112).\n\nI think this issue is real.\n\nWith all that said - `two block with same name having different inner content` seems like it\u0027s easily done by simply using a vertex and fragment shader compiled from two separate WGSL shaders, where both shaders use a different type for the same binding location + name? In which case, it seems like Dawn needs to provide a unique name for these.",
      "parentUuid": "748670d4_e97213d9",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75fcaac_e3d80c05",
        "filename": "test/tint/array/assign_to_function_var.wgsl.expected.glsl",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-12-05T18:31:41Z",
      "side": 1,
      "message": "question: can you have two blocks with the same binding point across stages but are not shared? If two different blocks bind to the same 0, 0 bindpoint, would bindgrouplayout of the shader fails that? (Or this is dawn concept, tint standalone should accept this?)",
      "parentUuid": "ec266244_1c4fdffd",
      "revId": "886962869c3625061ca11389de242b2845fea36d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}