{
  "comments": [
    {
      "key": {
        "uuid": "15b8eba8_9df52d43",
        "filename": "BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2019-09-13T19:22:17Z",
      "side": 1,
      "message": "The intended way to use this warning is to add API_AVAILABLE(macos(10.11)) here https://cs.chromium.org/chromium/src/third_party/dawn/src/dawn_native/metal/BackendMTL.h?sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d22 so that it reads\n\n    class API_AVAILABLE(macos(10.11)) Backend : public BackendConnection {\n\nThen the compiler knows that this class is only instantiated on 10.11 and won\u0027t warn about stuff available in 10.11+ (while still warning you if you call a 10.12+ function, which is a good thing).\n\nAnd then in Connect() further down you do\n\n    BackendConnection* Connect(InstanceBase* instance) {\n        if (@available(mac 10.11, *)) {\n            return new Backend(instance);\n        }\n        return nullptr;\n    }\n\nand you remove IsMetalSupported(). Then everything should build fine with this warning enabled.\n\nI wrote some docs on this a while ago: http://clang.llvm.org/docs/LanguageExtensions.html#objective-c-available\n\nDoes that work?",
      "revId": "e04e1fd1f919732715e0e4bb101eb1acbd5180cf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b1de526_56778c8b",
        "filename": "BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-09-14T00:46:04Z",
      "side": 1,
      "message": "Makes sense, the problem is that we have a whole backend that is predicated on having Metal available. I tried what you suggested but it would require adding METAL_AVAILABLE in about a hundred places when really the whole backend but Connect is predicated on having metal available.\n\n(I am #defining METAL_AVAILABLE API_AVAILABLE(macos(10.11), ios(8.0))",
      "parentUuid": "15b8eba8_9df52d43",
      "revId": "e04e1fd1f919732715e0e4bb101eb1acbd5180cf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbd026b3_ba5c55be",
        "filename": "BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2019-09-14T00:55:41Z",
      "side": 1,
      "message": "100 places doesn\u0027t seem all that much. Are you opposed to adding it? The warning gets you a lot of safety, which might come in handy if your metal code is so widely spread. As-is, it\u0027s easy to call metal code from non-metal code.",
      "parentUuid": "6b1de526_56778c8b",
      "revId": "e04e1fd1f919732715e0e4bb101eb1acbd5180cf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3060a993_19bc6125",
        "filename": "BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-09-14T01:54:33Z",
      "side": 1,
      "message": "Dawn is a graphics API built upon Metal and all of dawn_native/metal can be accessed only through that Connect method or MetalBackend.h entrypoints (that require a Metal backend object to use). Users of Dawn don\u0027t need to see anything related to Metal.\n\nAs discussed offline I ran into issues adding API_AVAILABLE annotations (crbug.com/1004024) so instead is it possible to up the min_deployment_target to 10.11 for only some GN targets? As explained above Dawn could easily be made safe and the rest of the code would need to use API_AVAILABLE(macos(10.12)) when using newer Metal features.",
      "parentUuid": "bbd026b3_ba5c55be",
      "revId": "e04e1fd1f919732715e0e4bb101eb1acbd5180cf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9de52ab1_eb82c52c",
        "filename": "BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2019-09-14T02:08:35Z",
      "side": 1,
      "message": "\u003e Dawn is a graphics API built upon Metal and all of dawn_native/metal can be accessed only through that Connect method or MetalBackend.h entrypoints (that require a Metal backend object to use). Users of Dawn don\u0027t need to see anything related to Metal.\n\nUnderstood; else you\u0027d have to export this -Wno flag as a public_deps, which would make it everyone\u0027s problem :) But even dawn-internally having this warning enabled might be a good idea.\n\nCan you add a \"TODO: Consider using API_AVAILABLE annotations on all metal code in dawn once  crbug.com/1004024 is sorted out\"?\n\nBuilding a target with a newer deployment target is in theory doable, but it feels like it could cause all kinds of subtle issues. The linker seems to agree with that, it warns:\n\n```\n$ cat test1.cc\nint f();\nint main() { return f(); }\n$ cat test2.cc\nint f() { return 0; }\n$ clang -c test1.cc -mmacosx-version-min\u003d10.10\n$ clang -c test2.cc -mmacosx-version-min\u003d10.11\n$ clang test1.o test2.o -mmacosx-version-min\u003d10.10\nld: warning: object file (test2.o) was built for newer OSX version (10.11) than being linked (10.10)\n```",
      "parentUuid": "3060a993_19bc6125",
      "revId": "e04e1fd1f919732715e0e4bb101eb1acbd5180cf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}