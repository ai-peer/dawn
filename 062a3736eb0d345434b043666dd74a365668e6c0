{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2dea5737_b232d88e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-05-13T16:44:47Z",
      "side": 1,
      "message": "PTAL.\n\nThis is an alternative to https://dawn-review.googlesource.com/c/dawn/+/49400.\n\nInstead of enabling both ES and desktop in Windows, we split the #defines and enable only\nES on Windows.",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b136d81_fc932e1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-13T17:36:19Z",
      "side": 1,
      "message": "CHecking the logs, looks like ANGLE isn\u0027t being discovered on the GPU-less bots\n\nhttps://logs.chromium.org/logs/dawn/buildbucket/cr-buildbucket.appspot.com/8847331439646247792/+/steps/Run_the_Dawn_end2end_tests_with_ANGLE_SwiftShader/0/stdout",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e575153_e1e7bf94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-13T17:37:44Z",
      "side": 1,
      "message": "Was that ever working though?",
      "parentUuid": "4b136d81_fc932e1a",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b30384d_40371b6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-13T17:37:44Z",
      "side": 1,
      "message": "LGTM",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd7cb7c6_c53c744b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-05-13T19:21:22Z",
      "side": 1,
      "message": "It\u0027s working on Windows as of this change. If you look at the win-clang-* bots, you\u0027ll see that SwANGLE running. E.g. win-clang-rel-x64:\n\nhttps://logs.chromium.org/logs/dawn/buildbucket/cr-buildbucket.appspot.com/8847331439646247696/+/steps/Run_the_Dawn_end2end_tests_with_ANGLE_SwiftShader/0/stdout\n\nIt wasn\u0027t being run before this change because the OpenGLES backend was only being built on Linux, where some X11 issue is preventing SwANGLE from starting. (That\u0027s still the case, but at least Windows GLES gives us some coverage until it\u0027s fixed.)",
      "parentUuid": "4e575153_e1e7bf94",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75983dd8_6f211ce6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-13T20:44:09Z",
      "side": 1,
      "message": "ah right, I had looked at the wrong bot. thanks!",
      "parentUuid": "dd7cb7c6_c53c744b",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46effa5b_2ff56e0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:24:43Z",
      "side": 1,
      "message": "LGTM",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "245b70b2_f6a0019f",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:24:43Z",
      "side": 1,
      "message": "This idea looks good overall, but what do you think of having an extra variable and define for all opengl? They would become:\n\n - dawn_enable_opengles / DAWN_ENABLE_OPENGLES, in the declare_args() here\n - dawn_enable_dekstop_gl / DAWN_ENABLE_DESKTOP_GL in the declare_args() here\n - dawn_enable_opengl / DAWN_ENABLE_OPENGL that\u0027s set to dawn_enable_opengles | dawn_enable_desktop_gl.\n\nIn most cases we only care whether one of the GL backends is enabled, and only in a few cases (in InstanceBase and BackendBindings?) we care about the difference.",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4270bf7_f4ec7ad5",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-05-17T13:54:53Z",
      "side": 1,
      "message": "It would be terser that way. Should it be in dawn_features.gni, though? That feels a little weird, in that clients could set it (wrongly). Or is there a better place?",
      "parentUuid": "245b70b2_f6a0019f",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4c8e0cf_e4ca36db",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T14:05:29Z",
      "side": 1,
      "message": "Clients can\u0027t set it if you put it outside of the declare_args() like dawn_supports_glfw_for_windowing",
      "parentUuid": "a4270bf7_f4ec7ad5",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9a07207_1184e159",
        "filename": "src/utils/BackendBinding.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:24:43Z",
      "side": 1,
      "message": "How hard would it be to implement the \"new\" swapchain for GL? It would allow removing this file completely as well as some other hacks.",
      "revId": "062a3736eb0d345434b043666dd74a365668e6c0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}