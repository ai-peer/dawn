{
  "comments": [
    {
      "key": {
        "uuid": "4b9ae3e0_81b96c61",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 374,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2018-09-20T16:05:20Z",
      "side": 1,
      "message": "\u003cbikeshed\u003eCould this just be a PassEncoder?\u003c/encoder\u003e",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11f5ef3f_2f33c834",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 783,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2018-09-20T16:05:20Z",
      "side": 1,
      "message": "I\u0027m sure you\u0027ve thought this through, but it\u0027s a bit unfortunate to have this duplication between the encoders (set bind group, set push constants). I know it\u0027s possible to inherit from a common interface in WebIDL; perhaps we should have such a mechanism at the Dawn code gen level as well?\n\nAnyway it\u0027s only two functions from what I can tell, and inherited at the implementation level, so no big deal for now.",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3397b2c5_4ba7e115",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-09-19T23:37:04Z",
      "side": 1,
      "message": "The commands from CommandBufferBuilder were copied unchanged except for this check that was added to all of them.",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e67a3db_70f53380",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-09-19T23:37:04Z",
      "side": 1,
      "message": "And using mAllocator-\u003e instead of mAllocator.",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64eb572e_d62bb0cf",
        "filename": "src/dawn_native/ProgrammablePassEncoder.h",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2018-09-20T16:05:20Z",
      "side": 1,
      "message": "Copied comment; doesn\u0027t apply to this class?",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb645850_de7fb3e3",
        "filename": "src/dawn_native/ProgrammablePassEncoder.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2018-09-20T16:05:20Z",
      "side": 1,
      "message": "Isn\u0027t this already done?",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3fc0f05_7a939147",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2018-09-20T16:05:20Z",
      "side": 1,
      "message": "Not new to this patch, but would it be possible to have Allocate\u003c\u003e (or a variant of it) also do the placement new?",
      "revId": "59be637e680b0f012dffec7a20b0c59b918e75a9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}