{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "473b00f1_38471ab2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-26T16:52:52Z",
      "side": 1,
      "message": "Hi Austin, PTAL. Thanks",
      "revId": "004521699ead070ed975080a78bf8ca799ee0d38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f64c8ab_efdf5cf3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-26T17:58:25Z",
      "side": 1,
      "message": "I\u0027m questionable about this change because the purpose of std::vector is so that all the values in the list are stored contiguously. with std::deque, it\u0027s more like a doubly-linked-list with separate allocations holding the nodes. And with std::multimap, it is also separate allocations per node - as opposed to one allocation for all the values under a given serial",
      "revId": "004521699ead070ed975080a78bf8ca799ee0d38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20fa1be3_89363855",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-26T18:54:58Z",
      "side": 1,
      "message": "Based on [1], std::deque should be implemented with a sequence of individually allocated fixed-size arrays, Not like std::list. \nAnd we can still use `std::vector`, but I think it is better to just use `std::vector\u003cSerial,Value\u003e` instead of `std::vector\u003cSerial, std::vector\u003cValue\u003e\u003e`. It may need more memory for some cases, but it doesn\u0027t need a heap allocation per serial, and all data is continuous, and it is good for CPU cache.\n\nThe complexity (efficiency) of common operations on deques is as follows:\n - Random access - constant O(1).\n - Insertion or removal of elements at the end or beginning - constant O(1).\n - Insertion or removal of elements - linear O(n).\n \n[1] https://en.cppreference.com/w/cpp/container/deque\n\n\nFor SerialMap, it is used at three places. \n - d3d::Queue::mSystemEventReceivers: In most case, one serial will only has one receiver. using a std::vertex per key is not necessary.\n - d3d11::Queue::mPendingMapBuffers: With Jie\u0027s CL (using system memory for staging buffer). This map is not used for most cases.\n - QueueBase::mTasksInFlight: the original approach cloud be better better (depends on how many items per key), but we can use `std::flat_multimap` if c++23 is used and to avoid one allocation per node. or we can use std::pmr [2].\n \n[2] https://en.cppreference.com/w/cpp/memory/polymorphic_allocator",
      "parentUuid": "5f64c8ab_efdf5cf3",
      "revId": "004521699ead070ed975080a78bf8ca799ee0d38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed209180_b8ed1d0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-26T20:02:49Z",
      "side": 1,
      "message": "deque might be O(1), but it\u0027s still extra indirections and allocations:\n\u003e which means indexed access to deque must perform two pointer dereferences, compared to vector\u0027s indexed access which performs only one.\n\nSerialQueue is used a lot, and it can hold a lot of values - especially as things get deleted and enqueued for deletion. I think the number of values is often much greater than the number of serials.\nSo deque\u003cpair\u003cSerial, Value\u003e\u003e not only adds a lot of indirections, but it will close to double the memory usage. Serial is a 64 bit number, and Value is often a pointer",
      "parentUuid": "20fa1be3_89363855",
      "revId": "004521699ead070ed975080a78bf8ca799ee0d38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4f28fbd_84ab611a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-26T21:07:11Z",
      "side": 1,
      "message": "Then we can use `std::vector\u003cstd::pair\u003cSerial, Value\u003e\u003e`, just `enqueue()` and `dequeue()` will be slight expensive than `std::deque`. BTW, the change uses `std::upper_bound` which is a binary search, it should be faster.\n\nWithout the change, it is complex to make `for (const auto [serial, value] : serialMap)` work. Probably it is better to just not use `SerialMap` for `d3d::Queue::mSystemEventReceivers`. Probably I will just change it to a `std::map` instead, WDYT?",
      "parentUuid": "ed209180_b8ed1d0d",
      "revId": "004521699ead070ed975080a78bf8ca799ee0d38",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}