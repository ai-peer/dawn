{
  "comments": [
    {
      "key": {
        "uuid": "8de417ce_b4e782c1",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 365,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-25T09:56:31Z",
      "side": 1,
      "message": "nit: CreateZeroedBuffer and setSubData them to 0 so we know the memory accesses worked and we\u0027re not reading leftover data that happens to be correct.",
      "range": {
        "startLine": 365,
        "startChar": 17,
        "endLine": 365,
        "endChar": 29
      },
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae08153_7f7df5ff",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 365,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-28T01:19:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8de417ce_b4e782c1",
      "range": {
        "startLine": 365,
        "startChar": 17,
        "endLine": 365,
        "endChar": 29
      },
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ffa2411_08145888",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 383,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-25T09:56:31Z",
      "side": 1,
      "message": "All of the buffers could contain exactly one uint which are only tested as data, and not used to configure the rendering. Verifying that \"the vertex coordinate were written correctly to make a triangle\" is not a minimal test, the minimal test is \"reading the vertex buffer produces what was written in it previously\". So instead of drawing triangles I suggest drawing a single point, that checks the uint in the index buffer with \"gl_VertexID\", the value in the vertex buffer with a \"in uint vertexData\" in the VS (and maybe make that attribute an instance attribute), and the UBO + SSBO as usual, but again just a uint and not a color. The point could be green if everything is correct, and red otherwise.\n\nWe put too much semantic in our testing of things that are just manipulating data. This is a common issue in our Dawn tests and something I\u0027d like to avoid going forward.",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "337ab438_50b1c79d",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 383,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-26T06:58:33Z",
      "side": 1,
      "message": "I may argue that drawing a triangle is widely used in real cases for almost every rendering stuff. So drawing a simple triangle is meaningful that we can ensure the most useful cases (triangles) are correct. Moreover, the code itself is also a good examples for users/developers to learn and understand how to use WebGPU/Dawn in order to draw some samples. \n\nBut drawing a point is relative rare in real cases, and it is not very useful for developers. \n\nIn addition, I remember that native dEQP and Vulkan CTS also use a lot of triangles. \n\nWell, I am not saying that extreme simplicity (drawing a point) is wrong, but it may not be the only correct one. And drawing triangle(s) is meaningful too. \n\nIn these two tests, they are the most common way to use vertices and indices via buffer(s). So, writing some tests to cover the most common usage is not bad. However, drawing a point like you suggested may not be an intuitive way to use vertices and indices data.",
      "parentUuid": "1ffa2411_08145888",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa745b0_e0d0248a",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 383,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-26T15:18:55Z",
      "side": 1,
      "message": "I\u0027m almost convinced we should strive for minimal tests and see the GPU as a machine operating on data and not just on triangles. For 90% of tests, that shouldn\u0027t matter.\n\nThat said I\u0027d be ok moving forward with the current approach in this CL (with the two other comments fixed):\n\n - The discussion we need to have about testing style is much bigger than this CL and matters more for the WebGPU CTS than Dawn end2end tests.\n - Adding \"triangle style\" tests in this CL only marginally increase the maintenance cost.\n - Readonly storage buffers are taking a while to land and I don\u0027t want to block them further.",
      "parentUuid": "337ab438_50b1c79d",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de2da33f_143a964b",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 383,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-28T01:19:14Z",
      "side": 1,
      "message": "OK. The tests of GPU memory sync tests for buffer is done after this patch. I will implement readonly storage buffer on backend: D3D12 and Metal at first, then Vulkan and OpenGL.\n\nAnd I can refine this test if needed when those patches are under reivew.",
      "parentUuid": "6aa745b0_e0d0248a",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f01f8e97_dea67620",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 434,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-25T09:56:31Z",
      "side": 1,
      "message": "kWholeSize could be the default value here https://cs.chromium.org/chromium/src/third_party/dawn/src/utils/WGPUHelpers.h?q\u003dWGPUHelp\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d112 so we don\u0027t need to specify it all the time (like the JS API)",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ea2221e_248d8249",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 434,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-28T01:19:14Z",
      "side": 1,
      "message": "Done.\n\n\u0027offset\u0027 is 0 by default in JS, just like \u0027size\u0027. I also made that change.",
      "parentUuid": "f01f8e97_dea67620",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46f90579_0026b050",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 523,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-25T09:56:31Z",
      "side": 1,
      "message": "Same overall comments here.",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "725baedc_6cbbd847",
        "filename": "src/tests/end2end/GpuMemorySynchronizationTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 523,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-28T01:19:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "46f90579_0026b050",
      "revId": "01226ecd00ae0f5b465727e2c32b87101a91021f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}