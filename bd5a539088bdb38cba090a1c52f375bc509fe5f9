{
  "comments": [
    {
      "key": {
        "uuid": "95b48267_e73aaaa9",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Allocations shouldn\u0027t fail with residency off.  Rather still made resident but less optimally, right?",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6d0ed46_49446bec",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-01-22T18:25:32Z",
      "side": 1,
      "message": "Resolving per in-person conversation. Description is correct.",
      "parentUuid": "95b48267_e73aaaa9",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3829eb1_85888d73",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: no need for extra indirection, handles are immutable with return type \"const \u0026\".",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ee16202_ef8ddf33",
        "filename": "src/dawn_native/d3d12/BufferD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Can this be a const member function and return a const pointer to a ResourceHeapAllocation?",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 60
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd0e454_b2e34f66",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "I do not think this #include is necessary in the header file. You should just be able to forward declare the ResourceHeapAllocation class.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 52
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e06388a4_5ad81b70",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbd0e454_b2e34f66",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 52
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3daa7e00_70cb604e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "If the user has multiple Windows open with WebGPU content, there will be multiple Dawn devices created, all of which share the same GPU.\n\nMight make sense for the residency manager to be more global in nature, such as per adapter?, instead of per-Dawn device.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 69
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "460ae676_5839f383",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Resolving - I believe you said there is some future architectural change planned that makes this not relevant.",
      "parentUuid": "3daa7e00_70cb604e",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 69
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24435f34_fa56cb4f",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "As part of a future change, we should hook ourselves up to IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent and proactively evict things, even if there is no WebGPU activity happening. \n\nPolling on TickImpl is a fine stopgap.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 32
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f61f61f2_a661b08b",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "24435f34_fa56cb4f",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 32
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13b44da2_fcf3cebb",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "There is already another location in this function that does \u0027ToBackend(source)\u0027 so it might be good to pull this out into its own local variable.",
      "range": {
        "startLine": 296,
        "startChar": 12,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0545366a_0d1e8db0",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13b44da2_fcf3cebb",
      "range": {
        "startLine": 296,
        "startChar": 12,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f146684f_5433b506",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 333,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Please include a comment that explains why you chose to divide the budget in half.  I think I know the answer but I want to make sure.",
      "range": {
        "startLine": 330,
        "startChar": 0,
        "endLine": 333,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07dbebd5_e0724e99",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 333,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f146684f_5433b506",
      "range": {
        "startLine": 330,
        "startChar": 0,
        "endLine": 333,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f6247cf_9b897b1a",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 338,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Can these calculations underflow? If so what is the plan to handle that?",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 338,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26bdd6c0_b1c5a668",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "UpdateVideoMemoryInfo appears to only be called from inside of the Device class.  If so, please make it be private to the class.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b532ea0_2275c535",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26bdd6c0_b1c5a668",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "234aa768_c3e547a9",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "What is the rationale for making this be allocated on the heap instead of with the other class members like it was previously? Allocating it with the rest of the members makes for better locality of reference.  \n\n(I wish the other unique_ptrs here were also all normal member variables)",
      "range": {
        "startLine": 166,
        "startChar": 8,
        "endLine": 166,
        "endChar": 74
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8adc2922_e80aa8de",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: consider moving this into ResourceAllocatorManager as it\u0027s coupled closely with it.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6962702_12ec7918",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "I would have expected EnsureCanMakeResident to fail in cases where there is not enough memory to evict ... say, all of the buffers are still in outstanding command lists. Do we want to give it a shot anyways? \n\nAt a minimum, we should probably fail this call if the Evict returns a failure. I see that EnsureCanMakeResident ignores its return value.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 68
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cae5554a_3bf069e5",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "To avoid this cast, you should be able to create a std::unique_ptr\u003cHeap\u003e and return it to the caller.",
      "range": {
        "startLine": 54,
        "startChar": 56,
        "endLine": 54,
        "endChar": 90
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d9b7103_a24ee708",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Since we use the Heap* in both these calls, please pull it out into a local variable for better readability.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7db4dfc8_30c99526",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Resolving as EvictUponDealloc no longer exists.",
      "parentUuid": "2d9b7103_a24ee708",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33c12707_cd62d53a",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: move hard coded constants into static constexpr",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19f21f19_ad02337f",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "+1. In the declaration for the constant, please in include a comment describing the rationale for choosing the number.",
      "parentUuid": "33c12707_cd62d53a",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00e36ec8_5da2b91e",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "I am expecting EnsureCanMakeResident to be a hot path. Can we factor the multiplication by 0.8 into videoMemoryInfo-\u003edawnBudget ahead of time so we can avoid doing the multiplication on every call to EnsureCanMakeResident?",
      "range": {
        "startLine": 107,
        "startChar": 12,
        "endLine": 107,
        "endChar": 72
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88ba82cb_90935235",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00e36ec8_5da2b91e",
      "range": {
        "startLine": 107,
        "startChar": 12,
        "endLine": 107,
        "endChar": 72
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "569bf1c9_bf3d90c4",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "This code seems to evict the oldest without checking if they\u0027re still being used by the GPU. This isn\u0027t allowed by Evict(). I think we also need to also track the heap\u0027s serial and only evict those where pendingSerial \u003e heapSerial.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "407ef35c_3cd1878b",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "We should bubble up the error returned by Evict to the caller.",
      "range": {
        "startLine": 123,
        "startChar": 16,
        "endLine": 123,
        "endChar": 83
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a137d37_20af98ed",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "569bf1c9_bf3d90c4",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bed2877_39095234",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "407ef35c_3cd1878b",
      "range": {
        "startLine": 123,
        "startChar": 16,
        "endLine": 123,
        "endChar": 83
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68409727_6398e50b",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Suggest to invalidate the heap\u0027s entry after removal. That way, should Evict(...) get called twice, it doesn\u0027t stomp over memory.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e45b35c0_93374df0",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "In the suballocated case, how do we avoid evicting the heap multiple times for each suballocation?",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 192,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4279b19d_13ae77a0",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "Please reserve the m prefix for member variables instead of parameters.",
      "range": {
        "startLine": 203,
        "startChar": 1,
        "endLine": 203,
        "endChar": 68
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "450062e8_4be51ce2",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "Not every item in the vector is a heap. Some are sub-allocations inside of a heap. Please rename to makeResidentList or something similar.",
      "range": {
        "startLine": 203,
        "startChar": 52,
        "endLine": 203,
        "endChar": 65
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9aa0fdc2_77e1fb17",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4279b19d_13ae77a0",
      "range": {
        "startLine": 203,
        "startChar": 1,
        "endLine": 203,
        "endChar": 68
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35c234dd_a0301664",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "unit: rename to committedSize?",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77ba0383_1ea99196",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: consider adding a comment about further optimization (ie. calling a blocking function on the render thread \u003d\u003d not good).",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64dae976_b85ae6d9",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77ba0383_1ea99196",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e581b437_2857edb6",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "Please make this member variable be private with a public function that does the right operations on the list entry.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 30
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbe93444_1026b3c4",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e581b437_2857edb6",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 30
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8edca11b_a3a02793",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "Instead of storing a mIsResident flag, can we determine the same information by seeing either the list entry has front or back pointers?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "219a9c9e_73e6a726",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8edca11b_a3a02793",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82b576d7_b0eefbd9",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "Please place LRUEntry and LRUCache into a separate header/cpp file.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 58,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df7e756b_d7eb5852",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "This class is complicated enough that it deserves a summary comment describing its purpose and how it is expected to be called.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 28
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6c6f1bf_6ceff643",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Odd to see these overloads - the issue is the memory allocator directly stores Heaps instead of ResourceAllocations. The latter can represent both resources types. Perhaps enough of a case to go back and consider simplifying.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed64f866_715eb06c",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6c6f1bf_6ceff643",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9069d42d_9ad81305",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "To make it more clear what is being tracked, please rename these to TrackResidentAllocation.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "015db0c7_c7824e19",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9069d42d_9ad81305",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c29578e2_d588c721",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "This mPendingHeaps member variable seems unused.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 81,
        "endChar": 59
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf1a166_071e53cd",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c29578e2_d588c721",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 81,
        "endChar": 59
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88c5bf62_898f5f4c",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 298,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "No need to re-calculate. Simply pass `resourceInfo.SizeInBytes`.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10c06ec7_4580299b",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 298,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88c5bf62_898f5f4c",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6db15a61_a7c5d4c5",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Not a fan of exposing LRU stuff to `ResourceHeapAllocation`, these should never be used outside the ResidencyManager.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6841cb4_235799e2",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-10T20:59:06Z",
      "side": 1,
      "message": "One way to avoid O(N) deletions and lookups in the list is to have the list entries themselves be in ResourceHeapAllocation directly. That means going a step further and having LRUEntry be a straight up member of ResourceHeapAllocation. You can use CONTAINING_RECORD to get back to ResourceHeapAllocation and access mResource from there. No need to store a duplicate pointer in LRUEntry.  \n\nTo delete yourself from the list, you simply de-link yourself from it in your destructor. No O(N) lookups required. To find out whether a ResourceHeapAllocation is in the list, check whether the forward and backward pointers are non-nullptr. No O(N) lookups required.",
      "parentUuid": "6db15a61_a7c5d4c5",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecfea1fa_0b861c9b",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-14T18:09:45Z",
      "side": 1,
      "message": "+1 or maybe `EvictableResourceHeapAllocation : ResourceHeapAllocation`.",
      "parentUuid": "a6841cb4_235799e2",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46facc95_fb37bba6",
        "filename": "src/tests/unittests/d3d12/LRUTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Still need to review.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9e7cfe7_57e7fba4",
        "filename": "src/tests/unittests/d3d12/LRUTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Resolving because file has been removed",
      "parentUuid": "46facc95_fb37bba6",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59bda0c0_383bda71",
        "filename": "src/tests/unittests/d3d12/LRUTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Suggest to keep the generic LRU not tied to D3D12. Only missing a DummyEntry which could be passed to LRUCache. Then LRUCache can be in seperate CL.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b8f65a3_b9b538c7",
        "filename": "src/tests/unittests/d3d12/LRUTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-02-04T21:58:13Z",
      "side": 1,
      "message": "Resolving because file has been removed",
      "parentUuid": "59bda0c0_383bda71",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}