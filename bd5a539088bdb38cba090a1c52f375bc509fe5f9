{
  "comments": [
    {
      "key": {
        "uuid": "95b48267_e73aaaa9",
        "filename": "src/dawn_native/Toggles.cpp",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Allocations shouldn\u0027t fail with residency off.  Rather still made resident but less optimally, right?",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3829eb1_85888d73",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: no need for extra indirection, handles are immutable with return type \"const \u0026\".",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ee16202_ef8ddf33",
        "filename": "src/dawn_native/d3d12/BufferD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Can this be a const member function and return a const pointer to a ResourceHeapAllocation?",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 60
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13b44da2_fcf3cebb",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "There is already another location in this function that does \u0027ToBackend(source)\u0027 so it might be good to pull this out into its own local variable.",
      "range": {
        "startLine": 296,
        "startChar": 12,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f146684f_5433b506",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 333,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Please include a comment that explains why you chose to divide the budget in half.  I think I know the answer but I want to make sure.",
      "range": {
        "startLine": 330,
        "startChar": 0,
        "endLine": 333,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f6247cf_9b897b1a",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 338,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Can these calculations underflow? If so what is the plan to handle that?",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 338,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26bdd6c0_b1c5a668",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "UpdateVideoMemoryInfo appears to only be called from inside of the Device class.  If so, please make it be private to the class.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "234aa768_c3e547a9",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "What is the rationale for making this be allocated on the heap instead of with the other class members like it was previously? Allocating it with the rest of the members makes for better locality of reference.  \n\n(I wish the other unique_ptrs here were also all normal member variables)",
      "range": {
        "startLine": 166,
        "startChar": 8,
        "endLine": 166,
        "endChar": 74
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8adc2922_e80aa8de",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: consider moving this into ResourceAllocatorManager as it\u0027s coupled closely with it.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6962702_12ec7918",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "I would have expected EnsureCanMakeResident to fail in cases where there is not enough memory to evict ... say, all of the buffers are still in outstanding command lists. Do we want to give it a shot anyways? \n\nAt a minimum, we should probably fail this call if the Evict returns a failure. I see that EnsureCanMakeResident ignores its return value.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 68
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cae5554a_3bf069e5",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "To avoid this cast, you should be able to create a std::unique_ptr\u003cHeap\u003e and return it to the caller.",
      "range": {
        "startLine": 54,
        "startChar": 56,
        "endLine": 54,
        "endChar": 90
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d9b7103_a24ee708",
        "filename": "src/dawn_native/d3d12/HeapAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-09T20:00:20Z",
      "side": 1,
      "message": "Since we use the Heap* in both these calls, please pull it out into a local variable for better readability.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 0
      },
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33c12707_cd62d53a",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: move hard coded constants into static constexpr",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "569bf1c9_bf3d90c4",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "This code seems to evict the oldest without checking if they\u0027re still being used by the GPU. This isn\u0027t allowed by Evict(). I think we also need to also track the heap\u0027s serial and only evict those where pendingSerial \u003e heapSerial.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68409727_6398e50b",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Suggest to invalidate the heap\u0027s entry after removal. That way, should Evict(...) get called twice, it doesn\u0027t stomp over memory.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35c234dd_a0301664",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "unit: rename to committedSize?",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77ba0383_1ea99196",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "nit: consider adding a comment about further optimization (ie. calling a blocking function on the render thread \u003d\u003d not good).",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6c6f1bf_6ceff643",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Odd to see these overloads - the issue is the memory allocator directly stores Heaps instead of ResourceAllocations. The latter can represent both resources types. Perhaps enough of a case to go back and consider simplifying.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88c5bf62_898f5f4c",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 298,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "No need to re-calculate. Simply pass `resourceInfo.SizeInBytes`.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6db15a61_a7c5d4c5",
        "filename": "src/dawn_native/d3d12/ResourceHeapAllocationD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Not a fan of exposing LRU stuff to `ResourceHeapAllocation`, these should never be used outside the ResidencyManager.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46facc95_fb37bba6",
        "filename": "src/tests/unittests/d3d12/LRUTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Still need to review.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59bda0c0_383bda71",
        "filename": "src/tests/unittests/d3d12/LRUTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-09T20:17:50Z",
      "side": 1,
      "message": "Suggest to keep the generic LRU not tied to D3D12. Only missing a DummyEntry which could be passed to LRUCache. Then LRUCache can be in seperate CL.",
      "revId": "bd5a539088bdb38cba090a1c52f375bc509fe5f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}