{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "473ddd4f_b40efbe4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T12:04:31Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f83cbf1_4a44726f",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T12:04:31Z",
      "side": 1,
      "message": "Any way to add a static assert in this one? (could be too hard because of std::vec and pointers so IDK)",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b86eb853_e83adb17",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-02T14:40:45Z",
      "side": 1,
      "message": "yea it was hard because the contents are complex types. I could try to do it but I\u0027d be manually incrementing the offsets with sizeof and aligning based on alignof.\ndo you think it\u0027s worth doing?",
      "parentUuid": "9f83cbf1_4a44726f",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3eb295_d7c1ff8c",
        "filename": "src/dawn/native/StreamImplTint.cpp",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T15:59:20Z",
      "side": 1,
      "message": "It\u0027s unfortunate there\u0027s no better way to do this. Let\u0027s leave as is I guess.",
      "parentUuid": "b86eb853_e83adb17",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46734844_4e7bdf2a",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-08-02T06:25:12Z",
      "side": 1,
      "message": "Is it possible to make this into a macro kinda like `DAWN_MAKE_CACHE_REQUEST`? IIUC, the `FromBlob` function could be implemented in the macro also.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 67,
        "endChar": 2
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "197e83e4_fe28cde7",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-02T14:40:45Z",
      "side": 1,
      "message": "mm it would be possible, but I was hoping having the serialization and deserialization the same would address most of what we want.\n\nsounds like you also would prefer to have the members declared exactly in one spot?\n\nI think the macro would help declare the struct and \"visit\" all the members, but I think we would still implement FromBlob and BlobCache::Store outside of the macro since making the namespaces work nicely will probably get messy.",
      "parentUuid": "46734844_4e7bdf2a",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 67,
        "endChar": 2
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4462a98_b8452e09",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-08-02T16:32:38Z",
      "side": 1,
      "message": "Ah.. because the `FromBlob` needs to be in `dawn::native`? Hmm actually do we even need the `static ResultOrError\u003cMslCompilation\u003e FromBlob(Blob blob);` in the struct declaration? Isn\u0027t the implementation below just for the template specialization? Or is it just to make it easier to pass the function later on in the `DAWN_TRY_LOAD_OR_RUN` call?\n\nAlso fine to not have macro for now then if the namespace stuff will be difficult.",
      "parentUuid": "197e83e4_fe28cde7",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 67,
        "endChar": 2
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "109b8c3b_f813a454",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-02T16:37:54Z",
      "side": 1,
      "message": "No it doesn\u0027t need to be in the struct declaration, it can be some free function too.\nIt\u0027s more that we need to specialize BlobCache::Store\u003cmetal::MslCompilation\u003e in namespace dawn::native, so the macro would need to have some rules about where you use it like in no namespace at all so the macro can build the required namespaces.\n\nBut overall, what is your general intent of the comment:\n - it\u0027s important to make it so you don\u0027t need to list members twice\n - it would be nice if you don\u0027t need to manually define Store and FromBlob\n - or both?",
      "parentUuid": "c4462a98_b8452e09",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 67,
        "endChar": 2
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "989cb475_4c3857c2",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-03T04:21:20Z",
      "side": 1,
      "message": "I decided to try this out in this patch. I only address not needing to list the members twice as defining the other methods weren\u0027t as simple if we want to keep the macro simple and shared with CacheRequest. We can probably do it with more complexity, but I don\u0027t think it\u0027s worth it right now.\nThe way it is now is actually quite nice as it decreases the complexity of the macro used for CacheRequest as well; there\u0027s now just a basic helper to declare members and VisitAll of them.\n\nPTAL again and let me know what you think of this approach, or if the previous one was better.",
      "parentUuid": "109b8c3b_f813a454",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 67,
        "endChar": 2
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a9be45d_c138e135",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T12:04:31Z",
      "side": 1,
      "message": "nit: could move this one as well I think.",
      "range": {
        "startLine": 184,
        "startChar": 25,
        "endLine": 184,
        "endChar": 39
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec32556e_1630a5fd",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-03T04:21:20Z",
      "side": 1,
      "message": "This one is const char* and we\u0027re turning it into std::string.\nWe could make it string_view, but a few of its uses use `const std::string\u0026` so we need it as a std::string anyway (hm.. unless I change those callsites..).",
      "parentUuid": "5a9be45d_c138e135",
      "range": {
        "startLine": 184,
        "startChar": 25,
        "endLine": 184,
        "endChar": 39
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "421ccb96_e1f0b0a9",
        "filename": "src/dawn/native/metal/ShaderModuleMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-03T09:07:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ec32556e_1630a5fd",
      "range": {
        "startLine": 184,
        "startChar": 25,
        "endLine": 184,
        "endChar": 39
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8794b97e_bb205200",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 201,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T12:04:31Z",
      "side": 1,
      "message": "nit: for",
      "range": {
        "startLine": 201,
        "startChar": 25,
        "endLine": 201,
        "endChar": 28
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f92ef776_a7a96a66",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 201,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-03T15:15:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8794b97e_bb205200",
      "range": {
        "startLine": 201,
        "startChar": 25,
        "endLine": 201,
        "endChar": 28
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96f03e98_97613cb9",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T12:04:31Z",
      "side": 1,
      "message": "nit: comment seems unrelated?",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bb1f4c0_7b638b79",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-03T15:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96f03e98_97613cb9",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23ccd4b1_14aa815b",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T12:04:31Z",
      "side": 1,
      "message": "Are we sure that std::apply calls tuple members in order?",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f33ada18_3537b320",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-02T14:40:45Z",
      "side": 1,
      "message": "in the C++23 noexcept specification, it does say that it\u0027s specified as unpacking std::get\u003cI\u003e where I is an index sequence - so that would be in order.\n\nbut the rest doesn\u0027t explicitly say it\u0027s in order (though it would be very not useful if the order were not guaranteed).\n\nwould you prefer to manually write our own helper to perform apply?\nfwiw, I think the invariant we absolutely care about is that the order is stable, not necessarily that it\u0027s from 0-\u003eN",
      "parentUuid": "23ccd4b1_14aa815b",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d47df34_7b2fd5f2",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-02T15:59:20Z",
      "side": 1,
      "message": "Thanks for checking. It\u0027s probably safe to assume it is stable this it is at least in the latest C++ spec.",
      "parentUuid": "f33ada18_3537b320",
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83bb6f3b_d5e4a722",
        "filename": "src/dawn/tests/unittests/native/StreamTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 283,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-08-02T06:25:12Z",
      "side": 1,
      "message": "If we make a macro then we could replace this here.",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 283,
        "endChar": 72
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fad9130b_8d0ffd56",
        "filename": "src/dawn/tests/unittests/native/StreamTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 283,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-03T15:15:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83bb6f3b_d5e4a722",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 283,
        "endChar": 72
      },
      "revId": "c695af4927f629ce0ea6159c7e1ccf11f1dfb912",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}