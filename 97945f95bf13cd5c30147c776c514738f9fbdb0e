{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "20476d67_a8fc3cc1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-12-16T16:09:33Z",
      "side": 1,
      "message": "Ben: PTAL. Thanks!",
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6dc39ef_6b8d3479",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "Looks good, Stephen! Mostly nits. A request for a few more tests.",
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3e4f7ac_33991472",
        "filename": "src/tint/transform/texture_1d_to_2d.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "If you find yourself using `if` chains of `As` or `Is`, it is more performant to use a `Switch()`:\n\n```\nreturn Switch(type, // use a blank trailing comment here to prevent clang-format joining these lines together\n  [\u0026](const type::SampledTexture* tex) -\u003e const ast::Variable* {\n      if (tex-\u003edim() \u003d\u003d ast::TextureDimension::k1d) {\n          auto* type2d \u003d ctx.dst-\u003ecreate\u003cast::SampledTexture\u003e(\n          ast::TextureDimension::k2d, CreateASTTypeFor(ctx, tex-\u003etype()));\n          return ctx.dst-\u003eVar(ctx.Clone(v-\u003esymbol), type2d, ctx.Clone(v-\u003eattributes));\n      }\n      return nullptr;\n  },\n  [\u0026](const type::StorageTexture* tex) -\u003e const ast::Variable* {\n     ...\n  }\n); // If you have no default, then no match will return a zero-initialized type.\n```",
      "range": {
        "startLine": 49,
        "startChar": 12,
        "endLine": 49,
        "endChar": 63
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b8c77da_829c78ed",
        "filename": "src/tint/transform/texture_1d_to_2d.cc",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "You can use `sem::CallTargetSignature::Parameter(sem::ParameterUsage::kTexture)` here.",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 80,
        "endChar": 99
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38d8bc1f_74ef180f",
        "filename": "src/tint/transform/texture_1d_to_2d.cc",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "Unnecessary, as no texture *parameter* is a reference.",
      "range": {
        "startLine": 81,
        "startChar": 39,
        "endLine": 81,
        "endChar": 52
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1d53781_537def83",
        "filename": "src/tint/transform/texture_1d_to_2d.cc",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "Ã¼bernit: Early new lines. All of this probably could fit on two lines.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 72
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71a433a_1f41f2d6",
        "filename": "src/tint/transform/texture_1d_to_2d.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "I think you can just do: `ctx.dst-\u003eCloneWithoutTransform(c)`.",
      "range": {
        "startLine": 93,
        "startChar": 33,
        "endLine": 93,
        "endChar": 93
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0babee0_39e4b591",
        "filename": "src/tint/transform/texture_1d_to_2d.cc",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "ohhh, fun. `0.5` is actually centre of the texel. You might be able to get away with `0`, but it rather depends on the wrapping mode of the texture. `0.5` is probably safer.",
      "range": {
        "startLine": 111,
        "startChar": 90,
        "endLine": 111,
        "endChar": 94
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6786596_e43f0941",
        "filename": "src/tint/transform/texture_1d_to_2d_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "Please use `ShouldRun()` for no-op tests. It proves that the transform is a no-op, but more importantly, that it didn\u0027t do an unnecessary clone which is a major performance issue right now.\n\nPlease add a few tests to check that other textures types \u0026 operations are not touched.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 32
      },
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a46b9518_8678c67c",
        "filename": "src/tint/transform/texture_1d_to_2d_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-12-16T19:55:36Z",
      "side": 1,
      "message": "Please can we have some tests for some of the other texture builtins. The full list of texture builtins are:\n\n* textureGather\n* textureGatherCompare\n* textureLoad\n* textureNumLayers\n* textureNumLevels\n* textureNumSamples\n* textureSample\n* textureSampleBias\n* textureSampleCompare\n* textureSampleCompareLevel\n* textureSampleGrad\n* textureSampleLevel\n* textureSampleBaseClampToEdge\n* textureStore\n\nI\u0027m sure some of these do not apply for 1d textures, so ignore those. I just want to make sure that the assumption of a `texture` and `coord` parameter is solid for all the builtins we currently have.",
      "revId": "97945f95bf13cd5c30147c776c514738f9fbdb0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}