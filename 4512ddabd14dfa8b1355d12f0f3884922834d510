{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1a67889c_1069f05c",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-16T00:43:20Z",
      "side": 1,
      "message": "[1]",
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9b3cb1b_471679e2",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-12T21:13:53Z",
      "side": 1,
      "message": "alternatively, we could populate `externalTextureOptions` instead. this is what the Vulkan backend does. Right now, this code looks like it\u0027s doing two redundant mappings of the external texture bindings.\n\nI\u0027m not 100% clear on what the difference between using bindingRemapper vs. externalTextureOptions.\n\nBen, could you advise?",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b68f450_c1c7e7f0",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-12T22:32:47Z",
      "side": 1,
      "message": "I think this map is for unpacking one external texture into two texture_2d bindings for two possible planes and one params bindings, and tint also adds some shader code for sampling from them.\n\nAnd then bindingRemapper will map two unpacked texture_2d bindings and params binding to d3d11 slots.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tint/writer/msl/generator_impl.cc;l\u003d215?q\u003dexternal_texture_options\u0026ss\u003dchromium\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tint/ast/transform/multiplanar_external_texture.cc;l\u003d502",
      "parentUuid": "e9b3cb1b_471679e2",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce06f634_6b9fa3af",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T08:45:14Z",
      "side": 1,
      "message": "This is what it does, and the backends all use the externalTextureOptions to tell Tint how to remap these bindings instead of the binding remapper. Is there a reason we use the binding remapper instead of BuildExternalTextureTransformBindings? (maybe I didn\u0027t understand your comment above)",
      "parentUuid": "6b68f450_c1c7e7f0",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6e4de90_e541c2d0",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-15T11:46:30Z",
      "side": 1,
      "message": "Everything said so far appears correct. Tint\u0027s design is that Dawn tells Tint where to place things, so the external texture transform is told what the separate plane bindings are. This allows Dawn to calculate all the binding locations ahead of time, without any need for querying. The binding remapper transform is a simple `A -\u003e B` binding translation.\n\nBased on this, I don\u0027t believe you need to remap the external texture bindings with the binding remapper transform, assuming you know where the final bindings will be at the time you configure the external texture transform.",
      "parentUuid": "ce06f634_6b9fa3af",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "843dc216_62bc243e",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T14:34:31Z",
      "side": 1,
      "message": "Thanks for the explanation. I tried putting the final slot numbers in externalTextureOptions, but it doesn\u0027t work. Looks like externalTextureOptions is used for placing external texture related shader code. It happens before converting WGSL to HLSL. So if I put final slot numbers in the externalTextureOptions, it is very likely the slot number will conflict with other bindings. It causes problem. right?",
      "parentUuid": "e6e4de90_e541c2d0",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9753b33a_4bf91339",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T14:48:53Z",
      "side": 1,
      "message": "BTW, I tired creating externalTextureOptions as below, The final binding points are {0, plane1Slot} and {0, paramsLot}.\n```\n    tint::writer::ExternalTextureOptions externalTextureOptions;\n    for (BindGroupIndex group : IterateBitSet(layout-\u003eGetBindGroupLayoutsMask())) {\n        const BindGroupLayoutBase* groupLayout \u003d layout-\u003eGetBindGroupLayout(group);\n        const auto\u0026 indices \u003d layout-\u003eGetBindingIndexInfo()[group];\n        for (const auto\u0026 [_, expansion] : groupLayout-\u003eGetExternalTextureBindingExpansionMap()) {\n            uint32_t plane1Slot \u003d indices[groupLayout-\u003eGetBindingIndex(expansion.plane1)];\n            uint32_t paramsSlot \u003d indices[groupLayout-\u003eGetBindingIndex(expansion.params)];\n            externalTextureOptions.bindings_map[{static_cast\u003cuint32_t\u003e(group),\n                                  static_cast\u003cuint32_t\u003e(expansion.plane0)}] \u003d {\n                {0u, plane1Slot},\n                {0u, paramsSlot}};\n        }\n    }\n```",
      "parentUuid": "843dc216_62bc243e",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b56125c_e4d1a909",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-15T18:30:12Z",
      "side": 1,
      "message": "what didn\u0027t work / what conflicts did you see?\n\nIf `indices` from `layout-\u003eGetBindingIndexInfo()[group];` specifies the final destinations, and those don\u0027t overlap, then I don\u0027t think there should be conflicts in the output.\n\nit could be helpful to use toggle dump_shaders to see what the final HLSL is and if it is/isn\u0027t what we expect",
      "parentUuid": "9753b33a_4bf91339",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f792d4f9_417721ec",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T19:19:55Z",
      "side": 1,
      "message": "For example.\n\nWGSL bindings:\n```\n@group(0) @binding(0) var s : sampler;\n@group(0) @binding(1) var t : texture_external;\n```\n\nIt should be converted to HLSL\n```\nTexture2D\u003cfloat4\u003e ext_tex_plane_1 : register(t0);\ncbuffer cbuffer_ext_tex_params : register(b0) {\n  uint4 ext_tex_params[13];\n};\nSamplerState s : register(s0);\nTexture2D\u003cfloat4\u003e t : register(t1);\n```\n\nSo in externalTextureOptions, I need to assign plane1 to `group(0) binding(0)`, and params to `@group(0) @binding(0)`, and then convert to `t0`and `b0`.\n\nHowever, there could be mapping from group(0) binding(0) for other bindings in bindingRemapper, so external texture relateding bindings will be converted to wrong slot.",
      "parentUuid": "1b56125c_e4d1a909",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4e03ed0_13a7f512",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T19:31:05Z",
      "side": 1,
      "message": "Basically, tint will translate external texture bindings twice, once by `externalTextureOptions` and then by bindingMapper. So it is very likely, the final slots specified in `externalTextureOptions` will be conflict with existing bindings , so they will be incorrectly translated by `bindingMapper` again.",
      "parentUuid": "f792d4f9_417721ec",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9739e881_4dae2fbf",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-15T19:41:21Z",
      "side": 1,
      "message": "Ah, I forgot that bindings can alias in the HLSL backend, as the type of binding acts as separate namespaces. \nIn this case, you might be right in that you have to do this in two remappings. I don\u0027t think the external texture transform will let you alias the bindings - `tint::ast::transform::BindingRemapper::Remappings::allow_collisions` is special voodoo for the HLSL backend.",
      "parentUuid": "e4e03ed0_13a7f512",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c72134a_451721fd",
        "filename": "src/dawn/native/d3d11/ShaderModuleD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-16T00:43:20Z",
      "side": 1,
      "message": "ah I see. OK this LGTM then with a comment at [1] to explain why we have the remapping it addition to the external texture transform",
      "parentUuid": "9739e881_4dae2fbf",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 84
      },
      "revId": "4512ddabd14dfa8b1355d12f0f3884922834d510",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}