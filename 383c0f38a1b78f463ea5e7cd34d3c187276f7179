{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c900706c_f708268c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-24T19:58:45Z",
      "side": 1,
      "message": "Haven\u0027t gone through this all yet, but why a shared pointer instead of just a poitner? I think this goes against the style guide on usage of shared pointers:\n\n`Do not design your code to use shared ownership without a very good reason. One such reason is to avoid expensive copy operations, but you should only do this if the performance benefits are significant, and the underlying object is immutable (i.e., std::shared_ptr\u003cconst Foo\u003e). If you do use shared ownership, prefer to use std::shared_ptr.`",
      "revId": "383c0f38a1b78f463ea5e7cd34d3c187276f7179",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "201cd500_5091e70b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-24T20:03:14Z",
      "side": 1,
      "message": "The main reason is that we are now using a polymorphic base class (now called Value), and are no longer storing all possible concrete types in a variant, so we need to heap allocate them. I would have used `unique_ptr`, except that gtest does not work with `unique_ptr` parameters as it copies the parameters.\n\nI considered another option, which is to use the type-erasure pattern of having a Value class that privately stores a shared_ptr. The only difference here is hiding the shared_ptr, but there is no runtime difference.",
      "parentUuid": "c900706c_f708268c",
      "revId": "383c0f38a1b78f463ea5e7cd34d3c187276f7179",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}