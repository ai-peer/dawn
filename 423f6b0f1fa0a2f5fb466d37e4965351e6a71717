{
  "comments": [
    {
      "key": {
        "uuid": "32704e0e_cafe53d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-08-04T22:00:06Z",
      "side": 1,
      "message": "PTAL, thank you! ",
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc41f0e8_919a3649",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-04T22:08:27Z",
      "side": 1,
      "message": "Adding Jiawei because Corentin is OOO",
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8f36a45_77d3967a",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-04T23:17:57Z",
      "side": 1,
      "message": "nit: we have a  GetSubresourcesAffectedByCopy helper",
      "range": {
        "startLine": 376,
        "startChar": 8,
        "endLine": 376,
        "endChar": 83
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "344b6c09_124f24fa",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-08-05T01:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8f36a45_77d3967a",
      "range": {
        "startLine": 376,
        "startChar": 8,
        "endLine": 376,
        "endChar": 83
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2360dcda_004e28d8",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 388,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-04T23:17:57Z",
      "side": 1,
      "message": "[copy splits in copy-from-staging-to-texture]",
      "range": {
        "startLine": 386,
        "startChar": 8,
        "endLine": 388,
        "endChar": 72
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fe6e5cd_4ea472c0",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-05T01:23:58Z",
      "side": 1,
      "message": "Can we put this piece of code and [1] together in one function?",
      "range": {
        "startLine": 386,
        "startChar": 2,
        "endLine": 410,
        "endChar": 5
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a700271d_ee140b22",
        "filename": "src/dawn_native/d3d12/QueueD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-04T23:17:57Z",
      "side": 1,
      "message": "Since we\u0027re using the optimallyAlignedBytesPerRow, then could we skip computing the [copy splits in copy-from-staging-to-texture]? I think it should always yield a single copy.\n\nWe can ASSERT this alignment in |CopyFromStagingToTexture|",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e85f0de6_f4ed385b",
        "filename": "src/dawn_native/d3d12/QueueD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-08-05T01:20:07Z",
      "side": 1,
      "message": "Why does it always yield a single copy when we use optimally aligned bytes? \n(Just tried without computing copy splits and it was failing TextureZeroInitTest.WriteWholeTextureArray, debugged into it and with computing copy splits it had 2 copy splits)",
      "parentUuid": "a700271d_ee140b22",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "112d20e0_83eb9fd3",
        "filename": "src/dawn_native/d3d12/QueueD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-05T01:23:58Z",
      "side": 1,
      "message": "Sorry that I don\u0027t understand why we can use Align(alignedBytesPerRow, D3D12_TEXTURE_DATA_PITCH_ALIGNMENT) as the \u0027bytesPerRow\u0027 instead of the original dataLayout-\u003ebytesPerRow. For example, when we want to upload data into a 4x4 texture with RGBA8Unorm format, and we use the dataLayout-\u003ebytesPerRow \u003d\u003d 512, will we upload all the texel data we want?",
      "parentUuid": "a700271d_ee140b22",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7c0d029_a76a94e4",
        "filename": "src/dawn_native/d3d12/QueueD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-08-05T01:33:19Z",
      "side": 1,
      "message": "I think it\u0027s for cases when dataLayout-\u003ebytesPerRow \u003d\u003d 508, then we need to align it to 512. \n\nI think for CopyTextureRegion RowPitch must be a multiple of 256.\nI saw this comment here \nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/dawn/src/dawn_native/d3d12/TextureCopySplitter.cpp;l\u003d198;drc\u003d3b17f0bde80c3806f94ab11b4f7d059f1dbb32a5?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F\n\nbut I don\u0027t think I saw that D3D12_TEXTURE_DATA_PITCH_ALIGNMENT was actually used to align the buffer offset. So I was getting errors without aligning it myself.",
      "parentUuid": "112d20e0_83eb9fd3",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "423f6b0f1fa0a2f5fb466d37e4965351e6a71717",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}