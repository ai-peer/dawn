{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c17a5307_82c686a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-25T21:57:22Z",
      "side": 1,
      "message": "LGTM",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5c3dfce_0ea5c192",
        "filename": "src/dawn/native/SystemHandle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-25T21:57:22Z",
      "side": 1,
      "message": "Why do we need the templates instead of just defining the functions/constants based on the platform we\u0027re in?",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8982fb80_1a2216c3",
        "filename": "src/dawn/native/SystemHandle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-07T16:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5c3dfce_0ea5c192",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e10e64cc_64468113",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-25T21:57:22Z",
      "side": 1,
      "message": "nit: #else #error maybe.",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df5a4513_0c8c0654",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-07T16:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e10e64cc_64468113",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc9bd4c1_56f29b40",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-25T21:57:22Z",
      "side": 1,
      "message": "nit: this could use the Handle type directly, likewise for Acquire.",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a7bc906_73e04504",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-25T22:49:54Z",
      "side": 1,
      "message": "I\u0027m worried about implicit conversion since fds are plain `int` you can pass something else here which might end up synthesizing not what you want.\n\nthis way, we hit a debug assert, and generate errors using a safe invalid handle even in release",
      "parentUuid": "cc9bd4c1_56f29b40",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52b0fe9e_2a78928e",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-25T23:12:35Z",
      "side": 1,
      "message": "Ah makes sense! Is there a way to make this a static assert that fails at compile time instead of an ASSERT()? If not the current approach LGTM with a comment that explains why a template (so we don\u0027t remove it later thinking it wasn\u0027t useful)",
      "parentUuid": "2a7bc906_73e04504",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3a3af46_891efbb0",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-11-07T03:50:31Z",
      "side": 1,
      "message": "I had a thought for Get() that could solve this too - what if we give each one a different name? E.g.\nAcquireFd, DuplicateFd, GetFd, DetachFd\nAcquireHANDLE, DuplicateHANDLE, GetHANDLE, DetachHANDLE\n\nor\nAcquirePOSIX, ...\nAcquireWin32, ...",
      "parentUuid": "52b0fe9e_2a78928e",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ac4c525_8190b973",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-07T16:52:16Z",
      "side": 1,
      "message": "(changed it to a static assert)\n\nhmm.. how do the names help the implict conversions? I would think you need to have both Acquire(unsigned int) and Acquire(int) to prevent an unexpected conversion.\nIf you have AcquireZircon(unsigned int) and AcquirePOSIX(int) - you can still have conversions if you call the wrong one.",
      "parentUuid": "b3a3af46_891efbb0",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3beab970_e165d51f",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-11-07T21:54:00Z",
      "side": 1,
      "message": "I think the explicit name would just make it easier to know if it\u0027s right. This also would also help for Get/Detach, not just Acquire/Duplicate like the template thing (the template thing is good though).\n\nThis is assuming we only support one handle type on any given OS (no POSIX on Windows for example), but this whole abstraction assumes that already.\n\nI\u0027m having a hard time thinking through whether this really helps though, so LGTM regardless.",
      "parentUuid": "1ac4c525_8190b973",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3617a81_db226b54",
        "filename": "src/dawn/native/SystemHandle.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-08T00:17:03Z",
      "side": 1,
      "message": "ok - fwiw I think I might end up looking at this again in the future\n\nI think I want to make it so I can write the code handling Windows-only extension structs without putting #ifdef all over. In which case, I may adopt the more clear names, but make it fine-to-compile (no static assert) if you\u0027re doing the Windows thing on Linux - since that extension struct is not supposed to be available anyway, and in reality will be unreachable.",
      "parentUuid": "3beab970_e165d51f",
      "revId": "9c660baca25bbc64bc2fc00a008c7ae3daeda729",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}