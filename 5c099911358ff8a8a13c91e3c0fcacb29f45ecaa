{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ca783e6_4c86fbde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-07-05T19:42:15Z",
      "side": 1,
      "message": "LGTM2",
      "revId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c458e66_f55a0d3a",
        "filename": "src/dawn/native/BlitTextureToBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-07-05T19:42:15Z",
      "side": 1,
      "message": "Not new to this patch, but could you explain somewhere why these use `texture_2d_array\u003c\u003e` and not `texture_2d\u003c\u003e` bindings?",
      "revId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bba23fcf_7b4bf204",
        "filename": "src/dawn/native/BlitTextureToBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-07-05T19:46:51Z",
      "side": 1,
      "message": "Ah I clicked submit too soon. Let me fix this and the other one in a new CL. Thanks for the review!",
      "parentUuid": "8c458e66_f55a0d3a",
      "revId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "560e5bae_56b35b70",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 631,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-07-05T19:42:15Z",
      "side": 1,
      "message": "Nit: I wonder if all these checks could be refactored into a `NeedsInternalTextureBindingUsage()` helper that returns true/false.\n\nThen we only need a single call to:\n\n```\nif (NeedsInternalTextureBinding(device)) {\n  if (mInternalUsage \u0026 wgpu::TextureUsage::CopySrc) {\n     AddInternalUsage(wgpu::TextureUsage::TextureBinding);\n  }\n}\n```\n\n(Or if there\u0027s overlap with the ShouldUseTextureToBufferBlit(), you could use/refactor that too.)\n\nCould also do a similar `NeedsInternalRenderAttachmentUsage()` for the write case.",
      "revId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "5c099911358ff8a8a13c91e3c0fcacb29f45ecaa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}