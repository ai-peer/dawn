{
  "comments": [
    {
      "key": {
        "uuid": "1065ee55_db5043b8",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T19:41:56Z",
      "side": 1,
      "message": "[3]",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45ffb2bf_b2c87466",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:24:07Z",
      "side": 1,
      "message": "Note: It\u0027s a bit weird that this is \"just\" an error, because while the call passes validation, the OOM makes a nullptr returned. I don\u0027t know what the behaviour should be in the spec to allow failures because of OOM.",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed05c94e_a0797a23",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T15:58:04Z",
      "side": 1,
      "message": "hm well technically there hasn\u0027t been any validation yet. I guess we could actually inject an OOM error too",
      "parentUuid": "45ffb2bf_b2c87466",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd53b87e_0a165573",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T16:40:53Z",
      "side": 1,
      "message": "Kai, WDYT? should this be allowed to OOM? And if so, does it happen in the rejected Promise as well as the device error scope?",
      "parentUuid": "ed05c94e_a0797a23",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bee81294_c1927a54",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-05T19:24:16Z",
      "side": 1,
      "message": "By allowed to OOM, do you mean return an error vs crash the whole renderer?\n\nIf we have some reasonable expectation that this isn\u0027t very common (e.g. only happens in real system-OOM situations), I think we should take down the whole renderer, at least for now.",
      "parentUuid": "dd53b87e_0a165573",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc2be2c_453dbd95",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T19:41:56Z",
      "side": 1,
      "message": "Actually, I guess this should be okay and less likely to be hit now that there\u0027s a check at [2] and [3] to prevent mapping enormous buffers.",
      "parentUuid": "bee81294_c1927a54",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67b8f097_04c86546",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-06T00:34:17Z",
      "side": 1,
      "message": "Okay to crash?\n\nUnfortunately I don\u0027t know how to crash with the right code (I think we want this for correct reporting on the sad tab page)",
      "parentUuid": "7bc2be2c_453dbd95",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76699edf_5680c28b",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T00:20:22Z",
      "side": 1,
      "message": "Since this isn\u0027t chromium code we can\u0027t just CHECK here; maybe we want a WGPUBufferMapAsyncStatus that says \"crash now\"? Or maybe just \"lose device now\".\n\n(Philosophically \"Unknown\" probably should mean \"crash now\", but I think we are currently using it for cases where we shouldn\u0027t crash.)",
      "parentUuid": "67b8f097_04c86546",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af6e3765_49c0618d",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-09T01:50:25Z",
      "side": 1,
      "message": "Well actually, I\u0027m not so sure. I think it\u0027s very possible to hit this condition trying to allocate a bunch of shared memory. I don\u0027t think we should just throw device lost. It\u0027s not only giant allocations we have to worry about. An app that has a ton of normalize-size allocations, or is managing their own really big upload ring buffer could hit this.\n\nThat being said, I don\u0027t think Chrome has the ability to gracefully fail a shmem allocation right now, but I think we should make it so that\u0027s possible.",
      "parentUuid": "76699edf_5680c28b",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e034b88c_36de0777",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T05:23:11Z",
      "side": 1,
      "message": "I think it\u0027s safer to lose device as I don\u0027t want to expose too many distinct error cases to applications when we can\u0027t have a reasonable expectation they\u0027ll be able to gracefully recover from every single one. I\u0027m worried this case is too gritty and uncommon and most apps will completely ignore the possibility. But at least it is conglomerated with other mapping errors (don\u0027t remember what other cases can happen), so it wouldn\u0027t be too bad, so I guess what we ultimately need is metrics on how often it actually happens.",
      "parentUuid": "af6e3765_49c0618d",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6893252b_d2bcc8f0",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-09T16:24:19Z",
      "side": 1,
      "message": "For now, I\u0027m going to keep this as a normal Error status because I think it should be similar to other OOM errors and an application can handle it gracefully if they choose to. FWIW, it\u0027ll still reset the GPU process in Chrome because we don\u0027t have a gracefully way to fallibly allocate shmem right now.",
      "parentUuid": "e034b88c_36de0777",
      "range": {
        "startLine": 73,
        "startChar": 21,
        "endLine": 73,
        "endChar": 51
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d719b3bb_1fa16b06",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:24:07Z",
      "side": 1,
      "message": "Would creating a buffer with a garbage usage (like 0xFFFFFFFF) result in the same thing but without requiring dawn_native changes?",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c228d776_25f68c29",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T15:58:04Z",
      "side": 1,
      "message": "It would, but I\u0027m concerned about the validation error message. We could make an error scope to catch it but that seems like a more complex workaround.",
      "parentUuid": "d719b3bb_1fa16b06",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dab22fb8_38f81fe2",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-05T19:41:56Z",
      "side": 1,
      "message": "[2]",
      "parentUuid": "c228d776_25f68c29",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb18866a_e1bdc97d",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T00:20:22Z",
      "side": 1,
      "message": "I prefer ClientDeviceCreateErrorBuffer personally",
      "parentUuid": "dab22fb8_38f81fe2",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fc8046c_22a2f2b2",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-09T09:47:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fb18866a_e1bdc97d",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3fa270f_2d1b8f02",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:24:07Z",
      "side": 1,
      "message": "ditto here and below.",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113ef9df_919369dd",
        "filename": "src/dawn_wire/client/ApiProcs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-09T09:47:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b3fa270f_2d1b8f02",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11ae32fb_ddff7c0c",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 451,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T00:20:22Z",
      "side": 1,
      "message": "What\u0027s the lower bound for failing gracefully? If we\u0027re passing 2**64-1 into the driver it might be failing early since that\u0027s too extremely large. Maybe we can (also) test a value that\u0027s technically reasonable, but definitely going to OOM, like 64GiB (2**36)?\n\nAlso, does size need to be aligned? (2**64-1 is not, and if we round it up in any backend we\u0027ll get 0)\n\nSame concerns below.",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b65ad9c6_d46936ab",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 451,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-09T01:50:25Z",
      "side": 1,
      "message": "Backends that do alignment check the size first and will OOM if something doesn\u0027t work out. So yea I guess we should test with a smaller value too.",
      "parentUuid": "11ae32fb_ddff7c0c",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2151209_4699f9a7",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 451,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-09T01:53:03Z",
      "side": 1,
      "message": "unless we have mocks though, it\u0027ll be hard to test all the paths unless we make assumptions about the machines we\u0027re running on. There could be OOM because of\n - too big for rounding\n - size larger than the biggest heap\n - driver fails because of fragmentation maybe\nand we can\u0027t actually know in this test how to hit each one.",
      "parentUuid": "b65ad9c6_d46936ab",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ddacea0_ec7e3861",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 451,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T05:14:19Z",
      "side": 1,
      "message": "Certainly true, but best to avoid the most trivial ones for these tests imo.",
      "parentUuid": "a2151209_4699f9a7",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4f0d220_3e679e96",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 468,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:24:07Z",
      "side": 1,
      "message": "Doesn\u0027t ASSERT_DEVICE_ERROR(device.CreateBufferMapped(\u0026descriptor)); work? ditto below.",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2635e3f0_1301339c",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 475,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T00:20:22Z",
      "side": 1,
      "message": "MapWrite can only be used with CopySrc.\n\nPerhaps these tests should have control cases?",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05ecbe91_3bda9813",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 482,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-05T12:24:07Z",
      "side": 1,
      "message": "nit: mapping",
      "range": {
        "startLine": 482,
        "startChar": 13,
        "endLine": 482,
        "endChar": 21
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56601176_8c7c5161",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T00:20:22Z",
      "side": 1,
      "message": "nit: mapping",
      "range": {
        "startLine": 509,
        "startChar": 13,
        "endLine": 509,
        "endChar": 21
      },
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "173994a2_adde8161",
        "filename": "src/tests/end2end/BufferTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 516,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-09T00:20:22Z",
      "side": 1,
      "message": "same",
      "revId": "29ccff39e65334ae7d3cf4506b70b17c5ad16ca7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}