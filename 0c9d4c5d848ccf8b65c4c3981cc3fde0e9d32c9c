{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c81167a7_05f628de",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T20:00:27Z",
      "side": 1,
      "message": "Is it possible only add fences to `mState-\u003emPendingFences`, when `BeginAccess()` is successful? In this case, `EndAccess()` will only return one `SharedFence` and one `SignalValue` in `EndAccessState`. We don\u0027t need to allocate two arrays.",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "699c7b0a_13c7e9c9",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T20:07:45Z",
      "side": 1,
      "message": "I\u0027m not sure I understand. We always need an array anyway because there can be multiple fences that need to be waited on.",
      "parentUuid": "c81167a7_05f628de",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d57dbc2_7a1e7979",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T20:43:34Z",
      "side": 1,
      "message": "We can avoid returning multiple fences by not adding begin fences to `mState-\u003emPendingFences`, if `BeginAccess()` is unsuccessful, and returning false and reporting errors for `APIEnddAccess()`, if `mState-\u003emPendingFences` is not consumed (the texture is not used).",
      "parentUuid": "699c7b0a_13c7e9c9",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54abf6d6_56caa10b",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T21:04:13Z",
      "side": 1,
      "message": "there\u0027s still the case where the client passes in multiple fences into BeginAccess, and does not consume them before calling EndAccess. The same fences need to be returned there. We will also need to return multiple fences for multi-queue",
      "parentUuid": "4d57dbc2_7a1e7979",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16c50498_1bf16dd7",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T21:19:00Z",
      "side": 1,
      "message": "For not consumed fences case, we can make it an illegal use case, and reports errors in `APIEndAccess()`.\nFor multi-queue, do you mean one wgpu::Device can have multiple queues?",
      "parentUuid": "54abf6d6_56caa10b",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff27d637_a97207ff",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T21:23:47Z",
      "side": 1,
      "message": "Why should it be illegal? that sounds like it would be rather fragile to use and it is very simple to support returning multiple fences given we will have multiple queues and need multiple fences.\n\nYes - one device will be able to have multiple queues each with their own logical GPU timeline.",
      "parentUuid": "16c50498_1bf16dd7",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "171264b1_95e7d846",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T22:03:00Z",
      "side": 1,
      "message": "OK. I see. However I still feel it is better `APIBeginAccess()` only returns true, when it is successful. So chrome can skip further operations on the texture, if `APIBeginAccess()` fails (usually chrome will use a fallback blank texture to replace the problem texture). \n\nFor example, when chrome draws several textures to the back buffer, if one texture is in invalid state (due to `APIBeginAccess()` failure), whether the all following draws to the back buffer will fail and lead to a complete blank frame?",
      "parentUuid": "ff27d637_a97207ff",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e7b4eb3_474adc99",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 264,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T20:43:34Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 45
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}