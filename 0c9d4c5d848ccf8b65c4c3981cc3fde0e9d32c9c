{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1aef2ce_e49b9f2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-29T02:17:16Z",
      "side": 1,
      "message": "LGTM with a nit.",
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c81167a7_05f628de",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T20:00:27Z",
      "side": 1,
      "message": "Is it possible only add fences to `mState-\u003emPendingFences`, when `BeginAccess()` is successful? In this case, `EndAccess()` will only return one `SharedFence` and one `SignalValue` in `EndAccessState`. We don\u0027t need to allocate two arrays.",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "699c7b0a_13c7e9c9",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T20:07:45Z",
      "side": 1,
      "message": "I\u0027m not sure I understand. We always need an array anyway because there can be multiple fences that need to be waited on.",
      "parentUuid": "c81167a7_05f628de",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d57dbc2_7a1e7979",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T20:43:34Z",
      "side": 1,
      "message": "We can avoid returning multiple fences by not adding begin fences to `mState-\u003emPendingFences`, if `BeginAccess()` is unsuccessful, and returning false and reporting errors for `APIEnddAccess()`, if `mState-\u003emPendingFences` is not consumed (the texture is not used).",
      "parentUuid": "699c7b0a_13c7e9c9",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54abf6d6_56caa10b",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T21:04:13Z",
      "side": 1,
      "message": "there\u0027s still the case where the client passes in multiple fences into BeginAccess, and does not consume them before calling EndAccess. The same fences need to be returned there. We will also need to return multiple fences for multi-queue",
      "parentUuid": "4d57dbc2_7a1e7979",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16c50498_1bf16dd7",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T21:19:00Z",
      "side": 1,
      "message": "For not consumed fences case, we can make it an illegal use case, and reports errors in `APIEndAccess()`.\nFor multi-queue, do you mean one wgpu::Device can have multiple queues?",
      "parentUuid": "54abf6d6_56caa10b",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff27d637_a97207ff",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T21:23:47Z",
      "side": 1,
      "message": "Why should it be illegal? that sounds like it would be rather fragile to use and it is very simple to support returning multiple fences given we will have multiple queues and need multiple fences.\n\nYes - one device will be able to have multiple queues each with their own logical GPU timeline.",
      "parentUuid": "16c50498_1bf16dd7",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "171264b1_95e7d846",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T22:03:00Z",
      "side": 1,
      "message": "OK. I see. However I still feel it is better `APIBeginAccess()` only returns true, when it is successful. So chrome can skip further operations on the texture, if `APIBeginAccess()` fails (usually chrome will use a fallback blank texture to replace the problem texture). \n\nFor example, when chrome draws several textures to the back buffer, if one texture is in invalid state (due to `APIBeginAccess()` failure), whether the all following draws to the back buffer will fail and lead to a complete blank frame?",
      "parentUuid": "ff27d637_a97207ff",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0824d25b_f6257333",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-28T22:33:48Z",
      "side": 1,
      "message": "why should BeginAccess be fundamentally different from other webgpu errors? They can all be caught with push/pop error scope.\nas it is now, if you use the texture in an invalid state, then the entire queue submit it is in will do nothing and nothing will be drawn.\n\nthe boolean status is useful to the extent that it tells you whether the operation was completely aborted - and it was completely aborted to simplify internal state tracking.\nReturning false for the other error conditions doesn\u0027t help us simplify anything, so I think it\u0027s better to keep the same error mechanisms as the rest of WebGPU.",
      "parentUuid": "171264b1_95e7d846",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b89964d_f43cc552",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-29T01:09:52Z",
      "side": 1,
      "message": "Do you mean using PushErrorScope() at [1]? How to use it?\nRight now, chrome creates a fallback texture at [1], if begin access a shared image fails, and for dawn shared image backing, we can just check the return texture of `external_image-\u003eBeginAccess(\u0026descriptor);` at [3] to determine if the dawn external image begin access is successful. However with the new SharedTextureMemory API, it becomes harder. The the return value of SharedTextureMemory::BeginAccess() doesn\u0027t indicate success anymore. So you mean we have to set a temp error callback before calling `SharedTextureMemory::BeginAccess()`, and restore the callback after, and assume the error callback will be called before `external_image-\u003eBeginAccess(\u0026descriptor)` returns, or we have to call `Tick()` to flush pending callbacks?\n\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:out/webview-Debug/gen/third_party/dawn/include/dawn/webgpu_cpp.h;l\u003d1077?q\u003dwebgpu_cpp.h\u0026ss\u003dchromium\n\n[2] https://source.chromium.org/chromium/chromium/src/+/main:components/viz/service/display_embedder/image_context_impl.cc;l\u003d217?q\u003dImageContextImpl\u0026ss\u003dchromium\n\n[3] https://source.chromium.org/chromium/chromium/src/+/main:gpu/command_buffer/service/shared_image/d3d_image_backing.cc;l\u003d806",
      "parentUuid": "0824d25b_f6257333",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e737742c_b4bbbf8c",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-29T01:41:46Z",
      "side": 1,
      "message": "I don\u0027t think any of the errors happening here in BeginAccess are things Chrome would respond to and create a fallback image for. They\u0027re in the class of \"you\u0027re holding it wrong\" or \"something else you did is very wrong\". There\u0027s generally no need to look at the status result and respond to it. I would expect Chrome to `CHECK` that BeginAccess returns true - and also `CHECK` that no unexpected validation errors occur.\n\nbut is theoretically what you would do if you wanted to catch errors is do something like:\n```\ndevice.PushErrorScope(type);\nbacking-\u003eBeginAccess(...);\n\n// will be called synchronously in Dawn native.\ndevice.PopErrorScope([](WGPUErrorType error, const char* msg, void* userdata) {\n // do something\n}, userdata)\n```",
      "parentUuid": "0b89964d_f43cc552",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd546d67_d7d89e75",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-29T02:17:16Z",
      "side": 1,
      "message": "OK. Then we will assume BeginAccess() and EndAccess() should always return true, if chrome uses the them correctly.",
      "parentUuid": "e737742c_b4bbbf8c",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 32
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e7b4eb3_474adc99",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 21
      },
      "lineNbr": 264,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-28T20:43:34Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 45
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74a1e53e_b5f261b3",
        "filename": "src/dawn/native/SharedTextureMemory.h",
        "patchSetId": 21
      },
      "lineNbr": 52,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-29T02:17:16Z",
      "side": 1,
      "message": "nit: please add comment to describe the return value meaning, since it doesn\u0027t indicate success or failure, and how should user to use the return value.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 67
      },
      "revId": "0c9d4c5d848ccf8b65c4c3981cc3fde0e9d32c9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}