{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "47bac541_61fc5e52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-02-12T20:47:13Z",
      "side": 1,
      "message": "LGTM",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a867e976_a5ddda9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-16T18:04:53Z",
      "side": 1,
      "message": "LGTM, as discussed offline I think we should land this before doing the refactor since the logic\u0027s good and it allows enabling more tests.\n\nApologies for the very dry comment previously.",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "615662f1_943617b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T20:07:18Z",
      "side": 1,
      "message": "Thanks for your review.",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5ad300c_a5075369",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 715,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-15T09:07:56Z",
      "side": 1,
      "message": "nit: empty line to separate the reset.",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa8d32d_0d39f696",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-15T09:07:56Z",
      "side": 1,
      "message": "This code in the GL backend is pretty horrible and could use a lot of cleanup between writeTexture, copyBufferToTexture, copyTextureToBuffer and the zero initialization. Can we have a helper method that assumes that the correct PBO (or absence of) is bound and does the copy logic? It could be templated on the direction of the copy (from or to the texture). It could detect several cases like compressed textures, fast paths, etc and call to more helper functions. And most importantly it could be shared between all things that copy from-to texture because right now we are reinventing code every time in less and less readable ways.",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81351a73_1bdee0ac",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T16:28:34Z",
      "side": 1,
      "message": "Or, should we just use the CopyBufferToTexture path in all cases (as the other backends do) and throw away this WriteTexture implementation entirely. With the use of PBOs in the we could also avoid the line-by-line uploads, without having to reinvent that in this implementation. WDYT?",
      "parentUuid": "6aa8d32d_0d39f696",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f946f984_418b07dd",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-16T18:04:53Z",
      "side": 1,
      "message": "As discussed offline I think this PBO path would work well but that requires implementing the StagingBuffer in the OpenGL backend. Even if we do this, the refactor of the copy logic would be useful to simplify code.",
      "parentUuid": "81351a73_1bdee0ac",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "879998b0_c1abf902",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T20:07:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f946f984_418b07dd",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2493ee9_8738e6b1",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-15T09:07:56Z",
      "side": 1,
      "message": "u-nit: As usual, can we add some empty lines to let the code breath a bit?",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1894148d_3797624a",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T20:07:18Z",
      "side": 1,
      "message": "Done.\n\nSorry, I generally use little vertical whitespace just to get more lines on the screen, but I\u0027m happy to learn your preferences. (Also happy if you teach them to git cl format if that\u0027s possible.)\n\nTrying to infer them, it seems to be: before control flow unless the contained body is short, between switch-cases, sometimes (but not always) within blocks of assignments. Does this sound close?",
      "parentUuid": "c2493ee9_8738e6b1",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15df7571_7b01dbf6",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-15T09:07:56Z",
      "side": 1,
      "message": "This doesn\u0027t need to be computed from the real size and can instead be computed from width, for example widthInBytes \u003d width / xx * xx.\n\nI stopped reviewing this at this point because we should really share the implementation instead of adding more cruft.",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24013ccf_1f17fd54",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T20:07:18Z",
      "side": 1,
      "message": "I\u0027m not sure which \"width\" you\u0027re referring to here. I think we always have to refer to the passed-in width. \n\nBTW, I just checked and the B2T code has the same computation:\n\nuint64_t copyDataSizePerBlockRow \u003d\n    (copySize.width / blockInfo.width) * blockInfo.byteSize;",
      "parentUuid": "15df7571_7b01dbf6",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33d269d0_a4e454ae",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-16T18:04:53Z",
      "side": 1,
      "message": "nit: a comment explaining why we do the copy line-by-line will help future readers understand what\u0027s happening.",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "775be459_005a811b",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T20:07:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33d269d0_a4e454ae",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bb4ce7c_5e8e732b",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-16T18:04:53Z",
      "side": 1,
      "message": "I think this line should be inside the for-loop for Y",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0401b0db_c9b583a3",
        "filename": "src/dawn_native/opengl/QueueGL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-02-16T20:07:18Z",
      "side": 1,
      "message": "Good catch. Done.\n\n(Huh. Looks like the 2D path needs more tests too.)",
      "parentUuid": "6bb4ce7c_5e8e732b",
      "revId": "77dffb5087b831fb769e3859b14500f3cc879ca2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}