{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f6353dc6_7340f8b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-24T15:14:04Z",
      "side": 1,
      "message": "The mac failure seems to be not gating the old backend implementation using specialized function properly. I should look at it.",
      "revId": "573dd0ed413e73d599e576ce683d0f802ad03e70",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed8473d9_ed86ff7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-24T18:14:55Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "f6353dc6_7340f8b0",
      "revId": "573dd0ed413e73d599e576ce683d0f802ad03e70",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaed4c22_dc579080",
        "filename": "src/dawn/native/Pipeline.cpp",
        "patchSetId": 10
      },
      "lineNbr": 304,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-24T00:23:01Z",
      "side": 1,
      "message": "I didn\u0027t figure out how to put this part of workgroup size validation into one function that could fit both the DelayedInvalidIf lambda and DAWN_INVALID_IF macro...\nWould like to hear your ideas.",
      "revId": "573dd0ed413e73d599e576ce683d0f802ad03e70",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee9b01da_234d1689",
        "filename": "src/dawn/native/Pipeline.cpp",
        "patchSetId": 10
      },
      "lineNbr": 304,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:06:28Z",
      "side": 1,
      "message": "I think we could have `MaybeError ValidateWorkgroupSize(...);`\n\nand in ShaderModule.cpp, we manually do the `infringedErrors` bit.\n```\nMaybeError err \u003d ValidateWorkgroupSize(entry_point.workgroup_size...);\nif (err.IsError()) {\n  metadata-\u003einfringedLimitErrors.push_back(err.AcquireError()-\u003eGetMessage());\n}\n```",
      "parentUuid": "eaed4c22_dc579080",
      "revId": "573dd0ed413e73d599e576ce683d0f802ad03e70",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48b99b4f_97c673f9",
        "filename": "src/dawn/native/Pipeline.cpp",
        "patchSetId": 10
      },
      "lineNbr": 304,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-26T12:41:38Z",
      "side": 1,
      "message": "The WebGPU spec only mandates that the workgroup size is validated inside createComputePipeline so we could just remove the copy of the code in ShaderModule and always reflect the transformed entrypoint.",
      "parentUuid": "ee9b01da_234d1689",
      "revId": "573dd0ed413e73d599e576ce683d0f802ad03e70",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}