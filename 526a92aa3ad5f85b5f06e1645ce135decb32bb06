{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e1a34fc4_313c095e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-05T23:13:31Z",
      "side": 1,
      "message": "Okay! Think I\u0027ve got it now. (I can at least verify that it no longer repros the issue with the x86 build on my local machine.)",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23038408_9b965e3d",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-06T00:24:12Z",
      "side": 1,
      "message": "do we still need these checks after the zero-initialization landed in Chrome?",
      "range": {
        "startLine": 202,
        "startChar": 12,
        "endLine": 202,
        "endChar": 74
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398670a3_21d3d267",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-06T02:37:23Z",
      "side": 1,
      "message": "`mLabel` is std::string, guessing you can\u0027t assign it a `nullptr`",
      "parentUuid": "23038408_9b965e3d",
      "range": {
        "startLine": 202,
        "startChar": 12,
        "endLine": 202,
        "endChar": 74
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0c4b2d7_cc943cdc",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-11T23:26:13Z",
      "side": 1,
      "message": "Assigning nullptr to an std::string is undefined behavior, and since Dawn will have other embedders than just Chrome I\u0027d say this is a reasonable precaution.",
      "parentUuid": "398670a3_21d3d267",
      "range": {
        "startLine": 202,
        "startChar": 12,
        "endLine": 202,
        "endChar": 74
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde8f0e4_43a27f88",
        "filename": "src/dawn/native/d3d12/QueueD3D12.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-06T00:24:12Z",
      "side": 1,
      "message": "if you want to make this like the other objects, it should return Ref\u003cQueue\u003e and get created with AcquireRef(new Queue(...));\n\nthen DeviceBase::Initialize will simply move the ref into mQueue",
      "range": {
        "startLine": 29,
        "startChar": 15,
        "endLine": 29,
        "endChar": 22
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bda260b_5e804047",
        "filename": "src/dawn/native/d3d12/QueueD3D12.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-11T23:26:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dde8f0e4_43a27f88",
      "range": {
        "startLine": 29,
        "startChar": 15,
        "endLine": 29,
        "endChar": 22
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68a3319a_d46711ae",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1056,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-06T02:37:23Z",
      "side": 1,
      "message": "looks like this has the same problem",
      "range": {
        "startLine": 1056,
        "startChar": 50,
        "endLine": 1056,
        "endChar": 88
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0a739e9_bb23c9a4",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1056,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-12T01:25:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68a3319a_d46711ae",
      "range": {
        "startLine": 1056,
        "startChar": 50,
        "endLine": 1056,
        "endChar": 88
      },
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1957dbbc_5475854a",
        "filename": "src/dawn/native/vulkan/QueueVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-05T23:13:31Z",
      "side": 1,
      "message": "This cast here (previously reinterpret_cast\u003cuint64_t\u0026\u003e) was the culprit.",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba5c23b1_5b8ad9e6",
        "filename": "src/dawn/native/vulkan/QueueVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-06T00:24:12Z",
      "side": 1,
      "message": "we\u0027re doing this cast for all the other Vulkan objects too. Is it wrong in all those places too, particularly on 32-bit?\n\nWe should make sure we check what the type of the handles are for vulkan - they can be pointers to structs or integer handles.\n\nI think we should make a version of SetDebugName that does this casting for us so we don\u0027t mess it up more. If the type is a struct like\nusing VkQueue \u003d struct VkQueueImpl*;\n\nthen we can have\ntemplate \u003ctypename VkObj\u003e\nvoid SetDebugName(device, type, VkObj* obj, name, label)\n\nwhich will do the cast for us, and then call SetDebugName with an integer.",
      "parentUuid": "1957dbbc_5475854a",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d17fb3aa_55b4bf4c",
        "filename": "src/dawn/native/vulkan/QueueVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-06T02:37:23Z",
      "side": 1,
      "message": "Non-dispatchable handles are always 64-bits:\nhttps://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_DEFINE_NON_DISPATCHABLE_HANDLE.html\nhttps://www.khronos.org/registry/vulkan/specs/1.2/html/chap3.html#fundamentals-objectmodel-overview\nAnd we also override them with our own type:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/common/vulkan_platform.h;l\u003d145;drc\u003d09100b79d078510391f5e8c6bf7d985da0b7de09\n(note `dawn::native::vulkan::VkSampler` shadows `::VkSampler`).\n(wow, dawn code I actually worked on!)\n\nHowever, VkDevice and VkQueue are *dispatchable* handles.\nhttps://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_DEFINE_HANDLE.html\nThese aren\u0027t guaranteed to be 64-bit, but `VkDebugUtilsObjectNameInfoEXT.objectHandle` is uint64_t, and I assume you\u0027re supposed to cast up to that. Which is what you are doing here now since `GetQueue` returns a dispatchable handle (which is a pointer).\n(Confusingly, BTW, `DeviceVk::GetQueue` shadows `DeviceBase::GetQueue`.)\n\nThe current code used everywhere else (`reinterpret_cast\u003cuint64_t\u0026\u003e`) is pretty weird. I spent like an hour understanding this.\nFor samplers, for example, it reinterprets a `dawn::native::vulkan::VkSampler` (`dawn::native::vulkan::detail::VkHandle`) as `uint64_t\u0026`, which IIUC automatically takes a reference to the `VkHandle` object as `VkHandle\u0026`, and then reinterprets. Now you have a `uint64_t\u0026` which points to the `VkHandle`, at offset 0 of which is `mHandle`, so it deferences to the right thing.\n\nSo... given I think the other callsites are correct, I think we can leave them alone for now, land this, and then try to do a template thing in a followup. I\u0027m wondering if it\u0027s time to clean up our vulkan binding code like we promised ourselves:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/common/vulkan_platform.h;l\u003d41;drc\u003d09100b79d078510391f5e8c6bf7d985da0b7de09",
      "parentUuid": "ba5c23b1_5b8ad9e6",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15c968c0_058cf87c",
        "filename": "src/dawn/native/vulkan/QueueVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-06T02:45:43Z",
      "side": 1,
      "message": "ah, thanks for the explanation. but still if `VkQueue` is `struct VkQueue_T*`\nthen we\u0027re reinterpret_casting a 32-bit pointer to a 64-bit integer. that doesn\u0027t make a lot of sense. I would think we need to first reinterpret to uintptr_t, and then static_cast to uint64_t.",
      "parentUuid": "d17fb3aa_55b4bf4c",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35439d78_a1064c8f",
        "filename": "src/dawn/native/vulkan/QueueVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-06T02:51:31Z",
      "side": 1,
      "message": "That threw me off for a while too, I thought reinterpret_cast had to be of the same size. I was going to suggest exactly that (`reinterpret_cast(static_cast(x))`) but I\u0027m pretty sure that\u0027s the same thing.",
      "parentUuid": "15c968c0_058cf87c",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f94ef8e8_9db3bc46",
        "filename": "src/dawn/native/vulkan/QueueVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-11T23:26:13Z",
      "side": 1,
      "message": "I stumbled on the difference between dispatchable/non-dispatchable handles right before leaving on vacation last week, at which point I said \"Screw it. This is a problem for Next Week Brandon.\" ;D\n\nAlso, according to https://en.cppreference.com/w/cpp/language/reinterpret_cast\n\n\"A pointer can be converted to any integral type large enough to hold all values of its type\", which I understand to mean that you should be able to cast to a uint64_t from any 64 bit or 32 bit pointer?\n\nLeaving the casts as-is for now but added a comment to explain why they\u0027re different. Also, I did some exploratory code and have an idea as to how to make this nicer overall, but I\u0027ll leave that to a separate patch.",
      "parentUuid": "35439d78_a1064c8f",
      "revId": "526a92aa3ad5f85b5f06e1645ce135decb32bb06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}