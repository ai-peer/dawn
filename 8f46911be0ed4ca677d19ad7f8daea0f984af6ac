{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2efd7775_0eba2c8d",
        "filename": "src/dawn_native/Pipeline.cpp",
        "patchSetId": 13
      },
      "lineNbr": 73,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T08:26:01Z",
      "side": 1,
      "message": "nit: Pipeline overridable constant \"%s\" is set more than once. ?",
      "range": {
        "startLine": 72,
        "startChar": 21,
        "endLine": 73,
        "endChar": 34
      },
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "185318f2_be934c24",
        "filename": "src/dawn_native/Pipeline.cpp",
        "patchSetId": 13
      },
      "lineNbr": 73,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-16T18:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2efd7775_0eba2c8d",
      "range": {
        "startLine": 72,
        "startChar": 21,
        "endLine": 73,
        "endChar": 34
      },
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59afa26d_130a5fa2",
        "filename": "src/dawn_native/Pipeline.cpp",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T08:26:01Z",
      "side": 1,
      "message": "nit: I think {} is sufficient.",
      "range": {
        "startLine": 126,
        "startChar": 36,
        "endLine": 126,
        "endChar": 67
      },
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "750ae6d3_48214f2f",
        "filename": "src/dawn_native/Pipeline.cpp",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-16T18:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59afa26d_130a5fa2",
      "range": {
        "startLine": 126,
        "startChar": 36,
        "endLine": 126,
        "endChar": 67
      },
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "987646b0_76a95a53",
        "filename": "src/dawn_native/Pipeline.h",
        "patchSetId": 13
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T08:26:01Z",
      "side": 1,
      "message": "Here we use std::map to make sure keys are sorted, so we should add a comment to explain that. Otherwise someone will just change it to be an unordered_map and break caching indavertently.",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00cfe0ee_a3004d1b",
        "filename": "src/dawn_native/Pipeline.h",
        "patchSetId": 13
      },
      "lineNbr": 47,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-16T18:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "987646b0_76a95a53",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6eaff16_edf6b7d5",
        "filename": "src/dawn_native/Pipeline.h",
        "patchSetId": 13
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-17T18:06:59Z",
      "side": 1,
      "message": "u-u-unit: And now the comment is not next to where we use std::map, can it be next to the type alias?",
      "parentUuid": "00cfe0ee_a3004d1b",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0252e1b_61470994",
        "filename": "src/dawn_native/Pipeline.h",
        "patchSetId": 13
      },
      "lineNbr": 47,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-17T23:52:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6eaff16_edf6b7d5",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07579bc3_a29aa74f",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T08:26:01Z",
      "side": 1,
      "message": "nit: Instead of the templates used everywhere in this file, I think we could use the conversion function in WindowsUtils.h\n\nShaderCompilationRequest could take the list of constants, build the vector\u003cstd::string\u003e used to make the cache key, then have a method that returns a std::vector\u003cwstring\u003e for the list of defines, something like that.\n\nOr the inverse actually, since it will be less code to do the conversion from wstring to string in the cache key generation.",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "165eea38_f2e25381",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-16T18:25:56Z",
      "side": 1,
      "message": "Ah I\u0027m aware of the WCharToUTF8 and UTF8ToWStr. Thinking it would cost extra time if doing the string conversion. Tried passing in just a vector of DefineStr to ValueStr but find it awakard to constructor another wstring vector for dxc path.\n(another reason not fix is there is just too much to change for a nit...-_-)",
      "parentUuid": "07579bc3_a29aa74f",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17662b9a_63f73ded",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-17T18:06:59Z",
      "side": 1,
      "message": "Yeah that was a big nit. But if we use these utility functions (and really the copy shouldn\u0027t matter because this is very cold code), then everything in the anonymous namespace just becomes something like:\n\n    std::string GetHLSLValueString(EntryPointMetadata::OverridableConstant::Type dawnType,\n                                  const OverridableConstantScalar* entry,\n                                  double value \u003d 0) {\n        switch (dawnType) {\n            case EntryPointMetadata::OverridableConstant::Type::Boolean:\n                return std::to_string(entry ? entry-\u003eb : static_cast\u003cint32_t\u003e(value));\n            case EntryPointMetadata::OverridableConstant::Type::Float32:\n                return // precision stuff. Like there\u0027s an ostringstream here anyway.\n            case EntryPointMetadata::OverridableConstant::Type::Int32:\n                return std::to_string(entry ? entry-\u003ei32 : static_cast\u003cint32_t\u003e(value));\n            case EntryPointMetadata::OverridableConstant::Type::Uint32:\n                return std::to_string(entry ? entry-\u003eu32 : static_cast\u003cuint32_t\u003e(value)) + \"u\u0027;\n            default:\n                UNREACHABLE();\n        }\n    }",
      "parentUuid": "165eea38_f2e25381",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f39bad93_013d6bd1",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T08:26:01Z",
      "side": 1,
      "message": "IMHO this isn\u0027t terminal enough data to set in the request: it\u0027s too easy to see this member and start grabbing the ShaderModule*, the Device* or other stuff, breaking the fact that compilation request are meant to only contain data (so it\u0027s clear what influences the cache).\n\nCan we have a vector of define instead, something like that?",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "832371f2_616dcb6f",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-16T18:25:56Z",
      "side": 1,
      "message": "Only store pipelineConstantEntries and shaderEntryPointConstants to build defines and cachekeys",
      "parentUuid": "f39bad93_013d6bd1",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf628906_036066bf",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 452,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T08:26:01Z",
      "side": 1,
      "message": "We generate HLSL for each individual pipelines, so instead of this, can we use tint::transform::SingleEntryPoint to remove all unused pipeline overridable constants?\n\nIt would also remove the need for GetAllEntryPoints();",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76053d7d_ff022543",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 13
      },
      "lineNbr": 452,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-11-16T18:25:56Z",
      "side": 1,
      "message": "Seems that these constants ifdef are not removed by SingleEntryPoint transform. Adding that in Tint WIP: https://dawn-review.googlesource.com/c/tint/+/69500. This CL will depend on that",
      "parentUuid": "cf628906_036066bf",
      "revId": "8f46911be0ed4ca677d19ad7f8daea0f984af6ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}