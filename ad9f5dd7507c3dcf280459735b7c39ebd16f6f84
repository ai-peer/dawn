{
  "comments": [
    {
      "key": {
        "uuid": "d727995d_3b9083bb",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-23T23:29:58Z",
      "side": 1,
      "message": "The lost buffer change also had code in special places that need to workaround the fact Destroy is not called in the destructor on device removed. This seems a bit fragile.  \n\nInstead of having Destroy get skipped if on device lost, we should consider letting it run more than once and be resilient to having some objects of the class already be destroyed in a previous go-around.  \n\nThoughts?",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "accfacb6_939cf436",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-24T00:46:11Z",
      "side": 1,
      "message": "What about having Derived::Destroy handle destroying mErrorScopeTracker and mFenceSignalTracker , and ASSERT that happened in DeviceBase::~DeviceBase ?\n\nThis is what we do for the DynamicUploader.\n\nThen, in ~ErrorScopeTracker and ~FenceSignalTracker (and other relevant trackers as well), they can check if the Device is alive, and call (or mark) all callbacks / objects with the DeviceLost status?",
      "parentUuid": "d727995d_3b9083bb",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c3d6153_ffc25ac2",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-24T00:50:51Z",
      "side": 1,
      "message": "Sorry, last step is probably unnecessary so long as all of the things that happen on Tick() check if the Device is lost and set the status appropriately.",
      "parentUuid": "accfacb6_939cf436",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3264152a_b2658281",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:11:02Z",
      "side": 1,
      "message": "Either way would work imho. Being resilient to destroy being called twice could have the slight advantage that things are less likely to break when we add more service. If the cost is slightly more overhead at destruction that\u0027s fine, but hopefully it doesn\u0027t impact the code of service to add overhead during regular operations.",
      "parentUuid": "1c3d6153_ffc25ac2",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4efb862c_43f552f5",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-27T19:49:01Z",
      "side": 1,
      "message": "i think this will require tick to be run after device is lost. (I moved copied those from tick, since device was lost, tick gets skipped)",
      "parentUuid": "3264152a_b2658281",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c4df0da_f88bbccb",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T00:52:29Z",
      "side": 1,
      "message": "I would be fine with making Destroy() more resilient. Destroy calls Tick so there may be a few changes needed.\n\nAlternatively, ErrorScopeTracker already has some logic in its destructor which marks scopes as status UNKNOWN if they\u0027re still in flight. We could have a check there which marks them as DEVICE_LOST if the device is lost, and do the same for the FenceSignalTracker. I think it may be necessary to do this because the fence and error scope callbacks should return with DeviceLost status if they\u0027re still in flight when the device is lost.",
      "parentUuid": "4efb862c_43f552f5",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2594051e_43672f55",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-29T19:50:49Z",
      "side": 1,
      "message": "I think the different backends call tick in different places (in vulkan its in destroy, and in d3d12 mtl and gl its in waitforidle). Also in vulkan and d3d12, it calls tickimpl and in the others it calls tick. Maybe we need to uniform these first and then we can make Destroy more resilient?",
      "parentUuid": "7c4df0da_f88bbccb",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04fb97c1_a9ab7963",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-31T08:15:19Z",
      "side": 1,
      "message": "If possible, I do think it would be nice to make these more uniform. I share Rafael\u0027s concern that we\u0027re special-casing a lot of things in the destroy sequence, but I\u0027m okay with how this code is now, and we can look at making things more uniform and Destroy more resilient next.\n\nKai, what do you think?",
      "parentUuid": "2594051e_43672f55",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af00c441_53cc3a39",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-01-31T22:40:22Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "04fb97c1_a9ab7963",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d437f15e_7f65710d",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-23T21:30:22Z",
      "side": 1,
      "message": "do we want to send WGPUFenceCompletionStatus_DeviceLost status here?",
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdd9de0b_e6da00f6",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-24T00:46:11Z",
      "side": 1,
      "message": "If the Device is lost, then yes.",
      "parentUuid": "d437f15e_7f65710d",
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5859507d_e4c3425b",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-29T19:50:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdd9de0b_e6da00f6",
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d7ed1e5_8bd04061",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-24T00:46:11Z",
      "side": 1,
      "message": "Similar to with Buffers, can we test that\n\nfence.onCompletion(value, callback, userdata)\nSetCallbackAndLoseForTesting();\n\nwill call |callback| with DeviceLost ?",
      "range": {
        "startLine": 109,
        "startChar": 20,
        "endLine": 109,
        "endChar": 38
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca5d38c2_e91d0eb8",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-29T18:00:30Z",
      "side": 1,
      "message": "when this happens, are we expecting when we get the completed value to change? do we continue to set the value, but just callback with device lost?",
      "parentUuid": "8d7ed1e5_8bd04061",
      "range": {
        "startLine": 109,
        "startChar": 20,
        "endLine": 109,
        "endChar": 38
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5a47f04_8b628496",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-31T08:15:19Z",
      "side": 1,
      "message": "We should call the callback with DeviceLost. What the completed value should be -- I\u0027m not sure. That may be something we need to decide in the WebGPU working group. For now, I think it\u0027s fine to continue to set it.",
      "parentUuid": "ca5d38c2_e91d0eb8",
      "range": {
        "startLine": 109,
        "startChar": 20,
        "endLine": 109,
        "endChar": 38
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a170e6a_d97c1567",
        "filename": "src/dawn_native/Fence.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-31T18:35:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f5a47f04_8b628496",
      "range": {
        "startLine": 109,
        "startChar": 20,
        "endLine": 109,
        "endChar": 38
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8201e9e8_e37ef1bb",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:11:02Z",
      "side": 1,
      "message": "This isn\u0027t used.",
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64db6779_6eb0d29a",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-27T19:49:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8201e9e8_e37ef1bb",
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed699b82_e4404446",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T00:52:29Z",
      "side": 1,
      "message": "Here and in our other DeviceLost tests, shouldn\u0027t we be matching explicitly against the DEVICE_LOST status?",
      "range": {
        "startLine": 70,
        "startChar": 50,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50b8f980_5fbde1ea",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-29T19:50:49Z",
      "side": 1,
      "message": "For DeviceLostCallback the first argument is a message, not the status since all device lost is device lost status. void(const char* message, void* userdata)",
      "parentUuid": "ed699b82_e4404446",
      "range": {
        "startLine": 70,
        "startChar": 50,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f7ac1ca_5621b46a",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-31T08:15:19Z",
      "side": 1,
      "message": "Ah, you\u0027re right. My mistake.",
      "parentUuid": "50b8f980_5fbde1ea",
      "range": {
        "startLine": 70,
        "startChar": 50,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c97cdfa8_d9284dce",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-01-29T00:52:29Z",
      "side": 1,
      "message": "Should this be DeviceLost ?",
      "range": {
        "startLine": 272,
        "startChar": 53,
        "endLine": 272,
        "endChar": 84
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b249ecf_4f016a62",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-01-29T19:50:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c97cdfa8_d9284dce",
      "range": {
        "startLine": 272,
        "startChar": 53,
        "endLine": 272,
        "endChar": 84
      },
      "revId": "ad9f5dd7507c3dcf280459735b7c39ebd16f6f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}