// Copyright 2021 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/intrinsic-gen
// using the template:
//   src/tint/resolver/intrinsic_table.inl.tmpl
// and the intrinsic defintion file:
//   src/tint/intrinsics.def
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

// clang-format off

/// TypeMatcher for 'type bool'
/// @see src/tint/intrinsics.def:73:6
class Bool : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Bool::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_bool(ty)) {
    return nullptr;
  }
  return build_bool(state);
}

std::string Bool::String(MatchState*) const {
  return "bool";
}

/// TypeMatcher for 'type af'
/// @see src/tint/intrinsics.def:74:48
class Af : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Af::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_af(ty)) {
    return nullptr;
  }
  return build_af(state);
}

std::string Af::String(MatchState*) const {
  std::stringstream ss;
  ss << "abstract-float";
  return ss.str();
}

/// TypeMatcher for 'type ai'
/// @see src/tint/intrinsics.def:75:48
class Ai : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Ai::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_ai(ty)) {
    return nullptr;
  }
  return build_ai(state);
}

std::string Ai::String(MatchState*) const {
  std::stringstream ss;
  ss << "abstract-int";
  return ss.str();
}

/// TypeMatcher for 'type i32'
/// @see src/tint/intrinsics.def:76:21
class I32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* I32::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_i32(ty)) {
    return nullptr;
  }
  return build_i32(state);
}

std::string I32::String(MatchState*) const {
  return "i32";
}

/// TypeMatcher for 'type u32'
/// @see src/tint/intrinsics.def:77:21
class U32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* U32::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_u32(ty)) {
    return nullptr;
  }
  return build_u32(state);
}

std::string U32::String(MatchState*) const {
  return "u32";
}

/// TypeMatcher for 'type f32'
/// @see src/tint/intrinsics.def:78:21
class F32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* F32::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_f32(ty)) {
    return nullptr;
  }
  return build_f32(state);
}

std::string F32::String(MatchState*) const {
  return "f32";
}

/// TypeMatcher for 'type f16'
/// @see src/tint/intrinsics.def:79:21
class F16 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* F16::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_f16(ty)) {
    return nullptr;
  }
  return build_f16(state);
}

std::string F16::String(MatchState*) const {
  return "f16";
}

/// TypeMatcher for 'type vec2'
/// @see src/tint/intrinsics.def:80:6
class Vec2 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Vec2::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_vec2(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_vec2(state, T);
}

std::string Vec2::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "vec2<" + T + ">";
}

/// TypeMatcher for 'type vec3'
/// @see src/tint/intrinsics.def:81:6
class Vec3 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Vec3::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_vec3(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_vec3(state, T);
}

std::string Vec3::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "vec3<" + T + ">";
}

/// TypeMatcher for 'type vec4'
/// @see src/tint/intrinsics.def:82:6
class Vec4 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Vec4::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_vec4(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_vec4(state, T);
}

std::string Vec4::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "vec4<" + T + ">";
}

/// TypeMatcher for 'type mat2x2'
/// @see src/tint/intrinsics.def:83:6
class Mat2X2 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat2X2::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat2x2(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat2x2(state, T);
}

std::string Mat2X2::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat2x2<" + T + ">";
}

/// TypeMatcher for 'type mat2x3'
/// @see src/tint/intrinsics.def:84:6
class Mat2X3 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat2X3::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat2x3(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat2x3(state, T);
}

std::string Mat2X3::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat2x3<" + T + ">";
}

/// TypeMatcher for 'type mat2x4'
/// @see src/tint/intrinsics.def:85:6
class Mat2X4 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat2X4::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat2x4(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat2x4(state, T);
}

std::string Mat2X4::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat2x4<" + T + ">";
}

/// TypeMatcher for 'type mat3x2'
/// @see src/tint/intrinsics.def:86:6
class Mat3X2 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat3X2::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat3x2(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat3x2(state, T);
}

std::string Mat3X2::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat3x2<" + T + ">";
}

/// TypeMatcher for 'type mat3x3'
/// @see src/tint/intrinsics.def:87:6
class Mat3X3 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat3X3::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat3x3(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat3x3(state, T);
}

std::string Mat3X3::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat3x3<" + T + ">";
}

/// TypeMatcher for 'type mat3x4'
/// @see src/tint/intrinsics.def:88:6
class Mat3X4 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat3X4::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat3x4(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat3x4(state, T);
}

std::string Mat3X4::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat3x4<" + T + ">";
}

/// TypeMatcher for 'type mat4x2'
/// @see src/tint/intrinsics.def:89:6
class Mat4X2 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat4X2::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat4x2(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat4x2(state, T);
}

std::string Mat4X2::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat4x2<" + T + ">";
}

/// TypeMatcher for 'type mat4x3'
/// @see src/tint/intrinsics.def:90:6
class Mat4X3 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat4X3::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat4x3(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat4x3(state, T);
}

std::string Mat4X3::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat4x3<" + T + ">";
}

/// TypeMatcher for 'type mat4x4'
/// @see src/tint/intrinsics.def:91:6
class Mat4X4 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat4X4::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_mat4x4(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat4x4(state, T);
}

std::string Mat4X4::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "mat4x4<" + T + ">";
}

/// TypeMatcher for 'type vec'
/// @see src/tint/intrinsics.def:92:34
class Vec : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Vec::Match(MatchState& state, const sem::Type* ty) const {
  Number N = Number::invalid;
  const sem::Type* T = nullptr;
  if (!match_vec(ty, N, T)) {
    return nullptr;
  }
  N = state.Num(N);
  if (!N.IsValid()) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_vec(state, N, T);
}

std::string Vec::String(MatchState* state) const {
  const std::string N = state->NumName();
  const std::string T = state->TypeName();
  std::stringstream ss;
  ss << "vec" << N << "<" << T << ">";
  return ss.str();
}

/// TypeMatcher for 'type mat'
/// @see src/tint/intrinsics.def:93:34
class Mat : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Mat::Match(MatchState& state, const sem::Type* ty) const {
  Number N = Number::invalid;
  Number M = Number::invalid;
  const sem::Type* T = nullptr;
  if (!match_mat(ty, N, M, T)) {
    return nullptr;
  }
  N = state.Num(N);
  if (!N.IsValid()) {
    return nullptr;
  }
  M = state.Num(M);
  if (!M.IsValid()) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_mat(state, N, M, T);
}

std::string Mat::String(MatchState* state) const {
  const std::string N = state->NumName();
  const std::string M = state->NumName();
  const std::string T = state->TypeName();
  std::stringstream ss;
  ss << "mat" << N << "x" << M << "<" << T << ">";
  return ss.str();
}

/// TypeMatcher for 'type ptr'
/// @see src/tint/intrinsics.def:94:6
class Ptr : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Ptr::Match(MatchState& state, const sem::Type* ty) const {
  Number S = Number::invalid;
  const sem::Type* T = nullptr;
  Number A = Number::invalid;
  if (!match_ptr(ty, S, T, A)) {
    return nullptr;
  }
  S = state.Num(S);
  if (!S.IsValid()) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  A = state.Num(A);
  if (!A.IsValid()) {
    return nullptr;
  }
  return build_ptr(state, S, T, A);
}

std::string Ptr::String(MatchState* state) const {
  const std::string S = state->NumName();
  const std::string T = state->TypeName();
  const std::string A = state->NumName();
  return "ptr<" + S + ", " + T + ", " + A + ">";
}

/// TypeMatcher for 'type atomic'
/// @see src/tint/intrinsics.def:95:6
class Atomic : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Atomic::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_atomic(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_atomic(state, T);
}

std::string Atomic::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "atomic<" + T + ">";
}

/// TypeMatcher for 'type array'
/// @see src/tint/intrinsics.def:96:6
class Array : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Array::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_array(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_array(state, T);
}

std::string Array::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "array<" + T + ">";
}

/// TypeMatcher for 'type sampler'
/// @see src/tint/intrinsics.def:97:6
class Sampler : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Sampler::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_sampler(ty)) {
    return nullptr;
  }
  return build_sampler(state);
}

std::string Sampler::String(MatchState*) const {
  return "sampler";
}

/// TypeMatcher for 'type sampler_comparison'
/// @see src/tint/intrinsics.def:98:6
class SamplerComparison : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* SamplerComparison::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_sampler_comparison(ty)) {
    return nullptr;
  }
  return build_sampler_comparison(state);
}

std::string SamplerComparison::String(MatchState*) const {
  return "sampler_comparison";
}

/// TypeMatcher for 'type texture_1d'
/// @see src/tint/intrinsics.def:99:6
class Texture1D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Texture1D::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_1d(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_1d(state, T);
}

std::string Texture1D::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_1d<" + T + ">";
}

/// TypeMatcher for 'type texture_2d'
/// @see src/tint/intrinsics.def:100:6
class Texture2D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Texture2D::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_2d(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_2d(state, T);
}

std::string Texture2D::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_2d<" + T + ">";
}

/// TypeMatcher for 'type texture_2d_array'
/// @see src/tint/intrinsics.def:101:6
class Texture2DArray : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Texture2DArray::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_2d_array(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_2d_array(state, T);
}

std::string Texture2DArray::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_2d_array<" + T + ">";
}

/// TypeMatcher for 'type texture_3d'
/// @see src/tint/intrinsics.def:102:6
class Texture3D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Texture3D::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_3d(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_3d(state, T);
}

std::string Texture3D::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_3d<" + T + ">";
}

/// TypeMatcher for 'type texture_cube'
/// @see src/tint/intrinsics.def:103:6
class TextureCube : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureCube::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_cube(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_cube(state, T);
}

std::string TextureCube::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_cube<" + T + ">";
}

/// TypeMatcher for 'type texture_cube_array'
/// @see src/tint/intrinsics.def:104:6
class TextureCubeArray : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureCubeArray::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_cube_array(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_cube_array(state, T);
}

std::string TextureCubeArray::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_cube_array<" + T + ">";
}

/// TypeMatcher for 'type texture_multisampled_2d'
/// @see src/tint/intrinsics.def:105:6
class TextureMultisampled2D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureMultisampled2D::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_texture_multisampled_2d(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_texture_multisampled_2d(state, T);
}

std::string TextureMultisampled2D::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "texture_multisampled_2d<" + T + ">";
}

/// TypeMatcher for 'type texture_depth_2d'
/// @see src/tint/intrinsics.def:106:6
class TextureDepth2D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureDepth2D::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_texture_depth_2d(ty)) {
    return nullptr;
  }
  return build_texture_depth_2d(state);
}

std::string TextureDepth2D::String(MatchState*) const {
  return "texture_depth_2d";
}

/// TypeMatcher for 'type texture_depth_2d_array'
/// @see src/tint/intrinsics.def:107:6
class TextureDepth2DArray : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureDepth2DArray::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_texture_depth_2d_array(ty)) {
    return nullptr;
  }
  return build_texture_depth_2d_array(state);
}

std::string TextureDepth2DArray::String(MatchState*) const {
  return "texture_depth_2d_array";
}

/// TypeMatcher for 'type texture_depth_cube'
/// @see src/tint/intrinsics.def:108:6
class TextureDepthCube : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureDepthCube::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_texture_depth_cube(ty)) {
    return nullptr;
  }
  return build_texture_depth_cube(state);
}

std::string TextureDepthCube::String(MatchState*) const {
  return "texture_depth_cube";
}

/// TypeMatcher for 'type texture_depth_cube_array'
/// @see src/tint/intrinsics.def:109:6
class TextureDepthCubeArray : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureDepthCubeArray::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_texture_depth_cube_array(ty)) {
    return nullptr;
  }
  return build_texture_depth_cube_array(state);
}

std::string TextureDepthCubeArray::String(MatchState*) const {
  return "texture_depth_cube_array";
}

/// TypeMatcher for 'type texture_depth_multisampled_2d'
/// @see src/tint/intrinsics.def:110:6
class TextureDepthMultisampled2D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureDepthMultisampled2D::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_texture_depth_multisampled_2d(ty)) {
    return nullptr;
  }
  return build_texture_depth_multisampled_2d(state);
}

std::string TextureDepthMultisampled2D::String(MatchState*) const {
  return "texture_depth_multisampled_2d";
}

/// TypeMatcher for 'type texture_storage_1d'
/// @see src/tint/intrinsics.def:111:6
class TextureStorage1D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureStorage1D::Match(MatchState& state, const sem::Type* ty) const {
  Number F = Number::invalid;
  Number A = Number::invalid;
  if (!match_texture_storage_1d(ty, F, A)) {
    return nullptr;
  }
  F = state.Num(F);
  if (!F.IsValid()) {
    return nullptr;
  }
  A = state.Num(A);
  if (!A.IsValid()) {
    return nullptr;
  }
  return build_texture_storage_1d(state, F, A);
}

std::string TextureStorage1D::String(MatchState* state) const {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
  return "texture_storage_1d<" + F + ", " + A + ">";
}

/// TypeMatcher for 'type texture_storage_2d'
/// @see src/tint/intrinsics.def:112:6
class TextureStorage2D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureStorage2D::Match(MatchState& state, const sem::Type* ty) const {
  Number F = Number::invalid;
  Number A = Number::invalid;
  if (!match_texture_storage_2d(ty, F, A)) {
    return nullptr;
  }
  F = state.Num(F);
  if (!F.IsValid()) {
    return nullptr;
  }
  A = state.Num(A);
  if (!A.IsValid()) {
    return nullptr;
  }
  return build_texture_storage_2d(state, F, A);
}

std::string TextureStorage2D::String(MatchState* state) const {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
  return "texture_storage_2d<" + F + ", " + A + ">";
}

/// TypeMatcher for 'type texture_storage_2d_array'
/// @see src/tint/intrinsics.def:113:6
class TextureStorage2DArray : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureStorage2DArray::Match(MatchState& state, const sem::Type* ty) const {
  Number F = Number::invalid;
  Number A = Number::invalid;
  if (!match_texture_storage_2d_array(ty, F, A)) {
    return nullptr;
  }
  F = state.Num(F);
  if (!F.IsValid()) {
    return nullptr;
  }
  A = state.Num(A);
  if (!A.IsValid()) {
    return nullptr;
  }
  return build_texture_storage_2d_array(state, F, A);
}

std::string TextureStorage2DArray::String(MatchState* state) const {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
  return "texture_storage_2d_array<" + F + ", " + A + ">";
}

/// TypeMatcher for 'type texture_storage_3d'
/// @see src/tint/intrinsics.def:114:6
class TextureStorage3D : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureStorage3D::Match(MatchState& state, const sem::Type* ty) const {
  Number F = Number::invalid;
  Number A = Number::invalid;
  if (!match_texture_storage_3d(ty, F, A)) {
    return nullptr;
  }
  F = state.Num(F);
  if (!F.IsValid()) {
    return nullptr;
  }
  A = state.Num(A);
  if (!A.IsValid()) {
    return nullptr;
  }
  return build_texture_storage_3d(state, F, A);
}

std::string TextureStorage3D::String(MatchState* state) const {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
  return "texture_storage_3d<" + F + ", " + A + ">";
}

/// TypeMatcher for 'type texture_external'
/// @see src/tint/intrinsics.def:115:6
class TextureExternal : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* TextureExternal::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_texture_external(ty)) {
    return nullptr;
  }
  return build_texture_external(state);
}

std::string TextureExternal::String(MatchState*) const {
  return "texture_external";
}

/// TypeMatcher for 'type __modf_result'
/// @see src/tint/intrinsics.def:117:6
class ModfResult : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ModfResult::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_modf_result(ty)) {
    return nullptr;
  }
  return build_modf_result(state);
}

std::string ModfResult::String(MatchState*) const {
  return "__modf_result";
}

/// TypeMatcher for 'type __modf_result_vec'
/// @see src/tint/intrinsics.def:118:39
class ModfResultVec : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ModfResultVec::Match(MatchState& state, const sem::Type* ty) const {
  Number N = Number::invalid;
  if (!match_modf_result_vec(ty, N)) {
    return nullptr;
  }
  N = state.Num(N);
  if (!N.IsValid()) {
    return nullptr;
  }
  return build_modf_result_vec(state, N);
}

std::string ModfResultVec::String(MatchState* state) const {
  const std::string N = state->NumName();
  std::stringstream ss;
  ss << "__modf_result_vec" << N;
  return ss.str();
}

/// TypeMatcher for 'type __frexp_result'
/// @see src/tint/intrinsics.def:119:6
class FrexpResult : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* FrexpResult::Match(MatchState& state, const sem::Type* ty) const {
  if (!match_frexp_result(ty)) {
    return nullptr;
  }
  return build_frexp_result(state);
}

std::string FrexpResult::String(MatchState*) const {
  return "__frexp_result";
}

/// TypeMatcher for 'type __frexp_result_vec'
/// @see src/tint/intrinsics.def:120:40
class FrexpResultVec : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* FrexpResultVec::Match(MatchState& state, const sem::Type* ty) const {
  Number N = Number::invalid;
  if (!match_frexp_result_vec(ty, N)) {
    return nullptr;
  }
  N = state.Num(N);
  if (!N.IsValid()) {
    return nullptr;
  }
  return build_frexp_result_vec(state, N);
}

std::string FrexpResultVec::String(MatchState* state) const {
  const std::string N = state->NumName();
  std::stringstream ss;
  ss << "__frexp_result_vec" << N;
  return ss.str();
}

/// TypeMatcher for 'type __atomic_compare_exchange_result'
/// @see src/tint/intrinsics.def:122:6
class AtomicCompareExchangeResult : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* AtomicCompareExchangeResult::Match(MatchState& state, const sem::Type* ty) const {
  const sem::Type* T = nullptr;
  if (!match_atomic_compare_exchange_result(ty, T)) {
    return nullptr;
  }
  T = state.Type(T);
  if (T == nullptr) {
    return nullptr;
  }
  return build_atomic_compare_exchange_result(state, T);
}

std::string AtomicCompareExchangeResult::String(MatchState* state) const {
  const std::string T = state->TypeName();
  return "__atomic_compare_exchange_result<" + T + ">";
}

/// TypeMatcher for 'match f32f16'
/// @see src/tint/intrinsics.def:130:7
class F32F16 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* F32F16::Match(MatchState& state, const sem::Type* ty) const {
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  return nullptr;
}

std::string F32F16::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << " or " << F16().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match fiu32'
/// @see src/tint/intrinsics.def:131:7
class Fiu32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Fiu32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  return nullptr;
}

std::string Fiu32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << ", " << I32().String(nullptr) << " or " << U32().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match fi32'
/// @see src/tint/intrinsics.def:132:7
class Fi32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Fi32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  return nullptr;
}

std::string Fi32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << " or " << I32().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match iu32'
/// @see src/tint/intrinsics.def:133:7
class Iu32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Iu32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  return nullptr;
}

std::string Iu32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << I32().String(nullptr) << " or " << U32().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match aiu32'
/// @see src/tint/intrinsics.def:134:7
class Aiu32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Aiu32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_ai(ty)) {
    return build_ai(state);
  }
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  return nullptr;
}

std::string Aiu32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << Ai().String(nullptr) << ", " << I32().String(nullptr) << " or " << U32().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match scalar'
/// @see src/tint/intrinsics.def:135:7
class Scalar : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* Scalar::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  if (match_bool(ty)) {
    return build_bool(state);
  }
  return nullptr;
}

std::string Scalar::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << ", " << F16().String(nullptr) << ", " << I32().String(nullptr) << ", " << U32().String(nullptr) << " or " << Bool().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match abstract_or_scalar'
/// @see src/tint/intrinsics.def:136:7
class AbstractOrScalar : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* AbstractOrScalar::Match(MatchState& state, const sem::Type* ty) const {
  if (match_af(ty)) {
    return build_af(state);
  }
  if (match_ai(ty)) {
    return build_ai(state);
  }
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  if (match_bool(ty)) {
    return build_bool(state);
  }
  return nullptr;
}

std::string AbstractOrScalar::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << Ai().String(nullptr) << ", " << Af().String(nullptr) << ", " << F32().String(nullptr) << ", " << F16().String(nullptr) << ", " << I32().String(nullptr) << ", " << U32().String(nullptr) << " or " << Bool().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match af_f32'
/// @see src/tint/intrinsics.def:137:7
class AfF32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* AfF32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_af(ty)) {
    return build_af(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  return nullptr;
}

std::string AfF32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << Af().String(nullptr) << " or " << F32().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match af_f32f16'
/// @see src/tint/intrinsics.def:138:7
class AfF32F16 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* AfF32F16::Match(MatchState& state, const sem::Type* ty) const {
  if (match_af(ty)) {
    return build_af(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  return nullptr;
}

std::string AfF32F16::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << Af().String(nullptr) << ", " << F32().String(nullptr) << " or " << F16().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match scalar_no_f32'
/// @see src/tint/intrinsics.def:139:7
class ScalarNoF32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ScalarNoF32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  if (match_bool(ty)) {
    return build_bool(state);
  }
  return nullptr;
}

std::string ScalarNoF32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << I32().String(nullptr) << ", " << F16().String(nullptr) << ", " << U32().String(nullptr) << " or " << Bool().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match scalar_no_f16'
/// @see src/tint/intrinsics.def:140:7
class ScalarNoF16 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ScalarNoF16::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_bool(ty)) {
    return build_bool(state);
  }
  return nullptr;
}

std::string ScalarNoF16::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << ", " << I32().String(nullptr) << ", " << U32().String(nullptr) << " or " << Bool().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match scalar_no_i32'
/// @see src/tint/intrinsics.def:141:7
class ScalarNoI32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ScalarNoI32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  if (match_bool(ty)) {
    return build_bool(state);
  }
  return nullptr;
}

std::string ScalarNoI32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << ", " << F16().String(nullptr) << ", " << U32().String(nullptr) << " or " << Bool().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match scalar_no_u32'
/// @see src/tint/intrinsics.def:142:7
class ScalarNoU32 : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ScalarNoU32::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  if (match_bool(ty)) {
    return build_bool(state);
  }
  return nullptr;
}

std::string ScalarNoU32::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << ", " << F16().String(nullptr) << ", " << I32().String(nullptr) << " or " << Bool().String(nullptr);
  return ss.str();
}

/// TypeMatcher for 'match scalar_no_bool'
/// @see src/tint/intrinsics.def:143:7
class ScalarNoBool : public TypeMatcher {
 public:
  /// Checks whether the given type matches the matcher rules, and returns the
  /// expected, canonicalized type on success.
  /// Match may define and refine the template types and numbers in state.
  /// @param state the MatchState
  /// @param type the type to match
  /// @returns the canonicalized type on match, otherwise nullptr
  const sem::Type* Match(MatchState& state,
                         const sem::Type* type) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

const sem::Type* ScalarNoBool::Match(MatchState& state, const sem::Type* ty) const {
  if (match_i32(ty)) {
    return build_i32(state);
  }
  if (match_u32(ty)) {
    return build_u32(state);
  }
  if (match_f32(ty)) {
    return build_f32(state);
  }
  if (match_f16(ty)) {
    return build_f16(state);
  }
  return nullptr;
}

std::string ScalarNoBool::String(MatchState*) const {
  std::stringstream ss;
  // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
  // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
  ss << F32().String(nullptr) << ", " << F16().String(nullptr) << ", " << I32().String(nullptr) << " or " << U32().String(nullptr);
  return ss.str();
}

/// EnumMatcher for 'match f32_texel_format'
/// @see src/tint/intrinsics.def:154:7
class F32TexelFormat : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number F32TexelFormat::Match(MatchState&, Number number) const {
  switch (static_cast<TexelFormat>(number.Value())) {
    case TexelFormat::kRgba8Unorm:
    case TexelFormat::kRgba8Snorm:
    case TexelFormat::kRgba16Float:
    case TexelFormat::kR32Float:
    case TexelFormat::kRg32Float:
    case TexelFormat::kRgba32Float:
      return number;
    default:
      return Number::invalid;
  }
}

std::string F32TexelFormat::String(MatchState*) const {
  return "rgba8unorm, rgba8snorm, rgba16float, r32float, rg32float or rgba32float";
}

/// EnumMatcher for 'match i32_texel_format'
/// @see src/tint/intrinsics.def:156:7
class I32TexelFormat : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number I32TexelFormat::Match(MatchState&, Number number) const {
  switch (static_cast<TexelFormat>(number.Value())) {
    case TexelFormat::kRgba8Sint:
    case TexelFormat::kRgba16Sint:
    case TexelFormat::kR32Sint:
    case TexelFormat::kRg32Sint:
    case TexelFormat::kRgba32Sint:
      return number;
    default:
      return Number::invalid;
  }
}

std::string I32TexelFormat::String(MatchState*) const {
  return "rgba8sint, rgba16sint, r32sint, rg32sint or rgba32sint";
}

/// EnumMatcher for 'match u32_texel_format'
/// @see src/tint/intrinsics.def:158:7
class U32TexelFormat : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number U32TexelFormat::Match(MatchState&, Number number) const {
  switch (static_cast<TexelFormat>(number.Value())) {
    case TexelFormat::kRgba8Uint:
    case TexelFormat::kRgba16Uint:
    case TexelFormat::kR32Uint:
    case TexelFormat::kRg32Uint:
    case TexelFormat::kRgba32Uint:
      return number;
    default:
      return Number::invalid;
  }
}

std::string U32TexelFormat::String(MatchState*) const {
  return "rgba8uint, rgba16uint, r32uint, rg32uint or rgba32uint";
}

/// EnumMatcher for 'match write_only'
/// @see src/tint/intrinsics.def:161:7
class WriteOnly : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number WriteOnly::Match(MatchState&, Number number) const {
  if (number.IsAny() || number.Value() == static_cast<uint32_t>(Access::kWrite)) {
    return Number(static_cast<uint32_t>(Access::kWrite));
  }
  return Number::invalid;
}

std::string WriteOnly::String(MatchState*) const {
  return "write";
}

/// EnumMatcher for 'match function_private_workgroup'
/// @see src/tint/intrinsics.def:163:7
class FunctionPrivateWorkgroup : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number FunctionPrivateWorkgroup::Match(MatchState&, Number number) const {
  switch (static_cast<StorageClass>(number.Value())) {
    case StorageClass::kFunction:
    case StorageClass::kPrivate:
    case StorageClass::kWorkgroup:
      return number;
    default:
      return Number::invalid;
  }
}

std::string FunctionPrivateWorkgroup::String(MatchState*) const {
  return "function, private or workgroup";
}

/// EnumMatcher for 'match workgroup_or_storage'
/// @see src/tint/intrinsics.def:164:7
class WorkgroupOrStorage : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number WorkgroupOrStorage::Match(MatchState&, Number number) const {
  switch (static_cast<StorageClass>(number.Value())) {
    case StorageClass::kWorkgroup:
    case StorageClass::kStorage:
      return number;
    default:
      return Number::invalid;
  }
}

std::string WorkgroupOrStorage::String(MatchState*) const {
  return "workgroup or storage";
}

/// EnumMatcher for 'match storage'
class Storage : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number Storage::Match(MatchState&, Number number) const {
  if (number.IsAny() || number.Value() == static_cast<uint32_t>(StorageClass::kStorage)) {
    return Number(static_cast<uint32_t>(StorageClass::kStorage));
  }
  return Number::invalid;
}

std::string Storage::String(MatchState*) const {
  return "storage";
}

/// EnumMatcher for 'match write'
class Write : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number Write::Match(MatchState&, Number number) const {
  if (number.IsAny() || number.Value() == static_cast<uint32_t>(Access::kWrite)) {
    return Number(static_cast<uint32_t>(Access::kWrite));
  }
  return Number::invalid;
}

std::string Write::String(MatchState*) const {
  return "write";
}

/// EnumMatcher for 'match read_write'
class ReadWrite : public NumberMatcher {
 public:
  /// Checks whether the given number matches the enum matcher rules.
  /// Match may define template numbers in state.
  /// @param state the MatchState
  /// @param number the enum value as a Number
  /// @return true if the enum value matches the set
  Number Match(MatchState& state, Number number) const override;
  /// @param state the MatchState
  /// @return a string representation of the matcher.
  std::string String(MatchState* state) const override;
};

Number ReadWrite::Match(MatchState&, Number number) const {
  if (number.IsAny() || number.Value() == static_cast<uint32_t>(Access::kReadWrite)) {
    return Number(static_cast<uint32_t>(Access::kReadWrite));
  }
  return Number::invalid;
}

std::string ReadWrite::String(MatchState*) const {
  return "read_write";
}

/// Matchers holds type and number matchers
class Matchers {
 private:
  TemplateTypeMatcher template_type_0_{0};
  TemplateTypeMatcher template_type_1_{1};
  TemplateNumberMatcher template_number_0_{0};
  TemplateNumberMatcher template_number_1_{1};
  TemplateNumberMatcher template_number_2_{2};
  Bool Bool_;
  Af Af_;
  Ai Ai_;
  I32 I32_;
  U32 U32_;
  F32 F32_;
  F16 F16_;
  Vec2 Vec2_;
  Vec3 Vec3_;
  Vec4 Vec4_;
  Mat2X2 Mat2X2_;
  Mat2X3 Mat2X3_;
  Mat2X4 Mat2X4_;
  Mat3X2 Mat3X2_;
  Mat3X3 Mat3X3_;
  Mat3X4 Mat3X4_;
  Mat4X2 Mat4X2_;
  Mat4X3 Mat4X3_;
  Mat4X4 Mat4X4_;
  Vec Vec_;
  Mat Mat_;
  Ptr Ptr_;
  Atomic Atomic_;
  Array Array_;
  Sampler Sampler_;
  SamplerComparison SamplerComparison_;
  Texture1D Texture1D_;
  Texture2D Texture2D_;
  Texture2DArray Texture2DArray_;
  Texture3D Texture3D_;
  TextureCube TextureCube_;
  TextureCubeArray TextureCubeArray_;
  TextureMultisampled2D TextureMultisampled2D_;
  TextureDepth2D TextureDepth2D_;
  TextureDepth2DArray TextureDepth2DArray_;
  TextureDepthCube TextureDepthCube_;
  TextureDepthCubeArray TextureDepthCubeArray_;
  TextureDepthMultisampled2D TextureDepthMultisampled2D_;
  TextureStorage1D TextureStorage1D_;
  TextureStorage2D TextureStorage2D_;
  TextureStorage2DArray TextureStorage2DArray_;
  TextureStorage3D TextureStorage3D_;
  TextureExternal TextureExternal_;
  ModfResult ModfResult_;
  ModfResultVec ModfResultVec_;
  FrexpResult FrexpResult_;
  FrexpResultVec FrexpResultVec_;
  AtomicCompareExchangeResult AtomicCompareExchangeResult_;
  F32F16 F32F16_;
  Fiu32 Fiu32_;
  Fi32 Fi32_;
  Iu32 Iu32_;
  Aiu32 Aiu32_;
  Scalar Scalar_;
  AbstractOrScalar AbstractOrScalar_;
  AfF32 AfF32_;
  AfF32F16 AfF32F16_;
  ScalarNoF32 ScalarNoF32_;
  ScalarNoF16 ScalarNoF16_;
  ScalarNoI32 ScalarNoI32_;
  ScalarNoU32 ScalarNoU32_;
  ScalarNoBool ScalarNoBool_;
  F32TexelFormat F32TexelFormat_;
  I32TexelFormat I32TexelFormat_;
  U32TexelFormat U32TexelFormat_;
  WriteOnly WriteOnly_;
  FunctionPrivateWorkgroup FunctionPrivateWorkgroup_;
  WorkgroupOrStorage WorkgroupOrStorage_;
  Storage Storage_;
  Write Write_;
  ReadWrite ReadWrite_;

 public:
  /// Constructor
  Matchers();
  /// Destructor
  ~Matchers();

  /// The template types, types, and type matchers
  TypeMatcher const* const type[64] = {
    /* [0] */ &template_type_0_,
    /* [1] */ &template_type_1_,
    /* [2] */ &Bool_,
    /* [3] */ &Af_,
    /* [4] */ &Ai_,
    /* [5] */ &I32_,
    /* [6] */ &U32_,
    /* [7] */ &F32_,
    /* [8] */ &F16_,
    /* [9] */ &Vec2_,
    /* [10] */ &Vec3_,
    /* [11] */ &Vec4_,
    /* [12] */ &Mat2X2_,
    /* [13] */ &Mat2X3_,
    /* [14] */ &Mat2X4_,
    /* [15] */ &Mat3X2_,
    /* [16] */ &Mat3X3_,
    /* [17] */ &Mat3X4_,
    /* [18] */ &Mat4X2_,
    /* [19] */ &Mat4X3_,
    /* [20] */ &Mat4X4_,
    /* [21] */ &Vec_,
    /* [22] */ &Mat_,
    /* [23] */ &Ptr_,
    /* [24] */ &Atomic_,
    /* [25] */ &Array_,
    /* [26] */ &Sampler_,
    /* [27] */ &SamplerComparison_,
    /* [28] */ &Texture1D_,
    /* [29] */ &Texture2D_,
    /* [30] */ &Texture2DArray_,
    /* [31] */ &Texture3D_,
    /* [32] */ &TextureCube_,
    /* [33] */ &TextureCubeArray_,
    /* [34] */ &TextureMultisampled2D_,
    /* [35] */ &TextureDepth2D_,
    /* [36] */ &TextureDepth2DArray_,
    /* [37] */ &TextureDepthCube_,
    /* [38] */ &TextureDepthCubeArray_,
    /* [39] */ &TextureDepthMultisampled2D_,
    /* [40] */ &TextureStorage1D_,
    /* [41] */ &TextureStorage2D_,
    /* [42] */ &TextureStorage2DArray_,
    /* [43] */ &TextureStorage3D_,
    /* [44] */ &TextureExternal_,
    /* [45] */ &ModfResult_,
    /* [46] */ &ModfResultVec_,
    /* [47] */ &FrexpResult_,
    /* [48] */ &FrexpResultVec_,
    /* [49] */ &AtomicCompareExchangeResult_,
    /* [50] */ &F32F16_,
    /* [51] */ &Fiu32_,
    /* [52] */ &Fi32_,
    /* [53] */ &Iu32_,
    /* [54] */ &Aiu32_,
    /* [55] */ &Scalar_,
    /* [56] */ &AbstractOrScalar_,
    /* [57] */ &AfF32_,
    /* [58] */ &AfF32F16_,
    /* [59] */ &ScalarNoF32_,
    /* [60] */ &ScalarNoF16_,
    /* [61] */ &ScalarNoI32_,
    /* [62] */ &ScalarNoU32_,
    /* [63] */ &ScalarNoBool_,
  };

  /// The template numbers, and number matchers
  NumberMatcher const* const number[12] = {
    /* [0] */ &template_number_0_,
    /* [1] */ &template_number_1_,
    /* [2] */ &template_number_2_,
    /* [3] */ &F32TexelFormat_,
    /* [4] */ &I32TexelFormat_,
    /* [5] */ &U32TexelFormat_,
    /* [6] */ &WriteOnly_,
    /* [7] */ &FunctionPrivateWorkgroup_,
    /* [8] */ &WorkgroupOrStorage_,
    /* [9] */ &Storage_,
    /* [10] */ &Write_,
    /* [11] */ &ReadWrite_,
  };
};

Matchers::Matchers() = default;
Matchers::~Matchers() = default;

constexpr MatcherIndex kMatcherIndices[] = {
  /* [0] */ 23,
  /* [1] */ 0,
  /* [2] */ 24,
  /* [3] */ 0,
  /* [4] */ 11,
  /* [5] */ 0,
  /* [6] */ 23,
  /* [7] */ 9,
  /* [8] */ 25,
  /* [9] */ 0,
  /* [10] */ 0,
  /* [11] */ 22,
  /* [12] */ 0,
  /* [13] */ 1,
  /* [14] */ 7,
  /* [15] */ 22,
  /* [16] */ 0,
  /* [17] */ 2,
  /* [18] */ 7,
  /* [19] */ 22,
  /* [20] */ 1,
  /* [21] */ 0,
  /* [22] */ 7,
  /* [23] */ 22,
  /* [24] */ 1,
  /* [25] */ 2,
  /* [26] */ 7,
  /* [27] */ 22,
  /* [28] */ 0,
  /* [29] */ 0,
  /* [30] */ 7,
  /* [31] */ 21,
  /* [32] */ 0,
  /* [33] */ 0,
  /* [34] */ 21,
  /* [35] */ 0,
  /* [36] */ 7,
  /* [37] */ 43,
  /* [38] */ 5,
  /* [39] */ 10,
  /* [40] */ 1,
  /* [41] */ 42,
  /* [42] */ 5,
  /* [43] */ 10,
  /* [44] */ 7,
  /* [45] */ 21,
  /* [46] */ 0,
  /* [47] */ 2,
  /* [48] */ 41,
  /* [49] */ 5,
  /* [50] */ 10,
  /* [51] */ 8,
  /* [52] */ 42,
  /* [53] */ 0,
  /* [54] */ 1,
  /* [55] */ 40,
  /* [56] */ 5,
  /* [57] */ 10,
  /* [58] */ 5,
  /* [59] */ 43,
  /* [60] */ 4,
  /* [61] */ 10,
  /* [62] */ 0,
  /* [63] */ 42,
  /* [64] */ 4,
  /* [65] */ 10,
  /* [66] */ 6,
  /* [67] */ 41,
  /* [68] */ 4,
  /* [69] */ 10,
  /* [70] */ 2,
  /* [71] */ 40,
  /* [72] */ 4,
  /* [73] */ 10,
  /* [74] */ 43,
  /* [75] */ 3,
  /* [76] */ 10,
  /* [77] */ 21,
  /* [78] */ 1,
  /* [79] */ 7,
  /* [80] */ 42,
  /* [81] */ 3,
  /* [82] */ 10,
  /* [83] */ 41,
  /* [84] */ 3,
  /* [85] */ 10,
  /* [86] */ 43,
  /* [87] */ 0,
  /* [88] */ 1,
  /* [89] */ 41,
  /* [90] */ 0,
  /* [91] */ 1,
  /* [92] */ 40,
  /* [93] */ 0,
  /* [94] */ 1,
  /* [95] */ 21,
  /* [96] */ 0,
  /* [97] */ 5,
  /* [98] */ 21,
  /* [99] */ 0,
  /* [100] */ 6,
  /* [101] */ 40,
  /* [102] */ 3,
  /* [103] */ 10,
  /* [104] */ 17,
  /* [105] */ 0,
  /* [106] */ 9,
  /* [107] */ 0,
  /* [108] */ 9,
  /* [109] */ 2,
  /* [110] */ 9,
  /* [111] */ 1,
  /* [112] */ 11,
  /* [113] */ 7,
  /* [114] */ 9,
  /* [115] */ 6,
  /* [116] */ 9,
  /* [117] */ 5,
  /* [118] */ 9,
  /* [119] */ 8,
  /* [120] */ 9,
  /* [121] */ 7,
  /* [122] */ 46,
  /* [123] */ 0,
  /* [124] */ 28,
  /* [125] */ 0,
  /* [126] */ 11,
  /* [127] */ 1,
  /* [128] */ 29,
  /* [129] */ 0,
  /* [130] */ 30,
  /* [131] */ 0,
  /* [132] */ 11,
  /* [133] */ 8,
  /* [134] */ 31,
  /* [135] */ 0,
  /* [136] */ 11,
  /* [137] */ 5,
  /* [138] */ 32,
  /* [139] */ 0,
  /* [140] */ 33,
  /* [141] */ 0,
  /* [142] */ 11,
  /* [143] */ 6,
  /* [144] */ 34,
  /* [145] */ 0,
  /* [146] */ 11,
  /* [147] */ 2,
  /* [148] */ 12,
  /* [149] */ 0,
  /* [150] */ 12,
  /* [151] */ 7,
  /* [152] */ 31,
  /* [153] */ 7,
  /* [154] */ 12,
  /* [155] */ 8,
  /* [156] */ 13,
  /* [157] */ 0,
  /* [158] */ 48,
  /* [159] */ 0,
  /* [160] */ 13,
  /* [161] */ 7,
  /* [162] */ 13,
  /* [163] */ 8,
  /* [164] */ 14,
  /* [165] */ 0,
  /* [166] */ 14,
  /* [167] */ 7,
  /* [168] */ 14,
  /* [169] */ 8,
  /* [170] */ 15,
  /* [171] */ 0,
  /* [172] */ 15,
  /* [173] */ 7,
  /* [174] */ 15,
  /* [175] */ 8,
  /* [176] */ 16,
  /* [177] */ 0,
  /* [178] */ 16,
  /* [179] */ 7,
  /* [180] */ 16,
  /* [181] */ 8,
  /* [182] */ 17,
  /* [183] */ 7,
  /* [184] */ 17,
  /* [185] */ 8,
  /* [186] */ 18,
  /* [187] */ 0,
  /* [188] */ 18,
  /* [189] */ 7,
  /* [190] */ 18,
  /* [191] */ 8,
  /* [192] */ 19,
  /* [193] */ 0,
  /* [194] */ 49,
  /* [195] */ 0,
  /* [196] */ 28,
  /* [197] */ 7,
  /* [198] */ 29,
  /* [199] */ 7,
  /* [200] */ 30,
  /* [201] */ 7,
  /* [202] */ 19,
  /* [203] */ 7,
  /* [204] */ 19,
  /* [205] */ 8,
  /* [206] */ 32,
  /* [207] */ 7,
  /* [208] */ 33,
  /* [209] */ 7,
  /* [210] */ 20,
  /* [211] */ 0,
  /* [212] */ 20,
  /* [213] */ 7,
  /* [214] */ 20,
  /* [215] */ 8,
  /* [216] */ 26,
  /* [217] */ 38,
  /* [218] */ 27,
  /* [219] */ 37,
  /* [220] */ 36,
  /* [221] */ 35,
  /* [222] */ 44,
  /* [223] */ 39,
  /* [224] */ 45,
  /* [225] */ 47,
};

// Assert that the MatcherIndex is big enough to index all the matchers, plus
// kNoMatcher.
static_assert(static_cast<int>(sizeof(kMatcherIndices) / sizeof(kMatcherIndices[0])) <
              static_cast<int>(std::numeric_limits<MatcherIndex>::max() - 1),
              "MatcherIndex is not large enough to index kMatcherIndices");

constexpr ParameterInfo kParameters[] = {
  {
    /* [0] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [1] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [2] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [3] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [4] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [5] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [6] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [7] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [8] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [9] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [10] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [11] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [12] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [13] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [14] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [15] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [16] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [17] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [18] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [19] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [20] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [21] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [22] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [23] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [24] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [25] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [26] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [27] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [28] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [29] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [30] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [31] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [32] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [33] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [34] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [35] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [36] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [37] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [38] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [39] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [40] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [41] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [42] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [43] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [44] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [45] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [46] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [47] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [48] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [49] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [50] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [51] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [52] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [53] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [54] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [55] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [56] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [57] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [58] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [59] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [60] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [61] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [62] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [63] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [64] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [65] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [66] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [67] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [68] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [69] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [70] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [71] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [72] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [73] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [74] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [75] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [76] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [77] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [78] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [79] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [80] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [81] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [82] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [83] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [84] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [85] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [86] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [87] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [88] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [89] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [90] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [91] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [92] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [93] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [94] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [95] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [96] */
    /* usage */ ParameterUsage::kComponent,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [97] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [98] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [99] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [100] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [101] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [102] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [103] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [104] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [105] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [106] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [107] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [108] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [109] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [110] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [111] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [112] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [113] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [114] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [115] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [116] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [117] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [118] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [119] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [120] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[208],
  },
  {
    /* [121] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [122] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [123] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [124] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [125] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [126] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [127] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [128] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [129] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [130] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [131] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [132] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [133] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [134] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [135] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [136] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [137] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [138] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [139] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [140] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [141] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [142] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [143] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [144] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [145] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [146] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [147] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [148] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [149] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [150] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [151] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [152] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [153] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [154] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [155] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [156] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [157] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [158] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [159] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [160] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [161] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [162] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [163] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [164] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [165] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [166] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [167] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [168] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [169] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [170] */
    /* usage */ ParameterUsage::kComponent,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [171] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[140],
  },
  {
    /* [172] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [173] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [174] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [175] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [176] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [177] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [178] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [179] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [180] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [181] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [182] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [183] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [184] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [185] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [186] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [187] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [188] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [189] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [190] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [191] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [192] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [193] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [194] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [195] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [196] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [197] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [198] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [199] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [200] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [201] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [202] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [203] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [204] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [205] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [206] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [207] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [208] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [209] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [210] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [211] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [212] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [213] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [214] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [215] */
    /* usage */ ParameterUsage::kComponent,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [216] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [217] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [218] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [219] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [220] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [221] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [222] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [223] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [224] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [225] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [226] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [227] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [228] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [229] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [230] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [231] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [232] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [233] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [234] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [235] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [236] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [237] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [238] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [239] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [240] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [241] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [242] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [243] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [244] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [245] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[206],
  },
  {
    /* [246] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [247] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [248] */
    /* usage */ ParameterUsage::kDdx,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [249] */
    /* usage */ ParameterUsage::kDdy,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [250] */
    /* usage */ ParameterUsage::kComponent,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [251] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[128],
  },
  {
    /* [252] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [253] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [254] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [255] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [256] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [257] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [258] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [259] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [260] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [261] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [262] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [263] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [264] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [265] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [266] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [267] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [268] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [269] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [270] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [271] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [272] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [273] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [274] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [275] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [276] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [277] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [278] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [279] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [280] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[208],
  },
  {
    /* [281] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [282] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [283] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [284] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [285] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[208],
  },
  {
    /* [286] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [287] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [288] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [289] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [290] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [291] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [292] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [293] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [294] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [295] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[206],
  },
  {
    /* [296] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [297] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [298] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [299] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [300] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [301] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [302] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [303] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [304] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [305] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [306] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [307] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [308] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [309] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [310] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [311] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[63],
  },
  {
    /* [312] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [313] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [314] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[136],
  },
  {
    /* [315] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [316] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [317] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [318] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [319] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [320] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [321] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [322] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [323] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [324] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [325] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [326] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [327] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[208],
  },
  {
    /* [328] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [329] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [330] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [331] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [332] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [333] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [334] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [335] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[80],
  },
  {
    /* [336] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [337] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [338] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[112],
  },
  {
    /* [339] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [340] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [341] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [342] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [343] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [344] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [345] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [346] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [347] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[200],
  },
  {
    /* [348] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [349] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [350] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [351] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [352] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [353] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [354] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [355] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [356] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [357] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [358] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [359] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[41],
  },
  {
    /* [360] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [361] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [362] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[142],
  },
  {
    /* [363] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [364] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [365] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [366] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [367] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [368] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [369] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [370] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [371] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [372] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [373] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [374] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [375] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [376] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [377] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [378] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [379] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [380] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [381] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [382] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [383] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [384] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [385] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [386] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [387] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [388] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [389] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [390] */
    /* usage */ ParameterUsage::kOffset,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [391] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [392] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [393] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [394] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [395] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [396] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [397] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [398] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [399] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [400] */
    /* usage */ ParameterUsage::kY,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [401] */
    /* usage */ ParameterUsage::kZ,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [402] */
    /* usage */ ParameterUsage::kW,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [403] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [404] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [405] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [406] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [407] */
    /* usage */ ParameterUsage::kComponent,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [408] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[138],
  },
  {
    /* [409] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [410] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [411] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [412] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [413] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [414] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [415] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [416] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [417] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [418] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [419] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [420] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[218],
  },
  {
    /* [421] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [422] */
    /* usage */ ParameterUsage::kDepthRef,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [423] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [424] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [425] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [426] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [427] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [428] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [429] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [430] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [431] */
    /* usage */ ParameterUsage::kComponent,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [432] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[128],
  },
  {
    /* [433] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [434] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [435] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[206],
  },
  {
    /* [436] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [437] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [438] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [439] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [440] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [441] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [442] */
    /* usage */ ParameterUsage::kBias,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [443] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [444] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [445] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [446] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [447] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [448] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [449] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [450] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [451] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [452] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [453] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [454] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [455] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [456] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [457] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [458] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [459] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [460] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [461] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [462] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [463] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [464] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [465] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[48],
  },
  {
    /* [466] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [467] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[142],
  },
  {
    /* [468] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [469] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [470] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [471] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[222],
  },
  {
    /* [472] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [473] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [474] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [475] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [476] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [477] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [478] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [479] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [480] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [481] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [482] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [483] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [484] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [485] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [486] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[101],
  },
  {
    /* [487] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [488] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[112],
  },
  {
    /* [489] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[206],
  },
  {
    /* [490] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [491] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [492] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[83],
  },
  {
    /* [493] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [494] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[112],
  },
  {
    /* [495] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[152],
  },
  {
    /* [496] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [497] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [498] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[74],
  },
  {
    /* [499] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [500] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[112],
  },
  {
    /* [501] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[71],
  },
  {
    /* [502] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [503] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[136],
  },
  {
    /* [504] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[67],
  },
  {
    /* [505] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [506] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[136],
  },
  {
    /* [507] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[198],
  },
  {
    /* [508] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [509] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [510] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[196],
  },
  {
    /* [511] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [512] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [513] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[59],
  },
  {
    /* [514] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [515] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[136],
  },
  {
    /* [516] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[55],
  },
  {
    /* [517] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [518] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[142],
  },
  {
    /* [519] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[37],
  },
  {
    /* [520] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [521] */
    /* usage */ ParameterUsage::kValue,
    /* matcher indices */ &kMatcherIndices[142],
  },
  {
    /* [522] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[124],
  },
  {
    /* [523] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [524] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [525] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [526] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [527] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [528] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[128],
  },
  {
    /* [529] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [530] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [531] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[134],
  },
  {
    /* [532] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[57],
  },
  {
    /* [533] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [534] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [535] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [536] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [537] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [538] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [539] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [540] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [541] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [542] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [543] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [544] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [545] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [546] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [547] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [548] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [549] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[144],
  },
  {
    /* [550] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [551] */
    /* usage */ ParameterUsage::kSampleIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [552] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [553] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [554] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [555] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[223],
  },
  {
    /* [556] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [557] */
    /* usage */ ParameterUsage::kSampleIndex,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [558] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [559] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [560] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [561] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [562] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [563] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [564] */
    /* usage */ ParameterUsage::kXy,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [565] */
    /* usage */ ParameterUsage::kZ,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [566] */
    /* usage */ ParameterUsage::kW,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [567] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [568] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [569] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [570] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [571] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [572] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [573] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [574] */
    /* usage */ ParameterUsage::kYz,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [575] */
    /* usage */ ParameterUsage::kW,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [576] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [577] */
    /* usage */ ParameterUsage::kY,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [578] */
    /* usage */ ParameterUsage::kZw,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [579] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [580] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [581] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [582] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [583] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [584] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [585] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [586] */
    /* usage */ ParameterUsage::kSampler,
    /* matcher indices */ &kMatcherIndices[216],
  },
  {
    /* [587] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [588] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [589] */
    /* usage */ ParameterUsage::kY,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [590] */
    /* usage */ ParameterUsage::kZ,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [591] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [592] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [593] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [594] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [595] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [596] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [597] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [598] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [599] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [600] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [601] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [602] */
    /* usage */ ParameterUsage::kZyw,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [603] */
    /* usage */ ParameterUsage::kXyz,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [604] */
    /* usage */ ParameterUsage::kW,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [605] */
    /* usage */ ParameterUsage::kXy,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [606] */
    /* usage */ ParameterUsage::kZw,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [607] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [608] */
    /* usage */ ParameterUsage::kYz,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [609] */
    /* usage */ ParameterUsage::kXy,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [610] */
    /* usage */ ParameterUsage::kZ,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [611] */
    /* usage */ ParameterUsage::kX,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [612] */
    /* usage */ ParameterUsage::kY,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [613] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [614] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [615] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [616] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[98],
  },
  {
    /* [617] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[124],
  },
  {
    /* [618] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [619] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [620] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [621] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[128],
  },
  {
    /* [622] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [623] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [624] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[98],
  },
  {
    /* [625] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [626] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [627] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [628] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [629] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[134],
  },
  {
    /* [630] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [631] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [632] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [633] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[138],
  },
  {
    /* [634] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [635] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [636] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [637] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[140],
  },
  {
    /* [638] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [639] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [640] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [641] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [642] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [643] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [644] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [645] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [646] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [647] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [648] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [649] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [650] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [651] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [652] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [653] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [654] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [655] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [656] */
    /* usage */ ParameterUsage::kLevel,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [657] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [658] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [659] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [660] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [661] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [662] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [663] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [664] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [665] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [666] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [667] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [668] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [669] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [670] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [671] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [672] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [673] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [674] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [675] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [676] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [677] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [678] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [679] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [680] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [681] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [682] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [683] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [684] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [685] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [686] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [687] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [688] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [689] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [690] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [691] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [692] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [693] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [694] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [695] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [696] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [697] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [698] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [699] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [700] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [701] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [702] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [703] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [704] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [705] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [706] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [707] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [708] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [709] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [710] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [711] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[15],
  },
  {
    /* [712] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[19],
  },
  {
    /* [713] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[77],
  },
  {
    /* [714] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [715] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [716] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [717] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [718] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [719] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [720] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [721] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [722] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [723] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [724] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [725] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [726] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [727] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [728] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [729] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [730] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [731] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [732] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [733] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [734] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [735] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [736] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [737] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [738] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [739] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [740] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [741] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [742] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [743] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [744] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [745] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [746] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [747] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [748] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [749] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [750] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [751] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [752] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [753] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [754] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [755] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [756] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [757] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [758] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [759] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [760] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [761] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [762] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [763] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [764] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [765] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [766] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [767] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [768] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [769] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [770] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [771] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [772] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [773] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [774] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [775] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [776] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [777] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [778] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[95],
  },
  {
    /* [779] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [780] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [781] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [782] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [783] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[222],
  },
  {
    /* [784] */
    /* usage */ ParameterUsage::kCoords,
    /* matcher indices */ &kMatcherIndices[116],
  },
  {
    /* [785] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [786] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[43],
  },
  {
    /* [787] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [788] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [789] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [790] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [791] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [792] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [793] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [794] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [795] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [796] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [797] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [798] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [799] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [800] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [801] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [802] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [803] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [804] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [805] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [806] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [807] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [808] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [809] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [810] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [811] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [812] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [813] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [814] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [815] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [816] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [817] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [818] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [819] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [820] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [821] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [822] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [823] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [824] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [825] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [826] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [827] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[27],
  },
  {
    /* [828] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [829] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [830] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [831] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [832] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [833] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [834] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [835] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [836] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [837] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [838] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [839] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [840] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [841] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [842] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [843] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [844] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [845] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [846] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [847] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[0],
  },
  {
    /* [848] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [849] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [850] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [851] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [852] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [853] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [854] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [855] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [856] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [857] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [858] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [859] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [860] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [861] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [862] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [863] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [864] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [865] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [866] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[120],
  },
  {
    /* [867] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[112],
  },
  {
    /* [868] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[112],
  },
  {
    /* [869] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[223],
  },
  {
    /* [870] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[144],
  },
  {
    /* [871] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [872] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [873] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [874] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [875] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[140],
  },
  {
    /* [876] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[138],
  },
  {
    /* [877] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[134],
  },
  {
    /* [878] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [879] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[128],
  },
  {
    /* [880] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[124],
  },
  {
    /* [881] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[52],
  },
  {
    /* [882] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[217],
  },
  {
    /* [883] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [884] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[140],
  },
  {
    /* [885] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [886] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [887] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [888] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [889] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [890] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [891] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [892] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [893] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [894] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [895] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [896] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [897] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [898] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [899] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [900] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [901] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[222],
  },
  {
    /* [902] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[86],
  },
  {
    /* [903] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[52],
  },
  {
    /* [904] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[89],
  },
  {
    /* [905] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[92],
  },
  {
    /* [906] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[214],
  },
  {
    /* [907] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[223],
  },
  {
    /* [908] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[212],
  },
  {
    /* [909] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[219],
  },
  {
    /* [910] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[220],
  },
  {
    /* [911] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[221],
  },
  {
    /* [912] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[144],
  },
  {
    /* [913] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[140],
  },
  {
    /* [914] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[138],
  },
  {
    /* [915] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[134],
  },
  {
    /* [916] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[130],
  },
  {
    /* [917] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[128],
  },
  {
    /* [918] */
    /* usage */ ParameterUsage::kTexture,
    /* matcher indices */ &kMatcherIndices[124],
  },
  {
    /* [919] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [920] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[38],
  },
  {
    /* [921] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [922] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[210],
  },
  {
    /* [923] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [924] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [925] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[204],
  },
  {
    /* [926] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [927] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [928] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[202],
  },
  {
    /* [929] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[51],
  },
  {
    /* [930] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [931] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [932] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [933] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [934] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [935] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[106],
  },
  {
    /* [936] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [937] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [938] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[110],
  },
  {
    /* [939] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[110],
  },
  {
    /* [940] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[110],
  },
  {
    /* [941] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[110],
  },
  {
    /* [942] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[110],
  },
  {
    /* [943] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[192],
  },
  {
    /* [944] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[61],
  },
  {
    /* [945] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [946] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [947] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [948] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [949] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[39],
  },
  {
    /* [950] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[39],
  },
  {
    /* [951] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[39],
  },
  {
    /* [952] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[39],
  },
  {
    /* [953] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[39],
  },
  {
    /* [954] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[190],
  },
  {
    /* [955] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[4],
  },
  {
    /* [956] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [957] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [958] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [959] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [960] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[6],
  },
  {
    /* [961] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [962] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[66],
  },
  {
    /* [963] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [964] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [965] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[126],
  },
  {
    /* [966] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[126],
  },
  {
    /* [967] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[126],
  },
  {
    /* [968] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[126],
  },
  {
    /* [969] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[188],
  },
  {
    /* [970] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[148],
  },
  {
    /* [971] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [972] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[11],
  },
  {
    /* [973] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[150],
  },
  {
    /* [974] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[154],
  },
  {
    /* [975] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [976] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[156],
  },
  {
    /* [977] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[45],
  },
  {
    /* [978] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [979] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[160],
  },
  {
    /* [980] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[162],
  },
  {
    /* [981] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[17],
  },
  {
    /* [982] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[164],
  },
  {
    /* [983] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [984] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [985] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[166],
  },
  {
    /* [986] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[168],
  },
  {
    /* [987] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[186],
  },
  {
    /* [988] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[170],
  },
  {
    /* [989] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [990] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [991] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[172],
  },
  {
    /* [992] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[174],
  },
  {
    /* [993] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[184],
  },
  {
    /* [994] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[176],
  },
  {
    /* [995] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[14],
  },
  {
    /* [996] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[31],
  },
  {
    /* [997] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[178],
  },
  {
    /* [998] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[180],
  },
  {
    /* [999] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[182],
  },
  {
    /* [1000] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[104],
  },
  {
    /* [1001] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[34],
  },
  {
    /* [1002] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[1],
  },
  {
    /* [1003] */
    /* usage */ ParameterUsage::kNone,
    /* matcher indices */ &kMatcherIndices[126],
  },
};

constexpr TemplateTypeInfo kTemplateTypes[] = {
  {
    /* [0] */
    /* name */ "T",
    /* matcher index */ 2,
  },
  {
    /* [1] */
    /* name */ "U",
    /* matcher index */ 63,
  },
  {
    /* [2] */
    /* name */ "T",
    /* matcher index */ 7,
  },
  {
    /* [3] */
    /* name */ "U",
    /* matcher index */ 59,
  },
  {
    /* [4] */
    /* name */ "T",
    /* matcher index */ 8,
  },
  {
    /* [5] */
    /* name */ "U",
    /* matcher index */ 60,
  },
  {
    /* [6] */
    /* name */ "T",
    /* matcher index */ 6,
  },
  {
    /* [7] */
    /* name */ "U",
    /* matcher index */ 62,
  },
  {
    /* [8] */
    /* name */ "T",
    /* matcher index */ 5,
  },
  {
    /* [9] */
    /* name */ "U",
    /* matcher index */ 61,
  },
  {
    /* [10] */
    /* name */ "T",
    /* matcher index */ 53,
  },
  {
    /* [11] */
    /* name */ "T",
    /* matcher index */ 58,
  },
  {
    /* [12] */
    /* name */ "T",
    /* matcher index */ 50,
  },
  {
    /* [13] */
    /* name */ "T",
    /* matcher index */ 51,
  },
  {
    /* [14] */
    /* name */ "T",
    /* matcher index */ 56,
  },
  {
    /* [15] */
    /* name */ "T",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [16] */
    /* name */ "T",
    /* matcher index */ 55,
  },
  {
    /* [17] */
    /* name */ "T",
    /* matcher index */ 63,
  },
  {
    /* [18] */
    /* name */ "T",
    /* matcher index */ 60,
  },
  {
    /* [19] */
    /* name */ "T",
    /* matcher index */ 59,
  },
  {
    /* [20] */
    /* name */ "T",
    /* matcher index */ 62,
  },
  {
    /* [21] */
    /* name */ "T",
    /* matcher index */ 61,
  },
  {
    /* [22] */
    /* name */ "T",
    /* matcher index */ 52,
  },
  {
    /* [23] */
    /* name */ "T",
    /* matcher index */ 54,
  },
};

constexpr TemplateNumberInfo kTemplateNumbers[] = {
  {
    /* [0] */
    /* name */ "K",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [1] */
    /* name */ "C",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [2] */
    /* name */ "R",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [3] */
    /* name */ "F",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [4] */
    /* name */ "A",
    /* matcher index */ 6,
  },
  {
    /* [5] */
    /* name */ "M",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [6] */
    /* name */ "N",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [7] */
    /* name */ "M",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [8] */
    /* name */ "A",
    /* matcher index */ kNoMatcher,
  },
  {
    /* [9] */
    /* name */ "S",
    /* matcher index */ 8,
  },
};

constexpr OverloadInfo kOverloads[] = {
  {
    /* [0] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[918],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [1] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[617],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [2] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[917],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [3] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[621],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [4] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[916],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [5] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[625],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [6] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[915],
    /* return matcher indices */ &kMatcherIndices[57],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [7] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[629],
    /* return matcher indices */ &kMatcherIndices[57],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [8] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[914],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [9] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[633],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [10] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[913],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [11] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[637],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [12] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[912],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [13] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[911],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [14] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[643],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [15] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[910],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [16] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[647],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [17] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[909],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [18] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[651],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [19] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[835],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [20] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[655],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [21] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[907],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [22] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[3],
    /* parameters */ &kParameters[905],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [23] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[3],
    /* parameters */ &kParameters[904],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [24] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[3],
    /* parameters */ &kParameters[903],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [25] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[3],
    /* parameters */ &kParameters[902],
    /* return matcher indices */ &kMatcherIndices[57],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [26] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[901],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [27] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [28] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[955],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [29] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[956],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecSplat,
  },
  {
    /* [30] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[399],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorS,
  },
  {
    /* [31] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[564],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [32] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[573],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [33] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[576],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [34] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[605],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [35] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[603],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [36] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[601],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [37] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1003],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [38] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[965],
    /* return matcher indices */ &kMatcherIndices[132],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [39] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[8],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[966],
    /* return matcher indices */ &kMatcherIndices[136],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [40] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[6],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[967],
    /* return matcher indices */ &kMatcherIndices[142],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [41] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[0],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[968],
    /* return matcher indices */ &kMatcherIndices[146],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [42] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[510],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [43] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[507],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [44] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[351],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [45] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[347],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [46] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[230],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [47] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[495],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [48] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[331],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [49] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[489],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [50] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[327],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [51] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[474],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [52] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[323],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [53] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[319],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [54] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[165],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [55] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[462],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [56] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[339],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [57] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[315],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [58] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[265],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [59] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[260],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [60] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[132],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [61] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[299],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [62] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[205],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [63] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[295],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [64] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[285],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [65] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[303],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [66] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[275],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [67] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[270],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [68] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[90],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [69] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[307],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [70] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[255],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [71] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[471],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [72] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[431],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [73] */
    /* num parameters */ 5,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[250],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [74] */
    /* num parameters */ 5,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[215],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [75] */
    /* num parameters */ 6,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[96],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [76] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[407],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [77] */
    /* num parameters */ 5,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[170],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [78] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[558],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [79] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[387],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [80] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[379],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [81] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[160],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [82] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[585],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [83] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[375],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [84] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[486],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [85] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[492],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [86] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[335],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [87] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[498],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [88] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[501],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [89] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[504],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [90] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[311],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [91] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[513],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [92] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[516],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [93] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[465],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [94] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[359],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [95] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[519],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [96] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[61],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [97] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[944],
    /* return matcher indices */ &kMatcherIndices[61],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [98] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[945],
    /* return matcher indices */ &kMatcherIndices[61],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecSplat,
  },
  {
    /* [99] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[588],
    /* return matcher indices */ &kMatcherIndices[61],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorS,
  },
  {
    /* [100] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[609],
    /* return matcher indices */ &kMatcherIndices[61],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [101] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[607],
    /* return matcher indices */ &kMatcherIndices[61],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorM,
  },
  {
    /* [102] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[949],
    /* return matcher indices */ &kMatcherIndices[43],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [103] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[950],
    /* return matcher indices */ &kMatcherIndices[50],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [104] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[8],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[951],
    /* return matcher indices */ &kMatcherIndices[57],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [105] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[6],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[952],
    /* return matcher indices */ &kMatcherIndices[65],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [106] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[0],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[953],
    /* return matcher indices */ &kMatcherIndices[69],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [107] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[880],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [108] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[879],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [109] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[878],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [110] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[877],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [111] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[876],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [112] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[875],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [113] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[874],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [114] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[873],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [115] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[872],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [116] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[871],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [117] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[727],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [118] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[725],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [119] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[723],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [120] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[721],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [121] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[719],
    /* return matcher indices */ &kMatcherIndices[11],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [122] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[717],
    /* return matcher indices */ &kMatcherIndices[11],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [123] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[1],
    /* parameters */ &kParameters[715],
    /* return matcher indices */ &kMatcherIndices[77],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [124] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[1],
    /* parameters */ &kParameters[713],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [125] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 3,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[0],
    /* parameters */ &kParameters[711],
    /* return matcher indices */ &kMatcherIndices[23],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [126] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[522],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [127] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[528],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [128] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[363],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [129] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[531],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [130] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[549],
    /* return matcher indices */ &kMatcherIndices[4],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [131] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[552],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [132] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[383],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [133] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[555],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [134] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[783],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [135] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[106],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [136] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[935],
    /* return matcher indices */ &kMatcherIndices[106],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [137] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[936],
    /* return matcher indices */ &kMatcherIndices[106],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecSplat,
  },
  {
    /* [138] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[14],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[611],
    /* return matcher indices */ &kMatcherIndices[106],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::VecCtorS,
  },
  {
    /* [139] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[938],
    /* return matcher indices */ &kMatcherIndices[120],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [140] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[939],
    /* return matcher indices */ &kMatcherIndices[118],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [141] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[8],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[940],
    /* return matcher indices */ &kMatcherIndices[116],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [142] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[6],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[941],
    /* return matcher indices */ &kMatcherIndices[114],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [143] */
    /* num parameters */ 1,
    /* num template types */ 2,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[0],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[942],
    /* return matcher indices */ &kMatcherIndices[108],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [144] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[180],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [145] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[108],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [146] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[102],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [147] */
    /* num parameters */ 7,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[65],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [148] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[235],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [149] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[78],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [150] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[245],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [151] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[120],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [152] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[343],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [153] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[225],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [154] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[150],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [155] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[144],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [156] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[439],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [157] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[200],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [158] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[435],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [159] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[280],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [160] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[210],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [161] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[922],
    /* return matcher indices */ &kMatcherIndices[210],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [162] */
    /* num parameters */ 16,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[0],
    /* return matcher indices */ &kMatcherIndices[210],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [163] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[443],
    /* return matcher indices */ &kMatcherIndices[210],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [164] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[908],
    /* return matcher indices */ &kMatcherIndices[214],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [165] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[906],
    /* return matcher indices */ &kMatcherIndices[212],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [166] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[419],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [167] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[240],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [168] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[220],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [169] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[138],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [170] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[403],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [171] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[290],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [172] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[164],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [173] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[982],
    /* return matcher indices */ &kMatcherIndices[164],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [174] */
    /* num parameters */ 8,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[57],
    /* return matcher indices */ &kMatcherIndices[164],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [175] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[593],
    /* return matcher indices */ &kMatcherIndices[164],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [176] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[985],
    /* return matcher indices */ &kMatcherIndices[168],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [177] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[986],
    /* return matcher indices */ &kMatcherIndices[166],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [178] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[148],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [179] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[970],
    /* return matcher indices */ &kMatcherIndices[148],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [180] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[411],
    /* return matcher indices */ &kMatcherIndices[148],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [181] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[597],
    /* return matcher indices */ &kMatcherIndices[148],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [182] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[973],
    /* return matcher indices */ &kMatcherIndices[154],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [183] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[974],
    /* return matcher indices */ &kMatcherIndices[150],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [184] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[395],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [185] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[195],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [186] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[155],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [187] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[72],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [188] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[371],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [189] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[175],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [190] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[367],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [191] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[185],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [192] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[190],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [193] */
    /* num parameters */ 6,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[126],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [194] */
    /* num parameters */ 4,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[355],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [195] */
    /* num parameters */ 5,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[210],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [196] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[156],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [197] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[976],
    /* return matcher indices */ &kMatcherIndices[156],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [198] */
    /* num parameters */ 6,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[84],
    /* return matcher indices */ &kMatcherIndices[156],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [199] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[595],
    /* return matcher indices */ &kMatcherIndices[156],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [200] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[979],
    /* return matcher indices */ &kMatcherIndices[162],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [201] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[980],
    /* return matcher indices */ &kMatcherIndices[160],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [202] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[186],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [203] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[987],
    /* return matcher indices */ &kMatcherIndices[186],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [204] */
    /* num parameters */ 8,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[49],
    /* return matcher indices */ &kMatcherIndices[186],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [205] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[415],
    /* return matcher indices */ &kMatcherIndices[186],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [206] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[969],
    /* return matcher indices */ &kMatcherIndices[190],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [207] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[954],
    /* return matcher indices */ &kMatcherIndices[188],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [208] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[192],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [209] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[943],
    /* return matcher indices */ &kMatcherIndices[192],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [210] */
    /* num parameters */ 12,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[16],
    /* return matcher indices */ &kMatcherIndices[192],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [211] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[391],
    /* return matcher indices */ &kMatcherIndices[192],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [212] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[928],
    /* return matcher indices */ &kMatcherIndices[204],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [213] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[925],
    /* return matcher indices */ &kMatcherIndices[202],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [214] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[104],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [215] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1000],
    /* return matcher indices */ &kMatcherIndices[104],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [216] */
    /* num parameters */ 12,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[28],
    /* return matcher indices */ &kMatcherIndices[104],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [217] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[468],
    /* return matcher indices */ &kMatcherIndices[104],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [218] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[999],
    /* return matcher indices */ &kMatcherIndices[184],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [219] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[993],
    /* return matcher indices */ &kMatcherIndices[182],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [220] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[176],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [221] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[994],
    /* return matcher indices */ &kMatcherIndices[176],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [222] */
    /* num parameters */ 9,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[40],
    /* return matcher indices */ &kMatcherIndices[176],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [223] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[582],
    /* return matcher indices */ &kMatcherIndices[176],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [224] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[997],
    /* return matcher indices */ &kMatcherIndices[180],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [225] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[998],
    /* return matcher indices */ &kMatcherIndices[178],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [226] */
    /* num parameters */ 0,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[170],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [227] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[12],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[988],
    /* return matcher indices */ &kMatcherIndices[170],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [228] */
    /* num parameters */ 6,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[114],
    /* return matcher indices */ &kMatcherIndices[170],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorS,
  },
  {
    /* [229] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[11],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[579],
    /* return matcher indices */ &kMatcherIndices[170],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::MatCtorV,
  },
  {
    /* [230] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[4],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[991],
    /* return matcher indices */ &kMatcherIndices[174],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [231] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[2],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[992],
    /* return matcher indices */ &kMatcherIndices[172],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [232] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[737],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [233] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[735],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [234] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[733],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [235] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[731],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [236] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[729],
    /* return matcher indices */ &kMatcherIndices[11],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [237] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[885],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [238] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[884],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [239] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[883],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [240] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[882],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [241] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[3],
    /* parameters */ &kParameters[881],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [242] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[749],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [243] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[747],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [244] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[745],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [245] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[743],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [246] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[741],
    /* return matcher indices */ &kMatcherIndices[11],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [247] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[701],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [248] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[699],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [249] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[695],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [250] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[693],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [251] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[687],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [252] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[685],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [253] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[683],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [254] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[681],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [255] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[679],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [256] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[677],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [257] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[675],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [258] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[673],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [259] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[709],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [260] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[707],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [261] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[705],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [262] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[781],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [263] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [264] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[920],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [265] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[21],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[921],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [266] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [267] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[932],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [268] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[17],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[933],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [269] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[51],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [270] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[929],
    /* return matcher indices */ &kMatcherIndices[51],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [271] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[18],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[930],
    /* return matcher indices */ &kMatcherIndices[51],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [272] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [273] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[926],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [274] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[19],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[927],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [275] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[18],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[540],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [276] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[18],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[543],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [277] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[18],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[546],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [278] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Zero,
  },
  {
    /* [279] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[923],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Identity,
  },
  {
    /* [280] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[20],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[924],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::Conv,
  },
  {
    /* [281] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[477],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [282] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[480],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [283] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[483],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [284] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[23],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[860],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::OpComplement,
  },
  {
    /* [285] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[23],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[861],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &ConstEval::OpComplement,
  },
  {
    /* [286] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[798],
    /* return matcher indices */ &kMatcherIndices[225],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [287] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[810],
    /* return matcher indices */ &kMatcherIndices[158],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [288] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[822],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [289] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[823],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [290] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[800],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [291] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[799],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [292] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[826],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [293] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[830],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [294] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[423],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [295] */
    /* num parameters */ 4,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[427],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [296] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[846],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [297] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[848],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [298] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[779],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [299] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[777],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [300] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[849],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [301] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[850],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [302] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[851],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [303] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[852],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [304] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[853],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [305] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[854],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [306] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[763],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [307] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[761],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [308] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[759],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [309] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[757],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [310] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[450],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [311] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[447],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [312] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[855],
    /* return matcher indices */ &kMatcherIndices[224],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [313] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[856],
    /* return matcher indices */ &kMatcherIndices[122],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [314] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[802],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [315] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[801],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [316] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[824],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [317] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[825],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [318] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[806],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [319] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[805],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [320] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[459],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [321] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[456],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [322] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[808],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [323] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[807],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [324] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[886],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [325] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[809],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [326] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[739],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [327] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[703],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [328] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[887],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [329] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[888],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [330] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[811],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [331] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[1001],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [332] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[813],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [333] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[812],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [334] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[889],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [335] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[890],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [336] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[891],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [337] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[892],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [338] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[815],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [339] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[814],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [340] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[893],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [341] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[894],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [342] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[895],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [343] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[896],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [344] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[897],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [345] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[898],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [346] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[567],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [347] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[570],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [348] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[899],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [349] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[900],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [350] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[671],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [351] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[669],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [352] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[804],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [353] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[803],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [354] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[919],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [355] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[797],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [356] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[984],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [357] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[978],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [358] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[817],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [359] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[816],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [360] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[964],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [361] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[963],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [362] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[819],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [363] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[818],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [364] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[619],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [365] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[615],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [366] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[821],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [367] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[820],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline),
    /* const eval */ nullptr,
  },
  {
    /* [368] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[635],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [369] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[631],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [370] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[641],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [371] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[639],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [372] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[649],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [373] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[645],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [374] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[787],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [375] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[789],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [376] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[829],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [377] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[828],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [378] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1002],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [379] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[996],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [380] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[832],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [381] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[831],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [382] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[834],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [383] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[833],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [384] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[870],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [385] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[869],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [386] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[837],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [387] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[836],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [388] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[657],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [389] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[653],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [390] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[839],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [391] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[838],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [392] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[841],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [393] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[840],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [394] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[537],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [395] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[534],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [396] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[843],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [397] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[842],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [398] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[845],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [399] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[844],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [400] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[613],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [401] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[751],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [402] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[659],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [403] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[599],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [404] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[663],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [405] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[16],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[661],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [406] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[934],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [407] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[931],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [408] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[957],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [409] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[946],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [410] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[691],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [411] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[689],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [412] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[959],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [413] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[958],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [414] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[975],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [415] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[971],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [416] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[981],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [417] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[977],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [418] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[989],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [419] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[983],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [420] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[995],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [421] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[990],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [422] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[22],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[862],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [423] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[22],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[863],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [424] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[858],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [425] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[859],
    /* return matcher indices */ &kMatcherIndices[45],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [426] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[627],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [427] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[623],
    /* return matcher indices */ &kMatcherIndices[31],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [428] */
    /* num parameters */ 3,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[561],
    /* return matcher indices */ &kMatcherIndices[194],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [429] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[753],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [430] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[755],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [431] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[765],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [432] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[767],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [433] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[769],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [434] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[771],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [435] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[773],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [436] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[775],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [437] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[667],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [438] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[665],
    /* return matcher indices */ &kMatcherIndices[17],
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [439] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[591],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [440] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[10],
    /* template numbers */ &kTemplateNumbers[9],
    /* parameters */ &kParameters[847],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [441] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [442] */
    /* num parameters */ 0,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[1004],
    /* return matcher indices */ nullptr,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [443] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[937],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [444] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[947],
    /* return matcher indices */ &kMatcherIndices[112],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [445] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[948],
    /* return matcher indices */ &kMatcherIndices[120],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [446] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[961],
    /* return matcher indices */ &kMatcherIndices[120],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [447] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[962],
    /* return matcher indices */ &kMatcherIndices[120],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [448] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 2,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[5],
    /* parameters */ &kParameters[972],
    /* return matcher indices */ &kMatcherIndices[19],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [449] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[525],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [450] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[697],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [451] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[868],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [452] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[867],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [453] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[866],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [454] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[865],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [455] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[857],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [456] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[785],
    /* return matcher indices */ &kMatcherIndices[43],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [457] */
    /* num parameters */ 3,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[453],
    /* return matcher indices */ &kMatcherIndices[34],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [458] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[795],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [459] */
    /* num parameters */ 2,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[793],
    /* return matcher indices */ &kMatcherIndices[38],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [460] */
    /* num parameters */ 2,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[13],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[791],
    /* return matcher indices */ &kMatcherIndices[1],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [461] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[6],
    /* parameters */ &kParameters[827],
    /* return matcher indices */ &kMatcherIndices[14],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [462] */
    /* num parameters */ 1,
    /* num template types */ 1,
    /* num template numbers */ 1,
    /* template types */ &kTemplateTypes[15],
    /* template numbers */ &kTemplateNumbers[8],
    /* parameters */ &kParameters[960],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [463] */
    /* num parameters */ 1,
    /* num template types */ 0,
    /* num template numbers */ 0,
    /* template types */ &kTemplateTypes[24],
    /* template numbers */ &kTemplateNumbers[10],
    /* parameters */ &kParameters[864],
    /* return matcher indices */ &kMatcherIndices[66],
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
};

constexpr IntrinsicInfo kBuiltins[] = {
  {
    /* [0] */
    /* fn abs<T : fiu32>(T) -> T */
    /* fn abs<N : num, T : fiu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[378],
  },
  {
    /* [1] */
    /* fn acos(f32) -> f32 */
    /* fn acos<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[420],
  },
  {
    /* [2] */
    /* fn acosh(f32) -> f32 */
    /* fn acosh<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[418],
  },
  {
    /* [3] */
    /* fn all(bool) -> bool */
    /* fn all<N : num>(vec<N, bool>) -> bool */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[416],
  },
  {
    /* [4] */
    /* fn any(bool) -> bool */
    /* fn any<N : num>(vec<N, bool>) -> bool */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[414],
  },
  {
    /* [5] */
    /* fn arrayLength<T, A : access>(ptr<storage, array<T>, A>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[462],
  },
  {
    /* [6] */
    /* fn asin(f32) -> f32 */
    /* fn asin<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[412],
  },
  {
    /* [7] */
    /* fn asinh(f32) -> f32 */
    /* fn asinh<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[408],
  },
  {
    /* [8] */
    /* fn atan(f32) -> f32 */
    /* fn atan<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[406],
  },
  {
    /* [9] */
    /* fn atan2(f32, f32) -> f32 */
    /* fn atan2<N : num>(vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[400],
  },
  {
    /* [10] */
    /* fn atanh(f32) -> f32 */
    /* fn atanh<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[398],
  },
  {
    /* [11] */
    /* fn ceil(f32) -> f32 */
    /* fn ceil<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[396],
  },
  {
    /* [12] */
    /* fn clamp<T : fiu32>(T, T, T) -> T */
    /* fn clamp<N : num, T : fiu32>(vec<N, T>, vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[394],
  },
  {
    /* [13] */
    /* fn cos(f32) -> f32 */
    /* fn cos<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[392],
  },
  {
    /* [14] */
    /* fn cosh(f32) -> f32 */
    /* fn cosh<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[390],
  },
  {
    /* [15] */
    /* fn countLeadingZeros<T : iu32>(T) -> T */
    /* fn countLeadingZeros<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[386],
  },
  {
    /* [16] */
    /* fn countOneBits<T : iu32>(T) -> T */
    /* fn countOneBits<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[382],
  },
  {
    /* [17] */
    /* fn countTrailingZeros<T : iu32>(T) -> T */
    /* fn countTrailingZeros<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[380],
  },
  {
    /* [18] */
    /* fn cross(vec3<f32>, vec3<f32>) -> vec3<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[456],
  },
  {
    /* [19] */
    /* fn degrees(f32) -> f32 */
    /* fn degrees<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[376],
  },
  {
    /* [20] */
    /* fn determinant<N : num>(mat<N, N, f32>) -> f32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[461],
  },
  {
    /* [21] */
    /* fn distance(f32, f32) -> f32 */
    /* fn distance<N : num>(vec<N, f32>, vec<N, f32>) -> f32 */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[374],
  },
  {
    /* [22] */
    /* fn dot<N : num, T : fiu32>(vec<N, T>, vec<N, T>) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[460],
  },
  {
    /* [23] */
    /* fn dot4I8Packed(u32, u32) -> i32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[459],
  },
  {
    /* [24] */
    /* fn dot4U8Packed(u32, u32) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[458],
  },
  {
    /* [25] */
    /* fn dpdx(f32) -> f32 */
    /* fn dpdx<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[366],
  },
  {
    /* [26] */
    /* fn dpdxCoarse(f32) -> f32 */
    /* fn dpdxCoarse<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[362],
  },
  {
    /* [27] */
    /* fn dpdxFine(f32) -> f32 */
    /* fn dpdxFine<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[358],
  },
  {
    /* [28] */
    /* fn dpdy(f32) -> f32 */
    /* fn dpdy<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[338],
  },
  {
    /* [29] */
    /* fn dpdyCoarse(f32) -> f32 */
    /* fn dpdyCoarse<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[332],
  },
  {
    /* [30] */
    /* fn dpdyFine(f32) -> f32 */
    /* fn dpdyFine<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[330],
  },
  {
    /* [31] */
    /* fn exp(f32) -> f32 */
    /* fn exp<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[324],
  },
  {
    /* [32] */
    /* fn exp2(f32) -> f32 */
    /* fn exp2<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[322],
  },
  {
    /* [33] */
    /* fn extractBits<T : iu32>(T, u32, u32) -> T */
    /* fn extractBits<N : num, T : iu32>(vec<N, T>, u32, u32) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[320],
  },
  {
    /* [34] */
    /* fn faceForward<N : num>(vec<N, f32>, vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[457],
  },
  {
    /* [35] */
    /* fn firstLeadingBit<T : iu32>(T) -> T */
    /* fn firstLeadingBit<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[318],
  },
  {
    /* [36] */
    /* fn firstTrailingBit<T : iu32>(T) -> T */
    /* fn firstTrailingBit<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[352],
  },
  {
    /* [37] */
    /* fn floor(f32) -> f32 */
    /* fn floor<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[314],
  },
  {
    /* [38] */
    /* fn fma(f32, f32, f32) -> f32 */
    /* fn fma<N : num>(vec<N, f32>, vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[310],
  },
  {
    /* [39] */
    /* fn fract(f32) -> f32 */
    /* fn fract<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[290],
  },
  {
    /* [40] */
    /* fn frexp(f32) -> __frexp_result */
    /* fn frexp<N : num>(vec<N, f32>) -> __frexp_result_vec<N> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[286],
  },
  {
    /* [41] */
    /* fn fwidth(f32) -> f32 */
    /* fn fwidth<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[288],
  },
  {
    /* [42] */
    /* fn fwidthCoarse(f32) -> f32 */
    /* fn fwidthCoarse<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[316],
  },
  {
    /* [43] */
    /* fn fwidthFine(f32) -> f32 */
    /* fn fwidthFine<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[292],
  },
  {
    /* [44] */
    /* fn insertBits<T : iu32>(T, T, u32, u32) -> T */
    /* fn insertBits<N : num, T : iu32>(vec<N, T>, vec<N, T>, u32, u32) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[294],
  },
  {
    /* [45] */
    /* fn inverseSqrt(f32) -> f32 */
    /* fn inverseSqrt<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[296],
  },
  {
    /* [46] */
    /* fn ldexp(f32, i32) -> f32 */
    /* fn ldexp<N : num>(vec<N, f32>, vec<N, i32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[298],
  },
  {
    /* [47] */
    /* fn length(f32) -> f32 */
    /* fn length<N : num>(vec<N, f32>) -> f32 */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[300],
  },
  {
    /* [48] */
    /* fn log(f32) -> f32 */
    /* fn log<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[302],
  },
  {
    /* [49] */
    /* fn log2(f32) -> f32 */
    /* fn log2<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[304],
  },
  {
    /* [50] */
    /* fn max<T : fiu32>(T, T) -> T */
    /* fn max<N : num, T : fiu32>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[306],
  },
  {
    /* [51] */
    /* fn min<T : fiu32>(T, T) -> T */
    /* fn min<N : num, T : fiu32>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[308],
  },
  {
    /* [52] */
    /* fn mix(f32, f32, f32) -> f32 */
    /* fn mix<N : num>(vec<N, f32>, vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* fn mix<N : num>(vec<N, f32>, vec<N, f32>, f32) -> vec<N, f32> */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[281],
  },
  {
    /* [53] */
    /* fn modf(f32) -> __modf_result */
    /* fn modf<N : num>(vec<N, f32>) -> __modf_result_vec<N> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[312],
  },
  {
    /* [54] */
    /* fn normalize<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[455],
  },
  {
    /* [55] */
    /* fn pack2x16float(vec2<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[463],
  },
  {
    /* [56] */
    /* fn pack2x16snorm(vec2<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[454],
  },
  {
    /* [57] */
    /* fn pack2x16unorm(vec2<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[453],
  },
  {
    /* [58] */
    /* fn pack4x8snorm(vec4<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[452],
  },
  {
    /* [59] */
    /* fn pack4x8unorm(vec4<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[451],
  },
  {
    /* [60] */
    /* fn pow(f32, f32) -> f32 */
    /* fn pow<N : num>(vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[326],
  },
  {
    /* [61] */
    /* fn radians(f32) -> f32 */
    /* fn radians<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[328],
  },
  {
    /* [62] */
    /* fn reflect<N : num>(vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[450],
  },
  {
    /* [63] */
    /* fn refract<N : num>(vec<N, f32>, vec<N, f32>, f32) -> vec<N, f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[449],
  },
  {
    /* [64] */
    /* fn reverseBits<T : iu32>(T) -> T */
    /* fn reverseBits<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[334],
  },
  {
    /* [65] */
    /* fn round(f32) -> f32 */
    /* fn round<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[336],
  },
  {
    /* [66] */
    /* fn select<T : scalar_no_f16>(T, T, bool) -> T */
    /* fn select<T : scalar_no_f16, N : num>(vec<N, T>, vec<N, T>, bool) -> vec<N, T> */
    /* fn select<N : num, T : scalar_no_f16>(vec<N, T>, vec<N, T>, vec<N, bool>) -> vec<N, T> */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[275],
  },
  {
    /* [67] */
    /* fn sign(f32) -> f32 */
    /* fn sign<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[340],
  },
  {
    /* [68] */
    /* fn sin(f32) -> f32 */
    /* fn sin<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[342],
  },
  {
    /* [69] */
    /* fn sinh(f32) -> f32 */
    /* fn sinh<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[344],
  },
  {
    /* [70] */
    /* fn smoothstep(f32, f32, f32) -> f32 */
    /* fn smoothstep<N : num>(vec<N, f32>, vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[346],
  },
  {
    /* [71] */
    /* fn sqrt(f32) -> f32 */
    /* fn sqrt<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[348],
  },
  {
    /* [72] */
    /* fn step(f32, f32) -> f32 */
    /* fn step<N : num>(vec<N, f32>, vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[350],
  },
  {
    /* [73] */
    /* fn storageBarrier() */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[441],
  },
  {
    /* [74] */
    /* fn tan(f32) -> f32 */
    /* fn tan<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[354],
  },
  {
    /* [75] */
    /* fn tanh(f32) -> f32 */
    /* fn tanh<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[356],
  },
  {
    /* [76] */
    /* fn transpose<M : num, N : num>(mat<M, N, f32>) -> mat<N, M, f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[448],
  },
  {
    /* [77] */
    /* fn trunc(f32) -> f32 */
    /* fn trunc<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[360],
  },
  {
    /* [78] */
    /* fn unpack2x16float(u32) -> vec2<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[447],
  },
  {
    /* [79] */
    /* fn unpack2x16snorm(u32) -> vec2<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[446],
  },
  {
    /* [80] */
    /* fn unpack2x16unorm(u32) -> vec2<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[445],
  },
  {
    /* [81] */
    /* fn unpack4x8snorm(u32) -> vec4<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[444],
  },
  {
    /* [82] */
    /* fn unpack4x8unorm(u32) -> vec4<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[443],
  },
  {
    /* [83] */
    /* fn workgroupBarrier() */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[442],
  },
  {
    /* [84] */
    /* fn textureDimensions<T : fiu32>(texture: texture_1d<T>) -> i32 */
    /* fn textureDimensions<T : fiu32>(texture: texture_1d<T>, level: i32) -> i32 */
    /* fn textureDimensions<T : fiu32>(texture: texture_2d<T>) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_2d<T>, level: i32) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_2d_array<T>) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_2d_array<T>, level: i32) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_3d<T>) -> vec3<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_3d<T>, level: i32) -> vec3<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_cube<T>) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_cube<T>, level: i32) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_cube_array<T>) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_cube_array<T>, level: i32) -> vec2<i32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_multisampled_2d<T>) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_2d) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_2d, level: i32) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_2d_array) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_2d_array, level: i32) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_cube) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_cube, level: i32) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_cube_array) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_cube_array, level: i32) -> vec2<i32> */
    /* fn textureDimensions(texture: texture_depth_multisampled_2d) -> vec2<i32> */
    /* fn textureDimensions<F : texel_format, A : write_only>(texture: texture_storage_1d<F, A>) -> i32 */
    /* fn textureDimensions<F : texel_format, A : write_only>(texture: texture_storage_2d<F, A>) -> vec2<i32> */
    /* fn textureDimensions<F : texel_format, A : write_only>(texture: texture_storage_2d_array<F, A>) -> vec2<i32> */
    /* fn textureDimensions<F : texel_format, A : write_only>(texture: texture_storage_3d<F, A>) -> vec3<i32> */
    /* fn textureDimensions(texture: texture_external) -> vec2<i32> */
    /* num overloads */ 27,
    /* overloads */ &kOverloads[0],
  },
  {
    /* [85] */
    /* fn textureGather<T : fiu32>(@const component: i32, texture: texture_2d<T>, sampler: sampler, coords: vec2<f32>) -> vec4<T> */
    /* fn textureGather<T : fiu32>(@const component: i32, texture: texture_2d<T>, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> vec4<T> */
    /* fn textureGather<T : fiu32>(@const component: i32, texture: texture_2d_array<T>, sampler: sampler, coords: vec2<f32>, array_index: i32) -> vec4<T> */
    /* fn textureGather<T : fiu32>(@const component: i32, texture: texture_2d_array<T>, sampler: sampler, coords: vec2<f32>, array_index: i32, @const offset: vec2<i32>) -> vec4<T> */
    /* fn textureGather<T : fiu32>(@const component: i32, texture: texture_cube<T>, sampler: sampler, coords: vec3<f32>) -> vec4<T> */
    /* fn textureGather<T : fiu32>(@const component: i32, texture: texture_cube_array<T>, sampler: sampler, coords: vec3<f32>, array_index: i32) -> vec4<T> */
    /* fn textureGather(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: i32) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: i32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_cube, sampler: sampler, coords: vec3<f32>) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_cube_array, sampler: sampler, coords: vec3<f32>, array_index: i32) -> vec4<f32> */
    /* num overloads */ 12,
    /* overloads */ &kOverloads[72],
  },
  {
    /* [86] */
    /* fn textureGatherCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_cube, sampler: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_cube_array, sampler: sampler_comparison, coords: vec3<f32>, array_index: i32, depth_ref: f32) -> vec4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[190],
  },
  {
    /* [87] */
    /* fn textureNumLayers<T : fiu32>(texture: texture_2d_array<T>) -> i32 */
    /* fn textureNumLayers<T : fiu32>(texture: texture_cube_array<T>) -> i32 */
    /* fn textureNumLayers(texture: texture_depth_2d_array) -> i32 */
    /* fn textureNumLayers(texture: texture_depth_cube_array) -> i32 */
    /* fn textureNumLayers<F : texel_format, A : write_only>(texture: texture_storage_2d_array<F, A>) -> i32 */
    /* num overloads */ 5,
    /* overloads */ &kOverloads[237],
  },
  {
    /* [88] */
    /* fn textureNumLevels<T : fiu32>(texture: texture_1d<T>) -> i32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_2d<T>) -> i32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_2d_array<T>) -> i32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_3d<T>) -> i32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_cube<T>) -> i32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_cube_array<T>) -> i32 */
    /* fn textureNumLevels(texture: texture_depth_2d) -> i32 */
    /* fn textureNumLevels(texture: texture_depth_2d_array) -> i32 */
    /* fn textureNumLevels(texture: texture_depth_cube) -> i32 */
    /* fn textureNumLevels(texture: texture_depth_cube_array) -> i32 */
    /* num overloads */ 10,
    /* overloads */ &kOverloads[107],
  },
  {
    /* [89] */
    /* fn textureNumSamples<T : fiu32>(texture: texture_multisampled_2d<T>) -> i32 */
    /* fn textureNumSamples(texture: texture_depth_multisampled_2d) -> i32 */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[384],
  },
  {
    /* [90] */
    /* fn textureSample(texture: texture_1d<f32>, sampler: sampler, coords: f32) -> vec4<f32> */
    /* fn textureSample(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32) -> vec4<f32> */
    /* fn textureSample(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: i32) -> vec4<f32> */
    /* fn textureSample(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>) -> f32 */
    /* fn textureSample(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> f32 */
    /* fn textureSample(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: i32) -> f32 */
    /* fn textureSample(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: i32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSample(texture: texture_depth_cube, sampler: sampler, coords: vec3<f32>) -> f32 */
    /* fn textureSample(texture: texture_depth_cube_array, sampler: sampler, coords: vec3<f32>, array_index: i32) -> f32 */
    /* num overloads */ 15,
    /* overloads */ &kOverloads[42],
  },
  {
    /* [91] */
    /* fn textureSampleBias(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, bias: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, bias: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, bias: f32, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: i32, bias: f32) -> vec4<f32> */
    /* num overloads */ 8,
    /* overloads */ &kOverloads[152],
  },
  {
    /* [92] */
    /* fn textureSampleCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_cube, sampler: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_cube_array, sampler: sampler_comparison, coords: vec3<f32>, array_index: i32, depth_ref: f32) -> f32 */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[166],
  },
  {
    /* [93] */
    /* fn textureSampleCompareLevel(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_cube, sampler: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_cube_array, sampler: sampler_comparison, coords: vec3<f32>, array_index: i32, depth_ref: f32) -> f32 */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[184],
  },
  {
    /* [94] */
    /* fn textureSampleGrad(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, ddx: vec2<f32>, ddy: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: i32, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32> */
    /* num overloads */ 8,
    /* overloads */ &kOverloads[144],
  },
  {
    /* [95] */
    /* fn textureSampleLevel(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, level: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: i32, level: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, level: f32, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: i32, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, level: i32) -> f32 */
    /* fn textureSampleLevel(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, level: i32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleLevel(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: i32, level: i32) -> f32 */
    /* fn textureSampleLevel(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: i32, level: i32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleLevel(texture: texture_depth_cube, sampler: sampler, coords: vec3<f32>, level: i32) -> f32 */
    /* fn textureSampleLevel(texture: texture_depth_cube_array, sampler: sampler, coords: vec3<f32>, array_index: i32, level: i32) -> f32 */
    /* fn textureSampleLevel(texture: texture_external, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* num overloads */ 15,
    /* overloads */ &kOverloads[57],
  },
  {
    /* [96] */
    /* fn textureStore(texture: texture_storage_1d<f32_texel_format, write>, coords: i32, value: vec4<f32>) */
    /* fn textureStore(texture: texture_storage_2d<f32_texel_format, write>, coords: vec2<i32>, value: vec4<f32>) */
    /* fn textureStore(texture: texture_storage_2d_array<f32_texel_format, write>, coords: vec2<i32>, array_index: i32, value: vec4<f32>) */
    /* fn textureStore(texture: texture_storage_3d<f32_texel_format, write>, coords: vec3<i32>, value: vec4<f32>) */
    /* fn textureStore(texture: texture_storage_1d<i32_texel_format, write>, coords: i32, value: vec4<i32>) */
    /* fn textureStore(texture: texture_storage_2d<i32_texel_format, write>, coords: vec2<i32>, value: vec4<i32>) */
    /* fn textureStore(texture: texture_storage_2d_array<i32_texel_format, write>, coords: vec2<i32>, array_index: i32, value: vec4<i32>) */
    /* fn textureStore(texture: texture_storage_3d<i32_texel_format, write>, coords: vec3<i32>, value: vec4<i32>) */
    /* fn textureStore(texture: texture_storage_1d<u32_texel_format, write>, coords: i32, value: vec4<u32>) */
    /* fn textureStore(texture: texture_storage_2d<u32_texel_format, write>, coords: vec2<i32>, value: vec4<u32>) */
    /* fn textureStore(texture: texture_storage_2d_array<u32_texel_format, write>, coords: vec2<i32>, array_index: i32, value: vec4<u32>) */
    /* fn textureStore(texture: texture_storage_3d<u32_texel_format, write>, coords: vec3<i32>, value: vec4<u32>) */
    /* num overloads */ 12,
    /* overloads */ &kOverloads[84],
  },
  {
    /* [97] */
    /* fn textureLoad<T : fiu32>(texture: texture_1d<T>, coords: i32, level: i32) -> vec4<T> */
    /* fn textureLoad<T : fiu32>(texture: texture_2d<T>, coords: vec2<i32>, level: i32) -> vec4<T> */
    /* fn textureLoad<T : fiu32>(texture: texture_2d_array<T>, coords: vec2<i32>, array_index: i32, level: i32) -> vec4<T> */
    /* fn textureLoad<T : fiu32>(texture: texture_3d<T>, coords: vec3<i32>, level: i32) -> vec4<T> */
    /* fn textureLoad<T : fiu32>(texture: texture_multisampled_2d<T>, coords: vec2<i32>, sample_index: i32) -> vec4<T> */
    /* fn textureLoad(texture: texture_depth_2d, coords: vec2<i32>, level: i32) -> f32 */
    /* fn textureLoad(texture: texture_depth_2d_array, coords: vec2<i32>, array_index: i32, level: i32) -> f32 */
    /* fn textureLoad(texture: texture_depth_multisampled_2d, coords: vec2<i32>, sample_index: i32) -> f32 */
    /* fn textureLoad(texture: texture_external, coords: vec2<i32>) -> vec4<f32> */
    /* num overloads */ 9,
    /* overloads */ &kOverloads[126],
  },
  {
    /* [98] */
    /* fn atomicLoad<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[440],
  },
  {
    /* [99] */
    /* fn atomicStore<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[439],
  },
  {
    /* [100] */
    /* fn atomicAdd<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[436],
  },
  {
    /* [101] */
    /* fn atomicSub<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[435],
  },
  {
    /* [102] */
    /* fn atomicMax<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[434],
  },
  {
    /* [103] */
    /* fn atomicMin<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[433],
  },
  {
    /* [104] */
    /* fn atomicAnd<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[432],
  },
  {
    /* [105] */
    /* fn atomicOr<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[431],
  },
  {
    /* [106] */
    /* fn atomicXor<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[430],
  },
  {
    /* [107] */
    /* fn atomicExchange<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[429],
  },
  {
    /* [108] */
    /* fn atomicCompareExchangeWeak<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T, T) -> __atomic_compare_exchange_result<T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[428],
  },
};

constexpr IntrinsicInfo kUnaryOperators[] = {
  {
    /* [0] */
    /* op !(bool) -> bool */
    /* op !<N : num>(vec<N, bool>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[424],
  },
  {
    /* [1] */
    /* op ~<T : aiu32>(T) -> T */
    /* op ~<T : aiu32, N : num>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[284],
  },
  {
    /* [2] */
    /* op -<T : fi32>(T) -> T */
    /* op -<T : fi32, N : num>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[422],
  },
};
constexpr uint8_t kUnaryOperatorNot = 0;
constexpr uint8_t kUnaryOperatorComplement = 1;
constexpr uint8_t kUnaryOperatorMinus = 2;

constexpr IntrinsicInfo kBinaryOperators[] = {
  {
    /* [0] */
    /* op +<T : fiu32>(T, T) -> T */
    /* op +<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op +<T : fiu32, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op +<T : fiu32, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* op +<N : num, M : num>(mat<N, M, f32>, mat<N, M, f32>) -> mat<N, M, f32> */
    /* num overloads */ 5,
    /* overloads */ &kOverloads[242],
  },
  {
    /* [1] */
    /* op -<T : fiu32>(T, T) -> T */
    /* op -<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op -<T : fiu32, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op -<T : fiu32, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* op -<N : num, M : num>(mat<N, M, f32>, mat<N, M, f32>) -> mat<N, M, f32> */
    /* num overloads */ 5,
    /* overloads */ &kOverloads[232],
  },
  {
    /* [2] */
    /* op *<T : fiu32>(T, T) -> T */
    /* op *<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op *<T : fiu32, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op *<T : fiu32, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* op *<N : num, M : num>(f32, mat<N, M, f32>) -> mat<N, M, f32> */
    /* op *<N : num, M : num>(mat<N, M, f32>, f32) -> mat<N, M, f32> */
    /* op *<C : num, R : num>(mat<C, R, f32>, vec<C, f32>) -> vec<R, f32> */
    /* op *<C : num, R : num>(vec<R, f32>, mat<C, R, f32>) -> vec<C, f32> */
    /* op *<K : num, C : num, R : num>(mat<K, R, f32>, mat<C, K, f32>) -> mat<C, R, f32> */
    /* num overloads */ 9,
    /* overloads */ &kOverloads[117],
  },
  {
    /* [3] */
    /* op /<T : fiu32>(T, T) -> T */
    /* op /<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op /<T : fiu32, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op /<T : fiu32, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[259],
  },
  {
    /* [4] */
    /* op %<T : fiu32>(T, T) -> T */
    /* op %<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op %<T : fiu32, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op %<T : fiu32, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[247],
  },
  {
    /* [5] */
    /* op ^<T : iu32>(T, T) -> T */
    /* op ^<T : iu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[410],
  },
  {
    /* [6] */
    /* op &(bool, bool) -> bool */
    /* op &<N : num>(vec<N, bool>, vec<N, bool>) -> vec<N, bool> */
    /* op &<T : iu32>(T, T) -> T */
    /* op &<T : iu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[251],
  },
  {
    /* [7] */
    /* op |(bool, bool) -> bool */
    /* op |<N : num>(vec<N, bool>, vec<N, bool>) -> vec<N, bool> */
    /* op |<T : iu32>(T, T) -> T */
    /* op |<T : iu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[255],
  },
  {
    /* [8] */
    /* op &&(bool, bool) -> bool */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[437],
  },
  {
    /* [9] */
    /* op ||(bool, bool) -> bool */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[438],
  },
  {
    /* [10] */
    /* op ==<T : scalar>(T, T) -> bool */
    /* op ==<T : scalar, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[404],
  },
  {
    /* [11] */
    /* op !=<T : scalar>(T, T) -> bool */
    /* op !=<T : scalar, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[402],
  },
  {
    /* [12] */
    /* op <<T : fiu32>(T, T) -> bool */
    /* op <<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[388],
  },
  {
    /* [13] */
    /* op ><T : fiu32>(T, T) -> bool */
    /* op ><T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[372],
  },
  {
    /* [14] */
    /* op <=<T : fiu32>(T, T) -> bool */
    /* op <=<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[370],
  },
  {
    /* [15] */
    /* op >=<T : fiu32>(T, T) -> bool */
    /* op >=<T : fiu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[368],
  },
  {
    /* [16] */
    /* op <<<T : iu32>(T, u32) -> T */
    /* op <<<T : iu32, N : num>(vec<N, T>, vec<N, u32>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[426],
  },
  {
    /* [17] */
    /* op >><T : iu32>(T, u32) -> T */
    /* op >><T : iu32, N : num>(vec<N, T>, vec<N, u32>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[364],
  },
};
constexpr uint8_t kBinaryOperatorPlus = 0;
constexpr uint8_t kBinaryOperatorMinus = 1;
constexpr uint8_t kBinaryOperatorStar = 2;
constexpr uint8_t kBinaryOperatorDivide = 3;
constexpr uint8_t kBinaryOperatorModulo = 4;
constexpr uint8_t kBinaryOperatorXor = 5;
constexpr uint8_t kBinaryOperatorAnd = 6;
constexpr uint8_t kBinaryOperatorOr = 7;
constexpr uint8_t kBinaryOperatorLogicalAnd = 8;
constexpr uint8_t kBinaryOperatorLogicalOr = 9;
constexpr uint8_t kBinaryOperatorEqual = 10;
constexpr uint8_t kBinaryOperatorNotEqual = 11;
constexpr uint8_t kBinaryOperatorLessThan = 12;
constexpr uint8_t kBinaryOperatorGreaterThan = 13;
constexpr uint8_t kBinaryOperatorLessThanEqual = 14;
constexpr uint8_t kBinaryOperatorGreaterThanEqual = 15;
constexpr uint8_t kBinaryOperatorShiftLeft = 16;
constexpr uint8_t kBinaryOperatorShiftRight = 17;

constexpr IntrinsicInfo kConstructorsAndConverters[] = {
  {
    /* [0] */
    /* ctor i32() -> i32 */
    /* ctor i32(i32) -> i32 */
    /* conv i32<T : scalar_no_i32>(T) -> i32 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[263],
  },
  {
    /* [1] */
    /* ctor u32() -> u32 */
    /* ctor u32(u32) -> u32 */
    /* conv u32<T : scalar_no_u32>(T) -> u32 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[278],
  },
  {
    /* [2] */
    /* ctor f32() -> f32 */
    /* ctor f32(f32) -> f32 */
    /* conv f32<T : scalar_no_f32>(T) -> f32 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[272],
  },
  {
    /* [3] */
    /* ctor f16() -> f16 */
    /* ctor f16(f16) -> f16 */
    /* conv f16<T : scalar_no_f16>(T) -> f16 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[269],
  },
  {
    /* [4] */
    /* ctor bool() -> bool */
    /* ctor bool(bool) -> bool */
    /* conv bool<T : scalar_no_bool>(T) -> bool */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[266],
  },
  {
    /* [5] */
    /* ctor vec2<T : scalar>() -> vec2<T> */
    /* ctor vec2<T : scalar>(vec2<T>) -> vec2<T> */
    /* ctor vec2<T : abstract_or_scalar>(T) -> vec2<T> */
    /* ctor vec2<T : abstract_or_scalar>(x: T, y: T) -> vec2<T> */
    /* conv vec2<T : f32, U : scalar_no_f32>(vec2<U>) -> vec2<f32> */
    /* conv vec2<T : f16, U : scalar_no_f16>(vec2<U>) -> vec2<f16> */
    /* conv vec2<T : i32, U : scalar_no_i32>(vec2<U>) -> vec2<i32> */
    /* conv vec2<T : u32, U : scalar_no_u32>(vec2<U>) -> vec2<u32> */
    /* conv vec2<T : bool, U : scalar_no_bool>(vec2<U>) -> vec2<bool> */
    /* num overloads */ 9,
    /* overloads */ &kOverloads[135],
  },
  {
    /* [6] */
    /* ctor vec3<T : scalar>() -> vec3<T> */
    /* ctor vec3<T : scalar>(vec3<T>) -> vec3<T> */
    /* ctor vec3<T : abstract_or_scalar>(T) -> vec3<T> */
    /* ctor vec3<T : abstract_or_scalar>(x: T, y: T, z: T) -> vec3<T> */
    /* ctor vec3<T : abstract_or_scalar>(xy: vec2<T>, z: T) -> vec3<T> */
    /* ctor vec3<T : abstract_or_scalar>(x: T, yz: vec2<T>) -> vec3<T> */
    /* conv vec3<T : f32, U : scalar_no_f32>(vec3<U>) -> vec3<f32> */
    /* conv vec3<T : f16, U : scalar_no_f16>(vec3<U>) -> vec3<f16> */
    /* conv vec3<T : i32, U : scalar_no_i32>(vec3<U>) -> vec3<i32> */
    /* conv vec3<T : u32, U : scalar_no_u32>(vec3<U>) -> vec3<u32> */
    /* conv vec3<T : bool, U : scalar_no_bool>(vec3<U>) -> vec3<bool> */
    /* num overloads */ 11,
    /* overloads */ &kOverloads[96],
  },
  {
    /* [7] */
    /* ctor vec4<T : scalar>() -> vec4<T> */
    /* ctor vec4<T : scalar>(vec4<T>) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(T) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(x: T, y: T, z: T, w: T) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(xy: vec2<T>, z: T, w: T) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(x: T, yz: vec2<T>, w: T) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(x: T, y: T, zw: vec2<T>) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(xy: vec2<T>, zw: vec2<T>) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(xyz: vec3<T>, w: T) -> vec4<T> */
    /* ctor vec4<T : abstract_or_scalar>(x: T, zyw: vec3<T>) -> vec4<T> */
    /* conv vec4<T : f32, U : scalar_no_f32>(vec4<U>) -> vec4<f32> */
    /* conv vec4<T : f16, U : scalar_no_f16>(vec4<U>) -> vec4<f16> */
    /* conv vec4<T : i32, U : scalar_no_i32>(vec4<U>) -> vec4<i32> */
    /* conv vec4<T : u32, U : scalar_no_u32>(vec4<U>) -> vec4<u32> */
    /* conv vec4<T : bool, U : scalar_no_bool>(vec4<U>) -> vec4<bool> */
    /* num overloads */ 15,
    /* overloads */ &kOverloads[27],
  },
  {
    /* [8] */
    /* ctor mat2x2<T : f32f16>() -> mat2x2<T> */
    /* ctor mat2x2<T : f32f16>(mat2x2<T>) -> mat2x2<T> */
    /* ctor mat2x2<T : af_f32f16>(T, T, T, T) -> mat2x2<T> */
    /* ctor mat2x2<T : af_f32f16>(vec2<T>, vec2<T>) -> mat2x2<T> */
    /* conv mat2x2<T : f16>(mat2x2<f32>) -> mat2x2<f16> */
    /* conv mat2x2<T : f32>(mat2x2<f16>) -> mat2x2<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[178],
  },
  {
    /* [9] */
    /* ctor mat2x3<T : f32f16>() -> mat2x3<T> */
    /* ctor mat2x3<T : f32f16>(mat2x3<T>) -> mat2x3<T> */
    /* ctor mat2x3<T : af_f32f16>(T, T, T, T, T, T) -> mat2x3<T> */
    /* ctor mat2x3<T : af_f32f16>(vec3<T>, vec3<T>) -> mat2x3<T> */
    /* conv mat2x3<T : f16>(mat2x3<f32>) -> mat2x3<f16> */
    /* conv mat2x3<T : f32>(mat2x3<f16>) -> mat2x3<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[196],
  },
  {
    /* [10] */
    /* ctor mat2x4<T : f32f16>() -> mat2x4<T> */
    /* ctor mat2x4<T : f32f16>(mat2x4<T>) -> mat2x4<T> */
    /* ctor mat2x4<T : af_f32f16>(T, T, T, T, T, T, T, T) -> mat2x4<T> */
    /* ctor mat2x4<T : af_f32f16>(vec4<T>, vec4<T>) -> mat2x4<T> */
    /* conv mat2x4<T : f16>(mat2x4<f32>) -> mat2x4<f16> */
    /* conv mat2x4<T : f32>(mat2x4<f16>) -> mat2x4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[172],
  },
  {
    /* [11] */
    /* ctor mat3x2<T : f32f16>() -> mat3x2<T> */
    /* ctor mat3x2<T : f32f16>(mat3x2<T>) -> mat3x2<T> */
    /* ctor mat3x2<T : af_f32f16>(T, T, T, T, T, T) -> mat3x2<T> */
    /* ctor mat3x2<T : af_f32f16>(vec2<T>, vec2<T>, vec2<T>) -> mat3x2<T> */
    /* conv mat3x2<T : f16>(mat3x2<f32>) -> mat3x2<f16> */
    /* conv mat3x2<T : f32>(mat3x2<f16>) -> mat3x2<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[226],
  },
  {
    /* [12] */
    /* ctor mat3x3<T : f32f16>() -> mat3x3<T> */
    /* ctor mat3x3<T : f32f16>(mat3x3<T>) -> mat3x3<T> */
    /* ctor mat3x3<T : af_f32f16>(T, T, T, T, T, T, T, T, T) -> mat3x3<T> */
    /* ctor mat3x3<T : af_f32f16>(vec3<T>, vec3<T>, vec3<T>) -> mat3x3<T> */
    /* conv mat3x3<T : f16>(mat3x3<f32>) -> mat3x3<f16> */
    /* conv mat3x3<T : f32>(mat3x3<f16>) -> mat3x3<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[220],
  },
  {
    /* [13] */
    /* ctor mat3x4<T : f32f16>() -> mat3x4<T> */
    /* ctor mat3x4<T : f32f16>(mat3x4<T>) -> mat3x4<T> */
    /* ctor mat3x4<T : af_f32f16>(T, T, T, T, T, T, T, T, T, T, T, T) -> mat3x4<T> */
    /* ctor mat3x4<T : af_f32f16>(vec4<T>, vec4<T>, vec4<T>) -> mat3x4<T> */
    /* conv mat3x4<T : f16>(mat3x4<f32>) -> mat3x4<f16> */
    /* conv mat3x4<T : f32>(mat3x4<f16>) -> mat3x4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[214],
  },
  {
    /* [14] */
    /* ctor mat4x2<T : f32f16>() -> mat4x2<T> */
    /* ctor mat4x2<T : f32f16>(mat4x2<T>) -> mat4x2<T> */
    /* ctor mat4x2<T : af_f32f16>(T, T, T, T, T, T, T, T) -> mat4x2<T> */
    /* ctor mat4x2<T : af_f32f16>(vec2<T>, vec2<T>, vec2<T>, vec2<T>) -> mat4x2<T> */
    /* conv mat4x2<T : f16>(mat4x2<f32>) -> mat4x2<f16> */
    /* conv mat4x2<T : f32>(mat4x2<f16>) -> mat4x2<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[202],
  },
  {
    /* [15] */
    /* ctor mat4x3<T : f32f16>() -> mat4x3<T> */
    /* ctor mat4x3<T : f32f16>(mat4x3<T>) -> mat4x3<T> */
    /* ctor mat4x3<T : af_f32f16>(T, T, T, T, T, T, T, T, T, T, T, T) -> mat4x3<T> */
    /* ctor mat4x3<T : af_f32f16>(vec3<T>, vec3<T>, vec3<T>, vec3<T>) -> mat4x3<T> */
    /* conv mat4x3<T : f16>(mat4x3<f32>) -> mat4x3<f16> */
    /* conv mat4x3<T : f32>(mat4x3<f16>) -> mat4x3<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[208],
  },
  {
    /* [16] */
    /* ctor mat4x4<T : f32f16>() -> mat4x4<T> */
    /* ctor mat4x4<T : f32f16>(mat4x4<T>) -> mat4x4<T> */
    /* ctor mat4x4<T : af_f32f16>(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) -> mat4x4<T> */
    /* ctor mat4x4<T : af_f32f16>(vec4<T>, vec4<T>, vec4<T>, vec4<T>) -> mat4x4<T> */
    /* conv mat4x4<T : f16>(mat4x4<f32>) -> mat4x4<f16> */
    /* conv mat4x4<T : f32>(mat4x4<f16>) -> mat4x4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[160],
  },
};

// clang-format on
