// Copyright 2021 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/intrinsic-gen
// using the template:
//   src/tint/resolver/constructable_type.h.tmpl
// and the intrinsic defintion file:
//   src/tint/intrinsics.def
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#ifndef SRC_TINT_RESOLVER_CONSTRUCTABLE_TYPE_H_
#define SRC_TINT_RESOLVER_CONSTRUCTABLE_TYPE_H_

#include <string>

namespace tint::resolver {

/// Enumerator of all builtin functions
enum class ConstructableType {
    kNone = -1,
    kI32,
    kU32,
    kF32,
    kBool,
    kVec2,
    kVec3,
    kVec4,
    kMat2x2,
    kMat2x3,
    kMat2x4,
    kMat3x2,
    kMat3x3,
    kMat3x4,
    kMat4x2,
    kMat4x3,
    kMat4x4,
};

/// @param name the constructable type name to parse
/// @returns the parsed ConstructableType or kNone if the name does not refer to
///          a constructable type.
ConstructableType ParseConstructableType(const std::string& name);

/// @returns the name of the builtin function type. The spelling, including
/// case, matches the name in the WGSL spec.
const char* str(ConstructableType i);

}  // namespace tint::resolver

#endif  // SRC_TINT_RESOLVER_CONSTRUCTABLE_TYPE_H_
