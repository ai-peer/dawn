// Copyright 2020 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/builtin_value.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <algorithm>
#include <cstring>

#include "src/tint/ast/builtin_value.h"

namespace tint::ast {

/// ParseBuiltinValue parses a BuiltinValue from a string.
/// @param str the string to parse
/// @returns the parsed enum, or BuiltinValue::kUndefined if the string could not be parsed.
BuiltinValue ParseBuiltinValue(std::string_view str) {
    std::array<uint64_t, 5> u64s = {};
    memcpy(u64s.data(), str.data(), str.size());

    switch (((u64s[0] * 935459) % 83591) & 15) {
        case 0: {
            if (u64s[0] == 0x6e6f697469736f70) {
                if (u64s[1] == 0x0000000000000000) {
                    return BuiltinValue::kPosition;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 1: {
            if (u64s[0] == 0x7065645f67617266) {
                if (u64s[1] == 0x0000000000006874) {
                    return BuiltinValue::kFragDepth;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 2: {
            if (u64s[0] == 0x695f6c61626f6c67) {
                if (u64s[1] == 0x6f697461636f766e) {
                    if (u64s[2] == 0x0000000064695f6e) {
                        return BuiltinValue::kGlobalInvocationId;
                    }
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 3: {
            if (u64s[0] == 0x61665f746e6f7266) {
                if (u64s[1] == 0x00000000676e6963) {
                    return BuiltinValue::kFrontFacing;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 4: {
            if (u64s[0] == 0x65636e6174736e69) {
                if (u64s[1] == 0x00007865646e695f) {
                    return BuiltinValue::kInstanceIndex;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 5: {
            if (u64s[0] == 0x695f786574726576) {
                if (u64s[1] == 0x000000007865646e) {
                    return BuiltinValue::kVertexIndex;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 6: {
            if (u64s[0] == 0x6e695f6c61636f6c) {
                if (u64s[1] == 0x6e6f697461636f76) {
                    if (u64s[2] == 0x00007865646e695f) {
                        return BuiltinValue::kLocalInvocationIndex;
                    }
                    if (u64s[2] == 0x000000000064695f) {
                        return BuiltinValue::kLocalInvocationId;
                    }
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 7: {
            if (u64s[0] == 0x756f72676b726f77) {
                if (u64s[1] == 0x0000000064695f70) {
                    return BuiltinValue::kWorkgroupId;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 8: {
            if (u64s[0] == 0x6d5f656c706d6173) {
                if (u64s[1] == 0x00000000006b7361) {
                    return BuiltinValue::kSampleMask;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 9: {
            if (u64s[0] == 0x695f656c706d6173) {
                if (u64s[1] == 0x000000007865646e) {
                    return BuiltinValue::kSampleIndex;
                }
            }
            return BuiltinValue::kUndefined;
        }
        case 10: {
            if (u64s[0] == 0x6b726f775f6d756e) {
                if (u64s[1] == 0x00007370756f7267) {
                    return BuiltinValue::kNumWorkgroups;
                }
            }
            return BuiltinValue::kUndefined;
        }
    }
    return BuiltinValue::kUndefined;
}

std::ostream& operator<<(std::ostream& out, BuiltinValue value) {
    switch (value) {
        case BuiltinValue::kUndefined:
            return out << "undefined";
        case BuiltinValue::kFragDepth:
            return out << "frag_depth";
        case BuiltinValue::kFrontFacing:
            return out << "front_facing";
        case BuiltinValue::kGlobalInvocationId:
            return out << "global_invocation_id";
        case BuiltinValue::kInstanceIndex:
            return out << "instance_index";
        case BuiltinValue::kLocalInvocationId:
            return out << "local_invocation_id";
        case BuiltinValue::kLocalInvocationIndex:
            return out << "local_invocation_index";
        case BuiltinValue::kNumWorkgroups:
            return out << "num_workgroups";
        case BuiltinValue::kPointSize:
            return out << "point_size";
        case BuiltinValue::kPosition:
            return out << "position";
        case BuiltinValue::kSampleIndex:
            return out << "sample_index";
        case BuiltinValue::kSampleMask:
            return out << "sample_mask";
        case BuiltinValue::kVertexIndex:
            return out << "vertex_index";
        case BuiltinValue::kWorkgroupId:
            return out << "workgroup_id";
    }
    return out << "<unknown>";
}

}  // namespace tint::ast
