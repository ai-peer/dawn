// Copyright 2020 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/builtin_value.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <algorithm>
#include <cstring>

#include "src/tint/ast/builtin_value.h"

namespace tint::ast {

/// ParseBuiltinValue parses a BuiltinValue from a string.
/// @param str the string to parse
/// @returns the parsed enum, or BuiltinValue::kInvalid if the string could not be parsed.
BuiltinValue ParseBuiltinValue(std::string_view str) {
    uint64_t u64 = 0u;
    memcpy(&u64, str.data(), std::min(str.size(), sizeof(u64)));
    switch (((u64 * 537) % 83591) % 11) {
        case 0:
            return (str == "sample_index") ? BuiltinValue::kSampleIndex : BuiltinValue::kInvalid;
        case 1:
            return (str == "workgroup_id") ? BuiltinValue::kWorkgroupId : BuiltinValue::kInvalid;
        case 2:
            if (u64 == 0x6e695f6c61636f6c) {
                str = str.substr(8);  // Skip the 8 bytes of the processed u64
                u64 = 0;              // Clear the u64 for the memcpy
                memcpy(&u64, str.data(), std::min(str.size(), sizeof(u64)));
                switch (((u64 * 1) % 83591) % 1) {
                    case 0:
                        if (u64 == 0x6e6f697461636f76) {
                            str = str.substr(8);  // Skip the 8 bytes of the processed u64
                            u64 = 0;              // Clear the u64 for the memcpy
                            memcpy(&u64, str.data(), std::min(str.size(), sizeof(u64)));
                            switch (((u64 * 3) % 83591) % 2) {
                                case 0:
                                    return (str == "_index") ? BuiltinValue::kLocalInvocationIndex
                                                             : BuiltinValue::kInvalid;
                                case 1:
                                    return (u64 == 6580575) ? BuiltinValue::kLocalInvocationId
                                                            : BuiltinValue::kInvalid;
                            }
                        }
                        break;
                }
            }
            break;
        case 3:
            return (str == "vertex_index") ? BuiltinValue::kVertexIndex : BuiltinValue::kInvalid;
        case 4:
            return (str == "global_invocation_id") ? BuiltinValue::kGlobalInvocationId
                                                   : BuiltinValue::kInvalid;
        case 5:
            return (str == "sample_mask") ? BuiltinValue::kSampleMask : BuiltinValue::kInvalid;
        case 6:
            return (str == "num_workgroups") ? BuiltinValue::kNumWorkgroups
                                             : BuiltinValue::kInvalid;
        case 7:
            return (str == "instance_index") ? BuiltinValue::kInstanceIndex
                                             : BuiltinValue::kInvalid;
        case 8:
            return (str == "front_facing") ? BuiltinValue::kFrontFacing : BuiltinValue::kInvalid;
        case 9:
            return (str == "frag_depth") ? BuiltinValue::kFragDepth : BuiltinValue::kInvalid;
        case 10:
            return (str == "position") ? BuiltinValue::kPosition : BuiltinValue::kInvalid;
    }
    return BuiltinValue::kInvalid;
}

std::ostream& operator<<(std::ostream& out, BuiltinValue value) {
    switch (value) {
        case BuiltinValue::kInvalid:
            return out << "invalid";
        case BuiltinValue::kPosition:
            return out << "position";
        case BuiltinValue::kVertexIndex:
            return out << "vertex_index";
        case BuiltinValue::kInstanceIndex:
            return out << "instance_index";
        case BuiltinValue::kFrontFacing:
            return out << "front_facing";
        case BuiltinValue::kFragDepth:
            return out << "frag_depth";
        case BuiltinValue::kLocalInvocationId:
            return out << "local_invocation_id";
        case BuiltinValue::kLocalInvocationIndex:
            return out << "local_invocation_index";
        case BuiltinValue::kGlobalInvocationId:
            return out << "global_invocation_id";
        case BuiltinValue::kWorkgroupId:
            return out << "workgroup_id";
        case BuiltinValue::kNumWorkgroups:
            return out << "num_workgroups";
        case BuiltinValue::kSampleIndex:
            return out << "sample_index";
        case BuiltinValue::kSampleMask:
            return out << "sample_mask";
        case BuiltinValue::kPointSize:
            return out << "point_size";
    }
    return out << "<unknown>";
}

}  // namespace tint::ast
