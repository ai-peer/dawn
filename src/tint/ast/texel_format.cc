// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/texel_format.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <algorithm>
#include <cstring>

#include "src/tint/ast/texel_format.h"

namespace tint::ast {

/// ParseTexelFormat parses a TexelFormat from a string.
/// @param str the string to parse
/// @returns the parsed enum, or TexelFormat::kUndefined if the string could not be parsed.
TexelFormat ParseTexelFormat(std::string_view str) {
    std::array<uint64_t, 5> u64s = {};
    memcpy(u64s.data(), str.data(), str.size());

    switch (((u64s[0] * 1028559) % 83591) & 15) {
        case 0: {
            if (u64s[0] == 0x746e697532336772) {
                if (u64s[1] == 0x0000000000000000) {
                    return TexelFormat::kRg32Uint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 1: {
            if (u64s[0] == 0x6975323361626772) {
                if (u64s[1] == 0x000000000000746e) {
                    return TexelFormat::kRgba32Uint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 2: {
            if (u64s[0] == 0x00746e6973323372) {
                return TexelFormat::kR32Sint;
            }
            return TexelFormat::kUndefined;
        }
        case 3: {
            if (u64s[0] == 0x6c66363161626772) {
                if (u64s[1] == 0x000000000074616f) {
                    return TexelFormat::kRgba16Float;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 4: {
            if (u64s[0] == 0x6973323361626772) {
                if (u64s[1] == 0x000000000000746e) {
                    return TexelFormat::kRgba32Sint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 5: {
            if (u64s[0] == 0x6973363161626772) {
                if (u64s[1] == 0x000000000000746e) {
                    return TexelFormat::kRgba16Sint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 6: {
            if (u64s[0] == 0x6f6e753861626772) {
                if (u64s[1] == 0x0000000000006d72) {
                    return TexelFormat::kRgba8Unorm;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 7: {
            if (u64s[0] == 0x6975363161626772) {
                if (u64s[1] == 0x000000000000746e) {
                    return TexelFormat::kRgba16Uint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 8: {
            if (u64s[0] == 0x74616f6c66323372) {
                if (u64s[1] == 0x0000000000000000) {
                    return TexelFormat::kR32Float;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 9: {
            if (u64s[0] == 0x6e69733861626772) {
                if (u64s[1] == 0x0000000000000074) {
                    return TexelFormat::kRgba8Sint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 10: {
            if (u64s[0] == 0x00746e6975323372) {
                return TexelFormat::kR32Uint;
            }
            return TexelFormat::kUndefined;
        }
        case 11: {
            if (u64s[0] == 0x746e697332336772) {
                if (u64s[1] == 0x0000000000000000) {
                    return TexelFormat::kRg32Sint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 12: {
            if (u64s[0] == 0x6f6e733861626772) {
                if (u64s[1] == 0x0000000000006d72) {
                    return TexelFormat::kRgba8Snorm;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 13: {
            if (u64s[0] == 0x6c66323361626772) {
                if (u64s[1] == 0x000000000074616f) {
                    return TexelFormat::kRgba32Float;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 14: {
            if (u64s[0] == 0x6e69753861626772) {
                if (u64s[1] == 0x0000000000000074) {
                    return TexelFormat::kRgba8Uint;
                }
            }
            return TexelFormat::kUndefined;
        }
        case 15: {
            if (u64s[0] == 0x616f6c6632336772) {
                if (u64s[1] == 0x0000000000000074) {
                    return TexelFormat::kRg32Float;
                }
            }
            return TexelFormat::kUndefined;
        }
    }
    return TexelFormat::kUndefined;
}

std::ostream& operator<<(std::ostream& out, TexelFormat value) {
    switch (value) {
        case TexelFormat::kUndefined:
            return out << "undefined";
        case TexelFormat::kR32Float:
            return out << "r32float";
        case TexelFormat::kR32Sint:
            return out << "r32sint";
        case TexelFormat::kR32Uint:
            return out << "r32uint";
        case TexelFormat::kRg32Float:
            return out << "rg32float";
        case TexelFormat::kRg32Sint:
            return out << "rg32sint";
        case TexelFormat::kRg32Uint:
            return out << "rg32uint";
        case TexelFormat::kRgba16Float:
            return out << "rgba16float";
        case TexelFormat::kRgba16Sint:
            return out << "rgba16sint";
        case TexelFormat::kRgba16Uint:
            return out << "rgba16uint";
        case TexelFormat::kRgba32Float:
            return out << "rgba32float";
        case TexelFormat::kRgba32Sint:
            return out << "rgba32sint";
        case TexelFormat::kRgba32Uint:
            return out << "rgba32uint";
        case TexelFormat::kRgba8Sint:
            return out << "rgba8sint";
        case TexelFormat::kRgba8Snorm:
            return out << "rgba8snorm";
        case TexelFormat::kRgba8Uint:
            return out << "rgba8uint";
        case TexelFormat::kRgba8Unorm:
            return out << "rgba8unorm";
    }
    return out << "<unknown>";
}

}  // namespace tint::ast
