// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/extension.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <algorithm>
#include <cstring>

#include "src/tint/ast/extension.h"

namespace tint::ast {

/// ParseExtension parses a Extension from a string.
/// @param str the string to parse
/// @returns the parsed enum, or Extension::kUndefined if the string could not be parsed.
Extension ParseExtension(std::string_view str) {
    std::array<uint64_t, 5> u64s = {};
    memcpy(u64s.data(), str.data(), str.size());

    if (u64s[0] == 0x0000000000363166) {
        return Extension::kF16;
    }
    if (u64s[0] == 0x6d75696d6f726863) {
        if (u64s[1] == 0x656c62617369645f) {
            if (u64s[2] == 0x6d726f66696e755f) {
                if (u64s[3] == 0x6c616e615f797469) {
                    if (u64s[4] == 0x0000000073697379) {
                        return Extension::kChromiumDisableUniformityAnalysis;
                    }
                }
            }
        }
        if (u64s[1] == 0x6d6972657078655f) {
            if (u64s[2] == 0x70645f6c61746e65) {
                if (u64s[3] == 0x0000000000006134) {
                    return Extension::kChromiumExperimentalDp4A;
                }
            }
            if (u64s[2] == 0x75705f6c61746e65) {
                if (u64s[3] == 0x74736e6f635f6873) {
                    if (u64s[4] == 0x0000000000746e61) {
                        return Extension::kChromiumExperimentalPushConstant;
                    }
                }
            }
        }
    }
    return Extension::kUndefined;
}

std::ostream& operator<<(std::ostream& out, Extension value) {
    switch (value) {
        case Extension::kUndefined:
            return out << "undefined";
        case Extension::kChromiumDisableUniformityAnalysis:
            return out << "chromium_disable_uniformity_analysis";
        case Extension::kChromiumExperimentalDp4A:
            return out << "chromium_experimental_dp4a";
        case Extension::kChromiumExperimentalPushConstant:
            return out << "chromium_experimental_push_constant";
        case Extension::kF16:
            return out << "f16";
    }
    return out << "<unknown>";
}

}  // namespace tint::ast
