// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/extension.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <algorithm>
#include <cstring>

#include "src/tint/ast/extension.h"

namespace tint::ast {

/// ParseExtension parses a Extension from a string.
/// @param str the string to parse
/// @returns the parsed enum, or Extension::kInvalid if the string could not be parsed.
Extension ParseExtension(std::string_view str) {
    uint64_t u64 = 0u;
    memcpy(&u64, str.data(), std::min(str.size(), sizeof(u64)));
    switch (((u64 * 2) % 83591) % 2) {
        case 0:
            return (u64 == 3551590) ? Extension::kF16 : Extension::kInvalid;
        case 1:
            if (u64 == 0x6d75696d6f726863) {
                str = str.substr(8);  // Skip the 8 bytes of the processed u64
                u64 = 0;              // Clear the u64 for the memcpy
                memcpy(&u64, str.data(), std::min(str.size(), sizeof(u64)));
                switch (((u64 * 3) % 83591) % 2) {
                    case 0:
                        return (str == "_disable_uniformity_analysis")
                                   ? Extension::kChromiumDisableUniformityAnalysis
                                   : Extension::kInvalid;
                    case 1:
                        return (str == "_experimental_dp4a") ? Extension::kChromiumExperimentalDp4A
                                                             : Extension::kInvalid;
                }
            }
            break;
    }
    return Extension::kInvalid;
}

std::ostream& operator<<(std::ostream& out, Extension value) {
    switch (value) {
        case Extension::kInvalid:
            return out << "invalid";
        case Extension::kF16:
            return out << "f16";
        case Extension::kChromiumExperimentalDp4A:
            return out << "chromium_experimental_dp4a";
        case Extension::kChromiumDisableUniformityAnalysis:
            return out << "chromium_disable_uniformity_analysis";
    }
    return out << "<unknown>";
}

}  // namespace tint::ast
