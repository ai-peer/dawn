// Copyright 2020 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/address_space.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <algorithm>
#include <cstring>

#include "src/tint/ast/address_space.h"

namespace tint::ast {

/// ParseAddressSpace parses a AddressSpace from a string.
/// @param str the string to parse
/// @returns the parsed enum, or AddressSpace::kUndefined if the string could not be parsed.
AddressSpace ParseAddressSpace(std::string_view str) {
    std::array<uint64_t, 5> u64s = {};
    memcpy(u64s.data(), str.data(), str.size());

    switch (((u64s[0] * 407) % 83591) & 7) {
        case 0: {
            if (u64s[0] == 0x006d726f66696e75) {
                return AddressSpace::kUniform;
            }
            return AddressSpace::kUndefined;
        }
        case 1: {
            if (u64s[0] == 0x6e6f6974636e7566) {
                if (u64s[1] == 0x0000000000000000) {
                    return AddressSpace::kFunction;
                }
            }
            return AddressSpace::kUndefined;
        }
        case 2: {
            if (u64s[0] == 0x6e6f635f68737570) {
                if (u64s[1] == 0x000000746e617473) {
                    return AddressSpace::kPushConstant;
                }
            }
            return AddressSpace::kUndefined;
        }
        case 3: {
            if (u64s[0] == 0x00656761726f7473) {
                return AddressSpace::kStorage;
            }
            return AddressSpace::kUndefined;
        }
        case 4: {
            if (u64s[0] == 0x0065746176697270) {
                return AddressSpace::kPrivate;
            }
            return AddressSpace::kUndefined;
        }
        case 5: {
            if (u64s[0] == 0x756f72676b726f77) {
                if (u64s[1] == 0x0000000000000070) {
                    return AddressSpace::kWorkgroup;
                }
            }
            return AddressSpace::kUndefined;
        }
    }
    return AddressSpace::kUndefined;
}

std::ostream& operator<<(std::ostream& out, AddressSpace value) {
    switch (value) {
        case AddressSpace::kUndefined:
            return out << "undefined";
        case AddressSpace::kFunction:
            return out << "function";
        case AddressSpace::kHandle:
            return out << "handle";
        case AddressSpace::kIn:
            return out << "in";
        case AddressSpace::kNone:
            return out << "none";
        case AddressSpace::kOut:
            return out << "out";
        case AddressSpace::kPrivate:
            return out << "private";
        case AddressSpace::kPushConstant:
            return out << "push_constant";
        case AddressSpace::kStorage:
            return out << "storage";
        case AddressSpace::kUniform:
            return out << "uniform";
        case AddressSpace::kWorkgroup:
            return out << "workgroup";
    }
    return out << "<unknown>";
}

}  // namespace tint::ast
