// Copyright 2023 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/lang/core/intrinsic_data.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <limits>
#include <string>

#include "src/tint/lang/core/intrinsic_data.h"
#include "src/tint/lang/core/intrinsic_type_matchers.h"
#include "src/tint/utils/text/string_stream.h"

namespace tint::core {
namespace {

using IntrinsicInfo = tint::core::intrinsic::IntrinsicInfo;
using MatchState = tint::core::intrinsic::MatchState;
using Number = tint::core::intrinsic::Number;
using NumberMatcher = tint::core::intrinsic::NumberMatcher;
using NumberMatcherIndex = tint::core::intrinsic::NumberMatcherIndex;
using NumberMatcherIndicesIndex = tint::core::intrinsic::NumberMatcherIndicesIndex;
using OverloadFlag = tint::core::intrinsic::OverloadFlag;
using OverloadFlags = tint::core::intrinsic::OverloadFlags;
using OverloadInfo = tint::core::intrinsic::OverloadInfo;
using ParameterIndex = tint::core::intrinsic::ParameterIndex;
using ParameterInfo = tint::core::intrinsic::ParameterInfo;
using StringStream = tint::StringStream;
using TemplateNumberIndex = tint::core::intrinsic::TemplateNumberIndex;
using TemplateNumberInfo = tint::core::intrinsic::TemplateNumberInfo;
using TemplateTypeIndex = tint::core::intrinsic::TemplateTypeIndex;
using TemplateTypeInfo = tint::core::intrinsic::TemplateTypeInfo;
using Type = tint::type::Type;
using TypeMatcher = tint::core::intrinsic::TypeMatcher;
using TypeMatcherIndex = tint::core::intrinsic::TypeMatcherIndex;
using TypeMatcherIndicesIndex = tint::core::intrinsic::TypeMatcherIndicesIndex;

template <size_t N>
using TemplateNumberMatcher = tint::core::intrinsic::TemplateNumberMatcher<N>;

template <size_t N>
using TemplateTypeMatcher = tint::core::intrinsic::TemplateTypeMatcher<N>;

// clang-format off

/// TypeMatcher for 'type bool'
constexpr TypeMatcher kBoolMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_bool(state, ty)) {
      return nullptr;
    }
    return build_bool(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "bool";
  }
};


/// TypeMatcher for 'type ia'
constexpr TypeMatcher kIaMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_ia(state, ty)) {
      return nullptr;
    }
    return build_ia(state);
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    ss << "abstract-int";
    return ss.str();
  }
};


/// TypeMatcher for 'type fa'
constexpr TypeMatcher kFaMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_fa(state, ty)) {
      return nullptr;
    }
    return build_fa(state);
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    ss << "abstract-float";
    return ss.str();
  }
};


/// TypeMatcher for 'type i32'
constexpr TypeMatcher kI32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_i32(state, ty)) {
      return nullptr;
    }
    return build_i32(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "i32";
  }
};


/// TypeMatcher for 'type u32'
constexpr TypeMatcher kU32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_u32(state, ty)) {
      return nullptr;
    }
    return build_u32(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "u32";
  }
};


/// TypeMatcher for 'type f32'
constexpr TypeMatcher kF32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_f32(state, ty)) {
      return nullptr;
    }
    return build_f32(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "f32";
  }
};


/// TypeMatcher for 'type f16'
constexpr TypeMatcher kF16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_f16(state, ty)) {
      return nullptr;
    }
    return build_f16(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "f16";
  }
};


/// TypeMatcher for 'type vec2'
constexpr TypeMatcher kVec2Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_vec2(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_vec2(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "vec2<" + T + ">";
  }
};


/// TypeMatcher for 'type vec3'
constexpr TypeMatcher kVec3Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_vec3(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_vec3(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "vec3<" + T + ">";
  }
};


/// TypeMatcher for 'type vec4'
constexpr TypeMatcher kVec4Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_vec4(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_vec4(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "vec4<" + T + ">";
  }
};


/// TypeMatcher for 'type mat2x2'
constexpr TypeMatcher kMat2X2Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat2x2(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat2x2(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat2x2<" + T + ">";
  }
};


/// TypeMatcher for 'type mat2x3'
constexpr TypeMatcher kMat2X3Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat2x3(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat2x3(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat2x3<" + T + ">";
  }
};


/// TypeMatcher for 'type mat2x4'
constexpr TypeMatcher kMat2X4Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat2x4(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat2x4(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat2x4<" + T + ">";
  }
};


/// TypeMatcher for 'type mat3x2'
constexpr TypeMatcher kMat3X2Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat3x2(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat3x2(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat3x2<" + T + ">";
  }
};


/// TypeMatcher for 'type mat3x3'
constexpr TypeMatcher kMat3X3Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat3x3(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat3x3(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat3x3<" + T + ">";
  }
};


/// TypeMatcher for 'type mat3x4'
constexpr TypeMatcher kMat3X4Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat3x4(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat3x4(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat3x4<" + T + ">";
  }
};


/// TypeMatcher for 'type mat4x2'
constexpr TypeMatcher kMat4X2Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat4x2(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat4x2(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat4x2<" + T + ">";
  }
};


/// TypeMatcher for 'type mat4x3'
constexpr TypeMatcher kMat4X3Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat4x3(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat4x3(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat4x3<" + T + ">";
  }
};


/// TypeMatcher for 'type mat4x4'
constexpr TypeMatcher kMat4X4Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_mat4x4(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat4x4(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "mat4x4<" + T + ">";
  }
};


/// TypeMatcher for 'type vec'
constexpr TypeMatcher kVecMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number N = Number::invalid;
  const Type* T = nullptr;
    if (!match_vec(state, ty, N, T)) {
      return nullptr;
    }
    N = state.Num(N);
    if (!N.IsValid()) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_vec(state, N, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string N = state->NumName();
  const std::string T = state->TypeName();
    StringStream ss;
    ss << "vec" << N << "<" << T << ">";
    return ss.str();
  }
};


/// TypeMatcher for 'type mat'
constexpr TypeMatcher kMatMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number N = Number::invalid;
  Number M = Number::invalid;
  const Type* T = nullptr;
    if (!match_mat(state, ty, N, M, T)) {
      return nullptr;
    }
    N = state.Num(N);
    if (!N.IsValid()) {
      return nullptr;
    }
    M = state.Num(M);
    if (!M.IsValid()) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_mat(state, N, M, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string N = state->NumName();
  const std::string M = state->NumName();
  const std::string T = state->TypeName();
    StringStream ss;
    ss << "mat" << N << "x" << M << "<" << T << ">";
    return ss.str();
  }
};


/// TypeMatcher for 'type ptr'
constexpr TypeMatcher kPtrMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number S = Number::invalid;
  const Type* T = nullptr;
  Number A = Number::invalid;
    if (!match_ptr(state, ty, S, T, A)) {
      return nullptr;
    }
    S = state.Num(S);
    if (!S.IsValid()) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    A = state.Num(A);
    if (!A.IsValid()) {
      return nullptr;
    }
    return build_ptr(state, S, T, A);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string S = state->NumName();
  const std::string T = state->TypeName();
  const std::string A = state->NumName();
    return "ptr<" + S + ", " + T + ", " + A + ">";
  }
};


/// TypeMatcher for 'type atomic'
constexpr TypeMatcher kAtomicMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_atomic(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_atomic(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "atomic<" + T + ">";
  }
};


/// TypeMatcher for 'type array'
constexpr TypeMatcher kArrayMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_array(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_array(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "array<" + T + ">";
  }
};


/// TypeMatcher for 'type sampler'
constexpr TypeMatcher kSamplerMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_sampler(state, ty)) {
      return nullptr;
    }
    return build_sampler(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "sampler";
  }
};


/// TypeMatcher for 'type sampler_comparison'
constexpr TypeMatcher kSamplerComparisonMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_sampler_comparison(state, ty)) {
      return nullptr;
    }
    return build_sampler_comparison(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "sampler_comparison";
  }
};


/// TypeMatcher for 'type texture_1d'
constexpr TypeMatcher kTexture1DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_1d(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_1d(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_1d<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_2d'
constexpr TypeMatcher kTexture2DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_2d(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_2d(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_2d<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_2d_array'
constexpr TypeMatcher kTexture2DArrayMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_2d_array(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_2d_array(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_2d_array<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_3d'
constexpr TypeMatcher kTexture3DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_3d(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_3d(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_3d<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_cube'
constexpr TypeMatcher kTextureCubeMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_cube(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_cube(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_cube<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_cube_array'
constexpr TypeMatcher kTextureCubeArrayMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_cube_array(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_cube_array(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_cube_array<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_multisampled_2d'
constexpr TypeMatcher kTextureMultisampled2DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_texture_multisampled_2d(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_texture_multisampled_2d(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "texture_multisampled_2d<" + T + ">";
  }
};


/// TypeMatcher for 'type texture_depth_2d'
constexpr TypeMatcher kTextureDepth2DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_texture_depth_2d(state, ty)) {
      return nullptr;
    }
    return build_texture_depth_2d(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "texture_depth_2d";
  }
};


/// TypeMatcher for 'type texture_depth_2d_array'
constexpr TypeMatcher kTextureDepth2DArrayMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_texture_depth_2d_array(state, ty)) {
      return nullptr;
    }
    return build_texture_depth_2d_array(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "texture_depth_2d_array";
  }
};


/// TypeMatcher for 'type texture_depth_cube'
constexpr TypeMatcher kTextureDepthCubeMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_texture_depth_cube(state, ty)) {
      return nullptr;
    }
    return build_texture_depth_cube(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "texture_depth_cube";
  }
};


/// TypeMatcher for 'type texture_depth_cube_array'
constexpr TypeMatcher kTextureDepthCubeArrayMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_texture_depth_cube_array(state, ty)) {
      return nullptr;
    }
    return build_texture_depth_cube_array(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "texture_depth_cube_array";
  }
};


/// TypeMatcher for 'type texture_depth_multisampled_2d'
constexpr TypeMatcher kTextureDepthMultisampled2DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_texture_depth_multisampled_2d(state, ty)) {
      return nullptr;
    }
    return build_texture_depth_multisampled_2d(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "texture_depth_multisampled_2d";
  }
};


/// TypeMatcher for 'type texture_storage_1d'
constexpr TypeMatcher kTextureStorage1DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number F = Number::invalid;
  Number A = Number::invalid;
    if (!match_texture_storage_1d(state, ty, F, A)) {
      return nullptr;
    }
    F = state.Num(F);
    if (!F.IsValid()) {
      return nullptr;
    }
    A = state.Num(A);
    if (!A.IsValid()) {
      return nullptr;
    }
    return build_texture_storage_1d(state, F, A);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
    return "texture_storage_1d<" + F + ", " + A + ">";
  }
};


/// TypeMatcher for 'type texture_storage_2d'
constexpr TypeMatcher kTextureStorage2DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number F = Number::invalid;
  Number A = Number::invalid;
    if (!match_texture_storage_2d(state, ty, F, A)) {
      return nullptr;
    }
    F = state.Num(F);
    if (!F.IsValid()) {
      return nullptr;
    }
    A = state.Num(A);
    if (!A.IsValid()) {
      return nullptr;
    }
    return build_texture_storage_2d(state, F, A);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
    return "texture_storage_2d<" + F + ", " + A + ">";
  }
};


/// TypeMatcher for 'type texture_storage_2d_array'
constexpr TypeMatcher kTextureStorage2DArrayMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number F = Number::invalid;
  Number A = Number::invalid;
    if (!match_texture_storage_2d_array(state, ty, F, A)) {
      return nullptr;
    }
    F = state.Num(F);
    if (!F.IsValid()) {
      return nullptr;
    }
    A = state.Num(A);
    if (!A.IsValid()) {
      return nullptr;
    }
    return build_texture_storage_2d_array(state, F, A);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
    return "texture_storage_2d_array<" + F + ", " + A + ">";
  }
};


/// TypeMatcher for 'type texture_storage_3d'
constexpr TypeMatcher kTextureStorage3DMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number F = Number::invalid;
  Number A = Number::invalid;
    if (!match_texture_storage_3d(state, ty, F, A)) {
      return nullptr;
    }
    F = state.Num(F);
    if (!F.IsValid()) {
      return nullptr;
    }
    A = state.Num(A);
    if (!A.IsValid()) {
      return nullptr;
    }
    return build_texture_storage_3d(state, F, A);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string F = state->NumName();
  const std::string A = state->NumName();
    return "texture_storage_3d<" + F + ", " + A + ">";
  }
};


/// TypeMatcher for 'type texture_external'
constexpr TypeMatcher kTextureExternalMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (!match_texture_external(state, ty)) {
      return nullptr;
    }
    return build_texture_external(state);
  },
/* string */ [](MatchState*) -> std::string {
    return "texture_external";
  }
};


/// TypeMatcher for 'type packedVec3'
constexpr TypeMatcher kPackedVec3Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_packedVec3(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_packedVec3(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "packedVec3<" + T + ">";
  }
};


/// TypeMatcher for 'type __modf_result'
constexpr TypeMatcher kModfResultMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_modf_result(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_modf_result(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    StringStream ss;
    ss << "__modf_result_" << T;
    return ss.str();
  }
};


/// TypeMatcher for 'type __modf_result_vec'
constexpr TypeMatcher kModfResultVecMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number N = Number::invalid;
  const Type* T = nullptr;
    if (!match_modf_result_vec(state, ty, N, T)) {
      return nullptr;
    }
    N = state.Num(N);
    if (!N.IsValid()) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_modf_result_vec(state, N, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string N = state->NumName();
  const std::string T = state->TypeName();
    StringStream ss;
    ss << "__modf_result_vec" << N << "_" << T;
    return ss.str();
  }
};


/// TypeMatcher for 'type __frexp_result'
constexpr TypeMatcher kFrexpResultMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_frexp_result(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_frexp_result(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    StringStream ss;
    ss << "__frexp_result_" << T;
    return ss.str();
  }
};


/// TypeMatcher for 'type __frexp_result_vec'
constexpr TypeMatcher kFrexpResultVecMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  Number N = Number::invalid;
  const Type* T = nullptr;
    if (!match_frexp_result_vec(state, ty, N, T)) {
      return nullptr;
    }
    N = state.Num(N);
    if (!N.IsValid()) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_frexp_result_vec(state, N, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string N = state->NumName();
  const std::string T = state->TypeName();
    StringStream ss;
    ss << "__frexp_result_vec" << N << "_" << T;
    return ss.str();
  }
};


/// TypeMatcher for 'type __atomic_compare_exchange_result'
constexpr TypeMatcher kAtomicCompareExchangeResultMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
  const Type* T = nullptr;
    if (!match_atomic_compare_exchange_result(state, ty, T)) {
      return nullptr;
    }
    T = state.Type(T);
    if (T == nullptr) {
      return nullptr;
    }
    return build_atomic_compare_exchange_result(state, T);
  },
/* string */ [](MatchState* state) -> std::string {
  const std::string T = state->TypeName();
    return "__atomic_compare_exchange_result<" + T + ">";
  }
};


/// TypeMatcher for 'match scalar'
constexpr TypeMatcher kScalarMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    if (match_bool(state, ty)) {
      return build_bool(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kFaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kF16Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kBoolMatcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match concrete_scalar'
constexpr TypeMatcher kConcreteScalarMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    if (match_bool(state, ty)) {
      return build_bool(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kF32Matcher.string(nullptr) << ", " << kF16Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kBoolMatcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match scalar_no_f32'
constexpr TypeMatcher kScalarNoF32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    if (match_bool(state, ty)) {
      return build_bool(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kFaMatcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << ", " << kF16Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kBoolMatcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match scalar_no_f16'
constexpr TypeMatcher kScalarNoF16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_bool(state, ty)) {
      return build_bool(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kFaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kBoolMatcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match scalar_no_i32'
constexpr TypeMatcher kScalarNoI32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    if (match_bool(state, ty)) {
      return build_bool(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kFaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kF16Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kBoolMatcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match scalar_no_u32'
constexpr TypeMatcher kScalarNoU32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    if (match_bool(state, ty)) {
      return build_bool(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kFaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kF16Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kBoolMatcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match scalar_no_bool'
constexpr TypeMatcher kScalarNoBoolMatcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kFaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kF16Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kU32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fia_fiu32_f16'
constexpr TypeMatcher kFiaFiu32F16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kFaMatcher.string(nullptr) << ", " << kIaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kF16Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fia_fi32_f16'
constexpr TypeMatcher kFiaFi32F16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kFaMatcher.string(nullptr) << ", " << kIaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kF16Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fia_fiu32'
constexpr TypeMatcher kFiaFiu32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kFaMatcher.string(nullptr) << ", " << kIaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kU32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fa_f32'
constexpr TypeMatcher kFaF32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kFaMatcher.string(nullptr) << " or " << kF32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fa_f32_f16'
constexpr TypeMatcher kFaF32F16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_fa(state, ty)) {
      return build_fa(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kFaMatcher.string(nullptr) << ", " << kF32Matcher.string(nullptr) << " or " << kF16Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match ia_iu32'
constexpr TypeMatcher kIaIu32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kU32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match ia_i32'
constexpr TypeMatcher kIaI32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_ia(state, ty)) {
      return build_ia(state);
    }
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kIaMatcher.string(nullptr) << " or " << kI32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fiu32_f16'
constexpr TypeMatcher kFiu32F16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << ", " << kU32Matcher.string(nullptr) << " or " << kF16Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fiu32'
constexpr TypeMatcher kFiu32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kU32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fi32_f16'
constexpr TypeMatcher kFi32F16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kF32Matcher.string(nullptr) << ", " << kI32Matcher.string(nullptr) << " or " << kF16Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match fi32'
constexpr TypeMatcher kFi32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kF32Matcher.string(nullptr) << " or " << kI32Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match f32_f16'
constexpr TypeMatcher kF32F16Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_f32(state, ty)) {
      return build_f32(state);
    }
    if (match_f16(state, ty)) {
      return build_f16(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kF32Matcher.string(nullptr) << " or " << kF16Matcher.string(nullptr);
    return ss.str();
  }
};

/// TypeMatcher for 'match iu32'
constexpr TypeMatcher kIu32Matcher {
/* match */ [](MatchState& state, const Type* ty) -> const Type* {
    if (match_i32(state, ty)) {
      return build_i32(state);
    }
    if (match_u32(state, ty)) {
      return build_u32(state);
    }
    return nullptr;
  },
/* string */ [](MatchState*) -> std::string {
    StringStream ss;
    // Note: We pass nullptr to the TypeMatcher::String() functions, as 'matcher's do not support
    // template arguments, nor can they match sub-types. As such, they have no use for the MatchState.
    ss << kI32Matcher.string(nullptr) << " or " << kU32Matcher.string(nullptr);
    return ss.str();
  }
};

/// EnumMatcher for 'match f32_texel_format'
constexpr NumberMatcher kF32TexelFormatMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    switch (static_cast<TexelFormat>(number.Value())) {
      case TexelFormat::kBgra8Unorm:
      case TexelFormat::kRgba8Unorm:
      case TexelFormat::kRgba8Snorm:
      case TexelFormat::kRgba16Float:
      case TexelFormat::kR32Float:
      case TexelFormat::kRg32Float:
      case TexelFormat::kRgba32Float:
        return number;
      default:
        return Number::invalid;
    }
  },
/* string */ [](MatchState*) -> std::string {
    return "bgra8unorm, rgba8unorm, rgba8snorm, rgba16float, r32float, rg32float or rgba32float";
  }
};

/// EnumMatcher for 'match i32_texel_format'
constexpr NumberMatcher kI32TexelFormatMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    switch (static_cast<TexelFormat>(number.Value())) {
      case TexelFormat::kRgba8Sint:
      case TexelFormat::kRgba16Sint:
      case TexelFormat::kR32Sint:
      case TexelFormat::kRg32Sint:
      case TexelFormat::kRgba32Sint:
        return number;
      default:
        return Number::invalid;
    }
  },
/* string */ [](MatchState*) -> std::string {
    return "rgba8sint, rgba16sint, r32sint, rg32sint or rgba32sint";
  }
};

/// EnumMatcher for 'match u32_texel_format'
constexpr NumberMatcher kU32TexelFormatMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    switch (static_cast<TexelFormat>(number.Value())) {
      case TexelFormat::kRgba8Uint:
      case TexelFormat::kRgba16Uint:
      case TexelFormat::kR32Uint:
      case TexelFormat::kRg32Uint:
      case TexelFormat::kRgba32Uint:
        return number;
      default:
        return Number::invalid;
    }
  },
/* string */ [](MatchState*) -> std::string {
    return "rgba8uint, rgba16uint, r32uint, rg32uint or rgba32uint";
  }
};

/// EnumMatcher for 'match write'
constexpr NumberMatcher kWriteMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    if (number.IsAny() || number.Value() == static_cast<uint32_t>(Access::kWrite)) {
      return Number(static_cast<uint32_t>(Access::kWrite));
    }
    return Number::invalid;
  },
/* string */ [](MatchState*) -> std::string {
    return "write";
  }
};

/// EnumMatcher for 'match read_write'
constexpr NumberMatcher kReadWriteMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    if (number.IsAny() || number.Value() == static_cast<uint32_t>(Access::kReadWrite)) {
      return Number(static_cast<uint32_t>(Access::kReadWrite));
    }
    return Number::invalid;
  },
/* string */ [](MatchState*) -> std::string {
    return "read_write";
  }
};

/// EnumMatcher for 'match function_private_workgroup'
constexpr NumberMatcher kFunctionPrivateWorkgroupMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    switch (static_cast<AddressSpace>(number.Value())) {
      case AddressSpace::kFunction:
      case AddressSpace::kPrivate:
      case AddressSpace::kWorkgroup:
        return number;
      default:
        return Number::invalid;
    }
  },
/* string */ [](MatchState*) -> std::string {
    return "function, private or workgroup";
  }
};

/// EnumMatcher for 'match workgroup_or_storage'
constexpr NumberMatcher kWorkgroupOrStorageMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    switch (static_cast<AddressSpace>(number.Value())) {
      case AddressSpace::kWorkgroup:
      case AddressSpace::kStorage:
        return number;
      default:
        return Number::invalid;
    }
  },
/* string */ [](MatchState*) -> std::string {
    return "workgroup or storage";
  }
};

/// EnumMatcher for 'match storage'
constexpr NumberMatcher kStorageMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    if (number.IsAny() || number.Value() == static_cast<uint32_t>(AddressSpace::kStorage)) {
      return Number(static_cast<uint32_t>(AddressSpace::kStorage));
    }
    return Number::invalid;
  },
/* string */ [](MatchState*) -> std::string {
    return "storage";
  }
};

/// EnumMatcher for 'match workgroup'
constexpr NumberMatcher kWorkgroupMatcher {
/* match */ [](MatchState&, Number number) -> Number {
    if (number.IsAny() || number.Value() == static_cast<uint32_t>(AddressSpace::kWorkgroup)) {
      return Number(static_cast<uint32_t>(AddressSpace::kWorkgroup));
    }
    return Number::invalid;
  },
/* string */ [](MatchState*) -> std::string {
    return "workgroup";
  }
};

/// Type and number matchers

/// The template types, types, and type matchers
constexpr TypeMatcher kTypeMatchers[] = {
  /* [0] */ TemplateTypeMatcher<0>::matcher,
  /* [1] */ TemplateTypeMatcher<1>::matcher,
  /* [2] */ TemplateTypeMatcher<2>::matcher,
  /* [3] */ TemplateTypeMatcher<3>::matcher,
  /* [4] */ kBoolMatcher,
  /* [5] */ kIaMatcher,
  /* [6] */ kFaMatcher,
  /* [7] */ kI32Matcher,
  /* [8] */ kU32Matcher,
  /* [9] */ kF32Matcher,
  /* [10] */ kF16Matcher,
  /* [11] */ kVec2Matcher,
  /* [12] */ kVec3Matcher,
  /* [13] */ kVec4Matcher,
  /* [14] */ kMat2X2Matcher,
  /* [15] */ kMat2X3Matcher,
  /* [16] */ kMat2X4Matcher,
  /* [17] */ kMat3X2Matcher,
  /* [18] */ kMat3X3Matcher,
  /* [19] */ kMat3X4Matcher,
  /* [20] */ kMat4X2Matcher,
  /* [21] */ kMat4X3Matcher,
  /* [22] */ kMat4X4Matcher,
  /* [23] */ kVecMatcher,
  /* [24] */ kMatMatcher,
  /* [25] */ kPtrMatcher,
  /* [26] */ kAtomicMatcher,
  /* [27] */ kArrayMatcher,
  /* [28] */ kSamplerMatcher,
  /* [29] */ kSamplerComparisonMatcher,
  /* [30] */ kTexture1DMatcher,
  /* [31] */ kTexture2DMatcher,
  /* [32] */ kTexture2DArrayMatcher,
  /* [33] */ kTexture3DMatcher,
  /* [34] */ kTextureCubeMatcher,
  /* [35] */ kTextureCubeArrayMatcher,
  /* [36] */ kTextureMultisampled2DMatcher,
  /* [37] */ kTextureDepth2DMatcher,
  /* [38] */ kTextureDepth2DArrayMatcher,
  /* [39] */ kTextureDepthCubeMatcher,
  /* [40] */ kTextureDepthCubeArrayMatcher,
  /* [41] */ kTextureDepthMultisampled2DMatcher,
  /* [42] */ kTextureStorage1DMatcher,
  /* [43] */ kTextureStorage2DMatcher,
  /* [44] */ kTextureStorage2DArrayMatcher,
  /* [45] */ kTextureStorage3DMatcher,
  /* [46] */ kTextureExternalMatcher,
  /* [47] */ kPackedVec3Matcher,
  /* [48] */ kModfResultMatcher,
  /* [49] */ kModfResultVecMatcher,
  /* [50] */ kFrexpResultMatcher,
  /* [51] */ kFrexpResultVecMatcher,
  /* [52] */ kAtomicCompareExchangeResultMatcher,
  /* [53] */ kScalarMatcher,
  /* [54] */ kConcreteScalarMatcher,
  /* [55] */ kScalarNoF32Matcher,
  /* [56] */ kScalarNoF16Matcher,
  /* [57] */ kScalarNoI32Matcher,
  /* [58] */ kScalarNoU32Matcher,
  /* [59] */ kScalarNoBoolMatcher,
  /* [60] */ kFiaFiu32F16Matcher,
  /* [61] */ kFiaFi32F16Matcher,
  /* [62] */ kFiaFiu32Matcher,
  /* [63] */ kFaF32Matcher,
  /* [64] */ kFaF32F16Matcher,
  /* [65] */ kIaIu32Matcher,
  /* [66] */ kIaI32Matcher,
  /* [67] */ kFiu32F16Matcher,
  /* [68] */ kFiu32Matcher,
  /* [69] */ kFi32F16Matcher,
  /* [70] */ kFi32Matcher,
  /* [71] */ kF32F16Matcher,
  /* [72] */ kIu32Matcher,
};

/// The template numbers, and number matchers
constexpr NumberMatcher kNumberMatchers[] = {
  /* [0] */ TemplateNumberMatcher<0>::matcher,
  /* [1] */ TemplateNumberMatcher<1>::matcher,
  /* [2] */ TemplateNumberMatcher<2>::matcher,
  /* [3] */ kF32TexelFormatMatcher,
  /* [4] */ kI32TexelFormatMatcher,
  /* [5] */ kU32TexelFormatMatcher,
  /* [6] */ kWriteMatcher,
  /* [7] */ kReadWriteMatcher,
  /* [8] */ kFunctionPrivateWorkgroupMatcher,
  /* [9] */ kWorkgroupOrStorageMatcher,
  /* [10] */ kStorageMatcher,
  /* [11] */ kWorkgroupMatcher,
};

constexpr TypeMatcherIndex kTypeMatcherIndices[] = {
  /* [0] */ 25,
  /* [1] */ 27,
  /* [2] */ 0,
  /* [3] */ 25,
  /* [4] */ 26,
  /* [5] */ 0,
  /* [6] */ 23,
  /* [7] */ 0,
  /* [8] */ 23,
  /* [9] */ 4,
  /* [10] */ 12,
  /* [11] */ 0,
  /* [12] */ 24,
  /* [13] */ 0,
  /* [14] */ 23,
  /* [15] */ 9,
  /* [16] */ 50,
  /* [17] */ 0,
  /* [18] */ 51,
  /* [19] */ 0,
  /* [20] */ 23,
  /* [21] */ 1,
  /* [22] */ 48,
  /* [23] */ 0,
  /* [24] */ 49,
  /* [25] */ 0,
  /* [26] */ 11,
  /* [27] */ 9,
  /* [28] */ 13,
  /* [29] */ 9,
  /* [30] */ 25,
  /* [31] */ 0,
  /* [32] */ 30,
  /* [33] */ 0,
  /* [34] */ 31,
  /* [35] */ 0,
  /* [36] */ 11,
  /* [37] */ 8,
  /* [38] */ 32,
  /* [39] */ 0,
  /* [40] */ 33,
  /* [41] */ 0,
  /* [42] */ 12,
  /* [43] */ 8,
  /* [44] */ 34,
  /* [45] */ 0,
  /* [46] */ 35,
  /* [47] */ 0,
  /* [48] */ 36,
  /* [49] */ 0,
  /* [50] */ 13,
  /* [51] */ 0,
  /* [52] */ 11,
  /* [53] */ 7,
  /* [54] */ 12,
  /* [55] */ 9,
  /* [56] */ 30,
  /* [57] */ 9,
  /* [58] */ 31,
  /* [59] */ 9,
  /* [60] */ 32,
  /* [61] */ 9,
  /* [62] */ 33,
  /* [63] */ 9,
  /* [64] */ 12,
  /* [65] */ 7,
  /* [66] */ 34,
  /* [67] */ 9,
  /* [68] */ 35,
  /* [69] */ 9,
  /* [70] */ 11,
  /* [71] */ 0,
  /* [72] */ 13,
  /* [73] */ 7,
  /* [74] */ 13,
  /* [75] */ 8,
  /* [76] */ 11,
  /* [77] */ 1,
  /* [78] */ 12,
  /* [79] */ 1,
  /* [80] */ 52,
  /* [81] */ 0,
  /* [82] */ 23,
  /* [83] */ 8,
  /* [84] */ 11,
  /* [85] */ 5,
  /* [86] */ 11,
  /* [87] */ 10,
  /* [88] */ 11,
  /* [89] */ 4,
  /* [90] */ 12,
  /* [91] */ 5,
  /* [92] */ 12,
  /* [93] */ 10,
  /* [94] */ 12,
  /* [95] */ 4,
  /* [96] */ 13,
  /* [97] */ 5,
  /* [98] */ 13,
  /* [99] */ 1,
  /* [100] */ 13,
  /* [101] */ 10,
  /* [102] */ 13,
  /* [103] */ 4,
  /* [104] */ 14,
  /* [105] */ 0,
  /* [106] */ 14,
  /* [107] */ 9,
  /* [108] */ 14,
  /* [109] */ 10,
  /* [110] */ 15,
  /* [111] */ 0,
  /* [112] */ 15,
  /* [113] */ 9,
  /* [114] */ 15,
  /* [115] */ 10,
  /* [116] */ 16,
  /* [117] */ 0,
  /* [118] */ 16,
  /* [119] */ 9,
  /* [120] */ 16,
  /* [121] */ 10,
  /* [122] */ 17,
  /* [123] */ 0,
  /* [124] */ 17,
  /* [125] */ 9,
  /* [126] */ 17,
  /* [127] */ 10,
  /* [128] */ 18,
  /* [129] */ 0,
  /* [130] */ 18,
  /* [131] */ 9,
  /* [132] */ 18,
  /* [133] */ 10,
  /* [134] */ 19,
  /* [135] */ 0,
  /* [136] */ 19,
  /* [137] */ 9,
  /* [138] */ 19,
  /* [139] */ 10,
  /* [140] */ 20,
  /* [141] */ 0,
  /* [142] */ 20,
  /* [143] */ 9,
  /* [144] */ 20,
  /* [145] */ 10,
  /* [146] */ 21,
  /* [147] */ 0,
  /* [148] */ 21,
  /* [149] */ 9,
  /* [150] */ 21,
  /* [151] */ 10,
  /* [152] */ 22,
  /* [153] */ 0,
  /* [154] */ 22,
  /* [155] */ 9,
  /* [156] */ 22,
  /* [157] */ 10,
  /* [158] */ 47,
  /* [159] */ 0,
  /* [160] */ 37,
  /* [161] */ 38,
  /* [162] */ 39,
  /* [163] */ 40,
  /* [164] */ 41,
  /* [165] */ 42,
  /* [166] */ 43,
  /* [167] */ 44,
  /* [168] */ 45,
  /* [169] */ 46,
  /* [170] */ 28,
  /* [171] */ 2,
  /* [172] */ 29,
  /* [173] */ 3,
};

static_assert(TypeMatcherIndex::CanIndex(kTypeMatcherIndices),
              "TypeMatcherIndex is not large enough to index kTypeMatcherIndices");

constexpr NumberMatcherIndex kNumberMatcherIndices[] = {
  /* [0] */ 10,
  /* [1] */ 0,
  /* [2] */ 0,
  /* [3] */ 1,
  /* [4] */ 0,
  /* [5] */ 7,
  /* [6] */ 11,
  /* [7] */ 7,
  /* [8] */ 3,
  /* [9] */ 6,
  /* [10] */ 4,
  /* [11] */ 6,
  /* [12] */ 5,
  /* [13] */ 6,
  /* [14] */ 0,
  /* [15] */ 2,
  /* [16] */ 1,
  /* [17] */ 2,
};

static_assert(NumberMatcherIndex::CanIndex(kNumberMatcherIndices),
              "NumberMatcherIndex is not large enough to index kNumberMatcherIndices");

constexpr ParameterInfo kParameters[] = {
  {
    /* [0] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [2] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [3] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [4] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [5] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [6] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [7] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [8] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [9] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [10] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [11] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [12] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [13] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [14] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [15] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [16] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [17] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [18] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [19] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [20] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [21] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [22] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [23] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [24] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [25] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [26] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [27] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [28] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [29] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [30] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [31] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [32] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [33] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [34] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [35] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [36] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [37] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [38] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [39] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [40] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [41] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [42] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [43] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [44] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [45] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [46] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [47] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [48] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [49] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [50] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [51] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [52] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [53] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [54] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [55] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [56] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [57] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [58] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [59] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [60] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [61] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [62] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [63] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [64] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [65] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [66] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [67] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [68] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [69] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [70] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [71] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [72] */
    /* usage */ ParameterUsage::kComponent,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [73] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [74] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [75] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [76] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [77] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [78] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [79] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [80] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [81] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [82] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [83] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [84] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [85] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [86] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [87] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [88] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [89] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [90] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [91] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [92] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [93] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [94] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [95] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [96] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [97] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [98] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [99] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [100] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [101] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [102] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [103] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [104] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [105] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [106] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [107] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [108] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [109] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [110] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [111] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [112] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [113] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [114] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [115] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [116] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [117] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [118] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [119] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 64,
    /* number_matcher_indices */ 18,
  },
  {
    /* [120] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 68,
    /* number_matcher_indices */ 18,
  },
  {
    /* [121] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [122] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [123] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [124] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [125] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [126] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [127] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [128] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [129] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [130] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [131] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [132] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [133] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [134] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [135] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [136] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [137] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [138] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [139] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [140] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [141] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [142] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [143] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [144] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [145] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [146] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [147] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [148] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [149] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [150] */
    /* usage */ ParameterUsage::kComponent,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [151] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 34,
    /* number_matcher_indices */ 18,
  },
  {
    /* [152] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [153] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [154] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [155] */
    /* usage */ ParameterUsage::kComponent,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [156] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [157] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [158] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [159] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [160] */
    /* usage */ ParameterUsage::kComponent,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [161] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 46,
    /* number_matcher_indices */ 18,
  },
  {
    /* [162] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [163] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [164] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [165] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [166] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [167] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [168] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [169] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [170] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [171] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [172] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [173] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [174] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [175] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [176] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [177] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [178] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [179] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [180] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [181] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [182] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [183] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [184] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [185] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [186] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [187] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [188] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [189] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [190] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [191] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [192] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [193] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [194] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [195] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [196] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [197] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [198] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [199] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [200] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [201] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [202] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [203] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [204] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [205] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [206] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [207] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [208] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [209] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 64,
    /* number_matcher_indices */ 18,
  },
  {
    /* [210] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 68,
    /* number_matcher_indices */ 18,
  },
  {
    /* [211] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [212] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [213] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [214] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [215] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [216] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [217] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [218] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [219] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [220] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [221] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [222] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [223] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [224] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [225] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [226] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [227] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [228] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [229] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [230] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [231] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [232] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [233] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [234] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [235] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [236] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [237] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [238] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [239] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [240] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [241] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [242] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [243] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [244] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [245] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [246] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [247] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [248] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [249] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [250] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [251] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [252] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [253] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [254] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [255] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 66,
    /* number_matcher_indices */ 18,
  },
  {
    /* [256] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [257] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [258] */
    /* usage */ ParameterUsage::kDdx,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [259] */
    /* usage */ ParameterUsage::kDdy,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [260] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [261] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [262] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [263] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [264] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [265] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [266] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [267] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [268] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [269] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [270] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [271] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [272] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [273] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [274] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 64,
    /* number_matcher_indices */ 18,
  },
  {
    /* [275] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 68,
    /* number_matcher_indices */ 18,
  },
  {
    /* [276] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [277] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [278] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [279] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [280] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [281] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [282] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [283] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [284] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [285] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [286] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [287] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [288] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [289] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [290] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [291] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [292] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [293] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [294] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [295] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [296] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [297] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [298] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [299] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [300] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [301] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [302] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [303] */
    /* usage */ ParameterUsage::kComponent,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [304] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 34,
    /* number_matcher_indices */ 18,
  },
  {
    /* [305] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [306] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [307] */
    /* usage */ ParameterUsage::kComponent,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [308] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 44,
    /* number_matcher_indices */ 18,
  },
  {
    /* [309] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [310] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [311] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [312] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [313] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [314] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [315] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [316] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [317] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [318] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [319] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [320] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [321] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [322] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [323] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [324] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [325] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [326] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [327] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [328] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [329] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [330] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [331] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [332] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [333] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [334] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [335] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 60,
    /* number_matcher_indices */ 18,
  },
  {
    /* [336] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [337] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [338] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [339] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [340] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [341] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [342] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 64,
    /* number_matcher_indices */ 18,
  },
  {
    /* [343] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 68,
    /* number_matcher_indices */ 18,
  },
  {
    /* [344] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [345] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [346] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [347] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [348] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [349] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [350] */
    /* usage */ ParameterUsage::kOffset,
    /* type_matcher_indices */ 52,
    /* number_matcher_indices */ 18,
  },
  {
    /* [351] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [352] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [353] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [354] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [355] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [356] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [357] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [358] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [359] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [360] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [361] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [362] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [363] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [364] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [365] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [366] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [367] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 66,
    /* number_matcher_indices */ 18,
  },
  {
    /* [368] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [369] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [370] */
    /* usage */ ParameterUsage::kBias,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [371] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [372] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [373] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [374] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [375] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [376] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [377] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [378] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [379] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [380] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [381] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [382] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [383] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [384] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 172,
    /* number_matcher_indices */ 18,
  },
  {
    /* [385] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [386] */
    /* usage */ ParameterUsage::kDepthRef,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [387] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [388] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [389] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [390] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [391] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [392] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [393] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [394] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [395] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 66,
    /* number_matcher_indices */ 18,
  },
  {
    /* [396] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [397] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [398] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [399] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [400] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [401] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [402] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [403] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [404] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [405] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [406] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [407] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 167,
    /* number_matcher_indices */ 8,
  },
  {
    /* [408] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [409] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [410] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 28,
    /* number_matcher_indices */ 18,
  },
  {
    /* [411] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 167,
    /* number_matcher_indices */ 10,
  },
  {
    /* [412] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [413] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [414] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 72,
    /* number_matcher_indices */ 18,
  },
  {
    /* [415] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 167,
    /* number_matcher_indices */ 12,
  },
  {
    /* [416] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [417] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [418] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 74,
    /* number_matcher_indices */ 18,
  },
  {
    /* [419] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [420] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [421] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [422] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 173,
    /* number_matcher_indices */ 18,
  },
  {
    /* [423] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [424] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [425] */
    /* usage */ ParameterUsage::kArrayIndex,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [426] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [427] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [428] */
    /* usage */ ParameterUsage::kY,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [429] */
    /* usage */ ParameterUsage::kZ,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [430] */
    /* usage */ ParameterUsage::kW,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [431] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [432] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [433] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [434] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [435] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [436] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [437] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [438] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [439] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [440] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [441] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [442] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [443] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [444] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [445] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [446] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [447] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [448] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [449] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [450] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [451] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [452] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [453] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [454] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [455] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [456] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [457] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [458] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [459] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [460] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [461] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [462] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [463] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [464] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [465] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [466] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [467] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [468] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [469] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [470] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [471] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [472] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [473] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [474] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [475] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [476] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [477] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [478] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [479] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [480] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [481] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [482] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [483] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [484] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [485] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [486] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [487] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [488] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [489] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [490] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [491] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [492] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [493] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [494] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [495] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [496] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [497] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [498] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [499] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [500] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [501] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 56,
    /* number_matcher_indices */ 18,
  },
  {
    /* [502] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [503] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [504] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [505] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [506] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [507] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 62,
    /* number_matcher_indices */ 18,
  },
  {
    /* [508] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [509] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [510] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 66,
    /* number_matcher_indices */ 18,
  },
  {
    /* [511] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [512] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [513] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [514] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [515] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [516] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [517] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [518] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 54,
    /* number_matcher_indices */ 18,
  },
  {
    /* [519] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 58,
    /* number_matcher_indices */ 18,
  },
  {
    /* [520] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [521] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [522] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 169,
    /* number_matcher_indices */ 18,
  },
  {
    /* [523] */
    /* usage */ ParameterUsage::kSampler,
    /* type_matcher_indices */ 170,
    /* number_matcher_indices */ 18,
  },
  {
    /* [524] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [525] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 165,
    /* number_matcher_indices */ 8,
  },
  {
    /* [526] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [527] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 28,
    /* number_matcher_indices */ 18,
  },
  {
    /* [528] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 166,
    /* number_matcher_indices */ 8,
  },
  {
    /* [529] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [530] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 28,
    /* number_matcher_indices */ 18,
  },
  {
    /* [531] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 168,
    /* number_matcher_indices */ 8,
  },
  {
    /* [532] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [533] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 28,
    /* number_matcher_indices */ 18,
  },
  {
    /* [534] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 165,
    /* number_matcher_indices */ 10,
  },
  {
    /* [535] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [536] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 72,
    /* number_matcher_indices */ 18,
  },
  {
    /* [537] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 166,
    /* number_matcher_indices */ 10,
  },
  {
    /* [538] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [539] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 72,
    /* number_matcher_indices */ 18,
  },
  {
    /* [540] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 168,
    /* number_matcher_indices */ 10,
  },
  {
    /* [541] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [542] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 72,
    /* number_matcher_indices */ 18,
  },
  {
    /* [543] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 165,
    /* number_matcher_indices */ 12,
  },
  {
    /* [544] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [545] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 74,
    /* number_matcher_indices */ 18,
  },
  {
    /* [546] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 166,
    /* number_matcher_indices */ 12,
  },
  {
    /* [547] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [548] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 74,
    /* number_matcher_indices */ 18,
  },
  {
    /* [549] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 168,
    /* number_matcher_indices */ 12,
  },
  {
    /* [550] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [551] */
    /* usage */ ParameterUsage::kValue,
    /* type_matcher_indices */ 74,
    /* number_matcher_indices */ 18,
  },
  {
    /* [552] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 32,
    /* number_matcher_indices */ 18,
  },
  {
    /* [553] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [554] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [555] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 34,
    /* number_matcher_indices */ 18,
  },
  {
    /* [556] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [557] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [558] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 40,
    /* number_matcher_indices */ 18,
  },
  {
    /* [559] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 78,
    /* number_matcher_indices */ 18,
  },
  {
    /* [560] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [561] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 48,
    /* number_matcher_indices */ 18,
  },
  {
    /* [562] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [563] */
    /* usage */ ParameterUsage::kSampleIndex,
    /* type_matcher_indices */ 171,
    /* number_matcher_indices */ 18,
  },
  {
    /* [564] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [565] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [566] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [567] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 164,
    /* number_matcher_indices */ 18,
  },
  {
    /* [568] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [569] */
    /* usage */ ParameterUsage::kSampleIndex,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [570] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [571] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [572] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [573] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [574] */
    /* usage */ ParameterUsage::kY,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [575] */
    /* usage */ ParameterUsage::kZ,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [576] */
    /* usage */ ParameterUsage::kXy,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [577] */
    /* usage */ ParameterUsage::kZ,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [578] */
    /* usage */ ParameterUsage::kW,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [579] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [580] */
    /* usage */ ParameterUsage::kYz,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [581] */
    /* usage */ ParameterUsage::kW,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [582] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [583] */
    /* usage */ ParameterUsage::kY,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [584] */
    /* usage */ ParameterUsage::kZw,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [585] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [586] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [587] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [588] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [589] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [590] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [591] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [592] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [593] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [594] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [595] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [596] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [597] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [598] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [599] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [600] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [601] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [602] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [603] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [604] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [605] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [606] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [607] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [608] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [609] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [610] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [611] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [612] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [613] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 20,
    /* number_matcher_indices */ 1,
  },
  {
    /* [614] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [615] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [616] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [617] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [618] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [619] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [620] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [621] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [622] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [623] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [624] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [625] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [626] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [627] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [628] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [629] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [630] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [631] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [632] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 32,
    /* number_matcher_indices */ 18,
  },
  {
    /* [633] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [634] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 34,
    /* number_matcher_indices */ 18,
  },
  {
    /* [635] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [636] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [637] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [638] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 40,
    /* number_matcher_indices */ 18,
  },
  {
    /* [639] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [640] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 44,
    /* number_matcher_indices */ 18,
  },
  {
    /* [641] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [642] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 46,
    /* number_matcher_indices */ 18,
  },
  {
    /* [643] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 21,
    /* number_matcher_indices */ 18,
  },
  {
    /* [644] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [645] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [646] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [647] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [648] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [649] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [650] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [651] */
    /* usage */ ParameterUsage::kLevel,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [652] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 169,
    /* number_matcher_indices */ 18,
  },
  {
    /* [653] */
    /* usage */ ParameterUsage::kCoords,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [654] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [655] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [656] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [657] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [658] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [659] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [660] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [661] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [662] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [663] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [664] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [665] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [666] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [667] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [668] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [669] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [670] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [671] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [672] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [673] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [674] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [675] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [676] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [677] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [678] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [679] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [680] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [681] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [682] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [683] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [684] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [685] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [686] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [687] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [688] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [689] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [690] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [691] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [692] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [693] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [694] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [695] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [696] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [697] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [698] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [699] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [700] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [701] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [702] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [703] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [704] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [705] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [706] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 3,
  },
  {
    /* [707] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [708] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 14,
  },
  {
    /* [709] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 3,
  },
  {
    /* [710] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [711] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [712] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [713] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [714] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [715] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [716] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [717] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [718] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [719] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [720] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [721] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [722] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [723] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [724] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [725] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [726] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [727] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [728] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [729] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [730] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [731] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [732] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [733] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [734] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [735] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [736] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [737] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [738] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [739] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [740] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [741] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [742] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [743] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [744] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [745] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [746] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [747] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [748] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [749] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [750] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [751] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [752] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [753] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [754] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [755] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [756] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [757] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [758] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [759] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [760] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [761] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [762] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [763] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [764] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [765] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [766] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [767] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [768] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [769] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [770] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [771] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [772] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [773] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [774] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [775] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [776] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [777] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 82,
    /* number_matcher_indices */ 1,
  },
  {
    /* [778] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [779] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [780] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [781] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 82,
    /* number_matcher_indices */ 1,
  },
  {
    /* [782] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [783] */
    /* usage */ ParameterUsage::kY,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [784] */
    /* usage */ ParameterUsage::kXy,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [785] */
    /* usage */ ParameterUsage::kZ,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [786] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [787] */
    /* usage */ ParameterUsage::kYz,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [788] */
    /* usage */ ParameterUsage::kXy,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [789] */
    /* usage */ ParameterUsage::kZw,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [790] */
    /* usage */ ParameterUsage::kXyz,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [791] */
    /* usage */ ParameterUsage::kW,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [792] */
    /* usage */ ParameterUsage::kX,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [793] */
    /* usage */ ParameterUsage::kZyw,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [794] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [795] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [796] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [797] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [798] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [799] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [800] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [801] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [802] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [803] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [804] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [805] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [806] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [807] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [808] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [809] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [810] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 0,
    /* number_matcher_indices */ 0,
  },
  {
    /* [811] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [812] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [813] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [814] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [815] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [816] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [817] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [818] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [819] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [820] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [821] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [822] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [823] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [824] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [825] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [826] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [827] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [828] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [829] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [830] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [831] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [832] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [833] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 1,
  },
  {
    /* [834] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [835] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [836] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [837] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [838] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [839] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [840] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [841] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [842] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [843] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [844] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [845] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [846] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [847] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [848] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [849] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [850] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [851] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [852] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [853] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [854] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [855] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [856] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [857] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [858] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [859] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [860] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [861] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [862] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [863] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [864] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [865] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [866] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [867] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [868] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [869] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [870] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [871] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [872] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [873] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [874] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [875] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [876] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [877] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [878] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [879] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 26,
    /* number_matcher_indices */ 18,
  },
  {
    /* [880] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 28,
    /* number_matcher_indices */ 18,
  },
  {
    /* [881] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 28,
    /* number_matcher_indices */ 18,
  },
  {
    /* [882] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [883] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 14,
    /* number_matcher_indices */ 1,
  },
  {
    /* [884] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [885] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [886] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [887] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [888] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [889] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [890] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [891] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [892] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [893] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [894] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [895] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [896] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [897] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [898] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [899] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [900] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [901] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [902] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [903] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [904] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 12,
    /* number_matcher_indices */ 2,
  },
  {
    /* [905] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [906] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [907] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [908] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [909] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [910] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [911] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [912] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 30,
    /* number_matcher_indices */ 6,
  },
  {
    /* [913] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 32,
    /* number_matcher_indices */ 18,
  },
  {
    /* [914] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 34,
    /* number_matcher_indices */ 18,
  },
  {
    /* [915] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [916] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 40,
    /* number_matcher_indices */ 18,
  },
  {
    /* [917] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 44,
    /* number_matcher_indices */ 18,
  },
  {
    /* [918] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 46,
    /* number_matcher_indices */ 18,
  },
  {
    /* [919] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 48,
    /* number_matcher_indices */ 18,
  },
  {
    /* [920] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [921] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [922] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [923] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [924] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 164,
    /* number_matcher_indices */ 18,
  },
  {
    /* [925] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 165,
    /* number_matcher_indices */ 2,
  },
  {
    /* [926] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 166,
    /* number_matcher_indices */ 2,
  },
  {
    /* [927] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 167,
    /* number_matcher_indices */ 2,
  },
  {
    /* [928] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 168,
    /* number_matcher_indices */ 2,
  },
  {
    /* [929] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 169,
    /* number_matcher_indices */ 18,
  },
  {
    /* [930] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [931] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 46,
    /* number_matcher_indices */ 18,
  },
  {
    /* [932] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [933] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [934] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 167,
    /* number_matcher_indices */ 2,
  },
  {
    /* [935] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 32,
    /* number_matcher_indices */ 18,
  },
  {
    /* [936] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 34,
    /* number_matcher_indices */ 18,
  },
  {
    /* [937] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 38,
    /* number_matcher_indices */ 18,
  },
  {
    /* [938] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 40,
    /* number_matcher_indices */ 18,
  },
  {
    /* [939] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 44,
    /* number_matcher_indices */ 18,
  },
  {
    /* [940] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 46,
    /* number_matcher_indices */ 18,
  },
  {
    /* [941] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 160,
    /* number_matcher_indices */ 18,
  },
  {
    /* [942] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 161,
    /* number_matcher_indices */ 18,
  },
  {
    /* [943] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 162,
    /* number_matcher_indices */ 18,
  },
  {
    /* [944] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 163,
    /* number_matcher_indices */ 18,
  },
  {
    /* [945] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 48,
    /* number_matcher_indices */ 18,
  },
  {
    /* [946] */
    /* usage */ ParameterUsage::kTexture,
    /* type_matcher_indices */ 164,
    /* number_matcher_indices */ 18,
  },
  {
    /* [947] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 3,
    /* number_matcher_indices */ 4,
  },
  {
    /* [948] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [949] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [950] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 8,
    /* number_matcher_indices */ 1,
  },
  {
    /* [951] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [952] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [953] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [954] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 6,
    /* number_matcher_indices */ 1,
  },
  {
    /* [955] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 53,
    /* number_matcher_indices */ 18,
  },
  {
    /* [956] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [957] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 37,
    /* number_matcher_indices */ 18,
  },
  {
    /* [958] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [959] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 15,
    /* number_matcher_indices */ 18,
  },
  {
    /* [960] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [961] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 87,
    /* number_matcher_indices */ 18,
  },
  {
    /* [962] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [963] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 9,
    /* number_matcher_indices */ 18,
  },
  {
    /* [964] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [965] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 70,
    /* number_matcher_indices */ 18,
  },
  {
    /* [966] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [967] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [968] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [969] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [970] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [971] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 76,
    /* number_matcher_indices */ 18,
  },
  {
    /* [972] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
  {
    /* [973] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [974] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 78,
    /* number_matcher_indices */ 18,
  },
  {
    /* [975] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 78,
    /* number_matcher_indices */ 18,
  },
  {
    /* [976] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 78,
    /* number_matcher_indices */ 18,
  },
  {
    /* [977] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 78,
    /* number_matcher_indices */ 18,
  },
  {
    /* [978] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 78,
    /* number_matcher_indices */ 18,
  },
  {
    /* [979] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 50,
    /* number_matcher_indices */ 18,
  },
  {
    /* [980] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 2,
    /* number_matcher_indices */ 18,
  },
  {
    /* [981] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 98,
    /* number_matcher_indices */ 18,
  },
  {
    /* [982] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 98,
    /* number_matcher_indices */ 18,
  },
  {
    /* [983] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 98,
    /* number_matcher_indices */ 18,
  },
  {
    /* [984] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 98,
    /* number_matcher_indices */ 18,
  },
  {
    /* [985] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 98,
    /* number_matcher_indices */ 18,
  },
  {
    /* [986] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 104,
    /* number_matcher_indices */ 18,
  },
  {
    /* [987] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 106,
    /* number_matcher_indices */ 18,
  },
  {
    /* [988] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 108,
    /* number_matcher_indices */ 18,
  },
  {
    /* [989] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 110,
    /* number_matcher_indices */ 18,
  },
  {
    /* [990] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 112,
    /* number_matcher_indices */ 18,
  },
  {
    /* [991] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 114,
    /* number_matcher_indices */ 18,
  },
  {
    /* [992] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 116,
    /* number_matcher_indices */ 18,
  },
  {
    /* [993] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 118,
    /* number_matcher_indices */ 18,
  },
  {
    /* [994] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 120,
    /* number_matcher_indices */ 18,
  },
  {
    /* [995] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 122,
    /* number_matcher_indices */ 18,
  },
  {
    /* [996] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 124,
    /* number_matcher_indices */ 18,
  },
  {
    /* [997] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 126,
    /* number_matcher_indices */ 18,
  },
  {
    /* [998] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 128,
    /* number_matcher_indices */ 18,
  },
  {
    /* [999] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 130,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1000] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 132,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1001] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 134,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1002] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 136,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1003] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 138,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1004] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 140,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1005] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 142,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1006] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 144,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1007] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 146,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1008] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 148,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1009] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 150,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1010] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 152,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1011] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 154,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1012] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 156,
    /* number_matcher_indices */ 18,
  },
  {
    /* [1013] */
    /* usage */ ParameterUsage::kNone,
    /* type_matcher_indices */ 10,
    /* number_matcher_indices */ 18,
  },
};

static_assert(ParameterIndex::CanIndex(kParameters),
              "ParameterIndex is not large enough to index kParameters");

constexpr TemplateTypeInfo kTemplateTypes[] = {
  {
    /* [0] */
    /* name */ "T",
    /* matcher_index */ 68,
  },
  {
    /* [1] */
    /* name */ "C",
    /* matcher_index */ 72,
  },
  {
    /* [2] */
    /* name */ "A",
    /* matcher_index */ 72,
  },
  {
    /* [3] */
    /* name */ "L",
    /* matcher_index */ 72,
  },
  {
    /* [4] */
    /* name */ "T",
    /* matcher_index */ 68,
  },
  {
    /* [5] */
    /* name */ "C",
    /* matcher_index */ 72,
  },
  {
    /* [6] */
    /* name */ "L",
    /* matcher_index */ 72,
  },
  {
    /* [7] */
    /* name */ "T",
    /* matcher_index */ 68,
  },
  {
    /* [8] */
    /* name */ "C",
    /* matcher_index */ 72,
  },
  {
    /* [9] */
    /* name */ "S",
    /* matcher_index */ 72,
  },
  {
    /* [10] */
    /* name */ "T",
    /* matcher_index */ 64,
  },
  {
    /* [11] */
    /* name */ "U",
    /* matcher_index */ 66,
  },
  {
    /* [12] */
    /* name */ "T",
    /* matcher_index */ 68,
  },
  {
    /* [13] */
    /* name */ "L",
    /* matcher_index */ 72,
  },
  {
    /* [14] */
    /* name */ "T",
    /* matcher_index */ 9,
  },
  {
    /* [15] */
    /* name */ "U",
    /* matcher_index */ 55,
  },
  {
    /* [16] */
    /* name */ "T",
    /* matcher_index */ 10,
  },
  {
    /* [17] */
    /* name */ "U",
    /* matcher_index */ 56,
  },
  {
    /* [18] */
    /* name */ "T",
    /* matcher_index */ 7,
  },
  {
    /* [19] */
    /* name */ "U",
    /* matcher_index */ 57,
  },
  {
    /* [20] */
    /* name */ "T",
    /* matcher_index */ 8,
  },
  {
    /* [21] */
    /* name */ "U",
    /* matcher_index */ 58,
  },
  {
    /* [22] */
    /* name */ "T",
    /* matcher_index */ 4,
  },
  {
    /* [23] */
    /* name */ "U",
    /* matcher_index */ 59,
  },
  {
    /* [24] */
    /* name */ "T",
    /* matcher_index */ 60,
  },
  {
    /* [25] */
    /* name */ "T",
    /* matcher_index */ TypeMatcherIndex::kInvalid,
  },
  {
    /* [26] */
    /* name */ "T",
    /* matcher_index */ 72,
  },
  {
    /* [27] */
    /* name */ "T",
    /* matcher_index */ 53,
  },
  {
    /* [28] */
    /* name */ "T",
    /* matcher_index */ 61,
  },
  {
    /* [29] */
    /* name */ "T",
    /* matcher_index */ 65,
  },
  {
    /* [30] */
    /* name */ "T",
    /* matcher_index */ 57,
  },
  {
    /* [31] */
    /* name */ "T",
    /* matcher_index */ 58,
  },
  {
    /* [32] */
    /* name */ "T",
    /* matcher_index */ 55,
  },
  {
    /* [33] */
    /* name */ "T",
    /* matcher_index */ 56,
  },
  {
    /* [34] */
    /* name */ "T",
    /* matcher_index */ 59,
  },
  {
    /* [35] */
    /* name */ "T",
    /* matcher_index */ 54,
  },
  {
    /* [36] */
    /* name */ "T",
    /* matcher_index */ 71,
  },
};

static_assert(TemplateTypeIndex::CanIndex(kTemplateTypes),
              "TemplateTypeIndex is not large enough to index kTemplateTypes");

constexpr TemplateNumberInfo kTemplateNumbers[] = {
  {
    /* [0] */
    /* name */ "K",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [1] */
    /* name */ "C",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [2] */
    /* name */ "R",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [3] */
    /* name */ "M",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [4] */
    /* name */ "N",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [5] */
    /* name */ "M",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [6] */
    /* name */ "F",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [7] */
    /* name */ "A",
    /* matcher_index */ 6,
  },
  {
    /* [8] */
    /* name */ "A",
    /* matcher_index */ NumberMatcherIndex::kInvalid,
  },
  {
    /* [9] */
    /* name */ "S",
    /* matcher_index */ 9,
  },
};

static_assert(TemplateNumberIndex::CanIndex(kTemplateNumbers),
              "TemplateNumberIndex is not large enough to index kTemplateNumbers");

constexpr OverloadInfo kOverloads[] = {
  {
    /* [0] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 913,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [1] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 12,
    /* template_numbers */ 10,
    /* parameters */ 632,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [2] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 914,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [3] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 12,
    /* template_numbers */ 10,
    /* parameters */ 634,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [4] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 915,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [5] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 12,
    /* template_numbers */ 10,
    /* parameters */ 636,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [6] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 916,
    /* return_type_matcher_indices */ 42,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [7] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 12,
    /* template_numbers */ 10,
    /* parameters */ 638,
    /* return_type_matcher_indices */ 42,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [8] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 917,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [9] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 12,
    /* template_numbers */ 10,
    /* parameters */ 640,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [10] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 918,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [11] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 12,
    /* template_numbers */ 10,
    /* parameters */ 642,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [12] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 919,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [13] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 920,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [14] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 644,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [15] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 921,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [16] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 646,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [17] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 922,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [18] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 648,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [19] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 923,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [20] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 650,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [21] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 924,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [22] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 2,
    /* template_types */ 37,
    /* template_numbers */ 6,
    /* parameters */ 925,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [23] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 2,
    /* template_types */ 37,
    /* template_numbers */ 6,
    /* parameters */ 926,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [24] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 2,
    /* template_types */ 37,
    /* template_numbers */ 6,
    /* parameters */ 927,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [25] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 2,
    /* template_types */ 37,
    /* template_numbers */ 6,
    /* parameters */ 928,
    /* return_type_matcher_indices */ 42,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [26] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 929,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [27] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 96,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [28] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 35,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [29] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 979,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [30] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 980,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecSplat,
  },
  {
    /* [31] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 427,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitS,
  },
  {
    /* [32] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 576,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [33] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 579,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [34] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 582,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [35] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 788,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [36] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 790,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [37] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 792,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [38] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 981,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [39] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 982,
    /* return_type_matcher_indices */ 100,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [40] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 18,
    /* template_numbers */ 10,
    /* parameters */ 983,
    /* return_type_matcher_indices */ 72,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [41] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 20,
    /* template_numbers */ 10,
    /* parameters */ 984,
    /* return_type_matcher_indices */ 74,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [42] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 22,
    /* template_numbers */ 10,
    /* parameters */ 985,
    /* return_type_matcher_indices */ 102,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [43] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 501,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [44] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 504,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [45] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 331,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [46] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 335,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [47] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 185,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [48] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 507,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [49] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 339,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [50] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 510,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [51] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 343,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [52] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 513,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [53] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 347,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [54] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 351,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [55] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 190,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [56] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 516,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [57] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 355,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [58] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 387,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [59] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 260,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [60] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 265,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [61] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 126,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [62] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 391,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [63] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 270,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [64] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 395,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [65] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 275,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [66] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 399,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [67] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 280,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [68] */
    /* num_parameters */ 5,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 285,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [69] */
    /* num_parameters */ 6,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 132,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [70] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 3,
    /* template_numbers */ 10,
    /* parameters */ 403,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [71] */
    /* num_parameters */ 5,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 290,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [72] */
    /* num_parameters */ 4,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 303,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [73] */
    /* num_parameters */ 5,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 150,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [74] */
    /* num_parameters */ 5,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 155,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [75] */
    /* num_parameters */ 6,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 72,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [76] */
    /* num_parameters */ 4,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 307,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [77] */
    /* num_parameters */ 5,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 160,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [78] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 495,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [79] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 311,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [80] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 315,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [81] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 165,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [82] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 498,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [83] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 319,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [84] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 525,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [85] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 528,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [86] */
    /* num_parameters */ 4,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 407,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [87] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 531,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [88] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 534,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [89] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 537,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [90] */
    /* num_parameters */ 4,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 411,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [91] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 540,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [92] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 543,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [93] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 546,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [94] */
    /* num_parameters */ 4,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 415,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [95] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 549,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [96] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 90,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [97] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 35,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [98] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 972,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [99] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 973,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecSplat,
  },
  {
    /* [100] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 573,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitS,
  },
  {
    /* [101] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 784,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [102] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 786,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitM,
  },
  {
    /* [103] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 974,
    /* return_type_matcher_indices */ 54,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [104] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 975,
    /* return_type_matcher_indices */ 92,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [105] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 18,
    /* template_numbers */ 10,
    /* parameters */ 976,
    /* return_type_matcher_indices */ 64,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [106] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 20,
    /* template_numbers */ 10,
    /* parameters */ 977,
    /* return_type_matcher_indices */ 42,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [107] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 22,
    /* template_numbers */ 10,
    /* parameters */ 978,
    /* return_type_matcher_indices */ 94,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [108] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 935,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [109] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 936,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [110] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 937,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [111] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 938,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [112] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 939,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [113] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 940,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [114] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 941,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [115] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 942,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [116] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 943,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [117] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 944,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [118] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 84,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [119] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 35,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 70,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [120] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 965,
    /* return_type_matcher_indices */ 70,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [121] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 966,
    /* return_type_matcher_indices */ 70,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecSplat,
  },
  {
    /* [122] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 782,
    /* return_type_matcher_indices */ 70,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::VecInitS,
  },
  {
    /* [123] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 967,
    /* return_type_matcher_indices */ 26,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [124] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 968,
    /* return_type_matcher_indices */ 86,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [125] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 18,
    /* template_numbers */ 10,
    /* parameters */ 969,
    /* return_type_matcher_indices */ 52,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [126] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 20,
    /* template_numbers */ 10,
    /* parameters */ 970,
    /* return_type_matcher_indices */ 36,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [127] */
    /* num_parameters */ 1,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 22,
    /* template_numbers */ 10,
    /* parameters */ 971,
    /* return_type_matcher_indices */ 88,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [128] */
    /* num_parameters */ 3,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 4,
    /* template_numbers */ 10,
    /* parameters */ 552,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [129] */
    /* num_parameters */ 3,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 4,
    /* template_numbers */ 10,
    /* parameters */ 555,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [130] */
    /* num_parameters */ 4,
    /* num_template_types */ 4,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 419,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [131] */
    /* num_parameters */ 3,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 4,
    /* template_numbers */ 10,
    /* parameters */ 558,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [132] */
    /* num_parameters */ 3,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 7,
    /* template_numbers */ 10,
    /* parameters */ 561,
    /* return_type_matcher_indices */ 50,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [133] */
    /* num_parameters */ 3,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 5,
    /* template_numbers */ 10,
    /* parameters */ 564,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [134] */
    /* num_parameters */ 4,
    /* num_template_types */ 3,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 423,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [135] */
    /* num_parameters */ 3,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 8,
    /* template_numbers */ 10,
    /* parameters */ 567,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [136] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 1,
    /* template_numbers */ 10,
    /* parameters */ 652,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [137] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 692,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiply,
  },
  {
    /* [138] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 694,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiply,
  },
  {
    /* [139] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 696,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiply,
  },
  {
    /* [140] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 698,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiply,
  },
  {
    /* [141] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 700,
    /* return_type_matcher_indices */ 12,
    /* return_number_matcher_indices */ 2,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiply,
  },
  {
    /* [142] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 702,
    /* return_type_matcher_indices */ 12,
    /* return_number_matcher_indices */ 2,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiply,
  },
  {
    /* [143] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 1,
    /* parameters */ 704,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 3,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiplyMatVec,
  },
  {
    /* [144] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 1,
    /* parameters */ 706,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiplyVecMat,
  },
  {
    /* [145] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 3,
    /* template_types */ 10,
    /* template_numbers */ 0,
    /* parameters */ 708,
    /* return_type_matcher_indices */ 12,
    /* return_number_matcher_indices */ 16,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMultiplyMatMat,
  },
  {
    /* [146] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 359,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [147] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 195,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [148] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 200,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [149] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 84,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [150] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 363,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [151] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 205,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [152] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 367,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [153] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 210,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [154] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 245,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [155] */
    /* num_parameters */ 6,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 102,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [156] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 108,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [157] */
    /* num_parameters */ 7,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 65,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [158] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 250,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [159] */
    /* num_parameters */ 6,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 114,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [160] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 255,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [161] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 120,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [162] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 323,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [163] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 170,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [164] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 175,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [165] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 78,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [166] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 327,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [167] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 180,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [168] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 371,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [169] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 215,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [170] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 220,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [171] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 90,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [172] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 375,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [173] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 225,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [174] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 379,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [175] */
    /* num_parameters */ 5,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 230,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [176] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 235,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [177] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 96,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [178] */
    /* num_parameters */ 4,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 383,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [179] */
    /* num_parameters */ 5,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 2,
    /* template_numbers */ 10,
    /* parameters */ 240,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [180] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 104,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [181] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 986,
    /* return_type_matcher_indices */ 104,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [182] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 431,
    /* return_type_matcher_indices */ 104,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [183] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 794,
    /* return_type_matcher_indices */ 104,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [184] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 987,
    /* return_type_matcher_indices */ 108,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [185] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 988,
    /* return_type_matcher_indices */ 106,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [186] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 110,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [187] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 989,
    /* return_type_matcher_indices */ 110,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [188] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 138,
    /* return_type_matcher_indices */ 110,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [189] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 796,
    /* return_type_matcher_indices */ 110,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [190] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 990,
    /* return_type_matcher_indices */ 114,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [191] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 991,
    /* return_type_matcher_indices */ 112,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [192] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 116,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [193] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 992,
    /* return_type_matcher_indices */ 116,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [194] */
    /* num_parameters */ 8,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 49,
    /* return_type_matcher_indices */ 116,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [195] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 798,
    /* return_type_matcher_indices */ 116,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [196] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 993,
    /* return_type_matcher_indices */ 120,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [197] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 994,
    /* return_type_matcher_indices */ 118,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [198] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 122,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [199] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 995,
    /* return_type_matcher_indices */ 122,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [200] */
    /* num_parameters */ 6,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 144,
    /* return_type_matcher_indices */ 122,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [201] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 585,
    /* return_type_matcher_indices */ 122,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [202] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 996,
    /* return_type_matcher_indices */ 126,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [203] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 997,
    /* return_type_matcher_indices */ 124,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [204] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 128,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [205] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 998,
    /* return_type_matcher_indices */ 128,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [206] */
    /* num_parameters */ 9,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 40,
    /* return_type_matcher_indices */ 128,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [207] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 588,
    /* return_type_matcher_indices */ 128,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [208] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 999,
    /* return_type_matcher_indices */ 132,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [209] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 1000,
    /* return_type_matcher_indices */ 130,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [210] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 134,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [211] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1001,
    /* return_type_matcher_indices */ 134,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [212] */
    /* num_parameters */ 12,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 16,
    /* return_type_matcher_indices */ 134,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [213] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 591,
    /* return_type_matcher_indices */ 134,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [214] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 1002,
    /* return_type_matcher_indices */ 138,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [215] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 1003,
    /* return_type_matcher_indices */ 136,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [216] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 140,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [217] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1004,
    /* return_type_matcher_indices */ 140,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [218] */
    /* num_parameters */ 8,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 57,
    /* return_type_matcher_indices */ 140,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [219] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 435,
    /* return_type_matcher_indices */ 140,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [220] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 1005,
    /* return_type_matcher_indices */ 144,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [221] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 1006,
    /* return_type_matcher_indices */ 142,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [222] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 146,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [223] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1007,
    /* return_type_matcher_indices */ 146,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [224] */
    /* num_parameters */ 12,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 28,
    /* return_type_matcher_indices */ 146,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [225] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 439,
    /* return_type_matcher_indices */ 146,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [226] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 1008,
    /* return_type_matcher_indices */ 150,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [227] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 1009,
    /* return_type_matcher_indices */ 148,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [228] */
    /* num_parameters */ 0,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 152,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [229] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 36,
    /* template_numbers */ 10,
    /* parameters */ 1010,
    /* return_type_matcher_indices */ 152,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [230] */
    /* num_parameters */ 16,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 0,
    /* return_type_matcher_indices */ 152,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitS,
  },
  {
    /* [231] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 443,
    /* return_type_matcher_indices */ 152,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::MatInitV,
  },
  {
    /* [232] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 16,
    /* template_numbers */ 10,
    /* parameters */ 1011,
    /* return_type_matcher_indices */ 156,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [233] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 14,
    /* template_numbers */ 10,
    /* parameters */ 1012,
    /* return_type_matcher_indices */ 154,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [234] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 930,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [235] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 931,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [236] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 932,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [237] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 933,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [238] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 2,
    /* template_types */ 37,
    /* template_numbers */ 6,
    /* parameters */ 934,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [239] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 672,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpPlus,
  },
  {
    /* [240] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 674,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpPlus,
  },
  {
    /* [241] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 676,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpPlus,
  },
  {
    /* [242] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 678,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpPlus,
  },
  {
    /* [243] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 680,
    /* return_type_matcher_indices */ 12,
    /* return_number_matcher_indices */ 2,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpPlus,
  },
  {
    /* [244] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 682,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMinus,
  },
  {
    /* [245] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 684,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMinus,
  },
  {
    /* [246] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 686,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMinus,
  },
  {
    /* [247] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 688,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMinus,
  },
  {
    /* [248] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 690,
    /* return_type_matcher_indices */ 12,
    /* return_number_matcher_indices */ 2,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpMinus,
  },
  {
    /* [249] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 710,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpDivide,
  },
  {
    /* [250] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 712,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpDivide,
  },
  {
    /* [251] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 714,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpDivide,
  },
  {
    /* [252] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 716,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpDivide,
  },
  {
    /* [253] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 718,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpModulo,
  },
  {
    /* [254] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 720,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpModulo,
  },
  {
    /* [255] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 722,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpModulo,
  },
  {
    /* [256] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 724,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpModulo,
  },
  {
    /* [257] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 730,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpAnd,
  },
  {
    /* [258] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 732,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpAnd,
  },
  {
    /* [259] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 29,
    /* template_numbers */ 10,
    /* parameters */ 734,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpAnd,
  },
  {
    /* [260] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 29,
    /* template_numbers */ 4,
    /* parameters */ 736,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpAnd,
  },
  {
    /* [261] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 738,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpOr,
  },
  {
    /* [262] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 740,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpOr,
  },
  {
    /* [263] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 29,
    /* template_numbers */ 10,
    /* parameters */ 742,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpOr,
  },
  {
    /* [264] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 29,
    /* template_numbers */ 4,
    /* parameters */ 744,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpOr,
  },
  {
    /* [265] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 468,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::mix,
  },
  {
    /* [266] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 471,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::mix,
  },
  {
    /* [267] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 474,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::mix,
  },
  {
    /* [268] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 480,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::select_bool,
  },
  {
    /* [269] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 27,
    /* template_numbers */ 4,
    /* parameters */ 483,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::select_bool,
  },
  {
    /* [270] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 27,
    /* template_numbers */ 4,
    /* parameters */ 486,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::select_boolvec,
  },
  {
    /* [271] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 53,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [272] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 955,
    /* return_type_matcher_indices */ 53,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [273] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 30,
    /* template_numbers */ 10,
    /* parameters */ 956,
    /* return_type_matcher_indices */ 53,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [274] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [275] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 957,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [276] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 31,
    /* template_numbers */ 10,
    /* parameters */ 958,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [277] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [278] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 959,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [279] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 32,
    /* template_numbers */ 10,
    /* parameters */ 960,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [280] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 87,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [281] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 961,
    /* return_type_matcher_indices */ 87,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [282] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 33,
    /* template_numbers */ 10,
    /* parameters */ 962,
    /* return_type_matcher_indices */ 87,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [283] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Zero,
  },
  {
    /* [284] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 963,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConstructor, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [285] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 34,
    /* template_numbers */ 10,
    /* parameters */ 964,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
  {
    /* [286] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 800,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::abs,
  },
  {
    /* [287] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 801,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::abs,
  },
  {
    /* [288] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 802,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::acos,
  },
  {
    /* [289] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 803,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::acos,
  },
  {
    /* [290] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 804,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::acosh,
  },
  {
    /* [291] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 805,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::acosh,
  },
  {
    /* [292] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 806,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::all,
  },
  {
    /* [293] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 807,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::all,
  },
  {
    /* [294] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 808,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::any,
  },
  {
    /* [295] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 809,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::any,
  },
  {
    /* [296] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 811,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::asin,
  },
  {
    /* [297] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 812,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::asin,
  },
  {
    /* [298] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 813,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::asinh,
  },
  {
    /* [299] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 814,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::asinh,
  },
  {
    /* [300] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 815,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::atan,
  },
  {
    /* [301] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 816,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::atan,
  },
  {
    /* [302] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 594,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::atan2,
  },
  {
    /* [303] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 596,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::atan2,
  },
  {
    /* [304] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 817,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::atanh,
  },
  {
    /* [305] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 818,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::atanh,
  },
  {
    /* [306] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 819,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::ceil,
  },
  {
    /* [307] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 820,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::ceil,
  },
  {
    /* [308] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 447,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::clamp,
  },
  {
    /* [309] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 450,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::clamp,
  },
  {
    /* [310] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 821,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::cos,
  },
  {
    /* [311] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 822,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::cos,
  },
  {
    /* [312] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 823,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::cosh,
  },
  {
    /* [313] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 824,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::cosh,
  },
  {
    /* [314] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 825,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::countLeadingZeros,
  },
  {
    /* [315] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 826,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::countLeadingZeros,
  },
  {
    /* [316] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 827,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::countOneBits,
  },
  {
    /* [317] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 828,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::countOneBits,
  },
  {
    /* [318] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 829,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::countTrailingZeros,
  },
  {
    /* [319] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 830,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::countTrailingZeros,
  },
  {
    /* [320] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 831,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::degrees,
  },
  {
    /* [321] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 832,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::degrees,
  },
  {
    /* [322] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 600,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::distance,
  },
  {
    /* [323] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 602,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::distance,
  },
  {
    /* [324] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 834,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [325] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 835,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [326] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 836,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [327] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 837,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [328] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 838,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [329] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 839,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [330] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 840,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [331] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 841,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [332] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 842,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [333] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 843,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [334] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 844,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [335] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 845,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [336] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 846,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::exp,
  },
  {
    /* [337] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 847,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::exp,
  },
  {
    /* [338] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 848,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::exp2,
  },
  {
    /* [339] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 849,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::exp2,
  },
  {
    /* [340] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 453,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::extractBits,
  },
  {
    /* [341] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 456,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::extractBits,
  },
  {
    /* [342] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 850,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::firstLeadingBit,
  },
  {
    /* [343] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 851,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::firstLeadingBit,
  },
  {
    /* [344] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 852,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::firstTrailingBit,
  },
  {
    /* [345] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 853,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::firstTrailingBit,
  },
  {
    /* [346] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 854,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::floor,
  },
  {
    /* [347] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 855,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::floor,
  },
  {
    /* [348] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 462,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::fma,
  },
  {
    /* [349] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 465,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::fma,
  },
  {
    /* [350] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 856,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::fract,
  },
  {
    /* [351] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 857,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::fract,
  },
  {
    /* [352] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 858,
    /* return_type_matcher_indices */ 16,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::frexp,
  },
  {
    /* [353] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 859,
    /* return_type_matcher_indices */ 18,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::frexp,
  },
  {
    /* [354] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 860,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [355] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 861,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [356] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 862,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [357] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 863,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [358] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 864,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [359] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 865,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [360] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 295,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::insertBits,
  },
  {
    /* [361] */
    /* num_parameters */ 4,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 299,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::insertBits,
  },
  {
    /* [362] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 866,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::inverseSqrt,
  },
  {
    /* [363] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 867,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::inverseSqrt,
  },
  {
    /* [364] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 610,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::ldexp,
  },
  {
    /* [365] */
    /* num_parameters */ 2,
    /* num_template_types */ 2,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 612,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::ldexp,
  },
  {
    /* [366] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 868,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::length,
  },
  {
    /* [367] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 869,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::length,
  },
  {
    /* [368] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 870,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::log,
  },
  {
    /* [369] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 871,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::log,
  },
  {
    /* [370] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 872,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::log2,
  },
  {
    /* [371] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 873,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::log2,
  },
  {
    /* [372] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 614,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::max,
  },
  {
    /* [373] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 616,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::max,
  },
  {
    /* [374] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 618,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::min,
  },
  {
    /* [375] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 620,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::min,
  },
  {
    /* [376] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 874,
    /* return_type_matcher_indices */ 22,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::modf,
  },
  {
    /* [377] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 875,
    /* return_type_matcher_indices */ 24,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::modf,
  },
  {
    /* [378] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 622,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pow,
  },
  {
    /* [379] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 624,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pow,
  },
  {
    /* [380] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 882,
    /* return_type_matcher_indices */ 15,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::quantizeToF16,
  },
  {
    /* [381] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 883,
    /* return_type_matcher_indices */ 14,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::quantizeToF16,
  },
  {
    /* [382] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 884,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::radians,
  },
  {
    /* [383] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 885,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::radians,
  },
  {
    /* [384] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 26,
    /* template_numbers */ 10,
    /* parameters */ 886,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::reverseBits,
  },
  {
    /* [385] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 4,
    /* parameters */ 887,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::reverseBits,
  },
  {
    /* [386] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 888,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::round,
  },
  {
    /* [387] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 889,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::round,
  },
  {
    /* [388] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 890,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::saturate,
  },
  {
    /* [389] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 891,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::saturate,
  },
  {
    /* [390] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 28,
    /* template_numbers */ 10,
    /* parameters */ 892,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sign,
  },
  {
    /* [391] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 28,
    /* template_numbers */ 4,
    /* parameters */ 893,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sign,
  },
  {
    /* [392] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 894,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sin,
  },
  {
    /* [393] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 895,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sin,
  },
  {
    /* [394] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 896,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sinh,
  },
  {
    /* [395] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 897,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sinh,
  },
  {
    /* [396] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 489,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::smoothstep,
  },
  {
    /* [397] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 492,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::smoothstep,
  },
  {
    /* [398] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 898,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sqrt,
  },
  {
    /* [399] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 899,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::sqrt,
  },
  {
    /* [400] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 628,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::step,
  },
  {
    /* [401] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 630,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::step,
  },
  {
    /* [402] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 900,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::tan,
  },
  {
    /* [403] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 901,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::tan,
  },
  {
    /* [404] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 902,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::tanh,
  },
  {
    /* [405] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 903,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::tanh,
  },
  {
    /* [406] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 905,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::trunc,
  },
  {
    /* [407] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 906,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::trunc,
  },
  {
    /* [408] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 0,
    /* template_numbers */ 10,
    /* parameters */ 945,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [409] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 946,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [410] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 519,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [411] */
    /* num_parameters */ 3,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 522,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [412] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 949,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpNot,
  },
  {
    /* [413] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 1,
    /* template_types */ 37,
    /* template_numbers */ 4,
    /* parameters */ 950,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpNot,
  },
  {
    /* [414] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 29,
    /* template_numbers */ 10,
    /* parameters */ 951,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpComplement,
  },
  {
    /* [415] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 29,
    /* template_numbers */ 4,
    /* parameters */ 952,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpComplement,
  },
  {
    /* [416] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 28,
    /* template_numbers */ 10,
    /* parameters */ 953,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpUnaryMinus,
  },
  {
    /* [417] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 28,
    /* template_numbers */ 4,
    /* parameters */ 954,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpUnaryMinus,
  },
  {
    /* [418] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 29,
    /* template_numbers */ 10,
    /* parameters */ 726,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpXor,
  },
  {
    /* [419] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 29,
    /* template_numbers */ 4,
    /* parameters */ 728,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpXor,
  },
  {
    /* [420] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 750,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpEqual,
  },
  {
    /* [421] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 27,
    /* template_numbers */ 4,
    /* parameters */ 752,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpEqual,
  },
  {
    /* [422] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 27,
    /* template_numbers */ 10,
    /* parameters */ 754,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpNotEqual,
  },
  {
    /* [423] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 27,
    /* template_numbers */ 4,
    /* parameters */ 756,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpNotEqual,
  },
  {
    /* [424] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 758,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpLessThan,
  },
  {
    /* [425] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 760,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpLessThan,
  },
  {
    /* [426] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 762,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpGreaterThan,
  },
  {
    /* [427] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 764,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpGreaterThan,
  },
  {
    /* [428] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 766,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpLessThanEqual,
  },
  {
    /* [429] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 768,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpLessThanEqual,
  },
  {
    /* [430] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 24,
    /* template_numbers */ 10,
    /* parameters */ 770,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpGreaterThanEqual,
  },
  {
    /* [431] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 772,
    /* return_type_matcher_indices */ 8,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpGreaterThanEqual,
  },
  {
    /* [432] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 29,
    /* template_numbers */ 10,
    /* parameters */ 774,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpShiftLeft,
  },
  {
    /* [433] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 29,
    /* template_numbers */ 4,
    /* parameters */ 776,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpShiftLeft,
  },
  {
    /* [434] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 29,
    /* template_numbers */ 10,
    /* parameters */ 778,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpShiftRight,
  },
  {
    /* [435] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 29,
    /* template_numbers */ 4,
    /* parameters */ 780,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpShiftRight,
  },
  {
    /* [436] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 25,
    /* template_numbers */ 8,
    /* parameters */ 810,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [437] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 10,
    /* template_numbers */ 10,
    /* parameters */ 598,
    /* return_type_matcher_indices */ 10,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::cross,
  },
  {
    /* [438] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 833,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::determinant,
  },
  {
    /* [439] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 24,
    /* template_numbers */ 4,
    /* parameters */ 604,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::dot,
  },
  {
    /* [440] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 606,
    /* return_type_matcher_indices */ 53,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [441] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 608,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [442] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 459,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::faceForward,
  },
  {
    /* [443] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 876,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::normalize,
  },
  {
    /* [444] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 877,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pack2x16float,
  },
  {
    /* [445] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 878,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pack2x16snorm,
  },
  {
    /* [446] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 879,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pack2x16unorm,
  },
  {
    /* [447] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 880,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pack4x8snorm,
  },
  {
    /* [448] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 881,
    /* return_type_matcher_indices */ 37,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::pack4x8unorm,
  },
  {
    /* [449] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 626,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::reflect,
  },
  {
    /* [450] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 10,
    /* template_numbers */ 4,
    /* parameters */ 477,
    /* return_type_matcher_indices */ 6,
    /* return_number_matcher_indices */ 1,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::refract,
  },
  {
    /* [451] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [452] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 2,
    /* template_types */ 10,
    /* template_numbers */ 3,
    /* parameters */ 904,
    /* return_type_matcher_indices */ 12,
    /* return_number_matcher_indices */ 3,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::transpose,
  },
  {
    /* [453] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 907,
    /* return_type_matcher_indices */ 26,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::unpack2x16float,
  },
  {
    /* [454] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 908,
    /* return_type_matcher_indices */ 26,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::unpack2x16snorm,
  },
  {
    /* [455] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 909,
    /* return_type_matcher_indices */ 26,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::unpack2x16unorm,
  },
  {
    /* [456] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 910,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::unpack4x8snorm,
  },
  {
    /* [457] */
    /* num_parameters */ 1,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 911,
    /* return_type_matcher_indices */ 28,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::unpack4x8unorm,
  },
  {
    /* [458] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [459] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 25,
    /* template_numbers */ 10,
    /* parameters */ 912,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [460] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 947,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [461] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 654,
    /* return_type_matcher_indices */ TypeMatcherIndicesIndex::kInvalid,
    /* return_number_matcher_indices */ NumberMatcherIndicesIndex::kInvalid,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [462] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 656,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [463] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 658,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [464] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 660,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [465] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 662,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [466] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 664,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [467] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 666,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [468] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 668,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [469] */
    /* num_parameters */ 2,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 670,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [470] */
    /* num_parameters */ 3,
    /* num_template_types */ 1,
    /* num_template_numbers */ 1,
    /* template_types */ 26,
    /* template_numbers */ 9,
    /* parameters */ 570,
    /* return_type_matcher_indices */ 80,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ nullptr,
  },
  {
    /* [471] */
    /* num_parameters */ 0,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 1014,
    /* return_type_matcher_indices */ 74,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ nullptr,
  },
  {
    /* [472] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 25,
    /* template_numbers */ 10,
    /* parameters */ 948,
    /* return_type_matcher_indices */ 2,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsBuiltin, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline),
    /* const eval */ &constant::Eval::Identity,
  },
  {
    /* [473] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 746,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpLogicalAnd,
  },
  {
    /* [474] */
    /* num_parameters */ 2,
    /* num_template_types */ 0,
    /* num_template_numbers */ 0,
    /* template_types */ 37,
    /* template_numbers */ 10,
    /* parameters */ 748,
    /* return_type_matcher_indices */ 9,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsOperator, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::OpLogicalOr,
  },
  {
    /* [475] */
    /* num_parameters */ 1,
    /* num_template_types */ 1,
    /* num_template_numbers */ 0,
    /* template_types */ 35,
    /* template_numbers */ 10,
    /* parameters */ 1013,
    /* return_type_matcher_indices */ 158,
    /* return_number_matcher_indices */ 18,
    /* flags */ OverloadFlags(OverloadFlag::kIsConverter, OverloadFlag::kSupportsVertexPipeline, OverloadFlag::kSupportsFragmentPipeline, OverloadFlag::kSupportsComputePipeline, OverloadFlag::kMustUse),
    /* const eval */ &constant::Eval::Conv,
  },
};

constexpr IntrinsicInfo kBuiltins[] = {
  {
    /* [0] */
    /* fn abs<T : fia_fiu32_f16>(T) -> T */
    /* fn abs<N : num, T : fia_fiu32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[286],
  },
  {
    /* [1] */
    /* fn acos<T : fa_f32_f16>(@test_value(0.96891242171) T) -> T */
    /* fn acos<N : num, T : fa_f32_f16>(@test_value(0.96891242171) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[288],
  },
  {
    /* [2] */
    /* fn acosh<T : fa_f32_f16>(@test_value(1.5430806348) T) -> T */
    /* fn acosh<N : num, T : fa_f32_f16>(@test_value(1.5430806348) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[290],
  },
  {
    /* [3] */
    /* fn all(bool) -> bool */
    /* fn all<N : num>(vec<N, bool>) -> bool */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[292],
  },
  {
    /* [4] */
    /* fn any(bool) -> bool */
    /* fn any<N : num>(vec<N, bool>) -> bool */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[294],
  },
  {
    /* [5] */
    /* fn arrayLength<T, A : access>(ptr<storage, array<T>, A>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[436],
  },
  {
    /* [6] */
    /* fn asin<T : fa_f32_f16>(@test_value(0.479425538604) T) -> T */
    /* fn asin<N : num, T : fa_f32_f16>(@test_value(0.479425538604) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[296],
  },
  {
    /* [7] */
    /* fn asinh<T : fa_f32_f16>(T) -> T */
    /* fn asinh<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[298],
  },
  {
    /* [8] */
    /* fn atan<T : fa_f32_f16>(T) -> T */
    /* fn atan<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[300],
  },
  {
    /* [9] */
    /* fn atan2<T : fa_f32_f16>(T, T) -> T */
    /* fn atan2<T : fa_f32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[302],
  },
  {
    /* [10] */
    /* fn atanh<T : fa_f32_f16>(@test_value(0.5) T) -> T */
    /* fn atanh<N : num, T : fa_f32_f16>(@test_value(0.5) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[304],
  },
  {
    /* [11] */
    /* fn ceil<T : fa_f32_f16>(@test_value(1.5) T) -> T */
    /* fn ceil<N : num, T : fa_f32_f16>(@test_value(1.5) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[306],
  },
  {
    /* [12] */
    /* fn clamp<T : fia_fiu32_f16>(T, T, T) -> T */
    /* fn clamp<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[308],
  },
  {
    /* [13] */
    /* fn cos<T : fa_f32_f16>(@test_value(0) T) -> T */
    /* fn cos<N : num, T : fa_f32_f16>(@test_value(0) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[310],
  },
  {
    /* [14] */
    /* fn cosh<T : fa_f32_f16>(@test_value(0) T) -> T */
    /* fn cosh<N : num, T : fa_f32_f16>(@test_value(0) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[312],
  },
  {
    /* [15] */
    /* fn countLeadingZeros<T : iu32>(T) -> T */
    /* fn countLeadingZeros<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[314],
  },
  {
    /* [16] */
    /* fn countOneBits<T : iu32>(T) -> T */
    /* fn countOneBits<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[316],
  },
  {
    /* [17] */
    /* fn countTrailingZeros<T : iu32>(T) -> T */
    /* fn countTrailingZeros<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[318],
  },
  {
    /* [18] */
    /* fn cross<T : fa_f32_f16>(vec3<T>, vec3<T>) -> vec3<T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[437],
  },
  {
    /* [19] */
    /* fn degrees<T : fa_f32_f16>(T) -> T */
    /* fn degrees<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[320],
  },
  {
    /* [20] */
    /* fn determinant<N : num, T : fa_f32_f16>(mat<N, N, T>) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[438],
  },
  {
    /* [21] */
    /* fn distance<T : fa_f32_f16>(T, T) -> T */
    /* fn distance<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>) -> T */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[322],
  },
  {
    /* [22] */
    /* fn dot<N : num, T : fia_fiu32_f16>(vec<N, T>, vec<N, T>) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[439],
  },
  {
    /* [23] */
    /* fn dot4I8Packed(u32, u32) -> i32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[440],
  },
  {
    /* [24] */
    /* fn dot4U8Packed(u32, u32) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[441],
  },
  {
    /* [25] */
    /* fn dpdx(f32) -> f32 */
    /* fn dpdx<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[324],
  },
  {
    /* [26] */
    /* fn dpdxCoarse(f32) -> f32 */
    /* fn dpdxCoarse<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[326],
  },
  {
    /* [27] */
    /* fn dpdxFine(f32) -> f32 */
    /* fn dpdxFine<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[328],
  },
  {
    /* [28] */
    /* fn dpdy(f32) -> f32 */
    /* fn dpdy<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[330],
  },
  {
    /* [29] */
    /* fn dpdyCoarse(f32) -> f32 */
    /* fn dpdyCoarse<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[332],
  },
  {
    /* [30] */
    /* fn dpdyFine(f32) -> f32 */
    /* fn dpdyFine<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[334],
  },
  {
    /* [31] */
    /* fn exp<T : fa_f32_f16>(T) -> T */
    /* fn exp<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[336],
  },
  {
    /* [32] */
    /* fn exp2<T : fa_f32_f16>(T) -> T */
    /* fn exp2<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[338],
  },
  {
    /* [33] */
    /* fn extractBits<T : iu32>(T, u32, u32) -> T */
    /* fn extractBits<N : num, T : iu32>(vec<N, T>, u32, u32) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[340],
  },
  {
    /* [34] */
    /* fn faceForward<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[442],
  },
  {
    /* [35] */
    /* fn firstLeadingBit<T : iu32>(T) -> T */
    /* fn firstLeadingBit<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[342],
  },
  {
    /* [36] */
    /* fn firstTrailingBit<T : iu32>(T) -> T */
    /* fn firstTrailingBit<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[344],
  },
  {
    /* [37] */
    /* fn floor<T : fa_f32_f16>(@test_value(1.5) T) -> T */
    /* fn floor<N : num, T : fa_f32_f16>(@test_value(1.5) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[346],
  },
  {
    /* [38] */
    /* fn fma<T : fa_f32_f16>(T, T, T) -> T */
    /* fn fma<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[348],
  },
  {
    /* [39] */
    /* fn fract<T : fa_f32_f16>(@test_value(1.25) T) -> T */
    /* fn fract<N : num, T : fa_f32_f16>(@test_value(1.25) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[350],
  },
  {
    /* [40] */
    /* fn frexp<T : fa_f32_f16>(T) -> __frexp_result<T> */
    /* fn frexp<N : num, T : fa_f32_f16>(vec<N, T>) -> __frexp_result_vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[352],
  },
  {
    /* [41] */
    /* fn fwidth(f32) -> f32 */
    /* fn fwidth<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[354],
  },
  {
    /* [42] */
    /* fn fwidthCoarse(f32) -> f32 */
    /* fn fwidthCoarse<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[356],
  },
  {
    /* [43] */
    /* fn fwidthFine(f32) -> f32 */
    /* fn fwidthFine<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[358],
  },
  {
    /* [44] */
    /* fn insertBits<T : iu32>(T, T, u32, u32) -> T */
    /* fn insertBits<N : num, T : iu32>(vec<N, T>, vec<N, T>, u32, u32) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[360],
  },
  {
    /* [45] */
    /* fn inverseSqrt<T : fa_f32_f16>(T) -> T */
    /* fn inverseSqrt<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[362],
  },
  {
    /* [46] */
    /* fn ldexp<T : fa_f32_f16, U : ia_i32>(T, U) -> T */
    /* fn ldexp<N : num, T : fa_f32_f16, U : ia_i32>(vec<N, T>, vec<N, U>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[364],
  },
  {
    /* [47] */
    /* fn length<T : fa_f32_f16>(@test_value(0) T) -> T */
    /* fn length<N : num, T : fa_f32_f16>(@test_value(0) vec<N, T>) -> T */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[366],
  },
  {
    /* [48] */
    /* fn log<T : fa_f32_f16>(T) -> T */
    /* fn log<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[368],
  },
  {
    /* [49] */
    /* fn log2<T : fa_f32_f16>(T) -> T */
    /* fn log2<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[370],
  },
  {
    /* [50] */
    /* fn max<T : fia_fiu32_f16>(T, T) -> T */
    /* fn max<N : num, T : fia_fiu32_f16>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[372],
  },
  {
    /* [51] */
    /* fn min<T : fia_fiu32_f16>(T, T) -> T */
    /* fn min<N : num, T : fia_fiu32_f16>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[374],
  },
  {
    /* [52] */
    /* fn mix<T : fa_f32_f16>(T, T, T) -> T */
    /* fn mix<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* fn mix<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>, T) -> vec<N, T> */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[265],
  },
  {
    /* [53] */
    /* fn modf<T : fa_f32_f16>(@test_value(-1.5) T) -> __modf_result<T> */
    /* fn modf<N : num, T : fa_f32_f16>(@test_value(-1.5) vec<N, T>) -> __modf_result_vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[376],
  },
  {
    /* [54] */
    /* fn normalize<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[443],
  },
  {
    /* [55] */
    /* fn pack2x16float(vec2<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[444],
  },
  {
    /* [56] */
    /* fn pack2x16snorm(vec2<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[445],
  },
  {
    /* [57] */
    /* fn pack2x16unorm(vec2<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[446],
  },
  {
    /* [58] */
    /* fn pack4x8snorm(vec4<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[447],
  },
  {
    /* [59] */
    /* fn pack4x8unorm(vec4<f32>) -> u32 */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[448],
  },
  {
    /* [60] */
    /* fn pow<T : fa_f32_f16>(T, T) -> T */
    /* fn pow<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[378],
  },
  {
    /* [61] */
    /* fn quantizeToF16(f32) -> f32 */
    /* fn quantizeToF16<N : num>(vec<N, f32>) -> vec<N, f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[380],
  },
  {
    /* [62] */
    /* fn radians<T : fa_f32_f16>(T) -> T */
    /* fn radians<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[382],
  },
  {
    /* [63] */
    /* fn reflect<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[449],
  },
  {
    /* [64] */
    /* fn refract<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>, T) -> vec<N, T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[450],
  },
  {
    /* [65] */
    /* fn reverseBits<T : iu32>(T) -> T */
    /* fn reverseBits<N : num, T : iu32>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[384],
  },
  {
    /* [66] */
    /* fn round<T : fa_f32_f16>(@test_value(3.5) T) -> T */
    /* fn round<N : num, T : fa_f32_f16>(@test_value(3.5) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[386],
  },
  {
    /* [67] */
    /* fn saturate<T : fa_f32_f16>(@test_value(2) T) -> T */
    /* fn saturate<T : fa_f32_f16, N : num>(@test_value(2) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[388],
  },
  {
    /* [68] */
    /* fn select<T : scalar>(T, T, bool) -> T */
    /* fn select<T : scalar, N : num>(vec<N, T>, vec<N, T>, bool) -> vec<N, T> */
    /* fn select<N : num, T : scalar>(vec<N, T>, vec<N, T>, vec<N, bool>) -> vec<N, T> */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[268],
  },
  {
    /* [69] */
    /* fn sign<T : fia_fi32_f16>(T) -> T */
    /* fn sign<N : num, T : fia_fi32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[390],
  },
  {
    /* [70] */
    /* fn sin<T : fa_f32_f16>(@test_value(1.57079632679) T) -> T */
    /* fn sin<N : num, T : fa_f32_f16>(@test_value(1.57079632679) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[392],
  },
  {
    /* [71] */
    /* fn sinh<T : fa_f32_f16>(T) -> T */
    /* fn sinh<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[394],
  },
  {
    /* [72] */
    /* fn smoothstep<T : fa_f32_f16>(@test_value(2) T, @test_value(4) T, @test_value(3) T) -> T */
    /* fn smoothstep<N : num, T : fa_f32_f16>(@test_value(2) vec<N, T>, @test_value(4) vec<N, T>, @test_value(3) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[396],
  },
  {
    /* [73] */
    /* fn sqrt<T : fa_f32_f16>(T) -> T */
    /* fn sqrt<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[398],
  },
  {
    /* [74] */
    /* fn step<T : fa_f32_f16>(T, T) -> T */
    /* fn step<N : num, T : fa_f32_f16>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[400],
  },
  {
    /* [75] */
    /* fn storageBarrier() */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[451],
  },
  {
    /* [76] */
    /* fn tan<T : fa_f32_f16>(T) -> T */
    /* fn tan<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[402],
  },
  {
    /* [77] */
    /* fn tanh<T : fa_f32_f16>(T) -> T */
    /* fn tanh<N : num, T : fa_f32_f16>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[404],
  },
  {
    /* [78] */
    /* fn transpose<M : num, N : num, T : fa_f32_f16>(mat<M, N, T>) -> mat<N, M, T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[452],
  },
  {
    /* [79] */
    /* fn trunc<T : fa_f32_f16>(@test_value(1.5) T) -> T */
    /* fn trunc<N : num, T : fa_f32_f16>(@test_value(1.5) vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[406],
  },
  {
    /* [80] */
    /* fn unpack2x16float(u32) -> vec2<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[453],
  },
  {
    /* [81] */
    /* fn unpack2x16snorm(u32) -> vec2<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[454],
  },
  {
    /* [82] */
    /* fn unpack2x16unorm(u32) -> vec2<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[455],
  },
  {
    /* [83] */
    /* fn unpack4x8snorm(u32) -> vec4<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[456],
  },
  {
    /* [84] */
    /* fn unpack4x8unorm(u32) -> vec4<f32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[457],
  },
  {
    /* [85] */
    /* fn workgroupBarrier() */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[458],
  },
  {
    /* [86] */
    /* fn workgroupUniformLoad<T>(ptr<workgroup, T, read_write>) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[459],
  },
  {
    /* [87] */
    /* fn textureDimensions<T : fiu32>(texture: texture_1d<T>) -> u32 */
    /* fn textureDimensions<T : fiu32, L : iu32>(texture: texture_1d<T>, level: L) -> u32 */
    /* fn textureDimensions<T : fiu32>(texture: texture_2d<T>) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32, L : iu32>(texture: texture_2d<T>, level: L) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_2d_array<T>) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32, L : iu32>(texture: texture_2d_array<T>, level: L) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_3d<T>) -> vec3<u32> */
    /* fn textureDimensions<T : fiu32, L : iu32>(texture: texture_3d<T>, level: L) -> vec3<u32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_cube<T>) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32, L : iu32>(texture: texture_cube<T>, level: L) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_cube_array<T>) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32, L : iu32>(texture: texture_cube_array<T>, level: L) -> vec2<u32> */
    /* fn textureDimensions<T : fiu32>(texture: texture_multisampled_2d<T>) -> vec2<u32> */
    /* fn textureDimensions(texture: texture_depth_2d) -> vec2<u32> */
    /* fn textureDimensions<L : iu32>(texture: texture_depth_2d, level: L) -> vec2<u32> */
    /* fn textureDimensions(texture: texture_depth_2d_array) -> vec2<u32> */
    /* fn textureDimensions<L : iu32>(texture: texture_depth_2d_array, level: L) -> vec2<u32> */
    /* fn textureDimensions(texture: texture_depth_cube) -> vec2<u32> */
    /* fn textureDimensions<L : iu32>(texture: texture_depth_cube, level: L) -> vec2<u32> */
    /* fn textureDimensions(texture: texture_depth_cube_array) -> vec2<u32> */
    /* fn textureDimensions<L : iu32>(texture: texture_depth_cube_array, level: L) -> vec2<u32> */
    /* fn textureDimensions(texture: texture_depth_multisampled_2d) -> vec2<u32> */
    /* fn textureDimensions<F : texel_format, A : write>(texture: texture_storage_1d<F, A>) -> u32 */
    /* fn textureDimensions<F : texel_format, A : write>(texture: texture_storage_2d<F, A>) -> vec2<u32> */
    /* fn textureDimensions<F : texel_format, A : write>(texture: texture_storage_2d_array<F, A>) -> vec2<u32> */
    /* fn textureDimensions<F : texel_format, A : write>(texture: texture_storage_3d<F, A>) -> vec3<u32> */
    /* fn textureDimensions(texture: texture_external) -> vec2<u32> */
    /* num overloads */ 27,
    /* overloads */ &kOverloads[0],
  },
  {
    /* [88] */
    /* fn textureGather<T : fiu32, C : iu32>(@const component: C, texture: texture_2d<T>, sampler: sampler, coords: vec2<f32>) -> vec4<T> */
    /* fn textureGather<T : fiu32, C : iu32>(@const component: C, texture: texture_2d<T>, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> vec4<T> */
    /* fn textureGather<T : fiu32, C : iu32, A : iu32>(@const component: C, texture: texture_2d_array<T>, sampler: sampler, coords: vec2<f32>, array_index: A) -> vec4<T> */
    /* fn textureGather<T : fiu32, C : iu32, A : iu32>(@const component: C, texture: texture_2d_array<T>, sampler: sampler, coords: vec2<f32>, array_index: A, @const offset: vec2<i32>) -> vec4<T> */
    /* fn textureGather<T : fiu32, C : iu32>(@const component: C, texture: texture_cube<T>, sampler: sampler, coords: vec3<f32>) -> vec4<T> */
    /* fn textureGather<T : fiu32, C : iu32, A : iu32>(@const component: C, texture: texture_cube_array<T>, sampler: sampler, coords: vec3<f32>, array_index: A) -> vec4<T> */
    /* fn textureGather(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGather<A : iu32>(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: A) -> vec4<f32> */
    /* fn textureGather<A : iu32>(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: A, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGather(texture: texture_depth_cube, sampler: sampler, coords: vec3<f32>) -> vec4<f32> */
    /* fn textureGather<A : iu32>(texture: texture_depth_cube_array, sampler: sampler, coords: vec3<f32>, array_index: A) -> vec4<f32> */
    /* num overloads */ 12,
    /* overloads */ &kOverloads[72],
  },
  {
    /* [89] */
    /* fn textureGatherCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGatherCompare<A : iu32>(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32) -> vec4<f32> */
    /* fn textureGatherCompare<A : iu32>(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureGatherCompare(texture: texture_depth_cube, sampler: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> vec4<f32> */
    /* fn textureGatherCompare<A : iu32>(texture: texture_depth_cube_array, sampler: sampler_comparison, coords: vec3<f32>, array_index: A, depth_ref: f32) -> vec4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[162],
  },
  {
    /* [90] */
    /* fn textureNumLayers<T : fiu32>(texture: texture_2d_array<T>) -> u32 */
    /* fn textureNumLayers<T : fiu32>(texture: texture_cube_array<T>) -> u32 */
    /* fn textureNumLayers(texture: texture_depth_2d_array) -> u32 */
    /* fn textureNumLayers(texture: texture_depth_cube_array) -> u32 */
    /* fn textureNumLayers<F : texel_format, A : write>(texture: texture_storage_2d_array<F, A>) -> u32 */
    /* num overloads */ 5,
    /* overloads */ &kOverloads[234],
  },
  {
    /* [91] */
    /* fn textureNumLevels<T : fiu32>(texture: texture_1d<T>) -> u32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_2d<T>) -> u32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_2d_array<T>) -> u32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_3d<T>) -> u32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_cube<T>) -> u32 */
    /* fn textureNumLevels<T : fiu32>(texture: texture_cube_array<T>) -> u32 */
    /* fn textureNumLevels(texture: texture_depth_2d) -> u32 */
    /* fn textureNumLevels(texture: texture_depth_2d_array) -> u32 */
    /* fn textureNumLevels(texture: texture_depth_cube) -> u32 */
    /* fn textureNumLevels(texture: texture_depth_cube_array) -> u32 */
    /* num overloads */ 10,
    /* overloads */ &kOverloads[108],
  },
  {
    /* [92] */
    /* fn textureNumSamples<T : fiu32>(texture: texture_multisampled_2d<T>) -> u32 */
    /* fn textureNumSamples(texture: texture_depth_multisampled_2d) -> u32 */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[408],
  },
  {
    /* [93] */
    /* fn textureSample(texture: texture_1d<f32>, sampler: sampler, coords: f32) -> vec4<f32> */
    /* fn textureSample(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSample<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A) -> vec4<f32> */
    /* fn textureSample<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSample(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>) -> vec4<f32> */
    /* fn textureSample<A : iu32>(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: A) -> vec4<f32> */
    /* fn textureSample(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>) -> f32 */
    /* fn textureSample(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, @const offset: vec2<i32>) -> f32 */
    /* fn textureSample<A : iu32>(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: A) -> f32 */
    /* fn textureSample<A : iu32>(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: A, @const offset: vec2<i32>) -> f32 */
    /* fn textureSample(texture: texture_depth_cube, sampler: sampler, coords: vec3<f32>) -> f32 */
    /* fn textureSample<A : iu32>(texture: texture_depth_cube_array, sampler: sampler, coords: vec3<f32>, array_index: A) -> f32 */
    /* num overloads */ 15,
    /* overloads */ &kOverloads[43],
  },
  {
    /* [94] */
    /* fn textureSampleBias(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, bias: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleBias<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, bias: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, bias: f32, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSampleBias(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32> */
    /* fn textureSampleBias<A : iu32>(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: A, bias: f32) -> vec4<f32> */
    /* num overloads */ 8,
    /* overloads */ &kOverloads[146],
  },
  {
    /* [95] */
    /* fn textureSampleCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompare<A : iu32>(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32) -> f32 */
    /* fn textureSampleCompare<A : iu32>(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompare(texture: texture_depth_cube, sampler: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompare<A : iu32>(texture: texture_depth_cube_array, sampler: sampler_comparison, coords: vec3<f32>, array_index: A, depth_ref: f32) -> f32 */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[168],
  },
  {
    /* [96] */
    /* fn textureSampleCompareLevel(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_2d, sampler: sampler_comparison, coords: vec2<f32>, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompareLevel<A : iu32>(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32) -> f32 */
    /* fn textureSampleCompareLevel<A : iu32>(texture: texture_depth_2d_array, sampler: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleCompareLevel(texture: texture_depth_cube, sampler: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32 */
    /* fn textureSampleCompareLevel<A : iu32>(texture: texture_depth_cube_array, sampler: sampler_comparison, coords: vec3<f32>, array_index: A, depth_ref: f32) -> f32 */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[174],
  },
  {
    /* [97] */
    /* fn textureSampleGrad(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleGrad<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32> */
    /* fn textureSampleGrad<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, ddx: vec2<f32>, ddy: vec2<f32>, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSampleGrad(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32> */
    /* fn textureSampleGrad<A : iu32>(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: A, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32> */
    /* num overloads */ 8,
    /* overloads */ &kOverloads[154],
  },
  {
    /* [98] */
    /* fn textureSampleLevel(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>, level: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleLevel<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel<A : iu32>(texture: texture_2d_array<f32>, sampler: sampler, coords: vec2<f32>, array_index: A, level: f32, @const offset: vec2<i32>) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_3d<f32>, sampler: sampler, coords: vec3<f32>, level: f32, @const offset: vec3<i32>) -> vec4<f32> */
    /* fn textureSampleLevel(texture: texture_cube<f32>, sampler: sampler, coords: vec3<f32>, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel<A : iu32>(texture: texture_cube_array<f32>, sampler: sampler, coords: vec3<f32>, array_index: A, level: f32) -> vec4<f32> */
    /* fn textureSampleLevel<L : iu32>(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, level: L) -> f32 */
    /* fn textureSampleLevel<L : iu32>(texture: texture_depth_2d, sampler: sampler, coords: vec2<f32>, level: L, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleLevel<A : iu32, L : iu32>(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: A, level: L) -> f32 */
    /* fn textureSampleLevel<A : iu32, L : iu32>(texture: texture_depth_2d_array, sampler: sampler, coords: vec2<f32>, array_index: A, level: L, @const offset: vec2<i32>) -> f32 */
    /* fn textureSampleLevel<L : iu32>(texture: texture_depth_cube, sampler: sampler, coords: vec3<f32>, level: L) -> f32 */
    /* fn textureSampleLevel<A : iu32, L : iu32>(texture: texture_depth_cube_array, sampler: sampler, coords: vec3<f32>, array_index: A, level: L) -> f32 */
    /* num overloads */ 14,
    /* overloads */ &kOverloads[58],
  },
  {
    /* [99] */
    /* fn textureSampleBaseClampToEdge(texture: texture_2d<f32>, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* fn textureSampleBaseClampToEdge(texture: texture_external, sampler: sampler, coords: vec2<f32>) -> vec4<f32> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[410],
  },
  {
    /* [100] */
    /* fn textureStore<C : iu32>(texture: texture_storage_1d<f32_texel_format, write>, coords: C, value: vec4<f32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_2d<f32_texel_format, write>, coords: vec2<C>, value: vec4<f32>) */
    /* fn textureStore<C : iu32, A : iu32>(texture: texture_storage_2d_array<f32_texel_format, write>, coords: vec2<C>, array_index: A, value: vec4<f32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_3d<f32_texel_format, write>, coords: vec3<C>, value: vec4<f32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_1d<i32_texel_format, write>, coords: C, value: vec4<i32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_2d<i32_texel_format, write>, coords: vec2<C>, value: vec4<i32>) */
    /* fn textureStore<C : iu32, A : iu32>(texture: texture_storage_2d_array<i32_texel_format, write>, coords: vec2<C>, array_index: A, value: vec4<i32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_3d<i32_texel_format, write>, coords: vec3<C>, value: vec4<i32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_1d<u32_texel_format, write>, coords: C, value: vec4<u32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_2d<u32_texel_format, write>, coords: vec2<C>, value: vec4<u32>) */
    /* fn textureStore<C : iu32, A : iu32>(texture: texture_storage_2d_array<u32_texel_format, write>, coords: vec2<C>, array_index: A, value: vec4<u32>) */
    /* fn textureStore<C : iu32>(texture: texture_storage_3d<u32_texel_format, write>, coords: vec3<C>, value: vec4<u32>) */
    /* num overloads */ 12,
    /* overloads */ &kOverloads[84],
  },
  {
    /* [101] */
    /* fn textureLoad<T : fiu32, C : iu32, L : iu32>(texture: texture_1d<T>, coords: C, level: L) -> vec4<T> */
    /* fn textureLoad<T : fiu32, C : iu32, L : iu32>(texture: texture_2d<T>, coords: vec2<C>, level: L) -> vec4<T> */
    /* fn textureLoad<T : fiu32, C : iu32, A : iu32, L : iu32>(texture: texture_2d_array<T>, coords: vec2<C>, array_index: A, level: L) -> vec4<T> */
    /* fn textureLoad<T : fiu32, C : iu32, L : iu32>(texture: texture_3d<T>, coords: vec3<C>, level: L) -> vec4<T> */
    /* fn textureLoad<T : fiu32, C : iu32, S : iu32>(texture: texture_multisampled_2d<T>, coords: vec2<C>, sample_index: S) -> vec4<T> */
    /* fn textureLoad<C : iu32, L : iu32>(texture: texture_depth_2d, coords: vec2<C>, level: L) -> f32 */
    /* fn textureLoad<C : iu32, A : iu32, L : iu32>(texture: texture_depth_2d_array, coords: vec2<C>, array_index: A, level: L) -> f32 */
    /* fn textureLoad<C : iu32, S : iu32>(texture: texture_depth_multisampled_2d, coords: vec2<C>, sample_index: S) -> f32 */
    /* fn textureLoad<C : iu32>(texture: texture_external, coords: vec2<C>) -> vec4<f32> */
    /* num overloads */ 9,
    /* overloads */ &kOverloads[128],
  },
  {
    /* [102] */
    /* fn atomicLoad<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[460],
  },
  {
    /* [103] */
    /* fn atomicStore<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[461],
  },
  {
    /* [104] */
    /* fn atomicAdd<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[462],
  },
  {
    /* [105] */
    /* fn atomicSub<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[463],
  },
  {
    /* [106] */
    /* fn atomicMax<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[464],
  },
  {
    /* [107] */
    /* fn atomicMin<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[465],
  },
  {
    /* [108] */
    /* fn atomicAnd<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[466],
  },
  {
    /* [109] */
    /* fn atomicOr<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[467],
  },
  {
    /* [110] */
    /* fn atomicXor<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[468],
  },
  {
    /* [111] */
    /* fn atomicExchange<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[469],
  },
  {
    /* [112] */
    /* fn atomicCompareExchangeWeak<T : iu32, S : workgroup_or_storage>(ptr<S, atomic<T>, read_write>, T, T) -> __atomic_compare_exchange_result<T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[470],
  },
  {
    /* [113] */
    /* fn subgroupBallot() -> vec4<u32> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[471],
  },
  {
    /* [114] */
    /* fn _tint_materialize<T>(T) -> T */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[472],
  },
};

constexpr IntrinsicInfo kUnaryOperators[] = {
  {
    /* [0] */
    /* op !(bool) -> bool */
    /* op !<N : num>(vec<N, bool>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[412],
  },
  {
    /* [1] */
    /* op ~<T : ia_iu32>(T) -> T */
    /* op ~<T : ia_iu32, N : num>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[414],
  },
  {
    /* [2] */
    /* op -<T : fia_fi32_f16>(T) -> T */
    /* op -<T : fia_fi32_f16, N : num>(vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[416],
  },
};
constexpr uint8_t kUnaryOperatorNot = 0;
constexpr uint8_t kUnaryOperatorComplement = 1;
constexpr uint8_t kUnaryOperatorMinus = 2;

constexpr IntrinsicInfo kBinaryOperators[] = {
  {
    /* [0] */
    /* op +<T : fia_fiu32_f16>(T, T) -> T */
    /* op +<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op +<T : fia_fiu32_f16, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op +<T : fia_fiu32_f16, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* op +<T : fa_f32_f16, N : num, M : num>(mat<N, M, T>, mat<N, M, T>) -> mat<N, M, T> */
    /* num overloads */ 5,
    /* overloads */ &kOverloads[239],
  },
  {
    /* [1] */
    /* op -<T : fia_fiu32_f16>(T, T) -> T */
    /* op -<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op -<T : fia_fiu32_f16, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op -<T : fia_fiu32_f16, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* op -<T : fa_f32_f16, N : num, M : num>(mat<N, M, T>, mat<N, M, T>) -> mat<N, M, T> */
    /* num overloads */ 5,
    /* overloads */ &kOverloads[244],
  },
  {
    /* [2] */
    /* op *<T : fia_fiu32_f16>(T, T) -> T */
    /* op *<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op *<T : fia_fiu32_f16, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op *<T : fia_fiu32_f16, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* op *<T : fa_f32_f16, N : num, M : num>(T, mat<N, M, T>) -> mat<N, M, T> */
    /* op *<T : fa_f32_f16, N : num, M : num>(mat<N, M, T>, T) -> mat<N, M, T> */
    /* op *<T : fa_f32_f16, C : num, R : num>(mat<C, R, T>, vec<C, T>) -> vec<R, T> */
    /* op *<T : fa_f32_f16, C : num, R : num>(vec<R, T>, mat<C, R, T>) -> vec<C, T> */
    /* op *<T : fa_f32_f16, K : num, C : num, R : num>(mat<K, R, T>, mat<C, K, T>) -> mat<C, R, T> */
    /* num overloads */ 9,
    /* overloads */ &kOverloads[137],
  },
  {
    /* [3] */
    /* op /<T : fia_fiu32_f16>(T, T) -> T */
    /* op /<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op /<T : fia_fiu32_f16, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op /<T : fia_fiu32_f16, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[249],
  },
  {
    /* [4] */
    /* op %<T : fia_fiu32_f16>(T, T) -> T */
    /* op %<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* op %<T : fia_fiu32_f16, N : num>(vec<N, T>, T) -> vec<N, T> */
    /* op %<T : fia_fiu32_f16, N : num>(T, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[253],
  },
  {
    /* [5] */
    /* op ^<T : ia_iu32>(T, T) -> T */
    /* op ^<T : ia_iu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[418],
  },
  {
    /* [6] */
    /* op &(bool, bool) -> bool */
    /* op &<N : num>(vec<N, bool>, vec<N, bool>) -> vec<N, bool> */
    /* op &<T : ia_iu32>(T, T) -> T */
    /* op &<T : ia_iu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[257],
  },
  {
    /* [7] */
    /* op |(bool, bool) -> bool */
    /* op |<N : num>(vec<N, bool>, vec<N, bool>) -> vec<N, bool> */
    /* op |<T : ia_iu32>(T, T) -> T */
    /* op |<T : ia_iu32, N : num>(vec<N, T>, vec<N, T>) -> vec<N, T> */
    /* num overloads */ 4,
    /* overloads */ &kOverloads[261],
  },
  {
    /* [8] */
    /* op &&(bool, bool) -> bool */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[473],
  },
  {
    /* [9] */
    /* op ||(bool, bool) -> bool */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[474],
  },
  {
    /* [10] */
    /* op ==<T : scalar>(T, T) -> bool */
    /* op ==<T : scalar, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[420],
  },
  {
    /* [11] */
    /* op !=<T : scalar>(T, T) -> bool */
    /* op !=<T : scalar, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[422],
  },
  {
    /* [12] */
    /* op <<T : fia_fiu32_f16>(T, T) -> bool */
    /* op <<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[424],
  },
  {
    /* [13] */
    /* op ><T : fia_fiu32_f16>(T, T) -> bool */
    /* op ><T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[426],
  },
  {
    /* [14] */
    /* op <=<T : fia_fiu32_f16>(T, T) -> bool */
    /* op <=<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[428],
  },
  {
    /* [15] */
    /* op >=<T : fia_fiu32_f16>(T, T) -> bool */
    /* op >=<T : fia_fiu32_f16, N : num>(vec<N, T>, vec<N, T>) -> vec<N, bool> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[430],
  },
  {
    /* [16] */
    /* op <<<T : ia_iu32>(T, u32) -> T */
    /* op <<<T : ia_iu32, N : num>(vec<N, T>, vec<N, u32>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[432],
  },
  {
    /* [17] */
    /* op >><T : ia_iu32>(T, u32) -> T */
    /* op >><T : ia_iu32, N : num>(vec<N, T>, vec<N, u32>) -> vec<N, T> */
    /* num overloads */ 2,
    /* overloads */ &kOverloads[434],
  },
};
constexpr uint8_t kBinaryOperatorPlus = 0;
constexpr uint8_t kBinaryOperatorMinus = 1;
constexpr uint8_t kBinaryOperatorStar = 2;
constexpr uint8_t kBinaryOperatorDivide = 3;
constexpr uint8_t kBinaryOperatorModulo = 4;
constexpr uint8_t kBinaryOperatorXor = 5;
constexpr uint8_t kBinaryOperatorAnd = 6;
constexpr uint8_t kBinaryOperatorOr = 7;
constexpr uint8_t kBinaryOperatorLogicalAnd = 8;
constexpr uint8_t kBinaryOperatorLogicalOr = 9;
constexpr uint8_t kBinaryOperatorEqual = 10;
constexpr uint8_t kBinaryOperatorNotEqual = 11;
constexpr uint8_t kBinaryOperatorLessThan = 12;
constexpr uint8_t kBinaryOperatorGreaterThan = 13;
constexpr uint8_t kBinaryOperatorLessThanEqual = 14;
constexpr uint8_t kBinaryOperatorGreaterThanEqual = 15;
constexpr uint8_t kBinaryOperatorShiftLeft = 16;
constexpr uint8_t kBinaryOperatorShiftRight = 17;

constexpr IntrinsicInfo kConstructorsAndConverters[] = {
  {
    /* [0] */
    /* ctor i32() -> i32 */
    /* ctor i32(i32) -> i32 */
    /* conv i32<T : scalar_no_i32>(T) -> i32 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[271],
  },
  {
    /* [1] */
    /* ctor u32() -> u32 */
    /* ctor u32(u32) -> u32 */
    /* conv u32<T : scalar_no_u32>(T) -> u32 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[274],
  },
  {
    /* [2] */
    /* ctor f32() -> f32 */
    /* ctor f32(f32) -> f32 */
    /* conv f32<T : scalar_no_f32>(T) -> f32 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[277],
  },
  {
    /* [3] */
    /* ctor f16() -> f16 */
    /* ctor f16(f16) -> f16 */
    /* conv f16<T : scalar_no_f16>(T) -> f16 */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[280],
  },
  {
    /* [4] */
    /* ctor bool() -> bool */
    /* ctor bool(bool) -> bool */
    /* conv bool<T : scalar_no_bool>(T) -> bool */
    /* num overloads */ 3,
    /* overloads */ &kOverloads[283],
  },
  {
    /* [5] */
    /* ctor vec2() -> vec2<ia> */
    /* ctor vec2<T : concrete_scalar>() -> vec2<T> */
    /* ctor vec2<T : scalar>(vec2<T>) -> vec2<T> */
    /* ctor vec2<T : scalar>(T) -> vec2<T> */
    /* ctor vec2<T : scalar>(x: T, y: T) -> vec2<T> */
    /* conv vec2<T : f32, U : scalar_no_f32>(vec2<U>) -> vec2<f32> */
    /* conv vec2<T : f16, U : scalar_no_f16>(vec2<U>) -> vec2<f16> */
    /* conv vec2<T : i32, U : scalar_no_i32>(vec2<U>) -> vec2<i32> */
    /* conv vec2<T : u32, U : scalar_no_u32>(vec2<U>) -> vec2<u32> */
    /* conv vec2<T : bool, U : scalar_no_bool>(vec2<U>) -> vec2<bool> */
    /* num overloads */ 10,
    /* overloads */ &kOverloads[118],
  },
  {
    /* [6] */
    /* ctor vec3() -> vec3<ia> */
    /* ctor vec3<T : concrete_scalar>() -> vec3<T> */
    /* ctor vec3<T : scalar>(vec3<T>) -> vec3<T> */
    /* ctor vec3<T : scalar>(T) -> vec3<T> */
    /* ctor vec3<T : scalar>(x: T, y: T, z: T) -> vec3<T> */
    /* ctor vec3<T : scalar>(xy: vec2<T>, z: T) -> vec3<T> */
    /* ctor vec3<T : scalar>(x: T, yz: vec2<T>) -> vec3<T> */
    /* conv vec3<T : f32, U : scalar_no_f32>(vec3<U>) -> vec3<f32> */
    /* conv vec3<T : f16, U : scalar_no_f16>(vec3<U>) -> vec3<f16> */
    /* conv vec3<T : i32, U : scalar_no_i32>(vec3<U>) -> vec3<i32> */
    /* conv vec3<T : u32, U : scalar_no_u32>(vec3<U>) -> vec3<u32> */
    /* conv vec3<T : bool, U : scalar_no_bool>(vec3<U>) -> vec3<bool> */
    /* num overloads */ 12,
    /* overloads */ &kOverloads[96],
  },
  {
    /* [7] */
    /* ctor vec4() -> vec4<ia> */
    /* ctor vec4<T : concrete_scalar>() -> vec4<T> */
    /* ctor vec4<T : scalar>(vec4<T>) -> vec4<T> */
    /* ctor vec4<T : scalar>(T) -> vec4<T> */
    /* ctor vec4<T : scalar>(x: T, y: T, z: T, w: T) -> vec4<T> */
    /* ctor vec4<T : scalar>(xy: vec2<T>, z: T, w: T) -> vec4<T> */
    /* ctor vec4<T : scalar>(x: T, yz: vec2<T>, w: T) -> vec4<T> */
    /* ctor vec4<T : scalar>(x: T, y: T, zw: vec2<T>) -> vec4<T> */
    /* ctor vec4<T : scalar>(xy: vec2<T>, zw: vec2<T>) -> vec4<T> */
    /* ctor vec4<T : scalar>(xyz: vec3<T>, w: T) -> vec4<T> */
    /* ctor vec4<T : scalar>(x: T, zyw: vec3<T>) -> vec4<T> */
    /* conv vec4<T : f32, U : scalar_no_f32>(vec4<U>) -> vec4<f32> */
    /* conv vec4<T : f16, U : scalar_no_f16>(vec4<U>) -> vec4<f16> */
    /* conv vec4<T : i32, U : scalar_no_i32>(vec4<U>) -> vec4<i32> */
    /* conv vec4<T : u32, U : scalar_no_u32>(vec4<U>) -> vec4<u32> */
    /* conv vec4<T : bool, U : scalar_no_bool>(vec4<U>) -> vec4<bool> */
    /* num overloads */ 16,
    /* overloads */ &kOverloads[27],
  },
  {
    /* [8] */
    /* ctor mat2x2<T : f32_f16>() -> mat2x2<T> */
    /* ctor mat2x2<T : f32_f16>(mat2x2<T>) -> mat2x2<T> */
    /* ctor mat2x2<T : fa_f32_f16>(T, T, T, T) -> mat2x2<T> */
    /* ctor mat2x2<T : fa_f32_f16>(vec2<T>, vec2<T>) -> mat2x2<T> */
    /* conv mat2x2<T : f16>(mat2x2<f32>) -> mat2x2<f16> */
    /* conv mat2x2<T : f32>(mat2x2<f16>) -> mat2x2<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[180],
  },
  {
    /* [9] */
    /* ctor mat2x3<T : f32_f16>() -> mat2x3<T> */
    /* ctor mat2x3<T : f32_f16>(mat2x3<T>) -> mat2x3<T> */
    /* ctor mat2x3<T : fa_f32_f16>(T, T, T, T, T, T) -> mat2x3<T> */
    /* ctor mat2x3<T : fa_f32_f16>(vec3<T>, vec3<T>) -> mat2x3<T> */
    /* conv mat2x3<T : f16>(mat2x3<f32>) -> mat2x3<f16> */
    /* conv mat2x3<T : f32>(mat2x3<f16>) -> mat2x3<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[186],
  },
  {
    /* [10] */
    /* ctor mat2x4<T : f32_f16>() -> mat2x4<T> */
    /* ctor mat2x4<T : f32_f16>(mat2x4<T>) -> mat2x4<T> */
    /* ctor mat2x4<T : fa_f32_f16>(T, T, T, T, T, T, T, T) -> mat2x4<T> */
    /* ctor mat2x4<T : fa_f32_f16>(vec4<T>, vec4<T>) -> mat2x4<T> */
    /* conv mat2x4<T : f16>(mat2x4<f32>) -> mat2x4<f16> */
    /* conv mat2x4<T : f32>(mat2x4<f16>) -> mat2x4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[192],
  },
  {
    /* [11] */
    /* ctor mat3x2<T : f32_f16>() -> mat3x2<T> */
    /* ctor mat3x2<T : f32_f16>(mat3x2<T>) -> mat3x2<T> */
    /* ctor mat3x2<T : fa_f32_f16>(T, T, T, T, T, T) -> mat3x2<T> */
    /* ctor mat3x2<T : fa_f32_f16>(vec2<T>, vec2<T>, vec2<T>) -> mat3x2<T> */
    /* conv mat3x2<T : f16>(mat3x2<f32>) -> mat3x2<f16> */
    /* conv mat3x2<T : f32>(mat3x2<f16>) -> mat3x2<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[198],
  },
  {
    /* [12] */
    /* ctor mat3x3<T : f32_f16>() -> mat3x3<T> */
    /* ctor mat3x3<T : f32_f16>(mat3x3<T>) -> mat3x3<T> */
    /* ctor mat3x3<T : fa_f32_f16>(T, T, T, T, T, T, T, T, T) -> mat3x3<T> */
    /* ctor mat3x3<T : fa_f32_f16>(vec3<T>, vec3<T>, vec3<T>) -> mat3x3<T> */
    /* conv mat3x3<T : f16>(mat3x3<f32>) -> mat3x3<f16> */
    /* conv mat3x3<T : f32>(mat3x3<f16>) -> mat3x3<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[204],
  },
  {
    /* [13] */
    /* ctor mat3x4<T : f32_f16>() -> mat3x4<T> */
    /* ctor mat3x4<T : f32_f16>(mat3x4<T>) -> mat3x4<T> */
    /* ctor mat3x4<T : fa_f32_f16>(T, T, T, T, T, T, T, T, T, T, T, T) -> mat3x4<T> */
    /* ctor mat3x4<T : fa_f32_f16>(vec4<T>, vec4<T>, vec4<T>) -> mat3x4<T> */
    /* conv mat3x4<T : f16>(mat3x4<f32>) -> mat3x4<f16> */
    /* conv mat3x4<T : f32>(mat3x4<f16>) -> mat3x4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[210],
  },
  {
    /* [14] */
    /* ctor mat4x2<T : f32_f16>() -> mat4x2<T> */
    /* ctor mat4x2<T : f32_f16>(mat4x2<T>) -> mat4x2<T> */
    /* ctor mat4x2<T : fa_f32_f16>(T, T, T, T, T, T, T, T) -> mat4x2<T> */
    /* ctor mat4x2<T : fa_f32_f16>(vec2<T>, vec2<T>, vec2<T>, vec2<T>) -> mat4x2<T> */
    /* conv mat4x2<T : f16>(mat4x2<f32>) -> mat4x2<f16> */
    /* conv mat4x2<T : f32>(mat4x2<f16>) -> mat4x2<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[216],
  },
  {
    /* [15] */
    /* ctor mat4x3<T : f32_f16>() -> mat4x3<T> */
    /* ctor mat4x3<T : f32_f16>(mat4x3<T>) -> mat4x3<T> */
    /* ctor mat4x3<T : fa_f32_f16>(T, T, T, T, T, T, T, T, T, T, T, T) -> mat4x3<T> */
    /* ctor mat4x3<T : fa_f32_f16>(vec3<T>, vec3<T>, vec3<T>, vec3<T>) -> mat4x3<T> */
    /* conv mat4x3<T : f16>(mat4x3<f32>) -> mat4x3<f16> */
    /* conv mat4x3<T : f32>(mat4x3<f16>) -> mat4x3<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[222],
  },
  {
    /* [16] */
    /* ctor mat4x4<T : f32_f16>() -> mat4x4<T> */
    /* ctor mat4x4<T : f32_f16>(mat4x4<T>) -> mat4x4<T> */
    /* ctor mat4x4<T : fa_f32_f16>(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) -> mat4x4<T> */
    /* ctor mat4x4<T : fa_f32_f16>(vec4<T>, vec4<T>, vec4<T>, vec4<T>) -> mat4x4<T> */
    /* conv mat4x4<T : f16>(mat4x4<f32>) -> mat4x4<f16> */
    /* conv mat4x4<T : f32>(mat4x4<f16>) -> mat4x4<f32> */
    /* num overloads */ 6,
    /* overloads */ &kOverloads[228],
  },
  {
    /* [17] */
    /* conv packedVec3<T : concrete_scalar>(vec3<T>) -> packedVec3<T> */
    /* num overloads */ 1,
    /* overloads */ &kOverloads[475],
  },
};

// clang-format on

}  // anonymous namespace

const core::intrinsic::TableData kIntrinsicData{
    /* template_types */ kTemplateTypes,
    /* template_numbers */ kTemplateNumbers,
    /* type_matcher_indices */ kTypeMatcherIndices,
    /* number_matcher_indices */ kNumberMatcherIndices,
    /* type_matchers */ kTypeMatchers,
    /* number_matchers */ kNumberMatchers,
    /* parameters */ kParameters,
    /* ctor_conv */ kConstructorsAndConverters,
    /* builtins */ kBuiltins,
    /* binary_plus */ kBinaryOperators[kBinaryOperatorPlus],
    /* binary_minus */ kBinaryOperators[kBinaryOperatorMinus],
    /* binary_star */ kBinaryOperators[kBinaryOperatorStar],
    /* binary_divide */ kBinaryOperators[kBinaryOperatorDivide],
    /* binary_modulo */ kBinaryOperators[kBinaryOperatorModulo],
    /* binary_xor */ kBinaryOperators[kBinaryOperatorXor],
    /* binary_and */ kBinaryOperators[kBinaryOperatorAnd],
    /* binary_or */ kBinaryOperators[kBinaryOperatorOr],
    /* binary_logical_and */ kBinaryOperators[kBinaryOperatorLogicalAnd],
    /* binary_logical_or */ kBinaryOperators[kBinaryOperatorLogicalOr],
    /* binary_equal */ kBinaryOperators[kBinaryOperatorEqual],
    /* binary_not_equal */ kBinaryOperators[kBinaryOperatorNotEqual],
    /* binary_less_than */ kBinaryOperators[kBinaryOperatorLessThan],
    /* binary_greater_than */ kBinaryOperators[kBinaryOperatorGreaterThan],
    /* binary_less_than_equal */ kBinaryOperators[kBinaryOperatorLessThanEqual],
    /* binary_greater_than_equal */ kBinaryOperators[kBinaryOperatorGreaterThanEqual],
    /* binary_shift_left */ kBinaryOperators[kBinaryOperatorShiftLeft],
    /* binary_shift_right */ kBinaryOperators[kBinaryOperatorShiftRight],
    /* unary_not */ kUnaryOperators[kUnaryOperatorNot],
    /* unary_complement */ kUnaryOperators[kUnaryOperatorComplement],
    /* unary_minus */ kUnaryOperators[kUnaryOperatorMinus],
};

}  // namespace tint::core
