# Copyright 2023 The Tint Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
# File generated by tools/src/cmd/gen
# using the template:
#   /home/ben/src/dawn/tools/src/cmd/gen/build/BUILD.gn.tmpl
#
# Do not modify this file directly
################################################################################

import("../../../../../tint_overrides_with_defaults.gni")

import("${tint_src_dir}/tint.gni")

libtint_source_set("writer") {
  sources = [
    "output.h",
    "writer.cc",
    "writer.h",
  ]
  deps = [ "${tint_src_dir}/utils/result" ]
  if (tint_build_ir) {
    deps += [ "${tint_src_dir}/lang/core/ir/transform" ]
  }
  if (tint_build_spv_writer) {
    deps += [ "${tint_src_dir}/lang/spirv/writer/ast_printer" ]
  }
  if (tint_build_spv_writer) {
    deps += [ "${tint_src_dir}/lang/spirv/writer/common" ]
  }
  if (tint_build_spv_writer && tint_build_ir) {
    deps += [ "${tint_src_dir}/lang/spirv/writer/printer" ]
  }
  if (tint_build_spv_writer && tint_build_ir) {
    deps += [ "${tint_src_dir}/lang/spirv/writer/raise" ]
  }
  if (tint_build_ir) {
    deps += [ "${tint_src_dir}/lang/wgsl/reader/program_to_ir" ]
  }
  if (tint_build_spv_reader || tint_build_spv_writer) {
    deps += [ "${tint_spirv_headers_dir}:spv_headers" ]
  }
}

tint_unittests_source_set("unittests") {
  testonly = true
  sources = []
  if (tint_build_ir) {
    sources += [ "access_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "atomic_builtin_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "binary_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "bitcast_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "builtin_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "constant_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "construct_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "convert_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "discard_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "function_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "if_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "let_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "loop_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "switch_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "swizzle_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "texture_builtin_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "type_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "unary_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "var_test.cc" ]
  }
  if (tint_build_ir) {
    sources += [ "writer_test.cc" ]
  }
  deps = [
    "${tint_src_dir}/lang/core",
    "${tint_src_dir}/lang/core/type",
  ]
  if (tint_build_ir) {
    deps += [ "${tint_src_dir}/lang/core/ir" ]
  }
  if (tint_build_spv_writer) {
    deps += [ "${tint_src_dir}/lang/spirv/writer/common:unittests" ]
  }
}
