// Copyright 2023 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/spirv/ir/intrinsic.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/lang/spirv/ir/intrinsic.h"

namespace tint::spirv::ir {

/// ParseIntrinsic parses a Intrinsic from a string.
/// @param str the string to parse
/// @returns the parsed enum, or Intrinsic::kUndefined if the string could not be parsed.
Intrinsic ParseIntrinsic(std::string_view str) {
    if (str == "array_length") {
        return Intrinsic::kArrayLength;
    }
    if (str == "atomic_and") {
        return Intrinsic::kAtomicAnd;
    }
    if (str == "atomic_compare_exchange") {
        return Intrinsic::kAtomicCompareExchange;
    }
    if (str == "atomic_exchange") {
        return Intrinsic::kAtomicExchange;
    }
    if (str == "atomic_iadd") {
        return Intrinsic::kAtomicIadd;
    }
    if (str == "atomic_isub") {
        return Intrinsic::kAtomicIsub;
    }
    if (str == "atomic_load") {
        return Intrinsic::kAtomicLoad;
    }
    if (str == "atomic_or") {
        return Intrinsic::kAtomicOr;
    }
    if (str == "atomic_smax") {
        return Intrinsic::kAtomicSmax;
    }
    if (str == "atomic_smin") {
        return Intrinsic::kAtomicSmin;
    }
    if (str == "atomic_store") {
        return Intrinsic::kAtomicStore;
    }
    if (str == "atomic_umax") {
        return Intrinsic::kAtomicUmax;
    }
    if (str == "atomic_umin") {
        return Intrinsic::kAtomicUmin;
    }
    if (str == "atomic_xor") {
        return Intrinsic::kAtomicXor;
    }
    if (str == "dot") {
        return Intrinsic::kDot;
    }
    if (str == "image_dref_gather") {
        return Intrinsic::kImageDrefGather;
    }
    if (str == "image_fetch") {
        return Intrinsic::kImageFetch;
    }
    if (str == "image_gather") {
        return Intrinsic::kImageGather;
    }
    if (str == "image_query_size") {
        return Intrinsic::kImageQuerySize;
    }
    if (str == "image_query_size_lod") {
        return Intrinsic::kImageQuerySizeLod;
    }
    if (str == "image_sample_dref_explicit_lod") {
        return Intrinsic::kImageSampleDrefExplicitLod;
    }
    if (str == "image_sample_dref_implicit_lod") {
        return Intrinsic::kImageSampleDrefImplicitLod;
    }
    if (str == "image_sample_explicit_lod") {
        return Intrinsic::kImageSampleExplicitLod;
    }
    if (str == "image_sample_implicit_lod") {
        return Intrinsic::kImageSampleImplicitLod;
    }
    if (str == "image_write") {
        return Intrinsic::kImageWrite;
    }
    if (str == "matrix_times_matrix") {
        return Intrinsic::kMatrixTimesMatrix;
    }
    if (str == "matrix_times_scalar") {
        return Intrinsic::kMatrixTimesScalar;
    }
    if (str == "matrix_times_vector") {
        return Intrinsic::kMatrixTimesVector;
    }
    if (str == "sampled_image") {
        return Intrinsic::kSampledImage;
    }
    if (str == "select") {
        return Intrinsic::kSelect;
    }
    if (str == "vector_times_matrix") {
        return Intrinsic::kVectorTimesMatrix;
    }
    if (str == "vector_times_scalar") {
        return Intrinsic::kVectorTimesScalar;
    }
    return Intrinsic::kUndefined;
}

std::string_view ToString(Intrinsic value) {
    switch (value) {
        case Intrinsic::kUndefined:
            return "undefined";
        case Intrinsic::kArrayLength:
            return "array_length";
        case Intrinsic::kAtomicAnd:
            return "atomic_and";
        case Intrinsic::kAtomicCompareExchange:
            return "atomic_compare_exchange";
        case Intrinsic::kAtomicExchange:
            return "atomic_exchange";
        case Intrinsic::kAtomicIadd:
            return "atomic_iadd";
        case Intrinsic::kAtomicIsub:
            return "atomic_isub";
        case Intrinsic::kAtomicLoad:
            return "atomic_load";
        case Intrinsic::kAtomicOr:
            return "atomic_or";
        case Intrinsic::kAtomicSmax:
            return "atomic_smax";
        case Intrinsic::kAtomicSmin:
            return "atomic_smin";
        case Intrinsic::kAtomicStore:
            return "atomic_store";
        case Intrinsic::kAtomicUmax:
            return "atomic_umax";
        case Intrinsic::kAtomicUmin:
            return "atomic_umin";
        case Intrinsic::kAtomicXor:
            return "atomic_xor";
        case Intrinsic::kDot:
            return "dot";
        case Intrinsic::kImageDrefGather:
            return "image_dref_gather";
        case Intrinsic::kImageFetch:
            return "image_fetch";
        case Intrinsic::kImageGather:
            return "image_gather";
        case Intrinsic::kImageQuerySize:
            return "image_query_size";
        case Intrinsic::kImageQuerySizeLod:
            return "image_query_size_lod";
        case Intrinsic::kImageSampleDrefExplicitLod:
            return "image_sample_dref_explicit_lod";
        case Intrinsic::kImageSampleDrefImplicitLod:
            return "image_sample_dref_implicit_lod";
        case Intrinsic::kImageSampleExplicitLod:
            return "image_sample_explicit_lod";
        case Intrinsic::kImageSampleImplicitLod:
            return "image_sample_implicit_lod";
        case Intrinsic::kImageWrite:
            return "image_write";
        case Intrinsic::kMatrixTimesMatrix:
            return "matrix_times_matrix";
        case Intrinsic::kMatrixTimesScalar:
            return "matrix_times_scalar";
        case Intrinsic::kMatrixTimesVector:
            return "matrix_times_vector";
        case Intrinsic::kSampledImage:
            return "sampled_image";
        case Intrinsic::kSelect:
            return "select";
        case Intrinsic::kVectorTimesMatrix:
            return "vector_times_matrix";
        case Intrinsic::kVectorTimesScalar:
            return "vector_times_scalar";
    }
    return "<unknown>";
}

}  // namespace tint::spirv::ir
