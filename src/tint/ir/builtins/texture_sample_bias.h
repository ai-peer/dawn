// Copyright 2023 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ir/builtins/gen.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#ifndef SRC_TINT_IR_BUILTINS_TEXTURE_SAMPLE_BIAS_H_
#define SRC_TINT_IR_BUILTINS_TEXTURE_SAMPLE_BIAS_H_

#include "src/tint/ir/builtins/builtin.h"

namespace tint::ir::builtins {

/// A textureSampleBias instruction in the IR.
class TextureSampleBias : public Castable<TextureSampleBias, Builtin> {
  public:
    /// Constructor
    /// @param result the result value
    /// @param args the builtin arguments
    TextureSampleBias(Value* result, utils::VectorRef<Value*> args);
    TextureSampleBias(const TextureSampleBias& instr) = delete;
    TextureSampleBias(TextureSampleBias&& instr) = delete;
    ~TextureSampleBias() override;

    TextureSampleBias& operator=(const TextureSampleBias& instr) = delete;
    TextureSampleBias& operator=(TextureSampleBias&& instr) = delete;

    /// Write the instruction to the given stream
    /// @param out the stream to write to
    /// @param st the symbol table
    /// @returns the stream
    utils::StringStream& ToString(utils::StringStream& out, const SymbolTable& st) const override;
};

}  // namespace tint::ir::builtins

#endif  // SRC_TINT_IR_BUILTINS_TEXTURE_SAMPLE_BIAS_H_
