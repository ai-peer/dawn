// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/type/builtin_test.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/type/builtin.h"

#include <string>

#include "gtest/gtest.h"

#include "src/tint/utils/string.h"

namespace tint::type {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    Builtin value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"array", Builtin::kArray},
    {"bool", Builtin::kBool},
    {"f16", Builtin::kF16},
    {"f32", Builtin::kF32},
    {"i32", Builtin::kI32},
    {"mat2x2", Builtin::kMat2X2},
    {"mat2x2f", Builtin::kMat2X2F},
    {"mat2x2h", Builtin::kMat2X2H},
    {"mat2x3", Builtin::kMat2X3},
    {"mat2x3f", Builtin::kMat2X3F},
    {"mat2x3h", Builtin::kMat2X3H},
    {"mat2x4", Builtin::kMat2X4},
    {"mat2x4f", Builtin::kMat2X4F},
    {"mat2x4h", Builtin::kMat2X4H},
    {"mat3x2", Builtin::kMat3X2},
    {"mat3x2f", Builtin::kMat3X2F},
    {"mat3x2h", Builtin::kMat3X2H},
    {"mat3x3", Builtin::kMat3X3},
    {"mat3x3f", Builtin::kMat3X3F},
    {"mat3x3h", Builtin::kMat3X3H},
    {"mat3x4", Builtin::kMat3X4},
    {"mat3x4f", Builtin::kMat3X4F},
    {"mat3x4h", Builtin::kMat3X4H},
    {"mat4x2", Builtin::kMat4X2},
    {"mat4x2f", Builtin::kMat4X2F},
    {"mat4x2h", Builtin::kMat4X2H},
    {"mat4x3", Builtin::kMat4X3},
    {"mat4x3f", Builtin::kMat4X3F},
    {"mat4x3h", Builtin::kMat4X3H},
    {"mat4x4", Builtin::kMat4X4},
    {"mat4x4f", Builtin::kMat4X4F},
    {"mat4x4h", Builtin::kMat4X4H},
    {"sampler", Builtin::kSampler},
    {"sampler_comparison", Builtin::kSamplerComparison},
    {"texture_depth_2d", Builtin::kTextureDepth2D},
    {"texture_depth_2d_array", Builtin::kTextureDepth2DArray},
    {"texture_depth_cube", Builtin::kTextureDepthCube},
    {"texture_depth_cube_array", Builtin::kTextureDepthCubeArray},
    {"texture_depth_multisampled_2d", Builtin::kTextureDepthMultisampled2D},
    {"texture_external", Builtin::kTextureExternal},
    {"texture_storage_1d", Builtin::kTextureStorage1D},
    {"texture_storage_2d", Builtin::kTextureStorage2D},
    {"texture_storage_2d_array", Builtin::kTextureStorage2DArray},
    {"texture_storage_3d", Builtin::kTextureStorage3D},
    {"u32", Builtin::kU32},
    {"vec2f", Builtin::kVec2F},
    {"vec2h", Builtin::kVec2H},
    {"vec2i", Builtin::kVec2I},
    {"vec2u", Builtin::kVec2U},
    {"vec3f", Builtin::kVec3F},
    {"vec3h", Builtin::kVec3H},
    {"vec3i", Builtin::kVec3I},
    {"vec3u", Builtin::kVec3U},
    {"vec4f", Builtin::kVec4F},
    {"vec4h", Builtin::kVec4H},
    {"vec4i", Builtin::kVec4I},
    {"vec4u", Builtin::kVec4U},
};

static constexpr Case kInvalidCases[] = {
    {"arccy", Builtin::kUndefined},
    {"3a", Builtin::kUndefined},
    {"aVray", Builtin::kUndefined},
    {"1ool", Builtin::kUndefined},
    {"bqoJ", Builtin::kUndefined},
    {"bllo77", Builtin::kUndefined},
    {"fppqH", Builtin::kUndefined},
    {"", Builtin::kUndefined},
    {"Gb", Builtin::kUndefined},
    {"f3vi", Builtin::kUndefined},
    {"f8WW", Builtin::kUndefined},
    {"fxx", Builtin::kUndefined},
    {"igg", Builtin::kUndefined},
    {"X", Builtin::kUndefined},
    {"332", Builtin::kUndefined},
    {"mEt2x2", Builtin::kUndefined},
    {"atTTxPP", Builtin::kUndefined},
    {"ddatxxx", Builtin::kUndefined},
    {"m44t2x2f", Builtin::kUndefined},
    {"maSS2xVVf", Builtin::kUndefined},
    {"RatR22f", Builtin::kUndefined},
    {"mF2x9h", Builtin::kUndefined},
    {"matx2h", Builtin::kUndefined},
    {"VOORRH2h", Builtin::kUndefined},
    {"may2x", Builtin::kUndefined},
    {"mnnt77lrr3", Builtin::kUndefined},
    {"004t2x3", Builtin::kUndefined},
    {"a2oof", Builtin::kUndefined},
    {"zz2x3f", Builtin::kUndefined},
    {"miitppx1", Builtin::kUndefined},
    {"mat2xXXh", Builtin::kUndefined},
    {"9II5ann2x3h", Builtin::kUndefined},
    {"mataSSrHHYh", Builtin::kUndefined},
    {"kkx4", Builtin::kUndefined},
    {"jagRR", Builtin::kUndefined},
    {"mtb4", Builtin::kUndefined},
    {"mat2xjf", Builtin::kUndefined},
    {"at2x4f", Builtin::kUndefined},
    {"q2x4f", Builtin::kUndefined},
    {"matNN4h", Builtin::kUndefined},
    {"at24vv", Builtin::kUndefined},
    {"QQt2x4h", Builtin::kUndefined},
    {"a3xrf", Builtin::kUndefined},
    {"mat3j2", Builtin::kUndefined},
    {"m82wNN2", Builtin::kUndefined},
    {"matx2f", Builtin::kUndefined},
    {"mrrt3x2f", Builtin::kUndefined},
    {"Gat3x2f", Builtin::kUndefined},
    {"mat3x2FF", Builtin::kUndefined},
    {"at3h", Builtin::kUndefined},
    {"marrx2h", Builtin::kUndefined},
    {"ma3x", Builtin::kUndefined},
    {"Da3xJJ", Builtin::kUndefined},
    {"at3", Builtin::kUndefined},
    {"m11k3", Builtin::kUndefined},
    {"matx3f", Builtin::kUndefined},
    {"maJx3f", Builtin::kUndefined},
    {"mat3c3h", Builtin::kUndefined},
    {"mat3x3O", Builtin::kUndefined},
    {"KK_atvvtt3h", Builtin::kUndefined},
    {"5txxx8", Builtin::kUndefined},
    {"a__xqq", Builtin::kUndefined},
    {"maqq3x", Builtin::kUndefined},
    {"33atOx4f", Builtin::kUndefined},
    {"mtt63x9oQQ", Builtin::kUndefined},
    {"ma3x66f", Builtin::kUndefined},
    {"mtOxzz66", Builtin::kUndefined},
    {"mat3yy4h", Builtin::kUndefined},
    {"ZaHH4Z", Builtin::kUndefined},
    {"mWq4442", Builtin::kUndefined},
    {"OOt4x2", Builtin::kUndefined},
    {"oY4x2", Builtin::kUndefined},
    {"matx", Builtin::kUndefined},
    {"ma4xFf", Builtin::kUndefined},
    {"at4x2w", Builtin::kUndefined},
    {"fGtxKh", Builtin::kUndefined},
    {"matqKx2h", Builtin::kUndefined},
    {"matmmxFh", Builtin::kUndefined},
    {"at4x3", Builtin::kUndefined},
    {"matxq", Builtin::kUndefined},
    {"mb4bb3", Builtin::kUndefined},
    {"mi4x3f", Builtin::kUndefined},
    {"maOO4xq", Builtin::kUndefined},
    {"matTvvx3f", Builtin::kUndefined},
    {"maFF4x3h", Builtin::kUndefined},
    {"Pa00xQh", Builtin::kUndefined},
    {"mPt4x3h", Builtin::kUndefined},
    {"mss4x77", Builtin::kUndefined},
    {"maC4RRbb", Builtin::kUndefined},
    {"mat4xXX", Builtin::kUndefined},
    {"qaCC4xOOf", Builtin::kUndefined},
    {"ma4s4L", Builtin::kUndefined},
    {"mXt4x4f", Builtin::kUndefined},
    {"mat44h", Builtin::kUndefined},
    {"qa4O4", Builtin::kUndefined},
    {"mat4x22h", Builtin::kUndefined},
    {"syzzp0XX", Builtin::kUndefined},
    {"samVViP", Builtin::kUndefined},
    {"sannCer", Builtin::kUndefined},
    {"sampleHHcompAAisqqn", Builtin::kUndefined},
    {"sample_comparison", Builtin::kUndefined},
    {"samler_cfKmparion", Builtin::kUndefined},
    {"lePtre_dggpth_d", Builtin::kUndefined},
    {"texture_deph_2d", Builtin::kUndefined},
    {"TTextu4e_cepthN2d", Builtin::kUndefined},
    {"t77xture_deth_ld_pprray", Builtin::kUndefined},
    {"txture_depthN2zz_array", Builtin::kUndefined},
    {"teuuture_deptbb2_XXrray", Builtin::kUndefined},
    {"texture_depthcube", Builtin::kUndefined},
    {"x88ure_dQpth_cubK", Builtin::kUndefined},
    {"qe9ure_depth_cube", Builtin::kUndefined},
    {"texture_de11th_cube_array", Builtin::kUndefined},
    {"textur_dept22_cube_arraiF", Builtin::kUndefined},
    {"texture_depth7cube_array", Builtin::kUndefined},
    {"2exture_depth_multsamplNNd_2d", Builtin::kUndefined},
    {"texturVV_depth_multisampled_2d", Builtin::kUndefined},
    {"te11ture_depth_mWWltisampledw2d", Builtin::kUndefined},
    {"textureewwternal", Builtin::kUndefined},
    {"texture_externDl", Builtin::kUndefined},
    {"teKtre_external", Builtin::kUndefined},
    {"textuPPe_stor1rge_1h", Builtin::kUndefined},
    {"texture_storage_1", Builtin::kUndefined},
    {"texture_stoYYage_1d", Builtin::kUndefined},
    {"texttr_storaHHkkV2d", Builtin::kUndefined},
    {"texture_srrorage_2d", Builtin::kUndefined},
    {"texturessstorWWg_2d", Builtin::kUndefined},
    {"texture_storaY_2d_array", Builtin::kUndefined},
    {"teLture_stfraqe_2d_rray", Builtin::kUndefined},
    {"texuuu22e_storvvge_2dafray", Builtin::kUndefined},
    {"texturestorage3d", Builtin::kUndefined},
    {"teYYtre_storage_d", Builtin::kUndefined},
    {"teEtuYYe_stoyag77_3d", Builtin::kUndefined},
    {"Mo2", Builtin::kUndefined},
    {"uMM", Builtin::kUndefined},
    {"u552", Builtin::kUndefined},
    {"N2f", Builtin::kUndefined},
    {"ve33f", Builtin::kUndefined},
    {"3ec2f", Builtin::kUndefined},
    {"mecI", Builtin::kUndefined},
    {"vrnK2h", Builtin::kUndefined},
    {"v2", Builtin::kUndefined},
    {"ILLci", Builtin::kUndefined},
    {"ecf", Builtin::kUndefined},
    {"UecRY", Builtin::kUndefined},
    {"vechu", Builtin::kUndefined},
    {"qeIIu", Builtin::kUndefined},
    {"Hec2u", Builtin::kUndefined},
    {"eQQvv", Builtin::kUndefined},
    {"e66f", Builtin::kUndefined},
    {"7Wc3", Builtin::kUndefined},
    {"ve055DD", Builtin::kUndefined},
    {"IIec3h", Builtin::kUndefined},
    {"vec3", Builtin::kUndefined},
    {"rec3", Builtin::kUndefined},
    {"lec3i", Builtin::kUndefined},
    {"GeJ3i", Builtin::kUndefined},
    {"ey3u", Builtin::kUndefined},
    {"vc3u", Builtin::kUndefined},
    {"IIeBB3u", Builtin::kUndefined},
    {"TTec338", Builtin::kUndefined},
    {"veUUSS4nnd", Builtin::kUndefined},
    {"vZx5CC", Builtin::kUndefined},
    {"kkec4q", Builtin::kUndefined},
    {"v005ih", Builtin::kUndefined},
    {"vnIIc4h", Builtin::kUndefined},
    {"cceW", Builtin::kUndefined},
    {"cKK", Builtin::kUndefined},
    {"vec66i", Builtin::kUndefined},
    {"vePPK", Builtin::kUndefined},
    {"vexxu", Builtin::kUndefined},
    {"qec4u", Builtin::kUndefined},
};

using BuiltinParseTest = testing::TestWithParam<Case>;

TEST_P(BuiltinParseTest, Parse) {
    const char* string = GetParam().string;
    Builtin expect = GetParam().value;
    EXPECT_EQ(expect, ParseBuiltin(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, BuiltinParseTest, testing::ValuesIn(kInvalidCases));

using BuiltinPrintTest = testing::TestWithParam<Case>;

TEST_P(BuiltinPrintTest, Print) {
    Builtin value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, utils::ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinPrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::type
