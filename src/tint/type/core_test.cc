// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/type/core_test.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/type/core.h"

#include <string>

#include "gtest/gtest.h"

#include "src/tint/utils/string.h"

namespace tint::type {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    Core value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"bool", Core::kBool},       {"f16", Core::kF16},       {"f32", Core::kF32},
    {"i32", Core::kI32},         {"mat2x2", Core::kMat2X2}, {"mat2x2f", Core::kMat2X2F},
    {"mat2x2h", Core::kMat2X2H}, {"mat2x3", Core::kMat2X3}, {"mat2x3f", Core::kMat2X3F},
    {"mat2x3h", Core::kMat2X3H}, {"mat2x4", Core::kMat2X4}, {"mat2x4f", Core::kMat2X4F},
    {"mat2x4h", Core::kMat2X4H}, {"mat3x2", Core::kMat3X2}, {"mat3x2f", Core::kMat3X2F},
    {"mat3x2h", Core::kMat3X2H}, {"mat3x3", Core::kMat3X3}, {"mat3x3f", Core::kMat3X3F},
    {"mat3x3h", Core::kMat3X3H}, {"mat3x4", Core::kMat3X4}, {"mat3x4f", Core::kMat3X4F},
    {"mat3x4h", Core::kMat3X4H}, {"mat4x2", Core::kMat4X2}, {"mat4x2f", Core::kMat4X2F},
    {"mat4x2h", Core::kMat4X2H}, {"mat4x3", Core::kMat4X3}, {"mat4x3f", Core::kMat4X3F},
    {"mat4x3h", Core::kMat4X3H}, {"mat4x4", Core::kMat4X4}, {"mat4x4f", Core::kMat4X4F},
    {"mat4x4h", Core::kMat4X4H}, {"u32", Core::kU32},       {"vec2f", Core::kVec2F},
    {"vec2h", Core::kVec2H},     {"vec2i", Core::kVec2I},   {"vec2u", Core::kVec2U},
    {"vec3f", Core::kVec3F},     {"vec3h", Core::kVec3H},   {"vec3i", Core::kVec3I},
    {"vec3u", Core::kVec3U},     {"vec4f", Core::kVec4F},   {"vec4h", Core::kVec4H},
    {"vec4i", Core::kVec4I},     {"vec4u", Core::kVec4U},
};

static constexpr Case kInvalidCases[] = {
    {"ccol", Core::kUndefined},        {"3", Core::kUndefined},
    {"bVol", Core::kUndefined},        {"116", Core::kUndefined},
    {"qJ6", Core::kUndefined},         {"f17ll", Core::kUndefined},
    {"fppqH", Core::kUndefined},       {"", Core::kUndefined},
    {"Gb", Core::kUndefined},          {"i3vi", Core::kUndefined},
    {"i8WW", Core::kUndefined},        {"ixx", Core::kUndefined},
    {"maXggx", Core::kUndefined},      {"Xtx2", Core::kUndefined},
    {"mat3x", Core::kUndefined},       {"at2x2f", Core::kUndefined},
    {"matjjx2f", Core::kUndefined},    {"mvxtWf", Core::kUndefined},
    {"KKyyt2x2jj", Core::kUndefined},  {"Rat2xP", Core::kUndefined},
    {"mt2x2h", Core::kUndefined},      {"Satxdj", Core::kUndefined},
    {"Jat2V3", Core::kUndefined},      {"may2x", Core::kUndefined},
    {"llnarr2773f", Core::kUndefined}, {"mat24300", Core::kUndefined},
    {"a2oof", Core::kUndefined},       {"zz2x3h", Core::kUndefined},
    {"miitppx1", Core::kUndefined},    {"mat2xXXh", Core::kUndefined},
    {"55IIt2nn99", Core::kUndefined},  {"aHHrrt2xSS", Core::kUndefined},
    {"kkx4", Core::kUndefined},        {"jatgRx", Core::kUndefined},
    {"mb2x4", Core::kUndefined},       {"mat2xjf", Core::kUndefined},
    {"at2x4h", Core::kUndefined},      {"q2x4h", Core::kUndefined},
    {"matNN4h", Core::kUndefined},     {"mavv2", Core::kUndefined},
    {"maQQx2", Core::kUndefined},      {"a3xrf", Core::kUndefined},
    {"mat3xjf", Core::kUndefined},     {"mNNw3x28", Core::kUndefined},
    {"matx2f", Core::kUndefined},      {"mrrt3x2h", Core::kUndefined},
    {"Gat3x2h", Core::kUndefined},     {"mat3x2FF", Core::kUndefined},
    {"mtx", Core::kUndefined},         {"mrrt3x", Core::kUndefined},
    {"ma3x", Core::kUndefined},        {"Da3xJJf", Core::kUndefined},
    {"ma83", Core::kUndefined},        {"m11k3", Core::kUndefined},
    {"matx3h", Core::kUndefined},      {"maJx3h", Core::kUndefined},
    {"mat3c3h", Core::kUndefined},     {"mat3O4", Core::kUndefined},
    {"ttKavv3x__", Core::kUndefined},  {"5txxx8", Core::kUndefined},
    {"__qatF4", Core::kUndefined},     {"matqx4f", Core::kUndefined},
    {"33atOx4f", Core::kUndefined},    {"mtt63x9oQQ", Core::kUndefined},
    {"ma3x66h", Core::kUndefined},     {"mtOxzz66", Core::kUndefined},
    {"myyt4x2", Core::kUndefined},     {"HHZx2", Core::kUndefined},
    {"mWq4442", Core::kUndefined},     {"mOO4x2f", Core::kUndefined},
    {"oatY2f", Core::kUndefined},      {"matx", Core::kUndefined},
    {"ma4xFh", Core::kUndefined},      {"at4x2w", Core::kUndefined},
    {"fGtxKh", Core::kUndefined},      {"qatKKx3", Core::kUndefined},
    {"mmmt4x3", Core::kUndefined},     {"at4x3", Core::kUndefined},
    {"mt4x3q", Core::kUndefined},      {"mat4xbb", Core::kUndefined},
    {"mi4x3f", Core::kUndefined},      {"maOO4xq", Core::kUndefined},
    {"matTvvx3h", Core::kUndefined},   {"maFF4x3h", Core::kUndefined},
    {"mtQ00P", Core::kUndefined},      {"maP4x4", Core::kUndefined},
    {"mss4x77", Core::kUndefined},     {"RRCbb4x4f", Core::kUndefined},
    {"mXXt4x4f", Core::kUndefined},    {"qaCC4xOOf", Core::kUndefined},
    {"ma4s4L", Core::kUndefined},      {"mXt4x4h", Core::kUndefined},
    {"mat44h", Core::kUndefined},      {"q", Core::kUndefined},
    {"u322", Core::kUndefined},        {"0yz2", Core::kUndefined},
    {"ieVVP", Core::kUndefined},       {"venCf", Core::kUndefined},
    {"vHc2Aq", Core::kUndefined},      {"ve2h", Core::kUndefined},
    {"vefK", Core::kUndefined},        {"vgg2", Core::kUndefined},
    {"veci", Core::kUndefined},        {"4TNc2i", Core::kUndefined},
    {"ppec7l", Core::kUndefined},      {"zNe2u", Core::kUndefined},
    {"uXXb2u", Core::kUndefined},      {"vec2", Core::kUndefined},
    {"883K", Core::kUndefined},        {"vq9f", Core::kUndefined},
    {"vec311", Core::kUndefined},      {"22ciih", Core::kUndefined},
    {"ec77h", Core::kUndefined},       {"NN23h", Core::kUndefined},
    {"vVVc3i", Core::kUndefined},      {"WW11w3i", Core::kUndefined},
    {"vcwwi", Core::kUndefined},       {"vDc3u", Core::kUndefined},
    {"vecK", Core::kUndefined},        {"f11r3PP", Core::kUndefined},
    {"ve4f", Core::kUndefined},        {"vec4YY", Core::kUndefined},
    {"vkktHH", Core::kUndefined},      {"rrec4h", Core::kUndefined},
    {"vWWssh", Core::kUndefined},      {"veYh", Core::kUndefined},
    {"eq4f", Core::kUndefined},        {"u22ec4i", Core::kUndefined},
    {"c4i", Core::kUndefined},         {"vec4", Core::kUndefined},
    {"vYyc47E", Core::kUndefined},     {"veMou", Core::kUndefined},
};

using CoreParseTest = testing::TestWithParam<Case>;

TEST_P(CoreParseTest, Parse) {
    const char* string = GetParam().string;
    Core expect = GetParam().value;
    EXPECT_EQ(expect, ParseCore(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, CoreParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, CoreParseTest, testing::ValuesIn(kInvalidCases));

using CorePrintTest = testing::TestWithParam<Case>;

TEST_P(CorePrintTest, Print) {
    Core value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, utils::ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, CorePrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::type
