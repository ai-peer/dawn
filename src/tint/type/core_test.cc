// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/type/core_test.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/type/core.h"

#include <string>

#include "gtest/gtest.h"

#include "src/tint/utils/string.h"

namespace tint::type {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    Core value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"mat2x2f", Core::kMat2X2F}, {"mat2x2h", Core::kMat2X2H}, {"mat2x3f", Core::kMat2X3F},
    {"mat2x3h", Core::kMat2X3H}, {"mat2x4f", Core::kMat2X4F}, {"mat2x4h", Core::kMat2X4H},
    {"mat3x2f", Core::kMat3X2F}, {"mat3x2h", Core::kMat3X2H}, {"mat3x3f", Core::kMat3X3F},
    {"mat3x3h", Core::kMat3X3H}, {"mat3x4f", Core::kMat3X4F}, {"mat3x4h", Core::kMat3X4H},
    {"mat4x2f", Core::kMat4X2F}, {"mat4x2h", Core::kMat4X2H}, {"mat4x3f", Core::kMat4X3F},
    {"mat4x3h", Core::kMat4X3H}, {"mat4x4f", Core::kMat4X4F}, {"mat4x4h", Core::kMat4X4H},
    {"vec2f", Core::kVec2F},     {"vec2h", Core::kVec2H},     {"vec2i", Core::kVec2I},
    {"vec2u", Core::kVec2U},     {"vec3f", Core::kVec3F},     {"vec3h", Core::kVec3H},
    {"vec3i", Core::kVec3I},     {"vec3u", Core::kVec3U},     {"vec4f", Core::kVec4F},
    {"vec4h", Core::kVec4H},     {"vec4i", Core::kVec4I},     {"vec4u", Core::kVec4U},
};

static constexpr Case kInvalidCases[] = {
    {"at2x2cc", Core::kUndefined},     {"l23f", Core::kUndefined},
    {"matVx2f", Core::kUndefined},     {"mat212h", Core::kUndefined},
    {"mqtJx2h", Core::kUndefined},     {"mat2x27ll", Core::kUndefined},
    {"ppqqt23HH", Core::kUndefined},   {"macv", Core::kUndefined},
    {"bt2xGf", Core::kUndefined},      {"mat2iivh", Core::kUndefined},
    {"8WWt2x3h", Core::kUndefined},    {"mxx2x3h", Core::kUndefined},
    {"mX2x4gg", Core::kUndefined},     {"a2xXf", Core::kUndefined},
    {"mat234f", Core::kUndefined},     {"Eat2x4h", Core::kUndefined},
    {"mPTT2x4h", Core::kUndefined},    {"mat2xdxx", Core::kUndefined},
    {"m44t3x2f", Core::kUndefined},    {"maSS3xVVf", Core::kUndefined},
    {"RatR22f", Core::kUndefined},     {"mF3x9h", Core::kUndefined},
    {"matx2h", Core::kUndefined},      {"VOORRH2h", Core::kUndefined},
    {"ma3xyf", Core::kUndefined},      {"llnarr3773f", Core::kUndefined},
    {"mat34300", Core::kUndefined},    {"a3ooh", Core::kUndefined},
    {"zz3x3h", Core::kUndefined},      {"miitppx1", Core::kUndefined},
    {"mat3xXXf", Core::kUndefined},    {"9II5ann3x4f", Core::kUndefined},
    {"mataSSrHHYf", Core::kUndefined}, {"makkh", Core::kUndefined},
    {"jatgRx", Core::kUndefined},      {"mb3x4", Core::kUndefined},
    {"mat4xjf", Core::kUndefined},     {"at4x2f", Core::kUndefined},
    {"q4x2f", Core::kUndefined},       {"matNN2h", Core::kUndefined},
    {"at42vv", Core::kUndefined},      {"QQt4x2h", Core::kUndefined},
    {"maffxr", Core::kUndefined},      {"mat4xjf", Core::kUndefined},
    {"mNNw4x38", Core::kUndefined},    {"matx3h", Core::kUndefined},
    {"mrrt4x3h", Core::kUndefined},    {"Gat4x3h", Core::kUndefined},
    {"mat4x4FF", Core::kUndefined},    {"at4f", Core::kUndefined},
    {"marrx4f", Core::kUndefined},     {"t4x4h", Core::kUndefined},
    {"Da4xJJh", Core::kUndefined},     {"ma84", Core::kUndefined},
    {"e2k", Core::kUndefined},         {"vecf", Core::kUndefined},
    {"Jecf", Core::kUndefined},        {"ec2h", Core::kUndefined},
    {"_KKttcH", Core::kUndefined},     {"vexxh", Core::kUndefined},
    {"__qcF", Core::kUndefined},       {"vc2qq", Core::kUndefined},
    {"33e62i", Core::kUndefined},      {"6QQott2u", Core::kUndefined},
    {"v6c2u", Core::kUndefined},       {"zzc2O6", Core::kUndefined},
    {"vyyc3f", Core::kUndefined},      {"vcZZ", Core::kUndefined},
    {"ecWq4f", Core::kUndefined},      {"vOO3h", Core::kUndefined},
    {"oYe3", Core::kUndefined},        {"v3", Core::kUndefined},
    {"Fe3i", Core::kUndefined},        {"vwci", Core::kUndefined},
    {"vefi", Core::kUndefined},        {"KKeq3u", Core::kUndefined},
    {"vFmm3u", Core::kUndefined},      {"vecu", Core::kUndefined},
    {"qc4f", Core::kUndefined},        {"vecbb", Core::kUndefined},
    {"iic4", Core::kUndefined},        {"vqOOh", Core::kUndefined},
    {"vevvTTh", Core::kUndefined},     {"veFF4h", Core::kUndefined},
    {"00PfQ", Core::kUndefined},       {"vec4P", Core::kUndefined},
    {"vec77s", Core::kUndefined},      {"vecbbCu", Core::kUndefined},
    {"vecXXu", Core::kUndefined},      {"CCOOec4", Core::kUndefined},
};

using CoreParseTest = testing::TestWithParam<Case>;

TEST_P(CoreParseTest, Parse) {
    const char* string = GetParam().string;
    Core expect = GetParam().value;
    EXPECT_EQ(expect, ParseCore(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, CoreParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, CoreParseTest, testing::ValuesIn(kInvalidCases));

using CorePrintTest = testing::TestWithParam<Case>;

TEST_P(CorePrintTest, Print) {
    Core value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, utils::ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, CorePrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::type
