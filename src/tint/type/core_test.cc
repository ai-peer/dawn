// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/type/core_test.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/type/core.h"

#include <string>

#include "gtest/gtest.h"

#include "src/tint/utils/string.h"

namespace tint::type {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    Core value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"bool", Core::kBool},       {"f16", Core::kF16},         {"f32", Core::kF32},
    {"i32", Core::kI32},         {"mat2x2f", Core::kMat2X2F}, {"mat2x2h", Core::kMat2X2H},
    {"mat2x3f", Core::kMat2X3F}, {"mat2x3h", Core::kMat2X3H}, {"mat2x4f", Core::kMat2X4F},
    {"mat2x4h", Core::kMat2X4H}, {"mat3x2f", Core::kMat3X2F}, {"mat3x2h", Core::kMat3X2H},
    {"mat3x3f", Core::kMat3X3F}, {"mat3x3h", Core::kMat3X3H}, {"mat3x4f", Core::kMat3X4F},
    {"mat3x4h", Core::kMat3X4H}, {"mat4x2f", Core::kMat4X2F}, {"mat4x2h", Core::kMat4X2H},
    {"mat4x3f", Core::kMat4X3F}, {"mat4x3h", Core::kMat4X3H}, {"mat4x4f", Core::kMat4X4F},
    {"mat4x4h", Core::kMat4X4H}, {"u32", Core::kU32},         {"vec2f", Core::kVec2F},
    {"vec2h", Core::kVec2H},     {"vec2i", Core::kVec2I},     {"vec2u", Core::kVec2U},
    {"vec3f", Core::kVec3F},     {"vec3h", Core::kVec3H},     {"vec3i", Core::kVec3I},
    {"vec3u", Core::kVec3U},     {"vec4f", Core::kVec4F},     {"vec4h", Core::kVec4H},
    {"vec4i", Core::kVec4I},     {"vec4u", Core::kVec4U},
};

static constexpr Case kInvalidCases[] = {
    {"ccol", Core::kUndefined},        {"3", Core::kUndefined},
    {"bVol", Core::kUndefined},        {"116", Core::kUndefined},
    {"qJ6", Core::kUndefined},         {"f17ll", Core::kUndefined},
    {"fppqH", Core::kUndefined},       {"", Core::kUndefined},
    {"Gb", Core::kUndefined},          {"i3vi", Core::kUndefined},
    {"i8WW", Core::kUndefined},        {"ixx", Core::kUndefined},
    {"mX2x2gg", Core::kUndefined},     {"a2xXf", Core::kUndefined},
    {"mat232f", Core::kUndefined},     {"Eat2x2h", Core::kUndefined},
    {"mPTT2x2h", Core::kUndefined},    {"mat2xdxx", Core::kUndefined},
    {"m44t2x3f", Core::kUndefined},    {"maSS2xVVf", Core::kUndefined},
    {"RatR22f", Core::kUndefined},     {"mF2x9h", Core::kUndefined},
    {"matx3h", Core::kUndefined},      {"VOORRH3h", Core::kUndefined},
    {"ma2xyf", Core::kUndefined},      {"llnarr2774f", Core::kUndefined},
    {"mat24400", Core::kUndefined},    {"a2ooh", Core::kUndefined},
    {"zz2x4h", Core::kUndefined},      {"miitppx1", Core::kUndefined},
    {"mat3xXXf", Core::kUndefined},    {"9II5ann3x2f", Core::kUndefined},
    {"mataSSrHHYf", Core::kUndefined}, {"makkh", Core::kUndefined},
    {"jatgRx", Core::kUndefined},      {"mb3x2", Core::kUndefined},
    {"mat3xjf", Core::kUndefined},     {"at3x3f", Core::kUndefined},
    {"q3x3f", Core::kUndefined},       {"matNN3h", Core::kUndefined},
    {"at33vv", Core::kUndefined},      {"QQt3x3h", Core::kUndefined},
    {"maffxr", Core::kUndefined},      {"mat3xjf", Core::kUndefined},
    {"mNNw3x48", Core::kUndefined},    {"matx4h", Core::kUndefined},
    {"mrrt3x4h", Core::kUndefined},    {"Gat3x4h", Core::kUndefined},
    {"mat4x2FF", Core::kUndefined},    {"at4f", Core::kUndefined},
    {"marrx2f", Core::kUndefined},     {"t4x2h", Core::kUndefined},
    {"Da4xJJh", Core::kUndefined},     {"ma82", Core::kUndefined},
    {"m11k3", Core::kUndefined},       {"matx3f", Core::kUndefined},
    {"maJx3f", Core::kUndefined},      {"mat4c3h", Core::kUndefined},
    {"mat4x3O", Core::kUndefined},     {"KK_atvvtt3h", Core::kUndefined},
    {"xx84x4f", Core::kUndefined},     {"__qatF4", Core::kUndefined},
    {"matqx4f", Core::kUndefined},     {"33atOx4h", Core::kUndefined},
    {"mtt64x9oQQ", Core::kUndefined},  {"ma4x66h", Core::kUndefined},
    {"zzO6", Core::kUndefined},        {"uyy2", Core::kUndefined},
    {"HZ", Core::kUndefined},          {"ecWq4f", Core::kUndefined},
    {"vOO2f", Core::kUndefined},       {"oYe2", Core::kUndefined},
    {"v2", Core::kUndefined},          {"Fe2h", Core::kUndefined},
    {"vwch", Core::kUndefined},        {"vefi", Core::kUndefined},
    {"KKeq2i", Core::kUndefined},      {"vFmm2i", Core::kUndefined},
    {"vecu", Core::kUndefined},        {"qc2u", Core::kUndefined},
    {"vecbb", Core::kUndefined},       {"iic3", Core::kUndefined},
    {"vqOOf", Core::kUndefined},       {"vevvTTf", Core::kUndefined},
    {"veFF3h", Core::kUndefined},      {"00PfQ", Core::kUndefined},
    {"vec3P", Core::kUndefined},       {"vec77s", Core::kUndefined},
    {"vecbbCi", Core::kUndefined},     {"vecXXi", Core::kUndefined},
    {"CCOOec3", Core::kUndefined},     {"vs3u", Core::kUndefined},
    {"Xec3u", Core::kUndefined},       {"ve4f", Core::kUndefined},
    {"qq4", Core::kUndefined},         {"vec422", Core::kUndefined},
    {"vezzXy", Core::kUndefined},      {"ieVVP", Core::kUndefined},
    {"venCh", Core::kUndefined},       {"vHc4Aq", Core::kUndefined},
    {"ve4i", Core::kUndefined},        {"vefK", Core::kUndefined},
    {"vgg4", Core::kUndefined},        {"vecu", Core::kUndefined},
    {"4TNc4u", Core::kUndefined},
};

using CoreParseTest = testing::TestWithParam<Case>;

TEST_P(CoreParseTest, Parse) {
    const char* string = GetParam().string;
    Core expect = GetParam().value;
    EXPECT_EQ(expect, ParseCore(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, CoreParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, CoreParseTest, testing::ValuesIn(kInvalidCases));

using CorePrintTest = testing::TestWithParam<Case>;

TEST_P(CorePrintTest, Print) {
    Core value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, utils::ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, CorePrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::type
