{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "08e03d69_9b11c8c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-28T16:25:48Z",
      "side": 1,
      "message": "LGTM - Corentin, could you take a look as well?",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91985bc1_74c5fe1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T17:02:21Z",
      "side": 1,
      "message": "LGTM overall with some questions / suggestions. I think the structure could be overkill for now, but we\u0027ll see how it works when we add the other backends.",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8d4cdb6_c05a70ec",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 34
      },
      "lineNbr": 198,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T17:02:21Z",
      "side": 1,
      "message": "Question: are we going to add more logic in the frontend eventually? If not, we could remove the indirection and do this on the vulkan::Device directly (or even create the cache directly in pipelines?)",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4217d382_ad9b237d",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 34
      },
      "lineNbr": 198,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-28T20:06:35Z",
      "side": 1,
      "message": "Yea, eventually I was hoping to move the flushing of theses caches to the device-side so that we could do periodic flushes or something instead of flushing in the same thread/time as creation. (That logic could be shared across all backends, hence the reasoning to plumb it through to the frontend.)\n\nThe idea would be that the device side GetOrCreatePipelineCache could also record the cache before returning it, and then it would be straightforwards from there.\n\nPeriodic flushing would become even more important if we later on deal with monolithic caches also.",
      "parentUuid": "c8d4cdb6_c05a70ec",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "858b72d6_7261d7ae",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 84,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T17:02:21Z",
      "side": 1,
      "message": "We do we need constThis?",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9386492_ab8383b6",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 84,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-28T20:06:35Z",
      "side": 1,
      "message": "We did before because we had an overloaded version of GetLayout and GetCacheKey, and the resolver hides the const version since we are in a non-const function. I updated the layout code to use a const ref which fixes that side, and changed the CachedObject to expose the cache key member directly to derived classes who need to modify it.",
      "parentUuid": "858b72d6_7261d7ae",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2a8a442_aab1c029",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 84,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-29T14:15:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f9386492_ab8383b6",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bdd6b79_32b6962b",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-28T16:25:48Z",
      "side": 1,
      "message": "nit: I think you could do Ref\u003cPipelineCache\u003e cache \u003d ToBackend(GetDevice()-\u003e...);",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 89,
        "endChar": 12
      },
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72b70354_01c009e9",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 89,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-28T20:06:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bdd6b79_32b6962b",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 89,
        "endChar": 12
      },
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2efc6479_5d38d890",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T17:02:21Z",
      "side": 1,
      "message": "This logic will also be present all the time. Maybe it could just be hidden in Flush (or FlushIfNeeded).",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e9364de_e9ebfbc8",
        "filename": "src/dawn/native/vulkan/ComputePipelineVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 95,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-28T20:06:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2efc6479_5d38d890",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "037ac9c0_cff4666a",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 173,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T17:02:21Z",
      "side": 1,
      "message": "Is https://www.khronos.org/registry/vulkan/specs/1.3/html/vkspec.html#:~:text\u003ddeviceName%5BVK_MAX_PHYSICAL_DEVICE_NAME_SIZE%5D%3B%0A%20%20%20%20uint8_t-,pipelineCacheUUID%5BVK_UUID_SIZE%5D%3B,-VkPhysicalDeviceLimits%20%20%20%20%20%20%20%20%20%20%20%20%20%20limits%3B%0A%20%20%20%20VkPhysicalDeviceSparseProperties used as part of the CacheKey? Vulkan requires that we do.",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1c9a68b_3004d3a7",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 173,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-28T20:06:35Z",
      "side": 1,
      "message": "Austin mentioned this before, and we had chatted about it and thought maybe we could leave it out at the time since device id + vendor id seemed like it should be sufficient. I took a look and seemed like we already had it easily available though, so added it to the key now.",
      "parentUuid": "037ac9c0_cff4666a",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01c0eb59_1727a063",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 78,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T17:02:21Z",
      "side": 1,
      "message": "It seems that this could be in PIpelineCacheBase::InitializeBase since other backends will likely have the same logic of trying to load and getting a hit or not.",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d70085d9_0c0dbaa0",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 34
      },
      "lineNbr": 78,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-04-28T20:06:35Z",
      "side": 1,
      "message": "I actually had it like that before and had the CachedBlob as a member in PipelineCacheBase, but Austin mentioned that it was sort of confusing to keep the blob around when it isn\u0027t needed anymore and the flushing logic doesn\u0027t use it (in a previous comment).\n\nI tried to compromise here so that the logic is in the base class now, but we don\u0027t keep a CachedBlob alive with the data either. PTAL.",
      "parentUuid": "01c0eb59_1727a063",
      "revId": "4e465345a93e57aa024d019db191355a805b6073",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}