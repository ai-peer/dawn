{
  "comments": [
    {
      "key": {
        "uuid": "52265c0f_c4dab85c",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 618,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This doesn\u0027t need to be const*const* because it isn\u0027t extensible.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef45db7a_3757782d",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 618,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-21T05:59:18Z",
      "side": 1,
      "message": "Do you mean we should use \"const*\"? That said, we only need to use a pointer, not a pointer to an array of pointers?\n\nFor example, the developers can declare an array like dawn::VertexAttributeDesciptor attributes[N]; then assign the pointer \u0027attribtes\u0027 to inputState.attrubtes:\ninputState.attrubtes \u003d attributes;\n\nJust a fast double-check, in order to understand you correctly.",
      "parentUuid": "52265c0f_c4dab85c",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb6a9c53_2c602bd7",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 620,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc733d99_e0b4c4dd",
        "filename": "examples/CHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "I think we still need to link in an empty input state descriptor.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64db39c9_d5c251de",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Here and in other places we should probably move the initialization inline. Like so:\n\n descriptor.cInputState.numInputs \u003d 1;\n descriptor.cInputState.cInputs[0]-\u003einputSlot \u003d 0;\n descriptor.cInputState.cInputs[0]-\u003estride \u003d 4 * sizeof(float);\n descriptor.cInputState.cInputs[0]-\u003estepMode \u003d dawn::InputStepMode::Vertex.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0f4e538_76f86d9c",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-21T05:59:18Z",
      "side": 1,
      "message": "If we use \"const *\" to annotate vertex input descriptor. Then it should be \".\", that said, the code snippet is:\ndescriptor.cInputState.numInputs \u003d 1;\ndescriptor.cInputState.cInputs[0].inputSlot \u003d 0;\ndescriptor.cInputState.cInputs[0].stride \u003d 4 * sizeof(float);\ndescriptor.cInputState.cInputs[0].stepMode \u003d dawn::InputStepMode::Vertex;\n\nJust want to make sure that I understand you correctly.",
      "parentUuid": "64db39c9_d5c251de",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1011a0b_4877b20a",
        "filename": "examples/CubeReflection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This could be made simpler if we have the ComboInputDescriptor and the inline initialization discussed above.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5151d66_c36d4e6c",
        "filename": "examples/glTFViewer/glTFViewer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 243,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "this wouldn\u0027t be needed with cInputDescriptor.",
      "range": {
        "startLine": 241,
        "startChar": 0,
        "endLine": 243,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c84c3e8_cc467364",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: \"Input set twice\"",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec71c324_dfff869e",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ea919e_a22e82b8",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Chromium style-guide wants references to be constants except in rare exceptions. Can these be pointers? Ditto in sub-validation functions.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 81,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e80279b_dd0705d3",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 390,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: ASSERT(!IsError()) here too.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8baab113_fbf1c3ba",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 470,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto !IsError",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb42328a_d9567924",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: const both for the return value and the function.",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b54a31c_062ef72f",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Where is this used? (it wasn\u0027t used previously)",
      "range": {
        "startLine": 66,
        "startChar": 42,
        "endLine": 66,
        "endChar": 65
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60aff73f_ff0d2292",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This is an implementation detail and should be hidden as a private variable (and in mMemberCase)",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53dc994f_4f4e27b4",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: we could remove this include and replace it by a forward declaration around [1]",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7010a44_0448168e",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "[1]",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a385d8_78258010",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 305,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Can this be an std::array to help with type-safety when passing it to ComputeInputLayout? Right now it takes a single pointer which could be an array of any size.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "200226c2_d3141b14",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This is only used by this class, can the method be made private?",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80652865_67272c5a",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: Make, the ObjectiveC convention is that method called Make* or Create* return an object which is owned by the caller, while other method names just return a reference to an object owned by the callee.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8875b4f_7002deed",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "We are leaking the vertex descriptor here. Can it be released at the end of the function?",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06e7d0dd_e8862715",
        "filename": "src/dawn_native/opengl/RenderPipelineGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This should be done a single time on pipeline creation. In OpenGL a VertexArrayObject caches some state related to vertex inputs so they can be set quickly. Here we\u0027re creating and leaking a new one on every draw, when instead we should reuse it.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28534ba6_f8265149",
        "filename": "src/dawn_native/opengl/RenderPipelineGL.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Can we add a TODO that this will need to be deduplicated between pipelines?\n\nAlso this could be initialized to 0 (the null object in OpenGL) and freed on pipeline destruction.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20970003_bab19d84",
        "filename": "src/dawn_native/vulkan/RenderPipelineVk.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto, this can be private.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea78c465_c6fcf9ce",
        "filename": "src/tests/end2end/InputStateTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "did not review yet.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a62e94f9_2af17e9c",
        "filename": "src/tests/end2end/PrimitiveTopologyTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: these are constant, let\u0027s just move them to pipeline creation time and get rid of the members.",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 176,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e6d37bd_dbd81c8e",
        "filename": "src/tests/unittests/validation/InputStateValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "did not review yet.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "718ad5da_449db109",
        "filename": "src/tests/unittests/validation/VertexBufferValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: this wouldn\u0027t be needed with CombeInputDescriptor.",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63b4bf20_bfcf5663",
        "filename": "src/tests/unittests/wire/WireOptionalTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nextInChain \u003d nullptr too.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c4e06ee_21f1703e",
        "filename": "src/utils/ComboRenderPipelineDescriptor.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Mmmh this is weird because it feels like cInputState should be a ComboInputStateDescriptor with cInputs, cAttributes that by default point to mInputs and mAttributes (like mColorStates in the ComboRenderPipelineDescriptor).",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}