{
  "comments": [
    {
      "key": {
        "uuid": "52265c0f_c4dab85c",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 618,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This doesn\u0027t need to be const*const* because it isn\u0027t extensible.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef45db7a_3757782d",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 618,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-21T05:59:18Z",
      "side": 1,
      "message": "Do you mean we should use \"const*\"? That said, we only need to use a pointer, not a pointer to an array of pointers?\n\nFor example, the developers can declare an array like dawn::VertexAttributeDesciptor attributes[N]; then assign the pointer \u0027attribtes\u0027 to inputState.attrubtes:\ninputState.attrubtes \u003d attributes;\n\nJust a fast double-check, in order to understand you correctly.",
      "parentUuid": "52265c0f_c4dab85c",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "737b89e9_c40cbc50",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 618,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-21T07:00:53Z",
      "side": 1,
      "message": "Yep that\u0027s it, though we should probably have the ComboInputStateDescriptor contain that array in most cases.",
      "parentUuid": "ef45db7a_3757782d",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef20df15_612c7ddb",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 618,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "737b89e9_c40cbc50",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb6a9c53_2c602bd7",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 620,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58574f0e_b3be1bdc",
        "filename": "dawn.json",
        "patchSetId": 4
      },
      "lineNbr": 620,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb6a9c53_2c602bd7",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc733d99_e0b4c4dd",
        "filename": "examples/CHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "I think we still need to link in an empty input state descriptor.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f8d858c_7aba3a3a",
        "filename": "examples/CHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc733d99_e0b4c4dd",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64db39c9_d5c251de",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Here and in other places we should probably move the initialization inline. Like so:\n\n descriptor.cInputState.numInputs \u003d 1;\n descriptor.cInputState.cInputs[0]-\u003einputSlot \u003d 0;\n descriptor.cInputState.cInputs[0]-\u003estride \u003d 4 * sizeof(float);\n descriptor.cInputState.cInputs[0]-\u003estepMode \u003d dawn::InputStepMode::Vertex.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0f4e538_76f86d9c",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-21T05:59:18Z",
      "side": 1,
      "message": "If we use \"const *\" to annotate vertex input descriptor. Then it should be \".\", that said, the code snippet is:\ndescriptor.cInputState.numInputs \u003d 1;\ndescriptor.cInputState.cInputs[0].inputSlot \u003d 0;\ndescriptor.cInputState.cInputs[0].stride \u003d 4 * sizeof(float);\ndescriptor.cInputState.cInputs[0].stepMode \u003d dawn::InputStepMode::Vertex;\n\nJust want to make sure that I understand you correctly.",
      "parentUuid": "64db39c9_d5c251de",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0068d76_e797a695",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-21T07:00:53Z",
      "side": 1,
      "message": "Yep that\u0027s correct!",
      "parentUuid": "b0f4e538_76f86d9c",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f2466c_0812970f",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "inputs in inputState is annotated by \"const *\", so we can\u0027t change its values if we allocate an array of VertexInputDescriptor (and VertexAttributeDescriptor) instances, say mInputs, and assign it to inputState.inputs. Therefore, I allocate the array at different tests/examples. \n\nWell, we can make mInputs (and mAttributes) public in ComboRenderPipeline, just as cInputStates. Then assign it to cInputState.inputs (and cInputState.attributes). But we need to access them via descriptor.cInputs (and descriptor.cAttributes) directly, which indicates that cInputs (and cAttributes) is one of the peer of cInputStates. This is a little wired, because cInputs (cAttributes) is a sub-descriptor of cInputStates. They are not peers. In addition, the values inside vertexInput and vertexAttributes change a lot among different usage. So the default values setting in ComboRenderPipeline constructor are not very useful. \n\nOne more reason is that currently, we have already had a full list of inputs and attributes we need in tests/examples. We also assigned all values in inputs and attributes. If we add \"inputs\"\n and \"attributes\" array in ComboRenderPipeline and set default values, we need to compare with the default values and change them accordingly. This will need more efforts. And the values do vary in different tests/examples.\n\nAs a result, I don\u0027t allocate such array in ComboRenderPipeline for cInputStates, but assign an array (or one single instance) of VertexInputDescriptor (and VertexAttributeDescriptor) inside where it is used in tests/examples. And assign the array (or the address of that single instance) to inputState.inputs (and inputState.attributes) \n[1].",
      "parentUuid": "b0068d76_e797a695",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe34724e_2cb9b462",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "How about the following?\n\n    class ComboInputStateDescriptor: public dawn::InputStateDescriptor {\n      public:\n        std::array\u003cdawn::VertexAttributeDescriptor, kMaxVertexAttributs\u003e cAttributes;\n        std::array\u003cdawn::VertexInputDescriptor, kMaxVertexInputs\u003e cInputs;\n    }\n\n    class ComboRenderPipelineDescriptor : public dawn::RenderPipelineDescriptor {\n      public:\n        ComboRenderPipelineDescriptor(const dawn::Device\u0026 device);\n\n        dawn::PipelineStageDescriptor cVertexStage;\n        dawn::PipelineStageDescriptor cFragmentStage;\n\n        ComboInputStateDescriptor cInputState;\n        std::array\u003cdawn::ColorStateDescriptor*, kMaxColorAttachments\u003e cColorStates;\n        dawn::DepthStencilStateDescriptor cDepthStencilState;\n\n      private:\n        dawn::ColorStateDescriptor mColorStates[kMaxColorAttachments];\n    };\n\nIt seems it would allow doing\n\n    desc.cInputState.cAttributes[0].inputSlot \u003d 0;\n\nI\u0027m asking for this change because it means that code can be written in such a way that it sets parts of the tree of variables of ComboRenderPipelineDescriptor and doesn\u0027t have to allocate side structure, which looks closer to what we\u0027d be doing in Javascript.",
      "parentUuid": "22f2466c_0812970f",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e96d835_b5e381c3",
        "filename": "examples/CppHelloTriangle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Yes. this is a better choice. And it is close to what web devs be doing in JS. \n\nSince this patch is very big and take a long time to review. Can I have another patch to construct ComboInputStateDescriptor as you suggested and change the corresponding code in examples/, end2end tests and unittest, in order to avoid too long time for review and code rebase? [3]",
      "parentUuid": "fe34724e_2cb9b462",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1011a0b_4877b20a",
        "filename": "examples/CubeReflection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This could be made simpler if we have the ComboInputDescriptor and the inline initialization discussed above.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5e60c2d_a1b00d7f",
        "filename": "examples/CubeReflection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "See my comments at [1]",
      "parentUuid": "d1011a0b_4877b20a",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5151d66_c36d4e6c",
        "filename": "examples/glTFViewer/glTFViewer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 243,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "this wouldn\u0027t be needed with cInputDescriptor.",
      "range": {
        "startLine": 241,
        "startChar": 0,
        "endLine": 243,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c94613_dc925faf",
        "filename": "examples/glTFViewer/glTFViewer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 243,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "see [1]",
      "parentUuid": "e5151d66_c36d4e6c",
      "range": {
        "startLine": 241,
        "startChar": 0,
        "endLine": 243,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c84c3e8_cc467364",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: \"Input set twice\"",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92dd705f_ed9189ed",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "I don\u0027t know whether I misunderstood you, but inputsSetMask only set (write) one time on line 40, the others just read its value. \n\nAnd inputsSetMask here is different from mInputsSetMask. The former is used to validate, the latter is used for different backends. Unfortunately, the former is needed during validation, it happens before RenderPipeline object is constructed. So we can\u0027t set or read the value to/from mInputsSetMask at that time.",
      "parentUuid": "1c84c3e8_cc467364",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "891b4f9b_7ab13e76",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "I\u0027m just suggesting changing the name of the error but I know realize this suggestion didn\u0027t make much sense.",
      "parentUuid": "92dd705f_ed9189ed",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec71c324_dfff869e",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d04eddd_cc220cba",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Same reason as above.",
      "parentUuid": "ec71c324_dfff869e",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75e200f7_74ec8a2c",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "3d04eddd_cc220cba",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14ea919e_a22e82b8",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Chromium style-guide wants references to be constants except in rare exceptions. Can these be pointers? Ditto in sub-validation functions.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 81,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a2a24fd_b3202ee0",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "We need to set their values, they are not constant.",
      "parentUuid": "14ea919e_a22e82b8",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 81,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "166d95e2_27f44b11",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "If you need to pass a variable to be modified it should be passed by pointer. Basically the only valid things are:\n\n - const T*\n - T*\n - const T\u0026\n\nAnd T\u0026 without const should be used very rarely.\n\nSo in this case the function signature should become \n\n        MaybeError ValidateInputStateDescriptor(\n            const InputStateDescriptor* descriptor,\n            std::bitset\u003ckMaxVertexInputs\u003e* inputsSetMask) // \u003c-- notice the * here.",
      "parentUuid": "4a2a24fd_b3202ee0",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 81,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff971368_af856790",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Done\n\nThanks for your detailed explanation, Corentin.",
      "parentUuid": "166d95e2_27f44b11",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 81,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e80279b_dd0705d3",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 390,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: ASSERT(!IsError()) here too.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f045e750_d2dea147",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 390,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e80279b_dd0705d3",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8baab113_fbf1c3ba",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 470,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto !IsError",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae7bda28_91da08b1",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 470,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8baab113_fbf1c3ba",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb42328a_d9567924",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: const both for the return value and the function.",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fce1a5c_004c8afb",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb42328a_d9567924",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b54a31c_062ef72f",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Where is this used? (it wasn\u0027t used previously)",
      "range": {
        "startLine": 66,
        "startChar": 42,
        "endLine": 66,
        "endChar": 65
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec11e05c_c275d252",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "It is used in CommandBufferGL for GL backend. Previously, it was in InputStateGL. If I put it into RenderPipelineGL, the function cann\u0027t be used by CommandBufferGL via a RenderPipeline instance.",
      "parentUuid": "4b54a31c_062ef72f",
      "range": {
        "startLine": 66,
        "startChar": 42,
        "endLine": 66,
        "endChar": 65
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9901dafc_b6d8540a",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "Thanks for the pointer, I didn\u0027t realize this was moved from InputStateGL to here.",
      "parentUuid": "ec11e05c_c275d252",
      "range": {
        "startLine": 66,
        "startChar": 42,
        "endLine": 66,
        "endChar": 65
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60aff73f_ff0d2292",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This is an implementation detail and should be hidden as a private variable (and in mMemberCase)",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cef8dbaf_54823ff8",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "The same reason as above. It is used by CommandBufferGL.",
      "parentUuid": "60aff73f_ff0d2292",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79b118a5_6c81e625",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "I don\u0027t see it used anywhere except inside RenderPipeline, so it should be private.",
      "parentUuid": "cef8dbaf_54823ff8",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87fdbba0_ee4ec8db",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Ah... It is used in RenderPipelineGL. If it is private, then RenderPipelineGL have no access to it.\n\nI can revisit the design for InputState later. Maybe we can remove both GetAttributesUsingInput() and attributesUsingInput. The previous design use builder and we need to setAttribute and setInput one by one. Right now we use inputState descriptor, and we know all inputs and attributes in one shot. As a result, maybe we can optimize the design for inputState. But this patch is more like a (big) refactoring, so I don\u0027t want to change its original design in this change.",
      "parentUuid": "79b118a5_6c81e625",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53dc994f_4f4e27b4",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: we could remove this include and replace it by a forward declaration around [1]",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff4c9e60_aa9f3280",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "CommandBuffer also used some const variables included in PerStage.h and other files, which is included in RenderPipeline.h (and InputState.h in previous code). \n\nSo, adding RenderPipeline below is not enough. We need to add a few other header files. However, if you have solid reason to add both RenderPipeline object below and those header files in order to replace the single line of adding RenderPipeline.h, I will do that.",
      "parentUuid": "53dc994f_4f4e27b4",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6332e3e6_ac40dc3e",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "In general we try to minimize the number of headers included in headers so as to minimize compile time. It is generally fine to add more includes if they are \"smaller\", in this case I think the header only needs Constants.h",
      "parentUuid": "ff4c9e60_aa9f3280",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38ec6517_25faee99",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Done.\n\nWe also need to add \u003carray\u003e, in addition to \"Constants.h\". Another option is to add \"PerStage.h\", which will add \"Constants.h\" and \u003carray\u003e and a few other head files.",
      "parentUuid": "6332e3e6_ac40dc3e",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7010a44_0448168e",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "[1]",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e35b7324_1862065f",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7010a44_0448168e",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4a385d8_78258010",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 305,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Can this be an std::array to help with type-safety when passing it to ComputeInputLayout? Right now it takes a single pointer which could be an array of any size.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e0c24c_f21947ab",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 305,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4a385d8_78258010",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "200226c2_d3141b14",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This is only used by this class, can the method be made private?",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f80a390_6ab65fe1",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "200226c2_d3141b14",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80652865_67272c5a",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: Make, the ObjectiveC convention is that method called Make* or Create* return an object which is owned by the caller, while other method names just return a reference to an object owned by the callee.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a502203_fac8d948",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "80652865_67272c5a",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8900d226_727edc95",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "I think you forgot to address this, the suggestion was to rename to MakeVertexDesc to match the ObjectiveC naming convention.",
      "parentUuid": "6a502203_fac8d948",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce74df81_d314342c",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Sorry, I misunderstood you here. You suggestion was just to rename the function.",
      "parentUuid": "8900d226_727edc95",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8875b4f_7002deed",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "We are leaking the vertex descriptor here. Can it be released at the end of the function?",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aab61d8_94916b70",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Do you mean add one line like [descriptorMTL.vertexDescriptor release] on line 290 (before we release descriptorMTL on line 291)? If I do this and run end2end tests, it reported that vertexDescriptor was over-released, the end2end tests can pass though.\n\nSo I don\u0027t change the code here.",
      "parentUuid": "a8875b4f_7002deed",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0c7309d_675647ab",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-22T09:20:15Z",
      "side": 1,
      "message": "Oh it\u0027s because you used autorelease in ComputeVertexDesc. Can we avoid autorelease and do the explicit release line 290? It\u0027s because Dawn doesn\u0027t have its own autorelease pool, so it is less clear what happens with autorelease.",
      "parentUuid": "2aab61d8_94916b70",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bde23bf7_c58fa64a",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-26T03:13:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0c7309d_675647ab",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06e7d0dd_e8862715",
        "filename": "src/dawn_native/opengl/RenderPipelineGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "This should be done a single time on pipeline creation. In OpenGL a VertexArrayObject caches some state related to vertex inputs so they can be set quickly. Here we\u0027re creating and leaking a new one on every draw, when instead we should reuse it.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f271952_7c3386d6",
        "filename": "src/dawn_native/opengl/RenderPipelineGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06e7d0dd_e8862715",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28534ba6_f8265149",
        "filename": "src/dawn_native/opengl/RenderPipelineGL.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Can we add a TODO that this will need to be deduplicated between pipelines?\n\nAlso this could be initialized to 0 (the null object in OpenGL) and freed on pipeline destruction.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e658d982_f75b0d2b",
        "filename": "src/dawn_native/opengl/RenderPipelineGL.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28534ba6_f8265149",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20970003_bab19d84",
        "filename": "src/dawn_native/vulkan/RenderPipelineVk.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "ditto, this can be private.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65d6967f_13c1bd7d",
        "filename": "src/dawn_native/vulkan/RenderPipelineVk.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20970003_bab19d84",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea78c465_c6fcf9ce",
        "filename": "src/tests/end2end/InputStateTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "did not review yet.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a62e94f9_2af17e9c",
        "filename": "src/tests/end2end/PrimitiveTopologyTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: these are constant, let\u0027s just move them to pipeline creation time and get rid of the members.",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 176,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "befcf94d_f8c5e87a",
        "filename": "src/tests/end2end/PrimitiveTopologyTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 176,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a62e94f9_2af17e9c",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 176,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e6d37bd_dbd81c8e",
        "filename": "src/tests/unittests/validation/InputStateValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "did not review yet.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "718ad5da_449db109",
        "filename": "src/tests/unittests/validation/VertexBufferValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nit: this wouldn\u0027t be needed with CombeInputDescriptor.",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5af6ea82_86f73f0f",
        "filename": "src/tests/unittests/validation/VertexBufferValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "See the explanation at [1]",
      "parentUuid": "718ad5da_449db109",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63b4bf20_bfcf5663",
        "filename": "src/tests/unittests/wire/WireOptionalTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "nextInChain \u003d nullptr too.",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a111e01_9bd399ef",
        "filename": "src/tests/unittests/wire/WireOptionalTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63b4bf20_bfcf5663",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c4e06ee_21f1703e",
        "filename": "src/utils/ComboRenderPipelineDescriptor.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-03-20T10:40:35Z",
      "side": 1,
      "message": "Mmmh this is weird because it feels like cInputState should be a ComboInputStateDescriptor with cInputs, cAttributes that by default point to mInputs and mAttributes (like mColorStates in the ComboRenderPipelineDescriptor).",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "328118d6_0847e6dc",
        "filename": "src/utils/ComboRenderPipelineDescriptor.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-03-22T05:28:58Z",
      "side": 1,
      "message": "True. I removed them. But they are needed if we use \"const*const*\" (Otherwise, we can\u0027t change the values because of two consts annotation). Right now, we use \"const*\", then we don\u0027t need to expose \"cVertexInputs[] and cVertexAttributes[]\", which are a little wired. See the explanation at [1].",
      "parentUuid": "8c4e06ee_21f1703e",
      "revId": "56c8d79e608394435d88d08a19afa74d1a52e84a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}