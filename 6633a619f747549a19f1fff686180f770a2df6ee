{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fc859601_b52a3004",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 66,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-07T11:00:52Z",
      "side": 1,
      "message": "might be worth mentioning that `pred` is not held by the class - this is useful info for the caller as the lambda can capture by reference instead of copy.\nYou\u0027d also probably get better performance if you inlined the constructor and used `F\u0026\u0026` as the predicate type, so the compiler can inline the lambda.\n\nImpressive AI generated suggestion:\n\n```suggestion\n    /// @param pred an optional predicate function for filtering variables. The\n    /// predicate is not stored by the class, so it can be a lambda that\n    /// captures by reference.\n```",
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b34946_c3974dce",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 66,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-07T15:00:43Z",
      "side": 1,
      "message": "Added the note and moved to inline.\nLeft as a `std::function` for now (hopefully a good compiler will see through the type-erasure of `std::function` when inlined?), partly because I couldn\u0027t figure out a nice way of defaulting the type for the functor when it\u0027s optional.",
      "parentUuid": "fc859601_b52a3004",
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a3d73b3_a1b66db5",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 66,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-07T18:13:00Z",
      "side": 1,
      "message": "Unfortunately I don\u0027t think most compilers would be able to optimize away the `std::function`.\n\nThe easiest way I can think to do this with perfect forwarding is:\n\n```\n    /// Constructor.\n    /// @param ir the module\n    /// @param pred an optional predicate functions for filtering variables, each with the signature\n    /// `bool(const Var*)`. If any of these return `false` then the variable will not be considered.\n    /// Note: @p pred is not stored by the class, so can be a lambda that captures by reference.\n    template \u003ctypename... F\u003e\n    explicit ReferencedModuleVars(Module\u0026 ir, F\u0026\u0026... pred) : ir_(ir) {\n        // Loop over module-scope variables, recording the blocks that they are referenced from.\n        for (auto inst : *ir_.root_block) {\n            if (auto* var \u003d inst-\u003eAs\u003cVar\u003e()) {\n                if ((std::forward\u003cF\u003e(pred)(var) \u0026\u0026 ...)) {\n                    var-\u003eResult(0)-\u003eForEachUse([\u0026](const Usage\u0026 use) {\n                        block_to_direct_vars_.GetOrAddZero(use.instruction-\u003eBlock()).Add(var);\n                    });\n                }\n            }\n        }\n    }\n```",
      "parentUuid": "c8b34946_c3974dce",
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba993b95_cd7c1d31",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 66,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-07T21:30:48Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7a3d73b3_a1b66db5",
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0434e99d_180edcfc",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 80,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-07T11:00:52Z",
      "side": 1,
      "message": "nit: Be aware that resizing this is going to be _expensive_. One of the downsides of using a small-vector is that moves are typically more expensive than a regular vector. `UniqueVector` holds two containers that need to be moved. If this appears in a profile, you could use a `BlockAllocator\u003cVarSet\u003e` to allocate `VarSet` pointers for both the map values of `block_to_direct_vars` and `transitive_references_` which would reduce the shuffling.",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1420c262_f610840e",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 80,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-07T11:00:52Z",
      "side": 1,
      "message": "```suggestion\n    Hashmap\u003cBlock*, VarSet, 64\u003e block_to_direct_vars_;\n```",
      "range": {
        "startLine": 80,
        "startChar": 32,
        "endLine": 80,
        "endChar": 52
      },
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "070cd348_85650a8f",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 80,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-07T15:00:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1420c262_f610840e",
      "range": {
        "startLine": 80,
        "startChar": 32,
        "endLine": 80,
        "endChar": 52
      },
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56d80fd4_66aaac80",
        "filename": "src/tint/lang/core/ir/transform/common/referenced_module_vars.h",
        "patchSetId": 15
      },
      "lineNbr": 80,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-07T15:00:43Z",
      "side": 1,
      "message": "Ack, thanks will keep an eye out for this.",
      "parentUuid": "0434e99d_180edcfc",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "6633a619f747549a19f1fff686180f770a2df6ee",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}