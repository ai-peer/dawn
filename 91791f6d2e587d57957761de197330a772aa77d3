{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b51a5328_ae932ae5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-15T11:20:31Z",
      "side": 1,
      "message": "Since `AddOperand{s}` is private and only used in the constructors, can\u0027t we just rely on unit tests this to make sure stuff gets added in the right place, instead of incurring this overhead every time an instruction is constructed?\n\nThe counter to that is that maybe we\u0027ll want `AddOperand` to be public in the future for variable length arg instructions, e.g. to add a new argument to a call instruction.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f27b4a9_04e60c1f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-15T12:12:13Z",
      "side": 1,
      "message": "The overhead is pretty minimal. My concern is from something like `Load(Value*, value*)` if we happen to flip the `AddOperand(to)` and `AddOperand(from)` I don\u0027t think we\u0027d catch that in unittesting at the moment.\n\nThose can be pretty subtle, and are easy to miss in testing. It also makes it obvious from looking at the constructor which index you care about by reading the single add operand line instead of having to count the number of `AddOperand` calls. So, makes it easier to keep these the same as the numbers used in `SetOperand`.",
      "parentUuid": "b51a5328_ae932ae5",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fe544d6_4eae3fd5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-15T15:24:43Z",
      "side": 1,
      "message": "OK. I feel like it wouldn\u0027t be too hard to add unit tests coverage to check this\ne.g. `EXPECT_EQ(access-\u003eOperands()[Access:kObjectOperandOffset], access-\u003eObject());`\n\nBut I also think what you\u0027ve done is fine to land.",
      "parentUuid": "8f27b4a9_04e60c1f",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b7b430e_4fc64a83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-16T00:23:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6fe544d6_4eae3fd5",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "475b9abe_3f8f1726",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-15T02:58:22Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b6197aa_6dd09c50",
        "filename": "src/tint/ir/operand_instruction.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-15T11:20:31Z",
      "side": 1,
      "message": "`AddOperand` below already does the check for each index, so this one is redundant.\n\nAlternatively, we could copy the body of `AddOperand` into the loop below to avoid the overhead of checking at each index.",
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a9083bf_ad8b4ef5",
        "filename": "src/tint/ir/operand_instruction.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-15T12:12:13Z",
      "side": 1,
      "message": "Removed from here, `AddOperand` should cover it.",
      "parentUuid": "2b6197aa_6dd09c50",
      "revId": "91791f6d2e587d57957761de197330a772aa77d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}