{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ca1c4223_4c109b7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-22T10:23:32Z",
      "side": 1,
      "message": "Not sure about this one, I\u0027m afraid.",
      "revId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4609b8b_4d3ce702",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-22T14:03:56Z",
      "side": 1,
      "message": "As discussed, I\u0027m not convinced by this class, and I\u0027d like to talk about how we structure values. +2\u0027ing so we can iterate.",
      "revId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5fa34a5_894234c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T17:16:42Z",
      "side": 1,
      "message": "We discussed this offline, the idea will be to have a base Value class, this class will be a ConstantValue which inherits. The values should be used as pointers instead of structs. The values will store a vector of instructions where the value is used.\n\nI\u0027m going to land this as is and then will start the work to re-factor it to the value/constvalue",
      "revId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b204a42_a01d25a3",
        "filename": "src/tint/ir/register.h",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-22T10:23:32Z",
      "side": 1,
      "message": "So these are all constant value registers?\n\nMy mental model here is influenced by LLVM. I imagined we\u0027d have:\n• `ir::Value` - immutable value. `ast::Let` will naturally map to this. Has a type.\n• `ir::Constant` - derives from `ir::Value`, holds a constant value.\n• `ir::Variable` - derives from `ir::Value`, is a pointer type, you can only load or store to it.\n\n\nIn this CL `ir::Register` appears to be All The Things!.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 74,
        "endChar": 0
      },
      "revId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41377e98_c0f5b95e",
        "filename": "src/tint/ir/register.h",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T13:16:04Z",
      "side": 1,
      "message": "Yup, it is all of these things. We could split it up, but I\u0027m waiting until I need to split it up based on the code being written. For Binary and Unary op, this is sufficient. It may need to get extended or broken apart when we get to load/store, I\u0027m not sure yet.",
      "parentUuid": "4b204a42_a01d25a3",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 74,
        "endChar": 0
      },
      "revId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "d68dd2eb562261c9295ba47892bb7f860b9b6c82",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}