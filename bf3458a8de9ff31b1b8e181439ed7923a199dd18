{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c32d34b1_ed39088c",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-10T15:11:05Z",
      "side": 1,
      "message": "Duplicating the pipelines in the backend and having a chattier interface for the indirect buffer scratch space, and pipeline depending on numworkgroups make the code more all over the place.\n\nWDYT of instead having per-device options exposed by the backends, that control how certain things are done in the frontend. It can be a dump struct that has bool \"duplicateArgumentsForDispatchIndirectWithNumWorkgroups\" that\u0027s set to true for D3D. This way the logic isn\u0027t exactly D3D12-specific, and stays in one places instead of being spread across ComputePassEncoder.cpp, Device.cpp and DeviceD3D12.cpp.\n\nAlso instead of having two pipelines, we can pass options as uniforms: VALIDATE or DUPLICATE_ARGUMENTS.",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0802b8a_fb60a2e6",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-10T15:55:26Z",
      "side": 1,
      "message": "SGTM - and we can set a pipeline overridable constant when those are ready.",
      "parentUuid": "c32d34b1_ed39088c",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3af976f7_1aedd8f1",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-10T15:58:33Z",
      "side": 1,
      "message": "That would require two pipelines. I don\u0027t think the cost of the branch on the uniform is significant at all.",
      "parentUuid": "e0802b8a_fb60a2e6",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9368c26c_30c22cb0",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-10T16:02:50Z",
      "side": 1,
      "message": "isn\u0027t only one ever created? or are we talking about the case where there\u0027s two logical devices with on the same backend device.\nThe uniform is a bit annoying because we need to upload the data for it but I guess that\u0027s fine because we\u0027re going to want to batch the validation and upload the batch size and batch offset anyway.",
      "parentUuid": "3af976f7_1aedd8f1",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca98d505_79ab4d5b",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-10T16:56:05Z",
      "side": 1,
      "message": "I was thinking between num_workgroups vs. not vs. validation. Pipeline overridable constants are per-pipeline so you would need one pipeline per set of constants.",
      "parentUuid": "9368c26c_30c22cb0",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cec914f_bf5dafa0",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-11-15T01:34:02Z",
      "side": 1,
      "message": "I\u0027ve updated this CL. PTAL, thanks!",
      "parentUuid": "ca98d505_79ab4d5b",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9309bc6_66ae1c56",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-11-17T04:59:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4cec914f_bf5dafa0",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb43edaf_e367d6be",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 271,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-10T15:11:05Z",
      "side": 1,
      "message": "nit: this could be cached on the d3d12::Device because it only depends on one integer: GetNumWorkgroupsParameterIndex()",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8891f2b4_65eaee63",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 271,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-11-15T01:34:02Z",
      "side": 1,
      "message": "Oh we can\u0027t as we also need to specify the root signature (see [1]) when creating command signature, and we can only get the root signature from the pipeline layout.",
      "parentUuid": "eb43edaf_e367d6be",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcffcd5e_2859a92a",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 271,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T09:02:14Z",
      "side": 1,
      "message": "Ah, that\u0027s because we update bindings on the root signature. Thanks for the explanation.",
      "parentUuid": "8891f2b4_65eaee63",
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feefa4ee_e4f79f56",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-11-15T01:34:02Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 297,
        "startChar": 30,
        "endLine": 297,
        "endChar": 48
      },
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1816d7d3_e357cc8b",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-15T09:02:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "feefa4ee_e4f79f56",
      "range": {
        "startLine": 297,
        "startChar": 30,
        "endLine": 297,
        "endChar": 48
      },
      "revId": "bf3458a8de9ff31b1b8e181439ed7923a199dd18",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}