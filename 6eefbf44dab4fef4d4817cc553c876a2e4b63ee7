{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8a4c3b1e_6f4230d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-10T03:24:42Z",
      "side": 1,
      "message": "Having some documentation in the webgpu_cpp.h file would be useful when trying to determine how things work. One way to do it would be to annotate the sections in dawn.json and emit into the generated file.\n\nI\u0027ve done that for Adapter and some bits of the Adapter methods just to see what it would look like. I can\u0027t figure out how to get the indenting in the generated file correct.\n\nBut, does this seem like it would be generally useful? In theory the same descriptions could be emitted into the c header as well.",
      "revId": "6eefbf44dab4fef4d4817cc553c876a2e4b63ee7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f931df3_65356d4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-10T13:46:02Z",
      "side": 1,
      "message": "The indenting would be a bit tricky indeed, I think you\u0027d need to manually add it to the comments because the templates dedents things automatically, but that works only for single-line stuff.\n\nI\u0027m not sure what would be the best approach to paper over C/C++ name differences, maybe bikeshed-ish `[[FeatureName]]` that gets replaced with `WGPUFeatureName` or `wgpu::FeatureName` depending on the template?\n\nI don\u0027t know that adding everything to the dawn.json will be scalable though. There\u0027s a TON of documentation to write and contracts that aren\u0027t really tied to a specific function. How about external documentation? Also it feels like handling the reflow of comments will be tough. We could have a separate file that contains just the comments? IDK",
      "parentUuid": "8a4c3b1e_6f4230d0",
      "revId": "6eefbf44dab4fef4d4817cc553c876a2e4b63ee7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0173d1b8_682d9891",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-10T14:03:05Z",
      "side": 1,
      "message": "Yea, I don\u0027t have a feel for the size of dawn.json but writing comments in JSON kinda wasn\u0027t great for the few I wrote to test it out.\n\nI think the trick will be, if we put this into a different file, how do we make sure it\u0027s kept in sync with dawn.json. Will need to think of some way to make sure the doc file is updated.",
      "parentUuid": "9f931df3_65356d4b",
      "revId": "6eefbf44dab4fef4d4817cc553c876a2e4b63ee7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "6eefbf44dab4fef4d4817cc553c876a2e4b63ee7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6eefbf44dab4fef4d4817cc553c876a2e4b63ee7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}