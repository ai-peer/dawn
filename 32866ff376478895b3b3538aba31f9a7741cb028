{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e1dfe315_650a84e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "PTAL. Thanks!\n\nThis is a small change, but I met many issues in order to make Vulkan validation layer happy. Finally it works, with some workarounds applied. See the comments inclined. ",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3ba09a_41b81094",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Lots of comments, overall we could simplify things. Thank you Yunchao for pushing fixes in upstream Vulkan. I think only one of them might be accepted but that\u0027s great citizenship.\n\nLoko PTAL too. You wanted to learn Vulkan and this about the most gnarly aspect of it :) Let me know if you\u0027d like to have a quick chat to go through some aspects of it.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fff2b8e_70fe7b8f",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: prefer using || for booleans, even if we don\u0027t need the short circuit, because using | is a source of bugs when the operands have side effects.",
      "range": {
        "startLine": 224,
        "startChar": 53,
        "endLine": 224,
        "endChar": 54
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b77827_776be67c",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "instead of ternaries everywhere, can we have logical blocks for readonly vs. not.\n\n if (query.readOnlyDepthStencil) {\n   // Stuff\n } else {\n   // Stuff\n }\n \nThis comment might become obsolete after the others though.",
      "range": {
        "startLine": 150,
        "startChar": 22,
        "endLine": 150,
        "endChar": 42
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5046ea0e_d1d9433e",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "ditto: GENERAL",
      "range": {
        "startLine": 150,
        "startChar": 45,
        "endLine": 150,
        "endChar": 92
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3df333b_332a62b0",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Doesn\u0027t WebGPU guarantee that this is happening? So we can just use the load ops provided at the API level and trust that it will give use the correct thing.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e774b3_c3f78bab",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "ditto, the API validation guarantees this is Store.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3c7d8d7_e03ae079",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "It is a little weird that we need to rely on an extension, and its name include _QCOM. The equivalent one with _EXT and _KHR doesn\u0027t work.\n\nYou can also refer to the issue at https://github.com/KhronosGroup/Vulkan-Docs/issues/1700 to propose STORE_OP_NONE into core (without any suffix): https://github.com/KhronosGroup/Vulkan-Docs/issues/1700",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "497457d0_d9dd03df",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "At the moment the Vulkan specification allows storeOp store for a read-only attachment because if nothing is every written to it, then storing does nothing. There still might be some memory operations done so we need to keep the WRITE in [2] (otherwise in-flight writes for STORE_OP_STORE could happen after other writes, which would be incorrect). Usage of STORE_OP_NONE would be an optimization when it is available.\n\nHowever you should know that STORE_OP_NONE is only implementable on pure tiler GPUs because that\u0027s when all the updates are kept in the tile cache before being flushed. On some desktop GPUs the result of render passes is streamed to memory, so STORE_OP_NONE is not doable because you still need to write the depth (so it is taken into account inside the pass) but not stream it (which you can\u0027t prevent)",
      "parentUuid": "b3c7d8d7_e03ae079",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37f4604e_f18331e9",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Both the equality and hash cache functions need to be updated to take readOnlyDepthStencil into account.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de04450f_300a3ae2",
        "filename": "src/dawn_native/vulkan/RenderPassCache.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "u-nit: readOnly since we are already in SetDepthStencil.",
      "range": {
        "startLine": 51,
        "startChar": 34,
        "endLine": 51,
        "endChar": 54
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd66d1d_6d36d303",
        "filename": "src/dawn_native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 513,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-22T18:30:20Z",
      "side": 1,
      "message": "nit: comment what the boolean means /* readOnly */\n\nAlso, we should expand the comment above if this value does not actually matter to create the VkRenderPipeline. Otherwise, it\u0027s not clear why we don\u0027t set it to writesDepth || writesStencil\n\nhttps://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesdepth-slot",
      "range": {
        "startLine": 513,
        "startChar": 59,
        "endLine": 513,
        "endChar": 61
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4982db4a_6209f5f4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "[2]",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "840a8165_ce2aba21",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: Can we moved in the case above with if (usage \u0026 (wgpu::TextureUsage::RenderAttachment | kReadOnlyRenderAttachment))",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f53bef7_14161d17",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 451,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I think this code disappears if we use GENERAL.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "984d8da3_b369e0a4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "You can also refer to the PR and discussion at https://github.com/KhronosGroup/Vulkan-Docs/pull/1699. But the driver change will take a long time even that PR is accepted.",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 453,
        "endChar": 13
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae822191_27ed33ef",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Sorry I don\u0027t see the link between the PR and this code. Here we deal with usage flags but the PR is about layout compatibility.\n\nAlso it\u0027s not clear that the PR will be accepted: the text only says that the layout of depth-stencil readonly are independent from the other aspect. But it\u0027s not clear that SHADER_READ_ONLY is the same layout. DEPTH_STENCIL_READ_ONLY means that the data is in a format that\u0027s still comprehensible to the depth-testing hardware, while SHADER_READ_ONLY doesn\u0027t require that.",
      "parentUuid": "984d8da3_b369e0a4",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 453,
        "endChar": 13
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b52fde6_1ee2a886",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I don\u0027t think this can ever happen. VulkanImageUsage is only used when describing the potential set of usage of new images, so kReadOnlyRenderAttachment is always paired with RenderAttachment.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84934966_01f31a73",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I think we should use VK_IMAGE_LAYOUT_GENERAL for Vulkan 1.0 support and then we can special case for Vulkan 1.1 or KHR_maintenance2 to use the new, more precise layout. (but IMHO let\u0027s just do GENERAL for now + a TODO since it is just an optimization)",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6b46876_4ea17e50",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-22T18:30:20Z",
      "side": 1,
      "message": "I think there was some misunderstanding, because VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL is indeed available on Vulkan 1.0 and allows both readonly depth/stencil attachments and sampling. The enums referred to in this comment are 1.1 enums which pertain to when one plane is writable and the other is readonly. WebGPU currently requires both to be readonly or both to be writable for multiplanar depth/stencil formats.",
      "parentUuid": "84934966_01f31a73",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7225fef8_56913672",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "Vulkan 1.0 specification actually has a small bug, see https://github.com/KhronosGroup/Vulkan-Docs/pull/1698",
      "range": {
        "startLine": 486,
        "startChar": 83,
        "endLine": 486,
        "endChar": 93
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63b66577_a9ca9248",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "LGTM I think",
      "parentUuid": "7225fef8_56913672",
      "range": {
        "startLine": 486,
        "startChar": 83,
        "endLine": 486,
        "endChar": 93
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a0b8e20_cc7c0feb",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 497,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "[1]",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c7482c7_250c6220",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: \u0026\u0026 texture is renderable maybe?",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33e1ae9a_3c620c02",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 507,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I think this comment can be refactored with [1] to first explain something like:\n\nThe layout returned here is the one that will be used at bindgroup creation time. The bindgroup\u0027s layout must match the runtime layout of the image when it is used via the bindgroup, but we don\u0027t know exactly what it will be yet. So we have to prepare for the pessimistic case.\n\nOnly VK_IMAGE_LAYOUT_GENERAL can do sampling and storage access of texture at the same time.\n\u003ccode for that case\u003e\n\nThe texture can be used as a readonly depth attachment so it needs to be ...\n\u003ccode for that case\u003e.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65fdda4e_5b899d20",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "Also refer to https://github.com/KhronosGroup/Vulkan-Docs/pull/1699",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 514,
        "endChar": 75
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04fd8059_69df3712",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 515,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: we can remove the else, like you did for the case above.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f877aa94_6202edc6",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "ditto, GENERAL?",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}