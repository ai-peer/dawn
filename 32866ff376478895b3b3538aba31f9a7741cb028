{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e1dfe315_650a84e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "PTAL. Thanks!\n\nThis is a small change, but I met many issues in order to make Vulkan validation layer happy. Finally it works, with some workarounds applied. See the comments inclined. ",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3ba09a_41b81094",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Lots of comments, overall we could simplify things. Thank you Yunchao for pushing fixes in upstream Vulkan. I think only one of them might be accepted but that\u0027s great citizenship.\n\nLoko PTAL too. You wanted to learn Vulkan and this about the most gnarly aspect of it :) Let me know if you\u0027d like to have a quick chat to go through some aspects of it.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fff2b8e_70fe7b8f",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: prefer using || for booleans, even if we don\u0027t need the short circuit, because using | is a source of bugs when the operands have side effects.",
      "range": {
        "startLine": 224,
        "startChar": 53,
        "endLine": 224,
        "endChar": 54
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b109798_d62eecb6",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fff2b8e_70fe7b8f",
      "range": {
        "startLine": 224,
        "startChar": 53,
        "endLine": 224,
        "endChar": 54
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b77827_776be67c",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "instead of ternaries everywhere, can we have logical blocks for readonly vs. not.\n\n if (query.readOnlyDepthStencil) {\n   // Stuff\n } else {\n   // Stuff\n }\n \nThis comment might become obsolete after the others though.",
      "range": {
        "startLine": 150,
        "startChar": 22,
        "endLine": 150,
        "endChar": 42
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5046ea0e_d1d9433e",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "ditto: GENERAL",
      "range": {
        "startLine": 150,
        "startChar": 45,
        "endLine": 150,
        "endChar": 92
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4af78af_6c2ee34f",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5046ea0e_d1d9433e",
      "range": {
        "startLine": 150,
        "startChar": 45,
        "endLine": 150,
        "endChar": 92
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "271d281c_b0af0345",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Ack. Only one ternary now.",
      "parentUuid": "e6b77827_776be67c",
      "range": {
        "startLine": 150,
        "startChar": 22,
        "endLine": 150,
        "endChar": 42
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3df333b_332a62b0",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Doesn\u0027t WebGPU guarantee that this is happening? So we can just use the load ops provided at the API level and trust that it will give use the correct thing.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aecb37eb_10b7d6a7",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "Or if we want to, we can add ASSERTs in the if (query.readOnlyDepthStencil)",
      "parentUuid": "b3df333b_332a62b0",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2b87120_77e743b7",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "I feel like that add query.readOnlyDepthStencil as a parameter to VulkanAttachmentLoadOp / VulkanAttachmentStoreOp makes more sense. And these two functions can be reused in other places if needed. \n\nThe current load op can guarantee that it is LOAD if it does have that aspect, but it cannot guarantee if it doesn\u0027t have that aspect at all. Because we blindly use DEPTH_STENCIL_READ_ONLY_OPTIMAL image layout, which means READ_ONLY_OPTIMAL for both aspects, so we need to set both aspects to LOAD, and it doesn\u0027t hurt anything if one aspect doesn\u0027t exist.",
      "parentUuid": "aecb37eb_10b7d6a7",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc98a669_8dd22640",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T15:03:07Z",
      "side": 1,
      "message": "Given [a] means no modification to VulkanAttachmentLoad/StoreOp is needed I think it\u0027s better to rely on the frontend doing the correct thing (and ASSERTing that it does).",
      "parentUuid": "b2b87120_77e743b7",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e774b3_c3f78bab",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "ditto, the API validation guarantees this is Store.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "123f8e89_e4faf746",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "WebGPU\u0027s StoreOp doesn\u0027t have NONE. So the frontend will not guarantee NONE storeOp. we need to change it to NONE if it is readonly depth/stencil attachment inside VulkanAttachmentStoreOp().",
      "parentUuid": "56e774b3_c3f78bab",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3c7d8d7_e03ae079",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "It is a little weird that we need to rely on an extension, and its name include _QCOM. The equivalent one with _EXT and _KHR doesn\u0027t work.\n\nYou can also refer to the issue at https://github.com/KhronosGroup/Vulkan-Docs/issues/1700 to propose STORE_OP_NONE into core (without any suffix): https://github.com/KhronosGroup/Vulkan-Docs/issues/1700",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "497457d0_d9dd03df",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "At the moment the Vulkan specification allows storeOp store for a read-only attachment because if nothing is every written to it, then storing does nothing. There still might be some memory operations done so we need to keep the WRITE in [2] (otherwise in-flight writes for STORE_OP_STORE could happen after other writes, which would be incorrect). Usage of STORE_OP_NONE would be an optimization when it is available.\n\nHowever you should know that STORE_OP_NONE is only implementable on pure tiler GPUs because that\u0027s when all the updates are kept in the tile cache before being flushed. On some desktop GPUs the result of render passes is streamed to memory, so STORE_OP_NONE is not doable because you still need to write the depth (so it is taken into account inside the pass) but not stream it (which you can\u0027t prevent)",
      "parentUuid": "b3c7d8d7_e03ae079",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7160ebc3_6820a234",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Thanks for the explanation! Is this change going to fail if some hardware doesn\u0027t support STORE_OP_NONE extension? (according to your explanation, say on non-tiled GPUs like Intel iGPU). I run the CL on my desktop with Intel iGPU, it works.",
      "parentUuid": "497457d0_d9dd03df",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119247e8_a989fa0a",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T15:03:07Z",
      "side": 1,
      "message": "[a] The change will not fail on hardware that doesn\u0027t support NONE, instead we should use STORE (and have NONE be an optimization we do much later in the future).\n\nTechnically STORE is a write, but it is allowed in the Vulkan specification with the DEPTH_STENCIL_READ_ONLY_OPTIMAL layout because:\n\n - on desktop GPUs the modifications to the DS attachment will be streamed to memory, but since there are none (all pipelines must have depthWrite \u003d false), there are no writes.\n - on tiler GPUs at BeginRenderPass the DS attachment tile is loaded from memory into the tile cache, then at EndPass it is copied from the tile cache to the memory. Technically a write happens, but with the exact same values that were in memory, so there is no risk of data race. (but _NONE was added to be able to remove that other copy).\n \nWe should really use STORE, because it has the correct behavior, but also because NONE is a tiler-specific extension and it is incorrect to use it when it is not supported by the driver.",
      "parentUuid": "7160ebc3_6820a234",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a794a52_00f88f08",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T18:04:14Z",
      "side": 1,
      "message": "As I mentioned during the meeting: 1) STORE_OP_STORE will lead to validation layer failure, that\u0027s why I have to use STORE_OP_NONE. 2) STORE_OP_NONE_QCOM is working on (at least some of) desktop machines with Intel integrated GPU (non-tiled, I think). 3) STORE_OP_STORE and STORE_OP_DONT_CARE explicitly say that it only compatible with writable depth/stencil, so I feel like the validation layer is conformant to the Vulkan spec at this point. What makes me feel weird is that depth/stencil readonly is a core feature, but it relies on an extension like STORE_OP_NONE_QCOM (or _KHR, _EXT). It is not self-contained.\n\nUnfortunately, the validation layer error doesn\u0027t have a VU-id for the error, the error is: \nWarning: Validation Error: [ SYNC-HAZARD-WRITE_AFTER_READ ] Object 0: handle \u003d 0x1150000000115, type \u003d VK_OBJECT_TYPE_RENDER_PASS; | MessageID \u003d 0x4b3455b4 | vkCmdEndRenderPass: Hazard WRITE_AFTER_READ in subpass 0 for attachment 1 depth aspect during store with storeOp VK_ATTACHMENT_STORE_OP_STORE. Access info (usage: SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE, prior_usage: SYNC_FRAGMENT_SHADER_SHADER_STORAGE_READ, read_barriers: VK_PIPELINE_STAGE_2_NONE_KHR, command: vkCmdDraw, seq_no: 6, reset_no: 1)\nError: Assertion failure at ../../src/dawn_native/vulkan/BackendVk.cpp:65 (OnDebugUtilsCallback): (messageSeverity \u0026 VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT) \u003d\u003d 0\nTrace/breakpoint trap (core dumped)\n\nYou can verify/reproduce the validation error by remove the small code block at [7] after pull this CL on your local machine.",
      "parentUuid": "119247e8_a989fa0a",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37f4604e_f18331e9",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Both the equality and hash cache functions need to be updated to take readOnlyDepthStencil into account.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e34ee47_e3e75e17",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37f4604e_f18331e9",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de04450f_300a3ae2",
        "filename": "src/dawn_native/vulkan/RenderPassCache.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "u-nit: readOnly since we are already in SetDepthStencil.",
      "range": {
        "startLine": 51,
        "startChar": 34,
        "endLine": 51,
        "endChar": 54
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cca9b43d_1693e597",
        "filename": "src/dawn_native/vulkan/RenderPassCache.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de04450f_300a3ae2",
      "range": {
        "startLine": 51,
        "startChar": 34,
        "endLine": 51,
        "endChar": 54
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd66d1d_6d36d303",
        "filename": "src/dawn_native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 513,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-22T18:30:20Z",
      "side": 1,
      "message": "nit: comment what the boolean means /* readOnly */\n\nAlso, we should expand the comment above if this value does not actually matter to create the VkRenderPipeline. Otherwise, it\u0027s not clear why we don\u0027t set it to writesDepth || writesStencil\n\nhttps://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesdepth-slot",
      "range": {
        "startLine": 513,
        "startChar": 59,
        "endLine": 513,
        "endChar": 61
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77db5b50_e927513b",
        "filename": "src/dawn_native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 513,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done. I revised the comment above.",
      "parentUuid": "8cd66d1d_6d36d303",
      "range": {
        "startLine": 513,
        "startChar": 59,
        "endLine": 513,
        "endChar": 61
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4982db4a_6209f5f4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "[2]",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbf28ff5_85afd61d",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4982db4a_6209f5f4",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f14a553_82b927fa",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4982db4a_6209f5f4",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "840a8165_ce2aba21",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: Can we moved in the case above with if (usage \u0026 (wgpu::TextureUsage::RenderAttachment | kReadOnlyRenderAttachment))",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e9e7797_4390df85",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "840a8165_ce2aba21",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f53bef7_14161d17",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 451,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I think this code disappears if we use GENERAL.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0131f4eb_0e632244",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 451,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "Actually, for the same reason as [3] I think?",
      "parentUuid": "3f53bef7_14161d17",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12bdff2a_1a8a6b17",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 451,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "See the explaination below.",
      "parentUuid": "0131f4eb_0e632244",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "984d8da3_b369e0a4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "You can also refer to the PR and discussion at https://github.com/KhronosGroup/Vulkan-Docs/pull/1699. But the driver change will take a long time even that PR is accepted.",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 453,
        "endChar": 13
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae822191_27ed33ef",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "Sorry I don\u0027t see the link between the PR and this code. Here we deal with usage flags but the PR is about layout compatibility.\n\nAlso it\u0027s not clear that the PR will be accepted: the text only says that the layout of depth-stencil readonly are independent from the other aspect. But it\u0027s not clear that SHADER_READ_ONLY is the same layout. DEPTH_STENCIL_READ_ONLY means that the data is in a format that\u0027s still comprehensible to the depth-testing hardware, while SHADER_READ_ONLY doesn\u0027t require that.",
      "parentUuid": "984d8da3_b369e0a4",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 453,
        "endChar": 13
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b37b61fa_98be463f",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Your comment exactly explained why I made that PR: \nThe current situation is that DEPTH_STENCIL_READ_ONLY image layout is blindly set for all sampled textures for renderable depth/stencil formats at [4], even it is not used as an attachment, in order to make validation happy. As a result, it also requires DEPTH_STENCIL_ATTACHMENT image usage at [5], no matter it is used as an attachment. This is the current implementation in Dawn project.\n\nThe proposal will make that: if the depth/stencil image is used as both depth/stencil attachment and sampled image, it will set as DEPTH_STENCIL_READ_ONLY and SHADER_READ_ONLY image layout respectively, and they are reasonable and they are compatible. If the image is only used as sampled image, then its layout is SHADER_READ_ONLY alone (no need to set to DEPTH_STENCIL_READ_ONLY image layout and DEPTH_STENCIL_ATTACHMENT image usage), which is more reasonable than DEPTH_STENCIL_READ_ONLY image layout. \n\nAnyway, welcome to comment on that PR.",
      "parentUuid": "ae822191_27ed33ef",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 453,
        "endChar": 13
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b52fde6_1ee2a886",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I don\u0027t think this can ever happen. VulkanImageUsage is only used when describing the potential set of usage of new images, so kReadOnlyRenderAttachment is always paired with RenderAttachment.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f001d24_bbf77551",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "[3]",
      "parentUuid": "0b52fde6_1ee2a886",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbb41e20_fb7730c4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Not really, TextureUsage::RenderAttachment is replaced by kReadOnlyRenderAttachment if it is a readonly depth/stencil attachment, see the if-else code block started from https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn_native/CommandEncoder.cpp#608.",
      "parentUuid": "0f001d24_bbf77551",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84934966_01f31a73",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I think we should use VK_IMAGE_LAYOUT_GENERAL for Vulkan 1.0 support and then we can special case for Vulkan 1.1 or KHR_maintenance2 to use the new, more precise layout. (but IMHO let\u0027s just do GENERAL for now + a TODO since it is just an optimization)",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6b46876_4ea17e50",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-22T18:30:20Z",
      "side": 1,
      "message": "I think there was some misunderstanding, because VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL is indeed available on Vulkan 1.0 and allows both readonly depth/stencil attachments and sampling. The enums referred to in this comment are 1.1 enums which pertain to when one plane is writable and the other is readonly. WebGPU currently requires both to be readonly or both to be writable for multiplanar depth/stencil formats.",
      "parentUuid": "84934966_01f31a73",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4cfed0a_158ed8d6",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "nit: maybe the comment could explain that WebGPU requires both aspects to have the same readonlyness first, and then explain that we can use the Vulkan 1.0 layout and don\u0027t need the Vulkan 1.1 ones.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da049390_992585ae",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "Yep, thanks for the explanation. I\u0027ll make another pass an close comments that are no longer applicable.",
      "parentUuid": "a6b46876_4ea17e50",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59b794f3_3eacb390",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4cfed0a_158ed8d6",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7225fef8_56913672",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "Vulkan 1.0 specification actually has a small bug, see https://github.com/KhronosGroup/Vulkan-Docs/pull/1698",
      "range": {
        "startLine": 486,
        "startChar": 83,
        "endLine": 486,
        "endChar": 93
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63b66577_a9ca9248",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "LGTM I think",
      "parentUuid": "7225fef8_56913672",
      "range": {
        "startLine": 486,
        "startChar": 83,
        "endLine": 486,
        "endChar": 93
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a0b8e20_cc7c0feb",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 497,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "[1]",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a0cc404_0104f96e",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 497,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a0b8e20_cc7c0feb",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c7482c7_250c6220",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: \u0026\u0026 texture is renderable maybe?",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63cf99aa_73f803c9",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done. I looked into CTS. All depth/stencil formats we supported now are renderable. As we know, CTS includes all depth/stencil formats and some of them have not been implemented in Dawn. However, adding isRenderable doesn\u0027t hurt anything, and it can prevent harm if we introduce new formats.",
      "parentUuid": "5c7482c7_250c6220",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33e1ae9a_3c620c02",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 507,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "I think this comment can be refactored with [1] to first explain something like:\n\nThe layout returned here is the one that will be used at bindgroup creation time. The bindgroup\u0027s layout must match the runtime layout of the image when it is used via the bindgroup, but we don\u0027t know exactly what it will be yet. So we have to prepare for the pessimistic case.\n\nOnly VK_IMAGE_LAYOUT_GENERAL can do sampling and storage access of texture at the same time.\n\u003ccode for that case\u003e\n\nThe texture can be used as a readonly depth attachment so it needs to be ...\n\u003ccode for that case\u003e.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e6902d8_e6b35cfc",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 507,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33e1ae9a_3c620c02",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65fdda4e_5b899d20",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-11-20T02:01:58Z",
      "side": 1,
      "message": "Also refer to https://github.com/KhronosGroup/Vulkan-Docs/pull/1699",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 514,
        "endChar": 75
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6bc974f_b90fd4b1",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T15:03:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "65fdda4e_5b899d20",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 514,
        "endChar": 75
      },
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04fd8059_69df3712",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 515,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "nit: we can remove the else, like you did for the case above.",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0481b58_d3a0a6ed",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 515,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04fd8059_69df3712",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f877aa94_6202edc6",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-22T11:02:16Z",
      "side": 1,
      "message": "ditto, GENERAL?",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80c7df84_a190e1d6",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-23T08:35:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f877aa94_6202edc6",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7c2f2d8_4a07459d",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T01:56:53Z",
      "side": 1,
      "message": "This is not useful for current end2end test. The current test will go to either if block at [6] (readonly depth/stencil attachment + sampling), or if block at [4] (sampling only).\n\nI feel like this should be needed if we add tests where we only have readonly depth/stencil attachment (no sampling). I will do that in order to verify my guess.",
      "parentUuid": "80c7df84_a190e1d6",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31229e39_06006f99",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T15:03:07Z",
      "side": 1,
      "message": "Sounds good. Even if that test doesn\u0027t end up using it, I think we should add an UNREACHABLE() for that case so it crashes in debug if we happen to have the incorrect assumption. Leaving this comment thread unresolved so that we don\u0027t forget to add the test case or the UNREACHABLE().",
      "parentUuid": "b7c2f2d8_4a07459d",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81fdcf8a_805c9628",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-12-01T18:04:14Z",
      "side": 1,
      "message": "The new end2end test verified my guess, see the patch at https://dawn-review.googlesource.com/c/dawn/+/71441",
      "parentUuid": "31229e39_06006f99",
      "revId": "32866ff376478895b3b3538aba31f9a7741cb028",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}