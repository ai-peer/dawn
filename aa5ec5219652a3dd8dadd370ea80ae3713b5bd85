{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15500690_35ee8e23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-01-13T21:12:26Z",
      "side": 1,
      "message": "PTAL. I\u0027m still fuzzy on when/how the colorspace parameter is used. Seems like requiring undefined for single plane and requiring srgb for multiplane might make sense (because that\u0027s what operations are implemented).",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ca55ef5_9b7dcaa4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "adding kainino@ for clarification on this question",
      "parentUuid": "15500690_35ee8e23",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3bb5a79_c7f9ac5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-01-13T23:25:07Z",
      "side": 1,
      "message": "GPUExternalTextureDescriptor.colorSpace controls the output color space of a sample operation on the external texture - that is, the R,G,B values you get from the sample encode a particular color using that color space.\n\nIt only has one valid value right now, \"srgb\" (\u0027undefined\u0027 is not possible in the spec, it defaults to \"srgb\"), though I expect it to later gain other well-defined spaces like \"srgb-linear\" and \"display-p3\".\n\nIf you don\u0027t have color conversions implemented for single-plane I think that\u0027s OK for now, and maybe WGPUPredefinedColorSpace_Undefined is a good way to represent that, but eventually we\u0027re going to want to implement it. Have you looked at Shaobo\u0027s color conversion code? It\u0027s probably simple enough that we don\u0027t need to actually share code, but we can copy a lot of it.\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp",
      "parentUuid": "3ca55ef5_9b7dcaa4",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c37c95b9_2698a31b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-01-14T17:46:30Z",
      "side": 1,
      "message": "Okay. I understand referenced code and it\u0027s able to be added on top of what I have. Just to be clear I have nothing at all implemented that\u0027s related to this generic colorspace-to-colorspace conversion. Single-plane external texture sampling currently does nothing - whatever is passed in will be passed out. Multiplane conversion does result in srgb output - but that\u0027s because the YUV-\u003eRGB conversion I used (ITU Rec.709) has srgb output (after an additional gamma correction).\n\nTo support generic colorspace-to-colorspace conversion it looks like I\u0027ll need to have source colorspace info and info on if the source has premultiplied alpha. I don\u0027t know if this info can be acquired from Chromium, or if it needs to be provided by the WebGPU API.",
      "parentUuid": "c3bb5a79_c7f9ac5e",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef5a7824_3403a949",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "(%s) ... descriptor-\u003eformat",
      "range": {
        "startLine": 69,
        "startChar": 56,
        "endLine": 69,
        "endChar": 57
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae7afb8d_2aeeba5d",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-14T11:23:55Z",
      "side": 1,
      "message": "In general, please read https://dawn.googlesource.com/dawn/+/refs/heads/main/docs/errors.md#error-message-formatting (error should say what happened, not what cannot happen, etc).",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d761a66b_4504a520",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-14T11:23:55Z",
      "side": 1,
      "message": "Can we make this an \"unsafe api\" until it is fully implemented? Otherwise it will be possible for the renderer process to attack the GPU process using the WIP implementation of multi planar external textures.",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0f98118_3f2ad215",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "(%s) ... descriptor-\u003eformat",
      "range": {
        "startLine": 79,
        "startChar": 38,
        "endLine": 79,
        "endChar": 39
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d77e234_ab530eaa",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "nit: prefer phrasing as \"Multiplanar external texture destination color space (%s) is not %s\", descriptor-\u003ecolorSpace, wgpu::PredefinedColorSpace::Srgb\"\n \nso it prints what the enum is, and what was expected",
      "range": {
        "startLine": 82,
        "startChar": 22,
        "endLine": 82,
        "endChar": 88
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00211697_fb6affbb",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "(%s) ... descriptor-\u003eplane0",
      "range": {
        "startLine": 85,
        "startChar": 38,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4051ac6f_91bb25ae",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "(%s) ... descriptor-\u003eplane1",
      "range": {
        "startLine": 89,
        "startChar": 38,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f91e4d4_6eb5fc50",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-13T22:49:43Z",
      "side": 1,
      "message": "nit: just mTextureViews[1] \u003d descriptor-\u003eplane1 ?",
      "range": {
        "startLine": 130,
        "startChar": 8,
        "endLine": 132,
        "endChar": 9
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2c16bfc_a9e11751",
        "filename": "src/tests/unittests/validation/ExternalTextureTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-14T11:23:55Z",
      "side": 1,
      "message": "nit: you could use default argument values for kDefaultTextureFormat and kDefaultUsage",
      "range": {
        "startLine": 23,
        "startChar": 56,
        "endLine": 24,
        "endChar": 82
      },
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8cbf091_af801d02",
        "filename": "src/tests/unittests/validation/ExternalTextureTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-14T11:23:55Z",
      "side": 1,
      "message": "In this CL we make it so a YUV multiplanar texture can only be created with two views from a R8BG8Biplanar420Unorm. But I don\u0027t think that\u0027s what we want, because sometimes we could get the two planes as two separate textures (for example on Metal?)\n\nInstead the ExternalTexture creation would take two views: an R8unorm (Y) one and a RG8unorm one (UV) (TBD if we need to support other single and two component formats).\n\nThis would also make it much easier to test the new GPUExternalTexture code paths because they would only need regular textures, no need to create a multiplanar one!",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "285e7f01_4b8a947a",
        "filename": "src/tests/unittests/validation/ExternalTextureTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-01-14T19:19:18Z",
      "side": 1,
      "message": "I see. So does that also mean we need a secondary format parameter in ExternalTextureDescriptor? i.e. plane0format, plane1format etc. I suppose we should also validate TextureAspect::\u003cPlane0Only, Plane1Only\u003e",
      "parentUuid": "c8cbf091_af801d02",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78fee8e6_df9d9f11",
        "filename": "src/tests/unittests/validation/ExternalTextureTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-01-14T19:38:21Z",
      "side": 1,
      "message": "Or we can just delete format from ExternalTextureDescriptor all together and infer the format from the passed in planes.",
      "parentUuid": "285e7f01_4b8a947a",
      "revId": "aa5ec5219652a3dd8dadd370ea80ae3713b5bd85",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}