{
  "comments": [
    {
      "key": {
        "uuid": "421ae3de_59981bbd",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 475,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-20T08:40:09Z",
      "side": 1,
      "message": "nit: Can you edit the CMakeLists.txt too?",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aa11836_483e9e24",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-17T21:49:42Z",
      "side": 1,
      "message": "I\u0027ll probably change this to 512 for now, but may need to tune more in the future. 512 was just as fast, 256 was a little slower.\n\nThe microbenchmarks can be a little noisy, so we can probably revisit when we have more real-world test cases.",
      "range": {
        "startLine": 26,
        "startChar": 55,
        "endLine": 26,
        "endChar": 59
      },
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b970e83_1df38462",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-20T08:40:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1aa11836_483e9e24",
      "range": {
        "startLine": 26,
        "startChar": 55,
        "endLine": 26,
        "endChar": 59
      },
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "628d2075_00bb2694",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-20T08:40:09Z",
      "side": 1,
      "message": "Note at some point we\u0027ll have to handle what happens with empty bind groups, that\u0027s valid in WebGPU but invalid in Vulkan.",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb6d1d11_7310fe50",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-18T01:38:42Z",
      "side": 1,
      "message": "Why do mMaxSets this way? I\u0027d think that the best performance would be achieved with a fixed mMaxSets (because IIUC it sets the number of allocations in a slab), not a fixed kMaxDescriptorsPerPool.",
      "range": {
        "startLine": 42,
        "startChar": 8,
        "endLine": 42,
        "endChar": 16
      },
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9648cbf_1a5bdaf1",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-18T01:38:42Z",
      "side": 1,
      "message": "nit: ASSERT \u003e 0",
      "range": {
        "startLine": 42,
        "startChar": 44,
        "endLine": 42,
        "endChar": 64
      },
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e992034_74068d83",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-18T00:31:39Z",
      "side": 1,
      "message": "unit: also suggest checking for leaks via ASSERT(freeSetIndices \u003d\u003d MaxSets).",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1d0eb9_487c2514",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-20T08:40:09Z",
      "side": 1,
      "message": "nit: DescriptorPool* ?",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2122516_2be871fe",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-18T00:31:39Z",
      "side": 1,
      "message": "unit: check allocationInfo is valid to prevent use-after-free.",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "887fb6e0_85ff499c",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-04-18T00:31:39Z",
      "side": 1,
      "message": "nit: isn\u0027t this more simply `return result;`?",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c85b2ee_59cdfdb9",
        "filename": "src/dawn_native/vulkan/DescriptorSetService.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-20T08:40:09Z",
      "side": 1,
      "message": "Maybe this could be done only once per serial, with the serialQueue of poolIndex / setIndex living in DescriptorSetAllocator?",
      "revId": "0662890589cd7e64a43c73ec80e7f1835ce93d7b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}