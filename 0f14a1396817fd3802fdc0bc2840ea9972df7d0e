{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "99163244_ba8db102",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "Out of curiosity, why did you choose to go with implementing this by adding support for multi-planar formats instead of importing each plane separately?\n\nThe latter seemed that it would be simpler, at least in Dawn. (but maybe having everything using multi-planar formats in Chromium makes things simpler there).",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e16211dc_2f16dde2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-17T11:29:47Z",
      "side": 1,
      "message": "(I\u0027ll reply others tomorrow)\nAh, the idea comes from that we don\u0027t need to modify current blink API like AssociateMailbox to tell dawn that we want which plane to be imported.\nAnd this info is provided with texture view.",
      "parentUuid": "99163244_ba8db102",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3563893_246fdf48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e16211dc_2f16dde2",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97abe852_6502e8e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-17T09:56:59Z",
      "side": 1,
      "message": "The CL is ready for reviewing! PTAL, thanks!",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e87519c_9eae4651",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f73ef5e_a10b8bce",
        "filename": "src/dawn/native/metal/BackendMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 361,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "u-u-nit: Uses ... which is available on ...",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d6aaaaa_ece15bb1",
        "filename": "src/dawn/native/metal/BackendMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 361,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f73ef5e_a10b8bce",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1537de3c_ce00f85e",
        "filename": "src/dawn/native/metal/DeviceMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 229,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "Seems like leftover debug code?",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1039bc45_879af0fc",
        "filename": "src/dawn/native/metal/DeviceMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 229,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-18T02:30:32Z",
      "side": 1,
      "message": "Oops...",
      "parentUuid": "1537de3c_ce00f85e",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3583a03d_281122f9",
        "filename": "src/dawn/native/metal/DeviceMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 229,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1039bc45_879af0fc",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fe18fb4_5969826a",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 577,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "u-nit: We could just store the iosurface for single-planar imports too. There\u0027s basically no cost and makes the code more general.",
      "range": {
        "startLine": 577,
        "startChar": 15,
        "endLine": 577,
        "endChar": 36
      },
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "902e3329_675644dc",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 577,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fe18fb4_5969826a",
      "range": {
        "startLine": 577,
        "startChar": 15,
        "endLine": 577,
        "endChar": 36
      },
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a4b144_70ff3d1f",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 826,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "This idea where we create the texture for the view as needed when creating the view won\u0027t work when want to use the texture for things other than rendering/sampling.  In the future we might want to support copies and that will fail.\n\nMaybe we could make metal::Texture store kMaxAspects MTLTextures, then you can ask the texture for a specific aspect. This would also mean that all the code to create mtlDescs from the IOSurface.\n\nWDYT?",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9064af9a_aab44ee4",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 826,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-18T02:30:32Z",
      "side": 1,
      "message": "@cwallez, @enga, @ccameron\nLet me describe the cases I\u0027m considering and see which is the possible solution.\nThe VideoFrame which we could access in blink might hold:\n- Multiple SIs (and multiple mailboxes) but the single IOSurface\n- Single SI and single IOSurfcae (But stands for multiplanar data, not the current implementation states yet)\n- Multiple SIs and multiple IOSurface (Each IOSurface stores a single plane).\n\nSo in blink, we probably do the things like:\n```\nTextureView plane_texture_views[kMaxPlane];\n// Check VideoFrame Plane number\nfor (uint32_t plane \u003d 0; plane \u003c plane_number; ++plane) {\n  gpu::webgpu::ReservedTexture reservation \u003d webgpu-\u003eReserveTexture(device_);\n  webgpu-\u003eAssociateMailbox(videoFrame-\u003emailboxes[plane], usage, reservation.texture ...);\n  plane_texture_views[plane] \u003d reservation.texture-\u003eCreateView(\u0026viewDesc);\n}\n\nWGPUExternalTextureDescriptor external_texture_desc \u003d {};\nexternal_texture_desc.plane0 \u003d plane_texture_views[0];\nexternal_texture_desc.plane1 \u003d plane_texture_views[1];\nexternal_texture_desc.colorSpace \u003d WGPUPredefinedColorSpace_Srgb;\n\n// Create GPUExternalTexture.\n```\n\nSo:\n- I think `AssociateMailbox` with plane ID might not be a good idea. Because we might have the case creating texture view with wrong plane index with the generated gpuTexture(e.g. gpuTexture is generated with AssociateMailbox(plane0), but createTextureView has aspect Plane1). This means we needs to add some validation which is not necessary at all.\n\n- Current CL requires creating TextureView explicitly before any ops. AssociateMailbox is lightweight (Creating WGPUTexture and adding Ref). But It is weired to support the usage like copy.\n\n- The proposal above which will do creating all MTLTextures in InitializeFromIOSurface phase will fix the issue by creating MTLTextures from all planes and holds them.\nBut I think it might have duplicated works when handling the case that VideoFrame has multiple SIs but the single IOSurface. In the second AssociateMailbox, we\u0027ll creating a new WGPUTexture and creating real MTLTextures again. I\u0027m not sure whether we could avoid this duplicated work. If there is a way, I think this probably the best solution.\n\nDo you have any suggestions?",
      "parentUuid": "86a4b144_70ff3d1f",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af43c962_9c340e25",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 826,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-21T00:43:16Z",
      "side": 1,
      "message": "Answer my own question.\nI recalled that on other platform, we should have cache system as optimization mechanism. For example, windows platform here https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/D3D11on12Util.h;l\u003d32?q\u003dD3D11on12ResourceCacheEntry\u0026ss\u003dchromium%2Fchromium%2Fsrc.\n\nSo I think macOS could have similar cache mechanism to store IOSurface and created plane MTLTextures. I\u0027ll have a try on this.",
      "parentUuid": "9064af9a_aab44ee4",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ed82ac_41134272",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 826,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-21T05:41:21Z",
      "side": 1,
      "message": "Re-re my answer:\nOn mac there is a bit hard to have similar cache. One big problem is where should we store these pre-built MTLTextures. SIs, WGPUTextures and Dawn Device are not good places.\nThe only way to store it is we should have a shared_state object which is similar to D3D backend. I suspect it is worth on mac. On Windows D3D, the shared_state could store shared_handle which re-open is expensive. But on mac, I think CFRetain/CFRelease is light-weight. So my question above is still available. \n\ncwallez@, enga@ and ccameron@, WDYT?",
      "parentUuid": "af43c962_9c340e25",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7473e5e0_5b350155",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 826,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-21T07:51:05Z",
      "side": 1,
      "message": "Eventually I think all OSes will have a mechanism similar to what Dawn has today on D3D12 to persistently import texture and vend them out. This should be an optimization that\u0027s worthwhile everywhere (and we already know there\u0027s avoidable overhead on Linux).\n\nWith the various cases you described I think the current direction with multi-planar is good and it would be a bit of work but not too hard to change if we find we need to later.",
      "parentUuid": "57ed82ac_41134272",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "349e1b31_b7fff698",
        "filename": "src/dawn/native/metal/TextureMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 826,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Thanks! Ack.",
      "parentUuid": "7473e5e0_5b350155",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b4fecd6_7f6a9e11",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "Is this leaked or does CFDictionaryAddValue take the ref?",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c9541b7_f4d95c21",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Leaked. Thanks for catching this!",
      "parentUuid": "6b4fecd6_7f6a9e11",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b78aa4a_eeab23c0",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "Ditto using CFRef or IORef",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49df262d_a708a913",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b78aa4a_eeab23c0",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "023333ac_b73e9962",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "nit: we could lock/unlock outside of the loop",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76dbe8e3_440ee622",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 146,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "023333ac_b73e9962",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00007bc5_e9396a22",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "nit: unused",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c931fcb_1da77c56",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00007bc5_e9396a22",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87a5fd2f_263231e4",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-03-17T10:36:01Z",
      "side": 1,
      "message": "I think this retain is redundant with the one in the constructor of PlatformTextureIOSurface.",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b18046c6_256382a1",
        "filename": "src/dawn/tests/end2end/VideoViewsTests_mac.cpp",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-03-23T03:39:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87a5fd2f_263231e4",
      "revId": "0f14a1396817fd3802fdc0bc2840ea9972df7d0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}