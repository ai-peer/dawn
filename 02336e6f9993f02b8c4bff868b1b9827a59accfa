{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "24ac6ec2_39ae3022",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000801
      },
      "writtenOn": "2021-04-23T09:03:35Z",
      "side": 1,
      "message": "By the way, my UWP app passes all WACK tests perfectly fine with old LoadLibraryA code (because it is actually allowed by Microsoft for some time now).\nSo this LoadPackagedLibrary additions make little to no sense for UWP support.\n\nI\u0027d prefer Dawn to link D3D at build-time though.\nWhat\u0027s the reason it loads D3D12 \u0026 D3D11 at runtime?\nTo support Windows 7 \u0026 Windows 8.x?\n",
      "revId": "02336e6f9993f02b8c4bff868b1b9827a59accfa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa301b05_580cef6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-23T11:42:04Z",
      "side": 1,
      "message": "You said \"allowed for now\", so is the plan that it won\u0027t be supported in the future? If yes, then it makes sense to prepare and just use LoadPackagedLibrary.\n\nYes, Dawn loads D3D11/12 at runtime to support other versions of Windows.",
      "parentUuid": "24ac6ec2_39ae3022",
      "revId": "02336e6f9993f02b8c4bff868b1b9827a59accfa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b083874c_45e9ce3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000801
      },
      "writtenOn": "2021-04-23T12:09:42Z",
      "side": 1,
      "message": "I\u0027ve meant \"allowed since some time ago\".\nAPI restrictions for UWP were relaxed greatly since original inception.\nAnd with each new Windows SDK release, MS allows more and more classic Win32 APIs. They are basically merging both worlds.\n\nDocumentation is lagging behind though, so the best way is to use WACK, and consult with %ProgramFiles(x86)%\\Windows Kits\\10\\App Certification Kit\\SupportedAPIs-x86.xml\n\nI do not see any use for LoadPackagedLibrary in Dawn. It won\u0027t load d3d11.dll or d3d12.dll anyway.",
      "parentUuid": "aa301b05_580cef6b",
      "revId": "02336e6f9993f02b8c4bff868b1b9827a59accfa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26401df9_b92b6c39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-23T13:20:19Z",
      "side": 1,
      "message": "Hey Vladimir:\n\"I\u0027d prefer Dawn to link D3D at build-time though.\":\nLoadPackagedLibrary APIs can\u0027t find those DLLs because they are not in UWP\u0027s DLL search space. And LoadLibrary is not defined if WINAPI_FAMILY\u003d\u003dWINAPI_FAMILY_PC_APP.\n\n\"I do not see any use for LoadPackagedLibrary in Dawn\":\nTrue. LoadPackagedLibrary is not used. It\u0027s just a replacement of original LoadLibraryA for UWP since LoadLibraryA is not defined in WINAPI_FAMILY_PC_APP, otherwise it will stop the compilation.\n\nHey Corentin:\n\"then it makes sense to prepare and just use LoadPackagedLibrary\":\nWin32 version should keep using LoadLibrary. It\u0027s addressed here: \"Desktop applications cannot use LoadPackagedLibrary; if a desktop application calls this function it fails with APPMODEL_ERROR_NO_PACKAGE.\"\nhttps://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-loadpackagedlibrary",
      "parentUuid": "b083874c_45e9ce3a",
      "revId": "02336e6f9993f02b8c4bff868b1b9827a59accfa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bae855d3_65d7a146",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-26T08:07:57Z",
      "side": 1,
      "message": "Yeah sorry, I meant it makes sense to keep the logic in this CL as is.\n\nSince WINAPI_FAMILY\u003d\u003dWINAPI_FAMILY_PC_APP makes using LoadLibraryA a compilation error, let\u0027s go forward with the current approach and we can iterate in follow-up CLs if need be.",
      "parentUuid": "26401df9_b92b6c39",
      "revId": "02336e6f9993f02b8c4bff868b1b9827a59accfa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a211d38_64c6b913",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-26T08:07:57Z",
      "side": 1,
      "message": "Still LGTM, but I think we should squash https://dawn-review.googlesource.com/c/dawn/+/49040 in this CL and update the commit message.",
      "revId": "02336e6f9993f02b8c4bff868b1b9827a59accfa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}