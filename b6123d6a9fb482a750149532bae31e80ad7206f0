{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6674a7fc_8228cd82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-09T12:36:32Z",
      "side": 1,
      "message": "Alternative way to fix the memory leaks bug in DawnWire due to api objects being used after last external ref to device is dropped.",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f517ed66_241bc07b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-09T13:41:35Z",
      "side": 1,
      "message": "PTAL.",
      "parentUuid": "6674a7fc_8228cd82",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d5e046a_c19e7d9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-09T16:44:33Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2db5ad4c_fffc6e0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-10T09:51:23Z",
      "side": 1,
      "message": "Still LGTM! Loko PTAL since Austin is OOO today.",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76b996fa_fc8e365b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-10T17:11:47Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bf75c00_4283aa25",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1533,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-10T17:11:47Z",
      "side": 1,
      "message": "I think we can remove all the tags",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de5e347_b7ecb551",
        "filename": "include/dawn/native/DawnNative.h",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-09T16:44:33Z",
      "side": 1,
      "message": "Why does this need to be added to both the dawn::native API and the wgpu:: API?",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bdacfe8_1a3becb4",
        "filename": "include/dawn/native/DawnNative.h",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-09T17:15:33Z",
      "side": 1,
      "message": "I think from chrome `webgpu_decoder_impl.cc` side, only this `DawnNative.h` header is exposed. I don\u0027t know the exact reasons. It\u0027s the same thing why we have to added `DeviceTick` function in this header. Chrome uses `DeviceTick` instead of `wgpu::Device::Tick`\n\nSo if we want to change the webgpu\u0027s polling code in chrome to invoke `Instance::ProcessEvents` instead of `Device::Tick` we need to add the `ProcessEvents` function here.",
      "parentUuid": "9de5e347_b7ecb551",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "246b543d_bf85c25a",
        "filename": "include/dawn/native/DawnNative.h",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-10T09:51:23Z",
      "side": 1,
      "message": "Ah! It\u0027s because the dawn::native:: version returns a boolean but not the wgpu:: version. Ok we can have the dual path for now and figure out if we can just have the wgpu:: one return a boolean later.",
      "parentUuid": "4bdacfe8_1a3becb4",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78ba1b9e_cec86e9a",
        "filename": "include/dawn/native/DawnNative.h",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-10T09:51:33Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "246b543d_bf85c25a",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b94dd7c_9bafae0c",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-09T16:44:33Z",
      "side": 1,
      "message": "When does this happen? Is it because of mocking in tests?",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f950b068_1528c69c",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-09T17:15:33Z",
      "side": 1,
      "message": "`DeviceBase::DeviceBase()` ctor version doesn\u0027t have adapter passed in. I think this is used by mocking.\nBut not sure whether we actually call `Initialize` on the mock device. Should this be changed to ASSERT instead?",
      "parentUuid": "5b94dd7c_9bafae0c",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2757f62f_bfd1d2cf",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-03-09T17:32:49Z",
      "side": 1,
      "message": "Just checked. We do call `Initialize` on the mock device here https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/unittests/native/mocks/DeviceMock.cpp;drc\u003dbec0ef46974cd9a6bc0f1f1ae34baa11913f77af;l\u003d115",
      "parentUuid": "f950b068_1528c69c",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "166634d4_c8e7e0fa",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-10T09:51:23Z",
      "side": 1,
      "message": "Thanks for the explanation. It\u0027s unfortunate that code here would need to be defensive in case it is used in a mocking scenario. Can you open an issue about this to see if we can have an adapter in the DeviceMock in the future?",
      "parentUuid": "2757f62f_bfd1d2cf",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe0df56f_546af971",
        "filename": "src/dawn/native/Instance.cpp",
        "patchSetId": 2
      },
      "lineNbr": 533,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-10T17:11:47Z",
      "side": 1,
      "message": "it should be possible to write a test with deviceA and deviceB, where calling Tick on deviceA releases deviceB (inside some callback) - making the second tick cause a use after free.\n\nI think we can fix this by making the vector of devices local to this function hold a Ref",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd0f919_37b0b798",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-10T17:11:47Z",
      "side": 1,
      "message": "do we need the call to Tick still?",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cbb7bb5_f6a86444",
        "filename": "src/dawn/wire/server/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-10T17:11:47Z",
      "side": 1,
      "message": "is this to make sure no pending callbacks are in flight?\nshould we use the dawn::native:: version to call ProcessEvents until idle?",
      "revId": "b6123d6a9fb482a750149532bae31e80ad7206f0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}