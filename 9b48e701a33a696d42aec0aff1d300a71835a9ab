{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "837e6316_a581f59e",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-27T17:29:40Z",
      "side": 1,
      "message": "I don\u0027t think you need this. You can have it generate input attachment load, and then generate-skip entries for all the other writers. Then as they get implement the skips are over-written with non-skip expectation files.",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ec2fce9_ebdd8fbf",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-27T17:38:30Z",
      "side": 1,
      "message": "Even if I add skip entries for the writers, the fuzzer still attempts to compile the generated wgsl with various backends, and it will crash.\n\nI don\u0027t know any way to skip the the tests in fuzzer. Only when I add some supports to IR, spv printer, etc (in subsequent CLs) then the fuzzer would be happy to compile the generated wgsl.\n\nHere is one of the previous patchsets\u0027 CQ failures: https://logs.chromium.org/logs/dawn/buildbucket/cr-buildbucket/8746975760237887025/+/u/Check_fuzzers/stdout\n\n@bclayton@google.com if you have any suggestions.",
      "parentUuid": "837e6316_a581f59e",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "209d923c_1b29541e",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-27T17:45:47Z",
      "side": 1,
      "message": "btw, I added the generated wgsl and expectations for all writers in this CL https://dawn-review.googlesource.com/c/dawn/+/189861",
      "parentUuid": "2ec2fce9_ebdd8fbf",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5857bd0_18309dbe",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-27T17:49:48Z",
      "side": 1,
      "message": "We can\u0027t land the CL when it causes the compiler to ICE. If you\u0027ve added this to the IR, then you\u0027ll need to handle this in the IR encoder and decoder. It should be a matter of adding a new protobuf field and a new switch case for the encoder and decoder.\n\n+1 to adding a few SKIP expectations with `--generate-skip` instead of hacking the template.",
      "parentUuid": "209d923c_1b29541e",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b199c0_83ac348e",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-05-27T17:50:11Z",
      "side": 1,
      "message": "If 189860 gets landed first, does that mean this isn\u0027t needed as it\u0027s an ICE in the protobuf encoder?",
      "parentUuid": "209d923c_1b29541e",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a560959_560ae4eb",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-27T18:03:01Z",
      "side": 1,
      "message": "189860 is not enough to avoid fuzzer crash though. There is still another ICE crash in fuzzer like this:\n```\nout/DebugASan/tint_wgsl_fuzzer: Running 1 inputs 1 time(s) each.\nRunning: /Users/lehoangquyen/dawn/test/tint/builtins/gen/var/inputAttachmentLoad/315bf5.wgsl\nICE while running fuzzer: \u0027tint::spirv::writer::IRFuzzer\u0027\n../../src/tint/lang/spirv/writer/printer/printer.cc:615 internal compiler error: Switch() matched no cases. Type: tint::core::type::InputAttachment\nTrace/BPT trap: 5\n```\n\nit requires I add supports to spirv\u0027s printer as well. Though that would make this CL too big.",
      "parentUuid": "e6b199c0_83ac348e",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cc622c1_12e40af2",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-05-27T18:04:22Z",
      "side": 1,
      "message": "Can you just stub out the SPIR-V implementation so it just does nothing. It just needs the switch entry, it doesn\u0027t have to do anything.",
      "parentUuid": "5a560959_560ae4eb",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f39f532_0ed8e76d",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-27T18:05:17Z",
      "side": 1,
      "message": "Tbh, this CL didn\u0027t add `inputAttachmentLoad` support to IR. I added this TODO case\n```\ncase core::BuiltinFn::kInputAttachmentLoad:\n                // TODO(341117913): handle this function in IR pb.\n                break;\n```\nin IR\u0027s encoder because without that, the compiler will complain.",
      "parentUuid": "5a560959_560ae4eb",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd60fc79_e7c9ea84",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-27T18:15:06Z",
      "side": 1,
      "message": "Does that mean the fuzzers already crash? We need to fixup the places causing crashes when we generate the tests such that we don\u0027t need this workaround in the tmpl file, so i\u0027m guessing a similar todo will be needed in other places.",
      "parentUuid": "9f39f532_0ed8e76d",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71198623_9dcbf85d",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-27T18:23:13Z",
      "side": 1,
      "message": "Let me try to add stubs to spirv implementation. It would be nice to have a way to tell that a writer doesn\u0027t support this and skip the tests though.",
      "parentUuid": "fd60fc79_e7c9ea84",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dab1192a_3d4d1391",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-27T18:29:41Z",
      "side": 1,
      "message": "I tried adding code that emits dummy spirv\u0027s OpImageRead instruction for InputAttachmentLoad, then the fuzzer failed the spirv validation step. Guess I have to fully implement spirv writer? :/",
      "parentUuid": "71198623_9dcbf85d",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "955d6ced_f144588f",
        "filename": "test/tint/builtins/gen/gen.wgsl.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-27T18:34:29Z",
      "side": 1,
      "message": "I think we should be able to disable the extension in the top-level WGSL fuzzer by removing it from the `allowed_features.extensions` set here:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tint/cmd/fuzz/wgsl/fuzz.cc;l\u003d139?q\u003dfuzz.cc\u0026ss\u003dchromium",
      "parentUuid": "dab1192a_3d4d1391",
      "revId": "9b48e701a33a696d42aec0aff1d300a71835a9ab",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}