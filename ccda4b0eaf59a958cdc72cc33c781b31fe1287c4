{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bbec1f3d_2c1e8742",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-18T15:49:03Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e4d70ba_d6269df0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "LGTM",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96a64cb2_4a417011",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2496,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-18T15:49:03Z",
      "side": 1,
      "message": "nit: \"tags\": [\"dawn\"] would ensure we don\u0027t expose this method to the upstream header or emscripten",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1f83b88_d2576596",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2496,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T18:22:27Z",
      "side": 1,
      "message": "you can do [\"dawn\", \"native\"] to remove the need for the wire change (I think).",
      "parentUuid": "96a64cb2_4a417011",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22f51ec8_b38ae816",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2496,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-18T19:17:59Z",
      "side": 1,
      "message": "This doesn\u0027t work because it will add a new `surfaceGetSupportedUsages` entry to the `DawnProcTable`. But the auto generated wire client code doesn\u0027t assign anything to this entry leading to a compilation error.\n\nThe only way I know of is manually implementing the function and mark it as `client_handwritten_commands`.",
      "parentUuid": "c1f83b88_d2576596",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8daf4328_8c790dc1",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2496,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "Ok it\u0027s fine for now. We\u0027ll need to improve the generator in the future.",
      "parentUuid": "22f51ec8_b38ae816",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0221d469_21d3494c",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2497,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-18T15:49:03Z",
      "side": 1,
      "message": "Do the supported usages depend on the format?",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c293cf_d7bfc4ae",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2497,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "in vulkan they don\u0027t appear to",
      "parentUuid": "0221d469_21d3494c",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "405bd691_1e7ed592",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 2497,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-19T13:56:25Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d4c293cf_d7bfc4ae",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c561814_bbef3256",
        "filename": "src/dawn/native/Surface.cpp",
        "patchSetId": 13
      },
      "lineNbr": 319,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "ConsumedError should be done here - as close to the top level API call as possible.\n\nSuggest something like:\n\n```\nwgpu::TextureUsage usage;\nif (mInstance-\u003eConsumedError(adapter-\u003eGetSupported..., \u0026usage)) {\n  return wgpu::TextureUsage::None;\n}\nreturn usage;\n```",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5581d26f_ffd143ff",
        "filename": "src/dawn/native/Surface.cpp",
        "patchSetId": 13
      },
      "lineNbr": 319,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-19T09:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c561814_bbef3256",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6229bab9_8022ce72",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-18T15:49:03Z",
      "side": 1,
      "message": "Does the usage absolutely need render attachmend?",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c64cae4_e8d8f291",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "+1 - it\u0027s probably ok if it\u0027s only configured with CopyDst, for example\n\nWhile the backend texture may always be renderable under the hood - the client could express that the texture isn\u0027t supposed to be rendered to",
      "parentUuid": "6229bab9_8022ce72",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c6bb9ea_4e73ea3d",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-19T09:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c64cae4_e8d8f291",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "362860c7_25e7518e",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-18T15:49:03Z",
      "side": 1,
      "message": "This means that non-Chromium projects using Dawn will have a portability hazard. Would it be possible to make this an extension that enables additional usages that you query from the surface? WDYT Austin?",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f7849a_acaa6913",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T18:22:27Z",
      "side": 1,
      "message": "Yes, querying the usages without enabling the feature should be a validation error.\nAnd, using any supported usages that are not RenderAttachment (without a query) without enabling the feature should also be a validation error. We should have unittests for those cases too",
      "parentUuid": "362860c7_25e7518e",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66288f34_dcfead8b",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-18T19:17:59Z",
      "side": 1,
      "message": "What should be the name of the feature? `ExtendedSwapChainUsages` or `ReadableSwapChain`?",
      "parentUuid": "f7f7849a_acaa6913",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63277234_e52645a2",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "borrowing from Vulkan \"capabilities\" about wgpu::FeatureName::SurfaceCapabilities ?\n\nlooking at the Vulkan extension, I\u0027m wondering if maybe we ought to write out the capabilities to a struct in case we need to add things in the future. It\u0027ll have just one member for now. I\u0027m not sure if it it\u0027s worth it considering we don\u0027t 100% know this is going to be the API we settle on in webgpu.h\n\nI suppose it is fine for now, and if we add the struct in the future, we can name the getter \"GetSurfaceCapabilities\"\n\nLet\u0027s also put a doc describing the feature in third_party/dawn/docs/dawn/features/",
      "parentUuid": "66288f34_dcfead8b",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9358930c_ce8cbe7b",
        "filename": "src/dawn/native/SwapChain.cpp",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-19T09:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63277234_e52645a2",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a5c239_5ec8cd69",
        "filename": "src/dawn/native/vulkan/AdapterVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 408,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-18T20:05:09Z",
      "side": 1,
      "message": "error case should probably return None.",
      "range": {
        "startLine": 408,
        "startChar": 0,
        "endLine": 408,
        "endChar": 52
      },
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "037ddc9c_2f0836bb",
        "filename": "src/dawn/native/vulkan/AdapterVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 408,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-19T09:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5a5c239_5ec8cd69",
      "range": {
        "startLine": 408,
        "startChar": 0,
        "endLine": 408,
        "endChar": 52
      },
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0839b042_534873d5",
        "filename": "src/dawn/wire/client/Surface.h",
        "patchSetId": 13
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-18T15:49:03Z",
      "side": 1,
      "message": "We don\u0027t need to implement surface in the wire at this time. What caused the compilation require this file?",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "216f0215_ca42e332",
        "filename": "src/dawn/wire/client/Surface.h",
        "patchSetId": 13
      },
      "lineNbr": 1,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-19T09:59:53Z",
      "side": 1,
      "message": "This doesn\u0027t work without manual implementation because the current generator will add a new `surfaceGetSupportedUsages` entry to the `DawnProcTable`. But the auto generated wire client code wouldn\u0027t assign anything to this entry leading to a compilation error.\n\nUsing \"dawn\", \"native\" tags have the same problem.\n\nThe only way I know of is manually implementing the function and mark it as `client_handwritten_commands`.",
      "parentUuid": "0839b042_534873d5",
      "revId": "ccda4b0eaf59a958cdc72cc33c781b31fe1287c4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}