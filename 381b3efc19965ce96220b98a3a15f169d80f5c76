{
  "comments": [
    {
      "key": {
        "uuid": "b5fdaac3_a8e5f4c8",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 34
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "The allocations store a lot more data than the bindgroup needs. All the bindgroup needs after allocation is the D3D12_GPU_DESCRIPTOR_HANDLE and serial for both heaps.",
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bb6662d_66ac1097",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 144,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "When the handling of RTV / DSV heap is removed, this function can return a DescriptorHeapAllocation without ResultOrError.",
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "204dfdd0_51441395",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 152,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-24T02:45:43Z",
      "side": 1,
      "message": "Is lack of sub-allocation for these non-shader visible heaps a regression with your change? If so, we\u0027ll need to fix that before landing.",
      "range": {
        "startLine": 152,
        "startChar": 16,
        "endLine": 152,
        "endChar": 52
      },
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98afb85b_6b8328d8",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 152,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "That\u0027s the case already, and see [1]: we don\u0027t need to handle RTV / DSV in this CL.",
      "parentUuid": "204dfdd0_51441395",
      "range": {
        "startLine": 152,
        "startChar": 16,
        "endLine": 152,
        "endChar": 52
      },
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bbfef49_4c797e3b",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 183,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "[2]: we could have a Serial value of 0 mean that the bindgroup is not allocated and have the heap serials in the allocators start at 1.",
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84627b84_26f123b2",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 195,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-24T02:45:43Z",
      "side": 1,
      "message": "Nit: Please use std::move to avoid an AddRef.",
      "range": {
        "startLine": 195,
        "startChar": 42,
        "endLine": 195,
        "endChar": 78
      },
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88cf899f_88fb3f2b",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 23,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-24T02:45:43Z",
      "side": 1,
      "message": "Nit: ComPtr already initializes its member variable to nullptr so there isn\u0027t a need to also do it in the constructor.",
      "range": {
        "startLine": 23,
        "startChar": 10,
        "endLine": 23,
        "endChar": 34
      },
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50806fbd_bf22d14a",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 30,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-24T02:45:43Z",
      "side": 1,
      "message": "Nit: Use std::move to avoid unnecessary AddRef.",
      "range": {
        "startLine": 30,
        "startChar": 26,
        "endLine": 30,
        "endChar": 40
      },
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad6bd079_f9d26953",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 34
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "The call to GetCPUDescriptorHandleForHeapStart and computation of mSizeIncrement * mOffset is done repeatedly. Instead we could store the D3D12_CPU_DESCRIPTOR_HANDLE or D3D12_GPU_DESCRIPTOR_HANDLE that are the start of the allocation and offset into them.\n\nThe allocation could then just have the following members:\n\n        D3D12_CPU_DESCRIPTOR_HANDLE baseCPUHandle;\n        D3D12_GPU_DESCRIPTOR_HANDLE baseGPUHandle;\n        uint32_t sizeIncrement;\n        Serial serial;\n\n        bool IsValid() const;\n        D3D12_GPU_DESCRIPTOR_HANDLE GetGPUHandle(uint32_t index) const;\n        D3D12_CPU_DESCRIPTOR_HANDLE GetCPUHandle(uint32_t index) const;",
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f675b6c2_222a52ea",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.h",
        "patchSetId": 34
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "With [2] this is unused.",
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b5559f_55c96e92",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.h",
        "patchSetId": 34
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "nit: unused.",
      "revId": "381b3efc19965ce96220b98a3a15f169d80f5c76",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}