{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f12fced2_9aa3ae66",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3043,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T21:24:32Z",
      "side": 1,
      "message": "This is checking that the next token _is_ a binary operator. Maybe:",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdc3cafe_df948cd7",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3043,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-10-14T11:28:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f12fced2_9aa3ae66",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeeeec19_c63cc712",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3045,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T21:24:32Z",
      "side": 1,
      "message": "Why is this called `lhs_op` as it\u0027s the full binary expression, not the left hand side?",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1530c55_0e65e8f0",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3045,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-10-14T11:28:17Z",
      "side": 1,
      "message": "If `expr` is a binary op, and we have another binary op that follows, then `expr` _is_ the LHS.",
      "parentUuid": "aeeeec19_c63cc712",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88cf63e1_56eb1fab",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3046,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T21:24:32Z",
      "side": 1,
      "message": "This is subtle and can use a comment (given you had to explain it to me).\n\n```\n// Note, expression is greedy an will consume all the operators of the same type\n// so, `a \u0026 a \u0026 a` would all be consumed above. If you see any binary operator\n// after this then it _must_ be a different one, and hence an error.\n```",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d59ca6b_f30693bc",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3046,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-10-14T11:28:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88cf63e1_56eb1fab",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "701cbece_e42ee1e1",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T22:34:23Z",
      "side": 1,
      "message": "This is wrong, + and - don\u0027t associate with Multipicative.",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbf01b97_536123df",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-10-14T11:28:17Z",
      "side": 1,
      "message": "I\u0027m not sure if the test is wrong, our implementation is wrong, or whether you\u0027re misinterpreting this table.\n\nThis table specifies all the binary operators that can follow the RHS of this binary-op, without requiring parentheses. This line is stating that you can replace `?` in `A + B ? C` with any of the logical, relational, additive or multiplicative operators without requiring parentheses.\n\nTesting with the parent change, this compiles without issue:\n\n```\nfn f(a : i32, b : i32, c: i32) -\u003e i32 {\n  return a + b * c;\n}\n```\n\nIf this is intended behaviour (which I believe it is), this is correct.\n\nAdded more comments.",
      "parentUuid": "701cbece_e42ee1e1",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91c2ba6e_74c51b49",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-14T17:58:47Z",
      "side": 1,
      "message": "I\u0027m going by the diagram in #1146, but maybe I\u0027m reading it wrong. @dneto@google.com could you clarify how the precedence, associtivity and parenthesis all work?",
      "parentUuid": "bbf01b97_536123df",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7267aa6a_07d1a494",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-10-17T21:13:17Z",
      "side": 1,
      "message": "It\u0027s ability to follow textually, doesn\u0027t say that the expression to the left has to remain grouped to the left.",
      "parentUuid": "91c2ba6e_74c51b49",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "859c0b91_c28df15f",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 302,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T22:34:23Z",
      "side": 1,
      "message": "I believe this is also wrong, relational should only be kLogical",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a92539a_34eaf9fc",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 309,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T22:34:23Z",
      "side": 1,
      "message": "I think this should only be kOpLAnd",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b51fc535_84ac4f68",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 309,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-10-17T21:13:17Z",
      "side": 1,
      "message": "see below.",
      "parentUuid": "3a92539a_34eaf9fc",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03e08b02_bfe2be91",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T22:34:23Z",
      "side": 1,
      "message": "Only kOpLOr",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce2ae1f4_51130d18",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-10-17T21:13:17Z",
      "side": 1,
      "message": "I think the code is right.\n\n    let b \u003d b || a+2 \u003c 3*5; // this is ok\n    let b \u003d b || a \u003c 3*5; // this is ok\n    let b \u003d b || 1\u003c\u003c2 \u003c 50; // this is ok",
      "parentUuid": "03e08b02_bfe2be91",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f09bd522_dfbbbf31",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-10-13T22:34:23Z",
      "side": 1,
      "message": "See https://github.com/gpuweb/gpuweb/issues/1146#issuecomment-714721825",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b6a5095_4201199c",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-10-14T11:28:17Z",
      "side": 1,
      "message": "Yup, that shows precedence, which I believe isn\u0027t the same as whether you require parentheses or not.",
      "parentUuid": "f09bd522_dfbbbf31",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c3b32ab_839277fb",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-14T17:58:47Z",
      "side": 1,
      "message": "My understanding was that it was both. I thought it was things in differnet groupings required parens, but I may be mis-reading the diagram.",
      "parentUuid": "9b6a5095_4201199c",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32fd666d_a9f085a3",
        "filename": "src/tint/reader/wgsl/parser_impl_expression_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-10-17T21:13:17Z",
      "side": 1,
      "message": "This table is about ability to follow textually, regardless of semantic grouping.\n\nSo, for example,  + can follow * but does not mean \"associate to the left\"",
      "parentUuid": "3c3b32ab_839277fb",
      "revId": "4f464c6319e272a632ae9048e8cd89a46c835385",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}