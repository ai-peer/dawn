{
  "comments": [
    {
      "key": {
        "uuid": "4f07ab05_998d5544",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-16T09:23:05Z",
      "side": 1,
      "message": "nit: this can be in the same header block as Assert.h",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c49dd357_f6bc6f2e",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-10-17T06:47:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f07ab05_998d5544",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dddfb020_4769a394",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 458,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-16T09:23:05Z",
      "side": 1,
      "message": "Adding manual code in generator templates always feels bad but we can figure out how to make this nicer in the future when we have more structs handled like this we can generalize the code.",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca772cd3_30ea29b4",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 458,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-10-17T06:47:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dddfb020_4769a394",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be3c593_d8108efe",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 469,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-16T09:23:05Z",
      "side": 1,
      "message": "This should be const volatile char*",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e777bf4e_d5daebbe",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 469,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-10-17T06:47:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4be3c593_d8108efe",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d73df41c_e670dd7d",
        "filename": "src/include/dawn_wire/Wire.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-16T09:23:05Z",
      "side": 1,
      "message": "We also need to know the total serialized size of the descriptor. Right now it is sizeof(DawnDeviceProperties) but that could change in the future when we have sub-descriptors.",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5da4b2a3_c8f26f31",
        "filename": "src/include/dawn_wire/Wire.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-17T00:04:04Z",
      "side": 1,
      "message": "+1. I think we\u0027re going to want this to be constant-size so in Chromium the client knows exactly how large the result will be.",
      "parentUuid": "d73df41c_e670dd7d",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aafbcba_79d90ccf",
        "filename": "src/include/dawn_wire/Wire.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-10-17T06:47:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5da4b2a3_c8f26f31",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b968f936_9050ec33",
        "filename": "src/include/dawn_wire/Wire.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-17T11:39:18Z",
      "side": 1,
      "message": "Erhm we gave conflicting comments here.  What happens will depend on whether DawnDeviceDescriptor is part of webgpu.h or not. If it is we\u0027ll have some extension mechanism that will make the size variable. (think of limits introduced in an extension)\n\nIf it is purely internal, maybe we can have it fixed size, not sure.",
      "parentUuid": "5aafbcba_79d90ccf",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b706fd29_a625e313",
        "filename": "src/include/dawn_wire/Wire.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-17T15:30:21Z",
      "side": 1,
      "message": "Whoops, sorry for the confusion. I think we should have a getter like\nsize_t SerializedDawnDevicePropertiesSize();\n\nRight now, it\u0027ll be fixed size. In the future, I think we should _try_ to keep the serialized size fixed.",
      "parentUuid": "b968f936_9050ec33",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45e6906e_022c24fb",
        "filename": "src/include/dawn_wire/Wire.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-10-18T05:13:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b706fd29_a625e313",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c499df0_6dab6b53",
        "filename": "src/tests/unittests/wire/WireBasicTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-16T09:23:05Z",
      "side": 1,
      "message": "This is more of a unittests that doesn\u0027t need the full Wire Client and Server to be brought up. Maybe split it in a different file and don\u0027t use a fixture?",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbc06f58_0e1a8a83",
        "filename": "src/tests/unittests/wire/WireBasicTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-10-17T06:47:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c499df0_6dab6b53",
      "revId": "29ff19e8f06deecb1871b30468ef4d8de40924c9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}