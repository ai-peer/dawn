{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44f5708e_bc147ca2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-21T22:14:51Z",
      "side": 1,
      "message": "ok, PTAL - did some code moving in the previous CL to separate out unchanged parts and make the diff here nicer.\n\nI also renamed things to \"Stream\", \"StreamIn\", \"StreamOut\". Eventually it might be nice to change StreamIn and StreamOut to operator\u003c\u003c and operator\u003e\u003e but I\u0027ll leave that as a future improvement to consider.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b00e5be_86cc4424",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "LGTM overall, thanks for splitting a bit, it made review much easier.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb27139a_c2931063",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-07-23T04:29:44Z",
      "side": 1,
      "message": "Overall LGTM modulo Corentin\u0027s comments. I am a little bit scared of the deserialization since ordering of arguments could easily mess things up silently (since total number of bytes would probably still be valid). Fine for this CL, but one way I could think of to make sure we never deserialize out of order is to force deserialization to only allow 1 argument. So for multi-argument stuff, we kinda force a wrapper struct or something on them if there is plan to deserialize them. It\u0027s not as nice, but we may be able to reuse the CacheRequest macros and stuff to make that work without too much overhead.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db40ed51_900a161d",
        "filename": "src/dawn/native/stream/BlobSource.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "very optional nit: I\u0027ve been wondering in the past if for such use-cases that want to acquire the object we should use Blob\u0026\u0026 to denote that in the function signature.",
      "range": {
        "startLine": 26,
        "startChar": 24,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ab4f0b5_3168975a",
        "filename": "src/dawn/native/stream/BlobSource.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-22T19:29:37Z",
      "side": 1,
      "message": "I\u0027m not sure what the convention should be. I haven\u0027t seen taking rvalues in constructors very much though, except for actual move constructors. Though I do suppose this constructor looks like a move constructor.\n\nSo I\u0027ll change this one to be Blob\u0026\u0026, but for other cases in the future like `FooBar(Foo\u0026\u0026, Bar\u0026\u0026)` I think it could pessimize the compiler at times. Because there, I think you would have to pass BOTH Foo and Bar as rvalues.\nIf you wanted something like `FooBar(std::move(foo), bar)` `FooBar(foo, std::move(bar))`, it would have to invoke some constructor overload. So for multi-arg functions, pushing the std::move to the callsite probably improves flexibility.",
      "parentUuid": "db40ed51_900a161d",
      "range": {
        "startLine": 26,
        "startChar": 24,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f1f07c_181f40ad",
        "filename": "src/dawn/native/stream/BlobSource.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-25T07:17:17Z",
      "side": 1,
      "message": "Great analysis, it makes complete sense that we shouldn\u0027t force rvalue reference for multi-arg functions. Ack for changing this one to be more of a move constructor.",
      "parentUuid": "7ab4f0b5_3168975a",
      "range": {
        "startLine": 26,
        "startChar": 24,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3315c68_04428d88",
        "filename": "src/dawn/native/stream/BlobSource.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6f1f07c_181f40ad",
      "range": {
        "startLine": 26,
        "startChar": 24,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "298ba673_2a8e945e",
        "filename": "src/dawn/native/stream/ByteVectorSink.h",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "nit: for some reason (I think it has to do with casting in some cases) inheriting from std containers is a bit frowned upon. Any strong reason why this is-a vector and not has-a vector?",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1236ff86_86b37fbf",
        "filename": "src/dawn/native/stream/ByteVectorSink.h",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Hm, this is ported from CacheKey which was like this. wasn\u0027t easy to make it has-a since a bunch of the existing tests depend on it being is-a. I can look into it as a follow-up",
      "parentUuid": "298ba673_2a8e945e",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce173ad_ed6b7ab4",
        "filename": "src/dawn/native/stream/Sink.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "Are failure modes allowed or are they just supposed to OOM?",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04ecb8a3_16a74135",
        "filename": "src/dawn/native/stream/Sink.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-22T19:29:37Z",
      "side": 1,
      "message": "std::vector is the only implementation right now and as far as I know, we don\u0027t have a way to catch OOM from it (except with exceptions which are disabled in Chromium).\nDo you think we should have it use MaybeError?",
      "parentUuid": "dce173ad_ed6b7ab4",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e5845bb_d7a25934",
        "filename": "src/dawn/native/stream/Sink.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-25T07:17:17Z",
      "side": 1,
      "message": "If we don\u0027t see another Sink than std::vector for the medium-term then we can keep as is since we can\u0027t catch OOM. Either way sounds good.",
      "parentUuid": "04ecb8a3_16a74135",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4db6a588_df3b7ead",
        "filename": "src/dawn/native/stream/Sink.h",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2e5845bb_d7a25934",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6057a44d_4d2788a5",
        "filename": "src/dawn/native/stream/Source.h",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "option: This could also return ResultOrError\u003cconst void*\u003e. No strong preference at all.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33d9fff3_d36c7f62",
        "filename": "src/dawn/native/stream/Source.h",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-22T19:29:37Z",
      "side": 1,
      "message": "ditto about tagged pointer alignment",
      "parentUuid": "6057a44d_4d2788a5",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2bfa86a_7d51535e",
        "filename": "src/dawn/native/stream/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "Isn\u0027t Read for std::string_view a bit scary because it references the data directly? Is it ever used?",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93dbc017_55ad146f",
        "filename": "src/dawn/native/stream/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-22T19:29:37Z",
      "side": 1,
      "message": "Good point - I\u0027ll remove Reads into types that do not own the data.",
      "parentUuid": "b2bfa86a_7d51535e",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0da15cd0_317ecce3",
        "filename": "src/dawn/native/stream/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93dbc017_55ad146f",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9a101d2_a651bc36",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "Serialize and Deserialize seem to have disappeared in this patchset, the comment here and at [1] need to be updated.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "641078ea_84af3d68",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9a101d2_a651bc36",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "419efaab_136e0f2d",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "[1]",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea3982e8_6c4bb54f",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "419efaab_136e0f2d",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecd98105_8eab5491",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "nit: Why is v2 needed? Isn\u0027t (T\u0026\u0026v, Ts\u0026\u0026... vs) sufficient to make the arbitrary argument case work? ditto for StreamOut.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d086db18_e849d898",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecd98105_8eab5491",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4e299cc_469c85e4",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "Why is this specialization needed given we have one for to_ullong below?",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfe29239_c502bed8",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-22T19:29:37Z",
      "side": 1,
      "message": "will remove",
      "parentUuid": "d4e299cc_469c85e4",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a87e613_91d1412c",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bfe29239_c502bed8",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "840c12f6_f3ce45b4",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "nit: we could iterate by chunks of to_ullong similarly to how is done in BitSetIterator (though it only does to_ulong)",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9e1b173_b0c2a447",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-22T19:29:37Z",
      "side": 1,
      "message": "oh that\u0027s nice. I\u0027ll do that",
      "parentUuid": "840c12f6_f3ce45b4",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "552cdd58_ec09bef1",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9e1b173_b0c2a447",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "535f0c95_bbc88470",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 136,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "This serialization inverts the order of bits in the serialized stream. Maybe instead do:\n\n byte |\u003d (t[j] ? 1 : 0) \u003c\u003c (j - i)?",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab8989a2_6d3912a8",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 136,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "N/A now.",
      "parentUuid": "535f0c95_bbc88470",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ab4e2e1_ffe0d950",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "nice!",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "741dcac9_c6caabeb",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 325,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "nit: comment needs updating.",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46471386_ec227574",
        "filename": "src/dawn/native/stream/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 325,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "741dcac9_c6caabeb",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "039e2b9f_fe3ad242",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "I\u0027m not sure in which way this test differs from the previous one. Aren\u0027t we just doing the same thing but many times?",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca936c5d_464a9539",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Changed up some of these tests to not be redundant",
      "parentUuid": "039e2b9f_fe3ad242",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3066f2f_d8d868f9",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-22T13:22:37Z",
      "side": 1,
      "message": "ditto",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce9d2146_3d64e136",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3066f2f_d8d868f9",
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd7dad4d_df6fe12c",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 295,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-07-23T04:29:44Z",
      "side": 1,
      "message": "Wow... this is so obnoxious that it doesn\u0027t know how to handle string literals...",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 295,
        "endChar": 1
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45555c9e_566fe694",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 406,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-07-23T04:29:44Z",
      "side": 1,
      "message": "nit. weird formatting?",
      "range": {
        "startLine": 406,
        "startChar": 92,
        "endLine": 406,
        "endChar": 95
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f69da609_372317cd",
        "filename": "src/dawn/tests/unittests/native/CacheKeyTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 406,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-07-28T21:41:52Z",
      "side": 1,
      "message": "the macro requires this for some reason\n\n\"must specify at least one argument for \u0027...\u0027 parameter of variadic macro\"",
      "parentUuid": "45555c9e_566fe694",
      "range": {
        "startLine": 406,
        "startChar": 92,
        "endLine": 406,
        "endChar": 95
      },
      "revId": "e5c95bc28829402a0d54c146b26d5a31963cdf4c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}