{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "178a7d89_0885e44d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-04-13T04:10:34Z",
      "side": 1,
      "message": "Thoughts? This seems to be giving me a pretty good savings on my machine. For some reason it still did the symbol lookup per-transform (I thought it would do it once for all program transforms but I must have missed something). Even without that, it\u0027s saving 20ms of compile time on a large fragment shader.\n\nThe sticky bit is, the symbol table is modified in the resolver during dependency graph building. We could put it somewhere other then the symbol table, maybe just do it on a per-dependency graph build (storing directly in DependencyScanner), which may give good savings. I put it in SymbolTable because I was hoping to re-use it over transforms, so a symbol is processed and marked resolved or unresolved _once_ for the whole pipeline, but that didn\u0027t seem to happen.\n\nBut, wanted to get it up and get thoughts before sinking time into shuffling things around.\n\nSo.... thoughts?",
      "revId": "e096cf7362056c5e27f6d2cd668e2948f9770e4a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3231c82f_751b6e18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-04-13T13:00:20Z",
      "side": 1,
      "message": "Let\u0027s chat about this. I don\u0027t really understand this change, and the easiest way for me to understand is to discuss it in a call.",
      "revId": "e096cf7362056c5e27f6d2cd668e2948f9770e4a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69fb92ed_02905be2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-04-13T13:27:27Z",
      "side": 1,
      "message": "Sounds good. At a high level, the primary change is in dependency_graph.cc. We call the methods to check if a given identifier is a builtin a .... lot .... in these shaders, often in the same dependency graph build.\n\nBecause a symbol is interned, it can\u0027t change, so if we\u0027ve already checked if a symbol resolves to something, we can just reuse it, as the string can\u0027t change, it \nresolves to the same thing every time. This cuts out a lot of `strlen`, and `\u003d\u003d` on the string view cutting out a good chunk of time in AddDependency.",
      "parentUuid": "3231c82f_751b6e18",
      "revId": "e096cf7362056c5e27f6d2cd668e2948f9770e4a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "e096cf7362056c5e27f6d2cd668e2948f9770e4a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MIN"],"failingAtoms":["label:Kokoro=MAX"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "e096cf7362056c5e27f6d2cd668e2948f9770e4a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e096cf7362056c5e27f6d2cd668e2948f9770e4a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}