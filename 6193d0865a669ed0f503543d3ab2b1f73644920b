{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "40744c3f_d49eca54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-01-12T19:17:32Z",
      "side": 1,
      "message": "PTAL! Cleaned up a bit from what I used to profile the Unity shaders, and made sure to cover each of the backends to some degree (though they\u0027re not symmetrical.)",
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7696852b_43d1f051",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T20:43:02Z",
      "side": 1,
      "message": "LGTM",
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "435947b4_f865ce32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-01-12T21:23:58Z",
      "side": 1,
      "message": "Addressing feedback, but had a question.",
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "912e3db2_568a4342",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T20:43:02Z",
      "side": 1,
      "message": "nit: here and elsewhere, usually we don\u0027t include the ()",
      "range": {
        "startLine": 451,
        "startChar": 74,
        "endLine": 451,
        "endChar": 76
      },
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c31afbaa_a269eccc",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 648,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T20:43:02Z",
      "side": 1,
      "message": "nit: do you think it\u0027s worth timing this directly as well? - ditto for other backends",
      "range": {
        "startLine": 648,
        "startChar": 28,
        "endLine": 648,
        "endChar": 41
      },
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cc5d003_352ce194",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 648,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-01-12T21:23:58Z",
      "side": 1,
      "message": "In my earlier code I was timing this as well and it never showed up in the profiles, so I removed it in favor of trying to focus on the longer running functions.\n\nA semi-related question, though: Because this is wrapped in a DAWN_TRY_ASSIGN it may return if there\u0027s an error. My assumption is that if I wrap it in a TRACE_EVENT_BEGIN/TRACE_EVENT_END that it\u0027ll lead to an imbalanced trace and potentially cause problems should the function return here. Is there a preferred way to resolve that aside from extracting the traced statement from the TRY?",
      "parentUuid": "c31afbaa_a269eccc",
      "range": {
        "startLine": 648,
        "startChar": 28,
        "endLine": 648,
        "endChar": 41
      },
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2d0e5a1_0b3df588",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 648,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T21:26:12Z",
      "side": 1,
      "message": "Ah - then there\u0027s maybe no use in timing it then.\n\nI think we should use TRACE_EVENT0 when possible instead of BEGIN/END because it automatically handles the scoping.\n\nWe can always add curly braces to narrow  the scope.\n\n{\n   TRACE_EVENT0(...)\n   DANW_TRY_ASSING(my operation)\n}",
      "parentUuid": "1cc5d003_352ce194",
      "range": {
        "startLine": 648,
        "startChar": 28,
        "endLine": 648,
        "endChar": 41
      },
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "943b394d_baad5f05",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 677,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T20:43:02Z",
      "side": 1,
      "message": "nit: and this",
      "range": {
        "startLine": 677,
        "startChar": 12,
        "endLine": 677,
        "endChar": 85
      },
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb6aaf48_5309ce0d",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 710,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-01-12T20:43:02Z",
      "side": 1,
      "message": "nit: maybe we should just pass the Platform* into CompileShader, and also put the TRACE_EVENT here instead of in CompileShaderFXC.\n\nOverall, we\u0027ve tried to limit the inputs to the Compile functions so we don\u0027t accidentally start relying on other things from the device (like features/extensions enabled) that weren\u0027t included in the |request| and not part of the cache key.\n\nSo concretely, suggestion is: use Platform* instead of Device* where possible. minimize arguments added to Compile functions where possible",
      "revId": "6193d0865a669ed0f503543d3ab2b1f73644920b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}