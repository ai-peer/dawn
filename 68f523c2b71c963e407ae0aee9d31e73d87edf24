{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d4633cf9_3b3bc50c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-10T20:38:45Z",
      "side": 1,
      "message": "I have rebased to resolve a merge conflict.\n\nAgain, I appreciate both of your time!",
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a7ad16e_6389dc0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-11T23:30:14Z",
      "side": 1,
      "message": "I\u0027m trying to understand at a high level why we need to flatten the register space like this. But I don\u0027t know the internals of what the spirv2dxil translation is doing, so any clarity there would be appreciated.\n\nLooking at https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/DXIL.rst#shader-resources\nit seems to me that DXIL still has the separation between UAV/SRV/CBV/Sampler. What do the D3D12 registers specified in the API with BaseShaderRegister etc. correspond to in the DXIL?\n\nIs flattening the register range a requirement for DXIL or is it more so a side effect of going through SPIRV which doesn\u0027t namespace the bindings? Can the SPIRV-\u003eDXIL translation do the compaction, or can we provide the SPIRV-\u003eDXIL translation a mapping of (binding, group) to DXIL register?\n\nIf flattening is not a requirement, it might be cool to have whatever necessary recompaction of spirv bindings to DXIL registers be contained within Tint. Right now, pretty much all of Dawn\u0027s backends have some Tint transform for remapping WGSL (group, binding) into the backend binding space. Tint could similarly have a \"DXIL\" backend that accepts a register mapping. Overall that might be a nice abstraction because it would mean Tint supports WGSL-\u003eDXIL translation - going through SPIRV is an implementation detail.",
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cb13844_18e15eb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-12T22:19:43Z",
      "side": 1,
      "message": "Thanks for the review again! Last open question I think is: should this CL remove the \"register space compacting\" code in favor of doing it more completely in a follow-up CL?",
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "406cc861_9a4a6e99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-12T22:19:43Z",
      "side": 1,
      "message": "(note that I\u0027m understanding \"flattening\" to mean \"make registers not conflict globallt\" and \"compacting\" to mean \"make registers not conflict only within their type namespace\")\n\nFor some context, Mesa\u0027s spirv2dxil translation layer tries to do as 1:1 mapping of SPIR-V to DXIL as possible. The result is it doesn\u0027t have a mechanism to remap bindings or get reflection data out, but this hopefully means that callers can treat the DXIL output like they would the input SPIR-V.\n\n\n\u003e more so a side effect of going through SPIRV which doesn\u0027t namespace the bindings\n\nIt\u0027s 100% this. Apologies if I didn\u0027t make it clear in the description (I\u0027ll add a note about spir-v there). We use SPIR-V as an intermediate representation in the WGSL-\u003eDXIL path, so we can\u0027t have bindings that would conflict without the namespaces. e.g. a sampler and texture would try to bind to s0 and t0 in HLSL, but the s and t namespaces get stripped when going through SPIR-V and thus binding 0 and 0 conflict.\n\nMy best guess is that the current code just reuses the descriptor heap offsets as the binding number because it was convenient (and not for dx11 max slot count reasons?).\n\n\n\u003e If flattening is not a requirement, it might be cool to have whatever necessary recompaction of spirv bindings to DXIL registers be contained within Tint\n\nUnfortunately I think flattening is a requirement for using Mesa, but it\u0027s hopefully less work since the process of flattening the register space is just \"don\u0027t do the work to compact the register space and remap bindings\".\n\n\u003e [...]Tint supports WGSL-\u003eDXIL translation[...]\n\nI\u0027m definitely up for moving the mesa calling code into tint--it\u0027s currently in dawn for development convenience, but there\u0027s no reason why it shouldn\u0027t just be a backend to tint!",
      "parentUuid": "4a7ad16e_6389dc0c",
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b3bf50b_1b77693a",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-11T23:30:14Z",
      "side": 1,
      "message": "now this can be GetShaderRegister(bindingIndex)",
      "range": {
        "startLine": 142,
        "startChar": 39,
        "endLine": 143,
        "endChar": 93
      },
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2649b3ef_42c2c0b6",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-12T22:19:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b3bf50b_1b77693a",
      "range": {
        "startLine": 142,
        "startChar": 39,
        "endLine": 143,
        "endChar": 93
      },
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e711096a_557c88ce",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-11T23:30:14Z",
      "side": 1,
      "message": "nit: this doesn\u0027t need to be ityp::span because size_t isn\u0027t a type-safe integer. We could simply return a `const std::vector\u003cD3D12DescriptorRange\u003e\u0026` here",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 56
      },
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e42932a_055b6baa",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-12T22:19:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e711096a_557c88ce",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 56
      },
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2752985_b417f178",
        "filename": "src/tests/end2end/BindGroupTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1034,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-11T23:30:14Z",
      "side": 1,
      "message": "typo: aggressive",
      "range": {
        "startLine": 1034,
        "startChar": 7,
        "endLine": 1034,
        "endChar": 16
      },
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "601ea263_ea7967ee",
        "filename": "src/tests/end2end/BindGroupTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1034,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-12T22:19:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2752985_b417f178",
      "range": {
        "startLine": 1034,
        "startChar": 7,
        "endLine": 1034,
        "endChar": 16
      },
      "revId": "68f523c2b71c963e407ae0aee9d31e73d87edf24",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}