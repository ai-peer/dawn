{
  "comments": [
    {
      "key": {
        "uuid": "a1fc89b6_62eaa9e9",
        "filename": "src/dawn_native/metal/CommandBufferMTL.h",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-29T09:35:44Z",
      "side": 1,
      "message": "Why is this moved to the header? It is an implementation detail of CommandBufferMTL and isn\u0027t used elsewhere apart from that one pointer as a function arguments. This could use a forward declaration instead.",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e1a288e_36465185",
        "filename": "src/dawn_native/metal/CommandBufferMTL.h",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-07T03:11:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1fc89b6_62eaa9e9",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8c7bb24_8079f97e",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-29T09:35:44Z",
      "side": 1,
      "message": "[1] I have concerns that this logic is duplicated. How about doing the following:\n\nHave the EncodeRenderPass function renamed to EncodeRenderPassImpl and make a new EncodeRenderPass that looks if we have workarounds and creates a new BeginRenderPassCmd that\u0027s modified to do the workarounds. This way all the workaround magic is there and not duplicated. This would also work for shouldEmulateStoreAndMSAAREsolve that could be handled entirely in EncodeRenderPass. Of course this would require being able to create fake texture views, that\u0027s probably ok.",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cd853ec_1438bb15",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-07T03:11:52Z",
      "side": 1,
      "message": "I suggest we use another simpler way to do this:\nPass resolveTexturesForWorkaround into CreateMTLRenderPassDescriptorImpl, and if the temporary resolve texture exists in resolveTexturesForWorkaround, then we use it in the newly-created MTLRenderPassDescriptor.\n\nI use this method here because I find it a bit complex to create a texture view object as a wrapper of the id\u003cMTLTexture\u003e used for workaround. Using this method we only need to manage the lifecycle of id\u003cMTLTexture\u003e, and we do not need to care about the ones of the textures and texture views.\n\nHow do you think about it?",
      "parentUuid": "b8c7bb24_8079f97e",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "439f6ee0_422d3586",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-05-07T15:00:08Z",
      "side": 1,
      "message": "I\u0027m sorry, maybe it is my jetlagged brain but I find it extremely difficult to understand the current iteration of the code and I no idea whether it is correct or not. This is because state is passed from function to function and is modified in different places.\n\nHaving \"transforms\" on the BeginRenderPassCmd that can be composed would be more clear imho.",
      "parentUuid": "4cd853ec_1438bb15",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9d3d9b2_24072575",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-08T08:45:38Z",
      "side": 1,
      "message": "I\u0027m sorry that I should have written the patch in a clearer logic...\n\nIn the latest version I create a new BeginRenderPassCmd with ResolveTarget unset if \"store and MSAA resolve\" should be emulated. There are only two states that are changed:\n1. The newly created BeginRenderPassCmd\n2. The array to contain the temporary resovle textures (resolveTexturesForWorkaround). It is created in CreateMTLRenderPassDescriptor if necessary, and passed into ResolveInAnotherRenderPass (as resolve target) and CopyIntoTrueResolveTarget(as the source of copy).\n\nI also directly pass resolveTexturesForWorkaround into CreateMTLRenderPassDescriptorImpl and the newly-created MTLRenderPassDescriptor will use the texture in resolveTexturesForWorkaround first if it exists. In this way we can directly manage the lifecycle of id\u003cMTLTexture\u003e in resolveTexturesForWorkaround instead creating and managing the wrappers of id\u003cMTLTexture\u003e (dawn_native::metal::Texture and dawn_native::metal::TextureView objects)",
      "parentUuid": "439f6ee0_422d3586",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45728423_1aaf9174",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-05-09T16:49:40Z",
      "side": 1,
      "message": "Would it be possible to apply the two workarounds consecutively? Right now I find it a little confusing because the code to handle both resolving into layer 0 and resolving in a separate render pass happens together.\n\nBoth workarounds get applied in CreateMTLRenderPassDescriptor which makes it hard to follow. I like the way you separate them in EndRenderPassCmd into ResolveInAnotherRenderPass and CopyIntoTrueResolveTarget much better.\n\nI like Corentin\u0027s suggestion of having iterative transforms. Maybe instead of transforming BeginRenderPassCmd, you can apply transforms to the MTLRenderPassDescriptor. That way you don\u0027t have to manage the Dawn objects.\n\nEmulateStoreAndMSAAResolve would:\n - Set the storeAction and clear the resolveTarget.\n - Produce a MTLRenderPassDescriptor that does the resolve.\n\nAlwaysResolveIntoZeroLevelAndLayer would:\n - In EndRenderPass, transform the MTLRenderPassDescriptor so it resolves into the 0-level of new textures and encode a copy",
      "parentUuid": "c9d3d9b2_24072575",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e9722c0_6d8dbe16",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-10T08:39:01Z",
      "side": 1,
      "message": "Hi Austin, thanks very much for your advice! I have followed your suggestion in the latest patch set and it looks much better.\n\nI\u0027m not sure if I have fully understood your idea. PTAL, thanks!",
      "parentUuid": "45728423_1aaf9174",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5b3a711_d4391174",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 180,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-29T09:35:44Z",
      "side": 1,
      "message": "I have concerns that this logic is duplicated. See [1]",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9516a4ba_acccdb90",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 673,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-29T09:35:44Z",
      "side": 1,
      "message": "It seems this doesn\u0027t use a member function of the COmmandBufferMTL so it could be made a function in the anonymous namespace.",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "276d3c6a_65fdb22f",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 673,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-07T03:11:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9516a4ba_acccdb90",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ba79cc1_3d92e9e5",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 681,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-29T09:35:44Z",
      "side": 1,
      "message": "nit: if (mtlTexture \u003d\u003d nil) { continue; } to decrease the indentation for readability.",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fdd019d_fbb7f7f5",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 681,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-07T03:11:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ba79cc1_3d92e9e5",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f72e1dc_dbe6ceb7",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 705,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-29T09:35:44Z",
      "side": 1,
      "message": "No need to do this, it should be called automatically if it is needed later.",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "422eb396_68b259a2",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 7
      },
      "lineNbr": 705,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-05-07T03:11:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f72e1dc_dbe6ceb7",
      "revId": "4cb3e0bf319e999ad5080029828f773f17a3949f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}