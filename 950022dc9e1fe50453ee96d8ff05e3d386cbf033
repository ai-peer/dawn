{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0048e718_5534ec1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-05-18T10:08:37Z",
      "side": 1,
      "message": "So I think the issue is that none of the other tests and/or infra are filtering for \"not compat\" so they go through the adapters and find one that matches but it happens to be compat and then things fail?",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "691c4bb0_efa279cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-18T21:05:20Z",
      "side": 1,
      "message": "seems like a preexisting issue that wasn\u0027t noticed until now\n\nIn dawn.json, \"request adapter options\" is marked as optional:\n`{\"name\": \"options\", \"type\": \"request adapter options\", \"annotation\": \"const*\", \"optional\": true, \"no_default\": true}`\n\nbut in dawn_wire.json, it\u0027s not optional.\n\n`{ \"name\": \"options\", \"type\": \"request adapter options\", \"annotation\": \"const*\" }`\n\nthat\u0027s why it\u0027s crashing in `dawn_unittests --use-wire`. Can be fixed by adding \"optional: true\" in dawn_wire.json",
      "parentUuid": "0048e718_5534ec1b",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "deb804d2_cdca25e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-05-19T01:53:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "691c4bb0_efa279cc",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c37214b_96607a59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-19T03:56:52Z",
      "side": 1,
      "message": "oh okay, now I see the original issue you described. looks like you\u0027ll need to have DawnTest.cpp also select only for non-compat adapters as well. it\u0027s probably worth searching for other places where iteration over adapters occurs as well",
      "parentUuid": "deb804d2_cdca25e7",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fcf0ee_537df512",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-05-19T05:47:33Z",
      "side": 1,
      "message": "I thought I added that to dawn test but it\u0027s still failing. As one example \n\n```\n ./out/Debug/dawn_end2end_tests --gtest_filter\u003dTextureViewSamplingTest.TextureCubeMapArrayOnWholeTexture/Metal_Apple_M1_Max\n```\n\nfails which seems to be based on DawnTest and I added \n\n```\nproperties.compatibilityMode \u003d\u003d param.adapterProperties.compatibilityMode \u0026\u0026\n```\n\nin DawnTest  `procs.instanceRequestAdapter`\n\nStepping through the code it looks like `DawnTestEnvironment::SelectPreferredAdapterProperties` is where it\u0027s wrongly selecting an adapter with compatibilityMode true. It\u0027s not clear to me how to access the test at this point to filter out adapters or if it even makes sense to filter there.",
      "parentUuid": "8c37214b_96607a59",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d825005f_6da72b54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-05-19T07:30:00Z",
      "side": 1,
      "message": "In `TextureViewSamplingTest.TextureCubeMapArrayOnWholeTexture`, when the code test to `procs.instanceRequestAdapter` it calls `const auto\u0026 param \u003d gCurrentTest-\u003emParam;` and that `param` has `compatibitlyMode \u003d true` so in trying to trace what\u0027s setting that to true is where I got to `DawnTestEnvironment::SelectPreferredAdapterProperties` which is called in response to passing a bunch of backends to `DAWN_INSTANTIATE_TEST`.\n\nIt kind of seems like there\u0027s not enough info here? In `src/dawn/tests/end2end/TextureViewTests.cpp` at the end of the file is \n\n```\nDAWN_INSTANTIATE_TEST(TextureView1DTest,\n                      D3D11Backend(),\n                      D3D12Backend(),\n                      MetalBackend(),\n                      VulkanBackend(),\n                      OpenGLBackend(),\n                      OpenGLESBackend());\n```\n\nAnd as is it\u0027s selecting the first adapter for each backend that fits the criteria.\nShould I make this code reject compatibilityMode\u003dtrue adapters? Should add some parameter to XXXBackend so you can add \"compatibility\u003dtrue\".\n\nIt feels like we want all of these tests run on compat except for a few which we should hand mark to not run on compat or update test to somehow check \"if compat then skip\"\n\nAt the end it has some note about selecting one adapter from with the same name on Windows 10 but that same code is filtering out the second adapter \n\nI changed it so it doesn\u0027t filter out compat vs non-compat and hacked some stuff so tests params with compat end in _compat. Then added a few checks. It works but it doubles all the tests.\n\nMaybe I should add `MetalBackendCompat` and `D3D11BackendCompat` etc? I don\u0027t really know what the right thing to do heres. I assume we\u0027d really prefer all test to be run in compat and non-compat so maybe doubling the tests is the correct solution?\n\nAnyway, you can look at the code and see what you think. Happy to make any changes and/or discard anything I\u0027ve done so far as I have no clue what I\u0027m doing ðŸ˜…",
      "parentUuid": "06fcf0ee_537df512",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f93028fd_f2506df7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-05-19T12:12:37Z",
      "side": 1,
      "message": "Argh, sorry for the mess. I don\u0027t think we should double the testing load, since compat mode won\u0027t make a difference in 95% of tests. If we have to filter, perhaps end2endtests should try non-compat first, then only select compat if it\u0027s the only option (e.g., GLES and D3D11).",
      "parentUuid": "d825005f_6da72b54",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1ad9df6_4a1e667c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-05-22T04:48:43Z",
      "side": 1,
      "message": "I am not sure how you guys want me to re-structure this code. AFAIK, based on the code I\u0027m reading, instanceRequestAdapter expects to always succeed so I can\u0027t filter there. \n\nDawnTestEnvironment::SelectPreferredAdapterProperties is the code that finds all the available adapters. It currently throws away adapters that have the same name so compat needs to be named differently since it\u0027s a different adapter. \n\nIt sounds like I need to modify the backend list passed to `DAWN_INSTANTIATE_TEST` so it\u0027s either another toggle like \"compatibility_mode\" as in\n\n```\nDAWN_INSTANTIATE_TEST(BasicTests,\n                      D3D11Backend(),\n                      D3D11Backend(\"use_compatibility_mode\"),\n                      D3D12Backend(),\n                      D3D12Backend(\"use_compatibility_mode\"),\n                      MetalBackend(),\n                      MetalBackend(\"use_compatibility_mode\"),\n                      OpenGLBackend(),\n                      OpenGLBackend(\"use_compatibility_mode\"),\n                      OpenGLESBackend(),\n                      OpenGLESBackend(\"use_compatibility_mode\"),\n                      VulkanBackend()\n                      VulkanBackend(\"use_compatibility_mode\"));\n```\n\nor I need to make new backend types\n\n```\nDAWN_INSTANTIATE_TEST(BasicTests,\n                      D3D11Backend(),\n                      D3D11CompatibilityModeBackend(),\n                      D3D12Backend(),\n                      D3D12CompatibilityModeBackend(),\n                      MetalBackend(),\n                      MetalCompatibilityModeBackend(),\n                      OpenGLBackend(),\n                      OpenGLCompatibilityModeBackend(),\n                      OpenGLESBackend(),\n                      OpenGLESCompatibilityModeBackend(),\n                      VulkanBackend(),\n                      VulkanCompatibilityModeBackend());\n```\n\nI guess I\u0027ll try the first one",
      "parentUuid": "f93028fd_f2506df7",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9aa957c_0a0d08f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-22T19:29:06Z",
      "side": 1,
      "message": "right now for dawn_end2end_tests, I don\u0027t think we need to test compatibility mode on d3d12/metal/vulkan/gl backends. We only care about end2end testing of compat mode on d3d11/opengles which are only compat.\n\nso, I think my preferred solution for now would be to filter out compat mode adapters on d3d12/metal/vulkan/gl based on the assumption that those backends will have both a non-compat and a compat adapter. Then, we don\u0027t need a way for the test to express whether it wants to be instantiated on compat/non-compat.\nI think you\u0027d filter them out both in SelectPreferredAdapterProperties and in procs.instanceRequestAdapter\n\nThe toggle is probably the right longer-term solution here, but the concept of adapter-level toggles isn\u0027t fully implemented now, so it\u0027s better to not depend on it yet.",
      "parentUuid": "e1ad9df6_4a1e667c",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcdcfbcb_e7a90909",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-05-23T01:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9aa957c_0a0d08f2",
      "revId": "950022dc9e1fe50453ee96d8ff05e3d386cbf033",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}