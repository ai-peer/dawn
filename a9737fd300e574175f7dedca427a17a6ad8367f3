{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "09caf9b0_1650a09c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-29T00:32:59Z",
      "side": 1,
      "message": "(left a couple comments on the previous CL while I was understanding this one)",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c1f888b_bea8a6b7",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-29T01:16:02Z",
      "side": 1,
      "message": "wondering if we really need to template this\n\nalternatively, it could store the mode + ready bool.\n\nand the derived classes continue storing their specific ready data and callback (like they do previous to this change).\n\nTo handle event-specific data, SetFutureReady could be:\n\n```\n    // (removed the sync stuff for simplicity)\n    template \u003ctypename Event, typename... ReadyArgs\u003e\n    bool SetFutureReady(int futureId, ReadyArgs\u0026\u0026... readyArgs) {\n        auto\u0026 ev \u003d events.at(futureId);\n        ev-\u003eready \u003d true;\n    \n        if (ev-\u003eGetType() !\u003d Event::kType) {\n            return false;\n        }\n        static_cast\u003cEvent*\u003e(ev.get())-\u003eReadyHook(std::forward\u003cReadyArgs\u003e(readyArgs)...);\n\n        std::unique_ptr\u003cTrackedEvent\u003e spontaneousEvent;\n        if (ev-\u003emode \u003d\u003d spontaneous) {\n            spontaneousEvent \u003d std::move(ev);\n        }\n\n        if (spontaneousEvent) {\n            spontaneousEvent-\u003eComplete(EventCompletionType::Ready);\n        }\n        return true;\n    }\n```",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d23a829d_3e71200d",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-29T12:34:26Z",
      "side": 1,
      "message": "That would work as well!",
      "parentUuid": "3c1f888b_bea8a6b7",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba56bcdf_211f58b6",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-05T00:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d23a829d_3e71200d",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3604428a_df38bd68",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T08:21:15Z",
      "side": 1,
      "message": "Instead of ASSERTing I think we could be validating with the EventType with a WireResult returned if this is the wrong event type.",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99ebe05f_c9912f9a",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-05T00:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3604428a_df38bd68",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35a93f1f_7ebd02c5",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T08:21:15Z",
      "side": 1,
      "message": "u-nit: slight preference for having a state machine enum, because it would also work for when mCallback is nullptr, and wouldn\u0027t use any more memory than this class does. WDYT?",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2853e11f_0faffeec",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-05T00:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35a93f1f_7ebd02c5",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc561088_d8f55923",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T08:21:15Z",
      "side": 1,
      "message": "Maybe ASSERT that the callback was fired here?",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0510bcc6_4cea2ad1",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-05T00:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc561088_d8f55923",
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4220dd23_628c12ab",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-29T01:17:19Z",
      "side": 1,
      "message": "nit: std::optional\u003cstd::unique isn\u0027t necessary.\nwe can use the nullability of the unique_ptr to check if it is set to anything",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 71
      },
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40904b35_d860d49a",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-05T00:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4220dd23_628c12ab",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 71
      },
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79f475a5_e7480a21",
        "filename": "src/dawn/wire/client/Queue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-28T08:21:15Z",
      "side": 1,
      "message": "Ah, maybe we don\u0027t need the \u0026\u0026 in SetFutureReady, and just std::move larger classes instead. It\u0027s weird to need to std::move an enum value.",
      "range": {
        "startLine": 53,
        "startChar": 81,
        "endLine": 53,
        "endChar": 98
      },
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6266ea3_eb317292",
        "filename": "src/dawn/wire/client/Queue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-10-05T00:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79f475a5_e7480a21",
      "range": {
        "startLine": 53,
        "startChar": 81,
        "endLine": 53,
        "endChar": 98
      },
      "revId": "a9737fd300e574175f7dedca427a17a6ad8367f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}