{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fa5d3197_9e05feee",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 64,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "optional nit. Might be a little easier to read as something like:\n```\nstruct BufferBindingAliasingResult {\n    struct Entry {\n        BindGroupIndex bindGroupIndex;\n        BindingIndex BindingIndex;\n        \n        // Adjusted offset with dynamic offset\n        uint64_t offset;\n        uint64_t size;\n    };\n    Entry e1;\n    Entry e2;\n};\n```\n\nThen later below at [1], I think you could do something like:\n```\nreturn BufferBindingAliasingResult{\n    {i, bindingIndex, offset, bufferBinding.size},\n    {j, otherBindingIndex, otherOffset, otherBinding.size}\n};\n```",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 64,
        "endChar": 2
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9946160c_1cfa33ca",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 64,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa5d3197_9e05feee",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 64,
        "endChar": 2
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3fd2473_2a38ea21",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "nit. bindGroupEntries",
      "range": {
        "startLine": 70,
        "startChar": 55,
        "endLine": 70,
        "endChar": 71
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b0e8fe6_3d388478",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3fd2473_2a38ea21",
      "range": {
        "startLine": 70,
        "startChar": 55,
        "endLine": 70,
        "endChar": 71
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c2761e_38d1530a",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "Taking a look at our current buffer binding validations (https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/BindGroup.cpp;l\u003d83) I think that it might be sufficient to just check the `BufferBindingType`. Makes it a little easier to read since IIUC, this clause is just to early-out on non-storage buffers.",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69065b5a_3a2e6082",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-08T18:43:17Z",
      "side": 1,
      "message": "that gave me an idea\n\nright now we have an algorithm that is O(bufferCount^2).\n\nwe could do slightly better to make it O(storageBufferCount^2)\n\n\nby first compacting the get just the list of storage buffer bindings, and iterating only over those.\n\n```\nstd::vector\u003cstd::pair\u003cBindGroupIndex, BindingIndex\u003e\u003e bindingsToCheck;\nfor (BindGroupIndex group : IterateBitSet(pipelineLayout-\u003eGetBindGroupLayoutsMask())) {\n  for (BindingIndex bindingIndex{0}; bindingIndex \u003c currentBGL-\u003eGetBufferCount();\n             ++bindingIndex) {\n    if (storage) {\n      bindingsToCheck.emplace_back(group, bindingIndex);\n    }\n  }\n}\n\nfor (i \u003d 0; i \u003c bindingsToCheck.size(); ++i) {\n  for (j \u003d i + 1; j \u003c bindingsToCheck.size(); ++j) {\n    // check i and j don\u0027t conflict\n  }\n}\n\n```\n\nthis also easily extends to storage textures\n\nand, I think it\u0027s simpler to understand looking at all pairs inside a single vector instead of the iteration over the mask twice.",
      "parentUuid": "b6c2761e_38d1530a",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742fc85e_38c1b974",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-08T19:57:53Z",
      "side": 1,
      "message": "to add, maxStorageBuffersPerShaderStage is 8 and maxStorageTexturesPerShaderStage is 4 - so even if the validation loop is O(n^2), it really won\u0027t be so bad.\n\nThe reduce step should be linear O(numBindings)",
      "parentUuid": "69065b5a_3a2e6082",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a943a090_799caee1",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-08T20:30:53Z",
      "side": 1,
      "message": "\u003e maxStorageBuffersPerShaderStage is 8 and maxStorageTexturesPerShaderStage is 4\n\nGood point!",
      "parentUuid": "742fc85e_38c1b974",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b047fba0_d2b0eec8",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a943a090_799caee1",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d043620e_5e70145a",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 112,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "Same comment here as above.",
      "range": {
        "startLine": 109,
        "startChar": 20,
        "endLine": 112,
        "endChar": 21
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e58854a5_e9c3bb5f",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 112,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d043620e_5e70145a",
      "range": {
        "startLine": 109,
        "startChar": 20,
        "endLine": 112,
        "endChar": 21
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97ed8106_34e6dee0",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 120,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "Given that this is an ||, I think maybe we can move this to the outer loop and save some cycles. So just:\n\n```\nif (bufferBinding.size \u003d\u003d 0) { continue; }\n```",
      "range": {
        "startLine": 118,
        "startChar": 20,
        "endLine": 120,
        "endChar": 21
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38b06f1f_15ce62d0",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 120,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97ed8106_34e6dee0",
      "range": {
        "startLine": 118,
        "startChar": 20,
        "endLine": 120,
        "endChar": 21
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83330a19_933fc96b",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 135,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 135,
        "startChar": 31,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "566edc1b_d1be6a54",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 11
      },
      "lineNbr": 135,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83330a19_933fc96b",
      "range": {
        "startLine": 135,
        "startChar": 31,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e28a32_4024eb53",
        "filename": "src/dawn/tests/unittests/validation/WritableBufferBindingAliasingValidationTests.cpp",
        "patchSetId": 11
      },
      "lineNbr": 232,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "nit. Assuming that in our test we (1) only have buffer bindings and (2) only have buffer bindings with same hasDynamicOffset across one bindGroup, the dynamic buffer binding is always compact.",
      "range": {
        "startLine": 232,
        "startChar": 15,
        "endLine": 232,
        "endChar": 21
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa4f6924_7de3a13e",
        "filename": "src/dawn/tests/unittests/validation/WritableBufferBindingAliasingValidationTests.cpp",
        "patchSetId": 11
      },
      "lineNbr": 232,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8e28a32_4024eb53",
      "range": {
        "startLine": 232,
        "startChar": 15,
        "endLine": 232,
        "endChar": 21
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62739f6e_69511639",
        "filename": "src/dawn/tests/unittests/validation/WritableBufferBindingAliasingValidationTests.cpp",
        "patchSetId": 11
      },
      "lineNbr": 274,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-08T02:08:05Z",
      "side": 1,
      "message": "nit. same as above",
      "range": {
        "startLine": 272,
        "startChar": 12,
        "endLine": 274,
        "endChar": 29
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf7d4770_e9dc2fb6",
        "filename": "src/dawn/tests/unittests/validation/WritableBufferBindingAliasingValidationTests.cpp",
        "patchSetId": 11
      },
      "lineNbr": 274,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-09T00:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62739f6e_69511639",
      "range": {
        "startLine": 272,
        "startChar": 12,
        "endLine": 274,
        "endChar": 29
      },
      "revId": "82f5b5e8dcc4406e18ac7878ab2ef2e5603de3b5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}