{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0465b673_a379d9a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-19T19:47:23Z",
      "side": 1,
      "message": "Approving to get the bulk of this in.\nI believe `EmitAccess` and `EmitExpression` can be significantly simplified, but let\u0027s iterate.",
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52cf347_d9bd7992",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 239,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-19T17:47:07Z",
      "side": 1,
      "message": "Probably a good idea to `TINT_UNREACHABLE()` here.",
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5feaa43c_6966126d",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 874,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-07-19T17:47:00Z",
      "side": 1,
      "message": "nit: `accessor`",
      "range": {
        "startLine": 874,
        "startChar": 62,
        "endLine": 874,
        "endChar": 69
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ce82dd1_8b44e07c",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 885,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-07-19T17:47:00Z",
      "side": 1,
      "message": "Is the `preceeding_inst` stuff there to ensure that you don\u0027t append to the access for something like:\n\n```\nvar v : array\u003carray\u003ci32, 5\u003e, 5\u003e;\nlet p \u003d \u0026v[i];   // create access: %p \u003d access %v\nlet a \u003d (*p)[i]; // append access: %p \u003d access %v, i\nreturn *p;       // oh noes!     : %p \u003d access %v, i\n```\n\nIf so, you might be able to simplify this by simply checking whether `obj` is named. With the recent `ir::Let` changes, the value is guaranteed to be named if its used as a let. If it\u0027s unnamed, then the expression is a sub-expression, and you know it\u0027s safe to append to the access.",
      "range": {
        "startLine": 877,
        "startChar": 0,
        "endLine": 885,
        "endChar": 9
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc201082_7ba0f3a5",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 885,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-07-19T17:58:02Z",
      "side": 1,
      "message": "I was more concered about things like `IR_FromProgramAccessorTest.Accessor_Multiple` in which there are two accesses emitted in a row:\n\n```\n%test_function \u003d @compute @workgroup_size(1, 1, 1) func():void -\u003e %b1 {            \n  %b1 \u003d block {                                                                                     \n    %a:vec3\u003cu32\u003e \u003d let vec3\u003cu32\u003e(0u)                                                                \n    %b:u32 \u003d access %a, 2u                                                                          \n    %c:u32 \u003d access %a, 1u                                                                          \n    ret                                                                                             \n  }                                                                                                 \n} \n```\n\nSo, the object is named and it\u0027s the same name in both cases.",
      "parentUuid": "1ce82dd1_8b44e07c",
      "range": {
        "startLine": 877,
        "startChar": 0,
        "endLine": 885,
        "endChar": 9
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d0f6b02_21761039",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 903,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-07-19T17:47:00Z",
      "side": 1,
      "message": "Why create a new `InstructionResult` each append? Can\u0027t you just update the type of the existing result?",
      "range": {
        "startLine": 901,
        "startChar": 0,
        "endLine": 903,
        "endChar": 53
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e7164f0_b2b72d9e",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 903,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-07-19T17:58:02Z",
      "side": 1,
      "message": "hahahahaha ... no.\n\nI tried that initially and went down the horrible rat hole of making types non-const, eventually got very sad and this was easier. Non-const\u0027ing types has a lot of ripples.",
      "parentUuid": "1d0f6b02_21761039",
      "range": {
        "startLine": 901,
        "startChar": 0,
        "endLine": 903,
        "endChar": 53
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d07365e8_9852df06",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 974,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-07-19T17:47:00Z",
      "side": 1,
      "message": "I\u0027m going to have to scratch my head over this a bit.",
      "range": {
        "startLine": 970,
        "startChar": 0,
        "endLine": 974,
        "endChar": 0
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "084fc980_5ef162ec",
        "filename": "src/tint/ir/from_program.cc",
        "patchSetId": 12
      },
      "lineNbr": 974,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-07-19T17:58:02Z",
      "side": 1,
      "message": "We can VC if you\u0027d like me to explain it.",
      "parentUuid": "d07365e8_9852df06",
      "range": {
        "startLine": 970,
        "startChar": 0,
        "endLine": 974,
        "endChar": 0
      },
      "revId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "35ee0ce46a9744337a7cd3754f379160cf9b1a60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}