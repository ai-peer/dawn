{
  "comments": [
    {
      "key": {
        "uuid": "8a2173fc_572ee85c",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T12:51:19Z",
      "side": 1,
      "message": "I\u0027m not sure min / max has a lot of value, it requires having more types and means that operations like foo + n - 1 can break depending on the order the C++ standard defines operators are evaluated. Also as you mentioned offline, we\u0027re going to have variable device limits, so there won\u0027t be a single kMaxBindGroups value that\u0027s valid.",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b069929_0d13dfa2",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8a2173fc_572ee85c",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c348bcfa_25e7b8e6",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T12:51:19Z",
      "side": 1,
      "message": "Without min/max I don\u0027t think that\u0027s needed.",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d2ab62e_996080a9",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c348bcfa_25e7b8e6",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "000420f8_8bcf7a2f",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-23T01:31:28Z",
      "side": 1,
      "message": "this made BitSetIterator not happy :-/ Although actually now that I think about it, if we optimized BitSetIterator to not use uint64_t for small bitsets then this would be fine.",
      "range": {
        "startLine": 60,
        "startChar": 12,
        "endLine": 63,
        "endChar": 58
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ada72630_d587ac75",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T12:51:19Z",
      "side": 1,
      "message": "Overall I think we should have our own implementation of std::array (like you did below) and std::bitset that take TypedInteger as index values. We likely need to make our own bitset for the performance of BitSetIterator anyway. ANGLE\u0027s source can be a useful starting point although we\u0027ll need to improve in a couple places.",
      "parentUuid": "000420f8_8bcf7a2f",
      "range": {
        "startLine": 60,
        "startChar": 12,
        "endLine": 63,
        "endChar": 58
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ba69b91_2b2dabad",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ada72630_d587ac75",
      "range": {
        "startLine": 60,
        "startChar": 12,
        "endLine": 63,
        "endChar": 58
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a88a1f86_10bc819d",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-24T21:48:04Z",
      "side": 1,
      "message": "Doesn\u0027t this need `explicit` on it?",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3db67661_bc606864",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a88a1f86_10bc819d",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf72afb8_dfef8c29",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 97,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T12:51:19Z",
      "side": 1,
      "message": "What do you think of making the binops and comparison ops only work on two typed integers of the same type? It would make the code slightly more verbose but add even more type safety. It would be interesting to see what additional changes it will require in this CL.",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "422d1ad3_fad2886b",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 97,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf72afb8_dfef8c29",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f86bde9_af21b526",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T12:51:19Z",
      "side": 1,
      "message": "Interesting, this is because these types are supposed to transparently be the standard types in release?",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49567c8e_2475006d",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Old comment. Yes.",
      "parentUuid": "8f86bde9_af21b526",
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a361642a_0a4de521",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-23T20:43:27Z",
      "side": 1,
      "message": "maybe have a .value() or .asInt() to do this?",
      "range": {
        "startLine": 173,
        "startChar": 28,
        "endLine": 173,
        "endChar": 49
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82895bda_251262dc",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-24T16:14:04Z",
      "side": 1,
      "message": "TypedInteger compiles to \"using BindingIndex \u003d uint32_t\" if there\u0027s no assertions, so I didn\u0027t want to add any methods.\n\nCould be AsInt(bindingIndex) I guess but then it\u0027s kinda the same as a static_cast\n\nThe reason is I want TypedInteger to be a no-op is because some compilers lose some SSE optimizations if you do the struct wrapping the integer thing.",
      "parentUuid": "a361642a_0a4de521",
      "range": {
        "startLine": 173,
        "startChar": 28,
        "endLine": 173,
        "endChar": 49
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57d4cf05_e2797cf4",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-24T21:48:04Z",
      "side": 1,
      "message": "ah, right. I think the static_cast is fine then, although I suppose we could use uint32_t{bindingIndex} to be slightly more brief?\n\nWould be nice if the bitset\u0027s accessor could be typed, but that\u0027s a huge pain....",
      "parentUuid": "82895bda_251262dc",
      "range": {
        "startLine": 173,
        "startChar": 28,
        "endLine": 173,
        "endChar": 49
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be2bc5fb_70a33ca6",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "ityp::bitset has a typed accessor now :)",
      "parentUuid": "57d4cf05_e2797cf4",
      "range": {
        "startLine": 173,
        "startChar": 28,
        "endLine": 173,
        "endChar": 49
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b057180_157be550",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-23T20:43:27Z",
      "side": 1,
      "message": "operator\u003d would be more natural here, and could have the same type restrictions as the constructor.",
      "range": {
        "startLine": 228,
        "startChar": 26,
        "endLine": 228,
        "endChar": 30
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b9fb377_a2a95c7d",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-24T16:14:04Z",
      "side": 1,
      "message": "Do you know if there\u0027s a way to only define operator\u003d if the rhs is constexpr? I didn\u0027t want to allow randomly reassigning it because it\u0027s not so obvious you\u0027re assigning to typed integer in a function body; \n\nBindingCount count;\nfor (BindingIndex i : IterateBitSet\u003cBindingIndex\u003e(foo)) {\n\n   .....\n\n   // lots more code\n\n   ...\n\n\n   if (something) {\n      count \u003d i;\n   } else if (something else) {\n      count \u003d 0; // should be fine\n   } else {\n      count \u003d foobar * asdf; // may not be typed!\n      // compare to:\n      // count \u003d BindingCount(foobar * asdf); // clear that I\u0027m try to do this.\n   }\n\n   ...\n}",
      "parentUuid": "7b057180_157be550",
      "range": {
        "startLine": 228,
        "startChar": 26,
        "endLine": 228,
        "endChar": 30
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bc5cad7_82696976",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-24T21:48:04Z",
      "side": 1,
      "message": "Ah, fair point. I don\u0027t know of a way to do that; it doesn\u0027t seem to be possible.\n\nAlso I just learned that `BindingIndex i \u003d 0` won\u0027t resolve to use `operator\u003d` anyway; that requires an implicit constructor.\n\nIt might actually be okay to weaken this though, with an implicit constructor(I) and operator\u003d(I). It\u0027s not common that you would reassign to a BindingIndex anyway, and it still gets typechecked on read (I think?)",
      "parentUuid": "0b9fb377_a2a95c7d",
      "range": {
        "startLine": 228,
        "startChar": 26,
        "endLine": 228,
        "endChar": 30
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb4998dc_26a224ba",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T12:51:19Z",
      "side": 1,
      "message": "I\u0027m worried that making the constructor implicit will remove half the usefulness of making typed integers.",
      "parentUuid": "5bc5cad7_82696976",
      "range": {
        "startLine": 228,
        "startChar": 26,
        "endLine": 228,
        "endChar": 30
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ef30663_60d13fc1",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fb4998dc_26a224ba",
      "range": {
        "startLine": 228,
        "startChar": 26,
        "endLine": 228,
        "endChar": 30
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "645d4748_4a62f1f5",
        "filename": "src/dawn_native/CommandBufferStateTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-23T20:43:27Z",
      "side": 1,
      "message": "would an implicit integer -\u003e TypedInteger constructor be safe and work here? I\u0027m not sure we necessarily need this templated IterateBitSet.",
      "range": {
        "startLine": 94,
        "startChar": 17,
        "endLine": 94,
        "endChar": 46
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fffd272_ea2e1ca6",
        "filename": "src/dawn_native/CommandBufferStateTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "IterateBitSet now has a specialization for ityp::bitset",
      "parentUuid": "645d4748_4a62f1f5",
      "range": {
        "startLine": 94,
        "startChar": 17,
        "endLine": 94,
        "endChar": 46
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d39a50d_5a6f4216",
        "filename": "src/dawn_native/vulkan/PipelineLayoutVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-04-23T20:43:27Z",
      "side": 1,
      "message": "should be BindGroupIndex?",
      "range": {
        "startLine": 40,
        "startChar": 13,
        "endLine": 40,
        "endChar": 21
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be1495a8_de059796",
        "filename": "src/dawn_native/vulkan/PipelineLayoutVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Yes, but not relevant anymore.",
      "parentUuid": "6d39a50d_5a6f4216",
      "range": {
        "startLine": 40,
        "startChar": 13,
        "endLine": 40,
        "endChar": 21
      },
      "revId": "2c10f1321c090c118ee692a6873467fc71935b41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}