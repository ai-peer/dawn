{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7dc9fe41_5bf25538",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-07T15:05:28Z",
      "side": 1,
      "message": "PTAL\n+corentin: in case you have a chance to see this before vacation - otherwise I\u0027ll find additional reviewers\n\nfixing test failures in https://chromium-review.googlesource.com/c/chromium/src/+/5519127",
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b223adb_31e48ae1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-08T17:50:35Z",
      "side": 1,
      "message": "Swapping corentin who is now OOO for sunny who knows the interop code fairly well",
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89043613_9cbd1103",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-05-08T23:05:34Z",
      "side": 1,
      "message": "lgtm % nits",
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84edf2a0_f5c3ec30",
        "filename": "src/dawn/native/SharedBufferMemory.cpp",
        "patchSetId": 8
      },
      "lineNbr": 147,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-05-08T23:05:34Z",
      "side": 1,
      "message": "nit: Can we make it so that the defaults are already set and we don\u0027t have to call PauseAccess()? I assume the mState and related fields touched by PauseAccess are only relevant for shared resource memory use?",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 147,
        "endChar": 26
      },
      "fixSuggestions": [
        {
          "fixId": "5ff4d3b5_48e58115",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/dawn/native/SharedBufferMemory.cpp",
              "range": {
                "startLine": 146,
                "startChar": 0,
                "endLine": 148,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51bc0937_8deea542",
        "filename": "src/dawn/native/SharedBufferMemory.cpp",
        "patchSetId": 8
      },
      "lineNbr": 147,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T16:25:27Z",
      "side": 1,
      "message": "at least right now we have the normal buffer state, and the shared resource memory access/no-access state in a single enum so its quick to validate\n\nto make it already set, we\u0027d have to pass some args all the way through CreateBufferImpl to the backend overrides, to the constructor. Didn\u0027t seem worth it to me",
      "parentUuid": "84edf2a0_f5c3ec30",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 147,
        "endChar": 26
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa1f638_376baee7",
        "filename": "src/dawn/native/SharedResourceMemory.cpp",
        "patchSetId": 8
      },
      "lineNbr": 278,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-08T02:27:46Z",
      "side": 1,
      "message": "nit. acquire",
      "range": {
        "startLine": 278,
        "startChar": 36,
        "endLine": 278,
        "endChar": 45
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f378bbe_93010b89",
        "filename": "src/dawn/native/SharedResourceMemory.cpp",
        "patchSetId": 8
      },
      "lineNbr": 278,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T16:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eaa1f638_376baee7",
      "range": {
        "startLine": 278,
        "startChar": 36,
        "endLine": 278,
        "endChar": 45
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f246191b_d2cf2efd",
        "filename": "src/dawn/native/SharedResourceMemory.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-05-08T23:05:34Z",
      "side": 1,
      "message": "nit: IMO Pause/ResumeAccess is confusing because we also have Begin/EndAccess elsewhere - maybe this should be something like OnBegin/EndAccess or just Begin/EndAccess?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6635abd2_78861cac",
        "filename": "src/dawn/native/SharedResourceMemory.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T16:25:27Z",
      "side": 1,
      "message": "renamed to OnBeginAccess / OnEndAccess",
      "parentUuid": "f246191b_d2cf2efd",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c8b8ed3_76eaab33",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-05-08T23:05:34Z",
      "side": 1,
      "message": "nit: kBeginningOfGPUTime",
      "range": {
        "startLine": 180,
        "startChar": 56,
        "endLine": 180,
        "endChar": 57
      },
      "fixSuggestions": [
        {
          "fixId": "ded6220b_a4895f78",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/dawn/native/Texture.h",
              "range": {
                "startLine": 180,
                "startChar": 0,
                "endLine": 181,
                "endChar": 0
              },
              "replacement": "    ExecutionSerial mLastSharedTextureMemoryUsageSerial{kBeginningOfGPUTime};\n"
            }
          ]
        }
      ],
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61357a3e_09cd73aa",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T16:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c8b8ed3_76eaab33",
      "range": {
        "startLine": 180,
        "startChar": 56,
        "endLine": 180,
        "endChar": 57
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "863f151e_a5e11a39",
        "filename": "src/dawn/native/d3d/SharedTextureMemoryD3D.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-05-08T23:05:34Z",
      "side": 1,
      "message": "nit: I have a slight preference for Texture/Buffer/Resource* being the first parameter and the lastUsageSerial being the second - but I\u0027ll leave it up to you. Intuitively the first parameter is the subject of the method verb so that\u0027s the rationale.",
      "range": {
        "startLine": 46,
        "startChar": 53,
        "endLine": 46,
        "endChar": 85
      },
      "fixSuggestions": [
        {
          "fixId": "6d72ac79_23405898",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/dawn/native/d3d/SharedTextureMemoryD3D.h",
              "range": {
                "startLine": 46,
                "startChar": 0,
                "endLine": 48,
                "endChar": 0
              },
              "replacement": "    ResultOrError\u003cFenceAndSignalValue\u003e EndAccessImpl(TextureBase* texture,\n                                                     ExecutionSerial lastUsageSerial,\n"
            }
          ]
        }
      ],
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2f86d53_3f6d8e2c",
        "filename": "src/dawn/native/d3d/SharedTextureMemoryD3D.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T16:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "863f151e_a5e11a39",
      "range": {
        "startLine": 46,
        "startChar": 53,
        "endLine": 46,
        "endChar": 85
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55292760_b8f66300",
        "filename": "src/dawn/tests/white_box/SharedTextureMemoryTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1723,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-05-08T23:05:34Z",
      "side": 1,
      "message": "nit: it might be worthwhile to check this happens even if there are some operations that use noopTexture like sampling / copying from it?",
      "range": {
        "startLine": 1723,
        "startChar": 12,
        "endLine": 1723,
        "endChar": 91
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b940353f_6173331c",
        "filename": "src/dawn/tests/white_box/SharedTextureMemoryTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1723,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T16:25:27Z",
      "side": 1,
      "message": "I think it really must be a noop. If we do actual operations, then we will need to have acquired the pending fences.\n\nAnd then, that means we will export a new fence point to the last read - instead of forwarding along the unused begin fences",
      "parentUuid": "55292760_b8f66300",
      "range": {
        "startLine": 1723,
        "startChar": 12,
        "endLine": 1723,
        "endChar": 91
      },
      "revId": "925b7661928e9646032a7d62f3af335334cbcafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}