{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5b586582_39682567",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T16:59:56Z",
      "side": 1,
      "message": "Loko PTAL",
      "revId": "13a0ffc2bd4173401eb2f4bfec5c55afd28cd03e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f5bb95_b3740431",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-11-28T15:54:37Z",
      "side": 1,
      "message": "This of course means that something like:\n\n```\nEnumerate(spanA).begin() \u003d\u003d Enumerate(spanB).begin()\n```\n\nI\u0027m not sure if this would cause issues with any of the STL\u0027s algorithms.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "13a0ffc2bd4173401eb2f4bfec5c55afd28cd03e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33c1c36f_602c2ce0",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-11-28T17:11:16Z",
      "side": 1,
      "message": "Oof, probably best to just compare the internal iterator also then...",
      "parentUuid": "12f5bb95_b3740431",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "13a0ffc2bd4173401eb2f4bfec5c55afd28cd03e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ebbc2b0_29c7094f",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2023-11-28T19:09:49Z",
      "side": 1,
      "message": "Note that returning `nullptr` in `mValue` also means that you\u0027d get a similar problem, even if you include mValue in the comparison:\n\n```\nEnumerate(spanA).end() \u003d\u003d Enumerate(spanB).end()\n```\n\nHowever, having said all that, in C++, comparing iterators from different containers is considered UB, so I\u0027m not sure how important it is to fix this.\n\nSee https://cplusplus.github.io/LWG/issue446 where it says:\n\nThe result of directly or indirectly evaluating any comparison function or the binary - operator with two iterator values as arguments that were obtained from two different ranges r1 and r2 (including their past-the-end values) which are not subranges of one common range is undefined, unless explicitly described otherwise.\n\nI think it\u0027s fine to leave this as is.",
      "parentUuid": "33c1c36f_602c2ce0",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "13a0ffc2bd4173401eb2f4bfec5c55afd28cd03e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b075fe75_476ac853",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T19:44:29Z",
      "side": 1,
      "message": "Tentatively leaving as is then! Thank you for the detailed reference ðŸ˜„",
      "parentUuid": "1ebbc2b0_29c7094f",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "13a0ffc2bd4173401eb2f4bfec5c55afd28cd03e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}