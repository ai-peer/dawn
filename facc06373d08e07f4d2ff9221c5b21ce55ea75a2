{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e9728bc_5d0d92c2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-05-19T00:15:03Z",
      "side": 1,
      "message": "nit. or",
      "range": {
        "startLine": 11,
        "startChar": 8,
        "endLine": 11,
        "endChar": 11
      },
      "revId": "facc06373d08e07f4d2ff9221c5b21ce55ea75a2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54b0985d_c6422b42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-05-19T00:15:03Z",
      "side": 1,
      "message": "Hmm ok took me a while to try to understand this... IIUC though, this only solves the cycle at the external level right? I assume that right now, externally created objects call device.APIReference(), so we are using that to make sure that as long as an external object lives, we don\u0027t call destroy, and the device lives.\n\nFor native though, I think that objects still cannot outlive the device right? Since the external counter will be 1 and assuming native doesn\u0027t call APIReference anywhere when each object is made, as soon as the device goes away, all objects will be destroyed.\n\nI\u0027m thinking whether it would be possible to expose something in ObjectBase like `DropDeviceRef` or `WeakDeviceRef` and call those on the objects that are cached by the device instead? (Presumably that would cause the Ref to decrement or something so the internally cached objects wouldn\u0027t keep the device alive.) Then I think both native and external wouldn\u0027t have the ref cycles? Could also be a template wrapper around the Refs\u003cObjectBase\u003e in the device? Not entirely sure that would work yet, but just throwing my thoughts here.",
      "revId": "facc06373d08e07f4d2ff9221c5b21ce55ea75a2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "610f3f34_03eacd07",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 300,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-05-19T00:15:03Z",
      "side": 1,
      "message": "nit. hold",
      "range": {
        "startLine": 300,
        "startChar": 65,
        "endLine": 300,
        "endChar": 73
      },
      "revId": "facc06373d08e07f4d2ff9221c5b21ce55ea75a2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}