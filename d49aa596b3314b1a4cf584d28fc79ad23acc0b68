{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4e8ec33c_a9465b88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-04-26T08:44:55Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "d49aa596b3314b1a4cf584d28fc79ad23acc0b68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5280b1fd_4855c7e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-04-26T11:33:35Z",
      "side": 1,
      "message": "I appreciate the effort here, but this analysis really belongs at the level of the new IR, which isn\u0027t ready just yet.\n\nMost of the existing transforms will be replaced with an equivalent IR transform, so I\u0027m hesitant to add more logic to the old framework.\n\nThe `IntergerValueRange` looks like the seed of something I\u0027d imagine we\u0027ll need for interval lists. I\u0027d be happy to land some well-tested utility code for interval ranges. Something that can represent unbounded intervals of various data types, and support interval union / difference ops, queries, etc.",
      "revId": "d49aa596b3314b1a4cf584d28fc79ad23acc0b68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c495cf99_46f8a2f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-04-27T01:22:39Z",
      "side": 1,
      "message": "Hi Ben,\n\nThanks for your comments. Do you mean that you are suggesting us implementing the value range analysis after Tint IR is shipped?\n\nYes I find it is not very convenient to do such analysis on current AST. According to my original plan I\u0027d like to add another transform to make the index always be a variable before the analysis (e.g. a \u003d b[c * d + e] -\u003e let index \u003d c * d + e; a \u003d b[index]). With IR these expressions will all become SSA so it will be much easier to do such analysis.\n\nMy previous plan is implementing some simple range analysis based on current Tint (the index is computed only by constants, invocation id and for-loop control variables), which should be enough for TFJS and TVM and easily proven to be correct. Do you mean you prefer us not doing so in Tint right now until we have IR shipped in Tint?",
      "parentUuid": "5280b1fd_4855c7e1",
      "revId": "d49aa596b3314b1a4cf584d28fc79ad23acc0b68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}