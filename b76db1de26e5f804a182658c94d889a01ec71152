{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b84027b6_af397ffd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-02-06T19:41:21Z",
      "side": 1,
      "message": "PTAL. Thanks! \n\nThe bots can turn green once the CTS change at https://github.com/gpuweb/cts/pull/2226 is rolled into Chromium (Thanks Kai for code review).",
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b7ac0ab_aea7e811",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-06T23:37:18Z",
      "side": 1,
      "message": "seems unfortunate to add this bool arg when everywhere it\u0027s passed explicitly as false, except APIEnd where sometimes we pass true.\n\nCould we instead just save a bool on the encoder?\n\nAPIEnd could be something like:\n```\nif (mEnded) {\n  GetDevice()-\u003eConsumedError(...);\n  return {};\n}\nmEncodingContext-\u003eTryEncode(...);\n\nmEnded \u003d true;\n```",
      "range": {
        "startLine": 88,
        "startChar": 66,
        "endLine": 88,
        "endChar": 95
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9953beca_2eb621a4",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-02-07T00:07:32Z",
      "side": 1,
      "message": "This would be closer to the way the spec is written, and I think it is better to involve EncodingContext as little as possible (perhaps not at all?) in these error cases.",
      "parentUuid": "7b7ac0ab_aea7e811",
      "range": {
        "startLine": 88,
        "startChar": 66,
        "endLine": 88,
        "endChar": 95
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8f88ec2_fd02cfe4",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-02-07T08:12:22Z",
      "side": 1,
      "message": "Done\n\nGood point. And I made this change in APIEnd() in render and compute pass and leave EncodingContext basically unchanged as Kai suggested.\n\nA tiny change is that `mEnded \u003d true` can be put before TryEncode() according to the spec.",
      "parentUuid": "9953beca_2eb621a4",
      "range": {
        "startLine": 88,
        "startChar": 66,
        "endLine": 88,
        "endChar": 95
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0af257be_87a3b4f4",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-02-06T19:41:21Z",
      "side": 1,
      "message": "Note that if the pass is a invalid one (for example, beginRenderPass() fail because render pass descriptor is invalid) and we call pass.end() twice, it will not report error immediately. Instead, finish() will report the validation error in pass descriptor. \n\nMaybe we can add a test for this corner case in CTS if you think this is reasonable.",
      "range": {
        "startLine": 99,
        "startChar": 16,
        "endLine": 99,
        "endChar": 89
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61f3ebd4_a7655961",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-06T23:37:18Z",
      "side": 1,
      "message": "Is that true?\n\nreading the spec, if you do a bad [beginRenderPass](https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-beginrenderpass), I think you will get a pass that is invalid. However, I think the state of that invalid pass will still be \"open\", since it is [initially set to open](https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot). Then we calling [end](https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-end), we first check that the state of the encoder is open, before checking that it is not invalid.",
      "parentUuid": "0af257be_87a3b4f4",
      "range": {
        "startLine": 99,
        "startChar": 16,
        "endLine": 99,
        "endChar": 89
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8919f350_a75758cc",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-02-07T00:07:32Z",
      "side": 1,
      "message": "The spec\u0027s a bit subtle, but I think Austin is correct.",
      "parentUuid": "61f3ebd4_a7655961",
      "range": {
        "startLine": 99,
        "startChar": 16,
        "endLine": 99,
        "endChar": 89
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0020f9f_39c5dfba",
        "filename": "src/dawn/native/EncodingContext.h",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-02-07T08:12:22Z",
      "side": 1,
      "message": "Done.\n\nThis actually make this change easier.",
      "parentUuid": "8919f350_a75758cc",
      "range": {
        "startLine": 99,
        "startChar": 16,
        "endLine": 99,
        "endChar": 89
      },
      "revId": "b76db1de26e5f804a182658c94d889a01ec71152",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}