{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d0bd5209_9ab58bce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-06T03:58:58Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2dec8bc_f3f255c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-06T10:50:09Z",
      "side": 1,
      "message": "A +1 for removing SPIR-V stuff from the core language, but I think longer term we want to replace the use of `IntrinsicCall` with intrinsic table functions (`fn`) so you get overload validation.\n\nWith per-language definition files, I\u0027m not entirely sure we need `InstrinsicCall` any more.",
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a95d6b3_10585e06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-06T11:21:07Z",
      "side": 1,
      "message": "Yup, don\u0027t disagree. This seems like a small step to clean this out of the core IR. We can move the intrinsics over to the `spirv.def` file as needed.",
      "parentUuid": "f2dec8bc_f3f255c9",
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01942f19_aa845ec9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-06T12:05:06Z",
      "side": 1,
      "message": "üëç\n\nJames for +2",
      "parentUuid": "6a95d6b3_10585e06",
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d175f93_b5ae8398",
        "filename": "src/tint/lang/spirv/ir/intrinsic.cc.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-09-06T15:05:00Z",
      "side": 1,
      "message": "Nit: We don\u0027t need the ability to parse the enums, so we can remove this and get rid of some unnecessary generated code.",
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b038632e_da4c1cc3",
        "filename": "src/tint/lang/spirv/ir/intrinsic.cc.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-06T15:15:31Z",
      "side": 1,
      "message": "So, there is no way to remove the declaration from the header file, which means if I remove this we have a `ParseIntrinsic` in the header, but no implementation which ... is bleh. So, leaving this for now. This whole file will go away once we get shifted over to builtins for these.",
      "parentUuid": "2d175f93_b5ae8398",
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "254bdeec_9c893067",
        "filename": "src/tint/lang/spirv/ir/intrinsic.h",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-09-06T15:05:00Z",
      "side": 1,
      "message": "No action needed here, but we don\u0027t actually need these strings. Hopefully compilers are smart enough to optimize them out, but it\u0027d be nice if we had a way of telling the generator to not emit them.",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 121,
        "endChar": 2
      },
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de6bcb10_d781a526",
        "filename": "src/tint/lang/spirv/ir/intrinsic.h",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-06T15:15:31Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "254bdeec_9c893067",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 121,
        "endChar": 2
      },
      "revId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1d2c82a3928af8bb360532d979e7c471fd63265b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}