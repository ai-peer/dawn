{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "76ea09ba_441a515e",
        "filename": "src/tint/lang/core/ir/validator.cc",
        "patchSetId": 10
      },
      "lineNbr": 539,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-27T20:04:51Z",
      "side": 1,
      "message": "Can we add a capability for \"ref\" so that the validator would only accept it when the calling environment explicitly allows for it? This would help address one of my main concerns about leaking ref into the core IR.\n\nNot too hard to add later though if you want to get this in now.",
      "revId": "a1627d17b48471a9425025f6d5284a6d178cf736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71396eca_a71f37cf",
        "filename": "src/tint/lang/core/ir/validator.cc",
        "patchSetId": 10
      },
      "lineNbr": 539,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-27T20:50:47Z",
      "side": 1,
      "message": "I considered this, but assuming you don\u0027t accidentally add `ref` types to `core.def`, how would you accidentally end up accepting ref types without a validation error?",
      "parentUuid": "76ea09ba_441a515e",
      "revId": "a1627d17b48471a9425025f6d5284a6d178cf736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dc97665_3187bf8b",
        "filename": "src/tint/lang/core/ir/validator.cc",
        "patchSetId": 10
      },
      "lineNbr": 539,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-27T21:01:51Z",
      "side": 1,
      "message": "Maybe I\u0027m missing something, but how does the lack of `ref` in `core.def` cause the validator to produce an error when `ref` is used?\n\nWith the changes in this CL, it looks like a core transform could create a `ir::Var` with a `ref` result, and pass that to `Load` / `Access` etc, without any validation error triggering.",
      "parentUuid": "71396eca_a71f37cf",
      "revId": "a1627d17b48471a9425025f6d5284a6d178cf736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "936e166b_f31c84fd",
        "filename": "src/tint/lang/core/ir/validator.cc",
        "patchSetId": 10
      },
      "lineNbr": 539,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-28T11:52:10Z",
      "side": 1,
      "message": "You\u0027re right - there are a few ways you can use ref types without hitting the intrinsic table. Created https://dawn-review.googlesource.com/c/dawn/+/181361 to add validation for this.",
      "parentUuid": "6dc97665_3187bf8b",
      "revId": "a1627d17b48471a9425025f6d5284a6d178cf736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11c93046_0e2c6134",
        "filename": "src/tint/lang/wgsl/writer/raise/ptr_to_ref_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 1,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-27T19:15:02Z",
      "side": 1,
      "message": "```suggestion\n// Copyright 2024 The Dawn \u0026 Tint Authors\n```",
      "revId": "a1627d17b48471a9425025f6d5284a6d178cf736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1fbe0e1_387fbc15",
        "filename": "src/tint/lang/wgsl/writer/raise/ptr_to_ref_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 1,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-27T20:52:47Z",
      "side": 1,
      "message": "Fix applied.",
      "parentUuid": "11c93046_0e2c6134",
      "revId": "a1627d17b48471a9425025f6d5284a6d178cf736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}