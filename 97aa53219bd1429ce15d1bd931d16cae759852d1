{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "edb53388_69764e9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-11T04:24:20Z",
      "side": 1,
      "message": "`BufferValidationTest.MapAsync_PendingMap` fails with wire.\n\n\n```\n$ out\\Default\\dawn_unittests.exe --use-wire --gtest_filter\u003d\"BufferValidationTest.MapAsync_PendingMap\"\nNote: Google Test filter \u003d BufferValidationTest.MapAsync_PendingMap\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from BufferValidationTest\n[ RUN      ] BufferValidationTest.MapAsync_PendingMap\nWarning: windows_read_data_files_in_registry: Registry lookup failed to get layer manifest files.\nWarning: Layer VK_LAYER_bandicam_helper uses API version 1.2 which is older than the application specified API version of 1.3. May cause issues.\nINFO: EGL ERROR: eglMakeCurrent: \u0027dpy\u0027 not a valid EGLDisplay handle\n..\\..\\src\\dawn\\tests\\unittests\\validation\\BufferValidationTests.cpp(66): error: Failed\nExpected device error in:\n buffer.MapAsync(mode, offset, size, ToMockBufferMapAsyncCallback, nullptr)\n..\\..\\src\\dawn\\tests\\unittests\\validation\\BufferValidationTests.cpp(66): error: Failed\nExpected device error in:\n buffer.MapAsync(mode, offset, size, ToMockBufferMapAsyncCallback, nullptr)\n..\\..\\src\\dawn\\tests\\unittests\\validation\\BufferValidationTests.cpp(66): error: Failed\nExpected device error in:\n buffer.MapAsync(mode, offset, size, ToMockBufferMapAsyncCallback, nullptr)\n..\\..\\src\\dawn\\tests\\unittests\\validation\\BufferValidationTests.cpp(66): error: Failed\nExpected device error in:\n buffer.MapAsync(mode, offset, size, ToMockBufferMapAsyncCallback, nullptr)\n[  FAILED  ] BufferValidationTest.MapAsync_PendingMap (185 ms)\n[----------] 1 test from BufferValidationTest (187 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (191 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] BufferValidationTest.MapAsync_PendingMap\n\n 1 FAILED TEST\n ```\n \n `AssertMapAsyncError` doesn\u0027t recognize an error immediately caused in Wire client?\n https://source.chromium.org/chromium/_/dawn/dawn.git/+/24c8440eb65ba88abd17a63dd55895f0a60fbfb8:src/dawn/tests/unittests/validation/BufferValidationTests.cpp;l\u003d65-66;drc\u003de536775b409a322230e22c67c536e46243f6c40c;bpv\u003d1;bpt\u003d0",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89803fe5_164d65b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-11T07:51:36Z",
      "side": 1,
      "message": "If I rewrite the test to like this, the test passes with wire.\n\n```\nwgpu::Buffer buffer \u003d CreateMapReadBuffer(4);\n// The first map async call should succeed while the second one should fail\nbuffer.MapAsync(wgpu::MapMode::Read, 0, 4, ToMockBufferMapAsyncCallback, nullptr);\nEXPECT_CALL(*mockBufferMapAsyncCallback, Call(WGPUBufferMapAsyncStatus_Error, nullptr))\n    .Times(1);\nbuffer.MapAsync(wgpu::MapMode::Read, 0, 4, ToMockBufferMapAsyncCallback, nullptr);\nEXPECT_CALL(*mockBufferMapAsyncCallback, Call(WGPUBufferMapAsyncStatus_Success, nullptr))\n    .Times(1);\nWaitForAllOperations(device);\n```\n\nBut without wire, the test will fail due to unexpected error.\n\n```\n$ out\\Default\\dawn_unittests.exe --gtest_filter\u003d\"BufferValidationTest.MapAsync_PendingMap\"\nNote: Google Test filter \u003d BufferValidationTest.MapAsync_PendingMap\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from BufferValidationTest\n[ RUN      ] BufferValidationTest.MapAsync_PendingMap\nWarning: windows_read_data_files_in_registry: Registry lookup failed to get layer manifest files.\nWarning: Layer VK_LAYER_bandicam_helper uses API version 1.2 which is older than the application specified API version of 1.3. May cause issues.\nINFO: EGL ERROR: eglMakeCurrent: \u0027dpy\u0027 not a valid EGLDisplay handle\n..\\..\\src\\dawn\\tests\\unittests\\validation\\ValidationTest.cpp(296): error: Value of: self-\u003emExpectError\n  Actual: false\nExpected: true\nGot unexpected device error: [Buffer] is pending map.\n - While calling [Buffer].MapAsync(MapMode::Read, 0, 4, ...).\n\n[  FAILED  ] BufferValidationTest.MapAsync_PendingMap (250 ms)\n[----------] 1 test from BufferValidationTest (252 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (262 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] BufferValidationTest.MapAsync_PendingMap\n\n 1 FAILED TEST\n\n```\n\nI don\u0027t understand dawn error handling well yet. Does the \"device error\" of (`ASSERT_DEVICE_ERROR`) correspond to error caused in Device timeline in the WebGPU spec?\n\nIf so, non-null pending map error of `mapAsync()` is immediately caused in content timeline.\n\nhttps://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync\n\nSo what we should fix for this problem is the native one? I guess `GetDevice()-\u003eConsumedError()` is the function causing a device error?\n\nhttps://source.chromium.org/chromium/_/dawn/dawn.git/+/24c8440eb65ba88abd17a63dd55895f0a60fbfb8:src/dawn/native/Buffer.cpp;l\u003d351;drc\u003de536775b409a322230e22c67c536e46243f6c40c;bpv\u003d1;bpt\u003d0\n\nIf so, we should check pending map, fire callback, and return before `GetDevice()-\u003eConsumedError()` if pending map is non-null?\n\n```\nif (mState \u003d\u003d BufferState::PendingMap) {\n    if (callback) {\n        callback(WGPUBufferMapAsyncStatus_Error, userdata);\n    }\n    return;\n}\n\nWGPUBufferMapAsyncStatus status;\nif (GetDevice()-\u003eConsumedError(ValidateMapAsync(mode, offset, size, \u0026status),\n                               \"calling %s.MapAsync(%s, %u, %u, ...).\", this, mode, offset,\n                               size)) {\n    if (callback) {\n        callback(status, userdata);\n    }\n    return;\n}\nASSERT(!IsError());\n```",
      "parentUuid": "edb53388_69764e9e",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78eee2b_73542f90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-12-12T12:40:33Z",
      "side": 1,
      "message": "Yeah I think your understanding is correct, and we should change dawn::native to reject the callback without a validation error consumed if we are already pending a map. Then adapt the tests etc. Nice find!\n\nBut still could you raise an issue about this in the group? In the steps about map pending, maybe we could also choose to reject the promise and generate a validation error. If the group decides to change the behavior, we can adapt it as a follow up CL.",
      "parentUuid": "89803fe5_164d65b6",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98badbd9_bf0e29de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-14T04:24:27Z",
      "side": 1,
      "message": "Thanks for the comment.\n\n\u003e But still could you raise an issue about this in the group? \n\nSure, filed an issue\n\nhttps://bugs.chromium.org/p/dawn/issues/detail?id\u003d1613",
      "parentUuid": "b78eee2b_73542f90",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d99d08_61cccbca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-14T04:42:45Z",
      "side": 1,
      "message": "Made a CL for updating dawn native.\n\nhttps://dawn-review.googlesource.com/c/dawn/+/114280\n\nI will switch this CL to ready for review if the CL will be merged.",
      "parentUuid": "98badbd9_bf0e29de",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "824759ea_6cb16def",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-12-12T12:40:33Z",
      "side": 1,
      "message": "I think the spec also requires pendingMap to be false if the request was an error. Would it be possible to add a test that catches that?",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dd9ad05_d79e3170",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-14T05:28:03Z",
      "side": 1,
      "message": "It doesn\u0027t check whether the request succeeds or not. It checks whether the request is unmapped or destroyed. Unmap or Destroy set request.clientStatus to error.\n\nAdded comment not to confuse.",
      "parentUuid": "824759ea_6cb16def",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44ee0e3b_33f032b4",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-12-12T12:40:33Z",
      "side": 1,
      "message": "Mozilla asked for this change so that they wouldn\u0027t have to track multiple requests at the same time. So it should be possible to inline the single request in dawn::wire::client and remove mRequests.",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf2a6d36_9e21331b",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-14T05:28:03Z",
      "side": 1,
      "message": "If I\u0027m right, `mRequests` can\u0027t be removed in the current design.\n\n`Unmap` sets `requestClient.status` to error and `OnMapAsyncCallback` fires the request callback with the error status when receiving the map request result from the server.\n\nSo, in case that application does multiple `mapAsync` -\u003e `Unmap` before the callbacks are fired, the Client needs to keep multiple pending requests.\n\nI\u0027m not sure about the history of the design. `mRequests` may be removed if `Unmap` and `Destroy` immediately fire callbacks with error status and `OnMapAsyncCallback` ignores the responses from the server for the map requests already canceled by `Unmap` or `Destroy`.",
      "parentUuid": "44ee0e3b_33f032b4",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1d66599_73ed0d32",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-12-14T05:34:55Z",
      "side": 1,
      "message": "I rechecked the spec. `Unmap` and `Destroy` immediately reject if `[[pending_map]]` is non-null. So I think it\u0027s ok to rewrite the Client to remove `mRequests`. I will try.",
      "parentUuid": "cf2a6d36_9e21331b",
      "revId": "97aa53219bd1429ce15d1bd931d16cae759852d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}