{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b50e90c_50cbc3a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-05-27T08:51:15Z",
      "side": 1,
      "message": "PTAL.\nChange the callback routine to use the CallbackTaskManager, ensuring the thread safety.\nThe name \"UserWarning\" is unchanged for now, please give some advise.\nThanks!",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ff62f33_e74876ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-27T16:01:11Z",
      "side": 1,
      "message": "LGTM",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ac16498_57326a62",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 265,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-31T12:22:34Z",
      "side": 1,
      "message": "nit: we don\u0027t need to keep the history of the iterations on the CL in the final code.",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68d7d7ea_70c24918",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 265,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-06-03T00:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ac16498_57326a62",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c17e084_041ac3aa",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 267,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-05-27T08:51:15Z",
      "side": 1,
      "message": "Rather than directly call the callback function right away, now the callback will be packed into a UserWarningCallbackTask and pushed into the callbackTaskManager, which ensures the thread safety.",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7935f6a0_b93c5f9f",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 5
      },
      "lineNbr": 267,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-31T12:22:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c17e084_041ac3aa",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d2e01e_ce3b4965",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-31T12:22:34Z",
      "side": 1,
      "message": "[1]",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc7cc790_b4140337",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-06-03T00:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4d2e01e_ce3b4965",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96070b2_ffa7a855",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 387,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-05-27T08:51:15Z",
      "side": 1,
      "message": "The implemented CallbackTask class is defined within the DeviceBase now.\nIt will hold the callback pointer and all parameter it needed inside the class.",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aea4c60_366b4f6b",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 387,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-27T16:01:11Z",
      "side": 1,
      "message": "I think we might want the callback to still happen in HandleShutDown and HandleDeviceLoss.\n\nWhat do you think about having a more functional-style creation of this?  In the future, we could consider having \"policy\" enum which tells the task what to do on Finish/ShutDown/DeviceLoss. For example, it could either call the function anyway, or drop it without calling.\n\n// In CallbackTaskManager.cpp..\n\n// static\nstd::unique_ptr\u003cCallbackTask\u003e CallbackTask::From(std::function\u003cvoid()\u003e fn) {\n    struct FunctionalCallbackTask : public CallbackTask {\n        FunctionalCallbackTask(std::function\u003cvoid()\u003e fn) : mFn(std::move(fn)) {}\n        std::function\u003cvoid()\u003e mFn;\n\n        void Finish() override {\n            if (mFn) {\n                std::move(mFn)();\n            }\n        }\n\n        void HandleShutDown() override {\n            if (mFn) {\n                std::move(mFn)();\n            }\n        }\n\n        void HandleDeviceLoss() override {\n            if (mFn) {\n                std::move(mFn)();\n            }\n        }\n    };\n\n    return std::unique_ptr\u003cCallbackTask\u003e(\n        new FunctionalCallbackTask(std::move(fn)));\n}\n\n\n// Usage\n\nmCallbackTaskManager-\u003eAddCallbackTask([\n  callback,\n  userdata,\n  message \u003d std::string(message)] {\n  callback(message.c_str(), userdata);\n});",
      "parentUuid": "f96070b2_ffa7a855",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f317220a_84ba2c8e",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 387,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-31T12:22:34Z",
      "side": 1,
      "message": "+1 for a simple callback constructor for ones that don\u0027t know the difference between shutdown and finish and loss.\n\nAlso we try to avoid putting implementation details in headers. This whole class can be defined in Device.cpp (in the anonymous namespace for example). It would remove the need for the include at [1]",
      "parentUuid": "0aea4c60_366b4f6b",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f5055e1_eddfb7df",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 5
      },
      "lineNbr": 387,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2021-06-03T00:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f317220a_84ba2c8e",
      "revId": "e13afd87858749fca8bc634eb3f4bca021aee848",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}