{
  "comments": [
    {
      "key": {
        "uuid": "cc542059_3b6e0d22",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 549,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-13T19:07:33Z",
      "side": 1,
      "message": "GetSize() is in texels. Since we\u0027re multiplying by blockByteSize, we need to get the width and height in blocks:\n(size.width / format.blockWidth) * (size.height / format.blockHeight) * format.blockByteSize",
      "range": {
        "startLine": 549,
        "startChar": 30,
        "endLine": 549,
        "endChar": 92
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7df2a52f_1358c6d3",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 554,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-13T18:54:23Z",
      "side": 1,
      "message": "Here, we are allocating a buffer of type uint32_t but giving it a size that is calculated using bytes. Hence, I think this buffer ends up being too big.",
      "range": {
        "startLine": 554,
        "startChar": 12,
        "endLine": 554,
        "endChar": 75
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07821ff1_33c219a1",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 572,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-13T19:07:33Z",
      "side": 1,
      "message": "We have a helper |ComputeBufferImageCopyRegion| in CommandBufferVk.cpp. We can move common helpers to something like CopyHelpersVk.cpp",
      "range": {
        "startLine": 558,
        "startChar": 12,
        "endLine": 572,
        "endChar": 41
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b547daa9_5a81fe3c",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 572,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-08-13T20:08:15Z",
      "side": 1,
      "message": "Does it make sense to move to UtilsVulkan.cpp? Or is it better to make CopyHelpersVk.cpp?",
      "parentUuid": "07821ff1_33c219a1",
      "range": {
        "startLine": 558,
        "startChar": 12,
        "endLine": 572,
        "endChar": 41
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd3b12e7_ebddc95c",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 572,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-13T20:21:35Z",
      "side": 1,
      "message": "Didn\u0027t realize that existed. UtilsVulkan.cpp sounds good to me",
      "parentUuid": "b547daa9_5a81fe3c",
      "range": {
        "startLine": 558,
        "startChar": 12,
        "endLine": 572,
        "endChar": 41
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "679c85ae_0f798f55",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 581,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-13T18:54:23Z",
      "side": 1,
      "message": "Release does set the unique_ptr to null but does not free the allocation. So we still leak here. \n\nFor Vulkan, do we need to keep these buffer objects around until they\u0027re no longer in use by the GPU?",
      "range": {
        "startLine": 580,
        "startChar": 11,
        "endLine": 581,
        "endChar": 32
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abc72b93_53276349",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 581,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-13T18:57:10Z",
      "side": 1,
      "message": "dawn_native::vulkan::Buffer::DestroyImpl will enqueue the Vulkan backing objects on a list to keep around until commands are submitted.",
      "parentUuid": "679c85ae_0f798f55",
      "range": {
        "startLine": 580,
        "startChar": 11,
        "endLine": 581,
        "endChar": 32
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d4d0b02_541ae8d6",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 581,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-08-13T20:08:15Z",
      "side": 1,
      "message": "then i should just call destroy on the buffer?",
      "parentUuid": "abc72b93_53276349",
      "range": {
        "startLine": 580,
        "startChar": 11,
        "endLine": 581,
        "endChar": 32
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "423ff1e4_e751deb3",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 581,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-13T20:21:35Z",
      "side": 1,
      "message": "You just need to remove this line. std::unique_ptr \"owns\" the Buffer so it\u0027ll handle destruction.\n\nWhen std::unique_ptr\u003cBuffer\u003e falls out of scope, ~Buffer() will be called which will call DestroyInternal() which will call DestroyImpl()",
      "parentUuid": "0d4d0b02_541ae8d6",
      "range": {
        "startLine": 580,
        "startChar": 11,
        "endLine": 581,
        "endChar": 32
      },
      "revId": "6fa0612a0872410a74339a758464b65547076369",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}