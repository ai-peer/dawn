{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3843ced6_61a3f092",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-11-07T15:02:29Z",
      "side": 1,
      "message": "Rebased and fixed two issues causing test failures:\n1. I had not considered the use case of binding a resource which isn\u0027t actually used. (Pointless but technically valid so needs to be handled correctly).\n2. I had an optimization which removes barriers for buffers which can\u0027t be written to by the GPU (based on usage flags). Writes on the host are covered by `vkQueueSubmit`. The purpose of this optimization is to optimize user scratch buffers for when the user isn\u0027t using `queue.writeBuffer` but instead manually uploading data to scratch buffers (`MAP_WRITE | COPY_SRC`) and copying to the destination buffer. Internal scratch buffers already skip barriers by not calling `TransitionUsage`. However, the way I was checking if a buffer can\u0027t be written to wasn\u0027t valid as there can be internal GPU writes despite no matching usage flag. For now, I have removed the optimization. We may want to revisit it in the future if we can find a way to do it.",
      "revId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "460d0c91_2c0ce5a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-07T15:10:30Z",
      "side": 1,
      "message": "\"as there can be internal GPU writes\", like what kind of write? Can we keep a TODO for that potential optimization?",
      "parentUuid": "3843ced6_61a3f092",
      "revId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "988555ce_09458935",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-07T15:10:30Z",
      "side": 1,
      "message": "Still LGTM",
      "revId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e78554c6_2ca4a81b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-11-07T15:21:54Z",
      "side": 1,
      "message": "For buffers with `mappedAtCreation` we create a scratch buffer, map that, then on `Unmap`, copy from the scratch buffer into the actual buffer.\n\nWe also do a fill buffer when `NonzeroClearResourcesOnCreationForTesting` is enabled.\n\nThese can happen without a user-side `COPY_DST` so `GetUsage()` doesn\u0027t reflect it.",
      "parentUuid": "460d0c91_2c0ce5a9",
      "revId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "8a2f0c6ca2a0b8781c49b8c8d9d812e5f9d2f6f6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}