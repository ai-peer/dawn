{
  "comments": [
    {
      "key": {
        "uuid": "57e862f5_4de379e2",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-31T13:04:12Z",
      "side": 1,
      "message": "you mean the allocator?",
      "range": {
        "startLine": 116,
        "startChar": 59,
        "endLine": 116,
        "endChar": 66
      },
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "553d9cbd_1a623452",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-02-01T17:37:57Z",
      "side": 1,
      "message": "No longer relevant.",
      "parentUuid": "57e862f5_4de379e2",
      "range": {
        "startLine": 116,
        "startChar": 59,
        "endLine": 116,
        "endChar": 66
      },
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81879c69_727c50f5",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 692,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-31T13:04:12Z",
      "side": 1,
      "message": "I think this could be return std::make_unique ...",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51cd23a9_746c53dc",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 692,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-02-01T17:37:57Z",
      "side": 1,
      "message": "Doing `return std::make_unique` is a forbidden conversion. Maybe `return Result\u003c...\u003e(std::make_unique ... `.",
      "parentUuid": "81879c69_727c50f5",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14f00e41_7188d61d",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 692,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-02-02T00:05:55Z",
      "side": 1,
      "message": "In that case, I say leave as is. Or return std::move(std::make_unique(...))?",
      "parentUuid": "51cd23a9_746c53dc",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0b790ef_1922293d",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 692,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-02-04T08:39:24Z",
      "side": 1,
      "message": "Ok that was a bad suggestion feel free to ignore it :)",
      "parentUuid": "14f00e41_7188d61d",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f29353b5_faef064c",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 703,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-31T13:04:12Z",
      "side": 1,
      "message": "We should use HOST_COHERENT, I think it is always the better choice for map-writable memory (let\u0027s not worry about uncached accesses for now, we can use non-temporal stores if that becomes a problem). We are always guaranteed that a non-sparse buffer will be able to be located in a host visible coherent memory type.\n\nThis would avoid the need for flushes for a tiny modification to MemoryAllocator.cpp.",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a872223_3cdb5a2c",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 703,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-02-01T17:37:57Z",
      "side": 1,
      "message": "SGTM. IIRC, not all drivers are well-optimized for HOST_COHERENT.",
      "parentUuid": "f29353b5_faef064c",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "126bbe50_ef7831a7",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 703,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-02-04T08:39:24Z",
      "side": 1,
      "message": "I see, if that turns out to be a perf issue we\u0027ll implement a second path.",
      "parentUuid": "1a872223_3cdb5a2c",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a0ca32_1539af5b",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 707,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-31T13:04:12Z",
      "side": 1,
      "message": "nit: ensure correct ordering with previous memory operations on the buffer.",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa3ca024_abad1700",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 707,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-02-01T17:37:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12a0ca32_1539af5b",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbaaad22_bc49be31",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-31T13:04:12Z",
      "side": 1,
      "message": "We also need a pipeline barrier to make visible writes in the HOST_VISIBLE stage to the TRANSFER stage like in [1]. Ideally we only produce that pipeline barrier the first time CopyFromStagingToBuffer is used and records to a VkCommandBuffer.",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a7586d7_4e26cd8e",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-02-01T17:37:57Z",
      "side": 1,
      "message": "If I understand the spec correctly, this is not required (see comment). We could however; insert the barrier, should there exist some other issue. Could you please further clarify the need?",
      "parentUuid": "cbaaad22_bc49be31",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6177c4df_05be7ba3",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-02-04T08:39:24Z",
      "side": 1,
      "message": "The spec isn\u0027t super clear about it, but basically CPU memory write correspond to the VK_ACCESS_HOST_WRITE_BIT in VK_PIPELINE_STAGE_HOST_BIT. You can see this memory barrier as buffering a cache flush on the GPU so that it sees the latest version of the data that was written by the CPU.\n\nThis is exactly what happens in Intel\u0027s Vulkan driver:\n - in vkCmdPipelineBarrier the OR of all the dst accesses is computed and used to set \"pending bits\" https://github.com/mesa3d/mesa/blob/master/src/intel/vulkan/genX_cmd_buffer.c#L1932\n - the TRANSFER_READ access causes a cache flush to be added to the pending bits: https://github.com/mesa3d/mesa/blob/48ed2a7bb009618edfde28ee87ae391c1879c35b/src/intel/vulkan/anv_private.h#L1948",
      "parentUuid": "1a7586d7_4e26cd8e",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1286a7f_8e13eeb2",
        "filename": "src/dawn_native/vulkan/StagingBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-31T13:04:12Z",
      "side": 1,
      "message": "GPU pointers aren\u0027t a thing in Vulkan unfortunately, what does this comment mean?",
      "revId": "96709ba1390e31d1e0bd97ef564a2b38bad86d7d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}