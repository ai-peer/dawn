{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9fb681c7_850712ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T17:14:33Z",
      "side": 1,
      "message": "s",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51a5cc44_1a2c1d92",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "This seems less clear since `transforms` is used in both sides of the `if`. Having it declared outside makes it clearer both branches use it.",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ce448ec_5c226b95",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51a5cc44_1a2c1d92",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a92ecc68_527b393d",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "Does it only need to do this `if (!transforms)`? or can the pointer change out from under it?",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29825bb2_4c6ee785",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Yes. See the comment just above.",
      "parentUuid": "a92ecc68_527b393d",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "962c5fa4_cff944ce",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T17:14:33Z",
      "side": 1,
      "message": "In that case, why not wrap it in a `if (!transforms)` so we don\u0027t do the `Get` on every iteration?",
      "parentUuid": "29825bb2_4c6ee785",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ca29d42_83ea942b",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:17:35Z",
      "side": 1,
      "message": "`Clone(el)` on L213 can add to `list_transforms_`. We need to look up every iteration.",
      "parentUuid": "962c5fa4_cff944ce",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dfdba23_1d2175d9",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-01-31T17:20:01Z",
      "side": 1,
      "message": "But if it changes once, will we get a different response back later? Like, isn\u0027t it a list, so we\u0027d get the same list back? The first time we have to look it up because it wasn\u0027t there at all, but once it\u0027s there, it just gets extended doesn\u0027t it?",
      "parentUuid": "1ca29d42_83ea942b",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e1bd032_b71912fa",
        "filename": "src/tint/lang/wgsl/ast/clone_context.h",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "I had to actually check whether there was any usage of `Remove`, and I think you\u0027re right. I had to run the tests to make sure. I\u0027ll follow up with a test to see if we can simplify all this now that maps are fast.",
      "parentUuid": "9dfdba23_1d2175d9",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34da8c0b_4afef77b",
        "filename": "src/tint/lang/wgsl/inspector/inspector.cc",
        "patchSetId": 6
      },
      "lineNbr": 1037,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "The previous version only did an `Add` if `param` wasn\u0027t in the map already, it\u0027s hard to tell from reading this if it will do that or overwrite.",
      "range": {
        "startLine": 1037,
        "startChar": 38,
        "endLine": 1037,
        "endChar": 41
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd49b58_f3cdd957",
        "filename": "src/tint/lang/wgsl/inspector/inspector.cc",
        "patchSetId": 6
      },
      "lineNbr": 1037,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Good spot. Will change this to be behaviourally identical to before.",
      "parentUuid": "34da8c0b_4afef77b",
      "range": {
        "startLine": 1037,
        "startChar": 38,
        "endLine": 1037,
        "endChar": 41
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df254e3d_5cb3ef25",
        "filename": "src/tint/lang/wgsl/inspector/inspector.cc",
        "patchSetId": 6
      },
      "lineNbr": 1037,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:18:58Z",
      "side": 1,
      "message": "No, this is functionally identical to before. Just more efficient now, and less verbose.",
      "parentUuid": "ccd49b58_f3cdd957",
      "range": {
        "startLine": 1037,
        "startChar": 38,
        "endLine": 1037,
        "endChar": 41
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "867f82d1_283fd4a7",
        "filename": "src/tint/lang/wgsl/inspector/inspector.cc",
        "patchSetId": 6
      },
      "lineNbr": 1037,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-01-31T17:21:47Z",
      "side": 1,
      "message": "Is that because add only adds if it doesn\u0027t exist so it ends up being a no-op?",
      "parentUuid": "df254e3d_5cb3ef25",
      "range": {
        "startLine": 1037,
        "startChar": 38,
        "endLine": 1037,
        "endChar": 41
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efedbf85_a22ef9d7",
        "filename": "src/tint/lang/wgsl/inspector/inspector.cc",
        "patchSetId": 6
      },
      "lineNbr": 1037,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "Yes. That\u0027s the difference between `Add` and `Replace`.",
      "parentUuid": "867f82d1_283fd4a7",
      "range": {
        "startLine": 1037,
        "startChar": 38,
        "endLine": 1037,
        "endChar": 41
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "993c84ff_b4d50903",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "Why use this over just `entry.key` since you have the `entry` in order to acll this anyway and it\u0027s astruct with a public member.",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2fea849_3620f524",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Because the `Hashmap::Entry` is a `HashmapEntry` which holds the key, and `Hashset::Entry` *is* the key. So `entry.key` does not work for a `Hashset`.",
      "parentUuid": "993c84ff_b4d50903",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dc59d40_97e948ae",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "What happens if the owning entry is replaced?",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "067af510_1d02afa6",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Replaced is fine. The same memory location is reused.",
      "parentUuid": "5dc59d40_97e948ae",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "038c1e65_45517038",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "```suggestion\n        auto idx \u003d this-\u003eEditAt(key);\n        if (idx.entry) {\n            return {idx.entry-\u003evalue, /* added */ false};\n        }\n        idx.Insert(std::forward\u003cK\u003e(key), std::forward\u003cV\u003e(value));\n        return {idx.entry-\u003evalue, /* added */ true};\n```",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 164,
        "endChar": 9
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2f7303_ad3162cc",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "I prefer the CL\u0027s version. It\u0027s clearer to me that there\u0027s two paths.",
      "parentUuid": "038c1e65_45517038",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 164,
        "endChar": 9
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5be3411_8738ed66",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T17:14:33Z",
      "side": 1,
      "message": "Ok, though I have the opposite in that it\u0027s a lot less clear what\u0027s happening.",
      "parentUuid": "4d2f7303_ad3162cc",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 164,
        "endChar": 9
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14a6b536_902b4247",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-01-31T17:38:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b5be3411_8738ed66",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 164,
        "endChar": 9
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49920196_b16512ad",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "ditto `idx` usage",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2d70a2e_49e7cd05",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Ditto response",
      "parentUuid": "49920196_b16512ad",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a19db979_9a3b8c51",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-01-31T17:38:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a2d70a2e_49e7cd05",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1195095_d799fffc",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "Find seems like the more common name?",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "412a5a11_dba70c22",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Citation needed.\n* Rust: [`get()`](https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get)\n* Java: [`get()`](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html#get-java.lang.Object-)\n* JavaScript: [`get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get)v\n* C#: `operator[]` and [`TryGetValue()`](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue?view\u003dnet-8.0)\n\nAnd so on.",
      "parentUuid": "a1195095_d799fffc",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8e98111_a4aa1f01",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-01-31T17:38:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "412a5a11_dba70c22",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd88530c_60e819a1",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 209,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "```suggestion\n    const Value\u0026 GetOrDefault(K\u0026\u0026 key, const Value\u0026 not_found) const {\n```\n\nHaving this as just Get makes the callsites confusing as to what that second parameter is.",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5545a69a_99a38541",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 209,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "`GetOr` as a compromise? That matche\u0027s `std::optional::value_or`",
      "parentUuid": "cd88530c_60e819a1",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ffd24db_18d21509",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 209,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T17:14:33Z",
      "side": 1,
      "message": "That\u0027s fine, just make it clear it isn\u0027t `Get`",
      "parentUuid": "5545a69a_99a38541",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc60e534_3e159eec",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 209,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ffd24db_18d21509",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab957b0_0f0279b0",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "This one seemed a lot clearer as `GetOrCreate` as that was what we used it for. Either thing thing was returned or the lambda executed and created it.",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4b049ff_4b636341",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "`Create` does not suggest that it also adds it to the map. `Add` does.",
      "parentUuid": "eab957b0_0f0279b0",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d604abef_abb9f36e",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T17:14:33Z",
      "side": 1,
      "message": "Seemed pretty obvious that it added to the map? Add makes me think it should exist already not be generated on the fly.",
      "parentUuid": "f4b049ff_4b636341",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f47250f0_2173e085",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "I feel the opposite. `Create` could mean call the create function and pass through the value. `Add` is explicit that it\u0027ll add something if the `Get` failed. I fail to see when passing a create function / lambda, how the user would not expect it to be called on `Add`.",
      "parentUuid": "d604abef_abb9f36e",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1781f7d_f42e77b9",
        "filename": "src/tint/utils/containers/hashmap.h",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2024-01-31T17:38:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f47250f0_2173e085",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5185114_ec9f6dbc",
        "filename": "src/tint/utils/containers/hashmap_base.h",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "```suggestion\n/// @param ENTRY is the single record in the map. The entry type must alias \u0027Key\u0027 to the HashmapKey\n```",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "575b5437_2e79eb2a",
        "filename": "src/tint/utils/containers/hashmap_base.h",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "No. `tparam` is [the doxygen for a template parameter](https://www.doxygen.nl/manual/commands.html#cmdtparam).",
      "parentUuid": "c5185114_ec9f6dbc",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68b302de_a89e2c97",
        "filename": "src/tint/utils/containers/hashset.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "```suggestion\n        auto idx \u003d this-\u003eEditAt(value);\n        if (idx.entry) {\n            return false;\n        }\n        idx.Insert(std::forward\u003cV\u003e(value));\n        return true;\n```",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 21
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c28b2867_7ee014ec",
        "filename": "src/tint/utils/containers/hashset.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68b302de_a89e2c97",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 21
      },
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b1296be_62f98a68",
        "filename": "src/tint/utils/symbol/symbol_table.h",
        "patchSetId": 6
      },
      "lineNbr": 111,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-01-31T16:12:50Z",
      "side": 1,
      "message": "Why does this no longer go to a Symbol?",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e7f5d8d_fc5d49ce",
        "filename": "src/tint/utils/symbol/symbol_table.h",
        "patchSetId": 6
      },
      "lineNbr": 111,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T16:31:48Z",
      "side": 1,
      "message": "Because it\u0027s inefficient. You\u0027re duplicating the `string_view` in both the key and value. The `generation_id` is already stored in the `SymbolTable`. The only thing we actually need to lookup is the symbol id.",
      "parentUuid": "1b1296be_62f98a68",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3b52c54_f39204fb",
        "filename": "src/tint/utils/symbol/symbol_table.h",
        "patchSetId": 6
      },
      "lineNbr": 111,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-31T17:34:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2e7f5d8d_fc5d49ce",
      "revId": "17e0466cfd0e83321a1f609f2d35183530ac1d5b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}