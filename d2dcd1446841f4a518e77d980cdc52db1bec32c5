{
  "comments": [
    {
      "key": {
        "uuid": "98a725b9_82ce7b4b",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-08T23:08:43Z",
      "side": 1,
      "message": "fyi: This and the other enums have been renamed to Copy(Dst/Src)",
      "range": {
        "startLine": 429,
        "startChar": 37,
        "endLine": 429,
        "endChar": 48
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1ca63dc_36125cbc",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-07-09T20:23:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98a725b9_82ce7b4b",
      "range": {
        "startLine": 429,
        "startChar": 37,
        "endLine": 429,
        "endChar": 48
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2030463_3e845189",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-08T23:08:43Z",
      "side": 1,
      "message": "This copies to part of the texture. I think that will cause the lazy clear to occur.\n\nIn this test, don\u0027t we want to check if the lazy clear is happening because the texture is used as Sampled? I think this is only hitting the path where it\u0027s cleared on partial-copy.\n\nWe could instead leave the texture completely uninitialized and check that sampling from it returns all 0. What do you think?",
      "range": {
        "startLine": 456,
        "startChar": 8,
        "endLine": 456,
        "endChar": 82
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4da8193b_aab64afa",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-07-09T20:23:59Z",
      "side": 1,
      "message": "Good point. I was thinking that leaving it uninitialized could mean that the render target texture itself was cleared rather than checking that it was the sampled target was cleared. this test is supposed to see that the sampled texture is cleared in renderpass. Begin render pass should call ensure on all its attachments before beginning the render pass, so it should clear before the copybuffertotexture cmd. Leaving it unfilled could work as well, but doesn\u0027t really show that sampling worked? Let me know if there\u0027s any other ideas.",
      "parentUuid": "c2030463_3e845189",
      "range": {
        "startLine": 456,
        "startChar": 8,
        "endLine": 456,
        "endChar": 82
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2887a11_ced7ea63",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T21:34:24Z",
      "side": 1,
      "message": "How about we have two pipelines in the render pass.\n\n1st pipeline:\n - draw a fullscreen quad to clear the render target to 1.\n2nd pipeline:\n - Sample the uninitialized texture. The render target should be 0 now because the texture was lazy cleared.\n\nWhat do you think?",
      "parentUuid": "4da8193b_aab64afa",
      "range": {
        "startLine": 456,
        "startChar": 8,
        "endLine": 456,
        "endChar": 82
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cda4374_4658b8ac",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-10T09:03:31Z",
      "side": 1,
      "message": "Or use a single pipeline and loadOp clear to non-zero in the render pass.",
      "parentUuid": "b2887a11_ced7ea63",
      "range": {
        "startLine": 456,
        "startChar": 8,
        "endLine": 456,
        "endChar": 82
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f2175f_ec9b00d5",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-08T23:08:43Z",
      "side": 1,
      "message": "nit: Could use texelFetch(...) instead of texture(...).\nAlso, I may have missed something, but why are we dividing by 128?",
      "range": {
        "startLine": 483,
        "startChar": 24,
        "endLine": 483,
        "endChar": 84
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d05a50cf_c14a9605",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-09T12:31:03Z",
      "side": 1,
      "message": "gl_FragCoord are integers in pixels, while texture() uses floating point numbers in [0, 1]. Using texelFetch would remove the need for this. Alternatively, a varying can be written on the vertex shader that corresponds to the texture coordinate.",
      "parentUuid": "22f2175f_ec9b00d5",
      "range": {
        "startLine": 483,
        "startChar": 24,
        "endLine": 483,
        "endChar": 84
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60312a69_38918d4d",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-07-09T20:23:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d05a50cf_c14a9605",
      "range": {
        "startLine": 483,
        "startChar": 24,
        "endLine": 483,
        "endChar": 84
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c50cc908_ea2d6b85",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-08T23:08:43Z",
      "side": 1,
      "message": "Is this shader supposed to be empty?",
      "range": {
        "startLine": 530,
        "startChar": 52,
        "endLine": 530,
        "endChar": 67
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4148fca_86cd8655",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-08T23:08:43Z",
      "side": 1,
      "message": "Here, we can\u0027t distinguish if the texture was lazy-cleared before the ComputePass or if it was lazy-cleared because of this copy. Can we use the compute shader to sample the texture to a different output texture and check the results of that texture?",
      "range": {
        "startLine": 545,
        "startChar": 4,
        "endLine": 545,
        "endChar": 29
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "291f35be_11b7d361",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-07-09T20:23:59Z",
      "side": 1,
      "message": "I will look into doing it this way, I don\u0027t think I\u0027m not as familiar with compute shaders",
      "parentUuid": "d4148fca_86cd8655",
      "range": {
        "startLine": 545,
        "startChar": 4,
        "endLine": 545,
        "endChar": 29
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d360333_1940dd25",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-09T21:34:24Z",
      "side": 1,
      "message": "I think you\u0027ll want to do pass.Dispatch(kSize, kSize, 1);\n\nThen in the shader, you\u0027ll have gl_GlobalInvocationID.x and gl_GlobalInvocationID.y which you can use to texelFetch the texture and write the results to a buffer of size 4 * kSize * kSize.",
      "parentUuid": "291f35be_11b7d361",
      "range": {
        "startLine": 545,
        "startChar": 4,
        "endLine": 545,
        "endChar": 29
      },
      "revId": "d2dcd1446841f4a518e77d980cdc52db1bec32c5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}