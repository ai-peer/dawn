{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2736a573_8b8d44e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-13T14:22:41Z",
      "side": 1,
      "message": "I think you can remove the `ApiObjectBase::APIRelease()` implementation (which contains a lock to work-around this racy issue in the past) to verify that this patch can work correctly with the existing multithreaded tests.",
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95641c92_4c07f8cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-13T20:07:32Z",
      "side": 1,
      "message": "Right! I removed the lock locally and the multithread tests seem to pass fine. I intend to remove it entirely in a follow up which will include benchmark tests so that I can measure the before/after effects more easily.",
      "parentUuid": "2736a573_8b8d44e0",
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "187ca9c1_f03b277b",
        "filename": "src/dawn/common/RefCounted.cpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-13T21:33:53Z",
      "side": 1,
      "message": "relaxed as well?",
      "range": {
        "startLine": 60,
        "startChar": 43,
        "endLine": 60,
        "endChar": 63
      },
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b607407c_09795c15",
        "filename": "src/dawn/common/RefCounted.cpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-14T00:27:42Z",
      "side": 1,
      "message": "Outdated and resolved.",
      "parentUuid": "187ca9c1_f03b277b",
      "range": {
        "startLine": 60,
        "startChar": 43,
        "endLine": 60,
        "endChar": 63
      },
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b38ed507_cdbf17e2",
        "filename": "src/dawn/common/RefCounted.cpp",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-13T14:22:41Z",
      "side": 1,
      "message": "shouldn\u0027t this be `if (current \u003c kRefCountIncrement)`? The initial ref count value could contain a payload value of 1 IIUC. Thus if the last decrement succeeds, the result ref count value could be 1.\n\nI\u0027m not sure what this payload is used for anyway.",
      "range": {
        "startLine": 63,
        "startChar": 12,
        "endLine": 63,
        "endChar": 25
      },
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a1da778_bd200a9b",
        "filename": "src/dawn/common/RefCounted.cpp",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-13T20:07:32Z",
      "side": 1,
      "message": "Ah! Good catch, changed it to check it with the extra payload bits masked out instead since I find that a bit easier to understand.",
      "parentUuid": "b38ed507_cdbf17e2",
      "range": {
        "startLine": 63,
        "startChar": 12,
        "endLine": 63,
        "endChar": 25
      },
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f6d6a00_b2f974d0",
        "filename": "src/dawn/common/RefCounted.cpp",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-13T14:22:41Z",
      "side": 1,
      "message": "I think it is safe to use `memory_order_relaxed` here.\n- If other thread\u0027s decrement happens before this increment, the increment should fail.\n- If other thread\u0027s decrement happens after this increment, the decrement shouldn\u0027t delete the object, because the ref count \u003e 0.\n\nFor reference, Boost library uses `relaxed` too. https://github.com/boostorg/smart_ptr/blob/develop/include/boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp#L62",
      "range": {
        "startLine": 67,
        "startChar": 55,
        "endLine": 67,
        "endChar": 75
      },
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73ac5bdd_0b728bb1",
        "filename": "src/dawn/common/RefCounted.cpp",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-13T20:07:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f6d6a00_b2f974d0",
      "range": {
        "startLine": 67,
        "startChar": 55,
        "endLine": 67,
        "endChar": 75
      },
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "408533f6_c4643ef2",
        "filename": "src/dawn/common/RefCounted.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-14T13:38:19Z",
      "side": 1,
      "message": "What tells use that the",
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f94a52f_78a12a43",
        "filename": "src/dawn/common/RefCounted.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-16T00:02:41Z",
      "side": 1,
      "message": "Unfinished comment?",
      "parentUuid": "408533f6_c4643ef2",
      "revId": "bad8d6282731a59c3cdfe699892c7af92e9a7f84",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}