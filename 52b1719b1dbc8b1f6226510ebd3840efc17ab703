{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "08e96d0c_1b9428be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-14T19:41:27Z",
      "side": 1,
      "message": "Please take a look.",
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fff4eb2e_acabe72d",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "mmm..... I wonder what we fill for all these values. \n\nyou have Cap::None, so it\u0027s not renderable. Don\u0027t need to specify the RenderTarget values.\n\n\nI would expect SampleTypeBit probably to be Float/UnfilterableFloat. Which one depends on the properties from the AHardwareBuffer though.\n\n\nI\u0027m wondering if it would be better to not put External in the format table at all.\nInstead.. we do something like store a `Format` in the SharedTextureMemoryContents (texture refs STMContents), and then have TextureBase::mFormat refer to that format.\n\nthis might make more sense because I imagine different external formats will have different capabilities. Doing this though, you might need to update a bunch of replace to take a pair of (wgpu::TextureFormat, dawn::native::Format) - that way you have the format information available if it was external. You\u0027ll no longer be able to look up the format information from the External enum",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d8b1ee_bfc96cbd",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "The not being able to lookup format information sounds tricky. I know that we do want to expose the format to Chromium so that it can be set and passed down to Skia. Would that be impacted? Not sure if Skia also needs to know. We also probably want to use it in Chromium for format conversions etc.\n\nDid you mean SharedResourceMemoryContents? I\u0027m also unsure how much work replace would involve. I\u0027d personally prefer format here as I\u0027m more familiarized with the flow with such formats than them being internal, and the nuances of how they can/cannot be used so would need more understanding.\n\nMaybe renaming it to `ExternalAndroid` or `ExternalAndroidVk` would make it more clear that this is only for Android?",
      "parentUuid": "fff4eb2e_acabe72d",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3fed67c_ec150983",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T19:38:38Z",
      "side": 1,
      "message": "at a high level, the wgpu::TextureFormat is an enum from which we get the `Format` struct (right now). And the Format struct tells you what the format can do based on device-level capabilities.\n\nThe problem is that you can\u0027t map wgpu::TextureFormat::External to a Format struct in this table because the capabilities depend on what actually that external format is. There could be multiple formats which are wgpu::TextureFormat::External with different capabilities.\n\nIt feels more fitting to be getting the `Format` struct from the SharedTextureMemory that knows the capabilities.\n\nSo, I\u0027m not saying we *can\u0027t* lookup the `Format` - more that we have to get it from the SharedTextureMemory, instead of getting it from the format table.\n\n\u003e SharedResourceMemoryContents\n\nyes - was renamed, sorry",
      "parentUuid": "12d8b1ee_bfc96cbd",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcafeba2_1f93035a",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-17T11:23:45Z",
      "side": 1,
      "message": "FWIW: AFAIK the actual Vulkan external format is a magical opaque int that we can\u0027t know any information about other than what we get from the AHB format props, which we\u0027ll supply the needed info about via YCbCrVkDescriptor. I think that the only thing that we need the WGPU format for in this case is just to specify that we are in fact using YCbCr sampling, which we do by the WGPU format being EXTERNAL. So AFAIK the only thing that we need (and indeed really can do) with the WGPU format in this case is to be able to have this bit via which we\u0027re able to specify \"we\u0027re using YCbCr sampling.\"\n\nI\u0027m not familiar with all the details of this discussion, so just presenting this info in case it\u0027s useful - please feel free to disregard if not!",
      "parentUuid": "a3fed67c_ec150983",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54adb7a4_f9e9dd57",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-17T17:10:41Z",
      "side": 1,
      "message": "to try to clarify some more:\n\nby putting wgpu::TextureFormat::External in the format table, we\u0027re going to get the entry produced by:\n\n```\nAddConditionalColorFormat(wgpu::TextureFormat::External, externalUnsupportedReason, Cap::None, ByteSize(4), SampleTypeBit::Uint, ComponentCount(4), RenderTargetPixelByteCost(4), RenderTargetComponentAlignment(1));\n```\n\nwhenever someone does `texture.GetFormat()` on the texture - which happens in very many places in Dawn.\nThe entry written here in the format table can\u0027t possibly be correct because we have no idea what the actual capabilities are. As Colin says, we need to get the capabilities from the AHB format props.\nWe need to have GetFormat() return correct things, or Dawn may perform or allow invalid things. For example, the `SampleTypeBit` needs to be correct based on whether the AHB allows Linear sampling, or it requires Nearest.",
      "parentUuid": "fcafeba2_1f93035a",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7e5f2b9_d033d013",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-21T20:59:04Z",
      "side": 1,
      "message": "Hmm, so I talked to @vasilyt@chromium.org and realized we would also need External for creating TextureViews from the Texture. Skia currently has the skgpu::graphite::DawnTextureInfo (maybe similar the TextureDescriptor) and not have access to SharedTextureMemory. The question then arises what format would Skia have? Currently for Ganesh we do default to RGBA which isn\u0027t ideal and could do that here or use wgpu::Format::Undefined which is also not ideal.\n\nThe question of capabilities is a good question that I\u0027m not sure about.\n\nDefer to @enga@chromium.org @vasilyt@chromium.org @blundell@chromium.org for further thoughts on this.",
      "parentUuid": "54adb7a4_f9e9dd57",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d206ee6e_b273ba2b",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-22T00:16:33Z",
      "side": 1,
      "message": "IIRC, I thought skia was going to hold a struct which holds the vulkan enums for ycbcr as well as the external format. So you should be able to pass that and TextureFormat::External into texture view creation.",
      "parentUuid": "e7e5f2b9_d033d013",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "502cf338_2b57c6d1",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-22T11:09:12Z",
      "side": 1,
      "message": "Austin is correct. I believe that on the Skia side we should have all the information that we need to pass in, as Austin mentions.",
      "parentUuid": "d206ee6e_b273ba2b",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef6d3483_ca153c90",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 13
      },
      "lineNbr": 465,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-28T21:19:21Z",
      "side": 1,
      "message": "Thanks for discussion here and on meet the other day!! Updated to use SampleTypeBit::External and removed RenderTarget values.",
      "parentUuid": "502cf338_2b57c6d1",
      "range": {
        "startLine": 465,
        "startChar": 99,
        "endLine": 465,
        "endChar": 215
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee22bf23_f5d2dbd3",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 101,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "should we skip this part of the format is external? we need to rely on the backend populating the correct usages",
      "range": {
        "startLine": 90,
        "startChar": 2,
        "endLine": 101,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6515bd9_a649028a",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 101,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "We could skip it. Updated.",
      "parentUuid": "ee22bf23_f5d2dbd3",
      "range": {
        "startLine": 90,
        "startChar": 2,
        "endLine": 101,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "957d2190_a46d5a3e",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "ok so this says, if you use External, then it just matches whatever the STM has. otherwise if you pass a format it needs to match exactly\n\nwhy not always have them always match exactly?",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb466f39_5a39eb13",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "Ah, I added this for making the end2end tests work as the vkFormat from video in Chrome would be Undefined and we should set it properly to External.\n\nBut for test AHB returns the RGBA format [here](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/vulkan/SharedTextureMemoryVk.cpp;drc\u003d1762328886136518b56961f8388d90472dc2c973;l\u003d530) which got set and passed, so I wanted to skip this validation. Maybe I should `\u0026\u0026 IsUsedForTesting()` or something and only skip it then. Is there way to check for that?",
      "parentUuid": "957d2190_a46d5a3e",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66eb68f5_bf4a0102",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T19:38:38Z",
      "side": 1,
      "message": "hm I think I don\u0027t understand. I think that if:\n\n mProperties.format \u003d\u003d rgba8unorm, then desc.format must also be rgba8unorm\n\nand if:\n\n mProperties.format \u003d\u003d external, then desc.format must also be external\n \n \nright now, it looks like you\u0027re allowing for:\n\n mProperties.format \u003d\u003d rgba8unorm \u0026\u0026 desc.format \u003d\u003d external",
      "parentUuid": "bb466f39_5a39eb13",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "196b541d_dbd41de6",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-17T11:23:45Z",
      "side": 1,
      "message": "So from Vasiliy my understanding is that it\u0027s *legal* to use YCbCr sampling for any AHB - it\u0027s just that if the Vk format of the AHB is UNDEFINED it\u0027s *necessary* to use YCbCr sampling. So it\u0027s totally legal for the client to do YCbCr sampling on an RGBA AHB. I think that this is the case that Saif is setting up for the test, and it\u0027s not actually a test-only situation (although AFAIK Chromium won\u0027t actually run into this, because we only do YCbCr sampling for video decoding where it\u0027s actually needed and thus the Vk format of those AHBs should indeed be UNDEFINED).",
      "parentUuid": "66eb68f5_bf4a0102",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd7eaf3_d6846ac1",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-17T17:10:41Z",
      "side": 1,
      "message": "right, YCbCr sampling on an RGBA AHB should be legal. But if the STM is RGBA, then I think the texture created it must also be RGBA, not External. Otherwise, I think there\u0027s going to be a mismatch between the capabilities that Dawn thinks RGBA has, and what External has.",
      "parentUuid": "196b541d_dbd41de6",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93c5a7ab_7df93ee6",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-21T11:07:06Z",
      "side": 1,
      "message": "Would that then mean that we\u0027d allow clients to do YCbCr sampling on a Dawn RGBA texture? I had been under the naive assumption that YCbCr sampling would be restricted to Dawn textures of type External, in which case it would make sense to me that the client would request creation of a texture of type External if they wanted to use that texture with external sampling (regardless of what the underlying type of the AHB is). This is maybe analogous to what we enforce in Chromium here [1].\n\nI definitely defer to you here, just curious.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:gpu/ipc/common/vulkan_ycbcr_info.cc;l\u003d27-28",
      "parentUuid": "0fd7eaf3_d6846ac1",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6d4039c_b66a097a",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-21T20:59:04Z",
      "side": 1,
      "message": "Looking at this bit more and chatting with Vasiliy, we can have YCbCr sampling done on AHB which either return VkFormat Undefined or valid VkFormat eg. RGBA (or any other VkFormat) with externalFormat.\n\nIn these cases, the `properties.format` at [2] could be a valid wgpu::TextureFormat (other than External) but we could be requesting external sampling? Maybe I should instead set the mProperties.format to External if descriptor format is External and remove the conditional validation. \n\nLooking at `mProperties.format` though there aren\u0027t that many usages of it that would affect behavious so setting it isn\u0027t strictly necessary I think, but could get confusing.",
      "parentUuid": "93c5a7ab_7df93ee6",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2827bc03_0b96daff",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-22T00:16:33Z",
      "side": 1,
      "message": "I\u0027m getting lost about what we\u0027re discussing.\nAll I would like is to validate that `mProperties.format \u003d\u003d descriptor-\u003eformat`.\n\nAnd yes, I believe that technically lets you use YCbCr for a normal RGBA AHB. This matches what Colin says above:\n\u003e my understanding is that it\u0027s legal to use YCbCr sampling for any AHB - it\u0027s just that if the Vk format of the AHB is UNDEFINED it\u0027s necessary to use YCbCr sampling. So it\u0027s totally legal for the client to do YCbCr sampling on an RGBA AHB. I think that this is the case that Saif is setting up for the test, and it\u0027s not actually a test-only situation\n\nbut then that\u0027s inconsistent with what Colin says more recently\n\u003e Would that then mean that we\u0027d allow clients to do YCbCr sampling on a Dawn RGBA texture? I had been under the naive assumption that YCbCr sampling would be restricted to Dawn textures of type External\n\nIMO we should expose what is legal according to Vulkan. Ycbcr can be used for an AHB if its RGB if you would like to. And if the format is External, then you _must_ use Ycbcr.",
      "parentUuid": "e6d4039c_b66a097a",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a11f8976_0d4f13be",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-22T11:09:12Z",
      "side": 1,
      "message": "That SGTM. This would just mean that in the test that Saif mentions the texture descriptor should have its format set to RGBA rather than External.\n\nIt would be valuable to be able to create AHBs that have only external formats so that we could test that code path. Saif, could you chat with Vasiliy to see if he knows whether that\u0027s possible to do? It seems to me that we might have such AHBs in Chromium for media integration tests.",
      "parentUuid": "2827bc03_0b96daff",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58bf5bd8_d1d70f2a",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 13
      },
      "lineNbr": 170,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-28T21:19:21Z",
      "side": 1,
      "message": "Thanks, removed the check as it should now always match.",
      "parentUuid": "a11f8976_0d4f13be",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c87669f_bdf2b4da",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 90,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "this would allow any viewFormat through - shouldn\u0027t it validate the view is also external?\n\n\noh, I see you have the check at [1]. I think it could be here instead",
      "range": {
        "startLine": 90,
        "startChar": 8,
        "endLine": 90,
        "endChar": 54
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4609d7c5_8cd11f63",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 90,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "Sounds good, updated.",
      "parentUuid": "0c87669f_bdf2b4da",
      "range": {
        "startLine": 90,
        "startChar": 8,
        "endLine": 90,
        "endChar": 54
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba990db9_bbbb50c3",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 647,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 645,
        "startChar": 0,
        "endLine": 647,
        "endChar": 44
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edbb22b2_36a2290d",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 647,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba990db9_bbbb50c3",
      "range": {
        "startLine": 645,
        "startChar": 0,
        "endLine": 647,
        "endChar": 44
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a7e5ea7_292e9dd7",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 693,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "default the format to external if the texture\u0027s format is external?",
      "range": {
        "startLine": 693,
        "startChar": 0,
        "endLine": 693,
        "endChar": 73
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc96ee2a_d3097b37",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 693,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "Ah, I didn\u0027t really get this. Should I just check for `|| desc.format \u003d\u003d TextureFormat::External`.. I think the aspects else block should automatically handle it and set it correctly right?",
      "parentUuid": "4a7e5ea7_292e9dd7",
      "range": {
        "startLine": 693,
        "startChar": 0,
        "endLine": 693,
        "endChar": 73
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fdb11bb_6db91dc4",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 693,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T19:38:38Z",
      "side": 1,
      "message": "oops yes - so remove the todo?",
      "parentUuid": "cc96ee2a_d3097b37",
      "range": {
        "startLine": 693,
        "startChar": 0,
        "endLine": 693,
        "endChar": 73
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e26f6c2_f9ee1eba",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 693,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-28T21:19:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fdb11bb_6db91dc4",
      "range": {
        "startLine": 693,
        "startChar": 0,
        "endLine": 693,
        "endChar": 73
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7bf6a90_134ee968",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 505,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "Yes, I think so - but then you should also remove usages if they\u0027re not available by looking at VkAndroidHardwareBufferFormatPropertiesANDROID::formatFeatures (this is what Chrome does too)\n\nannoyingly, according to the docs, you\u0027re **not** supposed to look at VkAndroidHardwareBufferFormatPropertiesANDROID::formatFeatures if the format is not external.",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 505,
        "endChar": 72
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a88b0c_d90b7e14",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 505,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "Interesting, I\u0027ll update to follow this.",
      "parentUuid": "c7bf6a90_134ee968",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 505,
        "endChar": 72
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9179b072_efd9fcc6",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 505,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-28T21:19:21Z",
      "side": 1,
      "message": "Updated to set the usage to TextureBinding if the corresponding usage is supported by AHB.",
      "parentUuid": "11a88b0c_d90b7e14",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 505,
        "endChar": 72
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1b9afb0_332857f5",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1787,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-16T17:48:57Z",
      "side": 1,
      "message": "I expected this to check that the format is external, only if YCbCrVkDescriptor::externalFormat is non-zero",
      "range": {
        "startLine": 1782,
        "startChar": 0,
        "endLine": 1787,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd16a835_acced20d",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1787,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-16T19:24:38Z",
      "side": 1,
      "message": "Ah yes, this should be checked only when it is non-zero. I\u0027ll update this.",
      "parentUuid": "c1b9afb0_332857f5",
      "range": {
        "startLine": 1782,
        "startChar": 0,
        "endLine": 1787,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4341a358_396472e7",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1787,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-28T21:19:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd16a835_acced20d",
      "range": {
        "startLine": 1782,
        "startChar": 0,
        "endLine": 1787,
        "endChar": 0
      },
      "revId": "52b1719b1dbc8b1f6226510ebd3840efc17ab703",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}