{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d9b0490c_f1f28f11",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 728,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-22T01:35:57Z",
      "side": 1,
      "message": "Did we decide to rename this? I thought we were usually using the full name (so WGPUBufferMapAsyncStatus even though that already exists)\n\nIf you unrename this (so there\u0027s only one status enum, and the new status are mixed with the old ones) I think it may also help with fixing the unmap issue [1]. For the new entry point you can just squash all the extra error codes down into \"OperationError\"/\"AbortError\" as appropriate.",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b127223a_63d11ce2",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 5
      },
      "lineNbr": 728,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-31T01:08:42Z",
      "side": 1,
      "message": "Resolved in discussion in header group meeting.",
      "parentUuid": "d9b0490c_f1f28f11",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1acc7fd4_0e0cb494",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 786,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-22T00:54:45Z",
      "side": 1,
      "message": "aside: should we switch it around so it is possible...?",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7b3df8f_b7ab1d64",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 786,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-31T01:08:42Z",
      "side": 1,
      "message": "This is kind of hard since both size and offset could technically be default-able... So ordering is pretty annoying in this case... Something like kwargs would be nice for this but either way will defer to further changes later on after some more discussion.",
      "parentUuid": "1acc7fd4_0e0cb494",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f2ff6b4_f6bef070",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 786,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-31T05:37:03Z",
      "side": 1,
      "message": "Offset just defaults to 0 so there\u0027s no need for a way to call with a size and no offset. In JS (mode, undefined, size) is the same as (mode, 0, size) which is shorter and clearer.\n\nActually, only C++ (not C) cares about optionals being at the end. Instead of switching it around to define defaults for args, one option would be to just use overloads:\n(mode, offset, size, callbackinfo)\n(mode, offset, callbackinfo)\n(mode, callbackinfo)",
      "parentUuid": "f7b3df8f_b7ab1d64",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ce2420b_a1e8af0c",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 812,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-22T00:54:45Z",
      "side": 1,
      "message": "Can this be:\n\n```\n        MaybeError error \u003d [\u0026]() {\n            DAWN_INVALID_IF(mState \u003d\u003d BufferState::PendingMap,\n                \"%s already has an outstanding map pending.\", this);\n            WGPUBufferMapAsyncStatus status;\n            DAWN_TRY(ValidateMapAsync(mode, offset, size, \u0026status));\n            DAWN_TRY(MapAsyncImpl(mode, offset, size));\n            return {};\n        }();\n```",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60cfa557_e8ddcb73",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 812,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-31T01:08:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ce2420b_a1e8af0c",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead964c2_b03777b3",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-22T01:35:57Z",
      "side": 1,
      "message": "I think it would be clearer for this state should change immediately in Unmap(), rather than buried inside ReadyHook. (This happens inside the call to Unmap() anyway, right, so it\u0027s basically the same?)\n\nThat said: [1] how does this case get triggered, anyway? Seems like Unmap() only handles the old mapping type. [2]",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06a02631_18475816",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-31T01:08:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ead964c2_b03777b3",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ff3f89d_8f244508",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 342,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-22T01:35:57Z",
      "side": 1,
      "message": "It should be AbortError if the device was destroyed (which happens on the client), but OperationError if the device was lost (which happens on the server and propagates to the client). I\u0027m not sure if this code only happens in the first case, or in both.",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38e81b8b_16eaa1d0",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 342,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-31T01:08:42Z",
      "side": 1,
      "message": "Hmm, I changed this so that we could do either, but I think right now, in native, device lost is also an aborted, so I want to keep the wire consistent w.r.t that for now.",
      "parentUuid": "6ff3f89d_8f244508",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad82955e_d991e330",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 342,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-31T05:37:03Z",
      "side": 1,
      "message": "Hm, OK. I was going to ask if we could fix both, but let\u0027s forget about it for the moment.\n\nThis prompted me to check and it turns out we do it wrong in Blink too:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/gpu_buffer.cc;l\u003d385-387;drc\u003d8b6aaad8027390ce6b32d82d57328e93f34bb8e5\nWhich makes sense because it\u0027s untested because we can\u0027t test it.\n\nWe should really do https://github.com/gpuweb/gpuweb/issues/4177, then we can test it.\n\nBut I am wondering a little bit if our current implementation makes more sense than the spec. It appears this is the only place in the whole spec where we use OperationError to surface anything other than a programming error.\n\nI\u0027ll take a note of this and try to get back to it.",
      "parentUuid": "38e81b8b_16eaa1d0",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a559088e_fb9f3e0c",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 691,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-22T01:35:57Z",
      "side": 1,
      "message": "[2]",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79ed01f3_485fd10f",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 691,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-05-31T01:08:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a559088e_fb9f3e0c",
      "revId": "8dd541eca5213b2b2ed5a4fa4b4da9c7d5649605",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}