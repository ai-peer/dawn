{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "57610c97_ba9a07bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-06-23T22:08:02Z",
      "side": 1,
      "message": "I haven\u0027t reviewed in detail.\n\nBut I\u0027m quite impressed this could be done with such ease.  I was dreading doing this all in the SPIR-V domain, and kept on putting it off.  This is really nice work!",
      "revId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fc9d54b_0a922cd4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-06-23T22:13:02Z",
      "side": 1,
      "message": "FYI only",
      "revId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf0402c8_55daa3f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-06-24T20:47:05Z",
      "side": 1,
      "message": "Credit where credit is due: Ben did the initial work for this, including the clever struct-forking and expression unfolding in the transform.",
      "parentUuid": "57610c97_ba9a07bc",
      "revId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5562acd_d33d4819",
        "filename": "src/tint/reader/spirv/function.cc",
        "patchSetId": 11
      },
      "lineNbr": 5510,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-06-23T22:13:02Z",
      "side": 1,
      "message": "FYI, there is a utility Function::ToI32 that you could use here, e.g.\n\n      if (result_type-\u003eIs\u003cI32\u003e()) { return ToI32(v); }\n      \nIt only adds the i32(.) constructor if the value is not already i32.\n      \nAnd a ToU32 could also be created that would be analogous.\nHeh.  I guess they could be abstracted to To\u003cTYPE\u003e(.).  :-)",
      "revId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccc1177a_cbbcf88f",
        "filename": "src/tint/reader/spirv/function.cc",
        "patchSetId": 11
      },
      "lineNbr": 5510,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-06-24T20:47:05Z",
      "side": 1,
      "message": "Thanks, yeah, I\u0027ll try to do that in a future CL.",
      "parentUuid": "e5562acd_d33d4819",
      "revId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "604bc09747a0d43dd4912c6bfcd5fccd6bdf0230",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}