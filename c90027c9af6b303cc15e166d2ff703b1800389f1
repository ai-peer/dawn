{
  "comments": [
    {
      "key": {
        "uuid": "e3059ac1_842f132d",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-01T00:00:15Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 158,
        "startChar": 20,
        "endLine": 158,
        "endChar": 29
      },
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1160323f_5294888b",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-08T01:14:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3059ac1_842f132d",
      "range": {
        "startLine": 158,
        "startChar": 20,
        "endLine": 158,
        "endChar": 29
      },
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "067c20f9_35bf414f",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-01T10:03:14Z",
      "side": 1,
      "message": "This comment feels more like a commit message but not something that stays in the code.\n\nMaybe \"Differentiate between readonly storage bindings and writable ones based on the NonWritable decoration.\"",
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5193a6d1_062f8890",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-08T01:14:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "067c20f9_35bf414f",
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17e7e56f_4030c8bd",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-01T00:00:15Z",
      "side": 1,
      "message": "nit: This reads |bindingType| and [1] reads |info.type|. They should both read the same thing. I think it would be most clear as a switch statement\n\nswitch (bindingType) {\n  case SampledTexture:\n    // stuff;\n    break;\n  case StorageBuffer:\n    // stuff\n    break;\n  case Others:\n    info.type \u003d bindingType;\n    break;\n}",
      "range": {
        "startLine": 166,
        "startChar": 20,
        "endLine": 166,
        "endChar": 31
      },
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1824eb29_ce6a42f6",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-08T01:14:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17e7e56f_4030c8bd",
      "range": {
        "startLine": 166,
        "startChar": 20,
        "endLine": 166,
        "endChar": 31
      },
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abb0bf5e_2436f06b",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 816,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-01T10:03:14Z",
      "side": 1,
      "message": "note: This will need to be updated to be uint32_t after Austin\u0027s CL.",
      "range": {
        "startLine": 816,
        "startChar": 15,
        "endLine": 816,
        "endChar": 23
      },
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3ed2512_149cac00",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 816,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-08T01:14:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "abb0bf5e_2436f06b",
      "range": {
        "startLine": 816,
        "startChar": 15,
        "endLine": 816,
        "endChar": 23
      },
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "148fc88b_e00e24f4",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-01T10:03:14Z",
      "side": 1,
      "message": "nit: The number has to be exactly 3, so we should test all of 2, 3, and 4. You could use a single std::array for that since it is the count that\u0027s validated.",
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1192db3f_184360ab",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-08T01:14:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "148fc88b_e00e24f4",
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d170336e_13761fc2",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 857,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-01T10:03:14Z",
      "side": 1,
      "message": "Maybe has a single one of the offsets unaligned and be the largest alignment that\u0027s not sufficient: 128",
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce01682d_ca7100eb",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 857,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-11-08T01:14:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d170336e_13761fc2",
      "revId": "c90027c9af6b303cc15e166d2ff703b1800389f1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}