{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d227d15_526320ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-25T01:20:01Z",
      "side": 1,
      "message": "Mostly done, with one missing bit (question) about validating aspect(all, depthOnly, stencilOnly) intersection.",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36e37953_6261ccc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "(didn\u0027t look at tests yet)",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "530423eb_13b0c85b",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "I\u0027m surprised that we need the type, aren\u0027t the two views enough to know what overlap? (both mip level ranges and array layer need to overlap actually to have a conflict).",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "924076d2_fe22c319",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done. (Relased to [1])",
      "parentUuid": "530423eb_13b0c85b",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "651eb066_50b800e2",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "old comments?",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "144485e3_3e1ca166",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "651eb066_50b800e2",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9883cb57_6d038fdf",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "No need for storage textures yet (we could assert that the aspect is always color for now, maybe we have storage depth texture in the future)",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08c6d452_ae64609e",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9883cb57_6d038fdf",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17855bf8_0416946d",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "note that these are just the base limits, and they\u0027ll be higher if requested to be higher. probably still OK to set the base amount to be stack allocated",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 72
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ed36071_13de14f1",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Bumped to 8, adding comment (by default)",
      "parentUuid": "17855bf8_0416946d",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 72
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ca43acb_46029c5e",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "nit: \"in default limits\"",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7001a4f_2266fa66",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ca43acb_46029c5e",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9093f85d_8a00e08b",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "nit: This is also going to check samplers etc. We could loop over just the storage textures most likely by precomputing their start/end range in the BGL (could be a TODO or follow-up).",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daf39d84_ab5e9bbb",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Added TODO",
      "parentUuid": "9093f85d_8a00e08b",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "438b3604_2cd51859",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "nit: Maybe we could switch on the access, so that we get reminded to add support for read/write in the future.",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc2919c2_521e518c",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "438b3604_2cd51859",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3be539c7_2cc9ea0c",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "Unrelated, I\u0027ve been wondering if by using intrusive data structure we could make this more efficient: BufferBase would be used for scratch storage space during the validation. Each validation try would have a Serial for that validation run, and the BufferBase would have a Serial+StackVec\u003crange, 1?\u003e that would contain the list of ranges for that validation run.\n\nBut it breaks in multithreaded environments.",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83b6fdb5_b7003f09",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-03-01T03:45:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3be539c7_2cc9ea0c",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "986c9cca_e3b0b0ed",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "nit: We could assert when adding the textures taht the aspect is color.",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cca7ef8_a403f365",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "986c9cca_e3b0b0ed",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88e4493a_cd5194fd",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "similar to BufferBinding, if we hoist these out into the flattened storageTextureViewsToCheck, will performance be better?\n\nat the very least, we can move mipLevel0, levelCount0, arrayLayer0, layerCount0 out to the outer loop",
      "range": {
        "startLine": 231,
        "startChar": 12,
        "endLine": 234,
        "endChar": 68
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb6d5f8b_6699554b",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Moved xxx0 to outer loop. The `GetBaseMipLevel` functions simply return some stored class variable so should be fine to be called here, just function calling cost (vs allocate array and struct cost).",
      "parentUuid": "88e4493a_cd5194fd",
      "range": {
        "startLine": 231,
        "startChar": 12,
        "endLine": 234,
        "endChar": 68
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10b1c3e5_d379466f",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "I think the condition should be RangesOverlap(mipLevels) \u0026\u0026 RangesOverlap(arrayLayers). Right now the code does an ||.\n\nAlso can we have a test for this?",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3983ba4a_5bbf2ef7",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done [1]",
      "parentUuid": "10b1c3e5_d379466f",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29d7ba6e_4495eca4",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "nit: factor this check and the other ones into a `RangesOverlap` helper",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 237,
        "endChar": 67
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7d1dcb8_307cb984",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29d7ba6e_4495eca4",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 237,
        "endChar": 67
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a21b9ca6_3d49b93a",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 245,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "in this loop, i ranges from 0 to storageTextureViewsToCheck-\u003esize();\n\nin the previous loop, i also ranges from 0 to storageBufferBindingsToCheck-\u003esize();\n\nif there are both storage buffer bindings AND storage texture view bindings, won\u0027t this index be wrong?\nFor example, if the first storage texture view binding has a conflict, then we will be accessing bindingIndices[0]. bindingIndices[0] will be a buffer binding",
      "range": {
        "startLine": 245,
        "startChar": 43,
        "endLine": 245,
        "endChar": 61
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe68fb6b_3026e518",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 245,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Thanks for catching this. Create two bindingIndices array for buffer bindings and texture bindings.",
      "parentUuid": "a21b9ca6_3d49b93a",
      "range": {
        "startLine": 245,
        "startChar": 43,
        "endLine": 245,
        "endChar": 61
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d301bed7_39dfb435",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "nit: We could add a constexpr bool that\u0027s kValidationMode that selects between the mode with validation only and the mode that actually returns the conflicts. It would reduce code duplication a little bit and make things easier to read.",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e33effb_0351c9e1",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d301bed7_39dfb435",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ace8bfb8_1f38fc65",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 625,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "existing nit: we can put DAWN_UNLIKELY on this",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 21
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90fa04ab_5f32d3fd",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 625,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:50:04Z",
      "side": 1,
      "message": "Isn\u0027t this cold code because it happens only if validation fails?\n\nSo existing nit: the other DAWN_UNLIKELY could be removed from this function?",
      "parentUuid": "ace8bfb8_1f38fc65",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 21
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bca54d30_e1c7975a",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 625,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ace8bfb8_1f38fc65",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 21
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2d3e193_83c9a1a6",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 625,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-28T15:11:56Z",
      "side": 1,
      "message": "I think we can remove the DAWN_UNLIKELY in the code that produces the error messages because it is cold code?",
      "parentUuid": "bca54d30_e1c7975a",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 21
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ba265fc_a441c341",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 625,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T23:32:07Z",
      "side": 1,
      "message": "Done. (seems `CheckMissingAspects` is cold code so removing DAWN_UNLIKELY inside)",
      "parentUuid": "d2d3e193_83c9a1a6",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 21
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c987f84a_7dc1d27a",
        "filename": "src/dawn/tests/unittests/validation/WritableTextureBindingAliasingValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 33,
        "endChar": 66
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b76d79f5_0c12391d",
        "filename": "src/dawn/tests/unittests/validation/WritableTextureBindingAliasingValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c987f84a_7dc1d27a",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 33,
        "endChar": 66
      },
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d3a4cf0_8332c0a8",
        "filename": "src/dawn/tests/unittests/validation/WritableTextureBindingAliasingValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-25T01:20:01Z",
      "side": 1,
      "message": "Question:\nIs it possible if we want to test validating two storage textures with different aspect, (all, depthOnly, stencilOnly)?\n\ntexture.createView() will require the texture view format be the resolved format based on texture format and aspect. Looking at https://gpuweb.github.io/gpuweb/#depth-formats\n\nIt can only be depthXXX and stencil8. Are these two formats somehow valid texel_format for `texture_storage_2d_array` in wgsl?",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5cb0732_c3f689a8",
        "filename": "src/dawn/tests/unittests/validation/WritableTextureBindingAliasingValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-25T02:39:00Z",
      "side": 1,
      "message": "depth stencil storage textures are invalid\n(only color is valid)\n\n\"\"\"\nIf descriptor.usage includes the STORAGE_BINDING bit:\n   descriptor.format must be listed in § 26.1.1 Plain color formats table with \n   STORAGE_BINDING capability.\n\"\"\"",
      "parentUuid": "0d3a4cf0_8332c0a8",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0fb4452_c83821f3",
        "filename": "src/dawn/tests/unittests/validation/WritableTextureBindingAliasingValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-02-28T00:46:27Z",
      "side": 1,
      "message": "Ack. Saved a lot of effort in tests",
      "parentUuid": "d5cb0732_c3f689a8",
      "revId": "a3e170d56b8c18395d7cab2e862f4d392faf44b0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}