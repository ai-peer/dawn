{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "47adf9ec_611f797e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-10-12T15:46:48Z",
      "side": 1,
      "message": "Went with adding a new dawn_native entry point. I tried just making a change to the dawn.json instead, but found that I needed to serialize the tick cmd on the wire client to keep some Chrome tests working. I couldn\u0027t figure out how to get the DeviceTickCmd struct to autogen, so just went with adding an entry point. Happy to revise it to the dawn.json way if preferred.\n\n",
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95acd143_32665668",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-12T16:10:13Z",
      "side": 1,
      "message": "Ah, so this is the hybrid solution where Device::Tick returns bool, but we don\u0027t actually wire it up to the webgpu.h API. Seems fine to me since we\u0027re going to need to replace/improve this in the future.",
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6334d51_38ddecb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-12T16:19:45Z",
      "side": 1,
      "message": "you would add \"DeviceTick\" to \"client_side_commands\" in dawn_wire.json, and then define Device::Tick in dawn_wire/client/Device.cpp and do something like:\n\n\nDeviceTickCmd cmd;\ncmd.device \u003d ToAPI(this);\nmClient-\u003eSerializeCommand(cmd);\n\nreturn true;\n\n\n\nI don\u0027t feel strongly about doing this though. Corentin might.",
      "parentUuid": "47adf9ec_611f797e",
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0ce0482_4fed77f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-12T16:21:31Z",
      "side": 1,
      "message": "I think it\u0027s fine, but it might require removing the extra Tick in the Server command handler to go the whole way maybe?",
      "parentUuid": "b6334d51_38ddecb6",
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b8d3ab9_f93c25ec",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 352,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-12T16:10:13Z",
      "side": 1,
      "message": "unit: name is a bit confusing with \"AssumeCommandsComplete\" - maybe call this \"IsDeviceIdle\" or something like that",
      "range": {
        "startLine": 352,
        "startChar": 21,
        "endLine": 352,
        "endChar": 44
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85c5f382_cd98cdc6",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 352,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-10-12T23:03:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b8d3ab9_f93c25ec",
      "range": {
        "startLine": 352,
        "startChar": 21,
        "endLine": 352,
        "endChar": 44
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21fe028a_5859e7ff",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-12T16:19:43Z",
      "side": 1,
      "message": "I think checking mCompletedSerial is enough since it is always bigger than mLastSubmittedSerial.\n\nHowever I think the + ExecutionSerial(1) should be added only of there are commands pending in the backends, otherwise we\u0027ll always tick since mCompletedSerial cannot become bigger than mLastSubmittedSerial.",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e40b780_acd92f41",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-12T16:20:09Z",
      "side": 1,
      "message": "\u003e I think checking mCompletedSerial is enough since it is always bigger than mLastSubmittedSerial.\n\nI meant always less than.",
      "parentUuid": "21fe028a_5859e7ff",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4780253_b508b06d",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-10-12T23:03:39Z",
      "side": 1,
      "message": "Done...I think.",
      "parentUuid": "0e40b780_acd92f41",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61b11ca9_7d55124f",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-13T08:55:00Z",
      "side": 1,
      "message": "Mmmh the problem here is that if we have things like WriteBuffer encoded, but not submitted yet, Tick will return false. This might be ok, but it might also cause ever increasing memory usage without flushing the writebuffers if the user doesn\u0027t do a queue.Submit.\n\nHere, or in a follow-up CL we should add ExecutionSerial(1) if the backend tells us it has pending operations waiting for submission.",
      "parentUuid": "c4780253_b508b06d",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d85fb87_d97013ce",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-13T14:58:06Z",
      "side": 1,
      "message": "What about dropping \"Callback\" from \"mFutureCallbackSerial\" and setting it as max(future, pending) in WriteBuffer and WriteTexture ?\n\nMaybe possible to do this at an even lower level - like creation of the pending command buffer.",
      "parentUuid": "61b11ca9_7d55124f",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f3a2c5b_98108fc7",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-10-13T21:43:16Z",
      "side": 1,
      "message": "Went with Austin\u0027s suggestion - but only on WriteTexture/Buffer.\n\n\u003e\u003e Maybe possible to do this at an even lower level - like creation of the pending command buffer.\n\nSorry, but not understanding this. How is creating a pending command buffer related to ticking the Queue::WriteResource commands? We want to handle Queue::WriteResource ASAP - so I think we wouldn\u0027t want to wait on any other event.",
      "parentUuid": "9d85fb87_d97013ce",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eec7fc2_599bcfe2",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-13T21:48:20Z",
      "side": 1,
      "message": "WriteTexture/Buffer work by enqueuing copy commands on the \"pending\" command buffer. This is the set of commands the prefix the next queue.Submit() or are submitted in the next device.Tick().\n\nSo if there\u0027s a pending command buffer in existence, maybe we can know that we need to call Tick() again to submit it.",
      "parentUuid": "3f3a2c5b_98108fc7",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9df99e8f_0354f3f9",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-10-14T21:02:31Z",
      "side": 1,
      "message": "Ah. I see. This looks like it will require backend-specific implementations to check for pending command buffers - which I\u0027d rather avoid unless there\u0027s a concern with the current implementation.",
      "parentUuid": "0eec7fc2_599bcfe2",
      "range": {
        "startLine": 355,
        "startChar": 12,
        "endLine": 355,
        "endChar": 48
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf7a7de_20b7c93a",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 776,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-12T16:10:13Z",
      "side": 1,
      "message": "nit: may be slightly simpler to return !IsDeviceIdle() at the bottom.",
      "range": {
        "startLine": 771,
        "startChar": 12,
        "endLine": 776,
        "endChar": 21
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e927cb3_cc52b256",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 776,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-10-12T23:03:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "caf7a7de_20b7c93a",
      "range": {
        "startLine": 771,
        "startChar": 12,
        "endLine": 776,
        "endChar": 21
      },
      "revId": "320febacac93bf967c7c9434802ea79ca66dc9e8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}