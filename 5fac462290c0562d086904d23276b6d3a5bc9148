{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c37ae146_a34d2986",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-20T22:51:42Z",
      "side": 1,
      "message": "The following table depicts some CQ CTS runs with and without the change. For the most part, the frontend cache does not seem to make THAT much difference in the runtime, so maybe it is fine to just land this fix and defer adding a cache to the CTS. (In some cases it even looks like maybe the cache was hurting performance? But most likely those are just noise.)\n\n| *Platform*  \t| *No Caching / No Validation* \t| *No Caching / Validation*  \t| *With Caching / No Validation* \t| *With Caching / Validation* \t|\n|----------------\t|--------------------------------\t|-------------------------------\t|-----------------------------------\t|--------------------------------\t|\n| Intel/Mac      \t| (77m 47s) + (5m 54s): 83m 41s  \t| (77m 58s) + (5m 43s): 83m 41s \t| (75m 7s) + (5m 27s): 80m 33s      \t| (79m 36s) + (5m 39s): 85m 15s  \t|\n| AMD/Mac        \t| (66m 50s) + (4m 59s): 71m 49s  \t| (75m 23s) + (5m 4s): 80m 27s  \t| (67m 12s) + (5m 5s): 72m 17s      \t| (79m 49s) + (5m 3s): 84m 51s   \t|\n| Intel/Linux    \t| (30m 42s) + (4m 7s): 34m 49s   \t|                               \t| (29m 16s) + (3m 33s): 32m 50s     \t|                                \t|\n| Nvidia/Linux   \t| (22m 20s) + (3m 45s): 26m 5s   \t| (22m 31s) + (3m 58s): 26m 28s \t| (21m 42s) + (3m 58s): 25m 39s     \t| (21m 31s) + (3m 50s): 25m 21s  \t|\n| Intel/Windows  \t| (91m 28s) + (6m 53s): 98m 22s  \t|                               \t| (91m 57s) + (7m 12s): 99m 8s      \t|                                \t|\n| Nvidia/Windows \t| (33m 6s) + (6m 40s): 39m 46s   \t| (35m 3s) + (6m 50s): 41m 53s  \t| (33m 29s) + (6m 26s): 39m 55s     \t| (34m 24s) + (6m 32s): 40m 57s  \t|",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4f19024_e318d29e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-21T12:38:47Z",
      "side": 1,
      "message": "LGTM",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf207ea_8ce34c39",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-21T12:38:47Z",
      "side": 1,
      "message": "Isn\u0027t a by pointer comparison enough here?",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f04e5a9e_e0bff586",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-21T20:06:21Z",
      "side": 1,
      "message": "No, we need to check the PCT and the internal BGL for this because the following are both possible:\n\n1) Both pipelines use the same BGL internal but were both \u0027auto\u0027 created so different PCTs.\n\n2) Both pipelines were explicitly created so no PCTs, but actual internal BGL are different.\n\nAlso note that the helper is doing pointer equality for the intenal BGL, it\u0027s just really a helper to check the PCT also.",
      "parentUuid": "8cf207ea_8ce34c39",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc29c4f6_befb4054",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-21T21:42:09Z",
      "side": 1,
      "message": "isn\u0027t it the case that in:\n\n1) because they have different PCTs, we will not get a frontend cache hit, so they will be different frontend pointers\n2) because they are different layouts, we will not get a frontend cache hit, and they will be different frontend pointers?",
      "parentUuid": "f04e5a9e_e0bff586",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "218b2937_ec938edc",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-22T00:39:01Z",
      "side": 1,
      "message": "To clarify a bit:\n\nFor (2), what I was referring to were cases where we have different pipelines with the same explicit layout. We do not cache `BGL`s, only `BGLInternal`s, so the two `BGL`s will actually be different pointers, so frontend pointer inequality in this case does not necessarily imply incompatibility.\n\nWe also cannot just check pointer equality of the `BGLInternal`s because of (1) where although we don\u0027t cache `PipelineLayout`s, we do reuse `BGLInternal`s in each newly created `PipelineLayout` which would result in pointer equality if we didn\u0027t consider the PCT. \n\nThose two cases make it necessary to check both the PCT and the `BGLInternal` pointer equality to determine compatibility.",
      "parentUuid": "cc29c4f6_befb4054",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cea59f3c_385f81c6",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-22T00:58:27Z",
      "side": 1,
      "message": "ah, got it",
      "parentUuid": "218b2937_ec938edc",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca536fe7_8ce8023b",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-22T13:36:24Z",
      "side": 1,
      "message": "Can\u0027t we cache the BGLs as well for this reason, so we can do pointer comparison instead of LayoutEqual?",
      "parentUuid": "cea59f3c_385f81c6",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "855dc89a_66783732",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 528,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-22T19:41:21Z",
      "side": 1,
      "message": "Hmm that might be possible, let me investigate that direction.",
      "parentUuid": "ca536fe7_8ce8023b",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3793dbb_1257c2f5",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1884,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-02-21T12:38:47Z",
      "side": 1,
      "message": "Maybe we could put the PCT in the cache key and comparison, so that we can use the cache, it\u0027s just that it returns a new object every time. The code would be simpler but I guess that the PL could stay alive for longer than it needs to.",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d99ab03_9903f864",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1884,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-21T20:06:21Z",
      "side": 1,
      "message": "We considered this, but (1) we don\u0027t want the PCT in the cache key because the cache key is also used in the pipeline\u0027s cache key which is in turn used in the disk cache, and (2) the additional complexity of another wrapper class like BGL/BGLInternal + the extra indirection didn\u0027t outweigh this option as long as the performance didn\u0027t regress too much. From the table in https://dawn-review.googlesource.com/c/dawn/+/175362/comments/c37ae146_a34d2986, and the fact that the CTS is really one of the biggest users of the frontend cache, it doesn\u0027t seem to be a massive bottleneck atm. Also, unlike the CTS most applications are unlikely creating and recreating the same pipelines with \u0027auto\u0027 over and over again.",
      "parentUuid": "a3793dbb_1257c2f5",
      "revId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "5fac462290c0562d086904d23276b6d3a5bc9148",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}