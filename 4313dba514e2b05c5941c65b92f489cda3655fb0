{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "20282a32_69bcc9ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "Austin, sorry I\u0027m performing a post-review. Here are several comments that I\u0027m surprised where not raised during the review.",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89eed99e_3b3a3c41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "Thanks for the review! Will address them in https://dawn-review.googlesource.com/c/dawn/+/92680",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed96198b_86330eb5",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "This should be DAWN_ENABLE_D3D12 if it is kept because the d3d12 backend compilation can be controlled separately.",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15cd747c_c584ec8c",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T20:29:44Z",
      "side": 1,
      "message": "Done. (Removed)",
      "parentUuid": "ed96198b_86330eb5",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea52c550_13174728",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "Adding backend-specific compilation in the frontend breaks the relatively strict layering that we have between frontend and backend. If it is absolutely needed than maybe we can do it, but here what prevented just exposing the constructor publicly and making a helper function that uses it in the D3D12 backend?",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08702966_6b337350",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 42,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "\u003e just exposing the constructor publicly and making a helper function that uses it in the D3D12 backend?\nThe main reason is we cannot have temp CachedBlob (now named Blob) with actual data (size \u003e 0) as the ownership of it\u0027s data are handled. So we don\u0027t want to expose constructor with size \u003e 0 that actually allocates the data.\n\nThe backend-specifc compilation gated is to solve the MSVC compile issue where it seems to cannot handle typedef ID3DBlob10 ID3DBlob in the typename without a constructor. We can change back to the general template forward declaration in Patch 17 https://dawn-review.googlesource.com/c/dawn/+/91180/17",
      "parentUuid": "ea52c550_13174728",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c4954ec_755bd958",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 42,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T20:29:44Z",
      "side": 1,
      "message": "For the forward declaration, managed to make msvc happy without include (use root level namespace ::ID3DBlob).",
      "parentUuid": "08702966_6b337350",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "335bb9be_b6aa2d74",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-06T13:26:00Z",
      "side": 1,
      "message": "\u003e The main reason is we cannot have temp CachedBlob (now named Blob) with actual data (size \u003e 0) as the ownership of it\u0027s data are handled. So we don\u0027t want to expose constructor with size \u003e 0 that actually allocates the data.\n\nI\u0027m not sure I understood. We don\u0027t want to have temporary Blobs that have size \u003d\u003d 0 because deletion would be UB? I feel I\u0027m missing something: if we have a static creation method then there are no temporary blobs no?",
      "parentUuid": "3c4954ec_755bd958",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcd340d1_99302eaf",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "nit: comment whether it acquires the pointer or copies the data?",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3a445e6_b84aa779",
        "filename": "src/dawn/native/BlobCache.h",
        "patchSetId": 24
      },
      "lineNbr": 63,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcd340d1_99302eaf",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d18a400_daa95e1a",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 24
      },
      "lineNbr": 631,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "u-nit: IMHO the DeviceBase should be holder of \"services\" of which the Blob Cache is one. This approach where the device has a lot of sub-objects for specific services but no functions that act on them directly helps avoid DeviceBase from growing into a monstruous god object. (it already kinda is, but let\u0027s keep it under control).\n\nHere this could be improved by always having a blob cache, just one that uses a noop caching interface when the toggles aren\u0027t present.",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d19a419_db61c060",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 24
      },
      "lineNbr": 631,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T20:29:44Z",
      "side": 1,
      "message": "ACK. Sounds like we need another wrapper around BlobCache (BlobCacheService?). And have a Load and a Store function.\nWill put in a new CL.",
      "parentUuid": "7d18a400_daa95e1a",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91609842_ee18fcaa",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 24
      },
      "lineNbr": 631,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-03T21:16:16Z",
      "side": 1,
      "message": "I think the suggestion to return a dummy blob cache here is preferable instead of adding another wrapper. The dummy could live on the device and would be returned instead of the instance\u0027s blob cache is the toggle is disabled",
      "parentUuid": "8d19a419_db61c060",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e79be69d_2c337ddc",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 24
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "nit: Ideally we should use forward declarations when possible to try and keep build times low (it\u0027s gotten progressively worse but we should still try to be good about forward declarations). Here CachedBlob is taken by reference so it only needs to be forward declared, not included.",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec1a7da2_49bbefdb",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 24
      },
      "lineNbr": 25,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e79be69d_2c337ddc",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "324a1816_58cb8d66",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 24
      },
      "lineNbr": 444,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "That\u0027s the default implementation so why do we duplicate it here? We could just add the function whenever we\u0027re ready to implement it.",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2658e364_fa165433",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 24
      },
      "lineNbr": 444,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "324a1816_58cb8d66",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4abe53e6_229d7b5e",
        "filename": "src/dawn/native/d3d12/PipelineCacheD3D12.cpp",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "nit: doesn\u0027t have a respective header, that\u0027s weird. Also could be a freestanding function in D3D12Utils",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f199cff_58de67ba",
        "filename": "src/dawn/native/d3d12/PipelineCacheD3D12.cpp",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "Now in BlobD3D12.cpp if that\u0027s better.",
      "parentUuid": "4abe53e6_229d7b5e",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12e46967_c3bae8a6",
        "filename": "src/dawn/native/metal/BufferMTL.mm",
        "patchSetId": 24
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "Seems like this change should have been separated if it came up early in the review.",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4582e6f0_77e314d1",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:26:34Z",
      "side": 1,
      "message": "When does this happen? Why do we need to guard for storing an empty blob if that\u0027s what Vulkan gives us given that blobs support being 0-sized?",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a122d007_5240efaf",
        "filename": "src/dawn/native/vulkan/PipelineCacheVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 64,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-06-03T18:18:49Z",
      "side": 1,
      "message": "Done. (I thought when bufferSize is 0 we can skip allocating the blob again and calling device-\u003efn.GetPipelineCacheData (I assume it will just returned VK_NULL_HANDLE to mHandle))",
      "parentUuid": "4582e6f0_77e314d1",
      "revId": "4313dba514e2b05c5941c65b92f489cda3655fb0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}