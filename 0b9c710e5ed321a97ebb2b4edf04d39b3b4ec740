{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "051feeba_6a4d6968",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-03-24T08:58:57Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7656ce55_38a7ad0a",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T17:21:48Z",
      "side": 1,
      "message": "Like for QueueBase::TaskInFlight we could just Device-\u003eIsLost at [1] before calling finish and call HandleLoss if the device is lost instead.",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb028064_2c45bdc0",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-03-25T05:52:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7656ce55_38a7ad0a",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe3c099_a32f5743",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T17:21:48Z",
      "side": 1,
      "message": "Instead of manual Ref/Release, WDYT of making these object contain a Ref\u003cRenderPipeline\u003e and call ref.Release() before passing it to the callback?",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7692cf97_b7df9d4b",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-03-25T05:52:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fe3c099_a32f5743",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2839a189_341a371d",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T17:21:48Z",
      "side": 1,
      "message": "[1]",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33c65a40_fdee4ebe",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-03-25T05:52:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2839a189_341a371d",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "383bf4ce_54b49142",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T17:21:48Z",
      "side": 1,
      "message": "nit: this can be Finish and HandleLoss like for QueueBase::TaskInFlight.",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8574dfa9_b4025050",
        "filename": "src/dawn_native/CreatePipelineAsyncTracker.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-03-25T05:52:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "383bf4ce_54b49142",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c565fd0d_fa2fe751",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 760,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T17:21:48Z",
      "side": 1,
      "message": "The usual pattern is that Foo wraps ConsumedError(FooInternal) and FooInternal does DAWN_TRY(ValidateFoo); DAWN_TRY(FooImpl); Can we have the same split here? (it would require adding MaybeError to CreateInternal, make it call ValidatePipelineDescriptor and only then call CreateImpl that has a default implementation on DeviceBase).",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26300e3a_c451f63f",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 760,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-03-25T05:52:15Z",
      "side": 1,
      "message": "I think Create*PipelineAsync is a bit different from other APIs as it shouldn\u0027t report any validation errors according to the SPEC. When there is a validation error on the descriptor, the error message should be returned to the caller through callback instead of being captured by ErrorScopeStack.",
      "parentUuid": "c565fd0d_fa2fe751",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c7acaa7_26d704f4",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 3
      },
      "lineNbr": 760,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-25T09:34:33Z",
      "side": 1,
      "message": "Thanks for the explanation, it makes sense that this is different. We should still use the \"Impl\" terminology to make it clear it can be overriden by backends.\n\nAlso I don\u0027t think the backends will do deferred validation. Maybe CreateRenderPipelineAsync could do the validation, if it fails enqueue a small task that says validation failed, and only otherwise call into the backend.",
      "parentUuid": "26300e3a_c451f63f",
      "revId": "0b9c710e5ed321a97ebb2b4edf04d39b3b4ec740",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}