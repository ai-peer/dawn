{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bfafd37c_3781fa04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-21T23:35:08Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5dcea1a_c3f0ce71",
        "filename": "src/dawn_native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T05:14:06Z",
      "side": 1,
      "message": "we should have a way to hash on the blueprint, and then pass the blueprint hash into the object creation the obj isn\u0027t found in the cache. That way we don\u0027t need to hash both the blueprint and the real object. That\u0027s an optimization that\u0027s not necessary for this CL though.",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9861d63_0da74a00",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T05:06:41Z",
      "side": 1,
      "message": "nit: methods should start with a capital letter.\n\nhigh level, I like the structure of my prototype in https://godbolt.org/z/8q9eW9 better if we can get that to work. It lets you pass in a struct which implements the visitor functionality so it can be customized for different types of traversals.\n\nThere\u0027s a few downsides to the current approach:\n - the equality function now walks the entire object tree - this is suboptimal if it can return early\n - the equality function is now effectively comparing hashes - which means our equality check is wrong if there are hash collisions\n - I don\u0027t immediately see how this is extendable to serialization",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}