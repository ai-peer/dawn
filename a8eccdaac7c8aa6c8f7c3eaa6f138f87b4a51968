{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bfafd37c_3781fa04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-21T23:35:08Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5dcea1a_c3f0ce71",
        "filename": "src/dawn_native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T05:14:06Z",
      "side": 1,
      "message": "we should have a way to hash on the blueprint, and then pass the blueprint hash into the object creation the obj isn\u0027t found in the cache. That way we don\u0027t need to hash both the blueprint and the real object. That\u0027s an optimization that\u0027s not necessary for this CL though.",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c403711c_a7d70ad2",
        "filename": "src/dawn_native/ComputePipeline.cpp",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-09T17:39:01Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "d5dcea1a_c3f0ce71",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4fafb05_cacb32e2",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-22T16:46:45Z",
      "side": 1,
      "message": "[1]",
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c66ccf41_4a9d1a6b",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-09T17:39:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f4fafb05_cacb32e2",
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9861d63_0da74a00",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T05:06:41Z",
      "side": 1,
      "message": "nit: methods should start with a capital letter.\n\nhigh level, I like the structure of my prototype in https://godbolt.org/z/8q9eW9 better if we can get that to work. It lets you pass in a struct which implements the visitor functionality so it can be customized for different types of traversals.\n\nThere\u0027s a few downsides to the current approach:\n - the equality function now walks the entire object tree - this is suboptimal if it can return early\n - the equality function is now effectively comparing hashes - which means our equality check is wrong if there are hash collisions\n - I don\u0027t immediately see how this is extendable to serialization",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e11b05_b6d5684d",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-22T16:46:45Z",
      "side": 1,
      "message": "\u003e  so it can be customized for different types of traversals.\n\nThanks for the snippet. That approach is good for whole object serialization but not for fast lookup, which I don\u0027t believe requires multiple walks or copies as suggested.\n\n\u003e the equality function now walks the entire object\n\nOnce the hash is recorded, no traversal is needed [1].\n\n\u003e equality check is wrong if there are hash collisions\n\nI use a hash because lookup needs to be fast and collisions are not consequential.\n\n\u003e I don\u0027t immediately see how this is extendable to serialization\n\nThis is for lookup only, so I didn\u0027t see any need for serialization.",
      "parentUuid": "b9861d63_0da74a00",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "501acd61_9d5ddb0e",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T16:49:20Z",
      "side": 1,
      "message": "Okay we need to support three things: real equality, hashing, and serialization.\n\nYou\u0027re right we should still have the hash for fast lookup, but we need a real infallible equality check as well. std::unordered_* works by first hashing, and if they hash the same, it does an equality check. That\u0027s why we need to support both.\n\nSerialization we will need in the future to pass serialized blobs to the embedder.",
      "parentUuid": "a7e11b05_b6d5684d",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7480bd00_bdf1440f",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-22T17:11:33Z",
      "side": 1,
      "message": "\u003e need a real infallible equality\n\nAny collision is not only rare but well defined. Either rendering is wrong or it errors. Even if we have reasons, why not keep the same equal checks or strengthen the real hash without forcing full serialization?\n\n\u003e  pass serialized blobs to the embedder\n\nVK/D3D driver already serializes blobs for you. Don\u0027t think it\u0027s needed unless we roll our own pipeline library.",
      "parentUuid": "501acd61_9d5ddb0e",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "895f7b03_548c1ca6",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T17:16:43Z",
      "side": 1,
      "message": "\u003e Any collision is not only rare but well defined. Either rendering is wrong or it errors. Even if we have reasons, why not keep the same equal checks or strengthen the real hash without forcing full serialization?\n\nstrongly disagree with this. We use these hash maps for object deduplication. Getting the wrong object and wrong rendering is very, very bad. If I can inject a script into the page which collides with an existing pipeline, provides the same bindings to pass validation, and draws a fullscreen quad that tells the user to send bitcoin to some address - this is bad.\n\nWe do not have to fully serialize to do comparison checks. The visitor returns early once it finds an inequality.\n\n\u003e  pass serialized blobs to the embedder\n\nThis is for the key, not for the value. The embedder will do the crypto hash of the key instead of Dawn.",
      "parentUuid": "7480bd00_bdf1440f",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc1fcc2_6a9be4a6",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-22T18:02:49Z",
      "side": 1,
      "message": "Using the example, what stops the injected script from using a new (malicious) pipeline? If so, the strength of the equal check does not matter so this situation makes no sense to me.\n\n\u003e The visitor returns early once it finds an inequality.\n\nYea, can do the same w/o a hash here (via CompareVisitor) - SGTM.\n\n\u003e This is for the key, not for the value\n\nBelieve this assumes we will always be caching individual pipelines (correct me if wrong) which I\u0027m not proposing here (and probably not a good idea).",
      "parentUuid": "895f7b03_548c1ca6",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51dc0e9e_bfa46d8b",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T19:27:58Z",
      "side": 1,
      "message": "The user would not pass the handle to the malicious pipeline. If they do, that\u0027s their problem. The bigger issue is:\n\nmalicious \u003d device.createPipeline(...);\n\nmyPipeline \u003d device.createPipeline(..); // Hash collision! and I actually get a reference to |malicious|\n\nThis is particularly a problem if we muliplex on a single device in Dawn as an optimization. ex. on android making a VkDevice is very expensive so we probably want something like this.\n\nQuoting myself from the comment in the bug:\n\nSerializing b.c. we\u0027re not going to crypto hash in Dawn. We need a crypto hash somewhere for security, and to make a crypto hash we need serialized data unless there\u0027s a good rolling crypto (but I don\u0027t know of one). So we serialize and let the embedder do the hashing.\n - for the key for shader blobs\n - for the key for the pipeline library data on both D3D12 and Vulkan (not for getting the d3d12 pso from the library)",
      "parentUuid": "2dc1fcc2_6a9be4a6",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d08c8ec5_3cd997eb",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-22T20:19:10Z",
      "side": 1,
      "message": "\u003e This is particularly a problem if we muliplex on a single device\n\nThe stronger crypto hash prepended to the key by the client should prevent that. The injected script should never get access to the same device and the created (malicious) pipeline would be isolated in it\u0027s own pipeline cache.\n\n\u003e from the comment in the bug:\n\nThis CL is used in the case of getting the d3d pso from library which is exempt from serialization.",
      "parentUuid": "51dc0e9e_bfa46d8b",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef119b83_041e1c18",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-22T21:08:43Z",
      "side": 1,
      "message": "the issue is not with the driver-level pipeline caches or the platform caching interface. the issue is with Dawn\u0027s object deduplication. We need to have strict equality there.\n\nThe point about serialization is that we are going to need to do it, and we should design the interface so that it can support it instead of changing it significantly later.",
      "parentUuid": "d08c8ec5_3cd997eb",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51f913bb_7883a03f",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-10-22T22:58:07Z",
      "side": 1,
      "message": "\u003e object deduplication. We need to have strict equality there.\n\nPlan to use CompareVisitor (like your design) there, so we\u0027re good there.\n\n\u003e serialization is that we are going to need to do it\n\nFor other blobs, yes (ie. shader or pipeline cache blobs) but recall, neither of those key from pipeline state. Unless we roll our own pipeline library, pipeline object serialization is not useful to me and one can always add a SerializedVistor.\n\nThank you for the discussion.",
      "parentUuid": "ef119b83_041e1c18",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e134660_54faf63b",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-09T17:39:01Z",
      "side": 1,
      "message": "Resolved offline, only using hashes for now.",
      "parentUuid": "51f913bb_7883a03f",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf1664d_0549def0",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-09T23:34:45Z",
      "side": 1,
      "message": "^ but you didn\u0027t do the CompareVisitor - is that no longer the plan? Aside from remembering the recorded key, the CL looks like it does the same thing as the original hashing but factors it into a different class. I think one of the goals of doing this was to also reduce the code duplication from traversing objects to do equality comparison and traversing objects to do hashing.\n\nOr, will CompareVisitor be in a different CL?\n\nAnd I *think* we\u0027re still going to have some serialization? for caching shader blobs I thought?\n\nSorry, overall I\u0027m just a bit unclear on what the decided upon direction is going to be.",
      "parentUuid": "6e134660_54faf63b",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa0fd5e_06c22a10",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-10T01:05:01Z",
      "side": 1,
      "message": "Sure - the simple plan only requires we get the pipeline hash for the \"PSO name\" so we can lookup/store d3d pipelines _directly_ in a pipeline library. The pipeline library already knows how to serialize itself and the persistent key to a pipeline library is built from device properties.\n\nFor persistently storing shaders, the persistent key is built from the input shader source and the shader blob is the compiled DX bytecode.\n\nIn either case, there is no need to additionally serialize or traverse (hence being simple) where the only code duplication introduced comes from the need to re-hash for the d3d pipeline library like the object cache already does. Does that make it clearer?",
      "parentUuid": "5cf1664d_0549def0",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "a8eccdaac7c8aa6c8f7c3eaa6f138f87b4a51968",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}