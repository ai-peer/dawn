{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7cc13030_f29ed552",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-08T18:32:04Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c81b9c_256b3114",
        "filename": "generator/templates/dawn/wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T21:39:27Z",
      "side": 1,
      "message": "Hmm, not sure if it\u0027s worth it (or work), but I think we could avoid having to pass the type if we add generated templates that map the types in the ObjectAllocators to the enums. Then in the ObjectAllocator header, we could use those templates to get the type? See [1] for where I imagine this would be.",
      "range": {
        "startLine": 63,
        "startChar": 24,
        "endLine": 63,
        "endChar": 129
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df637638_d01b2ed0",
        "filename": "generator/templates/dawn/wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T21:44:17Z",
      "side": 1,
      "message": "Ah, maybe ignore this suggestion actually... I think this would require changing all the ctors for the derived types to take the type enum also so probably doesn\u0027t accomplish much.",
      "parentUuid": "d6c81b9c_256b3114",
      "range": {
        "startLine": 63,
        "startChar": 24,
        "endLine": 63,
        "endChar": 129
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a6669a_dbbb7b05",
        "filename": "generator/templates/dawn/wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T21:47:41Z",
      "side": 1,
      "message": "Alternatively, would it not be possible to take the Client as an explicit argument before the rest of the forwarded args? (And then pass it to the make unique call like you do for the id?)",
      "parentUuid": "df637638_d01b2ed0",
      "range": {
        "startLine": 63,
        "startChar": 24,
        "endLine": 63,
        "endChar": 129
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4a3a15d_42a650d2",
        "filename": "generator/templates/dawn/wire/client/ApiProcs.cpp",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T22:08:16Z",
      "side": 1,
      "message": "Ah... please ignore all the other comments and sorry about the noise lol... I\u0027m just confusing myself...\n\nI think in order to accomplish removing this explicit `type` argument, moving some of the Client functions/members (i.e. TrackObject and mObjects) into the autogen-ed ClientBase and, passing the ClientBase to the ctor of the ObjectAllocators would be the most reasonable. Then we could call the TrackObject in the New calls and still make it so that the New calls look like the ctors. (This assumes my understanding that ClientBase isn\u0027t used for anything else and is just to separate some auto-gen vs manually written code.)\n\nAgain sorry for all the noise... haha",
      "parentUuid": "b1a6669a_dbbb7b05",
      "range": {
        "startLine": 63,
        "startChar": 24,
        "endLine": 63,
        "endChar": 129
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4ee57da_a39526e0",
        "filename": "src/dawn/wire/client/ObjectAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-08T23:28:56Z",
      "side": 1,
      "message": "maybe I missed something, but we couldn\u0027t have `New(Client* client, Args\u0026\u0026... args)` ?\n\nu-nit: Args\u0026\u0026 instead of Args, though I don\u0027t think it matter much in practice here since all the args are primitives",
      "range": {
        "startLine": 47,
        "startChar": 25,
        "endLine": 47,
        "endChar": 37
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ae8fa19_7b669036",
        "filename": "src/dawn/wire/client/ObjectAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T21:39:27Z",
      "side": 1,
      "message": "[1] After re-ordering the arguments in [2]:\n\n```\n  auto object \u003d std::make_unique\u003cT\u003e(id, ObjectToEnum\u003cT\u003e::type, std::forward\u003cArgs\u003e(args)...);\n```",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 49,
        "endChar": 75
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "730be9ce_5cdf36f5",
        "filename": "src/dawn/wire/client/ObjectAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T22:08:16Z",
      "side": 1,
      "message": "n/a",
      "parentUuid": "7ae8fa19_7b669036",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 49,
        "endChar": 75
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "495cd7ba_2f545d5f",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T21:39:27Z",
      "side": 1,
      "message": "[2] Re-order such that client is the last arg.",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 61
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fca2b6a9_bf7c8d6a",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-06-08T22:08:16Z",
      "side": 1,
      "message": "n/a",
      "parentUuid": "495cd7ba_2f545d5f",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 61
      },
      "revId": "c915315dbc778a088fec46a0161adb507ec36ec3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}