{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "46dae1ce_e7828f93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T19:39:08Z",
      "side": 1,
      "message": "I\u0027d like folks from the API side of things to comment on whether these should have author-managed resource binding (allocations) vs. automatically managed.",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47798972_b154f378",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T20:43:38Z",
      "side": 1,
      "message": "I didn\u0027t mean to include the AI-suggested fix.",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89f6a523_827d24af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003706
      },
      "writtenOn": "2024-06-10T11:22:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46dae1ce_e7828f93",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb510ac6_d4d237c1",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T19:57:12Z",
      "side": 1,
      "message": "Would these be able to be used inline, e.g. right at the texture call?\n\n  textureSample(t, sampler\u003c...\u003e(..), ...)\n  \nDo any of the other APIs allow that? That would put an extra burden on the implementation to deduplicate them, and then we\u0027d also have to ensure consistent slot counting. \nIs that a thing users might even want?  I would hope not.",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5773858c_2c590314",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003706
      },
      "writtenOn": "2024-06-06T21:10:58Z",
      "side": 1,
      "message": "I don\u0027t think inline should be allowed, because the static samplers need a binding slot. Nobody should be using it inline either.",
      "parentUuid": "bb510ac6_d4d237c1",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0815a43_88173e27",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-06-08T00:46:45Z",
      "side": 1,
      "message": "+1, these should only be usable like normal samplers.",
      "parentUuid": "5773858c_2c590314",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dd5d8fa_7e767cd1",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-11T18:01:30Z",
      "side": 1,
      "message": "Ok. Agreed then.",
      "parentUuid": "a0815a43_88173e27",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf6ca0d_02f2b4c2",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T19:39:08Z",
      "side": 1,
      "message": "Our WGSL team have been debating between two styles of declaring them.\n1. The application has to manage resource binding (group and number). In this case, declare a \u0027var\u0027 with @group and @binding attribute.\n2. The implementation manages resource binding.  In this case declare as a \u0027const\u0027 without @group and @binding attributes.\n\nWe wanted feedback from the Dawn API folks about what is more manageable.  If automatically-managed binding, will there be tetris-like pipeline layout compatibility issues?  Keep in mind we don\u0027t want to constantly recompile pipelines in case two different configurations cause the automatica allocation to be moved around a bunch.\n\nA second debate is: this would be the first time that enum values are used as function parameters.  That entails changing the spec around restrictions on function parameters https://gpuweb.github.io/gpuweb/wgsl/#function-restriction \nInstead, some of us think the enum parameters should be expressed as template parameters.\n\nExample:  sampler\u003cmirror_repeat,linear,mimap_linear\u003e(0.0, 16);\nExample:  sampler_comparison\u003cgreater_equal, ...\u003e(...);\n\n(I\u0027m not sure if that person wanted the float and integer parameters as template parameters as well).\n\nPlease show both options for \u0027var\u0027/\u0027const\u0027 and template-vs-normal parameters, and recommend one based on pros and cons.  Compare with how close it is to the corresponding feature in Metal, Vulkan, D3D. (OpenCL has them too, and Metal is basically the same as OpenCL here AFAIK). Compare their usability.",
      "fixSuggestions": [
        {
          "fixId": "3e9ad5e6_eb0492bf",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "docs/tint/extensions/chromium_experimental_static_samplers.md",
              "range": {
                "startLine": 24,
                "startChar": 0,
                "endLine": 25,
                "endChar": 0
              },
              "replacement": "# Example usage 1\n"
            },
            {
              "path": "docs/tint/extensions/chromium_experimental_static_samplers.md",
              "range": {
                "startLine": 32,
                "startChar": 0,
                "endLine": 32,
                "endChar": 0
              },
              "replacement": "# Example usage 2\n\n```wgsl\n@group(0) @binding(0) var\u003cstorage, read_write\u003e mySampler : sampler;\n\n@group(0) @binding(1) var\u003cstorage, read_write\u003e myComparisonSampler : sampler_comparison;\n\nfn main() {\n  mySampler \u003d sampler(mirror_repeat, linear, mipmap_linear);\n  myComparisonSampler \u003d sampler_comparison(mirror_repeat, linear, mipmap_linear, less_equal);\n}\n```\n\n"
            }
          ]
        }
      ],
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45631aff_2ef1dbf8",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T20:43:38Z",
      "side": 1,
      "message": "Uh.  I didn\u0027t write that AI-suggested fix. Sorry about that.  I forgot to unclick the button...",
      "parentUuid": "5cf6ca0d_02f2b4c2",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1da330dc_2b8fc0f5",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1003706
      },
      "writtenOn": "2024-06-06T21:10:58Z",
      "side": 1,
      "message": "First debate: Austin and Kai can correct me, but the automatic managed layouts would only work with automatic pipeline layouts, because the user has to know the sampler description including the binding slots before the pipeline creation. Auto pipeline layouts aren\u0027t compatible with each other, so that would introduce pieline layout compatibility issues. However, we are still thinking about alternate methods to simplify the API.\n\nSecond debate: We did consider template parameter style, but stuck to function parammeters because Metal Shading Language also had them as function parameters. I think both syntax work well and make sense. I think the template definition conveys the sense of const-ness rather. This probably is better if it doesn\u0027t require spec changes?",
      "parentUuid": "5cf6ca0d_02f2b4c2",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c8bc91_06f103ad",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2024-06-07T18:38:36Z",
      "side": 1,
      "message": "Another option is predefined constant integer values that we validate as parameters instead of enums. E.g.\n\n```wgsl\nconst clamp_to_edge \u003d 0;\nconst mirror_repeat \u003d 1;\n...\n\nmySampler \u003d sampelr(mirror_repeat /* or 1 */, ...);\n```\n\nYes that means you could make confusing parameters, but it is lower impact in terms of specification.",
      "parentUuid": "1da330dc_2b8fc0f5",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d58219f_a2bf2da1",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-06-08T00:46:45Z",
      "side": 1,
      "message": "1: Srijan is correct, so far we have decided that the layout has to be managed the same way as anything else, because D3D and Vulkan both require the static sampler definition in their equivalents of the bind group layout. So we can\u0027t make it magic without extending the magic all the way to bind group layouts (e.g. creating vulkan descriptor set layouts lazily, defeating the purpose of bind group layouts).\n\nBetween var and const I have no strong feeling but var makes sense. I think in WGSL static samplers should basically work exactly like non-static samplers, except that their parameters are written in the shader - so they shouldn\u0027t be copyable, etc any more than regular samplers. (For now we do expect this to be required, though it\u0027s possible we could have static samplers whose parameters are only defined in the bind group layout, kind of like a pipeline-override.)\n\n2: I think it\u0027s unlikely that the webgpu WG would stick with exactly the syntax we use in this prototype, so either \"hack\" seems fine (either mixing template parameters and value parameters, or making everything a numeric value parameter). It would also be easier to require all the parameters rather than implement defaulting - we may end up with a struct syntax for which the defaulting would be much simpler to implement (or no defaulting).",
      "parentUuid": "d4c8bc91_06f103ad",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fec7fa89_f01b3b97",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1003706
      },
      "writtenOn": "2024-06-10T11:22:59Z",
      "side": 1,
      "message": "Since webgpu WG is not going to stick to the prototype design and instead favor the struct syntax, I think Alan\u0027s suggestion is good enough for a prototype implementation. Then depending on if the WG allows for the struct syntax we can discuss that. Would that be fine David?",
      "parentUuid": "5d58219f_a2bf2da1",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95e64c3f_a67b3164",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-11T18:01:30Z",
      "side": 1,
      "message": "I\u0027m ok with Alan\u0027s suggestion.\n\nAck on requiring group and binding attributes.\nI like \u0027var\u0027 too.\n\nI\u0027m ok not having the defaulting if that makes prototyping easier.",
      "parentUuid": "fec7fa89_f01b3b97",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fb3fd1_e8f61516",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T19:39:08Z",
      "side": 1,
      "message": "Please write down:\n- changes to function restrictions\n- If going with declaring by \u0027const\u0027, then that forces an update to the rule in the spec \"The type of a const-declaration must be a concrete or abstract constructible type.\"  From https://gpuweb.github.io/gpuweb/wgsl/#const-decls \n  - In this case, would it be possible to copy/alias a sampler, like:  \u0027const s0 \u003d sampler....;  const scopy \u003d s;\u0027 ? That seems reasonable. Is that expected to be an alias or occupy another resource binding?  Is that even detectable?",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4f7b46_cb5a3ea3",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-11T18:01:30Z",
      "side": 1,
      "message": "I think we\u0027ve settled on:\n- the function call is only usable as the initializer",
      "parentUuid": "18fb3fd1_e8f61516",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50c23c9_2fa26a25",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-11T18:01:30Z",
      "side": 1,
      "message": "I think we\u0027ve settled on:\n- the function call is only usable as the initializer for a sampler declaration. \n- taking Alan\u0027s suggestions, we don\u0027t need to change rules for function parameters.\n- update the function restrictions about return type: builtin functions can return samplers (but user-declared functions can\u0027t)\n-not declaring as const, so we don\u0027t need the thing I mentioned in the second bullet above.",
      "parentUuid": "18fb3fd1_e8f61516",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d8e42b6_baf311d9",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-06-06T19:39:08Z",
      "side": 1,
      "message": "Write down all the proposed enum names, and how they correspond to the API side string names. (Be concrete about this; it will help in the long run and expose overlaps and usability)",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dff0d7b_ada45195",
        "filename": "docs/tint/extensions/chromium_experimental_static_samplers.md",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1003706
      },
      "writtenOn": "2024-06-10T11:22:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d8e42b6_baf311d9",
      "revId": "cb1e1bcdf1eb20a6f8919d92f44c3abde3b994a6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}