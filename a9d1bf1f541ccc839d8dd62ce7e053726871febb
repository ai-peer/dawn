{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2b4eb9d5_82abc2b4",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 29
      },
      "lineNbr": 371,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "instead of the bool arg, we could separate processing the status and map id, and actually calling/scheduling the callback.\nFor example:\n`std::optional\u003cstd::function\u003cvoid()\u003e\u003e fn \u003d PrepareMappingCallback(id status);`\n\nand either `fn()` or `AddCallbackTask(std::move(fn))`;\n\nthe `immediately` arg makes the function do very very different things. I\u0027d rather it\u0027s more clear to the reader when a callback is called immediately, and when it\u0027s enqueued for later.",
      "range": {
        "startLine": 365,
        "startChar": 4,
        "endLine": 371,
        "endChar": 5
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "682f0d5f_e38f4990",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 29
      },
      "lineNbr": 383,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "call AddCallbackTask directly?",
      "range": {
        "startLine": 383,
        "startChar": 12,
        "endLine": 383,
        "endChar": 35
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b80ed24e_e8699484",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 29
      },
      "lineNbr": 401,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "call AddCallbackTask directly?",
      "range": {
        "startLine": 401,
        "startChar": 12,
        "endLine": 401,
        "endChar": 35
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0737c164_dc28995a",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 29
      },
      "lineNbr": 416,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "`AddCallbackTask(*PrepareMappingCallback(...));` ?",
      "range": {
        "startLine": 416,
        "startChar": 8,
        "endLine": 416,
        "endChar": 31
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc382b0_44ecf57c",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 29
      },
      "lineNbr": 500,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "`AddCallbackTask(*PrepareMappingCallback(...));` ?",
      "range": {
        "startLine": 500,
        "startChar": 8,
        "endLine": 500,
        "endChar": 31
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e67c3e4_062a8406",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 29
      },
      "lineNbr": 618,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "```\nauto cb \u003d PrepareMappingCallback(...);\nif (cb) {\n  cb();\n}\n```\n?",
      "range": {
        "startLine": 618,
        "startChar": 0,
        "endLine": 618,
        "endChar": 65
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a2c3a18_4be3ecad",
        "filename": "src/dawn/native/CallbackTaskManager.cpp",
        "patchSetId": 29
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "nit: assert the state was Normal",
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ee2180a_d4bd0528",
        "filename": "src/dawn/native/CallbackTaskManager.cpp",
        "patchSetId": 29
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "nit: assert the state was Normal",
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94155c87_c361c9f0",
        "filename": "src/dawn/native/CallbackTaskManager.h",
        "patchSetId": 29
      },
      "lineNbr": 54,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "there are several places where we turn a function pointer and args into a std::function without any special sauce. Like:\n`AddCallbackTask([callback, status, userdata]() { callback(status, userdata); });`\n\nMaybe we can have another overload here to make that easy:\n\n```\nvoid AddCallbackTask(R(*callback)(Args...), Args\u0026\u0026... args) {\n  static_assert(!(std::is_pointer_v\u003cArgs\u003e || ...), \"binding pointers is not \n    allowed\");\n  AddCallbackTask(std::bind(callback, std::forward\u003cArgs\u003e(args)...));\n}\n```",
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75d9b4f7_8675497a",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 29
      },
      "lineNbr": 534,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "we could not save this c_str and instead bind the std::string by copy into the lambdas",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 534,
        "endChar": 45
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "923f4bc2_7d85ac7b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 29
      },
      "lineNbr": 640,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "we could change GetErrorMessage to return `const std::string\u0026`\n\nor even\n```\nAddCallbackTask([callback, userdata, scope \u003d mErrorScopeStack-\u003ePop()]() {\n  ...\n})\n```",
      "range": {
        "startLine": 640,
        "startChar": 20,
        "endLine": 640,
        "endChar": 43
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66b60bb6_b971fa97",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 29
      },
      "lineNbr": 1116,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "bind message by string, don\u0027t do .c_str()",
      "range": {
        "startLine": 1116,
        "startChar": 24,
        "endLine": 1116,
        "endChar": 43
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a94fe1a0_f1e39889",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 29
      },
      "lineNbr": 1161,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1161,
        "startChar": 31,
        "endLine": 1161,
        "endChar": 49
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b79d70c9_05c062f9",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 29
      },
      "lineNbr": 1276,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-02T09:30:16Z",
      "side": 1,
      "message": "this means the caller thinks it should call Tick forever if the device is lost. Shouldn\u0027t we still use IsDeviceIdle?",
      "range": {
        "startLine": 1276,
        "startChar": 0,
        "endLine": 1276,
        "endChar": 20
      },
      "revId": "a9d1bf1f541ccc839d8dd62ce7e053726871febb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}