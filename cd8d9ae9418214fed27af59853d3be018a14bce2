{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "291860b8_dd4219cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-01-17T13:43:36Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b0d2673_6732d325",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-01-19T16:14:07Z",
      "side": 1,
      "message": "Thanks for the discussion!",
      "revId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73b23272_c755b4e9",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 133,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-17T12:52:05Z",
      "side": 1,
      "message": "It\u0027s a bit surprising that we create only on demand. Can\u0027t we create the MTLTexture when the SharedTextureMemory is created? It would avoid having to pass the descriptor in and out.",
      "revId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb9c55a_96b78ba6",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 133,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-01-17T13:43:36Z",
      "side": 1,
      "message": "Am I misunderstanding, or can the format and size (which are parameters to the MtlTexture creation) vary with the client-passed-in info when it asks SharedTextureMemory to create a Texture [1]? That was the assumption that I had been going on that led me to design it this way. I was going to cache MtlTexture objects in SharedTextureMemory keyed off the (MetalTextureDescriptor, plane) pairs.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/SharedTextureMemory.cpp;l\u003d131-137?q\u003dSharedTextureMemory.cpp\u0026ss\u003dchromium",
      "parentUuid": "73b23272_c755b4e9",
      "revId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb678856_3b2666c2",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 4
      },
      "lineNbr": 133,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-01-19T16:14:07Z",
      "side": 1,
      "message": "This is what I had been missing:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/SharedTextureMemory.cpp;l\u003d182-193?q\u003dSharedTextureMemory.cpp\u0026ss\u003dchromium\n\nI\u0027ll move ahead with having SharedTextureMemoryMTL create and own the MtlTexture objects on its creation.",
      "parentUuid": "adb9c55a_96b78ba6",
      "revId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cd8d9ae9418214fed27af59853d3be018a14bce2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}