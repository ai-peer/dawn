{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95711567_f9761caf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "LGTM overall, thanks for updating the code to use Dawn\u0027s internal fence.",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11bdc441_4c040b66",
        "filename": "include/dawn/native/D3D12Backend.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "Returning null here means that the component using Dawn has to remember the waitFences to use them for future synchronization if Dawn returns a nullptr handle. What about having Dawn return a vector\u003cFence\u003e that\u0027s either waitFences or {signalFence} (or {signalFences, forMultiQueueInTheFuture}). This way Dawn takes care of the forwarding and there\u0027s less logic in its users + we already store mWaitFences in d3d12::Texture anyway.",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfe422b1_78b4f75d",
        "filename": "include/dawn/native/D3D12Backend.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Good point - what about performing the synchronization automatically in Dawn if the wait fences haven\u0027t already been waited on? That way it still returns a single signal fence, but Dawn performs the waits for us. Latest patch implements this approach.",
      "parentUuid": "11bdc441_4c040b66",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9753604a_1d925d70",
        "filename": "include/dawn/native/D3D12Backend.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-31T15:42:08Z",
      "side": 1,
      "message": "In the current implementation though, there\u0027s no Signal between SynchronizeBeforeUse and SynchronizeAfterUse. We need to call NextSerial to bump and signal with a new value. Otherwise, I think there will be a race. Should probably have a test for that. Consider:\n1. exclusive write\n2. import for read and do nothing\n3. read: may not see correct contents from (1)\n\nor\n1. exclusive write\n2. import for read and do nothing\n3. exclusive write again\n4. read: may see contents race from (1) and (3)\n\nIt\u0027s reasonable if you think that import and no actual usage is a degenerate case that we don\u0027t need to support efficiently. But, it also seems like Corentin\u0027s suggestion might be simpler since we don\u0027t need to do extra serial manipulations. It\u0027s also more extensible since we\u0027ll need to support multiple fences for multi-queue anyway",
      "parentUuid": "dfe422b1_78b4f75d",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a380fcaf_ac310eda",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 339,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-29T22:53:53Z",
      "side": 1,
      "message": "unit: probably meant \"CommandRecordingContext\"",
      "range": {
        "startLine": 339,
        "startChar": 11,
        "endLine": 339,
        "endChar": 34
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba96597c_953783bb",
        "filename": "src/dawn/native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 339,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a380fcaf_ac310eda",
      "range": {
        "startLine": 339,
        "startChar": 11,
        "endLine": 339,
        "endChar": 34
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f928a56e_87cdc5c4",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit: This could use device-\u003eConsumedError(Fence::CreateFromHandle(), \u0026fence) if we want to use ResultOrError.",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "533ce7ce_c8c32ceb",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f928a56e_87cdc5c4",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3b89508_d5d57204",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 7
      },
      "lineNbr": 133,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "What should happen in terms of synchronization if the texture wasn\u0027t used? Shouldn\u0027t we re-export the vector from BeginAccess so that follow-up components in Chromium correctly synchronize with whatever last used the texture?",
      "range": {
        "startLine": 133,
        "startChar": 21,
        "endLine": 133,
        "endChar": 32
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10b3e5d9_1a776eee",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.cpp",
        "patchSetId": 7
      },
      "lineNbr": 133,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Answered on the other comment.",
      "parentUuid": "b3b89508_d5d57204",
      "range": {
        "startLine": 133,
        "startChar": 21,
        "endLine": 133,
        "endChar": 32
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2394d94d_6117f81c",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.h",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit: that\u0027s part of dawn_platform.h I think",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97e549f7_8239de0c",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.h",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2394d94d_6117f81c",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c222f59_36084d7c",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.h",
        "patchSetId": 7
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit: I thing most of these don\u0027t need the wgpu:: prefix because we reexport them in the namespace in dawn_platform.h",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 72,
        "endChar": 32
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f06f812_b930d90a",
        "filename": "src/dawn/native/d3d12/ExternalImageDXGIImpl.h",
        "patchSetId": 7
      },
      "lineNbr": 72,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Not sure I see these re-exported (just removing the wgpu:: prefix causes compile errors) - maybe it was in the past, but isn\u0027t anymore or maybe I missed something?",
      "parentUuid": "8c222f59_36084d7c",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 72,
        "endChar": 32
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "225848a1_33710ac4",
        "filename": "src/dawn/native/d3d12/FenceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "Do we know if this takes a reference to the handle so it is not necessary to DuplicateHandle first? The docs for OpenSharedHandle don\u0027t say anything about this. (and can we add a comment explaining the ownership for future readers?)",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19170060_23ca405c",
        "filename": "src/dawn/native/d3d12/FenceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "It doesn\u0027t need a DuplicateHandle per se since it will take a reference to the underlying object - the reason I chose to have a duplicated handle is for the fence caching follow-up where we will need to use CompareObjectHandles on the duplicated handle and passed in handle to make sure the lookup by passed in handle is valid, something like:\n\n```\nstd::map\u003cHANDLE, Ref\u003cFence\u003e\u003e mFenceCache;\nauto it \u003d mFenceCache.find(unownedHandle);\nif (it !\u003d mFenceCache.end() \u0026\u0026 CompareObjectHandles(it-\u003eownedHandle, unownedHandle)) {\n  return *it;\n}\n// create new fence and insert into map\n```",
      "parentUuid": "225848a1_33710ac4",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eaa251f_e4095425",
        "filename": "src/dawn/native/d3d12/FenceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 62,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit: Maybe the fence could just be a \"dumb\" container instead of having logic that touches the device\u0027s internals.",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b805b1d4_5e99e1ba",
        "filename": "src/dawn/native/d3d12/FenceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 62,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3eaa251f_e4095425",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96a05ce_354819b8",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "Probably no longer needed.",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "732dab6b_ccdf8ec3",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f96a05ce_354819b8",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eac2fa2f_8ffcc107",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "wat?",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c172c610_759ffaa5",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "clangd being too clever before I disabled the auto-imports - I thought I caught them all, but clearly not :|",
      "parentUuid": "eac2fa2f_8ffcc107",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18af0591_cc44dfce",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 687,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-30T00:11:01Z",
      "side": 1,
      "message": "I just had a realization about this as I was debugging another issue where my shared image was getting unexpectedly destroyed.\n\ndevice.destroy() implicitly causes all textures to be destroyed. Since that\u0027s the case, we *can* expect well-formed code to sometimes destroy a texture before EndAccess is called.\n\nHowever, that should be OK though. Now that EndAccess doesn\u0027t do anything except return to you the value, do we even need this ASSERT?",
      "range": {
        "startLine": 685,
        "startChar": 2,
        "endLine": 687,
        "endChar": 43
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c36a5813_c03b5cac",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 687,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "This is mostly to prevent accidental Destroy() before EndAccess(), but yeah the device being destroyed case is important too so I\u0027ll remove this.",
      "parentUuid": "18af0591_cc44dfce",
      "range": {
        "startLine": 685,
        "startChar": 2,
        "endLine": 687,
        "endChar": 43
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b780ed08_03c5d972",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit:\" unused?",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecb0c60c_9c11c153",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b780ed08_03c5d972",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26193776_36e88ad8",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit: unused?",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "434cdac8_f0d5db40",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26193776_36e88ad8",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ffe4cee_d2e49645",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "nit: external",
      "range": {
        "startLine": 61,
        "startChar": 11,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5abfea8b_59b0d4b6",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ffe4cee_d2e49645",
      "range": {
        "startLine": 61,
        "startChar": 11,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d213653f_9c01413e",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-29T22:53:53Z",
      "side": 1,
      "message": "unused?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 119,
        "endChar": 50
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3003745_a5ad6ba2",
        "filename": "src/dawn/native/d3d12/TextureD3D12.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d213653f_9c01413e",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 119,
        "endChar": 50
      },
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "526e0539_6770d646",
        "filename": "src/dawn/tests/DawnTest.h",
        "patchSetId": 7
      },
      "lineNbr": 319,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-29T20:44:38Z",
      "side": 1,
      "message": "I worry that pushing the device at the end will cause issues if we ever want to add arguments but I\u0027m not sure what\u0027s a better solution. Maybe a ExpectationRecorder that has its own wgpu::Device and on which you call ResolveExpectations() at the end? Then DawnTest would have one for the default device (would be one actually). But that\u0027s a larger change than needed for this CL for sure.",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951027fd_6a41cf9a",
        "filename": "src/dawn/tests/DawnTest.h",
        "patchSetId": 7
      },
      "lineNbr": 319,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-29T22:53:53Z",
      "side": 1,
      "message": "another alternative to the last-arg solution would be to make another AddTextureExpectation overload. EXPECT_TEXTURE_EQ just forwards all the macro args, prepended with the __FILE__ and __LINE__. So you could pass the device as the *first* arg and resolve it with an overload.\n\nwe would have two overloads:\n\n```\nAddTextureExpectation(const char* file, int line, wgpu::Device device, const T* expectedData, rest, of, the args);\n\ntemplate \u003ctypename T, typename... Args\u003e\nAddTextureExpectation(const char* file, int line, const T* expectedData, Args\u0026\u0026... args) {\n  // no device passed explicitly. Default it, and forward the rest of the args.\n  return AddTextureExpectation(file, line, this-\u003edevice, expectedData, std::forward\u003cArgs\u003e(args)...);\n}\n```\n\nand then, we can still use the EXPECT_TEXTURE_EQ macro instead of passing __FILE__ and __LINE__ at [1]",
      "parentUuid": "526e0539_6770d646",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd5383df_5ae16b13",
        "filename": "src/dawn/tests/DawnTest.h",
        "patchSetId": 7
      },
      "lineNbr": 319,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Clever! I had to make a few overloads like this because the expectation types are different - const T*, const T\u0026, and E*. Also, std::forward wants to deduce the types before forwarding so I had to include more of the args especially Origin3D and Extend3D in the function parameters since we often pass them untyped to the macro, but that\u0027s fine since those are required parameters for all the calls.\n\nAlso, had to prevent infinite template recursion for the const T\u0026 variant because that likes to match against const wgpu::Device\u0026 as well.",
      "parentUuid": "951027fd_6a41cf9a",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4682ad21_a4abae9f",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 826,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-29T22:53:53Z",
      "side": 1,
      "message": "[1]",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e08915cb_a9b5f6f4",
        "filename": "src/dawn/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 826,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-08-30T23:18:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4682ad21_a4abae9f",
      "revId": "258f75d57454d6e4d7aa13d4e7848c37e494db0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}