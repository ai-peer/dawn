{
  "comments": [
    {
      "key": {
        "uuid": "590c9a4e_70cba448",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-06T02:42:13Z",
      "side": 1,
      "message": "Apologies for the back and forth but now that I have a clearer picture of where this is used (InitializeAsExternalTexture), I think it should go back to being named kExternal. I think this is better than \"unknown\".  I mean, the code does have SOME clue, right?  :-)",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a14d18da_b2b85dae",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-03-06T04:34:44Z",
      "side": 1,
      "message": "Adding a new method type could also introduce unexpected behavior if not handled. It\u0027s not clear to me what [Allocate|Deallocate]Memory() does with AllocationMethod::kExternal.\n\nI would suggest treating externals as kDirect (like before) but have a ownership bit in the RHA given kUnknown isn\u0027t exactly true nor kExternal an actual method which is also missing handling.",
      "parentUuid": "590c9a4e_70cba448",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b7abf93_788d795f",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-06T21:04:41Z",
      "side": 1,
      "message": "My perspective is that there\u0027s a clear correlation with how Dawn should handle each type: SubAllocated\u003d\u003dPlaced Resource, Direct\u003d\u003dCommitted Resource. Since externally allocated textures aren\u0027t either of these and should not be handled like these, it seems odd to continue calling them kDirect.\n\nAllocateMemory() is never called with external textures. The RHA is created inside the Texture constructor.\n\nDeallocateMemory() only deletes the reference to the external resource on our side - the actual teardown occurs in Texture::DestroyImpl. There should be no unintended effects from renaming this - and keeping externals as kDirect seems like the most confusing choice going forward.",
      "parentUuid": "a14d18da_b2b85dae",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37ed2b9e_7b70b659",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-03-06T21:51:30Z",
      "side": 1,
      "message": "\u003e Since externally allocated textures aren\u0027t either of these and should not be handled like these, it seems odd to continue calling them kDirect.\n\nkDirect simply means the resource was not (internally) sub-allocated. The external caller could use a placed or committed resource, it makes no difference. kExternal is still implicitly treated as kDirect which is why I thought an ownership bit would make it more explicit/clear.",
      "parentUuid": "4b7abf93_788d795f",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a646afd2_2afe4272",
        "filename": "src/dawn_native/ResourceMemoryAllocation.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-09T13:56:34Z",
      "side": 1,
      "message": "kExternal shouldn\u0027t be treated as kDirect, because AFAIK the current approach is that residency of the resource is externally managed. Like Bryan said, kExternal is could be created either as a committed or a placed resource so it is a completely different allocation type (and not kDirect with an ownership bit).",
      "parentUuid": "37ed2b9e_7b70b659",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87635c4_6f0cee7d",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-06T02:42:13Z",
      "side": 1,
      "message": "Nit: intitialized --\u003e initialized",
      "range": {
        "startLine": 22,
        "startChar": 65,
        "endLine": 22,
        "endChar": 77
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08cd1ebd_e9d111f1",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-06T02:42:13Z",
      "side": 1,
      "message": "Nit: initally --\u003e initially",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 24
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef76cdf6_d60e5411",
        "filename": "src/dawn_native/d3d12/HeapD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-06T02:42:13Z",
      "side": 1,
      "message": "Nit: intially --\u003e initially",
      "range": {
        "startLine": 24,
        "startChar": 7,
        "endLine": 24,
        "endChar": 15
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7af7853_07e81220",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 192,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-06T02:42:13Z",
      "side": 1,
      "message": "Please add a detailed description of the rationale for destroying the resource heap object here. If you don\u0027t want to have the same thing in multiple places, the comment can refer to the more detailed comment CreateCommittedResource.",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 192,
        "endChar": 9
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb114a71_066e54ea",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 309,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-06T02:42:13Z",
      "side": 1,
      "message": "Please add a detailed comment that describes the lifetime of the Heap you create here and when code is expected to delete it.",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 309,
        "endChar": 75
      },
      "revId": "dbef33fdd76410e4ea16431f20a4bac160a07860",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}