{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f283526_63a4746d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-14T21:43:15Z",
      "side": 1,
      "message": "I checked that the test is causing us to call setThreadgroupMemoryLength with 64 bytes which looks right to me for a 4x4 matrix.\n\nLooks like not all the values are making it through, so there might be something else going on? (or I\u0027m holding it wrong)\n\n[ RUN      ] ComputeSharedMemoryTests.Matrix/Metal_AMD_Radeon_R9_M370X\n../../third_party/dawn/src/tests/DawnTest.cpp:1484: Failure\nValue of: result\n  Actual: false (Expected data[1] to be 1, actual 0\nExpected:\n00 00 00 00 00 00 80 3F 00 00 00 40 00 00 40 40 00 00 80 40 00 00 A0 40 00 00 C0 40 00 00 E0 40 00 00 00 41 00 00 10 41 00 00 20 41 00 00 30 41 00 00 40 41 00 00 50 41 00 00 60 41 00 00 70 41 \nActual:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 70 41 \n\n[ RUN      ] ComputeSharedMemoryTests.Matrix/Metal_Intel_Iris_Graphics\n../../third_party/dawn/src/tests/DawnTest.cpp:1484: Failure\nValue of: result\n  Actual: false (Expected data[1] to be 1, actual 0\nExpected:\n00 00 00 00 00 00 80 3F 00 00 00 40 00 00 40 40 00 00 80 40 00 00 A0 40 00 00 C0 40 00 00 E0 40 00 00 00 41 00 00 10 41 00 00 20 41 00 00 30 41 00 00 40 41 00 00 50 41 00 00 60 41 00 00 70 41 \nActual:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 41 00 00 00 00 00 00 00 00 00 00 00 00 \n Expectation created at ../../third_party/dawn/src/tests/end2end/ComputeSharedMemoryTests.cpp:162\n)",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2006d7c_29af86e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-14T21:45:06Z",
      "side": 1,
      "message": "hmm nevermind; it fails on D3D12 too so this might not be metal-specific. Could be a problem overall with the shader translation - OR maybe it\u0027s expected that you shouldn\u0027t be able to write to subcomponents of a matrix from multiple threads?",
      "parentUuid": "0f283526_63a4746d",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37c90d4_5d5f5d19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T12:10:56Z",
      "side": 1,
      "message": "Code LGTM, but why does using threadgroup memory help compared to what we were doing before?",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e6f0bc2_a425a06b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2021-09-15T12:31:26Z",
      "side": 1,
      "message": "Right, MSL doesn\u0027t allow concurrently writes to different components of the same vector (see Tint chat). Presumably HLSL doesn\u0027t either.",
      "parentUuid": "e2006d7c_29af86e6",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb12ce3e_89a436b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2021-09-15T12:31:26Z",
      "side": 1,
      "message": "Previously Tint was generating all workgroup allocations at kernel scope, e.g.:\n\n  kernel void main() {\n    threadgroup float2x3 m;\n  }\n\nBut the MSL compiler is missing matrix constructors overloads for the threadgroup address space, so rejects this code. Tint now generates this instead:\n\n  kernel void main(threadgroup float2x3* m [[threadgroup(0)]]) {\n  }\n\nBecause this is now a pointer, we don\u0027t need those constructors, and the MSL compiler accepts this code. This requires Dawn to set the size of the allocation, which is what this CL does.",
      "parentUuid": "c37c90d4_5d5f5d19",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e168d33_faa3ce32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2021-09-15T12:31:26Z",
      "side": 1,
      "message": "Code LGTM too, just the test needs a fix.",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc9adce8_32d1db13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T12:40:50Z",
      "side": 1,
      "message": "Gotcha, do we every see having more than one threadgroup memory argument?",
      "parentUuid": "eb12ce3e_89a436b7",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "173c7c55_40320630",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-15T12:40:50Z",
      "side": 1,
      "message": "Does Tint\u0027s workgroup zero init pass potentially do that UB as well?",
      "parentUuid": "0e6f0bc2_a425a06b",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efed2990_c7ed19ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2021-09-15T12:49:49Z",
      "side": 1,
      "message": "Yes, if there are multiple workgroup variables with matrices, they will all be separate threadgroup memory arguments. Maybe worth having a test here that covers that case...",
      "parentUuid": "dc9adce8_32d1db13",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "017de7c0_c2bec953",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2021-09-15T12:49:49Z",
      "side": 1,
      "message": "No, that pass doesn\u0027t try to split initialization of vectors or matrices across multiple invocations.",
      "parentUuid": "173c7c55_40320630",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7aa3e631_2424fc97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-15T16:18:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "017de7c0_c2bec953",
      "revId": "e91ae48cc7459da9670b2f56a4dc8d0bfea840b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}