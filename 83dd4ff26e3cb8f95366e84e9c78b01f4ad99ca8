{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b36853f1_ae88bd25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-06-23T14:47:04Z",
      "side": 1,
      "message": "PTAL. That turned out to be surprisingly difficult. There were a few places I changed the output (HLSL can do `vec \u0026 float` which we don\u0027t allow). So, I think it\u0027s \"better\" in that it\u0027s closer to what we expect, but .... a good chunk of code to get there. Let me know if there are better ways to write any of bits in there.",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9ae18a6_6b305f8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Could go even further and add binary overloads `vec \u0026 scalar` to the HLSL intrinsics table (would need an HLSL subclass of `Binary`), but that\u0027s probably not worth it just to get rid of a couple of splats.",
      "parentUuid": "b36853f1_ae88bd25",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b4d45f_579bb0cf",
        "filename": "src/tint/lang/hlsl/intrinsic/dialect.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Nit: HLSL",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b006ed_fd0c1eca",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Nit: We generally use our own containers for internal stuff as they are expected to be more efficient.",
      "fixSuggestions": [
        {
          "fixId": "cbd94389_414ddd9a",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
              "range": {
                "startLine": 32,
                "startChar": 0,
                "endLine": 33,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
              "range": {
                "startLine": 41,
                "startChar": 0,
                "endLine": 42,
                "endChar": 0
              },
              "replacement": "#include \"src/tint/utils/hashmap.h\"\n"
            },
            {
              "path": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
              "range": {
                "startLine": 66,
                "startChar": 0,
                "endLine": 67,
                "endChar": 0
              },
              "replacement": "    utils::Hashmap\u003cBinaryType, core::ir::Function*, 4\u003e bitcast_funcs_{};\n"
            }
          ]
        }
      ],
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e159e576_5f1961a4",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Nit: s/As/Is/\n\nOne of the bots used to fail for this, but maybe that was GCC...",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae9ba35_03a26160",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Nit: Comment seems wrong?",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06be6fbd_1a05dc8b",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "This is interesting enough to warrant a comment that shows the pseudo code for what it generates (when reviewing I had to use the printer tests as the reference).\n\ne.g.\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tint/lang/msl/writer/raise/builtin_polyfill.cc;l\u003d329?q\u003dbuiltin_polyfill.cc\u0026ss\u003dchromium",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65997aa9_a97dffda",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Unused?",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8dea9f_86dfa4c7",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "`s` is already a `u32`, so the convert shouldn\u0027t be necessary?",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec726d2f_62808fc6",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Nit: We usually use `Result(0)`",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e96311b_c61b5f72",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "As above, consider adding a pseudo-code comment to show what we\u0027re generating.",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78e45068_6773f7ba",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "uint_ty",
      "range": {
        "startLine": 243,
        "startChar": 54,
        "endLine": 243,
        "endChar": 88
      },
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d96cdb1_5f66c21a",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "Nit: Could use `Splat` instead of `Constructor` to leave them as constants instead of instructions, though it probably doesn\u0027t make much different to the generated code.",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fdd381f_affa882b",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill.cc",
        "patchSetId": 2
      },
      "lineNbr": 246,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "uint_ty",
      "range": {
        "startLine": 246,
        "startChar": 55,
        "endLine": 246,
        "endChar": 89
      },
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8abab0f2_98260137",
        "filename": "src/tint/lang/hlsl/writer/raise/builtin_polyfill_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-06-24T14:42:02Z",
      "side": 1,
      "message": "It\u0027d be nice to have a couple of tests that cover the f16 conversion cases too.",
      "revId": "83dd4ff26e3cb8f95366e84e9c78b01f4ad99ca8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}