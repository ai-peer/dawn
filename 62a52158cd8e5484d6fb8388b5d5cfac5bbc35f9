{
  "comments": [
    {
      "key": {
        "uuid": "31c147ee_e2ba0d47",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-18T00:01:31Z",
      "side": 1,
      "message": "Bug: dawn:354",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 0
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aa8ca53_adf2b197",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31c147ee_e2ba0d47",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 0
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e94dacc_3954b43e",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T02:56:26Z",
      "side": 1,
      "message": "nit: maybe give this a typedef and replace auto",
      "range": {
        "startLine": 121,
        "startChar": 14,
        "endLine": 121,
        "endChar": 18
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "980e8f76_16344a41",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e94dacc_3954b43e",
      "range": {
        "startLine": 121,
        "startChar": 14,
        "endLine": 121,
        "endChar": 18
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de14b28d_59ebbd9b",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T02:56:26Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s necessary to hash the binding count, it should implicitly affect the hash due to the loop below.",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7042981_1fe3f67f",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de14b28d_59ebbd9b",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "380ba334_28a3e7d4",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T02:56:26Z",
      "side": 1,
      "message": "nit: It probably doesn\u0027t cost anything to index this so many times, but it is a little harder to read (than the old version which accessed it once at the top of the loop body).",
      "range": {
        "startLine": 209,
        "startChar": 36,
        "endLine": 209,
        "endChar": 53
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7f56653_57ed5dfb",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "380ba334_28a3e7d4",
      "range": {
        "startLine": 209,
        "startChar": 36,
        "endLine": 209,
        "endChar": 53
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94394e5c_b2d6098a",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T02:56:26Z",
      "side": 1,
      "message": "Can it happen that two BGLs are equivalent and have the same map, but the map is constructed in a different order causing this hash to differ?\n\nIf we had a reverse map, it would be a dense array and this would be easy....",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0b50cbc_2b005e63",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T04:07:47Z",
      "side": 1,
      "message": "Never mind, apparently std::map is ordered by key. Add a comment about that?",
      "parentUuid": "94394e5c_b2d6098a",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3ecea6e_df67abaa",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "Maybe have something that ensure buffers are sorted before the rest if we change the enum values.",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a372322e_8f5c40d2",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3ecea6e_df67abaa",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ded9fd6_7742afb7",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "Maybe add a comment before BindGroupLayoutBase that explains the packing etc.",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb61f46_30f59775",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ded9fd6_7742afb7",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5583f415_45314f97",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "Making this a structure of arrays was probably a mistake. Maybe it would make sense to have a single:\n\n  struct BindingInfo {\n      wgpu::ShaderStage visibility;\n      wgpu::BindingType type;\n      ...\n      bool hasDynamicOffset;\n      bool multisampled;\n  }\n\nThen use that both in the ShaderModule data extraction (spirv_ids being in a different table) and BindGroupLayout.\n\nThen BindGroupLayout could have an std::vector\u003cBindingInfo\u003e that\u0027s a private thing, and const BindingInfo\u0026 GetBindingInfo(uint32_t bindingIndex); then bindingIndex would get translated internally to a packed index via an std::array + std::map (so that small indices have a fast path)? BindGroup would need the packed index so there would be another GetPackedIndex(uint32_t bindingIndex).\n\nThis wouldn\u0027t be changes done in this CL, but WDYT about them?",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31329080_8373e8e5",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T22:29:26Z",
      "side": 1,
      "message": "sounds okay to me, I was also thinking about suggesting it.",
      "parentUuid": "5583f415_45314f97",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f5e68a4_ce3345d5",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Yea, that sounds like a good next step",
      "parentUuid": "31329080_8373e8e5",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e335e32_7387c5b6",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "nit: this could be in an anonymous namespace in the BindGroupLayout.cpp",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c0c8626_6a740c9c",
        "filename": "src/dawn_native/BindGroupLayout.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e335e32_7387c5b6",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f39e060c_014fb5c2",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "nit: alphabetical order.",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de17b144_af12c1e1",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f39e060c_014fb5c2",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1753c788_f4cf92db",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T04:07:47Z",
      "side": 1,
      "message": "Probably we should use unordered_map everywhere where we don\u0027t depend on the order. Which I think includes this one?\n\nI suspect they\u0027re all small enough that flat_map would be better, but we don\u0027t have it...",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 27
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f74d7874_5a8c7283",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "We should never depend on the order outside of BGL and BG, because that\u0027s where packing inside an array happens. I\u0027m not sure we need another data-structure: hot code is CreateBindGroup and SetBindGroup, the rest should be cold.\n\nOf course when we get abseil\u0027s swiss tables in, we can replace this one too.",
      "parentUuid": "1753c788_f4cf92db",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 27
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97da1aba_1f6bc80f",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-03-18T22:29:26Z",
      "side": 1,
      "message": "yeah, that\u0027s what I thought re: order dependence. But good point it shouldn\u0027t be hot so it doesn\u0027t really matter. Probably the only really hot one is BG.",
      "parentUuid": "f74d7874_5a8c7283",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 27
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f785eb88_bc9d0f84",
        "filename": "src/dawn_native/PipelineLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "97da1aba_1f6bc80f",
      "range": {
        "startLine": 134,
        "startChar": 24,
        "endLine": 134,
        "endChar": 27
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5abace0c_ec96ce05",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 318,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "nit: we should probably two this in two steps: first emplace and validate that the bool returned is true (otherwise we have duplicate bindings in the shader), then get the pointer to the BindingInfo. Ditto for the SPIRV-Cross path.",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07164d82_08336639",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 318,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "Done. Also caught a bug in StorageTextureValidationTests",
      "parentUuid": "5abace0c_ec96ce05",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6479d218_9d2902b0",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 649,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "nit: This could be a getter so that how binding infos are stored is an implementation detail.",
      "range": {
        "startLine": 649,
        "startChar": 55,
        "endLine": 649,
        "endChar": 60
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed0f6068_c3ec807c",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 649,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "In the follow-up after storing the info as an array-of-structs not a struct-of-arrays, right?",
      "parentUuid": "6479d218_9d2902b0",
      "range": {
        "startLine": 649,
        "startChar": 55,
        "endLine": 649,
        "endChar": 60
      },
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f100a16d_a484556a",
        "filename": "src/dawn_native/vulkan/BindGroupLayoutVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "I think this should be bindingIndex. In general the binding map should only ever be used by the frontend and the ShaderModule specializations.",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "debc889b_150afad3",
        "filename": "src/dawn_native/vulkan/BindGroupLayoutVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-03-20T05:27:55Z",
      "side": 1,
      "message": "We don\u0027t rename bindings on pipeline creation when we put shader modules together, so we can\u0027t actually do this right now.",
      "parentUuid": "f100a16d_a484556a",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7948857_90768bfb",
        "filename": "src/dawn_native/vulkan/BindGroupVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-18T13:50:40Z",
      "side": 1,
      "message": "ditto",
      "revId": "62a52158cd8e5484d6fb8388b5d5cfac5bbc35f9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}