{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bcc2c1d8_e5884745",
        "filename": "src/dawn_native/CachedObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "Why does this avoid double removing from the cache? It seems Uncache is only called in the destructor / DestroyApiObject which both should be called only once?",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72b80dec_2bb54c37",
        "filename": "src/dawn_native/CachedObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "Yea, good point, moved the uncache call to be guarded as if part of DestroyApiObjectImpl.",
      "parentUuid": "bcc2c1d8_e5884745",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0934a648_7c900a48",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "Ah this is why we have kUntrackedByDevice. WDYT of removing it and instead calling TrackObject only in [1]?",
      "range": {
        "startLine": 636,
        "startChar": 82,
        "endLine": 637,
        "endChar": 71
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30c32e40_0463c66e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "See comment regarding this in https://dawn-review.googlesource.com/c/dawn/+/65861.\n\nTLDR: We need to track objects at construction, but for blueprint objects it seemed reasonable to supply a direct route to avoid tracking the object since it should never need to be destroyed. In theory, I think that if we don\u0027t use this special ctor, and just used the normal one, things should still work, i.e. the blueprint gets added to the list, and when the function ends, the stack obj gets its dtor called and it\u0027s removed from the list there. It just made more sense to me to not track these blueprint at all though since they don\u0027t do anything?",
      "parentUuid": "0934a648_7c900a48",
      "range": {
        "startLine": 636,
        "startChar": 82,
        "endLine": 637,
        "endChar": 71
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d1edcf6_975e3953",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-11T10:32:59Z",
      "side": 1,
      "message": "IMHO we can track them, cached objects creation is relatively cold code so whatever makes things simpler. That said in the future we might not want to track bindgroups at all since they are slab allocated so we might need this constructor. Sooo either way sounds good.",
      "parentUuid": "30c32e40_0463c66e",
      "range": {
        "startLine": 636,
        "startChar": 82,
        "endLine": 637,
        "endChar": 71
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "182a46cc_ba05e227",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "[1]",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a54ec5b7_8b0f4b4b",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "See comment above.",
      "parentUuid": "182a46cc_ba05e227",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aded036_93c6a15e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 793,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "nit: probably need to SetIsCachedReference(false) here",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c06b76c_5a24d3f3",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 793,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "No longer applicable.",
      "parentUuid": "7aded036_93c6a15e",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db02d905_43806164",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "Can we have a block comment explaining how to use the various DAWN_TRY_ASSIGN_WITH_CLEANUP? The implementation starts to be opaque enough that it\u0027s not just a matter of reading the implementation.\n\nAlso maybe we can have simple tests in ErrorTests.cpp",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e46c4f8e_267cf981",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db02d905_43806164",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "283a031d_eb68cf73",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-11T10:32:59Z",
      "side": 1,
      "message": "Comment looks great, thank you!",
      "parentUuid": "e46c4f8e_267cf981",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28d0dc14_927050b0",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "nit: GET_5TH_ARG? It took me a while to understand that this wasn\u0027t returning 4 args.",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 39
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "049a383a_8f18faa3",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28d0dc14_927050b0",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 39
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62300ff5_854439b3",
        "filename": "src/dawn_native/Error.h",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28d0dc14_927050b0",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 39
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa4da6d9_abce99d2",
        "filename": "src/tests/DawnNativeTest.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "nit: 2021, ditto in other new files",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "713ab681_8fc482c3",
        "filename": "src/tests/DawnNativeTest.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa4da6d9_abce99d2",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398962b1_d6685375",
        "filename": "src/tests/DawnNativeTest.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-05T08:46:29Z",
      "side": 1,
      "message": "// This is similar to DAWN_TRY_ASSIGN but produces a fatal GTest error if EXPR is an error.",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f565f871_e92d1fed",
        "filename": "src/tests/DawnNativeTest.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-10-08T05:31:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "398962b1_d6685375",
      "revId": "06749a4c71af922a341e66a7e2753646d7203927",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}