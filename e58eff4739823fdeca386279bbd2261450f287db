{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ba9306e8_a61ce3f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-24T08:42:27Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "057f5f87_e8afe245",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 850,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "Do we need to add linear/nonlinear suffixes like VkColorSpaceKHR does? I don\u0027t understand color spaces so I can\u0027t tell.",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "541304ef_f994b7f1",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 850,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-11-24T22:09:11Z",
      "side": 1,
      "message": "Eventually yes, but we don\u0027t have any linear options yet in the spec. Input images can have arbitrary color profiles, so it\u0027s possible an input image could be labeled as linear-srgb, but it would be uncommon.\n\nMy bigger question is how we would handle arbitrary input color profiles. I don\u0027t know what the Chromium code looks like so I don\u0027t know what we would need to feed into Dawn. In practice I think images are just tagged with arbitrary embedded color profiles so I guess Chromium must be detecting those and figuring out how they map to predefined profiles like sRGB or Display-P3. As I discovered when I was trying to create test files there are multiple possible icc definitions for Display-P3 though:\nhttps://github.com/saucecontrol/Compact-ICC-Profiles\n(But instead of using one of these I used the profile from the WebKit Logo test image here https://webkit.org/blog-files/color-gamut/)\n\nMaybe in the long term we need fully general support just like for sampling external textures. I imagine we could compute the color conversion constants on the CPU and pass them in a uniform buffer. Hopefully they could share the implementation.\n\nHaving the full matrix be computed ahead of time on the CPU would also avoid needing to do two conversions inside the shader at [1]. (But it\u0027s probably OK if we have two conversions for now.)",
      "parentUuid": "057f5f87_e8afe245",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "366f3de1_90ba470d",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 850,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-25T02:18:44Z",
      "side": 1,
      "message": "Good question. TBH, chromium has the ability to support some customer color space if they could provide transform method about tranferring to XYZD50 color space. I\u0027m not 100% understand them for now but per my current understanding from this doc https://skia.org/docs/user/color and chromium related codes.\n1. Chromium defined color space with 4 IDs(They all have some predefined enums), PrimaryID, TransferID, MatrixID, RangeID.\n  - 1.a according to the list, it covers most common cases(I think), including HDR \n        cases     \n2. Chromium support customer color space if you could provide toXYZD50 transform matrix and transferFn.\n3. The transformation has two steps, transfer to XYZD50 from source color space and then transfer from XYZD50 to dst color space. This provide ability to support almost all of the color space conversions().\n   3.a the steps could be simplified in some situations\n4. ICC Profile I referred https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/include/third_party/skcms/skcms.h;l\u003d156;drc\u003dde68be3f18ba99cc01d75903e167ca09bade253c. But not quite sure whether this could handle all cases.",
      "parentUuid": "541304ef_f994b7f1",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28ff9fdd_0e8244ce",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 850,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-25T02:24:34Z",
      "side": 1,
      "message": "One thing I forget to mention:\nFor WebGPU CopyExternalImageToTexture, we got the color space info from SkImage, I think we\u0027ll always get matrxi toXYZD50 and transferFn.",
      "parentUuid": "366f3de1_90ba470d",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e759125b_2e5a63fb",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 854,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "The name is a bit generic, and there doesn\u0027t really seem to be a reason why it can\u0027t be folded in CopyTextureForBrowserOptions?",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d441911_b6e6b7be",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 854,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-25T02:18:44Z",
      "side": 1,
      "message": "The reason is that current enum is quite simple, And if we want to support more complex situations we might expand the structure to contains something like MatrixID, TransferID, RangeID etc. Even with some ability to have customer transform matrix.",
      "parentUuid": "e759125b_2e5a63fb",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b64d98_88b082b0",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "u-nit: _transform in the function name seems unnecessary, or should be at the start like transform_display_p3_gamma_to_linear.",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2143c9d7_955ee235",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-11-24T22:09:11Z",
      "side": 1,
      "message": "Display-P3\u0027s gamma conversion function is the same as sRGB\u0027s. So I think this implementation can be agnostic to which of the two it\u0027s used with and called something like \"srgb_nonlinear_to_linear_positive\". (since it doesn\u0027t handle negative numbers)\n\nAlso I don\u0027t know if there\u0027s a reason these constants differ slightly from the typical definition of sRGB, but, if possible, using the typical numbers would be clearer. (0.04045 instead of 4.04499359e-02, 1/12.92 instead of 7.73993805e-02, etc.)\nhttps://en.wikipedia.org/wiki/SRGB",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "563b2457_a04dc7c6",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-25T02:18:44Z",
      "side": 1,
      "message": "Good question. TBH, I dumped the shader generated here https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_transform.cc;l\u003d1051;drc\u003dde68be3f18ba99cc01d75903e167ca09bade253c?q\u003dcolor_transform.cc\u0026ss\u003dchromium%2Fchromium%2Fsrc.\nAnd I think you\u0027re right that we could form these magic numbers to a more readable formulas.",
      "parentUuid": "2143c9d7_955ee235",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "682f7179_6f13bd0d",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "Can we use early returns to avoid the temporary value variable?\n\nif (v \u003c ...) {\n  return ...;\n}\nreturn ...;\n\nSame in other functions.\n\nDo you have a reference of where these magic numbers come from? Like a display P3 spec or something similar? We should link to it (or if not possible at least say something like \"Display P3 specification section 2.1 ...\")\n\nSame in other functions.",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e61c72_df9c4048",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-25T02:18:44Z",
      "side": 1,
      "message": "I dumped the shader generated here https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_transform.cc;l\u003d1051;drc\u003dde68be3f18ba99cc01d75903e167ca09bade253c?q\u003dcolor_transform.cc\u0026ss\u003dchromium%2Fchromium%2Fsrc. And I think we could reshape these magic numbers into readable formulas.",
      "parentUuid": "682f7179_6f13bd0d",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c08a276_627b1f79",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "This transform looks like there are three steps? Why scRGBLinear to sRGBGamme to linear and not just scRGBLinear to linear?",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ac0dfd_c74287a8",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-11-24T22:09:11Z",
      "side": 1,
      "message": "This looks like the sRGB linear-to-nonlinear conversion (see above), in which case it could be called something like \"srgb_linear_to_nonlinear_positive\".\n\nHowever there\u0027s one difference with the sRGB conversion which is it uses 1.13711894 instead of 1.055. Is that difference intentional?",
      "parentUuid": "8c08a276_627b1f79",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f3500f3_0653c672",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "nit: trailing whitespace, but also where does this magic matrix come from?\n\nIt could also be let colorTransform \u003d mat....; return colorTransform*pixel;",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f3074b5_8d213147",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "nit: trailing whitespace",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "923bc743_b239147f",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "We do nothing to convert from extended sRGB to scRGBLinear. Do we need to do something? Otherwise we should probably rename one of them to make it clear extended sRGB \u003d\u003d scRGBLinear.",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4728c1e3_cadcec76",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-11-24T22:09:11Z",
      "side": 1,
      "message": "[1]\n\nI think we should use the naming \"extended sRGB\" and avoid the \"scRGB\" naming as it carries a lot of weight that I don\u0027t think is relevant here (especially the canonical encodings which represent of a finite -0.5..+7.5 range as unsigned integers with bias).\nhttps://en.wikipedia.org/wiki/ScRGB\n\nIn the WebGPU spec we call \"extended sRGB\" simply \"srgb\" (taking the definitions from CSS Color Module Level 4) so I think it\u0027s appropriate to do so here too. (Comments could explain that \"srgb\" is extended.)",
      "parentUuid": "923bc743_b239147f",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a657014d_b583f196",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "We should validate these enums (and alphaOp if it isn\u0027t done already)",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f782b38_a5220601",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "nit: it doesn\u0027t really matter what the defaults are since we just set the option unconditionally. Can we directly set the correct value from options-\u003e ?",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3467a501_0fef0850",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "u-u-nit: this comment and \"Set color space\" seem a bit unnecessary",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49d3f224_cf379c73",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "nit: maybe the tolerance could default to 0",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e360c7de_2910fea5",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 593,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "nit: can we split the data for each pixel? To make clang-format do it, you can add empty line comments to force it to separate lines.",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b097c80_e981722b",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 601,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "ditto",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63ddea0b_8b07b47a",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 656,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "nit: so just 1 or skipped?",
      "range": {
        "startLine": 656,
        "startChar": 17,
        "endLine": 656,
        "endChar": 44
      },
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51faa783_2d8a7be2",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 799,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "If we can\u0027t do sRGB-\u003ediplayP3 or p3-\u003ep3, then I think we should add validation that prevents it.\n\nAlso the test seems to only test sRGB -\u003e sRGB and sRGB-\u003eP3? So an unsupported configuration?",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951eec0c_869228f9",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 800,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-24T13:43:54Z",
      "side": 1,
      "message": "Alpha ops aren\u0027t tested, maybe this comment is a leftover?",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "673beafe_35ead2af",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 800,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-11-25T02:18:44Z",
      "side": 1,
      "message": "Sry, a left over and forgot to change it.",
      "parentUuid": "951eec0c_869228f9",
      "revId": "e58eff4739823fdeca386279bbd2261450f287db",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}