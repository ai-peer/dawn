{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "488886ba_fa7e79d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-23T20:26:28Z",
      "side": 1,
      "message": "PTAL.\n\nI\u0027ve incorporated the Dawn changes, as well as a tweak to the AddBlockAttribute transform required for GLSL. Happy to split these back up again into separate CLs if you prefer.",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39192168_0cb3f577",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 24
      },
      "lineNbr": 2101,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-24T15:09:50Z",
      "side": 1,
      "message": "Can the GLSL writer handle user declared `push_constant`s ?\n\nIf so, this is a location collision, right?",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dedbc6f_621fb106",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 24
      },
      "lineNbr": 2101,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-24T17:07:28Z",
      "side": 1,
      "message": "I believe that we will have to restrict ourselves to a single push constant block for everything (transforms and user-defined), since other backends only support one.\n\nThe plan is that transforms will do a RMW of the exsting block, if it exists, both in order to get along with other transforms as well as the user-defined push constant block. Currently, both the new transform and the existing ClampFragDepth transform error if there\u0027s a push constant struct. Obviously that will have to be fixed, but I\u0027d prefer to do it iteratively.",
      "parentUuid": "39192168_0cb3f577",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb4b1dd9_64dee42c",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 24
      },
      "lineNbr": 2101,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-24T18:58:56Z",
      "side": 1,
      "message": "Okay, that\u0027s fine. As we\u0027re moving towards launch of the GLES backend, I\u0027d like to ensure we\u0027re keeping on top of outstanding work here.\n\nIt\u0027s my understanding (please correct me if I\u0027m wrong) that:\n• Before this CL, push constants didn\u0027t work for the GLSL backend at all.\n• After this CL, push constants work if the user writes one and this transform is *not* in use. If both the user writes one, and this transform *is in use* then we\u0027ll get a collision and Bad Things™ will happen.\n\nIf I\u0027ve got that right, please can we have this put in a Tint bug with the `GlslWriter` label applied? Given that it\u0027s dependent on push constants, it doesn\u0027t seem blocking for compat, but we can then block the push constants bug with this.",
      "parentUuid": "9dedbc6f_621fb106",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ecbd642_bce97f68",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.cc",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-24T15:09:50Z",
      "side": 1,
      "message": "Can the GLSL writer handle user declared `push_constant`s ?\n\nIf so, consider:\n\n```\nstruct Shared { ... } // This will get the block annotation.\nvar\u003cpush_constant\u003e P : Shared;\n@group(0) @binding(0) var\u003cuniform\u003e U : Shared;\n```",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f45a43_5f6f628f",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.cc",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-24T17:07:28Z",
      "side": 1,
      "message": "This should be ok, since variables in AddressSpace::kUniform become interface blocks in the GLSL backend, not uniform variables. The push constant block will become a single uniform with explicit location. No collision with UBOs.",
      "parentUuid": "3ecbd642_bce97f68",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93f246e3_8ba7b4ab",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.cc",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-24T17:14:20Z",
      "side": 1,
      "message": "Oh hmm, I didn\u0027t read carefully. The problem is reusing a struct for both push constants and a UBO. I think it should be ok, since the struct will get written (UsedAs(..kPushConstant) should override is_block), as will the interface block. But I\u0027ll write a test to be sure.",
      "parentUuid": "01f45a43_5f6f628f",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "690ccc4c_d5ce3530",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.cc",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-24T17:21:18Z",
      "side": 1,
      "message": "Seems ok.\n\n```\nenable chromium_experimental_push_constant;\n\nstruct Shared {\n    v : vec4\u003cf32\u003e,\n};\n\nvar\u003cpush_constant\u003e P : Shared;\n@group(0) @binding(0) var\u003cuniform\u003e U : Shared;\n\n@compute @workgroup_size(1)\nfn main() {\n  let pv \u003d P.v;\n  let uv \u003d U.v;\n}\n```\n\nbecomes:\n\n```\n#version 310 es\n\nstruct Shared {\n  vec4 v;\n};\n\nstruct P_block {\n  Shared inner;\n};\n\nlayout(location\u003d0) uniform P_block P;\nlayout(binding \u003d 0, std140) uniform P_block_ubo {\n  Shared inner;\n} U;\n\nvoid tint_symbol() {\n  vec4 pv \u003d P.inner.v;\n  vec4 uv \u003d U.inner.v;\n}\n\nlayout(local_size_x \u003d 1, local_size_y \u003d 1, local_size_z \u003d 1) in;\nvoid main() {\n  tint_symbol();\n  return;\n}\n```",
      "parentUuid": "93f246e3_8ba7b4ab",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "996d236f_570bd754",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.h",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-24T15:09:50Z",
      "side": 1,
      "message": "I\u0027m not sure if you need to to special case push constants in this transform. You can check the address space usages in the printer with \n`tint::type::Struct::AddressSpaceUsage()` and `tint::type::Struct::UsedAs()`.\n\nIf the only usage is `AddressSpace::PushConstant`, then ignore the block attribute.",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1744050d_3475411e",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.h",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-24T17:07:28Z",
      "side": 1,
      "message": "Oh cool, I didn\u0027t know about UsedAs(). Done.",
      "parentUuid": "996d236f_570bd754",
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "646e36bd_47525404",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.h",
        "patchSetId": 24
      },
      "lineNbr": 80,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-24T15:09:50Z",
      "side": 1,
      "message": "please add `const` or add an initializer.",
      "range": {
        "startLine": 80,
        "startChar": 8,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9a93946_78a0ec00",
        "filename": "src/tint/lang/wgsl/ast/transform/add_block_attribute.h",
        "patchSetId": 24
      },
      "lineNbr": 80,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-01-24T17:07:28Z",
      "side": 1,
      "message": "All of this was removed.",
      "parentUuid": "646e36bd_47525404",
      "range": {
        "startLine": 80,
        "startChar": 8,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "7d7671daab5e74dc001f6ce597659223f8780306",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}