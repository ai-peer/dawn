{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2a460ae2_a03c1c7d",
        "filename": "src/dawn_node/interop/Browser.idl",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-27T21:43:16Z",
      "side": 1,
      "message": "these don\u0027t exist in native. Can we maintain a diff file to remove stuff from the WebGPU API that\u0027s not present in Node? (and eventually we\u0027ll probably add additional things)",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85628e84_fe50041a",
        "filename": "src/dawn_node/interop/Browser.idl",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2021-09-27T22:18:02Z",
      "side": 1,
      "message": "Why is stripping stuff from the IDL better than stubbing the bits we don\u0027t care about?\nMaintaining a patch is painful, and both approaches will likely result in runtime failures for the affected tests. At least with stubs we can emit a sensible error message instead of some confusing undefined symbol error.",
      "parentUuid": "2a460ae2_a03c1c7d",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0985a9_4bcdea87",
        "filename": "src/dawn_node/interop/Browser.idl",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-27T22:39:14Z",
      "side": 1,
      "message": "you\u0027re right that stubs are better for that; we should add some other way for developers and middleware authors to feature-detect the environment. A property on the GPU/Device/Adapter would be good enough.",
      "parentUuid": "85628e84_fe50041a",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c86816cb_690a658e",
        "filename": "src/dawn_node/interop/Browser.idl",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-28T07:19:38Z",
      "side": 1,
      "message": "Right now Chromium/CTS/Dawn are all in sync with gpuweb.idl but how do we deal with the situation where there are breaking changes? In particular Chromium/Dawn/CTS might not upgrade changes in the same order they happen in gpuweb.idl.",
      "parentUuid": "2a0985a9_4bcdea87",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53ec9012_7109a2f1",
        "filename": "src/dawn_node/interop/WebGPU.cpp.tmpl",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-27T21:04:01Z",
      "side": 1,
      "message": "I think we could use SetInstanceData if we target Node 12.8+",
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b91a4d1_a6c60cc0",
        "filename": "src/dawn_node/interop/WebGPU.cpp.tmpl",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-28T07:19:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "53ec9012_7109a2f1",
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3131f93a_51595e7d",
        "filename": "src/dawn_node/interop/WebGPU.cpp.tmpl",
        "patchSetId": 9
      },
      "lineNbr": 293,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-27T21:04:01Z",
      "side": 1,
      "message": "not sure if you\u0027ve handled this somewhere else:\n\nnew window.GPUBuffer() or new global.GPUBuffer() from JS is supposed to throw a TypeError \"Illegal constructor\" because the WebGPU objects don\u0027t have exposed constructors.\n\nin the past when I did bindings, I defined the constructors to throw these exceptions, wrapped this private call to New(..) with a small scope which would turn off the exception.",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 293,
        "endChar": 50
      },
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2af3e85_62418a39",
        "filename": "src/dawn_node/interop/WebGPU.cpp.tmpl",
        "patchSetId": 9
      },
      "lineNbr": 299,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-27T21:04:01Z",
      "side": 1,
      "message": "\u003d default?",
      "range": {
        "startLine": 299,
        "startChar": 26,
        "endLine": 299,
        "endChar": 28
      },
      "revId": "bdcec9cda554bc651be3337ebaf65988c1eec47c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}