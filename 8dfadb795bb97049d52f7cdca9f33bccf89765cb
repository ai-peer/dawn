{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cabf8036_9db2691c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1003787
      },
      "writtenOn": "2024-06-18T01:41:43Z",
      "side": 1,
      "message": "Resolved merge conflicts",
      "revId": "8dfadb795bb97049d52f7cdca9f33bccf89765cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "156bdbc3_d4d0e5ee",
        "filename": "src/dawn/native/Instance.cpp",
        "patchSetId": 12
      },
      "lineNbr": 388,
      "author": {
        "id": 1003787
      },
      "writtenOn": "2024-06-18T04:18:04Z",
      "side": 1,
      "message": "\u003e no header providing \"dawn::native::SortAdapters\" is directly included (https://clang.llvm.org/extra/clang-tidy/checks/misc/include-cleaner.html)\n\u003e \n\u003e (Lint observed on `android-clang-tidy-rel` and `linux-clang-tidy-rel`)\n\nInstance.h includes Adapter.h, which has SortAdapters. Is the convention that we should include Adapter.cpp file too?\n\nSince Instance.h only needs the forward declaration, I tried moving the include to Instance.cpp, but then found there are a lot of other files that currently depend on Instance.h including Adapter.h. If preferred, I can go include Adapter.h in all the other files that need it and omit it from Instance.h (either in this change or a followup change)",
      "parentUuid": "cbbb2df8_cffd525c",
      "revId": "8dfadb795bb97049d52f7cdca9f33bccf89765cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b3f0270_3e4335ad",
        "filename": "src/dawn/native/Instance.cpp",
        "patchSetId": 12
      },
      "lineNbr": 388,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-06-18T04:44:38Z",
      "side": 1,
      "message": "We\u0027ve been ignoring a lot of these warnings for existing code for now. I think it is a bit too pedantic IMO. If it\u0027s new code, then I\u0027d address it. And, if it mentions you\u0027re missing a system or stdlib header, then I\u0027d include it.",
      "parentUuid": "156bdbc3_d4d0e5ee",
      "revId": "8dfadb795bb97049d52f7cdca9f33bccf89765cb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8dfadb795bb97049d52f7cdca9f33bccf89765cb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "8dfadb795bb97049d52f7cdca9f33bccf89765cb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}