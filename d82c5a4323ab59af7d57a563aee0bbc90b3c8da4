{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b3d1d976_41a1989c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-18T21:09:36Z",
      "side": 1,
      "message": "I still need to add tests, but this seems to be passing the e2e tests for me at this point. Wanted to send it out early to see if there was anything that needed to change.",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caea82f7_4cf16eb6",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-18T21:23:06Z",
      "side": 1,
      "message": "We probably need to do this inside a `TraverseExpressions` call to deal with problematic constant expressions that are nested inside a larger non-constant expression.",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 88,
        "endChar": 9
      },
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2db0a98a_d23d2051",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-19T11:55:12Z",
      "side": 1,
      "message": "I wasn\u0027t going to worry about those with the first pass at this, do you think they\u0027d be a significant fraction of the expressions? The change would be above in `Replace` if there is no `Replacement` then walk the expression looking for other replacements.",
      "parentUuid": "caea82f7_4cf16eb6",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 88,
        "endChar": 9
      },
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0479852f_75fbe000",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-19T12:59:36Z",
      "side": 1,
      "message": "I\u0027m wondering - could you not just use the `CloneContext.ReplaceAll([\u0026](const ast::Expression*){ ... })`\nThat will visit all the expressions in the program, and will call the outermost first. If you replace the expression, it won\u0027t recurse into the children.\nIsn\u0027t that exactly what you want here?",
      "parentUuid": "2db0a98a_d23d2051",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 88,
        "endChar": 9
      },
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daeebe16_b96f1e7b",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-19T14:38:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0479852f_75fbe000",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 88,
        "endChar": 9
      },
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "073c65c2_a92e7bdd",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-18T21:23:06Z",
      "side": 1,
      "message": "Probably need to recurse into the LHS expression.",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "129c40f7_c374d2a1",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-19T11:55:12Z",
      "side": 1,
      "message": "Ah, I was thinking it wasn\u0027t possible to have a const on the LHS, but now realizing the IndexAccessExpression could have a const inside it and it could be on the LHS. Will update.",
      "parentUuid": "073c65c2_a92e7bdd",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5d62d37_c8b566a4",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-19T14:38:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "129c40f7_c374d2a1",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3c3ada_129995ff",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 141,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-18T21:23:06Z",
      "side": 1,
      "message": "Probably need to recurse into the LHS expression.",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4fa2e5b_9dbc930c",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 141,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-19T14:38:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef3c3ada_129995ff",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "884782ef_ae7ea3ca",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-03-18T21:23:06Z",
      "side": 1,
      "message": "Probably need to recurse into the LHS expression.",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "922f1c8a_0dc87c4c",
        "filename": "src/tint/lang/wgsl/ast/transform/fold_constants.cc",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-03-19T14:38:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "884782ef_ae7ea3ca",
      "revId": "d82c5a4323ab59af7d57a563aee0bbc90b3c8da4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}