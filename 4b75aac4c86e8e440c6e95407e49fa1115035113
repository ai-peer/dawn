{
  "comments": [
    {
      "key": {
        "uuid": "01c0b4c2_80999b73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-19T08:10:24Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaf3bc0d_31b78bcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-19T17:07:46Z",
      "side": 1,
      "message": "LGTM",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cb378d7_9ba9a1cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-19T17:24:50Z",
      "side": 1,
      "message": "LGTM too with Austin\u0027s other comment.",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "837c8360_84f6d214",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-19T08:16:43Z",
      "side": 1,
      "message": "Oh, is there a more general fix we could do in the Vulkan backend that would workaround all such issues?",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66780135_63c67df6",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-19T08:27:26Z",
      "side": 1,
      "message": "I think if the developer doesn\u0027t set depthWriteEnabled to true, the expected behavior should be that the depth attachment will not be changed whether we change the depth value with gl_FragDepth or not.\n\nIn this test I think it safe to turn depthWriteEnabled on, but in other cases it seems it is not correct to do so. What do you think?",
      "parentUuid": "837c8360_84f6d214",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d75d2712_6a50e009",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-19T08:47:43Z",
      "side": 1,
      "message": "Ah maybe we should add validation in the WeBGPU spec to disallow writing gl_FragDepth if depthWriteEnabled is not true?",
      "parentUuid": "66780135_63c67df6",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57d207f9_9c924af0",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-19T17:07:46Z",
      "side": 1,
      "message": "^makes sense to have the validation on render pipeline creation. Yay, more stuff to validate and reflect from the shader!",
      "parentUuid": "d75d2712_6a50e009",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fcc5ca7_942ad444",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-19T17:24:50Z",
      "side": 1,
      "message": "Opened https://github.com/gpuweb/gpuweb/issues/1013 for this and similar issues.",
      "parentUuid": "57d207f9_9c924af0",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ec88c71_e3b43897",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-19T23:58:29Z",
      "side": 1,
      "message": "Reading Dzmitry\u0027s comment there now, it would indeed be unfortunate that you can\u0027t manually set depth to pass/reject fragments without writing it. Given that this works in the other backends, it\u0027s probably not a limitation in the API. Jiawei, do you think a driver fix is possible? We could also implement a workaround for the issue in Dawn.",
      "parentUuid": "7fcc5ca7_942ad444",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20fcb3c4_0f887e2e",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-20T09:59:39Z",
      "side": 1,
      "message": "I don\u0027t know how we could implement a workaround because on this Intel driver we have no way to say \"please perform the late depth check but not the late depth write\". :/",
      "parentUuid": "4ec88c71_e3b43897",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f044855_4569c9d9",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-20T12:24:40Z",
      "side": 1,
      "message": "OK. Then can we merge this CL now? With this CL at least we can ensure that copying from the stencil aspect works well on Linux Intel Vulkan driver.",
      "parentUuid": "20fcb3c4_0f887e2e",
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faee81d0_d3b02946",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-19T08:11:45Z",
      "side": 1,
      "message": "This test still fails even when we enable depth writing so I don\u0027t add change to this test.",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a63bd6f_19ff4c10",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-19T17:07:46Z",
      "side": 1,
      "message": "It still writes depth though so I think we should update it. Could be failing for more than one reason.",
      "parentUuid": "faee81d0_d3b02946",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b28f747b_aade80d1",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-20T00:32:31Z",
      "side": 1,
      "message": "I tried enabling depth writing on this test but it failed with swift shader. You can see the try bot result on PatchSet 4 for more details.",
      "parentUuid": "4a63bd6f_19ff4c10",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "065b234c_2cd0d1fd",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-20T00:47:03Z",
      "side": 1,
      "message": "Oh it is failing everywhere in patch set 4, so I decide to go back to patch set 3.",
      "parentUuid": "b28f747b_aade80d1",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e099c543_8923442e",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-20T00:49:11Z",
      "side": 1,
      "message": "That makes sense.\n\n1. First we clear depth to 0.7\n2. then we do the stencil decrement operation AND write depth to 0.3\n3. Then we check that depth is still 0.7.\n\nSo it makes sense why it fails. Passed before because depthWrite wasn\u0027t enabled.\n\nWe could make a different fragment shader for that test and not write 0.3.\n\nThat being said, I still think maybe we should try to workaround this issue in the backend.",
      "parentUuid": "b28f747b_aade80d1",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113267d6_67bcbc87",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-20T00:54:50Z",
      "side": 1,
      "message": "Enn I think the workaround should be rewriting the shader to make all the writes to gl_FragDepth don\u0027t work when depthWriteEnabled is false (for example, renaming all the references of gl_FragDepth so that it will be a common global variable)",
      "parentUuid": "e099c543_8923442e",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6d6edf7_f162d034",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-20T00:56:47Z",
      "side": 1,
      "message": "I am writing a pure Vulkan sample to reproduce this issue and report to Mesa. I\u0027ll inform you when I send out the bug report.",
      "parentUuid": "113267d6_67bcbc87",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c419a29_23413785",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-20T00:59:18Z",
      "side": 1,
      "message": "Changing gl_FragDepth should still affect whether or not the depth test passes though.\n\nWe\u0027d have to copy out the original contents of the depth texture, and then copy them back in order to preserve depth. That\u0027s a bit unfortunate though because it would require ending the render pass.\n\nOr maybe we could sample the contents out to another texture, and them sample them again to write them back. That way we don\u0027t have to end the render pass.\n\nBoth are pretty slow workarounds though...",
      "parentUuid": "113267d6_67bcbc87",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a040e532_8b096e69",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-20T15:56:54Z",
      "side": 1,
      "message": "We can\u0027t sample because the lastest depth writes in the pixel backends would need to be visible to the FS, which is basically ending the render pass (and not even clear if it is possible to produce the correct barrier in Vulkan.)",
      "parentUuid": "6c419a29_23413785",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d9c83ec_3f1e76d7",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-09-30T01:28:19Z",
      "side": 1,
      "message": "Sorry for the delay. I\u0027ve reported this issue to Mesa:\nhttps://gitlab.freedesktop.org/mesa/mesa/-/issues/3576\n\nOn the latest Intel Mesa driver the test will pass after quite a long time (about 8 seconds), while it can finish immediately on AMD and NVidia, so it should still be an issue inside Intel Mesa driver.",
      "parentUuid": "a040e532_8b096e69",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6573c1d_ab7b4560",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-30T09:47:49Z",
      "side": 1,
      "message": "Uh discussions seem to be around whether the test app is correct and not the bug, that\u0027s mildly annoying. Hopefully Mesa takes a look and fixes it soon!",
      "parentUuid": "3d9c83ec_3f1e76d7",
      "range": {
        "startLine": 153,
        "startChar": 30,
        "endLine": 153,
        "endChar": 45
      },
      "revId": "4b75aac4c86e8e440c6e95407e49fa1115035113",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}