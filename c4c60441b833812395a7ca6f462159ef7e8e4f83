{
  "comments": [
    {
      "key": {
        "uuid": "895b97f9_330650a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-13T23:39:20Z",
      "side": 1,
      "message": "PTAL! And here\u0027s the chromium side change: https://chromium-review.googlesource.com/c/chromium/src/+/2296011",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cab4000_a32ce424",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-07-14T01:30:02Z",
      "side": 1,
      "message": "LGTM assuming Austin\u0027s feedback is addressed.  \n\nI had typed up additional comments but Austin stole all of my good ones before I could hit reply. :-)",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4fa6f82_0048506b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T01:47:10Z",
      "side": 1,
      "message": "A high level thought I had while reviewing this code:\n\nWe should think about how adapter discovery and querying adapters will ultimately work in Chrome.\n\nRight now, the Chromium CL works because there is only a single adapter in the vector of the adapters, so the first one is always the D3D12 adapter we want to use.\n\nEventually, Chromium should probably cache this adapter discovery stuff, and not do it once per tab for multiple reasons:\n - caching will be faster\n - eventually we\u0027ll probably have ways for devs to ask for SwiftShader or the integrated / discrete GPU (with maybe slow or non-existent swapchain support b.c. we still need the same as ANGLE for that), or a compute-only adapter if there\u0027s such a thing.\n\nWhich means Dawn needs something more like \"GetCachedAdapterWithThesePropertiesOrTryDiscover\"\n\nThis might come after we make adapter discovery match webgpu.h though.",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb70810_448e4b51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-07-14T01:59:53Z",
      "side": 1,
      "message": "Caching introduces its own problems such as needing to invalidate the cache when the factory is no longer current. Probably more trouble than it\u0027s worth. \n\nToday, Chromium always fills in the IDXGIAdapter preference but when we get cross adapter handling working, Chromium may put nullptr. In this case, Dawn can use the power preference and list of extensions to inform its decision. Note that Chromium will still ask for a specific DXGI adapter for WebXR, where the XR runtime demands it use a specific one. \n\nWe could put the beginning of this as part of this change by having the code as the SharedImageManager for the preferred adapter instead of asking ANGLE but I do not have a strong preference either way.",
      "parentUuid": "b4fa6f82_0048506b",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86c861ca_0212c6ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-14T12:15:26Z",
      "side": 1,
      "message": "LGTM",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80fdc78d_3de40816",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T01:25:19Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 130,
        "startChar": 12,
        "endLine": 132,
        "endChar": 51
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a0c1e7f_e2991020",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80fdc78d_3de40816",
      "range": {
        "startLine": 130,
        "startChar": 12,
        "endLine": 132,
        "endChar": 51
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4af097a_6d1c4b6b",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-07-14T01:30:02Z",
      "side": 1,
      "message": "@Corentin and @Austin, does Dawn coding standards still prefer that you check against nullptr explicitly?",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 33
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fe5b2e1_f004ffd1",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T01:47:10Z",
      "side": 1,
      "message": "I *think* the rule is not to do implicit checks with raw pointers, but if the class has an \"operator bool()\" defined, then it\u0027s okay to just say if (foo) { .. }\n\nCorentin could confirm though",
      "parentUuid": "d4af097a_6d1c4b6b",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 33
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e71f1ff_816df404",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-14T12:15:26Z",
      "side": 1,
      "message": "We usually check against nullptr directly, but it seems to be somewhat unpopular so let\u0027s check against nullptr for this one and discuss offline.",
      "parentUuid": "1fe5b2e1_f004ffd1",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 33
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7f41b45_dcaa8253",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e71f1ff_816df404",
      "range": {
        "startLine": 144,
        "startChar": 11,
        "endLine": 144,
        "endChar": 33
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eca6fbea_4b79dc17",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-14T12:15:26Z",
      "side": 1,
      "message": "nit: I think it might be possible to do this:\n\n  return {{std::move(adapter)}}",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 149,
        "endChar": 39
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33db168d_af7aee2a",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "I don\u0027t think this works because unique ptr is not copyable :(",
      "parentUuid": "eca6fbea_4b79dc17",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 149,
        "endChar": 39
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c5e97b_51cb8234",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-14T12:15:26Z",
      "side": 1,
      "message": "DiscoverAdapters is somewhat badly named but its semantic is to discover only the adapters corresponding to the options. So we shouldn\u0027t discover the default adapters here. This means that we could have an early return:\n\n  if (!options-\u003edxgiAdapter) { return {}; }",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3e63d2a_b2e29d20",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7c5e97b_51cb8234",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6947c0b_37de83af",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-14T12:15:26Z",
      "side": 1,
      "message": "nit: CheckHRESULT for graceful error handling.",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3a2955d_b8521844",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6947c0b_37de83af",
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da3769a6_fe7ee23f",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T01:25:19Z",
      "side": 1,
      "message": "perhaps if this fails we need to return nullptr, and then not push that into the vector at [1]\n\nEven better, this should probably return ResultOrError\u003cstd::unique_ptr\u003cAdapterBase\u003e\u003e",
      "range": {
        "startLine": 160,
        "startChar": 8,
        "endLine": 160,
        "endChar": 60
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e11f0109_e9a977da",
        "filename": "src/dawn_native/d3d12/BackendD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da3769a6_fe7ee23f",
      "range": {
        "startLine": 160,
        "startChar": 8,
        "endLine": 160,
        "endChar": 60
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05941988_1111c611",
        "filename": "src/dawn_native/d3d12/BackendD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T01:25:19Z",
      "side": 1,
      "message": "I believe this can be private. In general, it\u0027s nice to have a separation between the function declarations which override the base class, and the functions which are private implementation details.\n\nBetter than private, it could probably be an a free function in BackendD3D12.cpp in the anonymous namespace, like \"CreateFactory\" is.",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f01eda4_b002e7dc",
        "filename": "src/dawn_native/d3d12/BackendD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05941988_1111c611",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "340a045e_c1ef5522",
        "filename": "src/dawn_native/d3d12/D3D12Backend.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-14T01:25:19Z",
      "side": 1,
      "message": "nit: std::move(adapter)",
      "range": {
        "startLine": 73,
        "startChar": 74,
        "endLine": 73,
        "endChar": 81
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1275c554_2871d3a7",
        "filename": "src/dawn_native/d3d12/D3D12Backend.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-07-14T20:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "340a045e_c1ef5522",
      "range": {
        "startLine": 73,
        "startChar": 74,
        "endLine": 73,
        "endChar": 81
      },
      "revId": "c4c60441b833812395a7ca6f462159ef7e8e4f83",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}