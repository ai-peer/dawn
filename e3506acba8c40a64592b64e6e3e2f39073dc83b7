{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b0e9b8d5_392d1861",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: internal",
      "range": {
        "startLine": 7,
        "startChar": 8,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a6cabb5_708e38a7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: pipelines, also \"adds the first internal pipeline\" maybe?",
      "range": {
        "startLine": 13,
        "startChar": 29,
        "endLine": 13,
        "endChar": 36
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15970441_3712a3e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: BlitTextureForBrowser.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 21
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96a3b2a0_e3245dfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-20T09:37:33Z",
      "side": 1,
      "message": "This patch is almost ready to send for reviewing. Except the issue I mentioned in the comments. I\u0027d like to send it out to collect comments about the internal pipeline and the thoughts on the issue.\n\nThanks !",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a98067f_116855ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "Sorry I haven\u0027t looked at the test yet. I think the structure of the implementation could be much simpler and have all the logic much more clear by having it all in a single file, and doing more operations in the shader.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0afc63d4_b87a0c52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T01:42:07Z",
      "side": 1,
      "message": "Hi, Corentin,\nThanks for the comments.\nI\u0027d like to emphasize that this patch is most focus on how the internal pipeline works(not only for CopyIB, I try to make it general to minimum the future changes to the arch).\n\nSo I left some comments to describe the workflow. PTAL and thanks!",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70de38d8_98c37681",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 994,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "Won\u0027t this need more arguments like flip-Y, rotations and un/premul alpha?\n\nAlso the name \"blit\" is a bit misleading because it still requires that each texel is copied to a single texel. Maybe copy texture for browser?",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd1a99c5_1c8c1b6b",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 994,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T01:12:01Z",
      "side": 1,
      "message": "Do you think it is Ok for me to add the flipY/premulAlpha parameter when I really support it? W",
      "parentUuid": "70de38d8_98c37681",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf0334f_3b0af0e2",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 994,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-21T02:15:45Z",
      "side": 1,
      "message": "should these parameters go in an options dictionary ? or perhaps a structure extending texture copy view ?",
      "parentUuid": "fd1a99c5_1c8c1b6b",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45401548_fc965c3b",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: also keep src/dawn_native/CMakeLists.txt in sync.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de9ac2f3_33370088",
        "filename": "src/dawn_native/BlitTextureForBrowserHelper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "We\u0027re working in 2D so if we need to support rotations, 2 by 2 is enough, if we need to support translations then 3 by 3 is enough.\n\nBut why not do the computations in the shader like for ANGLE\u0027s BlitGL shader?\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/angle/src/libANGLE/renderer/gl/BlitGL.cpp;l\u003d1286\n\nBasically vertices could be generated by the shader, then the transform would be specified in the uniform buffer. All the data apart from the source texture would be in that single uniform buffer. It might be possible to have a single VS and a single FS that look at the uniform buffer and make all the decisions. Then you can have a single ShaderModule that contains both the vertex and the fragment.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2052041b_6d5978d7",
        "filename": "src/dawn_native/BlitTextureForBrowserHelper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T01:42:07Z",
      "side": 1,
      "message": "My bad. I think that\u0027s a better way. Originally, in this patch, I\u0027d like to focus on the internal pipeline work and want to have a basic shader to test the whole system. But I think this patch can do better on CopyIB work.\nThanks for this suggestion!",
      "parentUuid": "de9ac2f3_33370088",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ded08b6_647ef6c9",
        "filename": "src/dawn_native/BlitTextureForBrowserHelper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-21T02:15:45Z",
      "side": 1,
      "message": "nit: break up the rows of matrixes with \"\\\\\" at the end so they go on new lines.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea020c79_f6b0211e",
        "filename": "src/dawn_native/BlitTextureForBrowserHelper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-21T02:15:45Z",
      "side": 1,
      "message": "don\u0027t need all the \"\u003dnullptr\" since you default initialize the struct at the top",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34515b31_c6ed1913",
        "filename": "src/dawn_native/BlitTextureForBrowserHelper.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "This function doesn\u0027t have any state and be outside of the structure.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c51a8f2_2b0cd89c",
        "filename": "src/dawn_native/BlitTextureForBrowserHelper.h",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "Ditto for this function. It could reuse the buffers, but overall we only need a single vertex buffer (or can even hardcode vertices in the VS) so we can recreate it every time.\n\nBasically this file\u0027s .cpp will contain two functions without state, and a lot of helper functions that create the shadermodule, pipeline, etc.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b961b9b7_b930087d",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "I don\u0027t think we need this ASSERT, backends always call Initialize, and the pipeline store seems like it is independent of the default queue.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c968850_39284203",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "I\u0027m not sure I got all of what\u0027s happening here, but it seems much more complicated than it needs to be.\n\nstruct InternalPipelineStore {\n    some_map\u003ckey, Ref\u003cShaderModule\u003e\u003e copyForBrowserFSes;\n    Ref\u003cShaderModule\u003e copyForBrowserVS;\n    some_map\u003ckey, Ref\u003cRenderPipeline\u003e\u003e copyForBrowserPipelines;\n}\n\nThen in DoCopyTextureForBrowser() {\n   pipelineStore \u003d device-\u003eGetPipelineStore();\n\n   if (pipelineStore.copyForBrowserVS \u003d\u003d nullptr) { create it }\n   // same for FS\n\n   // same for the pipeline\n\n   // create the objects and encode the commands.\n}\n\nA lot of the complexity in the current form of this CL is removed by putting all the logic together in a single file. The pipeline store is jut a dumb structure that stores maps of references to create objects, that\u0027s it.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4cc517c_cdc6d694",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T01:42:07Z",
      "side": 1,
      "message": "For CopyIB, yes. But the whole internal pipeline works in my mind like this:\n1. Precompile all of the shaders (not only CopyIB in future) to shader module\n2. Read all pipeline descriptor (not only CopyIB in future) to create the pipeline and cache it.\nAnd when copyTextureForBrowser(Or other internal API) need it,\nit just get the prebuilt pipeline.\n\nThat\u0027s the reason I provide the center internal pipeline helper.\n\nI think that\u0027s different from the above suggestions.But persoanlly, I think current implementation is more general and will benefit incoming internal shaders.\n\nWDYT?",
      "parentUuid": "7c968850_39284203",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4d5fd93_81536f04",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-21T02:15:45Z",
      "side": 1,
      "message": "I understand the concerns about have more stuff precompiled in the future. That\u0027s definitely an important improvement we should make later. I think though we should try to use more of the Dawn API to keep it simple for now.\n\nWe can have a simple InternalStore mapping as Corentin said from Key \u003d\u003e ShaderModule and/or Key \u003d\u003e Pipeline.\n\nTo support better precompilation in the future, we can add a way for Dawn to Serialize its InternalStore to a binary blob. Linking Dawn into Chrome then becomes a two-step process where you build Dawn, use Dawn to generate the serialized internal pipelines, and then embed the serialized blob into the binary. At runtime, we load Dawn and pass in a pointer to the serialized internal pipelines. This is good because it:\n - reuses existing code paths to create the internal pipelines\n - keeps the precompilation optimization mostly outside of Dawn\n - lets embedders of Dawn (like Skia) also precompile pipelines\n - fits in nicely with the pipeline cache which we also load from a serialized blob. the internal pipelines would essentially have their own VkPipelineCache or D3D12 pipeline library",
      "parentUuid": "e4cc517c_cdc6d694",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3878e526_f85f7c2f",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T02:20:58Z",
      "side": 1,
      "message": "More about this. I mean your suggestion is something like not prebuilt anything but do it in a lazy mode. And the file here is prebuilt everything.",
      "parentUuid": "e4cc517c_cdc6d694",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bc800c8_88dd4c99",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-21T02:31:02Z",
      "side": 1,
      "message": "yea - basically always do it lazy, and when we want to optimize this, we preload the internal store the the precompiled pipelines / shader modules so that the compile never happens at runtime.",
      "parentUuid": "3878e526_f85f7c2f",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66da14c0_6914b5f8",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T02:40:31Z",
      "side": 1,
      "message": "Ack. I\u0027ll update this.",
      "parentUuid": "1bc800c8_88dd4c99",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48b0741a_0bbcb46b",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-21T02:15:45Z",
      "side": 1,
      "message": "? are these parameters going to influence the the shaders or will we select an entirely different pipeline?",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 104,
        "endChar": 37
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de1ef78e_ad208f41",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-21T02:40:31Z",
      "side": 1,
      "message": "The shaders.",
      "parentUuid": "48b0741a_0bbcb46b",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 104,
        "endChar": 37
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe7265d6_dbcd41fb",
        "filename": "src/dawn_native/InternalPipelineStore.h",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "We should use a Ref\u003c\u003e so that we don\u0027t need to call Release ourselves in the destructor.",
      "range": {
        "startLine": 41,
        "startChar": 19,
        "endLine": 41,
        "endChar": 37
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f748e4_7ea7f4c8",
        "filename": "src/dawn_native/InternalPipelineStore.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 42,
        "startChar": 19,
        "endLine": 42,
        "endChar": 35
      },
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8f7874_ed03847e",
        "filename": "src/dawn_native/Queue.cpp",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: this could be in the BlitInternal call because in the future it is very likely the creation of the helper will be able to fail (for example if it compiles shader modules).",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8afefae_3217704b",
        "filename": "src/dawn_native/Queue.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: can be removed?",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14b7332b_8e54ebf6",
        "filename": "src/dawn_native/internal_pipelines/shaders/BlitTextureVertexWGSL.h",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "This shader code could just be inside a static variable in the CopyTextureForBrowserHelper file.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3076819_3b752ccf",
        "filename": "src/dawn_native/internal_pipelines/shaders/BlitTextureVertexWGSL.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "nit: Use C++11\u0027s raw strings that can contain newlines like so: R\"(\n    some\n    code\n    here\n)\";",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb22913e_0c0e671e",
        "filename": "src/dawn_native/internal_pipelines/shaders/Passthrough4Channel2DTexturesFragmentWGSL.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "ditto",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9201751c_7a733a53",
        "filename": "src/dawn_native/internal_pipelines/shaders/Passthrough4Channel2DTexturesFragmentWGSL.h",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T12:14:30Z",
      "side": 1,
      "message": "ditto raw string",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d30065fc_00a53961",
        "filename": "src/tests/end2end/BlitTextureForBrowserTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-20T09:37:33Z",
      "side": 1,
      "message": "This test can pass in a smaller size texture. I tried 1x1, 12 x 1 or 6 x  6 in my local machine. And the test works fine.\nBut when it becomes a bit large in width/height, the value will have errors, for example if we have the size 13 x 1, in my local machine.\nExpected:\n00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00 07 00 00 00 08 00 00 00 09 00 00 00 0A 00 00 00 \n// expected values\n0B 00 00 00 0C 00 00 00\nActual:\n00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00 07 00 00 00 08 00 00 00 09 00 00 00 0A 00 00 00 \n// error values\n0C 00 00 00 0C 00 00 00\n\nI suspect it is the sampler precise issue(again. the 10 x 1 or 6 x 6 size texture can pass the test). But I\u0027m still in trying. Send this out to see your comments about this.",
      "revId": "e3506acba8c40a64592b64e6e3e2f39073dc83b7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}