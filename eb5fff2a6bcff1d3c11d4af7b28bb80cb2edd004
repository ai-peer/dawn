{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6c1d03d6_9fb74e19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-17T14:56:45Z",
      "side": 1,
      "message": "James there is a small question for you below.",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35db0d9b_d5f0c23f",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-17T14:56:45Z",
      "side": 1,
      "message": "The IR validation doesn\u0027t like this but I can\u0027t find how to make the call not happen. I tried replacing the reulst but the IR validation wasn\u0027t happy either. Any pointers on what to do here?",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f1fd1aa_e51f4244",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-20T12:03:43Z",
      "side": 1,
      "message": "I believe you want:\n\n```\n            call-\u003eResult(0)-\u003eReplaceAllUsesWith(dimensions-\u003eResult(0));\n            call-\u003eReplaceWith(dimensions);\n            call-\u003eDestroy();\n```\n\nJames has been trying to add new constructors \u0026 builder methods for instructions so you can reuse the result value of the old instruction and pass that to the new (without destroying the old value, allocating the new, fixing up usages), but I don\u0027t see one for `Binary` - so this is probably the best you have right now. See `ir::Builder::` _Blah_ `WithResult()`",
      "parentUuid": "35db0d9b_d5f0c23f",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f998e7e6_66d3b0d6",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-20T12:23:48Z",
      "side": 1,
      "message": "Thank you, with your pointers I was able to make this work in the latest patchset.\n\nI\u0027m surprised that there isn\u0027t an ir::Builder::Replace(instruction, replacement) that does all the following automatically.\n\nOr even better:\n\n```\ncall-\u003eReplaceWithBlock([\u0026] {\n  auto* vec2u \u003d ty.vec2\u003cu32\u003e();\n\n  auto* visible_size \u003d b.Access(vec2u, params, 12_u);\n  auto* vec2u_1_1 \u003d b.Construct(vec2u, 1_u, 1_u);\n\n  // The return value of the block would replace call-\u003eResult(0) (and ASSERTed it is the same number of results)\n  return {b.Add(vec2u, visible_size, vec2u_1_1)};\n});\n```",
      "parentUuid": "7f1fd1aa_e51f4244",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32c51e29_b37c4fbb",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-20T12:25:06Z",
      "side": 1,
      "message": "Or\n\n```\nb-\u003eReplaceWithBlock(call, [\u0026] {\n  auto* vec2u \u003d ty.vec2\u003cu32\u003e();\n\n  auto* visible_size \u003d b.Access(vec2u, params, 12_u);\n  auto* vec2u_1_1 \u003d b.Construct(vec2u, 1_u, 1_u);\n\n  // The return value of the block would replace call-\u003eResult(0) (and ASSERTed it is the same number of results)\n  return {b.Add(vec2u, visible_size, vec2u_1_1)};\n});\n```",
      "parentUuid": "f998e7e6_66d3b0d6",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0530992e_34a6f298",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-20T13:22:35Z",
      "side": 1,
      "message": "Yeah, a helper would be... helpful. I\u0027m thinking that maybe:\n\n```c\nb.Replace\u003c/* new instruction */ Binary\u003e(\n    /* instruction being replaced */ dimensions, \n    /* new instruction arguments\n       old instruction\u0027s result automatically passed as first\n       argument to the new instruction\u0027s ctor */ ...);\n```\n\nMight be a nice API. This would then be simplified to:\n\n```\nb.Replace\u003cBinary\u003e(call, BinaryOp::kAdd, visible_size, vec2u_1_1);\n```\n\n@jrprice@google.com for thoughts.",
      "parentUuid": "32c51e29_b37c4fbb",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66799989_cc4a6d66",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-22T21:14:31Z",
      "side": 1,
      "message": "Yeah, we can certainly explore making instruction replacement simpler with more builder helpers.\n\nIn the meantime, you can use the insertion helper and the `SetResults()`+`DetachResult()` pattern to slightly improve what you have here:\n```\nb.InsertBefore(call, [\u0026] {\n  auto* visible_size \u003d b.Access\u003cvec2\u003cu32\u003e\u003e(params, 12_u);\n  auto* vec2u_1_1 \u003d b.Splat\u003cvec2\u003cu32\u003e\u003e(1_u);\n  auto* dimensions \u003d b.Add\u003cvec2\u003cu32\u003e\u003e(visible_size, vec2u_1_1);\n  dimensions-\u003eSetResults(Vector{call-\u003eDetachResult()});\n});\ncall-\u003eDestroy();\n```",
      "parentUuid": "0530992e_34a6f298",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3a0d05e_ef6292ca",
        "filename": "src/tint/lang/core/ir/transform/multiplanar_external_texture.cc",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-23T09:37:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66799989_cc4a6d66",
      "revId": "eb5fff2a6bcff1d3c11d4af7b28bb80cb2edd004",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}