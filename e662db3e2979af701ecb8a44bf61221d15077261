{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "770635ad_c7d8159e",
        "filename": "src/tint/lang/core/number.h",
        "patchSetId": 6
      },
      "lineNbr": 436,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-20T14:51:00Z",
      "side": 1,
      "message": "This can overflow, and the one below can underflow. Should we be using the checked methods instead of adding these overloads?",
      "revId": "e662db3e2979af701ecb8a44bf61221d15077261",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10c6e516_6831e4cb",
        "filename": "src/tint/lang/core/number.h",
        "patchSetId": 6
      },
      "lineNbr": 436,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-20T16:58:48Z",
      "side": 1,
      "message": "I considered this, but how would you report an overflow / underflow? UBSAN will already catch signed overflow. If you need to add / subtract these (like I need to in the test cases), you\u0027ll just end up inlining this logic - and you haven\u0027t gained any safety.",
      "parentUuid": "770635ad_c7d8159e",
      "revId": "e662db3e2979af701ecb8a44bf61221d15077261",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd995e60_5b2803d0",
        "filename": "src/tint/lang/core/number.h",
        "patchSetId": 6
      },
      "lineNbr": 436,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-20T17:37:30Z",
      "side": 1,
      "message": "Sorry, wasn\u0027t suggesting these should check for over/under flow. I was suggesting these shouldn\u0027t exist and we use the checked methods instead.\n\nIf they\u0027re only test code, it may not matter, but they will get used eventually if they exist.\n\nI\u0027m not sure what you mean by inlining and losing safety. If you iniline, you\u0027ll still need to check for over/under flow.",
      "parentUuid": "10c6e516_6831e4cb",
      "revId": "e662db3e2979af701ecb8a44bf61221d15077261",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bedfafd6_65a9a5cb",
        "filename": "src/tint/lang/core/number.h",
        "patchSetId": 6
      },
      "lineNbr": 436,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-20T17:47:23Z",
      "side": 1,
      "message": "\u003e I was suggesting these shouldn\u0027t exist and we use the checked methods instead.\n\nI use it here [`[1]`](https://dawn-review.googlesource.com/c/dawn/+/175248/comment/d65c8026_c72de9b9/). Using the checked methods isn\u0027t viable here.\n\n\u003e If you iniline, you\u0027ll still need to check for over/under flow.\n\nI don\u0027t want to / need to in my place of usage.",
      "parentUuid": "bd995e60_5b2803d0",
      "revId": "e662db3e2979af701ecb8a44bf61221d15077261",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a30107bb_6b610444",
        "filename": "src/tint/lang/core/number.h",
        "patchSetId": 6
      },
      "lineNbr": 436,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-20T18:04:19Z",
      "side": 1,
      "message": "I don\u0027t think we\u0027ve had any mathematical operators attached to `Number` previously. This is adding 2 for test purposes, but they\u0027ll probably end up getting used for non-test purposes if they exist. So, _should_ they exist, and if they exist should  they be doing overflow/underflow checks (and, yes that may mean they can\u0027t be `+` or `-`).\n\nIf we dont\u0027 care, that\u0027s fine and we can just land this, but it seems like it\u0027s an issue we\u0027ll face using these in the future.\n\nWe do appear to have `operator-` so maybe that\u0027s enough precedent that these don\u0027t check and just convert.",
      "parentUuid": "bedfafd6_65a9a5cb",
      "revId": "e662db3e2979af701ecb8a44bf61221d15077261",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f305f178_ff43b8df",
        "filename": "src/tint/lang/core/number.h",
        "patchSetId": 6
      },
      "lineNbr": 436,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-20T18:47:24Z",
      "side": 1,
      "message": "Yeah, I agree there\u0027s an increased risk of people using the operators without checking for overflow with these, so I\u0027ve just changed the test instead.\n\n\u003e We do appear to have `operator-` so maybe that\u0027s enough precedent that these don\u0027t check and just convert.\n\nThat was actually added in this CL as well. Removed both.",
      "parentUuid": "a30107bb_6b610444",
      "revId": "e662db3e2979af701ecb8a44bf61221d15077261",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}