{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1dbbb09_a659efe5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 47
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ca8a139_f8251f66",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "nit: this is just `true` inside this branch.",
      "range": {
        "startLine": 95,
        "startChar": 38,
        "endLine": 95,
        "endChar": 66
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfff1b2a_1f7098df",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 95,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ca8a139_f8251f66",
      "range": {
        "startLine": 95,
        "startChar": 38,
        "endLine": 95,
        "endChar": 66
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c5c1067_39a87f18",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "nit: this is always `true` in this branch and can be removed.",
      "range": {
        "startLine": 100,
        "startChar": 16,
        "endLine": 100,
        "endChar": 48
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d75f14d7_b8fbe091",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 100,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c5c1067_39a87f18",
      "range": {
        "startLine": 100,
        "startChar": 16,
        "endLine": 100,
        "endChar": 48
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3436fe2_7d881594",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 203,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "I think the \u003d {} takes care of that. If we wanted to make it more explicit, we could add MapRequestType type \u003d MapRequestType::None",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a4e7bb3_64615845",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 203,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3436fe2_7d881594",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dea68f5_b7d49cbf",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 250,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Sorry I failed to realize that the checks at [6] guarded code here from mReadHandle being nullptr. When a non-MAP_READ buffer is mapped for reading, we\u0027ll send a request for reading to the server, and a bad server can tell us it succeeded at which point we mReadHandle is nullptr and we run this switch.\n\nI think we should add validation here instead of keeping [6] because it will also prevent a crash if the buffer is destroyed while the request is in flight.\n\nDitto for writeHandle.",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b45fbb96_8984cf04",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 250,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dea68f5_b7d49cbf",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27229c0d_8a2d95d6",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 317,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "nit: has been?",
      "range": {
        "startLine": 317,
        "startChar": 55,
        "endLine": 317,
        "endChar": 63
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a135d176_c55877f2",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 317,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27229c0d_8a2d95d6",
      "range": {
        "startLine": 317,
        "startChar": 55,
        "endLine": 317,
        "endChar": 63
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe2fa223_ee581f18",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 47
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "note: Here or in a different CL can we update the serial to be a uint64_t? It might be possible to overflow an uint32_t.",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a60f2df_29ad6e0f",
        "filename": "src/dawn_wire/client/Buffer.h",
        "patchSetId": 47
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-08T17:55:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe2fa223_ee581f18",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9aa512a_49854163",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "I think this can be offset \u003e mSize for the overflow check.",
      "range": {
        "startLine": 52,
        "startChar": 20,
        "endLine": 52,
        "endChar": 51
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dfaf083_f5732c07",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 52,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "I think keep it will make offset\u003d0, mSize\u003d0, size\u003d0 still valid. We have a zero-sized test",
      "parentUuid": "d9aa512a_49854163",
      "range": {
        "startLine": 52,
        "startChar": 20,
        "endLine": 52,
        "endChar": 51
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6726c2c7_c0fe6525",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-07T22:38:53Z",
      "side": 1,
      "message": "does WebGPU spec say offset\u003d0, mSize\u003d0, size\u003d0  is invalid? I think it should be valid",
      "parentUuid": "5dfaf083_f5732c07",
      "range": {
        "startLine": 52,
        "startChar": 20,
        "endLine": 52,
        "endChar": 51
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cb8104b_73a4bd30",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 52,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T22:51:12Z",
      "side": 1,
      "message": "Yep it it valid.\n* offset is a multiple of 8.\n* rangeSize is a multiple of 4.\n* offset + rangeSize is less or equal to this.[[size]]\n\nkeep it like this will make this case valid (correct); change to offset \u003e mSize will make this case invalid (incorrect)",
      "parentUuid": "6726c2c7_c0fe6525",
      "range": {
        "startLine": 52,
        "startChar": 20,
        "endLine": 52,
        "endChar": 51
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22af0dd4_ce3feb4e",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-07-08T17:55:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3cb8104b_73a4bd30",
      "range": {
        "startLine": 52,
        "startChar": 20,
        "endLine": 52,
        "endChar": 51
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2727da7b_92f19efd",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-08T19:00:49Z",
      "side": 1,
      "message": "How will it make the case invalid? If the condition is\n\n  (offset \u003e mSize) || (size \u003e mSize - offset) \n  (0 \u003e 0) || (0 \u003e 0 + 0)\n  false || false\n  false",
      "parentUuid": "22af0dd4_ce3feb4e",
      "range": {
        "startLine": 52,
        "startChar": 20,
        "endLine": 52,
        "endChar": 51
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44f0180c_ebdfd453",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "ditto offset \u003c\u003d mSize is sufficient for the overflow check.",
      "range": {
        "startLine": 86,
        "startChar": 23,
        "endLine": 86,
        "endChar": 52
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7b00381_11da61af",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 86,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "44f0180c_ebdfd453",
      "range": {
        "startLine": 86,
        "startChar": 23,
        "endLine": 86,
        "endChar": 52
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b674017e_cbc7decb",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 94,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "ditto",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "622528ab_3a69b3db",
        "filename": "src/dawn_wire/client/ClientInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 94,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "b674017e_cbc7decb",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f27973b_fe48b3dc",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "[7]",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00e9e49e_ff27ccbe",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 133,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "In 64-bit mode this can still overflow after the checks against size_t because size_t is uint64_t. We could check against size_t::max() / 2 above to simplify things, or do a proper overflow check.",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dfd8643_2de5a000",
        "filename": "src/dawn_wire/server/ServerBuffer.cpp",
        "patchSetId": 47
      },
      "lineNbr": 133,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-08T02:35:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00e9e49e_ff27ccbe",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a67cd6_66ff3195",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 61,
        "startChar": 20,
        "endLine": 61,
        "endChar": 57
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25a30c4c_64de9ff6",
        "filename": "src/dawn_wire/server/ServerInlineMemoryTransferService.cpp",
        "patchSetId": 47
      },
      "lineNbr": 61,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T20:53:24Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "d4a67cd6_66ff3195",
      "range": {
        "startLine": 61,
        "startChar": 20,
        "endLine": 61,
        "endChar": 57
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81af08ed_8ab62081",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 368,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Maybe we could FlushClient() just before so we know it is the destruction and not the unmap that causes the destruction.",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65a1f1c7_a25bedf6",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 368,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T22:51:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81af08ed_8ab62081",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5880703_3d07f9cb",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 370,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Below we do the same checks but without buffer.Destroy() and the last FlushClient(). Maybe we should do that, and write extra tests if needed to cover the .Destroy() behavior.",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9edce72c_b8fccc04",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 370,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-08T02:35:20Z",
      "side": 1,
      "message": "Add new tests for explicit wgpuBufferDestroy",
      "parentUuid": "e5880703_3d07f9cb",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee5b9f01_4e6f24bd",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 451,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "nit: this now tests DataUpdate",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 451,
        "endChar": 0
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f31ea88_964be09e",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 451,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T22:51:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee5b9f01_4e6f24bd",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 451,
        "endChar": 0
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8aa2816_1dec82dd",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 451,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-07T22:51:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee5b9f01_4e6f24bd",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 451,
        "endChar": 0
      },
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa5f1fdc_35e06a55",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 887,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Shouldn\u0027t that be done when the server receives the unmap call with [7] ?",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4780dc4d_0bb5847f",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 887,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-08T02:35:20Z",
      "side": 1,
      "message": "Seems it\u0027s because Server::HandleCommandsImpl will early return on failed deserialize command, so the unmap command is not processed.\nhttps://source.chromium.org/chromium/chromium/src/+/main:out/win-Debug/gen/third_party/dawn/src/dawn_wire/server/ServerHandlers_autogen.cpp;l\u003d2421?q\u003dServer::HandleCommandsImpl\u0026ss\u003dchromium\n\nI should add a comment here.",
      "parentUuid": "fa5f1fdc_35e06a55",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48fa68dd_2cd73556",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 925,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-07-05T08:57:26Z",
      "side": 1,
      "message": "Maybe it\u0027s worth adding a test that checks that the write handle is not destroyed (in neither client and server) if the buffer is mappedAtCreation and MAP_WRITE.",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c08296d_9e0e96ab",
        "filename": "src/tests/unittests/wire/WireMemoryTransferServiceTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 925,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2021-07-08T02:35:20Z",
      "side": 1,
      "message": "Add a mappedAtCreation + MapRead and a mappedAtCreation + MapWrite test",
      "parentUuid": "48fa68dd_2cd73556",
      "revId": "8bfba103e2e93d760cbd12b1e9f1b21ba3f1be29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}