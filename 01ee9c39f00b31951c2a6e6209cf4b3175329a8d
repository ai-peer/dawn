{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d75f64bc_b0f3b24f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-05T02:39:38Z",
      "side": 1,
      "message": "PTAL",
      "revId": "01ee9c39f00b31951c2a6e6209cf4b3175329a8d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b626fb_942a629b",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-05T03:54:05Z",
      "side": 1,
      "message": "hi @enga@chromium.org\nIs it safe to call Device::ConsumedError() with the mBufferOrEarlyStatus locked? And is it called with device lock?",
      "range": {
        "startLine": 197,
        "startChar": 44,
        "endLine": 197,
        "endChar": 57
      },
      "revId": "01ee9c39f00b31951c2a6e6209cf4b3175329a8d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acec2088_e38828a4",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-05T23:52:58Z",
      "side": 1,
      "message": "it\u0027s probably better to save the MaybeError into a variable outside the `mBufferOrEarlyStatus` scope. This way you derisk a deadlock if ConsumedError calls an error callback which then goes and touches the buffer again.\n\nalso, you do need to acquire the device lock here before calling ConsumedError.\n\nSecondly, for this, it\u0027s probably better to split the call to FinalizeMapAsync and ConsumedError. That way we don\u0027t need to lock if there is no error.\n\n```\nauto maybeError \u003d (*buffer)-\u003eFinalizeMapAsync();\nif (maybeError.IsError()) {\n  auto deviceLock(GetDevice()-\u003eGetScopedLock());\n  GetDevice()-\u003eConsumedError(std::move(maybeError));\n}\n```",
      "parentUuid": "e3b626fb_942a629b",
      "range": {
        "startLine": 197,
        "startChar": 44,
        "endLine": 197,
        "endChar": 57
      },
      "revId": "01ee9c39f00b31951c2a6e6209cf4b3175329a8d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d595807_b176a63f",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 842,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-05T03:54:05Z",
      "side": 1,
      "message": "same here. Is it called with device lock?",
      "range": {
        "startLine": 842,
        "startChar": 25,
        "endLine": 842,
        "endChar": 38
      },
      "revId": "01ee9c39f00b31951c2a6e6209cf4b3175329a8d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc75b6b9_f433aff6",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 842,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-05T23:52:58Z",
      "side": 1,
      "message": "this one should be ok. ConsumedError does not acquire the lock itself",
      "parentUuid": "9d595807_b176a63f",
      "range": {
        "startLine": 842,
        "startChar": 25,
        "endLine": 842,
        "endChar": 38
      },
      "revId": "01ee9c39f00b31951c2a6e6209cf4b3175329a8d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}