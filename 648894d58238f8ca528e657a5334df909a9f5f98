{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9324803a_87f91e2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1004191
      },
      "writtenOn": "2024-06-10T21:35:19Z",
      "side": 1,
      "message": "Jim, this was another workaround. it took a conservative approach of directly adding `raw_hash_set` in the private deps of dawn_native and dawn_wire.",
      "revId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a512dc8c_04908fd1",
        "filename": "src/dawn/wire/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-10T15:46:55Z",
      "side": 1,
      "message": "Looking at the CMake files of the absl version we use, both `flat_hash_set` and `flat_hash_map` (through raw_hash_map) have `raw_hash_set` as a dependency so why is this needed?",
      "revId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd37fa62_b97e83c2",
        "filename": "src/dawn/wire/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1004191
      },
      "writtenOn": "2024-06-10T16:55:07Z",
      "side": 1,
      "message": "The problem I was hoping to solve was removing the need to explicitly add `raw_hash_set` in the call to `bundle_libraries` in `tools/android/webgpu/src/main/cpp/CMakeLists.txt`. Part of the solution was using namespaced targets.\n\nUpon seeing your comment, I wanted to look deeper into why this was really necessary. Turns out it is unnecessary and the code in `bundle_libraries` should also iterate over the `INTERFACE_LINK_LIBRARIES` (in addition to `LINK_LIBRARIES` as currently done).\n\n`flat_hash_set` and `flat_hash_map` are both header only and don\u0027t have `raw_hash_set` in their `LINK_LIBRARIES`. Instead, it exists in the `INTERFACE_LINK_LIBRARIES`. Learned this by debugging how `absl_cc_library` created libraries.\n\nSo, I propose abandoning this CL and creating a new one which patches `tools/android/webgpu/src/main/cpp/BundleLibraries.cpp` to do the right thing.",
      "parentUuid": "a512dc8c_04908fd1",
      "revId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeb832d0_694b6655",
        "filename": "src/dawn/wire/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-06-10T16:59:50Z",
      "side": 1,
      "message": "Oh that\u0027s a great find! It makes sense to do the fix you suggested. Also out of curiosity, how did you debug this? (my CMake debugging tends to be a LOT of `message(STATUS)` calls)",
      "parentUuid": "dd37fa62_b97e83c2",
      "revId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f65b78_c619b83a",
        "filename": "src/dawn/wire/CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1004191
      },
      "writtenOn": "2024-06-10T17:04:33Z",
      "side": 1,
      "message": "`message(STATUS)` is a perfectly fine way to debug ðŸ˜Š although, `cmake --trace` is useful if you know what to look for. There is an interactive cmake debugger available in VSCode and Visual Studio IDE that I\u0027ve not used, but will give a try some time - https://devblogs.microsoft.com/cppblog/cmake-debugger-allows-you-to-debug-your-cmake-scripts-and-more/",
      "parentUuid": "eeb832d0_694b6655",
      "revId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "648894d58238f8ca528e657a5334df909a9f5f98",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}