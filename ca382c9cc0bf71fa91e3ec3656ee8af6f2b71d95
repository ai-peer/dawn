{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c8076dc5_af4bdc1e",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-21T01:23:30Z",
      "side": 1,
      "message": "`\u003e\u003d` would suffice I think\n\nthat said - might as well just keep one buffer around instead of 8? would make this code simpler as well. was there a reason you did it this way?",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0b237d8_7977b17d",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-05-21T10:21:19Z",
      "side": 1,
      "message": "With D3dD11, partially update uniform buffer is suboptimal. So it is better to always provide a buffer with the request size.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d11/BufferD3D11.cpp;l\u003d643?q\u003dBufferD3D11.cpp\u0026ss\u003dchromium",
      "parentUuid": "c8076dc5_af4bdc1e",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f178ff_c4568575",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-22T01:10:35Z",
      "side": 1,
      "message": "I see. So the reason this isn\u0027t great is that it\u0027s not obvious, and the reason for the implementation is unintuitive unless you know it\u0027s for a specific d3d11 case.\n\nIt makes me think this is simply the wrong abstraction because it doesn\u0027t work well across backends. Perhaps a better alternative would be something like DynamicUploader, but specific for uniform buffers (or DynamicUploader with custom usages). I know dynamic uploader as written isn\u0027t ideal for d3d11 either, but that is also something that could be reworked. Improving that system would be better than adding this odd recycling mechanism.",
      "parentUuid": "e0b237d8_7977b17d",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91c03b7e_7ffe9085",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-22T01:39:02Z",
      "side": 1,
      "message": "For now, I think the best short term solution is to have a single buffer.\nWriteBuffer should be improved on D3D11. Perhaps you can use D3D11_COPY_NO_OVERWRITE instead of going through the staging buffer. This would benefit other usages of uniform buffers as well - so there is broader positive impact.\n\nIf that improvement is not sufficient, then we could lookinto having a fancier DynamicUploader abstraction that supports uniform usage - or with WebGPU push constants when that is added.",
      "parentUuid": "d3f178ff_c4568575",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "010441c7_c0873bb9",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-05-22T02:00:15Z",
      "side": 1,
      "message": "For most common use cases, a render pass just has one attachment. Especially, GetOrCreateTemporaryUniformBuffer() will only be called with 16 for graphite [1].\n\nEven for edge cases, webgpu render pass can only have max 8 color attachments. It shouldn\u0027t cause any thing.\n\nFor D3D11_COPY_NO_OVERWRITE, I think it means the API user will guarantee, the UpdateSubresourc1() call will not overwrite buffer\u0027s range which is being used by GPU, so the call can update the buffer immediately without any synchronization.\n  \n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/src/gpu/graphite/dawn/DawnCommandBuffer.cpp;l\u003d176;drc\u003dc0265133106c7647e90f9aaa4377d28190b1a6a9;bpv\u003d1;bpt\u003d1?q\u003ddawncommandbuffer.cpp\u0026ss\u003dchromium%2Fchromium%2Fsrc:third_party%2Fskia%2Fsrc%2Fgpu%2Fgraphite%2Fdawn%2F",
      "parentUuid": "91c03b7e_7ffe9085",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db26f592_18e5f822",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-05-22T02:05:34Z",
      "side": 1,
      "message": "https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ne-d3d11-d3d11_map#meaning-of-d3d11-map-write-no-overwrite\n\nD3D11_COPY_NO_OVERWRITE document is not clear. I think it is similar to D3D11_MAP_WRITE_NO_OVERWRITE.",
      "parentUuid": "010441c7_c0873bb9",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e71b41dd_35c3098b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-22T02:20:17Z",
      "side": 1,
      "message": "If it\u0027s very commonly 16, then reusing a single buffer should be fine, right?\nThen later you can improve the D3D11 implementation for more rare situations.\n\nre D3D11_COPY_NO_OVERWRITE: ok, we should investigate and understand what it does then",
      "parentUuid": "db26f592_18e5f822",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee87ea4_7409bff3",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-05-22T14:02:39Z",
      "side": 1,
      "message": "Yes. So I can simplify the code by just keep one recent used buffer, and reuse it when the next request size is the same, and release it and create a new one, if size is different. I think it should cover most cases.",
      "parentUuid": "e71b41dd_35c3098b",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a7a44f6_a2d49511",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2466,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-05-22T14:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ee87ea4_7409bff3",
      "range": {
        "startLine": 2466,
        "startChar": 12,
        "endLine": 2466,
        "endChar": 37
      },
      "revId": "ca382c9cc0bf71fa91e3ec3656ee8af6f2b71d95",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}