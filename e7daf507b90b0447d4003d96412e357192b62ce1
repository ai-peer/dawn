{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c1978bf1_48e57311",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d0fcbd2_8ed4e3e8",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "Can\u0027t we lock only after the validation here? All the validation should be safe to do concurrently. Likewise for the compute passes.",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2821cb92_55ff0cb2",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T19:26:07Z",
      "side": 1,
      "message": "Done. This is a bit tricky since there is a lot of internal code calling `BeginRenderPass` and mutex might already be locked before entering this method. For example, queue.APICopyExternalTextureForBrowser() -\u003e BeginRenderPass()",
      "parentUuid": "3d0fcbd2_8ed4e3e8",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b3dd376_b906a856",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "nit: maybe `|| IsD3D11()` now ðŸ˜„ (and we should add the backend to the params at the bottom)",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "452d250c_079503e9",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T19:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b3dd376_b906a856",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6abec58_748cbd6d",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T11:22:53Z",
      "side": 1,
      "message": "I tried to do MSAA resolve to a mip level of a texture. However, D3D12 debug layer threw this error:\n```\nD3D12 ERROR: ID3D12CommandQueue::ExecuteCommandLists: Using BeginRenderPass on\nCommand List (0x00000264694F1EC0:\u0027Unnamed ID3D12GraphicsCommandList Object\u0027):\nResource state (0x0: D3D12_RESOURCE_STATE_[COMMON|PRESENT]) of resource\n(0x0000026469480430:\u0027Dawn_InternalTexture\u0027) (subresource: 0) is invalid for use as\na Render Pass Resolve Dest.  Expected State Bits (all): 0x1000:\nD3D12_RESOURCE_STATE_RESOLVE_DEST, Actual State: 0x0:\nD3D12_RESOURCE_STATE_[COMMON|PRESENT], Missing State: 0x1000:\nD3D12_RESOURCE_STATE_RESOLVE_DEST. [ EXECUTION ERROR #538:\nINVALID_SUBRESOURCE_STATE]\n```\n\nIt seems the state transition wasn\u0027t done correctly.\nNot sure this is correct way to do that. The error won\u0027t be thrown if `always_resolve_into_zero_level_and_layer` toggle is turned on.",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0cff9fb_251338d5",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T11:46:16Z",
      "side": 1,
      "message": "OK, this is known issue https://bugs.chromium.org/p/dawn/issues/detail?id\u003d462",
      "parentUuid": "e6abec58_748cbd6d",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "996e80de_f015a873",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "Can you create a WIP CL with this and we can take a look at it later? We knew about this issue but had trouble simplifying the repro case I think. https://bugs.chromium.org/p/dawn/issues/detail?id\u003d988",
      "parentUuid": "e6abec58_748cbd6d",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3a86d30_bf160430",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T19:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "996e80de_f015a873",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2426168_60edbb30",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "nit: Verify that the command buffers executed correctly.",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81931448_151e0484",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T19:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2426168_60edbb30",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aebf1ac3_128c71da",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "It seems that this is going to be a common pattern. What about a helper for it:\n\n```\nstd::vector\u003cwgpu::CommandBuffer\u003e commandBuffers \u003d\n   RunInParallel(10, [\u0026](int i) {\n      code.\n      \n      return commandBuffer;\n   });\n```",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52f51ae6_fef9328d",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T19:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aebf1ac3_128c71da",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15ced588_c46aa1ee",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-12T12:26:50Z",
      "side": 1,
      "message": "nit: We might not want to run all the multithreaded tests with this toggle because it will combinatorially explode the number of tests if we add even more toggles afterwards. Maybe here or in the future we could use a subclass fixture like `MultithreadTests_BeginPass`?",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85cc51c2_b751a759",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-12T19:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15ced588_c46aa1ee",
      "revId": "e7daf507b90b0447d4003d96412e357192b62ce1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}