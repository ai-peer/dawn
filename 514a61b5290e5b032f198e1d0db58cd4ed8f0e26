{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "deeb724a_10563363",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-01-04T11:40:50Z",
      "side": 1,
      "message": "lgtm with nits",
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "320fc77f_e6521391",
        "filename": "src/dawn/native/SystemHandle.cpp",
        "patchSetId": 7
      },
      "lineNbr": 133,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-04T18:38:36Z",
      "side": 1,
      "message": "I had thought this would happen when `rhs` gets ~SystemHandle()\nis it not the case?",
      "range": {
        "startLine": 131,
        "startChar": 8,
        "endLine": 133,
        "endChar": 9
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6102dde1_12093426",
        "filename": "src/dawn/native/SystemHandle.cpp",
        "patchSetId": 7
      },
      "lineNbr": 133,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-01-05T04:08:37Z",
      "side": 1,
      "message": "`rhs` won\u0027t necessarily get its destructor ~SystemHandle() called until it goes out of scope - a move operation doesn\u0027t guarantee anything about the moved-from object unless explicitly implemented in the move constructor. The current implementation of operator\u003d() behaves more like std::swap than what you would expect intuitively with a move.\n\nIn fact, the notion of a type\u0027s move operation being a destructive-move hasn\u0027t yet been standardized in C++. The proposal for marking types as trivially-relocatable is here: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1144r5.html\n\nAlso see related discussion on this bug about why this matters in the context of being able to memcpy without invoking move constructors: https://crbug.com/1302745",
      "parentUuid": "320fc77f_e6521391",
      "range": {
        "startLine": 131,
        "startChar": 8,
        "endLine": 133,
        "endChar": 9
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78aa9376_1010bf96",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-01-04T11:40:50Z",
      "side": 1,
      "message": "nit: `const Ref\u003cSharedFence\u003e\u0026` ?",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 20
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acc66af8_ee8ff2f1",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-01-06T00:09:02Z",
      "side": 1,
      "message": "This is now GetOrCreateSharedFence() to handle the case when it\u0027s called after device/queue is destroyed so returning a Ref\u003cSharedFence\u003e is now necessary.",
      "parentUuid": "78aa9376_1010bf96",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 20
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a88a98f_b23a305f",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-01-04T11:40:50Z",
      "side": 1,
      "message": "A suggestion: how about put this SharedFence in Queue and also add `d3d::SharedFence::Signal()`, `d3d::SharedFence::GetCompletedValue()`, `d3d::SharedFence::Wait(value)`, etc?",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8693ba44_b74c4668",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-04T18:38:36Z",
      "side": 1,
      "message": "now, you\u0027ve introduced a refcycle which is the reason `win-dawn-rel` is unhappy.\n\nTo break it, clear out `mSharedFence` in Device::DestroyImpl instead of ~Device (or Queue::Destroy if we use that fence there [1]). \n\nNote that after this point, it should still be valid to call GetSharedFence() because some code may do that *after* the device has been destroyed.\n\nSo, we should probably then make it GetOrCreateSharedFence().\n\nWhile the device is alive, it will always return mSharedFence.\n\nif mSharedFence is null, (device is destroyed), then we should return a new shared fence (and keep mSharedFence as null). This will have higher overhead for fence ops after the device is destroyed - but there should be relatively few of those.\n\n\n[1] looks like there is a separate bug. Queue::Destroy in d3d should be `DestroyImpl override`. I don\u0027t think it is ever called right now.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18dfbcaf_c6552b12",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-04T18:38:36Z",
      "side": 1,
      "message": "great point about putting it on the queue. We already have a d3d fence stored on the d3d queue.\n\nI\u0027m not sure we need to add the extra fence methods though",
      "parentUuid": "2a88a98f_b23a305f",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60ee8921_d76e4815",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-01-05T04:08:37Z",
      "side": 1,
      "message": "Done - except the extra fence methods.",
      "parentUuid": "18dfbcaf_c6552b12",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d31365f6_3c932d4d",
        "filename": "src/dawn/native/d3d/DeviceD3D.h",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-01-05T04:08:37Z",
      "side": 1,
      "message": "Done - but we need to make sure GetOrCreateSharedFence() makes sense with the fence value that\u0027s returned so I made it return a new SharedFence that wraps the same native D3D fence.\n\nAlso made QueueD3D11/12 implement DestroyImpl correctly since it\u0027s now necessary for dropping the mSharedFence Ref.",
      "parentUuid": "8693ba44_b74c4668",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e68b2eb_efcf34ca",
        "filename": "src/dawn/native/d3d11/SharedFenceD3D11.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-01-04T11:40:50Z",
      "side": 1,
      "message": "nit: `ownedHandle` is not necessary for this method. It can create the handle from d3d11Fence here?",
      "range": {
        "startLine": 58,
        "startChar": 52,
        "endLine": 58,
        "endChar": 76
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da27bcdb_a551631b",
        "filename": "src/dawn/native/d3d11/SharedFenceD3D11.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-01-05T04:08:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e68b2eb_efcf34ca",
      "range": {
        "startLine": 58,
        "startChar": 52,
        "endLine": 58,
        "endChar": 76
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f4997d0_704e5371",
        "filename": "src/dawn/native/d3d12/SharedFenceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-01-04T11:40:50Z",
      "side": 1,
      "message": "nit: same here.",
      "range": {
        "startLine": 58,
        "startChar": 65,
        "endLine": 58,
        "endChar": 76
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fc45e53_683f67e3",
        "filename": "src/dawn/native/d3d12/SharedFenceD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2024-01-05T04:08:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f4997d0_704e5371",
      "range": {
        "startLine": 58,
        "startChar": 65,
        "endLine": 58,
        "endChar": 76
      },
      "revId": "514a61b5290e5b032f198e1d0db58cd4ed8f0e26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}