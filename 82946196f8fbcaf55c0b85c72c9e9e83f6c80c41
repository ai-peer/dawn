{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a66709c8_7f4e59f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-01-07T14:43:49Z",
      "side": 1,
      "message": "Hi all,\n\nI\u0027ve just become aware of the intention to move WebNN into the Dawn repo, and I have some pretty big reservations about this.\n\nFirst, I\u0027d like to confirm the goals here. After chatting with Corentin, it seems that the goals are to:\n(a) Share some of the code in \u003cdawn\u003e/generator and \u003cdawn\u003e/src/Common with WebNN.\n(b) Keep code that shares IPC patterns close, by putting it in the same repo.\n(c) Re-use Dawn\u0027s infra (presubmit testing, auto-rolls, etc).\n(d) Potentially avoid third-party / security reviews.\n\nIs this correct? Are there other reasons I\u0027ve missed?\n\nMaybe I\u0027m being naive, but in my opinion:\n(a) The amount of code being shared seems negligible to the vast differences between WebNN and WebGPU. It seems entirely reasonable to fork and adapt code that is useful for WebNN. If we decide to share this code at a later date, we can always produce a common library that both depend on.\n(b) IPC patterns can be documented and referred to by both projects. There\u0027s no hard dependency here that requires sharing a repo.\n(c) Re-use Dawn\u0027s infra is my biggest concern. By having WebNN in the Dawn repo, we\u0027re stepping towards a monorepo for projects that share very little in common. We\u0027ll be sharing gerrit, presubmits, auto-rollers, and ACLs. Without substantial dependency analysis, WebNN changes will pointlessly trigger CQ testing for WebGPU\u0027s test suites across a vast number of machines, and vice-versa. One failing project can prevent another from rolling into Chromium, which can be a nightmare for high-severity / urgency bug fixes.\n(d) We\u0027ll almost certainly need a chromium engineering review for any large, new contributions. We can\u0027t use the Dawn repo for a way to bypass the policies described at https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/adding_to_third_party.md.\n\nAlso, by sharing a repo: Changes to the few shared files involves understanding and testing both projects. People have to keep track of what is shared before making edits. There\u0027s an increased chance of merge conflicts. Human parsing of git logs for WebGPU changes is much noisier. Bisecting breakages is slower. and so on. It\u0027s a big commitment to make, and I\u0027m struggling to see the justifications here.\n\nI believe the best approach here is to set up a new repo for WebNN, and fork the common code between Dawn and WebNN, with the intention to move common code to a shared place that both can depend on, once both projects have matured.\n\nIf the group disagrees, we should still involve chromium engineering for a review of the WebNN code before there\u0027s a substantial amount of new code landed.\n\nThanks,\nBen",
      "revId": "82946196f8fbcaf55c0b85c72c9e9e83f6c80c41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a36b9823_b915c0b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-07T15:13:08Z",
      "side": 1,
      "message": "Thanks Ben for taking a detailed and fresh look at this. You listed all the reasons I know of that WebNN wants to integrate with Dawn. The overall idea is \"get to a shippable state faster by reusing Dawn stuff\". There is also the possibility of sharing buffers between WebNN and WebGPU in the future, maybe. But there\u0027s been 0 investigations on it so I don\u0027t think that should be taken into consideration for now.\n\nThe friction points you raise are quite important and listed all together like this seem pretty big. In particular right not it is not clear if Google Chrome will ship WebNN, yet Google engineers will have to pay a hefty maintenance cost for WebNN because unfortunately we\u0027re the only one that can easily maintain the CQ, Gerrit, etc.\n\nTo discuss these costs I have repeatedly asked Ningxin and Rafael to go through Chrome Engineering Review like is the process for the addition of third party libraries. Yet I haven\u0027t seen anything yet. I\u0027ll file something myself and upstreaming of any WebNN pieces in the Dawn repo will have to be blocked until we have a decision there.",
      "parentUuid": "a66709c8_7f4e59f2",
      "revId": "82946196f8fbcaf55c0b85c72c9e9e83f6c80c41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0e9abf9_14c96110",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-07T15:13:08Z",
      "side": 1,
      "message": "+CC Rafael.",
      "revId": "82946196f8fbcaf55c0b85c72c9e9e83f6c80c41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "582b7197_33df1b1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002176
      },
      "writtenOn": "2022-01-10T00:41:19Z",
      "side": 1,
      "message": "Thanks Ben and Corentin for your comments. \n\nRegarding to the goals:\n\n\u003e (d) Potentially avoid third-party / security reviews.\n\u003e Is this correct?\n\nThis is not correct. We\u0027d like to follow any required reviews. \n\nFor security review, recently Alex Gough started the security review [1] with us, we responded and added the security consideration section [2] into our design doc accordingly.\n\nFor third-party review, I appreciate Corentin help initiate it. We intended to implement WebNN in Dawn and we documented this purpose in the design doc included in WebNN Intent to Prototype [3]. We haven\u0027t receive any objections (or feedbacks) to our I2P, so we proceed in this way. It looks like we should go to chrome engineering review and potentially get more feedback, that sounds good to me.\n\n\u003e Are there other reasons I\u0027ve missed?\n\n\u003e There is also the possibility of sharing buffers between WebNN and WebGPU in the future, maybe.\n\nThis is correct. WebNN spec [4] allows to create a MLContext from WebGPU device, in which case the corresponding GPUBuffer resources could be used as graph constants, as well as the GPUTexture/GPUBuffer could be used as graph inputs/outputs. This is a key feature requested by ML frameworks, like TensorFlow.js, to allow custom kernels written in WebGPU and a subgraph of WebNN to interoperate efficiently.\n\n\u003e But there\u0027s been 0 investigations on it so I don\u0027t think that should be taken into consideration for now.\n\nThis is not true. Bryan Bernhart (CC+) has been working with Rafael on the design of WebNN-WebGPU interop on Windows. It would involve DirectML (WebNN backend) to  interop with D3D12 (WebGPU backend). It would be similar for other OS, like on macOS, MPS (WebNN backend) interops with Metal (WebGPU backend). So this is another reason why we intend to implement WebNN in Dawn for closer integration.\n\n\n[1]: https://docs.google.com/document/d/1uh8nTcOLJPJmib-1NT25K2TrlzIiS6rf7I1DwqX6o-E/edit\n[2]: https://docs.google.com/document/d/1KDVuz38fx3SpLVdE8FzCCqASjFfOBXcJWj124jP7ZZ4/edit#heading\u003dh.qjpzx8d6k7t5\n[3]: https://groups.google.com/a/chromium.org/g/blink-dev/c/PD6TDMDS9mg\n[4]: https://www.w3.org/TR/webnn/#programming-model-device-selection",
      "parentUuid": "e0e9abf9_14c96110",
      "revId": "82946196f8fbcaf55c0b85c72c9e9e83f6c80c41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}