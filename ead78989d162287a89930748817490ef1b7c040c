{
  "comments": [
    {
      "key": {
        "uuid": "03d0eb19_ae9672f6",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-15T10:07:05Z",
      "side": 1,
      "message": "[1]",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3632f0e4_1792f402",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d0eb19_ae9672f6",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3614ff48_6755b782",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:29:40Z",
      "side": 1,
      "message": "Aren\u0027t they always zero here though? I think they don\u0027t become nonzero until inside this function. We should probably tweak this function to always overwrite these outputs in non-failure cases, unless we need this behavior.",
      "range": {
        "startLine": 533,
        "startChar": 38,
        "endLine": 533,
        "endChar": 49
      },
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b80d527_fc4f9ccc",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "The Validate* calls call other nested Validate calls. So they\u0027re nonzero in the nested calls.",
      "parentUuid": "3614ff48_6755b782",
      "range": {
        "startLine": 533,
        "startChar": 38,
        "endLine": 533,
        "endChar": 49
      },
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5220d3ef_0184356d",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5b80d527_fc4f9ccc",
      "range": {
        "startLine": 533,
        "startChar": 38,
        "endLine": 533,
        "endChar": 49
      },
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec354577_75b5f37e",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 556,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-15T10:07:05Z",
      "side": 1,
      "message": "It\u0027s a bit weird that we start usage tracking here. Can we have a check that the usage tracking part of the encoding context is empty along with a comment that explains that the usage tracker starts to track the usage for the render pass now?\n\nAlternatively we keep the usage tracker in the pass itself and walk the RenderPassDescriptor again, that\u0027s not very expensive.",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16695771_812581c4",
        "filename": "src/dawn_native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 556,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Added a check.",
      "parentUuid": "ec354577_75b5f37e",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9544bbd1_53571708",
        "filename": "src/dawn_native/CommandEncoder.h",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:29:40Z",
      "side": 1,
      "message": "Should these just be called Finish and ValidateFinish, then?",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4430b2dc_ddfbde26",
        "filename": "src/dawn_native/CommandEncoder.h",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "We already have Finish and ValidateFinish. But one part of ValidateFinish isn\u0027t const. I could move that into Finish though.",
      "parentUuid": "9544bbd1_53571708",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b91db126_22e25a14",
        "filename": "src/dawn_native/CommandEncoder.h",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T17:30:16Z",
      "side": 1,
      "message": "If it works to move that into Finish, it would be nicer.",
      "parentUuid": "4430b2dc_ddfbde26",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1845861_6e605db8",
        "filename": "src/dawn_native/CommandEncoder.h",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b91db126_22e25a14",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0125672_d93aeb64",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-15T10:07:05Z",
      "side": 1,
      "message": "This looks like the usageTracker tracks the global state of the command buffer. Maybe we can find a way to keep the usage tracker on the passes? Also we might be able to remove the usage tracker for compute passes because we have to submit the correct barriers anyway.",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fd764c6_71ad5ca9",
        "filename": "src/dawn_native/EncodingContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Before, we did some tracking at validation-time per-pass and then merged it all into a piece of globally mutated state also at validation-time. I don\u0027t think it\u0027s too helpful to keep per-pass state tracking separate when we already have validation that catches that passes are not nested in weird ways. i.e. It\u0027s already impossible to modify PassResourceUsage metadata from two passes. So, I think it makes most sense to just keep one that is \"current\". This also has the nice benefit of letting us recycle the std::map memory used in tracking instead of allocating a new one for every pass (fyi unordered_map didn\u0027t help).\n\n+1 to removing tracking from compute passes. Maybe in another CL",
      "parentUuid": "b0125672_d93aeb64",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b1b5a05_d91050fd",
        "filename": "src/dawn_native/ProgrammablePassEncoder.h",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-15T10:07:05Z",
      "side": 1,
      "message": "This seems redundant with the EncodingContext usage tracker.",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5572ce04_c2eb5aed",
        "filename": "src/dawn_native/ProgrammablePassEncoder.h",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "8b1b5a05_d91050fd",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8e0dd01_1db2a036",
        "filename": "src/dawn_native/RenderBundleEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:29:40Z",
      "side": 1,
      "message": "also assert the topLevel things should be empty",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20865a82_793cf043",
        "filename": "src/dawn_native/RenderBundleEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8e0dd01_1db2a036",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23c6bca4_cbb265b3",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:44:02Z",
      "side": 1,
      "message": "Since there\u0027s no BeginPass, only this EndPass, will this end up absorbing usages from between passes into the next pass?\n\nMaybe this should be a little more stateful with a BeginPass and EndPass. Perhaps even clearer to have BufferUsedAs/TextureUsedAs check the current state (pass index or no pass) and record it into the correct place, instead of the flushing.",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "912838ca_a497124c",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "I thought about doing this, but BeginPass would be completely empty accept for perhaps setting a marker which we ASSERT on later. I didn\u0027t think this would be too helpful because that duplicates a bunch of state tracking already in EncodingContext.\n\nWDYT?",
      "parentUuid": "23c6bca4_cbb265b3",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bce13cb_918976d5",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T17:30:16Z",
      "side": 1,
      "message": "Depends on the implementation. If BufferUsedAs/TextureUseAs record into different places depending on the current state, then BeginPass sets the state.\n\nIf there\u0027s no concern about absorbing non-pass usages into passes (is there?), then it\u0027s fine as is.",
      "parentUuid": "912838ca_a497124c",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd2d9601_765b0056",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Pass usages aren\u0027t absorbed into other usages because there\u0027s only one pass open at a time. When the pass is ended, it\u0027s contents are moved into a new slot in the std::vector of usages.",
      "parentUuid": "0bce13cb_918976d5",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e48acd40_ff914f69",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-15T10:07:05Z",
      "side": 1,
      "message": "Was there any differences here apart from the introduction of lambdas (not sure why this was done though).",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113da3f2_dc8d7e77",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:44:02Z",
      "side": 1,
      "message": "There aren\u0027t any changes in the code inside the lambdas (I did a local diff on the files to review it)",
      "parentUuid": "e48acd40_ff914f69",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8d8aabb_5ee5eb0b",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "I think I had something else here and then removed it. Will change it back to the original code.",
      "parentUuid": "113da3f2_dc8d7e77",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fca428ad_96e5eddf",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8d8aabb_5ee5eb0b",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26fa9ad7_3e3bd347",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:44:02Z",
      "side": 1,
      "message": "Could these lambdas just be helper functions? I didn\u0027t notice any captures.\n\n(Unless you decide to dissolve them.)",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0789ce7_84dc0649",
        "filename": "src/dawn_native/ResourceUsageTracker.cpp",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "Probably will dissolve",
      "parentUuid": "26fa9ad7_3e3bd347",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e9aa965_0db6f022",
        "filename": "src/dawn_native/ResourceUsageTracker.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:44:02Z",
      "side": 1,
      "message": "optional nit (no pun intended): could be std::optional",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a9a79ba_97407a00",
        "filename": "src/dawn_native/ResourceUsageTracker.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "It\u0027s not optional though. It always exists and can only be acquired once.",
      "parentUuid": "7e9aa965_0db6f022",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe46d257_4902e620",
        "filename": "src/dawn_native/ResourceUsageTracker.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T17:30:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1a9a79ba_97407a00",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a187b5da_2ac3d103",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-11-15T10:07:05Z",
      "side": 1,
      "message": "nit: maybe these could be at the Device::CreateTextureInternal level because it groups that validation skipping logic in less places and reads more easily (if (!skipvalidation) {validate}).\n\nOverall I don\u0027t think this toggle needs to skip the validation of every single commands, for example the BeginRenderPass validation isn\u0027t expensive and does some small form of processing that had to be duplicated in this CL [1].\n\nCould you split this CL into the introduction of the toggle and skipping of validation that\u0027s not command recording, and have the command recording as a second step? The latter will be harder to review and removing noise will help.",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db7fe66e_c59ea6a2",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-11-15T13:29:40Z",
      "side": 1,
      "message": "It probably would make sense to me to do this same thing for other SkipValidation checks too. Could assert SkipValidation is off inside of the Validate* functions.\n\nAgree splitting this into 2 CLs would be helpful. Or maybe 3, if you can separate the one that generalizes PassResourceUsageTracker to ResourceUsageTracker.",
      "parentUuid": "a187b5da_2ac3d103",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f747016d_6f6ac6c1",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-15T16:49:57Z",
      "side": 1,
      "message": "Good idea to split; Good idea to put it at the CreateInternal level",
      "parentUuid": "db7fe66e_c59ea6a2",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9773a5c6_e5820c1e",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-11-19T02:21:43Z",
      "side": 1,
      "message": "Split",
      "parentUuid": "f747016d_6f6ac6c1",
      "revId": "ead78989d162287a89930748817490ef1b7c040c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}