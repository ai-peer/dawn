{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1aa93692_4f62bf62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-05-07T09:16:41Z",
      "side": 1,
      "message": "It turns out that at least one failed CTS (`gwebgpu:api,operation,vertex_state,correctness:discontiguous_location_and_attribs:`, code [here](https://github.com/gpuweb/cts/blob/main/src/webgpu/api/operation/vertex_state/correctness.spec.ts#L1049) and [here](https://github.com/gpuweb/cts/blob/main/src/webgpu/api/operation/vertex_state/correctness.spec.ts#L229)) use discontinuous buffer slot in `GPUBufferState.buffers` (which is a `sequence\u003cGPUVertexBufferLayout?\u003e`), leaving some elements in the `buffers` being `undefined`. \nI am not very sure how these unused and `undefined` elements are treated in Dawn, but it is possible to be represented as a normal `VertexBufferLayout` with all field default-initialized, i.e. `attributeCount \u003d\u003d 0` and `stepMode \u003d\u003d vertex`. If I get it right, the removed `if` statement filter away these unused buffer by checking `attributeCount \u003d\u003d 0`, together with used buffer with zero attribute. Removing the `if` statement in RenderPipeline.cpp may resulting in all those unused slots before the last used slot be misrecognized as used buffer with zero attribute.\nI am not very sure about how to distinguish between these unused buffer slots (before the last used slot) and used slot with zero attribute yet.",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95418f29_9398ba4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-05-07T11:15:32Z",
      "side": 1,
      "message": "Sorry, the `undefined` I mentioned should be `empty`.\nThe CTS test I looked at make a `GPUVertexBufferLayout[]` that is of this form (I printed it into Chrome console):\n\u003e `[empty, {slot: 1, arrayStride: 16, stepMode: \u0027instance\u0027, vbOffset: 1000, attributes: Array(1)}, empty x 5, {slot: 7, arrayStride: 4, stepMode: \u0027vertex\u0027, attributes: Array(2)}]`\nThis is an array of length 8, but 6 of its elements are empty.\n\nI am going to raise a WebGPU Spec issue to discuss if the validation rule\n\u003e `encoder.[[vertex_buffers]][slot]` must not be null.\nshould be clearified.",
      "parentUuid": "1aa93692_4f62bf62",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "090abec3_ee9e2d1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-08T06:55:28Z",
      "side": 1,
      "message": "\u003e it is possible to be represented as a normal `VertexBufferLayout` with all field default-initialized, i.e. `attributeCount \u003d\u003d 0` and `stepMode \u003d\u003d vertex`.\n\nI speculate so, too.\n\n\u003e If I get it right, the removed `if` statement filter away these unused buffer by checking `attributeCount \u003d\u003d 0`, together with used buffer with zero attribute.\n\nIt seems right [1]. `mVertexBufferSlotsUsed` is used in validation [2][3].\n\n\u003e Removing the  if  statement in RenderPipeline.cpp may resulting in all those unused slots before the last used slot be misrecognized as used buffer with zero attribute.\n\nSounds like yes.\n\n\u003e I am not very sure about how to distinguish between these unused buffer slots (before the last used slot) and used slot with zero attribute yet.\n\n`mVertexBufferSlotsUsed` in `RenderPipelineBase` saves only used buffer slots. We need a way to know used slots with the descriptor in the native. If it is ok to update `RenderPipelineDescriptor` (`VertexBufferLayout`), adding `slot` to `VertexBufferLayout` might be a simple solution.\n\n\u003e I am going to raise a WebGPU Spec issue to discuss if the validation rule\n\u003e \u003e `encoder.[[vertex_buffers]][slot]` must not be null.\n\u003e should be clearified.\n\nI think it is a good direction. Need of setting buffers to unused slots sounds weird. Thanks for opening the issue and PR there [4].\n\nSo, should we wait for the spec update?\n\n[1]: https://source.chromium.org/chromium/_/dawn/dawn.git/+/680f513bda0bdb3e843d68f2b0b6a348c2fb83c7:src/dawn/native/RenderPipeline.cpp;l\u003d505-511;drc\u003dd181a3cf55dbf76a0f9dbd780b6cc578354dfed3;bpv\u003d1;bpt\u003d0\n[2]: https://source.chromium.org/chromium/_/dawn/dawn.git/+/680f513bda0bdb3e843d68f2b0b6a348c2fb83c7:src/dawn/native/RenderPipeline.cpp;l\u003d672-676;drc\u003dd181a3cf55dbf76a0f9dbd780b6cc578354dfed3;bpv\u003d1;bpt\u003d0\n[3]: https://source.chromium.org/chromium/_/dawn/dawn.git/+/680f513bda0bdb3e843d68f2b0b6a348c2fb83c7:src/dawn/native/CommandBufferStateTracker.cpp;l\u003d225-233;drc\u003d41e4d9a34c1d9dcb2eef3ff39ff9c1f987bfa02a;bpv\u003d1;bpt\u003d0\n[4]: https://github.com/gpuweb/gpuweb/pull/2844",
      "parentUuid": "95418f29_9398ba4f",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "413676bf_84ef7b63",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-07T07:20:38Z",
      "side": 1,
      "message": "I needed this change to pass this test because of\n\nhttps://www.w3.org/TR/webgpu/#render-pass-encoder-drawing\n\n\u003e   For each GPUIndex32 slot 0 to pipelineDescriptor.vertex.buffers.length:\n\u003e     encoder.[[vertex_buffers]][slot] must not be null.\n\nWe may say that with this CL the validation will be more correct.",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0967a41c_41c14a8b",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-09T13:10:25Z",
      "side": 1,
      "message": "I think Dawn already implements the fix in https://github.com/gpuweb/gpuweb/issues/2843 so we might not need this part of the change? Or did you find that the test was failing without it?\n\nAh! It is because in Dawn\u0027s webgpu.h we currently don\u0027t have a way to know whether a slot is used or not. Previously \"attributeCount \u003d\u003d 0\" meant that it was unused but that\u0027s no longer the case. We could repurpose stepMode for that by adding an \"undefined\" enum value to it in dawn.json, but that\u0027s a bit ugly.\n\nThis would be a three-sided patch (otherwise we risk breaking Chrome by using an uninitialized value):\n - Add the \"undefined\" enum value with 0 in dawn.json (and make it the default value in the wgpu::VertexBufferDescriptor)\n - Set the value undefined for all buffers in https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/gpu_render_pipeline.cc;l\u003d196;bpv\u003d0;bpt\u003d1\n - Use undefined to continue the loop before setting mVertexBufferSlotsUsed.\n\nMaybe it\u0027s worth changing the spec to only validate if there is at least one attribute. The current behavior has been there since the text was introduced in https://github.com/gpuweb/gpuweb/pull/1866/files\n\nWe should raise an issue to the group to see if they would be amenable to relaxing the validation, but can start doing the implementation using stepMode::undefined in parallel, as you wish.\n\nIt seems that every \"starter\" issue I suggest both in Chromium and Dawn are much more complicated than they seem.",
      "parentUuid": "413676bf_84ef7b63",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "575e0579_af677991",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-10T06:28:22Z",
      "side": 1,
      "message": "This comment thread would help.\n\nhttps://dawn-review.googlesource.com/c/dawn/+/89340/comments/1aa93692_4f62bf62\n\n\u003e we might not need this part of the change?\n\nIf this spec change https://github.com/gpuweb/gpuweb/pull/2844 lands and we update the dawn native code to follow it, right, we won\u0027t need the change.\n\n\u003e Or did you find that the test was failing without it?\n\nYes, the test fails without it.\n\n\u003e It is because in Dawn\u0027s webgpu.h we currently don\u0027t have a way to know whether a slot is used or not. Previously \"attributeCount \u003d\u003d 0\" meant that it was unused but that\u0027s no longer the case.\n\nAbsolutely yes.\n\n\u003e We could repurpose stepMode for that by adding an \"undefined\" enum value to it in dawn.json, but that\u0027s a bit ugly.\n\nI suggested to add `slot` to `VertexBufferLayout` in that comment thread if it is ok to update `RenderPipelineDescriptor` (`VertexBufferLayout`) definition. But `undefined` `stepMode` enum would work, too, although yes it is a bit ugly.\n\n\u003e This would be a three-sided patch (otherwise we risk breaking Chrome by using an uninitialized value):\n\nOK, it seems we need to update the both Dawn and Blink code. Should we first make a CL for dawn, and then make a CL for blink (Chromium) immediately after the change of dawn is reflected to `chromium/third_party/dawn`? (I\u0027m not sure how Chromium repo follows the upstream of Dawn repo yet.)\n\n\u003e Maybe it\u0027s worth changing the spec to only validate if there is at least one attribute.\n\nYeah, the need of setting buffers with `.setVertexBuffer()` to zero-attribute vertex buffer slots may sound a bit weird to me. Do you mind if I try to open an issue and make a PR on GitHub WebGPU repo?\n\n\u003e We should raise an issue to the group to see if they would be amenable to relaxing the validation, but can start doing the implementation using stepMode::undefined in parallel, as you wish.\n\nI feel like first knowing their reaction to the relaxing idea on GitHUb. If we won\u0027t get any response for a few days, I may start the implementation `using stepMode::undefined`.",
      "parentUuid": "0967a41c_41c14a8b",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b22bc97_a1266ed6",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-11T08:22:09Z",
      "side": 1,
      "message": "Filed an issue and sent a PR. Let\u0027s wait for their responses.\n\nhttps://github.com/gpuweb/gpuweb/pull/2865",
      "parentUuid": "575e0579_af677991",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09586b11_a0a04522",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-11T14:21:49Z",
      "side": 1,
      "message": "Thanks a lot for filing the spec issue. That would be ideal if we could change the spec. Otherwise we might have to do the stepMode thing. Adding a slot would be quite a lot of work to handle the deprecations and all, though I guess it may be workable??",
      "parentUuid": "575e0579_af677991",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "347130e7_329d1daa",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-16T04:36:15Z",
      "side": 1,
      "message": "https://github.com/gpuweb/gpuweb/pull/2844 has been merged.\n\nWe are waiting for comments for https://github.com/gpuweb/gpuweb/pull/2865",
      "parentUuid": "09586b11_a0a04522",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69ff21b8_82d9d893",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-18T07:46:21Z",
      "side": 1,
      "message": "I got a comment there. Unlikely we change the spec. Instead probably we will enable to express a hole in vertex buffer array. We are still waiting for comments but I assume `StepMode::VertexBufferNotUsed \u003d\u003d StepMode::Undefined \u003d\u003d 0` will be used for it and will update the code in this CL so far.",
      "parentUuid": "347130e7_329d1daa",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2acd42c3_ce698f9d",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-18T14:01:37Z",
      "side": 1,
      "message": "Yeah I think it\u0027s safe to assume that. It will require the three-sided patch mentioned above I think.",
      "parentUuid": "69ff21b8_82d9d893",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "325eed30_d62938bc",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-20T15:46:58Z",
      "side": 1,
      "message": "We got a comment from Kai in https://github.com/gpuweb/gpuweb/issues/2864#issuecomment-1130371206\n\n\u003e I generally think webgpu.h should use \"Undefined\" \u003d 0 to mean \"use the default as specified in JS\" so the APIs match more closely. That way if we ever add more defaulting behavior to WebGPU (e.g. moving the default from IDL into our own text so that we can describe more complex defaulting for future added features) then there\u0027s API surface for it.\n\nIf I understand it correctly, we should add \"undefined\" enum value with non-zero to \"vertex step mode\" in dawn.json, and also we shouldn\u0027t make it the default value in the \"vertex buffer layout\" because the default in WebGPU spec is \"vertex\". Is my understanding correct?",
      "parentUuid": "2acd42c3_ce698f9d",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2fef7ff_85f8a615",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-23T07:35:51Z",
      "side": 1,
      "message": "I updated the CL. I\u0027m going to send another CL to blink for it when this CL will be merged.\n\n\u003e  - Set the value undefined for all buffers in https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/webgpu/gpu_render_pipeline.cc;l\u003d196;bpv\u003d0;bpt\u003d1",
      "parentUuid": "325eed30_d62938bc",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8b103cf_b9b0e1ed",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-24T02:10:37Z",
      "side": 1,
      "message": "My reading of Kai\u0027s comment is that we should have a *separate* enum `VertexBufferNotUsed` which has a different value from Undefined. This would allow Undefined to mean \"use the default\" which is currently `wgpu::StepMode::Vertex`.\n\nIn Dawn, we would implement the defaulting similar to [CreateTextureViewDescriptorWithDefaults](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/Texture.cpp;l\u003d433;bpv\u003d1;bpt\u003d1?q\u003df:dawn%20f:native%20%22::Undefined%22%20-f:node%20Default) (except it would be much simpler). We would still have it be UNREACHABLE in most of the other switch statements since we convert the value in the frontend.\n\nGenerally, we have `Undefined` be 0 in webgpu.h so that zero-initialization of the struct will make it do the default. Not caring about the value in native does the same thing as not caring about the value in JS.",
      "parentUuid": "d2fef7ff_85f8a615",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33684069_c456b6bd",
        "filename": "src/dawn/tests/unittests/validation/DrawVertexAndIndexBufferOOBValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-07T07:20:38Z",
      "side": 1,
      "message": "https://dawn-review.googlesource.com/c/dawn/+/88880/comments/5ba8ddbe_d460f6a9\n\n\u003e if it\u0027s as concise as this test, would be great to test all combinations of (indexed, non-indexed) x (valid, oob)\n\nI will work on it next",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5413f9e2_d3b2a1b5",
        "filename": "src/dawn/tests/unittests/validation/DrawVertexAndIndexBufferOOBValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-09T13:10:25Z",
      "side": 1,
      "message": "(imho we could defer to the CTS, as you wish)",
      "parentUuid": "33684069_c456b6bd",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d73c15b_cc16c99e",
        "filename": "src/dawn/tests/unittests/validation/DrawVertexAndIndexBufferOOBValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-24T08:36:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5413f9e2_d3b2a1b5",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}