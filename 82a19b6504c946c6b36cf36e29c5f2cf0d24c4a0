{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1aa93692_4f62bf62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-05-07T09:16:41Z",
      "side": 1,
      "message": "It turns out that at least one failed CTS (`gwebgpu:api,operation,vertex_state,correctness:discontiguous_location_and_attribs:`, code [here](https://github.com/gpuweb/cts/blob/main/src/webgpu/api/operation/vertex_state/correctness.spec.ts#L1049) and [here](https://github.com/gpuweb/cts/blob/main/src/webgpu/api/operation/vertex_state/correctness.spec.ts#L229)) use discontinuous buffer slot in `GPUBufferState.buffers` (which is a `sequence\u003cGPUVertexBufferLayout?\u003e`), leaving some elements in the `buffers` being `undefined`. \nI am not very sure how these unused and `undefined` elements are treated in Dawn, but it is possible to be represented as a normal `VertexBufferLayout` with all field default-initialized, i.e. `attributeCount \u003d\u003d 0` and `stepMode \u003d\u003d vertex`. If I get it right, the removed `if` statement filter away these unused buffer by checking `attributeCount \u003d\u003d 0`, together with used buffer with zero attribute. Removing the `if` statement in RenderPipeline.cpp may resulting in all those unused slots before the last used slot be misrecognized as used buffer with zero attribute.\nI am not very sure about how to distinguish between these unused buffer slots (before the last used slot) and used slot with zero attribute yet.",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "413676bf_84ef7b63",
        "filename": "src/dawn/tests/end2end/VertexStateTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-07T07:20:38Z",
      "side": 1,
      "message": "I needed this change to pass this test because of\n\nhttps://www.w3.org/TR/webgpu/#render-pass-encoder-drawing\n\n\u003e   For each GPUIndex32 slot 0 to pipelineDescriptor.vertex.buffers.length:\n\u003e     encoder.[[vertex_buffers]][slot] must not be null.\n\nWe may say that with this CL the validation will be more correct.",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33684069_c456b6bd",
        "filename": "src/dawn/tests/unittests/validation/DrawVertexAndIndexBufferOOBValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1003201
      },
      "writtenOn": "2022-05-07T07:20:38Z",
      "side": 1,
      "message": "https://dawn-review.googlesource.com/c/dawn/+/88880/comments/5ba8ddbe_d460f6a9\n\n\u003e if it\u0027s as concise as this test, would be great to test all combinations of (indexed, non-indexed) x (valid, oob)\n\nI will work on it next",
      "revId": "82a19b6504c946c6b36cf36e29c5f2cf0d24c4a0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}