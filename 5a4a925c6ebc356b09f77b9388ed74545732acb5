{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "82dc19cf_2a7c9194",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T06:35:17Z",
      "side": 1,
      "message": "Just realized I should send this now before Europe day. I\u0027ve kind of put off sending this for review but I don\u0027t think it\u0027s getting any better at this point, PTAL\n\nAustin/Loko, we can talk about this in person if you\u0027d like",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8140eab7_6c8ada1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "Started reviewing. Spent most time on the wire to understand the API using a smaller example. Some of the same comments likely apply to native/",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5a86e7e_c0b2242d",
        "filename": "dawn.json",
        "patchSetId": 40
      },
      "lineNbr": 2271,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "Didn\u0027t we want two userdatas as well?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "055f2876_3cf57d20",
        "filename": "dawn.json",
        "patchSetId": 40
      },
      "lineNbr": 2271,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Yes, but it would require updating more code to handle it. So I decided it should be a later change.",
      "parentUuid": "a5a86e7e_c0b2242d",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2f2e2e7_00ca008c",
        "filename": "src/dawn/common/FutureUtils.h",
        "patchSetId": 40
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "How difficult would it be to make this a typed integer? (using ityp*)? It would prevent potential confusion with other types that are uint64_t",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50895f18_b1387998",
        "filename": "src/dawn/common/FutureUtils.h",
        "patchSetId": 40
      },
      "lineNbr": 23,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "I had this as a typed integer initially, but almost every single usage required me to cast it:\n- `atomic\u003cFutureID\u003e` isn\u0027t valid\n- `unordered_map\u003cFutureID, ...\u003e` isn\u0027t valid\n- `WGPUFuture` holds a uint64_t\n\nSo I removed it and decided to just be diligent about naming it \"futureID\" for now. Could change it back though. Now that EventManager is split out it might be a little more useful.",
      "parentUuid": "f2f2e2e7_00ca008c",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d465d0b_eef6dd3f",
        "filename": "src/dawn/native/Instance.h",
        "patchSetId": 40
      },
      "lineNbr": 142,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: we tended to use pointers for mutable objects. Not sure if we want to change that convention.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0997f7c9_b94b2dce",
        "filename": "src/dawn/native/Instance.h",
        "patchSetId": 40
      },
      "lineNbr": 142,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Done, I followed that convention most places but not here for some reason.",
      "parentUuid": "3d465d0b_eef6dd3f",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69466741_601a0465",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 40
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "API* that return objects shouldn\u0027t be used because they return a new ref. We can use device-\u003eadapter-\u003ephysicaldevice-\u003einstance to get a raw pointer to the instance. But also we could consider having a copy of this instance pointer on the device and just do GetInstance there (to avoid bloating ObjectBase). Not 100% sure which is best.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3c488c6_7732f7e6",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 40
      },
      "lineNbr": 41,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69466741_601a0465",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c141c242_ef44bbdf",
        "filename": "src/dawn/samples/SampleUtils.h",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: these changes seem unused?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e011778a_2e757a37",
        "filename": "src/dawn/samples/SampleUtils.h",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c141c242_ef44bbdf",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c107b90_6b3d25d2",
        "filename": "src/dawn/wire/ObjectHandle.h",
        "patchSetId": 40
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: slight preference having a constexpr ObjectHandle::kInvalid and comparing against it instead of an implicit conversion to bool.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e658a3_64bd034d",
        "filename": "src/dawn/wire/ObjectHandle.h",
        "patchSetId": 40
      },
      "lineNbr": 49,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Couldn\u0027t figure out how to put a constexpr of type ObjectHandle inside ObjectHandle (\"invalid use of incomplete type\") so I just renamed this to a method for now.",
      "parentUuid": "9c107b90_6b3d25d2",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82da4b98_635ed959",
        "filename": "src/dawn/wire/ObjectHandle.h",
        "patchSetId": 40
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: this can be moved to the .cpp",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51726a36_0151406c",
        "filename": "src/dawn/wire/ObjectHandle.h",
        "patchSetId": 40
      },
      "lineNbr": 50,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82da4b98_635ed959",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b12a5aae_79af748b",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "Shouldn\u0027t we check this first and not add the event to the map of tracked events if it is Spontaneously fired?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "915836d1_d3979b07",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 35,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b12a5aae_79af748b",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3abdb7be_b68ea28e",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "This should probably be guarded by the mutex in case another operation updates the map concurrently.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f718ffab_8b827e00",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 42,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-01T00:46:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3abdb7be_b68ea28e",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c41016e_adbb8c95",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "When spontaneously fired shouldn\u0027t the event be removed from the map?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99efb19e_2138f4df",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 43,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-01T00:46:19Z",
      "side": 1,
      "message": "It should be. I probably got over eager implementing spontaneous here. It\u0027s not really implemented in non-wire, might be better to not implement it here too. I\u0027ll look at this again more closely.",
      "parentUuid": "7c41016e_adbb8c95",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2baf742_6aa81a5e",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 43,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99efb19e_2138f4df",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f3a33eb_81650ea1",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "Could we gather the list of futures to call the callback on while holding the mutex, and only afterwards call all the callbacks (that could take arbitrary amounts of time and be reentrant)",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9b26559_c83577f4",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 50,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Oops. I did this correctly in the non-wire implementation but for some reason I forgot about it here.",
      "parentUuid": "7f3a33eb_81650ea1",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3a268eb_af647008",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 50,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9b26559_c83577f4",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a82daed6_8e06a129",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: Maybe ASSERT future.id \u003c\u003d currentOne as suggested in the design doc.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c91a228_57391d10",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 66,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-01T00:46:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a82daed6_8e06a129",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92fe4ee4_c53f9c10",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 98,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "ditto, we should perform the callback outside of the critical section.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7c09a9c_73ce5491",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 98,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92fe4ee4_c53f9c10",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fb0f92c_cb91d788",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 115,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "TBH given how small these are we could just make TrackedEvent a basic struct and mutate it directly in EventManager.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45e2bd89_fa9b3d2c",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 40
      },
      "lineNbr": 115,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fb0f92c_cb91d788",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b48536a_dd18c6d2",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 40
      },
      "lineNbr": 31,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: small comment describing what this does?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f7bd123_69c11f32",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 40
      },
      "lineNbr": 31,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b48536a_dd18c6d2",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ee18cfe_4ea764ef",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 40
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: This can use NonMovable from NonCopyable.h",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0d8bd5f_b59368d3",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 40
      },
      "lineNbr": 33,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ee18cfe_4ea764ef",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77d38e29_a7af271b",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 40
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: Could use MutexProtected.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5273db4e_d06cc518",
        "filename": "src/dawn/wire/client/EventManager.h",
        "patchSetId": 40
      },
      "lineNbr": 66,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-02T05:58:16Z",
      "side": 1,
      "message": "This was great. I found 2 bugs ^_^",
      "parentUuid": "77d38e29_a7af271b",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22fe2d88_97036805",
        "filename": "src/dawn/wire/client/Instance.cpp",
        "patchSetId": 40
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "Why can\u0027t this be the case right now? Ah got it. Shouldn\u0027t it be easy-ish to get the device from objects, and then the instance from the device?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94683b3a_89ab3999",
        "filename": "src/dawn/wire/client/Instance.cpp",
        "patchSetId": 40
      },
      "lineNbr": 109,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "We could check the instance of each event to make sure it\u0027s the correct one, yeah. But it seemed like such a rare case to have multiple instances on a client that it\u0027s not worth bothering to fix this until we move the EventManager to the Instance anyway. (it would require TrackedEvents knowing their device/instance which they don\u0027t currently)",
      "parentUuid": "22fe2d88_97036805",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2320a940_3ef81175",
        "filename": "src/dawn/wire/client/Instance.h",
        "patchSetId": 40
      },
      "lineNbr": 18,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "nit: unnecessary new includes?",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35ce5db7_1aa2487d",
        "filename": "src/dawn/wire/client/Instance.h",
        "patchSetId": 40
      },
      "lineNbr": 18,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2320a940_3ef81175",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be15a875_f6d647fe",
        "filename": "src/dawn/wire/client/Queue.cpp",
        "patchSetId": 40
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-31T15:54:11Z",
      "side": 1,
      "message": "What if the status returned by the server is not Success? This seems like it will always pretend it was a Success.",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1731fd0e_37fff0fc",
        "filename": "src/dawn/wire/client/Queue.cpp",
        "patchSetId": 40
      },
      "lineNbr": 56,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-31T17:00:58Z",
      "side": 1,
      "message": "OnSubmittedWorkDone doesn\u0027t actually have any error cases. In Dawn it can return DeviceLost but we\u0027re changing the C API to match the JS API to pretend things work while the device is lost, at least by default.",
      "parentUuid": "be15a875_f6d647fe",
      "revId": "5a4a925c6ebc356b09f77b9388ed74545732acb5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}