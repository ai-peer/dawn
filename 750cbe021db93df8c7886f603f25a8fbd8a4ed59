{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d38cf474_90c7c6d0",
        "filename": "src/tint/lang/wgsl/ls/hover.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-03-19T14:17:40Z",
      "side": 1,
      "message": "nit: should this use SwitchMustMatchCase?",
      "revId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e04d7cb7_285feea1",
        "filename": "src/tint/lang/wgsl/ls/hover.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-19T14:26:54Z",
      "side": 1,
      "message": "It\u0027s an option. The trouble is crashing the language server is not a good experience, as VSCode will silently restart the server until it crashes 5 times, then the extension gets disabled for the session. It\u0027s a real PITA to debug. Maybe once there\u0027s a fuzzer in place, that would bias towards crash-hard-and-fast so these edge cases can be found quickly.",
      "parentUuid": "d38cf474_90c7c6d0",
      "revId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbdd4af4_859b5f89",
        "filename": "src/tint/lang/wgsl/ls/hover.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-03-19T16:59:09Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e04d7cb7_285feea1",
      "revId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e3de947_6aabb5b3",
        "filename": "src/tint/lang/wgsl/ls/hover_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-03-19T14:17:40Z",
      "side": 1,
      "message": "nit: usability question. Should the storage class (and access modes for storage buffer) be part of this hover advice?\nFor buffers, should binding info be part of it too?\n\nHappy to defer for later, but wanted to suggest it.",
      "range": {
        "startLine": 109,
        "startChar": 55,
        "endLine": 109,
        "endChar": 62
      },
      "revId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b34e2ed_d4b5a77b",
        "filename": "src/tint/lang/wgsl/ls/hover_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-03-19T14:26:54Z",
      "side": 1,
      "message": "Yeah, can do. This falls into our favourite topic of what can and can\u0027t be written though. i.e. should it list the access mode, if that isn\u0027t valid WGSL to re-type?",
      "parentUuid": "6e3de947_6aabb5b3",
      "range": {
        "startLine": 109,
        "startChar": 55,
        "endLine": 109,
        "endChar": 62
      },
      "revId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "629bcc25_732c67b2",
        "filename": "src/tint/lang/wgsl/ls/hover_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-03-19T16:59:09Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3b34e2ed_d4b5a77b",
      "range": {
        "startLine": 109,
        "startChar": 55,
        "endLine": 109,
        "endChar": 62
      },
      "revId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "750cbe021db93df8c7886f603f25a8fbd8a4ed59",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}