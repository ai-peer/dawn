{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d02930ec_3d42e62d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-07T13:55:03Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbf0fd01_300514f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-08T16:58:59Z",
      "side": 1,
      "message": "LGTM",
      "revId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b33245a_f2809283",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 749,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-08T06:35:58Z",
      "side": 1,
      "message": "I am not familiar with the cache stuff, but I feel like that putting this line of code into SetVertexBuffer() makes more sense than putting it in UnsetVertexBuffer()? I suppose the functions like RecomputeLazeAspects() and CheckMissingAspects() work fine too in that way. \n\nIn addition, it is aligned with what we have already done in SetBindGroup(), in which we calls mAspects.reset(VALIDATION_ASPECT_BIND_GROUP).",
      "range": {
        "startLine": 749,
        "startChar": 0,
        "endLine": 749,
        "endChar": 53
      },
      "revId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35bcf41_97657876",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 749,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-08T07:08:15Z",
      "side": 1,
      "message": "Never mind. It couldn\u0027t pass the new test when I moved it from Unset() to Set().\n\nBtw, do we need to add a `mAspects.reset(VALIDATION_ASPECT_VERTEX_BUFFERS)` in SetVertexBuffer() too?",
      "parentUuid": "6b33245a_f2809283",
      "range": {
        "startLine": 749,
        "startChar": 0,
        "endLine": 749,
        "endChar": 53
      },
      "revId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5344c24d_801a1986",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 749,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-08T13:11:55Z",
      "side": 1,
      "message": "We shouldn\u0027t need to: as long as we only call SetVertexBuffers, and don\u0027t call SetPipeline (which invalidates that bit) the set of bound vertex buffers is only growing, so if it passed for a Draw, it would pass for subsequent ones. If we unset on the other hand, the set of bound vertex buffers could be reduced, and we need to revalidate.",
      "parentUuid": "e35bcf41_97657876",
      "range": {
        "startLine": 749,
        "startChar": 0,
        "endLine": 749,
        "endChar": 53
      },
      "revId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab47d08c_40df2d38",
        "filename": "src/dawn/native/CommandBufferStateTracker.cpp",
        "patchSetId": 1
      },
      "lineNbr": 749,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-08T16:58:59Z",
      "side": 1,
      "message": "Hmm, makes sense. And the revalidation is done per draw/dispatch, if we add this flag to tell it to do revalidation.",
      "parentUuid": "5344c24d_801a1986",
      "range": {
        "startLine": 749,
        "startChar": 0,
        "endLine": 749,
        "endChar": 53
      },
      "revId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "04a2a335a6ee6dbf7843c3b35967a5494e01e523",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}