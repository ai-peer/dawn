{
  "comments": [
    {
      "key": {
        "uuid": "81babb3f_c54b6892",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 205,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-27T19:53:30Z",
      "side": 1,
      "message": "All heaps must be tracked for residency, even upload and readback heaps. Hence, \u0027ShouldTrackHeap\u0027 can be removed.",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "642991cf_27e00c48",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 205,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-30T16:30:00Z",
      "side": 1,
      "message": "I agree the arguments made in the general list of comments that local and non-local resources should be tracked with separate budgets. OK with me is this is done as part of a separate change.\n\nLet me follow up internally on the exact method for determining local vs. non-local given an arbitrary resource.",
      "parentUuid": "81babb3f_c54b6892",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4825386f_9232be7d",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 205,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-30T17:03:07Z",
      "side": 1,
      "message": "Heard back from folks internally.\n\nInstead of basing things on whether the heap type is default, as per above, you should instead call GetCustomHeapProperties. With the structure you get back, use the following text from MSDN to determine which memory segment (local vs. non-local) the memory ended up. \n\n\"When the adapter is UMA, D3D12_MEMORY_POOL_L0 and DXGI_MEMORY_SEGMENT_GROUP_LOCAL refer to the same memory.\nWhen the adapter is not UMA: D3D12_MEMORY_POOL_L0 and DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL refer to the same memory. D3D12_MEMORY_POOL_L1 and DXGI_MEMORY_SEGMENT_GROUP_LOCAL refer to the same memory\"",
      "parentUuid": "642991cf_27e00c48",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "268e928d_ef7257d2",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 205,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2020-03-30T18:42:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4825386f_9232be7d",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9863fd73_19678010",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 231,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-27T19:53:30Z",
      "side": 1,
      "message": "Since we\u0027re going to be skipping over locked heaps for the purposes of residency management, can we avoid putting them in the array to begin with? That would avoid visiting them in this loop and would turn this if check into an assert.",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 231,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a21f890_c8ee7cd1",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 231,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-03-30T10:27:56Z",
      "side": 1,
      "message": "I\u0027m mildly against this suggestion. Not adding them to the array means that each time we encounter a resource we need to ask:\n\n - Was its heap already added to the set of heaps for this submission.\n - If no, is this heap residency locked?\n\nThat\u0027s the same number of conditions and it makes the entities that look at the residency lock in two places. In particular when we do multi-threading you should be able to map a buffer while residency is being manipulated so it\u0027s easier only the ResidencyManager looks at, and mutates it.",
      "parentUuid": "9863fd73_19678010",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 231,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a20ec851_5020bc40",
        "filename": "src/dawn_native/d3d12/ResidencyManagerD3D12.cpp",
        "patchSetId": 26
      },
      "lineNbr": 231,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-03-30T16:30:00Z",
      "side": 1,
      "message": "The multi-threading argument is compelling to me.",
      "parentUuid": "0a21f890_c8ee7cd1",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 231,
        "endChar": 0
      },
      "revId": "943d47eabc76b793230eb820949b5e82834db99b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}