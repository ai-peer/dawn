{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7db29098_bf24231d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-27T18:43:55Z",
      "side": 1,
      "message": "Austin for +2 for Dawn side",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9f35eb9_877c4f1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T21:06:06Z",
      "side": 1,
      "message": "d",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "674353db_d5cee262",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1609,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T21:06:06Z",
      "side": 1,
      "message": "would it be possible to use non-zero values to be more sure it is correct? IIUC, the transform uses an array of vectors, so accesses should get clamped. that means the out of bound access should access the first/last vector here. but in this test, we can\u0027t distinguish that?",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e40210c_59ab0ad5",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1609,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-10-27T21:27:28Z",
      "side": 1,
      "message": "I just tried this but unfortunately the original bug disappears when you use non-zero values (which doesn\u0027t make any sense, but neither does the bug).",
      "parentUuid": "674353db_d5cee262",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9987ca39_e0ab3685",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1609,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T21:30:49Z",
      "side": 1,
      "message": "ah ok, weird but fine. can you comment that too?",
      "parentUuid": "8e40210c_59ab0ad5",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fbd7dc9_74ab7032",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1611,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T21:06:06Z",
      "side": 1,
      "message": "but: dawn usually uses camcelCase",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecfb354e_16b963aa",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1611,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-10-27T21:27:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fbd7dc9_74ab7032",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66959c8d_20837117",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1663,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T21:06:06Z",
      "side": 1,
      "message": "could you comment about why you\u0027re testing the various cases?\nfor example, I\u0027m not sure why 0u + 0u would be different from testing 0u.",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e707b20e_127aaabc",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1663,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-10-27T21:27:28Z",
      "side": 1,
      "message": "This shader was lifted verbatim from CTS, which is why some parts look a bit weird (e.g. `0 + 0`). The bug is a miscompile that stops happening if you start deleting too many things that are unrelated to the place where it breaks (which is the second case tested). So I was reluctant to try and simplify it too much.\n\nI\u0027ve added a comment above the shader to capture this.",
      "parentUuid": "66959c8d_20837117",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8258be7_8ddc110f",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1811,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T21:06:06Z",
      "side": 1,
      "message": "why must it be statically accessed versus accessed in the branches of runTest?",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10f687ed_9f0c4614",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1811,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-10-27T21:27:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8258be7_8ddc110f",
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "217f8c6a_2f21628d",
        "filename": "src/tint/lang/core/ir/transform/std140.cc",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-27T18:43:55Z",
      "side": 1,
      "message": "did you check this is also true for f16?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 120,
        "endChar": 83
      },
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e157d461_f652a158",
        "filename": "src/tint/lang/core/ir/transform/std140.cc",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-10-27T18:47:26Z",
      "side": 1,
      "message": "All f16 matrices are already decomposed as even a `mat4x4\u003cf16\u003e` only has a column stride of 8 bytes.",
      "parentUuid": "217f8c6a_2f21628d",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 120,
        "endChar": 83
      },
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f19a6ff_c9a6d7fd",
        "filename": "src/tint/lang/core/ir/transform/std140.cc",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-27T20:49:25Z",
      "side": 1,
      "message": "Right, sorry, does it _need_ to be decomposed?",
      "parentUuid": "e157d461_f652a158",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 120,
        "endChar": 83
      },
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cad5adc2_96635345",
        "filename": "src/tint/lang/core/ir/transform/std140.cc",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-10-27T21:01:42Z",
      "side": 1,
      "message": "It needs to be decomposed because of the Std140 layout rules. It won\u0027t get past `spirv-val` if we don\u0027t decompose it, so I can\u0027t really check if the same QC bug exists for f16 too.",
      "parentUuid": "7f19a6ff_c9a6d7fd",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 120,
        "endChar": 83
      },
      "revId": "a0fc79500bd5683dfc4e24fcde063bcad3bdab12",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}