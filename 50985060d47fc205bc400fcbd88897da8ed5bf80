{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "98f61a60_407321fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-08T09:49:00Z",
      "side": 1,
      "message": "Please take a look, thanks",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06e7513b_be12cc81",
        "filename": "src/dawn/native/d3d12/D3D12Info.cpp",
        "patchSetId": 9
      },
      "lineNbr": 159,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2023-08-08T16:10:09Z",
      "side": 1,
      "message": "Is this just recording the value or will it be used for the WebGPU limit? D3D12 docs indicate this is unreliable, so the WebGPU limit needs to be 128.",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81147b49_04d99d63",
        "filename": "src/dawn/native/d3d12/D3D12Info.cpp",
        "patchSetId": 9
      },
      "lineNbr": 159,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "I add some comments for this.",
      "parentUuid": "06e7513b_be12cc81",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b53215bd_d6888bfe",
        "filename": "src/dawn/native/d3d12/D3D12Info.cpp",
        "patchSetId": 9
      },
      "lineNbr": 159,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2023-08-09T14:44:05Z",
      "side": 1,
      "message": "Thanks for the clarification.",
      "parentUuid": "81147b49_04d99d63",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f3cd521_1d1a199b",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-08T17:51:47Z",
      "side": 1,
      "message": "Let\u0027s try to avoid using dawn::native directly if we can avoid it.",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b519c903_83a56add",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "Changed to \"dawn/native/Features.h\".",
      "parentUuid": "1f3cd521_1d1a199b",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7652aef2_d1bd44e0",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 721,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-08T17:51:47Z",
      "side": 1,
      "message": "nit: Using a template for this seems a bit much. WDYT of using regular inheritance and have each child class call Base::CreateTestDevice(adapter, desc, AllowUnsafeAPIs, RequireAllFeatures)\n\nThat or using additional test parameters with DAWN_PARAMS_STRUCT.",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be964dcd_caa4a16a",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 721,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7652aef2_d1bd44e0",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "235bf81f_4a3165bf",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 728,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-08T17:51:47Z",
      "side": 1,
      "message": "Can\u0027t we skip before calling Base::SetUp()? This way we don\u0027t need the logic at [1]",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bf12b21_c72687ae",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 728,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "235bf81f_4a3165bf",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2020890b_0937390a",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 734,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-08T17:51:47Z",
      "side": 1,
      "message": "[1]",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb6a3d17_c22a4ec6",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 734,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2020890b_0937390a",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1220bd3d_0fa16f47",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 746,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-08T17:51:47Z",
      "side": 1,
      "message": "I don\u0027t think we need to explicitly disable that toggle, it should be disabled by default.",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8552c0b2_b9fd5afb",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 746,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "In ValidationTest, the `AllowUnsafeAPIs` toggle is by default enabled when creating instance in SetUp [2].",
      "parentUuid": "1220bd3d_0fa16f47",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06f52032_48aa3823",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 746,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T14:23:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "8552c0b2_b9fd5afb",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f95e7f6_3fe4b8e2",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 756,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-08T17:51:47Z",
      "side": 1,
      "message": "This should be possible to do by Enumerating the features on the adapter. Why did you have to do it by reaching into dawn::native?",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38615c59_e963534f",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 756,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-08-09T08:53:32Z",
      "side": 1,
      "message": "Enumerating the features on the adapter (`Adapter::GetSupportedFeatures()`) can only get a vector of `char*` for the name string of each adapter supported feature, while device descriptor expect `wgpu::FeatureName` enum. If I get it right, we have to use `dawn::native::FeaturesInfo` class to convert the feature name string to enum.\n\nAnd we need to filter out the experimental features when requiring a device with AllowUnsafeAPIs toggle disabled, which also need to query the `dawn::native::FeaturesInfo` to find if a feature is experimental.",
      "parentUuid": "5f95e7f6_3fe4b8e2",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40c3e82f_c7892137",
        "filename": "src/dawn/tests/unittests/validation/ShaderModuleValidationTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 756,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-09T14:23:43Z",
      "side": 1,
      "message": "From a wgpu::Adapter you can call EnumerateFeatures: https://source.chromium.org/chromium/chromium/src/+/main:out/Debug/gen/third_party/dawn/include/dawn/webgpu_cpp.h;drc\u003d36aded67edbf6d7ade45a9f3bdeb8e29cf303828;l\u003d889\n\nYou can get a wgpu::Adapter with .Get() it\u0027s a bit wonky but should work and is better than looking in dawn::native https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/include/dawn/native/DawnNative.h;drc\u003dcc06e477bc011fd8a770d2250ec74f380da8e77a;l\u003d118\n\nThe EnumerateFeatures call will not list the experimental features if allowUnsafeAPIs is not set so I think this should solve both issues.",
      "parentUuid": "38615c59_e963534f",
      "revId": "50985060d47fc205bc400fcbd88897da8ed5bf80",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}