{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a63b0597_1d8345a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-21T03:42:57Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "ff95882eb486d4930b64b98b1eaa2d31cef2de37",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e98ed113_f3222273",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-08-22T10:13:19Z",
      "side": 1,
      "message": "I think all of this can be reduced to:\n\n```\nconst Token\u0026 ParserImpl::peek(size_t count) {\n    for (size_t idx \u003d count + next_token_idx_; idx \u003c tokens_.size(); idx++) {\n        if (tokens_[idx].IsPlaceholder()) {\n            continue;\n        }\n        if (count \u003d\u003d 0) {\n            return tokens_[idx];\n        }\n        count--;\n    };\n    return tokens_[tokens_.size() - 1]; // End of token stream.\n}\n```",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 300,
        "endChar": 1
      },
      "revId": "ff95882eb486d4930b64b98b1eaa2d31cef2de37",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79a14096_5e3f7830",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-22T12:40:24Z",
      "side": 1,
      "message": "No, because your initial `count + next_token_idx_` may skip over a placeholder. You can\u0027t start at the end, you have to start at `next_token_idx_` and walk each token and skip over _all_ the placeholders found.",
      "parentUuid": "e98ed113_f3222273",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 300,
        "endChar": 1
      },
      "revId": "ff95882eb486d4930b64b98b1eaa2d31cef2de37",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6d0f72c_76827503",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-08-22T13:34:26Z",
      "side": 1,
      "message": "\u003e initial `count + next_token_idx_` may skip over a placeholder\n\nIsn\u0027t that what you want to happen?",
      "parentUuid": "79a14096_5e3f7830",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 300,
        "endChar": 1
      },
      "revId": "ff95882eb486d4930b64b98b1eaa2d31cef2de37",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd5c2163_bde612a6",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-08-22T13:38:52Z",
      "side": 1,
      "message": "It is, but you have to account for it. So, if you have `|1|PH|2|PH|3|` you should have:\n\n- peek 0: 1\n- peek 1: 2\n- peek 2: 3\n\nBut, if you start counting at `next + 2` you\u0027ll return `2` as you need to account for the `PH` prior. So, you have to walk from the start and count each `PH` seen.",
      "parentUuid": "e6d0f72c_76827503",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 300,
        "endChar": 1
      },
      "revId": "ff95882eb486d4930b64b98b1eaa2d31cef2de37",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318b8063_187bdf16",
        "filename": "src/tint/reader/wgsl/parser_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-08-22T13:48:57Z",
      "side": 1,
      "message": "stupid typo in my for loop. Try this:\n\n```\nconst Token\u0026 ParserImpl::peek(size_t count) {\n    for (size_t idx \u003d next_token_idx_; idx \u003c tokens_.size(); idx++) {\n        if (tokens_[idx].IsPlaceholder()) {\n            continue;\n        }\n        if (count \u003d\u003d 0) {\n            return tokens_[idx];\n        }\n        count--;\n    };\n    return tokens_[tokens_.size() - 1]; // End of token stream.\n}\n```",
      "parentUuid": "fd5c2163_bde612a6",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 300,
        "endChar": 1
      },
      "revId": "ff95882eb486d4930b64b98b1eaa2d31cef2de37",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}