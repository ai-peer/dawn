{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "883df3c9_3b86b3d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-02T01:03:17Z",
      "side": 1,
      "message": "LGTM",
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c37f890_f88e813b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "LGTM",
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfff992b_7bcdfaf4",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 6
      },
      "lineNbr": 234,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-02T01:03:17Z",
      "side": 1,
      "message": "nit: \"values with default initializers that are not overridden\"",
      "range": {
        "startLine": 234,
        "startChar": 48,
        "endLine": 234,
        "endChar": 81
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "459f8eb7_2eb2e098",
        "filename": "src/dawn_native/metal/ComputePipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "nit: CreateMTLFunction? I think the caller doesn\u0027t really need to care that it also handles overridable constants, because that\u0027s just one of the pieces of data in computeStage and we might have more in the future.",
      "range": {
        "startLine": 37,
        "startChar": 17,
        "endLine": 37,
        "endChar": 49
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a6f326_a0d790dd",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-02T01:03:17Z",
      "side": 1,
      "message": "static_cast actually",
      "range": {
        "startLine": 44,
        "startChar": 74,
        "endLine": 44,
        "endChar": 81
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b27e248a_51ec33bf",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "I think that\u0027s the first time we have core functionality that requires 10.12. We need to make sure that Chromium doesn\u0027t allow using an adapter on 10.11 then. Or we need a fallback that uses Tint to inline the values. Or for now raise an INTERNAL_ERROR if constants are used on 10.11",
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d43e7145_14457f1c",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 248,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "nit: this code seems like it should be common to both the constants and the non-constant code paths.",
      "range": {
        "startLine": 242,
        "startChar": 0,
        "endLine": 248,
        "endChar": 45
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec3f44bc_52373736",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-02T01:03:17Z",
      "side": 1,
      "message": "else UNREACHABLE()",
      "range": {
        "startLine": 249,
        "startChar": 12,
        "endLine": 249,
        "endChar": 13
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2139c497_d89c0e37",
        "filename": "src/dawn_native/metal/UtilsMetal.mm",
        "patchSetId": 6
      },
      "lineNbr": 205,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "nit: this variable is only used at the very end, we could either declare it only there, or inline the constantValues.Get() in the CreateFunction call.",
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "741304fe_6ea74fcb",
        "filename": "src/dawn_native/metal/UtilsMetal.mm",
        "patchSetId": 6
      },
      "lineNbr": 207,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-02T01:03:17Z",
      "side": 1,
      "message": "maybe \"overriddenConstants\" to be clear\n\nor maybe initialize this as constantsToInitialize \u003d entryPointMetadata.initializedOverridableConstants, and remove values that are already specified in programmableStage.constants ? This way it\u0027s a copy and O(n) removals instead of O(n) insertions and O(m) lookups.",
      "range": {
        "startLine": 207,
        "startChar": 48,
        "endLine": 207,
        "endChar": 57
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06ab9a0e_baee2bf4",
        "filename": "src/dawn_native/metal/UtilsMetal.mm",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "u-u-u-nit: !\u003d 0 makes marginally more sense to me, since it can only be 0 or 1.",
      "range": {
        "startLine": 249,
        "startChar": 46,
        "endLine": 249,
        "endChar": 49
      },
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bd2d465_5f5d21b0",
        "filename": "src/dawn_native/metal/UtilsMetal.mm",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "nit: this block of code is duplicated, we could declare a helper lambda in this function that does this.",
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6b11064_f32938b9",
        "filename": "src/dawn_native/metal/UtilsMetal.mm",
        "patchSetId": 6
      },
      "lineNbr": 287,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:53:14Z",
      "side": 1,
      "message": "nit: we can early out with this case first so as to dedent the rest of the function.",
      "revId": "dfdf6d07379f6046e50001c30cb52307c513a7a4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}