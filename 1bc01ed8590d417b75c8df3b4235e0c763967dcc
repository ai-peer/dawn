{
  "comments": [
    {
      "key": {
        "uuid": "f86a46ea_aae63d37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: the first line is a bit long, people say 60-70 should be the maximum.",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82b09e48_e5c719cd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f86a46ea_aae63d37",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd9b1d97_cdaa4faa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "SGTM",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "781b0395_b0933387",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fd9b1d97_cdaa4faa",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d30832b_b3a9999d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "I have concerns about this because ResultOrError is optimized for naked pointers (by using low bits for a success vs. error tag) but optimizing it for Ref\u003cObject\u003e will be more difficult.",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a0635b_3e3a8b50",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "The places where ResultOrError is mostly used are creation methods. I expect the time in these methods will be dominated by object creation/initialization and not from returning an extra pointer on the stack.  \n\nHowever, since Ref\u003cObject\u003e is one pointer under the hood, we should be able to create a \u0027Result\u0027 specialization for it which behaves the same as the naked pointer version we have today.",
      "parentUuid": "4d30832b_b3a9999d",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e14cf5e_33039abe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "Can you elaborate? I\u0027m not sure what this means.",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "970f3262_25ff4368",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "This means that RefCounted will have a static creation method with a variable number of arguments and returns a Ref object.\n\nRight now, people must write the following:\n  Ref\u003cObject\u003e obj \u003d AcquireRef(new Obj(...));\n\nwhich is error prone. If you accidentally miss calling AcquireRef, you leak memory. AcquireRef itself is sub-optimal because it incurs and extra Addref+Release.",
      "parentUuid": "9e14cf5e_33039abe",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b3c6d62_b8077f97",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-03T21:38:29Z",
      "side": 1,
      "message": "This would be very nice to have",
      "parentUuid": "970f3262_25ff4368",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3855fef8_a6499c6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-06T10:04:17Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "2b3c6d62_b8077f97",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bedba7ff_d14829e2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "Is there a bug this is associated with?",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0af2a4ff_a75d6374",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "No, but I can add one.",
      "parentUuid": "bedba7ff_d14829e2",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a18646_9d3c2581",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-06T10:04:17Z",
      "side": 1,
      "message": "Or Bug: None for untracked refactorings.",
      "parentUuid": "0af2a4ff_a75d6374",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c86bf72b_2d4ae497",
        "filename": "src/dawn_native/Buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: override",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf6a0d10_63515e61",
        "filename": "src/dawn_native/Buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c86bf72b_2d4ae497",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca17f95e_b4797dcb",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 4
      },
      "lineNbr": 740,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "LGTM, this is more explicit now that we have a ConsumeError that can extract the result from ResultOrError.",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "653a6323_539e4294",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 4
      },
      "lineNbr": 740,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca17f95e_b4797dcb",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38101959_a14ef6a6",
        "filename": "src/dawn_native/Fence.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: override",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aada166_f5ae1503",
        "filename": "src/dawn_native/Fence.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38101959_a14ef6a6",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "126ac2a1_0eba3994",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "I think this is actually an override from RefCounted so it should be ~ObjectBase override \u003d default;",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dd30003_9c858c23",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "126ac2a1_0eba3994",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b7d1338_ce837e46",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "Why is this not overriding the base class destructor? ditto for other \u003d defaults.",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dadb80a7_dbde166e",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Since the base class destructor is public (due to the blueprint issue), I need a private version in derived classes to avoid accidental usage of operator delete on the derived pointer.",
      "parentUuid": "5b7d1338_ce837e46",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc6a2b3b_c00e9add",
        "filename": "src/dawn_native/d3d12/QueueD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: \u003ddefault destructor? Same in other Queue derived classes",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41b7869d_2ffd83e2",
        "filename": "src/dawn_native/d3d12/QueueD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Since QueueBase does not have a public destructor, adding a private destructor for these and similar classes is not strictly necessary. Only the blueprint ones need to override the public constructor with a private one. \n\nI can add a private destructor if you want the code to be more explicit.",
      "parentUuid": "dc6a2b3b_c00e9add",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6964be5_7aa20369",
        "filename": "src/dawn_native/d3d12/QueueD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-03T21:38:29Z",
      "side": 1,
      "message": "I don\u0027t feel strongly about this.\n\nIf you do your suggestion in your commit message to make base destructors of cached objects protected with a special thing for blueprints, then all of the other private, trivial, destructor overrides that are only there to prevent using them, could be removed which would be more consistent.",
      "parentUuid": "41b7869d_2ffd83e2",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dfd64f6_28fd55c2",
        "filename": "src/dawn_native/d3d12/QueueD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T22:12:48Z",
      "side": 1,
      "message": "@Austin, yes, we can remove the \u003ddefault destructors in the most derived class if we so the special thing for blueprints. That would be my preference but I do not feel strongly.",
      "parentUuid": "f6964be5_7aa20369",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d570cbce_014bbf95",
        "filename": "src/dawn_native/d3d12/QueueD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-06T10:04:17Z",
      "side": 1,
      "message": "Agreed that this would be slightly better and my preference too. We can keep iterating on this CL, or land it and fix it up as a follow up.",
      "parentUuid": "0dfd64f6_28fd55c2",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b3f937_299f9542",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: remove this condition that should never be false.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 33,
        "endChar": 1
      },
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "638e1e5e_ba1fb658",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23b3f937_299f9542",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 33,
        "endChar": 1
      },
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "473349fc_26b1bece",
        "filename": "src/dawn_native/d3d12/TextureD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: no default destructor?",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a72c38a_3e327b3e",
        "filename": "src/dawn_native/d3d12/TextureD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "No because it inherits the private one from the (non-blueprint) baseclass.",
      "parentUuid": "473349fc_26b1bece",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7effaf2e_5eac57a0",
        "filename": "src/dawn_native/d3d12/TextureD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-06T10:04:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2a72c38a_3e327b3e",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d432a485_b3d194d9",
        "filename": "src/dawn_native/metal/SamplerMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: override",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aefb68b6_88e3a681",
        "filename": "src/dawn_native/metal/SamplerMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d432a485_b3d194d9",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bd7854f_f4519ba3",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: this is missing a destructor",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d843c67_3479ceac",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bd7854f_f4519ba3",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5055761f_1a6e96e1",
        "filename": "src/dawn_native/null/DeviceNull.h",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "nit: override",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa0e0f3_a4e98667",
        "filename": "src/dawn_native/null/DeviceNull.h",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5055761f_1a6e96e1",
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414249f4_68b8d4fe",
        "filename": "src/dawn_native/opengl/ShaderModuleGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-03T07:38:08Z",
      "side": 1,
      "message": "ditto, that condition should never happen",
      "range": {
        "startLine": 54,
        "startChar": 1,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8db86425_278063c1",
        "filename": "src/dawn_native/opengl/ShaderModuleGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-04-03T20:27:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "414249f4_68b8d4fe",
      "range": {
        "startLine": 54,
        "startChar": 1,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "1bc01ed8590d417b75c8df3b4235e0c763967dcc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}