{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e2633cf6_2e0bec7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-02-24T18:57:02Z",
      "side": 1,
      "message": "Austin, Corentin: PTAL. Thanks!",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb9c3b1a_51a4af1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-24T22:06:57Z",
      "side": 1,
      "message": "No additional comments",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff328301_cb3d747a",
        "filename": "generator/opengl_loader_generator.py",
        "patchSetId": 4
      },
      "lineNbr": 273,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:50:44Z",
      "side": 1,
      "message": "I think python has something like `params.update(angle_params)`",
      "range": {
        "startLine": 272,
        "startChar": 8,
        "endLine": 273,
        "endChar": 44
      },
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d36f2ac9_83e99cb7",
        "filename": "generator/opengl_loader_generator.py",
        "patchSetId": 4
      },
      "lineNbr": 273,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-02-24T23:49:23Z",
      "side": 1,
      "message": "If the keys are the same, update() replaces the value with the new value, AFAICT. We need to append the new array to old array.",
      "parentUuid": "ff328301_cb3d747a",
      "range": {
        "startLine": 272,
        "startChar": 8,
        "endLine": 273,
        "endChar": 44
      },
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26e7bab9_c5f1da94",
        "filename": "generator/opengl_loader_generator.py",
        "patchSetId": 4
      },
      "lineNbr": 273,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-27T17:58:55Z",
      "side": 1,
      "message": "ah, I see",
      "parentUuid": "d36f2ac9_83e99cb7",
      "range": {
        "startLine": 272,
        "startChar": 8,
        "endLine": 273,
        "endChar": 44
      },
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c97c4fc_016c4123",
        "filename": "src/dawn/native/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:50:44Z",
      "side": 1,
      "message": "need update in CMakeLists.txt too",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d69949e9_68ac3b56",
        "filename": "src/dawn/native/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-02-24T23:49:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c97c4fc_016c4123",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "540f2160_f75b9fc7",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:50:44Z",
      "side": 1,
      "message": "uuunit: seems like unconventional syntax",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fa77ff8_eb722d20",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-02-24T23:49:23Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "540f2160_f75b9fc7",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4497723_d060ea32",
        "filename": "src/dawn/native/opengl/CommandBufferGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-02-24T18:57:02Z",
      "side": 1,
      "message": "This might be a perf hit. An alternative would be create a new \"BaseVertexBaseInstanceANGLE\" toggle. Or to reassign the DrawArraysInstancedBaseInstance fn ptr to DrawArraysInstancedBaseInstanceANGLE in the extension loader. Then this code could go away.",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30e075e1_5b783593",
        "filename": "src/dawn/native/opengl/CommandBufferGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:50:44Z",
      "side": 1,
      "message": "reassigning sounds nice to me - that\u0027s how the vulkan function loading works too. So extensions and functions that were promoted to core get accessed in the same way.\n\nis DrawArraysInstancedBaseInstanceANGLE supposed to do exactly the same thing DrawArraysInstancedBaseInstance does?",
      "parentUuid": "a4497723_d060ea32",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "041a467a_48cf2845",
        "filename": "src/dawn/native/opengl/CommandBufferGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-02-24T23:49:23Z",
      "side": 1,
      "message": "Unfortunately, I realized that the ANGLE extension doesn\u0027t actually have the BaseVertex-only entry point. It only has BaseVertexBaseInstance. So it\u0027s not a drop-in replacement.\n\nI\u0027ve changed the extension check to simply check for the ANGLE fn ptr. Should be cheap.",
      "parentUuid": "30e075e1_5b783593",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c88949_f6836fb4",
        "filename": "src/dawn/native/opengl/CommandBufferGL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-27T17:58:55Z",
      "side": 1,
      "message": "The core question is:\nis the proc non-null if and only if the extension is available? you could imagine some driver might have the proc, but actually using it isn\u0027t valid unless the extension is also available.\n\nSo, slight preference for checking the availability of the extension.\nTo address the concern about the performance of the check, we can do it like VulkanExtensions where we remap the string names to our own internal enums. Those enums can index into a bitset into the set of available extensions.\n\nI don\u0027t have a strong preference of whether we use enums or just have a string check for now, since compat isn\u0027t shipping just yet",
      "parentUuid": "041a467a_48cf2845",
      "revId": "2837dcc55fc8edf3c3016920ae5c1b73dc0e3eca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}