{
  "comments": [
    {
      "key": {
        "uuid": "8740df08_828de6bc",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 897,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-21T12:13:52Z",
      "side": 1,
      "message": "nit: group with dawn_enable_opengl?",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0fea376_46397476",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 897,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-22T14:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8740df08_828de6bc",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0eacf61_9685af1d",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 904,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-21T12:13:52Z",
      "side": 1,
      "message": "I think you\u0027ll need to land this before this CL.",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "283355c9_d67c8dda",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 904,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T14:55:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e0eacf61_9685af1d",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3d02c2b_15dc480a",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 929,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-21T12:13:52Z",
      "side": 1,
      "message": "Eek I forgot we still had these temp groups, we should finish splitting the BUILD.gn file at some point.",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7537b947_73275070",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 929,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T14:55:39Z",
      "side": 1,
      "message": "I don\u0027t completely remember why these are here. What was the reason for them?",
      "parentUuid": "c3d02c2b_15dc480a",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e73f435f_19fa0c3b",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 929,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-22T08:59:19Z",
      "side": 1,
      "message": "We wanted to move the targets in src/tests so that Skia doesn\u0027t try to build the tests when it references libdawn_native.",
      "parentUuid": "7537b947_73275070",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22b4a4be_cde1f2e6",
        "filename": "BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 929,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-22T14:23:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e73f435f_19fa0c3b",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "995e42ef_75aa11d5",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-21T12:13:52Z",
      "side": 1,
      "message": "nit: this is the same as not having these functions no?",
      "range": {
        "startLine": 279,
        "startChar": 1,
        "endLine": 285,
        "endChar": 5
      },
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55758323_44df954f",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T14:55:39Z",
      "side": 1,
      "message": "Whoops, probably had something here previously and forgot to remove.",
      "parentUuid": "995e42ef_75aa11d5",
      "range": {
        "startLine": 279,
        "startChar": 1,
        "endLine": 285,
        "endChar": 5
      },
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7865ce3d_aa474378",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T18:34:08Z",
      "side": 1,
      "message": "Actually, this is because we\u0027re overriding the methods from ::testing::TestWithParams which are pure virtual, and then calling DawnTestBase::SetUp/TearDown which aren\u0027t virtual.",
      "parentUuid": "55758323_44df954f",
      "range": {
        "startLine": 279,
        "startChar": 1,
        "endLine": 285,
        "endChar": 5
      },
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f64e3ef1_817d801c",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-22T08:59:19Z",
      "side": 1,
      "message": "Ah makes sense",
      "parentUuid": "7865ce3d_aa474378",
      "range": {
        "startLine": 279,
        "startChar": 1,
        "endLine": 285,
        "endChar": 5
      },
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "456dd40f_e79ad6c4",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-22T14:23:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f64e3ef1_817d801c",
      "range": {
        "startLine": 279,
        "startChar": 1,
        "endLine": 285,
        "endChar": 5
      },
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d73b1064_876e2b53",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-21T12:13:52Z",
      "side": 1,
      "message": "Why use a tuple instead of a struct with inheritance? It would help avoid ugly std::gets maybe",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e6f3f4d_07042cb1",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T14:55:39Z",
      "side": 1,
      "message": "std::tuple because I wanted to use testing::Combine which produces tuples. more discussion in the other comment.",
      "parentUuid": "d73b1064_876e2b53",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ba06181_318d210c",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-22T14:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e6f3f4d_07042cb1",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fa4e904_4c5f9133",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-21T12:13:52Z",
      "side": 1,
      "message": "Would there be a way to make this nicer?",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0ee1e7f_250012d9",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T15:54:10Z",
      "side": 1,
      "message": "?! weird. I definitely replied here the first time.\n\nThis is the nicest way I could figure out how to do the parameterization with testing::Combine.\n\nAlternatively we could explicitly state all of the cases. This would also make it easier to use structs.\n\nPersonally, I like testing::Combine because it makes it easy to generate combinations of test parameters. I\u0027m not too opposed to doing it the other way though.",
      "parentUuid": "4fa4e904_4c5f9133",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1ab9861_56d3f3b9",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-21T17:06:28Z",
      "side": 1,
      "message": "We can also write our own iterator which would do the combinations like testing::Combine but yield structs. WDYT?",
      "parentUuid": "a0ee1e7f_250012d9",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60b9d6b4_a2360c98",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-22T08:59:19Z",
      "side": 1,
      "message": "Yeah I was thinking that we could have something like\n\nPerfTestVariation({MetalBackend, VulkandBackend}, {some configuration, some other configuration}) somehow.",
      "parentUuid": "a1ab9861_56d3f3b9",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95abb84f_fb6b095b",
        "filename": "src/tests/perf_tests/BufferUploadPerf.cpp",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-22T14:23:25Z",
      "side": 1,
      "message": "Added a template generator thing to do this.",
      "parentUuid": "60b9d6b4_a2360c98",
      "revId": "ed4a56a62e277f03d18d878e19bbac2b5dddbb35",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}