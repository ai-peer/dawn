{
  "comments": [
    {
      "key": {
        "uuid": "d4cf24e3_5dd0a7f3",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-10-23T18:03:50Z",
      "side": 1,
      "message": "Why couldn\u0027t we store the sub-allocation handle itself in BuddyMemoryAllocator (ie. ResourceMemoryAllocation)?\n\nThis would remove the extra layer of indirection going on and eliminate the need to expose a user-managed memory type, ResourceHeap to the Vulkan backend, which only is needed for D3D.",
      "revId": "9ace017e4b69d269aec22115392358af715059ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "185d32a4_ec0092d0",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-23T22:38:41Z",
      "side": 1,
      "message": "To be clear, you want to store the VkDeviceMemory directly in ResourceMemoryAllocation? That sounds nice but I think it would require changing things away from ResourceHeapBase as a base class.",
      "parentUuid": "d4cf24e3_5dd0a7f3",
      "revId": "9ace017e4b69d269aec22115392358af715059ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "892ec00b_c70a6bcd",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-10-23T23:17:33Z",
      "side": 1,
      "message": "\u003e To be clear, you want to store the VkDeviceMemory directly in ResourceMemoryAllocation?\n\nYup. Or keep DeviceMemoryAllocation.\n\n\u003e That sounds nice but I think it would require changing things away from ResourceHeapBase as a base class.\n\nIt would but looks straightforward. Perhaps we could address in a future CL?",
      "parentUuid": "185d32a4_ec0092d0",
      "revId": "9ace017e4b69d269aec22115392358af715059ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f01a451_894155c4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 468,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-24T11:11:53Z",
      "side": 1,
      "message": "I\u0027m not sure I understand, the ResourceHeap is an abstraction for a block of memory that is used to suballocated resources in. Isn\u0027t it exactly what a VkDeviceMemory is?\n\nAlso we need to keep the VkDeviceMemory in the ResourceHeap because the BuddyMemoryAllocator allocates block of memory represented as ResourceHeaps and gives us a ResourceMemoryAllocation that points to which block of memory it\u0027s in.",
      "parentUuid": "892ec00b_c70a6bcd",
      "revId": "9ace017e4b69d269aec22115392358af715059ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22983650_38d51c53",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-10-23T18:03:50Z",
      "side": 1,
      "message": "nit: IIRC, check was already handled in Deallocate.",
      "revId": "9ace017e4b69d269aec22115392358af715059ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6184e429_c5d1c48c",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-24T11:11:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22983650_38d51c53",
      "revId": "9ace017e4b69d269aec22115392358af715059ac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}