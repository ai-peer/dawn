{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fb84673a_623fd98d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-25T17:56:11Z",
      "side": 1,
      "message": "LGTM, the bitmask is a bit weird, but let\u0027s see if it becomes a problem in the future.",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb51ef7f_42ce5313",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-25T17:56:11Z",
      "side": 1,
      "message": "Seems maybe unrelated?",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e0fd1a9_3c2938d1",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-27T22:19:54Z",
      "side": 1,
      "message": "It\u0027s needed in the testing. If we don\u0027t initialize the default limits in the ctor, the mock device doesn\u0027t have them and the limits are all wack.",
      "parentUuid": "bb51ef7f_42ce5313",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3717fa8c_07d3a5b8",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:26:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6e0fd1a9_3c2938d1",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "994f9088_63101202",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:34:21Z",
      "side": 1,
      "message": "Thinking about this, wouldn\u0027t it work to add that code to DeviceMock.cpp directly instead of filling limits twice in dawn::native?",
      "parentUuid": "3717fa8c_07d3a5b8",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1107b72a_a924265e",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-28T00:50:01Z",
      "side": 1,
      "message": "fwiw there\u0027s also a TODO somewhere to remove this constructor entirely and use the same one as the device - but we need AdapterMock first",
      "parentUuid": "994f9088_63101202",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10272bd3_06cf7bed",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 513,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-25T17:56:11Z",
      "side": 1,
      "message": "nit: in a follow-up we could probably keep only the std::string here, change ErrorScope to take a string_view, and do .c_str() only when calling the C callbacks.",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c91e63b_9aab586a",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 513,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-27T22:19:54Z",
      "side": 1,
      "message": "Added TODO for it!",
      "parentUuid": "10272bd3_06cf7bed",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03ed500a_306485d7",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1400,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-25T17:56:11Z",
      "side": 1,
      "message": "Isn\u0027t validation always allowed?",
      "range": {
        "startLine": 1400,
        "startChar": 16,
        "endLine": 1400,
        "endChar": 47
      },
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06fb09e2_54948f9f",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1400,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-27T22:19:54Z",
      "side": 1,
      "message": "It is, but before there was a comment that just having OOM here (or default or w.e) seemed out of sync with the validation error message above that states OOM or Validation. So to be explicit and consistent I just added both here.",
      "parentUuid": "03ed500a_306485d7",
      "range": {
        "startLine": 1400,
        "startChar": 16,
        "endLine": 1400,
        "endChar": 47
      },
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "771a8e9d_cff51b6b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1400,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:26:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06fb09e2_54948f9f",
      "range": {
        "startLine": 1400,
        "startChar": 16,
        "endLine": 1400,
        "endChar": 47
      },
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d295bc46_95b7b5ca",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1400,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-28T00:50:01Z",
      "side": 1,
      "message": "that was when it was not \"additional errors\" but \"allowed errors\" and we were passing in kAllAllowedInternalError.\n\nSo it was confusing since above, we validated out Internal/DeviceLost and then passed \"all\" into the next function.\n\nNow that the arg is \"additional errors\", we could pass only OutOfMemory in.",
      "parentUuid": "771a8e9d_cff51b6b",
      "range": {
        "startLine": 1400,
        "startChar": 16,
        "endLine": 1400,
        "endChar": 47
      },
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9ea8534_7b214101",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-25T17:56:11Z",
      "side": 1,
      "message": "How would you feel about explicitly passing the list of non-loss errors? There\u0027s only a couple places where we need to be explicit, and this would avoid the need to remember that validation is already handled specially.",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f7f711f_bd96d80a",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-27T22:19:54Z",
      "side": 1,
      "message": "Hmm that\u0027s sort of what we had before, but the previous comments seemed to suggest we wanted to make validation and device loss default errors because they should always be surfaced as is. The only \"special\" cases are OOM and Internal for pipelines. Keeping as is for now.",
      "parentUuid": "e9ea8534_7b214101",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1625350_76e39749",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-27T22:34:21Z",
      "side": 1,
      "message": "Sure, the idea it would be surfaced directly on the ConsumedError default argument. But either way is ok for now and it\u0027s easy to revisit with the current version.",
      "parentUuid": "1f7f711f_bd96d80a",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88a242e4_b4a3869a",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-28T00:50:01Z",
      "side": 1,
      "message": "previous comments were about when the only cases were OOM/Internal and could be indicated by an enum, not a bitmask (so you couldn\u0027t pass the whole list explicitly)\nbut either way is fine",
      "parentUuid": "e1625350_76e39749",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a07239_69adba99",
        "filename": "src/dawn/tests/unittests/native/AllowedErrorTests.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-25T17:56:11Z",
      "side": 1,
      "message": "u-u-nit: missing :: here?",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57063ea9_ebb864cc",
        "filename": "src/dawn/tests/unittests/native/AllowedErrorTests.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-27T22:19:54Z",
      "side": 1,
      "message": "Oh... hmm interesting, for some reason I was under the impression that `MockCallback` was under `dawn::native::testing` which is why I didn\u0027t have the extra :: here. But fixed now, thanks!",
      "parentUuid": "d5a07239_69adba99",
      "revId": "dfbf71adac178378028fc4ebc6cd32f2e9b25702",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}