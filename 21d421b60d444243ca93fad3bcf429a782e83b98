{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "35fea998_2f0bbb85",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-03T08:33:52Z",
      "side": 1,
      "message": "Why can\u0027t we do the gamma correction in the shader and have to do an extra copy instead?",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c592b92_a9b4deed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-01-04T23:55:35Z",
      "side": 1,
      "message": "This is probably a good idea. If the destination format is -srgb and the destination color space is srgb-encoded then we can just skip the srgb conversion at the end. Unfortunately if the destination color space is not srgb-encoded then it requires extra code in the shader and that\u0027s why I didn\u0027t give this enough thought.\n\nNow I\u0027m thinking the spec should actually disallow copying into *-srgb with color spaces that aren\u0027t srgb-encoded (so \"srgb\" and \"display-p3\" are OK, but \"srgb-linear\" or \"prophoto-rgb\" are not). (Right now the only destination color space is \"srgb\", so we would put limitation in when we expand it.)",
      "parentUuid": "35fea998_2f0bbb85",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbef6b92_17fe2162",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-05T06:41:39Z",
      "side": 1,
      "message": "\u003e Why can\u0027t we do the gamma correction in the shader and have to do \u003e an extra copy instead?\nIn previous, I think we don\u0027t go this way because it is complicated to add an extra step in the shader. But\nI think it is doable in current copyTextureForBrowser(). With stepMask and general gamma conversion functions, I\u0027d like to have a try.",
      "parentUuid": "8c592b92_a9b4deed",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8c8fea4_3fd4795c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-05T08:05:53Z",
      "side": 1,
      "message": "Adding an extra decoding step for srgb-ness format. PTAL!",
      "parentUuid": "bbef6b92_17fe2162",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a1f0049_cbd474da",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-01-06T00:55:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c8c8fea4_3fd4795c",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b62acfa_801910b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-03T08:33:52Z",
      "side": 1,
      "message": "LGTM",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f87ab564_dd01fbfc",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 367,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-03T08:33:52Z",
      "side": 1,
      "message": "u-nit: Maybe just IsSrgbFormat since the function doesn\u0027t care if the format is dst or not.",
      "range": {
        "startLine": 367,
        "startChar": 9,
        "endLine": 367,
        "endChar": 24
      },
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed32268_268c05bb",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 367,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-01-04T23:55:35Z",
      "side": 1,
      "message": "This function returns false for formats like bc2-rgba-unorm-srgb so I think the name is good as is.",
      "parentUuid": "f87ab564_dd01fbfc",
      "range": {
        "startLine": 367,
        "startChar": 9,
        "endLine": 367,
        "endChar": 24
      },
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55e21833_821db4ad",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 367,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-05T08:05:53Z",
      "side": 1,
      "message": "Yes, this is specific for dst formats. Add comments for this.",
      "parentUuid": "9ed32268_268c05bb",
      "range": {
        "startLine": 367,
        "startChar": 9,
        "endLine": 367,
        "endChar": 24
      },
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24c4458a_f3bbabe5",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-03T08:33:52Z",
      "side": 1,
      "message": "u-nit: GetSrgbLessFormat, and move the comment in DoCopyTextureForBrowser, see [1]",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c392aa82_f0948785",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-01-04T23:55:35Z",
      "side": 1,
      "message": "Maybe GetDstFormatWithoutSrgb to match IsSrgbDstFormat?",
      "parentUuid": "24c4458a_f3bbabe5",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36f5b0a8_d40b3417",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-05T08:05:53Z",
      "side": 1,
      "message": "Don\u0027t need this helper function. Done.",
      "parentUuid": "c392aa82_f0948785",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6da0c8c_5e0edc39",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 404,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-03T08:33:52Z",
      "side": 1,
      "message": "nit: it might be clearer to do things recursively:\n\n\n  MaybeError EncodeCopyTextureForBrowser(encoder, ...) {\n    // Comment that explains why we are doing this.\n    if (IsSrgbFormat(format)) {\n      format \u003d GetSrgbLessFormat\n      Create temporary texture with format.\n      DAWN_TRY(EncodeCopyTextureForBrowser());\n      encoder-\u003eCopyTextureToTexture.\n      return {};\n    }\n  }",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45a54692_eff7ce4f",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 404,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-05T08:05:53Z",
      "side": 1,
      "message": "Don\u0027t need the extra copy steps any more!",
      "parentUuid": "a6da0c8c_5e0edc39",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d9e40b0_cd074cdf",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 642,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-03T08:33:52Z",
      "side": 1,
      "message": "Instead of modifying the expected result we copy into a non-srgb texture so that we can verify the bytes are what we expect? We should comment that. But also how hard would it be to do the gamma correction here instead?",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a5fb831_8c91a16d",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 642,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-05T08:05:53Z",
      "side": 1,
      "message": "Since we\u0027re using extra gamma correction step in shaders. I think the test cases use another way to ensure bytes equal is good. Adding comments for this.",
      "parentUuid": "7d9e40b0_cd074cdf",
      "revId": "21d421b60d444243ca93fad3bcf429a782e83b98",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}