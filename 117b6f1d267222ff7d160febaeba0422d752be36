{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "243fba7c_8a215def",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-21T20:47:56Z",
      "side": 1,
      "message": "Looks like you might need to find another magic number to use for the end-to-end tests.",
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffc7264d_d6dbeaba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T21:08:51Z",
      "side": 1,
      "message": "It\u0027s odd because this is failing on Windows, and I generate on Windows. Must be a difference in sqrt implementations between my version of VS and the one on Kokoro.",
      "parentUuid": "243fba7c_8a215def",
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec11574e_c31114f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T22:03:23Z",
      "side": 1,
      "message": "Using 0.0 as the test value for now. Created this bug: https://bugs.chromium.org/p/tint/issues/detail?id\u003d1767",
      "parentUuid": "ffc7264d_d6dbeaba",
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ef33e4c_e8dcf6b6",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-21T20:47:56Z",
      "side": 1,
      "message": "Can\u0027t this be implemented with `sqrt(Dot())`?",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcf82b17_be6e950d",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-21T21:04:22Z",
      "side": 1,
      "message": "The Sqrt implementation could be pulled up to a function as we do for Clamp and then this could be done.",
      "parentUuid": "2ef33e4c_e8dcf6b6",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e47f26aa_4e12cc58",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T21:06:52Z",
      "side": 1,
      "message": "It could, but I like having the VecNLengthFuncs as it makes the top level `ConstEval::length` easier to understand. I will rewrite `ConstEval::VecLength` in terms of Dot, though.",
      "parentUuid": "2ef33e4c_e8dcf6b6",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07b726ce_0d06738c",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T21:07:29Z",
      "side": 1,
      "message": "Sorry, replied before I saw your message, Dan. I could also do that. I\u0027ll give that a try.",
      "parentUuid": "e47f26aa_4e12cc58",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2da4f10_59b200d5",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-21T21:57:58Z",
      "side": 1,
      "message": "I didn\u0027t realize we haven\u0027t implemented `::dot` yet. Should this be delayed and `::dot` landed first? We shouldn\u0027t need the VecLength methods as `::length` can just use the builtin `Dot` that `::dot` will have to use.",
      "parentUuid": "07b726ce_0d06738c",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6af69f72_36f08bf0",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T22:03:23Z",
      "side": 1,
      "message": "In the end, I decided to keep as is, but rewrote VecLength in terms of Dot4. There\u0027s no need for a Sqrt function right now as the result will never be negative, so there\u0027s no failure to catch there (yet).",
      "parentUuid": "07b726ce_0d06738c",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8932c63_620647e2",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T22:06:44Z",
      "side": 1,
      "message": "@dsinclair@chromium.org I do have Dot2/3/4 implemented as helpers because they are used by `cross`, so I am able to use them. I can call these directly, and then take the square root of the result. I just found the top-level function easier to read with VecLength functions.",
      "parentUuid": "6af69f72_36f08bf0",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b77c8005_647cbe68",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-21T22:12:04Z",
      "side": 1,
      "message": "We\u0027re goign to have to do the same code for `::dot` as it will be calling the dot methods. If we did `::dot` first, then `::length` will just become:\n\n```\nval res \u003d Dot(..);\nif (!res) {\n  return utils::Failure;\n}\nval s \u003d Sqrt(res.Get());\n...\n```\n\nWhich re-uses the existing methods and cuts down on duplication in the length method. There is then no need for the vec length methods as they all re-use dot.",
      "parentUuid": "d8932c63_620647e2",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d71ab05_60eb43cf",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-22T02:25:20Z",
      "side": 1,
      "message": "I implemented `dot` and rebased this CL on top of it. I did the factoring out to a shared private `Dot` function in this CL, not the parent.",
      "parentUuid": "b77c8005_647cbe68",
      "range": {
        "startLine": 893,
        "startChar": 0,
        "endLine": 953,
        "endChar": 1
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29fc62c1_5c88ac10",
        "filename": "src/tint/resolver/const_eval.h",
        "patchSetId": 2
      },
      "lineNbr": 948,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-21T20:47:56Z",
      "side": 1,
      "message": "doxygen?",
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8c67a79_c43c483f",
        "filename": "src/tint/resolver/const_eval.h",
        "patchSetId": 2
      },
      "lineNbr": 948,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T21:06:52Z",
      "side": 1,
      "message": "Yep, sorry, meant to. Unfortunately, doxygen doesn\u0027t fail on missing these on private members.",
      "parentUuid": "29fc62c1_5c88ac10",
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e25434c7_6c01e1ae",
        "filename": "src/tint/resolver/const_eval.h",
        "patchSetId": 2
      },
      "lineNbr": 1029,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-21T20:47:56Z",
      "side": 1,
      "message": "doxygen?",
      "range": {
        "startLine": 1027,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 72
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44b0022a_451ce611",
        "filename": "src/tint/resolver/const_eval.h",
        "patchSetId": 2
      },
      "lineNbr": 1029,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-21T21:06:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e25434c7_6c01e1ae",
      "range": {
        "startLine": 1027,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 72
      },
      "revId": "117b6f1d267222ff7d160febaeba0422d752be36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}