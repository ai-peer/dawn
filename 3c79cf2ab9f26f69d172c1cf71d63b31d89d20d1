{
  "comments": [
    {
      "key": {
        "uuid": "b9190314_77308660",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2019-10-21T16:43:20Z",
      "side": 1,
      "message": "I don\u0027t think you want all_dependent_configs here. This can just be a normal config, no?\n\nImagine some dylib linking to dawn, and then something linking to that dylib. You only want the dylib that directly uses dawn link against metal.\n\nIn other words, you can just put this in ldflags in this target; no need for a config.",
      "revId": "3c79cf2ab9f26f69d172c1cf71d63b31d89d20d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41ca34e6_0a2dc944",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000573
      },
      "writtenOn": "2019-10-21T17:51:47Z",
      "side": 1,
      "message": "I remember I\u0027ve tried that, but for some reason it didn\u0027t work.\nFrom what I remember: ldflags were not propagated and all targets using `libdawn_native` needed `-weak_framework Metal` flags.\nMaybe I\u0027ve done it incorrectly.",
      "parentUuid": "b9190314_77308660",
      "revId": "3c79cf2ab9f26f69d172c1cf71d63b31d89d20d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86639762_cfdefc09",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2019-10-21T18:19:14Z",
      "side": 1,
      "message": "Can you try and find out what exactly went wrong when you tried using ldflags directly?",
      "parentUuid": "41ca34e6_0a2dc944",
      "revId": "3c79cf2ab9f26f69d172c1cf71d63b31d89d20d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f22d520_63a96c19",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000573
      },
      "writtenOn": "2019-10-22T06:37:43Z",
      "side": 1,
      "message": "Inside source_set(\"libdawn_native_sources\") I\u0027ve added\n\nif (is_mac \u0026\u0026 dawn_enable_metal) {\n     ldflags \u003d [\n       \"-weak_framework\",\n       \"Metal\",\n     ]\n}\n\nExecuting \"ninja dawn_unittests\" results in:\n\nLINK ./dawn_unittests\nFAILED: dawn_unittests \nTOOL_VERSION\u003d1568023737 ../../build/toolchain/mac/linker_driver.py -Wcrl,strippath,/Applications/Xcode10.3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/strip ../../third_party/llvm-build/Release+Asserts/bin/clang++ -B /Applications/Xcode10.3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/  -Wl,-fatal_warnings -stdlib\u003dlibc++ -arch x86_64 -segprot PROTECTED_MEMORY rw r -Werror -nostdlib++ -isysroot ../../../../../../../../Applications/Xcode10.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -mmacosx-version-min\u003d10.10.0 -Wl,-ObjC -o \"./dawn_unittests\" -Wl,-filelist,\"./dawn_unittests.rsp\"  -framework Cocoa -framework IOKit -framework IOSurface -framework ApplicationServices -framework AppKit -lbsm -framework CoreFoundation -framework OpenDirectory -lpmenergy -lpmsample -framework Security\nUndefined symbols for architecture x86_64:\n  \"_MTLCopyAllDevices\", referenced from:\n      dawn_native::metal::Backend::DiscoverDefaultAdapters() in BackendMTL.o\n  \"_OBJC_CLASS_$_MTLDepthStencilDescriptor\", referenced from:\n      objc-class-ref in RenderPipelineMTL.o\n  \"_OBJC_CLASS_$_MTLRenderPassDescriptor\", referenced from:\n      objc-class-ref in CommandBufferMTL.o\n  \"_OBJC_CLASS_$_MTLRenderPipelineDescriptor\", referenced from:\n      objc-class-ref in RenderPipelineMTL.o\n  \"_OBJC_CLASS_$_MTLSamplerDescriptor\", referenced from:\n      objc-class-ref in SamplerMTL.o\n  \"_OBJC_CLASS_$_MTLStencilDescriptor\", referenced from:\n      objc-class-ref in RenderPipelineMTL.o\n  \"_OBJC_CLASS_$_MTLTextureDescriptor\", referenced from:\n      objc-class-ref in CommandBufferMTL.o\n      objc-class-ref in TextureMTL.o\n  \"_OBJC_CLASS_$_MTLVertexAttributeDescriptor\", referenced from:\n      objc-class-ref in RenderPipelineMTL.o\n  \"_OBJC_CLASS_$_MTLVertexBufferLayoutDescriptor\", referenced from:\n      objc-class-ref in RenderPipelineMTL.o\n  \"_OBJC_CLASS_$_MTLVertexDescriptor\", referenced from:\n      objc-class-ref in RenderPipelineMTL.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\nFor some reason ldflags is not used.",
      "parentUuid": "86639762_cfdefc09",
      "revId": "3c79cf2ab9f26f69d172c1cf71d63b31d89d20d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9019ef81_32a2a0dd",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000573
      },
      "writtenOn": "2019-10-22T07:51:10Z",
      "side": 1,
      "message": "Found the explanation https://gn.googlesource.com/gn/+/master/docs/reference.md#var_ldflags\n\nldflags are NOT pushed to dependents, so applying ldflags to source sets or\n  static libraries will be a no-op. If you want to apply ldflags to dependent\n  targets, put them in a config and set it in the all_dependent_configs or\n  public_configs.",
      "parentUuid": "0f22d520_63a96c19",
      "revId": "3c79cf2ab9f26f69d172c1cf71d63b31d89d20d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aecf968f_a535d30d",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000573
      },
      "writtenOn": "2019-10-22T17:43:24Z",
      "side": 1,
      "message": "Nico, will that change solve the problem?\n\n -  all_dependent_configs \u003d [ \":libdawn_native_weak_framework\" ]\n +  public_configs \u003d [ \":libdawn_native_weak_framework\" ]",
      "parentUuid": "9019ef81_32a2a0dd",
      "revId": "3c79cf2ab9f26f69d172c1cf71d63b31d89d20d1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}