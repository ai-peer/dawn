{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "da6f2f74_22990ef0",
        "filename": "src/tint/ir/module.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-17T22:34:16Z",
      "side": 1,
      "message": "Use a `UniqueAllocator` ? I think you can just call this `constants` then.",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "1160e5041e009837219f45914643de46422a8528",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24dac1a9_2647f2fb",
        "filename": "src/tint/ir/module.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-05-18T02:09:50Z",
      "side": 1,
      "message": "Not sure what you mean. This is the `constant::Value` arena where the `constant::` constants are allocated from. The hash below is a map of `constant::Value` -\u003e `ir::Constant` which is what we use to return a unique `ir::Constant` based on the `constant::Value`.",
      "parentUuid": "da6f2f74_22990ef0",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "1160e5041e009837219f45914643de46422a8528",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d994a41a_a551111a",
        "filename": "src/tint/ir/module.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-18T08:57:40Z",
      "side": 1,
      "message": "argh, I\u0027m getting myself in a muddle. Ignore me.",
      "parentUuid": "24dac1a9_2647f2fb",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "1160e5041e009837219f45914643de46422a8528",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ee8de94_4148e054",
        "filename": "src/tint/ir/module.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-05-18T09:02:09Z",
      "side": 1,
      "message": "Actually - maybe yesterday\u0027s Ben was right. `utils::UniqueAllocator` holds a `utils::BlockAllocator` and `unordered_set`. This is essentially what you have here. Replace this with `utils::UniqueAllocator` using your custom hasher and equality structs, and I think you have a single field that does the de-duping, and provides the iterator interface of `constants`.",
      "parentUuid": "d994a41a_a551111a",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "1160e5041e009837219f45914643de46422a8528",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41d2bf4a_188b3c8f",
        "filename": "src/tint/ir/module.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-05-18T14:11:09Z",
      "side": 1,
      "message": "I think I\u0027m still missing something.\n\nThe result of calling `constants.Get` will give me an `ir::Constant`. If I change this to use the hasher and equals, I\u0027ll get a `constant::Value` back, which isn\u0027t want I want, I need `ir::Constant` values.\n\nSo, this allocator provides the `constant::Value` and the hashset below maps that `constant::Value` to an `ir::Constant` (which is allocated out of the `values` arena).",
      "parentUuid": "7ee8de94_4148e054",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "1160e5041e009837219f45914643de46422a8528",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}