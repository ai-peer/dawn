{
  "comments": [
    {
      "key": {
        "uuid": "58b4df5a_c5bc7ee4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-24T01:21:08Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "5effcfeae7541ec083fd39c7f222f4cccefe6a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12af324_52aef752",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-24T18:28:09Z",
      "side": 1,
      "message": "Don\u0027t we need to inform AllocateAndSwitch at least how large we want the new heap? Otherwise it\u0027ll blindly double in size which still may not be large enough for PopulateViews.\n\nWe call AllocateAndSwitch here https://source.chromium.org/chromium/chromium/src/+/master:third_party/dawn/src/dawn_native/d3d12/CommandBufferD3D12.cpp;l\u003d212?q\u003dAllocateAndSwitchShaderVisibleHeap\n\nand then here https://source.chromium.org/chromium/chromium/src/+/master:third_party/dawn/src/dawn_native/d3d12/CommandBufferD3D12.cpp;l\u003d214?q\u003dAllocateAndSwitchShaderVisibleHeap\n\nwe ASSERT that the heap was actually large enough to satisfy PopulateViews\n\n",
      "revId": "5effcfeae7541ec083fd39c7f222f4cccefe6a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e43a031_814014ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-07-24T18:56:45Z",
      "side": 1,
      "message": "I found it easiest to keep the initial (min) heap size large enough to satisfy the largest request, so no doubling occurs at first (or ASSERT). This was set for (sampler\u003d256, view\u003d4k), well above the limits but I left a TODO to tweak that, if needed.",
      "parentUuid": "a12af324_52aef752",
      "revId": "5effcfeae7541ec083fd39c7f222f4cccefe6a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13085f32_fa04ec0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-24T19:08:18Z",
      "side": 1,
      "message": "Ah okay I see. Please add some comments about this invariant and also static_assert the min sizes w.r.t kMaxBindingsPerPipelineLayout and the computed max total descriptor count per pipeline layout per heap.\n\nIf we\u0027re doing this dynamic sizing though, is there a reason to have the minimum satisfy the largest possible request? Or, are the current minimums small enough to be insignificant? It seems reasonable to accumulate the required descriptor counts for the pipeline layout.",
      "parentUuid": "6e43a031_814014ac",
      "revId": "5effcfeae7541ec083fd39c7f222f4cccefe6a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}