{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fd729a9e_1158165e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-11-15T04:28:17Z",
      "side": 1,
      "message": "This is a new tint transformation aiming to workaround the HLSL limitations on interstage variables. I try to come up with some tint unit test cases, and had some dawn end2end tests to make sure the render result is correct on D3D backends (Inside the WIP patch in relation chain). But I could miss many coverages as this is my first tint transform patch.\n\nI now made an assumption that this transform must be run after the CanonicalizeEntryPoint transform. And it looks like SingleEntryPoint transform is added on all dawn backend for shader module compilation (but not internally on Tint generator). If we can assume SingleEntryPoint is always run then there should be less risk. Now it could handle multiple entry points (with two test cases coverage)\n\nThanks!",
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39cba58b_715abc50",
        "filename": "src/tint/transform/truncate_interstage_variables.cc",
        "patchSetId": 16
      },
      "lineNbr": 124,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-15T13:34:25Z",
      "side": 1,
      "message": "optimization: You could do an early pass to identify all the attributes that are kept / discarded. If all are kept, you don\u0027t have to modify the function. If no functions have to be modified then `should_run` can remain `false` and the whole transform can be skipped.",
      "range": {
        "startLine": 124,
        "startChar": 20,
        "endLine": 124,
        "endChar": 46
      },
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4705e69b_897f7f4d",
        "filename": "src/tint/transform/truncate_interstage_variables.cc",
        "patchSetId": 16
      },
      "lineNbr": 148,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-15T13:34:25Z",
      "side": 1,
      "message": "This is unnecessary. `New()` ensures that the identifier is unique. It\u0027ll add suffixes as necessary.",
      "range": {
        "startLine": 148,
        "startChar": 56,
        "endLine": 148,
        "endChar": 91
      },
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f24b1288_f350ec6e",
        "filename": "src/tint/transform/truncate_interstage_variables.cc",
        "patchSetId": 16
      },
      "lineNbr": 159,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-15T13:34:25Z",
      "side": 1,
      "message": "nit: I\u0027d prefer the condition flipped to reduce nesting:\n\n```\nif (!should_run) {\n  return SkipTransform;\n}\n```",
      "range": {
        "startLine": 159,
        "startChar": 4,
        "endLine": 159,
        "endChar": 21
      },
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ea68910_30bb7f38",
        "filename": "src/tint/transform/truncate_interstage_variables.h",
        "patchSetId": 16
      },
      "lineNbr": 24,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-15T13:34:25Z",
      "side": 1,
      "message": "This is really vague. Please can you explain what problem this transform solves, what transforms need to be run before this transform.",
      "range": {
        "startLine": 24,
        "startChar": 61,
        "endLine": 24,
        "endChar": 84
      },
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "977e1c63_c02e2adf",
        "filename": "src/tint/transform/truncate_interstage_variables_test.cc",
        "patchSetId": 16
      },
      "lineNbr": 268,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-15T13:34:25Z",
      "side": 1,
      "message": "We\u0027ve reordered this structure. I know D3D can be fussy about attribute order. Is this intentional?",
      "range": {
        "startLine": 267,
        "startChar": 0,
        "endLine": 268,
        "endChar": 18
      },
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad72ae37_dee52534",
        "filename": "src/tint/transform/truncate_interstage_variables_test.cc",
        "patchSetId": 16
      },
      "lineNbr": 368,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-11-15T13:34:25Z",
      "side": 1,
      "message": "Given that `TruncateInterstageVariables::Config::interstage_locations` applies to **all** vertex entry points, and these entry points share the same output structure, why do we need to generate the helper function twice?\n\nCouldn\u0027t we just use a `Hashmap\u003cconst sem::Struct*, N\u003e::GetOrCreate()` to build the helper for each uniquely return structure?",
      "range": {
        "startLine": 363,
        "startChar": 0,
        "endLine": 368,
        "endChar": 1
      },
      "revId": "2ff919cb59e361f92027d9b76f88f3267e998cfc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}