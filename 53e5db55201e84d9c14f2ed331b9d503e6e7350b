{
  "comments": [
    {
      "key": {
        "uuid": "30c12fd6_a7099f44",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "Create doesn\u0027t really describe what this method does. \"ReallocateIfNeeded\" / \"Populate\" / ... ?",
      "range": {
        "startLine": 30,
        "startChar": 35,
        "endLine": 30,
        "endChar": 41
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d36ff7b_b6f45af7",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 30,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "We use ::Create elsewhere for a similar meaning. It shouldn\u0027t care about heap re-allocation nor given allocations to populate. No strong preference.",
      "parentUuid": "30c12fd6_a7099f44",
      "range": {
        "startLine": 30,
        "startChar": 35,
        "endLine": 30,
        "endChar": 41
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b78fecd_23c79323",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "::Create usually means creating an object inside a new allocation. Here it means re-allocating the object if needed which is a very different semantic.",
      "parentUuid": "8d36ff7b_b6f45af7",
      "range": {
        "startLine": 30,
        "startChar": 35,
        "endLine": 30,
        "endChar": 41
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e1df2a1_c1db3c68",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 30,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-27T18:04:10Z",
      "side": 1,
      "message": "Reverted to \"Populate\".",
      "parentUuid": "6b78fecd_23c79323",
      "range": {
        "startLine": 30,
        "startChar": 35,
        "endLine": 30,
        "endChar": 41
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ea566e1_b834634a",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 33,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-24T02:45:43Z",
      "side": 1,
      "message": "Nit: it\u0027s --\u003e its",
      "range": {
        "startLine": 33,
        "startChar": 59,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1583067_b388fb8f",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 33,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-27T18:04:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ea566e1_b834634a",
      "range": {
        "startLine": 33,
        "startChar": 59,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb9bbe72_eaa5ef5e",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "nit: \"Memory\" sounds like this is regular resource memory. Rename to AllocateDescriptors maybe?",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 46
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a82e2ee_4479acb4",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 43,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb9bbe72_eaa5ef5e",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 46
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2811a95_b6708e93",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "nit: comment as to what true / false returns values mean.",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69195578_6d0b5f7f",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 30,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2811a95_b6708e93",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d029b62_cb122037",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 94,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "This only needs to happen if didReallocation or if we\u0027re at the start of the command list. Can it be done there to avoid several branches in the common case where we don\u0027t reallocate?",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec8ca3cb_9df8519d",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 94,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d029b62_cb122037",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8182d33_44930048",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "In Create the bindgroup will call device-\u003eAllocateMemory which will modify this object\u0027s state. This reentrant control flow is a bit unclear because it goes like this: commandbuffer -\u003e manager -\u003e bindgroup -\u003e manager ...\n\nPrefer either having the manager pass itself to the bindgroup (which results in commandbuffer - \u003e manager -\u003e bindgroup -\u003e manager but more explicitly), or inverting the dataflow so it goes commandbuffer -\u003e bindgroup -\u003e manager.",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3f142f_19abbb11",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 72,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "\u003e or inverting the dataflow so it goes commandbuffer -\u003e bindgroup -\u003e manager.\n\nHow do you feel about moving AllocateBindgroups() back into CommandBuffer?\n\nThen it follows as we would expect: \"commandList -\u003e bindgroup -\u003e manager\" and \"commadList -\u003e manager\", the latter for AllocateShaderVisibleHeaps().",
      "parentUuid": "d8182d33_44930048",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "384a6510_7bbe9255",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 72,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-27T18:04:10Z",
      "side": 1,
      "message": "Moved into separate method on command-list (as suggested). If you feel strongly, please re-open.",
      "parentUuid": "0d3f142f_19abbb11",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe223a60_50243b0a",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "It goes part of the way there.\n\nThere is still the problem where the BindGroups re-queries the manager from the device. When the code says Populate() it\u0027s not clear that it will modify the internal state of the manager.",
      "parentUuid": "384a6510_7bbe9255",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf93592c_3b66a39c",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 72,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe223a60_50243b0a",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b98f7c20_caf34d38",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "nit: return {...};",
      "range": {
        "startLine": 103,
        "startChar": 20,
        "endLine": 104,
        "endChar": 92
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ed7cb89_b53cd588",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 104,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b98f7c20_caf34d38",
      "range": {
        "startLine": 103,
        "startChar": 20,
        "endLine": 104,
        "endChar": 92
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0321e21_2c1ca28c",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "To simplify things we could only have cbvUavSrv and sampler in ShaderVisibleDescriptorAllocator and not deal with other descriptor. See previous comment:\n\n\u003e There\u0027s no real good reason that the descriptor heap allocator takes care of both CPU and GPU heaps for all types of descriptors as each type of descriptor is used very differently:\n\u003e  - CPU RTV or DSV is very low-frequency and small amounts of data and doesn\u0027t have issues with a single heap being usable at any given time.\n\u003e  - GPU CBV_UAV_SRV and Sampler heaps are super-high frequency and only one of each can be bound at a time.\n\u003e  - CPU CBV_UAV_SRV and Sampler heaps, when we will use them, will be super-high frequency and likely binned per BindGroupLayout.",
      "range": {
        "startLine": 105,
        "startChar": 20,
        "endLine": 116,
        "endChar": 75
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7813f57_6a0f4acf",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "I\u0027m confused. ShaderVisibleDescriptorAllocator only works with cbvUavSrv and sampler. This code conveniently selects the right allocator based on type. \n\nAre you suggesting to move this into it\u0027s own function?",
      "parentUuid": "c0321e21_2c1ca28c",
      "range": {
        "startLine": 105,
        "startChar": 20,
        "endLine": 116,
        "endChar": 75
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f846e0ff_3d7a5395",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "[1] The suggestion is to have specialized allocators for each of the three types of descriptors described above because they have very different usage characteristics. Basically in the future in Dawn there is likely to be a ShaderVisibleDescriptorAllocator, a ShaderVisibleStagingAllocator, and an RenderTargetDescriptorAllocator for RTV/DSV. They would share almost no code because they are used very differently:\n\n - ShaderVisibleDescriptorAllocator is what should be done in this CL and has linear allocators into GPU visible descriptors heaps with heap serials to handle the fact that a single descriptor heap of each type can be in use at a time.\n - ShaderVisibleStagingAllocator is a block allocator likely per BindGroupLayout of CBVSRVUAV / Sampler with D3D12_DESCRIPTOR_HEAP_FLAG_NONE that used to precompute descriptors so that ShaderVisibleDescriptorAllocator allocation is just copying descriptors.\n - RenderTargetDescriptorAllocator is probably just a growing ringbuffer.\n\nThere are many different concepts behind the D3D12 generic names of descriptors and descriptor heaps, and for simplicity and performance we should have different handling for different underlying concepts.",
      "parentUuid": "c7813f57_6a0f4acf",
      "range": {
        "startLine": 105,
        "startChar": 20,
        "endLine": 116,
        "endChar": 75
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11aeacc6_9ace9023",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-27T18:04:10Z",
      "side": 1,
      "message": "Oh, okay. I also see these being (eventually) split. However, I prefer we keep this CL as-is and address in a follow-up. Note, RTV/DSV was moved to depreciate the old allocator. Being trivial, a new type is overkill. As for shader-visible heaps, please clarify [2].",
      "parentUuid": "f846e0ff_3d7a5395",
      "range": {
        "startLine": 105,
        "startChar": 20,
        "endLine": 116,
        "endChar": 75
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06420359_595842a6",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "Any reason these two are separate objects instead of being inlined in this class (and the whole thing in ShaderVisibleDescriptorAllocator.cpp/.h)?\n\nThere\u0027s a lot of extra indirection like device::IsBindGroupValid -\u003e DescriptorAllocatorManager::IsBindGroupValid -\u003e ShaderVisibleDescriptorAllocator::IsBindGroupValid. When we could just have ShaderVisibleDescriptorAllocator::IsBindGroupValid.",
      "range": {
        "startLine": 54,
        "startChar": 1,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18b9d3c4_d2a38559",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 56,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Was following the resources allocators; but I tend to agree, collapsed.",
      "parentUuid": "06420359_595842a6",
      "range": {
        "startLine": 54,
        "startChar": 1,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ea5e4fa_adb9f084",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "nit: spell out simple types.",
      "range": {
        "startLine": 42,
        "startChar": 8,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b273921_b8fd6e4c",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 42,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ea5e4fa_adb9f084",
      "range": {
        "startLine": 42,
        "startChar": 8,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82de57ba_2774e56c",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 12
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71e23132_b84bd131",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 49,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82de57ba_2774e56c",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 12
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91b2daa2_42aa1b1f",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocatorD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "The allocator does nothing special, maybe the two methods could be inlined in ShaderVisibleDescriptorAllocatorD3D12 for more clarity / less indirections?",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92feb42d_085ab5db",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocatorD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91b2daa2_42aa1b1f",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4a66419_09a4537d",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocatorD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 26,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-01-24T02:45:43Z",
      "side": 1,
      "message": "Nit: depreciated --\u003e deprecated",
      "range": {
        "startLine": 26,
        "startChar": 56,
        "endLine": 26,
        "endChar": 68
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdf47762_06e8bd50",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocatorD3D12.h",
        "patchSetId": 33
      },
      "lineNbr": 26,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-27T18:04:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e4a66419_09a4537d",
      "range": {
        "startLine": 26,
        "startChar": 56,
        "endLine": 26,
        "endChar": 68
      },
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98f5c62f_d33f17bf",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 435,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "What\u0027s the need for this proxy function given they just forward the call to the manager? We could fold them by getting a pointer to the manager and then calling methods.",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8519d0fd_d4053c11",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 435,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "To keep it consistent with the other allocators that also go \"through the device\" vs indirectly through a Get(). OK with either.",
      "parentUuid": "98f5c62f_d33f17bf",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edb1fcc0_6da13e88",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 435,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-24T10:49:15Z",
      "side": 1,
      "message": "I have a slight preference for going in the object directly. I\u0027ll fix this in the Vulkan backend as well.",
      "parentUuid": "8519d0fd_d4053c11",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a64c642d_b5515618",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 435,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-27T18:04:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edb1fcc0_6da13e88",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33b438a3_879fc1b7",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "Maybe this enum should be in the DescriptorHeapAllocation itself so that we avoid switches in very hot code like IsBindGroupValid.",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2340f705_8ed88652",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 26,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Removed, cbvSrvUav and sampler conveniently sits in the right indicies, 0 and 1.",
      "parentUuid": "33b438a3_879fc1b7",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18fddc0e_d9443db9",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "This doesn\u0027t need to be ResultOrError. Also maybe call it TryAllocate to show clearly it is meant to fail when it runs out of space?",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc0dccba_d47eb605",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 76,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "Now inlined with AllocateDescriptors which does require ResultOrError.",
      "parentUuid": "18fddc0e_d9443db9",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be9ff0e2_b59ad1a6",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-21T09:49:59Z",
      "side": 1,
      "message": "If the allocation size is 0, instead of going in the ringbuffer, getting kInvalidOffset and then giving back a DescriptorHeapAllocation it could be more clear to special case allocationSize \u003d\u003d 0 and return a fake DescriptorHeapAllocation, and otherwise ask the RingBuffer to allocate.",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaaaba66_ba4dafd3",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 83,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "It cannot be fake, the heap is still valid which is used to check if the allocation failed or not.",
      "parentUuid": "be9ff0e2_b59ad1a6",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9912b845_82c18cb8",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 105,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-21T18:58:45Z",
      "side": 1,
      "message": "Adding a note of a bug discussed in today\u0027s call.\n\nIf the ringbuffer rotates, using the same bounded heap, a previously reclaimed allocation is wrongly considered \"still valid\" because the heap serial did not change and the allocation wouldn\u0027t get re-created. Ringbuffer assumes the client does not need to know if the allocation is freed - which is not the case for bindgroups would could be dirtied frequently.\n\nThe issue is not the use of FIFO queue but the ringbuffer\u0027s inability to invalidate blocks but not handles via Tick().",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7a590e3_b47740e5",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 105,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-01-22T07:45:48Z",
      "side": 1,
      "message": "Thanks for putting the note in!",
      "parentUuid": "9912b845_82c18cb8",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13ed48b1_70cb481b",
        "filename": "src/dawn_native/d3d12/ShaderVisibleDescriptorAllocatorD3D12.cpp",
        "patchSetId": 33
      },
      "lineNbr": 105,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-01-23T17:38:39Z",
      "side": 1,
      "message": "I added two mechanisms, 1) BindGroup::Invalidate() is called when heaps need to switch and 2) IsValid() + allocation.serial is checked should Tick() occur and rotate the ringbuffer.",
      "parentUuid": "b7a590e3_b47740e5",
      "revId": "53e5db55201e84d9c14f2ed331b9d503e6e7350b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}