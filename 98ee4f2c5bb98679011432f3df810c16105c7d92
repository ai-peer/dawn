{
  "comments": [
    {
      "key": {
        "uuid": "d573d49c_5c2eefb4",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T12:20:26Z",
      "side": 1,
      "message": "Now this function is just mLastState \u003d\u003d newState. Can it be inlined or keep the subset concept of the previous version?",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0a8b75a_949174ff",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-06-05T16:44:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d573d49c_5c2eefb4",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fda31e6_801f891a",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-03T23:19:22Z",
      "side": 1,
      "message": "Can this be implemented as a wrapper around TransitionUsageLater? They look the same, the only difference is Subresource; I don\u0027t know why that\u0027s different. Probably 0 and ALL_SUBRESOURCES are equivalent for buffers?",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d39a83ea_599161dd",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T12:20:26Z",
      "side": 1,
      "message": "Yeah the two subresources should be equivalent for buffers.",
      "parentUuid": "0fda31e6_801f891a",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29058e50_8f379567",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-06-05T16:44:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d39a83ea_599161dd",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "109a33c3_d2b2adad",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-03T23:19:22Z",
      "side": 1,
      "message": "The fact that this calling code could forget to issue the ResourceBarriers, leaving the resources in inconsistent states, makes me very slightly uncomfortable. What would you (Brandon and other reviewers) think of this? Too complex?\n\n  class ResourceBarrierBatcher {\n    public:\n      ~ResourceBarrierBatcher() {\n        ASSERT(mBarriers.size() \u003d\u003d 0);\n      }\n      void push(const D3D12_RESOURCE_BARRIER\u0026 barrier) {\n        mBarriers.push_back(barrier);\n      }\n      void submit(ComPtr\u003cID3D12GraphicsCommandList\u003e commandList) {\n        if (barriers.size()) {\n          commandList-\u003eResourceBarrier(mBarriers.size(), mBarriers.data());\n        }\n        mBarriers.clear();\n      }\n    private:\n      std::vector\u003cD3D12_RESOURCE_BARRIER\u003e mBarriers;\n  };\n\n  ResourceBarrierBatcher batcher;\n  for (size_t i \u003d 0; i \u003c usages.buffers.size(); ++i) {\n    ToBackend(usages.buffers[i])\n        -\u003eTransitionUsageLater(\u0026batcher, usages.bufferUsages[i]);\n  }\n  for (size_t i \u003d 0; i \u003c usages.textures.size(); ++i) {\n    ToBackend(usages.textures[i])\n        -\u003eTransitionUsageLater(\u0026batcher, usages.textureUsages[i]);\n  }\n  batcher.submit(commandList);",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6854ca9f_4a70894b",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-06-04T01:39:42Z",
      "side": 1,
      "message": "I like Kai\u0027s idea. With this approach, We can rename \"TransitionUsageLater\" to \"TransitionUsageBatched\".",
      "parentUuid": "109a33c3_d2b2adad",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79ffb84e_fd584e02",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-06-04T18:15:09Z",
      "side": 1,
      "message": "The batcher idea is interesting - but if I\u0027m understanding the issue correctly - I\u0027m not sure it entirely resolves it. TransitionUsageLater is still executing an under-the-hood state transition - and the concern of the calling code forgetting to issue a ResourceBarrier still exists (just in a different spot).\n\nI think a simpler idea may be to make the caller\u0027s operation on the resource state explicit. Roughly:\n\nauto TransitionForPass \u003d [](ComPtr\u003cID3D12GraphicsCommandList\u003e commandList,\n                                    const PassResourceUsage\u0026 usages) {\n\n    std::vector\u003cD3D12_RESOURCE_BARRIER\u003e barriers;\n\n    for (size_t i \u003d 0; i \u003c usages.textures.size(); ++i) {\n    D3D12_RESOURCE_BARRIER barrierOut;\n    if (ToBackend(usages.textures[i])\n            -\u003eCreateD3D12ResourceBarrier(barrierOut, usages.textureUsages[i]) {\n        barriers.push_back(barrierOut);\n        ToBackend(usages.textures[i])-\u003eSetUsage(usages.textureUsages[i]));\n    }\n     \n    // Same for buffers\n    \n    if (barriers.size()) {\n        commandList-\u003eResourceBarrier(barriers.size(), barriers.data());\n    }\n}\n\nCreateD3D12ResourceBarrier would return true and a filled out RESOURCE_BARRIER struct if we should transition, and false if we can skip the call. It would not update the resource state.\n\nSetUsage would make it more obvious that the caller changes the resource usage in tandem with the ResourceBarrier call.\n\nWhat do you all think?",
      "parentUuid": "6854ca9f_4a70894b",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9301284d_99aa7fb5",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-04T18:30:26Z",
      "side": 1,
      "message": "That sounds good to me. Nit: come up with a name for CreateD3D12ResourceBarrier that conveys that it will return false if none is needed.",
      "parentUuid": "79ffb84e_fd584e02",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "305236b4_5265fbc0",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-06-05T16:44:27Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "9301284d_99aa7fb5",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c7e842b_fe90865d",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T12:20:26Z",
      "side": 1,
      "message": "Same as Kai\u0027s comment on BufferD3D12, this is very similar to TransitionUsageNow so we could factor it?",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "672ac5b7_76bc044c",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2019-06-05T16:44:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c7e842b_fe90865d",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}