{
  "comments": [
    {
      "key": {
        "uuid": "d573d49c_5c2eefb4",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T12:20:26Z",
      "side": 1,
      "message": "Now this function is just mLastState \u003d\u003d newState. Can it be inlined or keep the subset concept of the previous version?",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fda31e6_801f891a",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-03T23:19:22Z",
      "side": 1,
      "message": "Can this be implemented as a wrapper around TransitionUsageLater? They look the same, the only difference is Subresource; I don\u0027t know why that\u0027s different. Probably 0 and ALL_SUBRESOURCES are equivalent for buffers?",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d39a83ea_599161dd",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T12:20:26Z",
      "side": 1,
      "message": "Yeah the two subresources should be equivalent for buffers.",
      "parentUuid": "0fda31e6_801f891a",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "109a33c3_d2b2adad",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-03T23:19:22Z",
      "side": 1,
      "message": "The fact that this calling code could forget to issue the ResourceBarriers, leaving the resources in inconsistent states, makes me very slightly uncomfortable. What would you (Brandon and other reviewers) think of this? Too complex?\n\n  class ResourceBarrierBatcher {\n    public:\n      ~ResourceBarrierBatcher() {\n        ASSERT(mBarriers.size() \u003d\u003d 0);\n      }\n      void push(const D3D12_RESOURCE_BARRIER\u0026 barrier) {\n        mBarriers.push_back(barrier);\n      }\n      void submit(ComPtr\u003cID3D12GraphicsCommandList\u003e commandList) {\n        if (barriers.size()) {\n          commandList-\u003eResourceBarrier(mBarriers.size(), mBarriers.data());\n        }\n        mBarriers.clear();\n      }\n    private:\n      std::vector\u003cD3D12_RESOURCE_BARRIER\u003e mBarriers;\n  };\n\n  ResourceBarrierBatcher batcher;\n  for (size_t i \u003d 0; i \u003c usages.buffers.size(); ++i) {\n    ToBackend(usages.buffers[i])\n        -\u003eTransitionUsageLater(\u0026batcher, usages.bufferUsages[i]);\n  }\n  for (size_t i \u003d 0; i \u003c usages.textures.size(); ++i) {\n    ToBackend(usages.textures[i])\n        -\u003eTransitionUsageLater(\u0026batcher, usages.textureUsages[i]);\n  }\n  batcher.submit(commandList);",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6854ca9f_4a70894b",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 452,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-06-04T01:39:42Z",
      "side": 1,
      "message": "I like Kai\u0027s idea. With this approach, We can rename \"TransitionUsageLater\" to \"TransitionUsageBatched\".",
      "parentUuid": "109a33c3_d2b2adad",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c7e842b_fe90865d",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T12:20:26Z",
      "side": 1,
      "message": "Same as Kai\u0027s comment on BufferD3D12, this is very similar to TransitionUsageNow so we could factor it?",
      "revId": "98ee4f2c5bb98679011432f3df810c16105c7d92",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}