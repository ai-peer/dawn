{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dfa11829_22fa06af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T01:27:39Z",
      "side": 1,
      "message": "PTAL",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83abd987_c0342ab6",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-17T08:19:36Z",
      "side": 1,
      "message": "Maybe comment as to why we add this? Also that things are ok when we don\u0027t link against a lib that doesn\u0027t have the functions because there are default implementations that do nothing.\n\nBut also why not have Instance-\u003eGetDeviceCountForTesting?",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a65bcde_5f5e1eee",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T14:59:02Z",
      "side": 1,
      "message": "I was lamenting that I couldn\u0027t add gtest EXPECT for a particular device - so I made these callbacks originally also pass the device as a pointer - so you could do something like:\n\nvoid* devicePtr;\nEXPECT_DEVICE_CONSTRUCTED(SaveArg(devicePtr));\nwgpu::Device device \u003d adapter.CreateDevice(...);\n\nEXPECT_DEVICE_DESTRUCTED(devicePtr);\ndevice \u003d nullptr;\n\nbut I didn\u0027t get around to making such tests yet before I simplified the callback and split out these tests.",
      "parentUuid": "83abd987_c0342ab6",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04574dc6_023175e7",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T16:33:08Z",
      "side": 1,
      "message": "ok removed the weak stuff",
      "parentUuid": "8a65bcde_5f5e1eee",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82591960_7a6f93ff",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-17T08:19:36Z",
      "side": 1,
      "message": "Does this need to be an atomic int / TLS for multithreaded GTest runs? Or does GTest use multiple processes?",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b9a1131_d2b18ced",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T14:59:02Z",
      "side": 1,
      "message": "multiple processes in Chrome-based CQ bots - single thread single process on Dawn CQ.",
      "parentUuid": "82591960_7a6f93ff",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8839ded0_f5b98668",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T16:33:08Z",
      "side": 1,
      "message": "made it atomic on the instance to be safe in the future for multithreaded testing",
      "parentUuid": "6b9a1131_d2b18ced",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4f75e06_3803dd6f",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-17T08:19:36Z",
      "side": 1,
      "message": "Maybe explain the magic weak symbol thing happening?",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85c13983_17748d7a",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T16:33:08Z",
      "side": 1,
      "message": "not applicable now",
      "parentUuid": "e4f75e06_3803dd6f",
      "revId": "adde91465ecabf52d585c96d933f82f076627b06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}