{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "31116137_9221c9b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-12-13T19:33:05Z",
      "side": 1,
      "message": "PTAL. Thanks.\n\nLooks like Windows bots are not stable...",
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c94fb84_7e9d5744",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-13T21:02:01Z",
      "side": 1,
      "message": "LGTM, some comments",
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a61a5ed_1f5ee490",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-12-13T19:33:05Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 261,
        "startChar": 12,
        "endLine": 261,
        "endChar": 26
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b4a7f64_ba9f6d3c",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-12-13T19:33:05Z",
      "side": 1,
      "message": "The workaround below is not needed if the texture format is not color format. The new tests for depth/stencil formats verified this. I have more tests at my local side, which indicate the same result. \n\nSo `formatBytesPerBlock` here should be greater than 0 in order to run into te workaround. `formatBytesPerBlock` is 0 if the format is a non-color format (see https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn/native/d3d12/TextureD3D12.cpp#610), and the workaround (which is not needed in this situation) go to UNREACHABLE() at [1] without the condition.",
      "range": {
        "startLine": 366,
        "startChar": 51,
        "endLine": 366,
        "endChar": 74
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1c63f51_8aceba21",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-13T21:02:01Z",
      "side": 1,
      "message": "hmm can you rename formatBytesPerBlock throughout to be `colorFormatBytesPerBlock` ? that would be more clear\n\nWe can also rename D3D12AllocateExtraMemoryFor2DArrayTexture to indicate that it is color format that need the workaround",
      "parentUuid": "2b4a7f64_ba9f6d3c",
      "range": {
        "startLine": 366,
        "startChar": 51,
        "endLine": 366,
        "endChar": 74
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1077341c_6b7fa33c",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-12-14T07:18:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1c63f51_8aceba21",
      "range": {
        "startLine": 366,
        "startChar": 51,
        "endLine": 366,
        "endChar": 74
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5be75fa_dce93076",
        "filename": "src/dawn/tests/end2end/TextureCorruptionTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-13T21:02:01Z",
      "side": 1,
      "message": "maybe this can be ExpectConstant\u003cT\u003e in DawnTest used like `new ExpectConstant\u003cT\u003e(0)`. I\u0027m sure we have other tests that are checking constants where it would be useful",
      "range": {
        "startLine": 89,
        "startChar": 6,
        "endLine": 89,
        "endChar": 16
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a1a1182_97f55c2b",
        "filename": "src/dawn/tests/end2end/TextureCorruptionTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-12-14T07:18:39Z",
      "side": 1,
      "message": "I cannot find something like `new ExpectConstant\u003cT\u003e(0)`, and it seems to me that there is no parent `Expectation` class for that at DawnTest.h...",
      "parentUuid": "c5be75fa_dce93076",
      "range": {
        "startLine": 89,
        "startChar": 6,
        "endLine": 89,
        "endChar": 16
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c580cd02_fd429858",
        "filename": "src/dawn/tests/end2end/TextureCorruptionTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 352,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-13T21:02:01Z",
      "side": 1,
      "message": "does this need to be in the `if sampleCount \u003d\u003d 1` block?\n\nI think it could be dedented to be more readable\ncould be:\n\n```\nstd::vector\u003cuint32_t\u003e testedLayers \u003d sampleCount \u003d\u003d 1 ? {0} : {0, 1};\nif (depthOrArrayLayerCount \u003e 2) {\n   ...\n}\n```",
      "range": {
        "startLine": 344,
        "startChar": 12,
        "endLine": 352,
        "endChar": 13
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4c54661_35602803",
        "filename": "src/dawn/tests/end2end/TextureCorruptionTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 352,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-12-14T07:18:39Z",
      "side": 1,
      "message": "There is a C++ compile issue: initializer {0, 1} cannot be at the right side of `:` for `? :`. But it indeed can be simpler.",
      "parentUuid": "c580cd02_fd429858",
      "range": {
        "startLine": 344,
        "startChar": 12,
        "endLine": 352,
        "endChar": 13
      },
      "revId": "d75be520916b3e1f79941b3d1008c4f290da6aeb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}