{
  "comments": [
    {
      "key": {
        "uuid": "e7c1c862_1b1fc68f",
        "filename": "src/dawn_native/BindGroup.h",
        "patchSetId": 12
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-12T20:09:49Z",
      "side": 1,
      "message": "nit: could you make the other GetBindingAs functions const as well?",
      "range": {
        "startLine": 49,
        "startChar": 68,
        "endLine": 49,
        "endChar": 73
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7b770a3_7a2f10a4",
        "filename": "src/dawn_native/BindGroup.h",
        "patchSetId": 12
      },
      "lineNbr": 49,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7c1c862_1b1fc68f",
      "range": {
        "startLine": 49,
        "startChar": 68,
        "endLine": 49,
        "endChar": 73
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c415614b_4241b7c4",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 196,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-15T01:56:52Z",
      "side": 1,
      "message": "GetSamplerAllocationEntry can be a const method.",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 196,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e441aab_b062d371",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 196,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "Non-const was needed due to group-\u003eentry-\u003ePopulate() but thinking a bit more, group-\u003ePopulateSamplers() makes this more obvious (reverted).",
      "parentUuid": "c415614b_4241b7c4",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 196,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d70f1fe4_67a9823f",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 198,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-15T01:56:52Z",
      "side": 1,
      "message": "Use std::move to transfer entry into mSamplerAllocationEntry.",
      "range": {
        "startLine": 198,
        "startChar": 1,
        "endLine": 198,
        "endChar": 40
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "035fc0e6_72e6dbaa",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 198,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d70f1fe4_67a9823f",
      "range": {
        "startLine": 198,
        "startChar": 1,
        "endLine": 198,
        "endChar": 40
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d2f7356_eb8b1b01",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 151,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-12T20:09:49Z",
      "side": 1,
      "message": "nit: Please make this Ref\u003cBindGroup\u003e. If creating the sampler cache entry fails in DAWN_TRY_ASSIGN, we\u0027ll leak this bind group. We can (1) return bindGroup.Detach(), or (2) bubble up the Ref\u003cBindGroup\u003e all the way to the creation.\n\nI believe Rafael is going to do (2) at some point anyway.",
      "range": {
        "startLine": 151,
        "startChar": 8,
        "endLine": 151,
        "endChar": 19
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3c0b8c9_1b144521",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 151,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d2f7356_eb8b1b01",
      "range": {
        "startLine": 151,
        "startChar": 8,
        "endLine": 151,
        "endChar": 19
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ed2b0d_8f106baf",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-13T10:02:08Z",
      "side": 1,
      "message": "nit: std::vector\u003cSampler*\u003e\u0026\u0026 AcquireSamplers() { return std::move(mSamplers); }",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 48,
        "endChar": 5
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0110cd7_b8e65e38",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 48,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-15T01:56:52Z",
      "side": 1,
      "message": "+1 The name \u0027GetSamplers\u0027 makes it seem like this is a trivial accessor.",
      "parentUuid": "44ed2b0d_8f106baf",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 48,
        "endChar": 5
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11222e5a_a467a936",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 48,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0110cd7_b8e65e38",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 48,
        "endChar": 5
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff7f8ebb_00c7fb6b",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 109,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-15T01:56:52Z",
      "side": 1,
      "message": "Thinking about this some more, what if instead of allocating and storing a vector of samplers, we store a pointer to the bindgroup layout. The HashFunc would iterate over the bgl as you have here to calculate the hash. Similarly, EqualityFunc would first compare whether the two bgl pointers are equal. If not, it would iterate over the samplers and do pointer comparison to determine whether they\u0027re equal.\n\nIf you do this, you can scuttle the TODO about reallocating the vector each lookup.",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3749c8a4_0a15c945",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 109,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-15T03:30:34Z",
      "side": 1,
      "message": "Ideally, we\u0027d store the count and pointer to the first sampler in the BindGroup. These are already in packed range, but the information isn\u0027t available anywhere right now. We could compute this as we\u0027re iterating over the bindings on creation of the BindGroup. That way we don\u0027t iterate twice.\n\nFine with me to do this now or in a follow-up or do Rafael\u0027s suggestion as an intermediate step.",
      "parentUuid": "ff7f8ebb_00c7fb6b",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87114ff4_eb75c3d8",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 109,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "\u003e\u003e we store a pointer to the bindgroup layout\n\nNot enough information. BG1 and BG2 use BGL0 but different samplers (NOT equal). I concur with AE, need to store the pointer to the BG which is the TODO. \n\n@RC, do you want to tackle this now?",
      "parentUuid": "ff7f8ebb_00c7fb6b",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b841d08f_ad2b8f7b",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-15T17:41:26Z",
      "side": 1,
      "message": "This CL already had too many iterations after reaching a good state. Let\u0027s make forward progress, land what we have now and iterate later (as a follow up, or much later when we find the vector allocation to be a hotspot).",
      "parentUuid": "87114ff4_eb75c3d8",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a822278_732ee935",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 109,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-18T22:24:40Z",
      "side": 1,
      "message": "The improvement Austin suggests doesn\u0027t seem too difficult on first glace. Strange that we\u0027re leaving performance on the table, given this is a perf change.  \n\nI am fine postponing so long as it is the next thing we tackle.",
      "parentUuid": "b841d08f_ad2b8f7b",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcd83314_3b71bc69",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 109,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-18T23:23:52Z",
      "side": 1,
      "message": "\u003e next thing we tackle\n\nAck but FYI, got other bugs to address first.",
      "parentUuid": "8a822278_732ee935",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb9be8ac_78879c89",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 12
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-13T10:02:08Z",
      "side": 1,
      "message": "Isn\u0027t descriptorCount always mSamplers.size()? I think this parameter could be skipped.",
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b792d13c_eeed5949",
        "filename": "src/dawn_native/d3d12/SamplerHeapCacheD3D12.h",
        "patchSetId": 12
      },
      "lineNbr": 61,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-15T16:58:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb9be8ac_78879c89",
      "revId": "c6a8fdd012ec1ba93a267bd953677830299aaa94",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}