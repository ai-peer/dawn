{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47e9e1f0_fbc51c32",
        "filename": "src/dawn/native/d3d11/BackendD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "can we also validate that the d3d11device has multithread protected enabled? it is not safe to wrap devices that may be used externally on another thread\n\nsecondly, now that we pass the device into Dawn, do we still need `\nDAWN_NATIVE_EXPORT Microsoft::WRL::ComPtr\u003cID3D11Device\u003e GetD3D11Device(WGPUDevice device);`\nmaybe it can be removed in a follow-up.",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b39d5fc_6c3278c4",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "do we need to store the bool as a member variable? we can swap in the constructor if true. Then we can swap back if mPreviousState is not null. Don\u0027t need to store the bool I think",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 25
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fcf581b_42fcaa68",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "nit: this bool could be cached on the command context",
      "range": {
        "startLine": 59,
        "startChar": 18,
        "endLine": 59,
        "endChar": 88
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc34d016_0f4c7ea0",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "this should check that \u0026other !\u003d this",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edbc5e4d_5ccc13df",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "could we pass D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED since we manage our state behind a lock?",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 28
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32bed658_aacf5127",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "are there methods that strictly may be called when the device context is swapped? If so, it would be preferable to have two separate classes. like ScopedContext and ScopedContextState where ScopedContextState extends ScopedContext.\n\nThen, ScopedContextState can provide the additional methods that are allowed when the state is swapped in",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 86
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b007efa6_193ea05d",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "could it be NonMovable? what do you need these for?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f9f19fa_e7fe4884",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "nit: even though these definitions are small, still prefer to put them in the .cpp file\n\nthe linker can take care of link-time optimization to inline",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb6e16af_d86f3454",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "nit: casing as \"D3D11Device\" to match",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 69
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}