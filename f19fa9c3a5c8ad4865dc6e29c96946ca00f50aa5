{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47e9e1f0_fbc51c32",
        "filename": "src/dawn/native/d3d11/BackendD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "can we also validate that the d3d11device has multithread protected enabled? it is not safe to wrap devices that may be used externally on another thread\n\nsecondly, now that we pass the device into Dawn, do we still need `\nDAWN_NATIVE_EXPORT Microsoft::WRL::ComPtr\u003cID3D11Device\u003e GetD3D11Device(WGPUDevice device);`\nmaybe it can be removed in a follow-up.",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88c50fa2_b6328a59",
        "filename": "src/dawn/native/d3d11/BackendD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "ANGLE and Graphite are on the same thread. SO we don\u0027t need thread protection for this case. However media may use the same d3d11 device context for media decoding. So I think it is not necessary to check thread protection for all the cases.\n\nWe will remove it if using the same d3d11 device can improve graphite performance and stability.",
      "parentUuid": "47e9e1f0_fbc51c32",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5beab5b_51b6fc4e",
        "filename": "src/dawn/native/d3d11/BackendD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-30T22:52:11Z",
      "side": 1,
      "message": "so I\u0027m understanding, you\u0027re saying there are always two separate devices?\n - shared between Graphite-Dawn and ANGLE: does not need multithread protection\n - shared between Graphite-Dawn and media: needs multithread protection\n\n?",
      "parentUuid": "88c50fa2_b6328a59",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42f48477_32daab89",
        "filename": "src/dawn/native/d3d11/BackendD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-31T19:43:24Z",
      "side": 1,
      "message": "ANGLE, Graphite-Dawn and Media will use the same device. So the thread protection is needed for chrome. However it is the implementation detail of chrome. But from dawn point of view, the assumption is not necessary. Dawn doesn\u0027t need to know all those implementation detail. So I think validating multithread protection is not really necessary in dawn.\n\nFor example, if hardware accelerated decoding is not supported, then multithread protection is not necessary.",
      "parentUuid": "a5beab5b_51b6fc4e",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b39d5fc_6c3278c4",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "do we need to store the bool as a member variable? we can swap in the constructor if true. Then we can swap back if mPreviousState is not null. Don\u0027t need to store the bool I think",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 25
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0122bd5c_1f68ae36",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b39d5fc_6c3278c4",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 25
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fcf581b_42fcaa68",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "nit: this bool could be cached on the command context",
      "range": {
        "startLine": 59,
        "startChar": 18,
        "endLine": 59,
        "endChar": 88
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88e03a02_7af68e27",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fcf581b_42fcaa68",
      "range": {
        "startLine": 59,
        "startChar": 18,
        "endLine": 59,
        "endChar": 88
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc34d016_0f4c7ea0",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "this should check that \u0026other !\u003d this",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f6dcfdf_5c5f9407",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "This method has been removed.",
      "parentUuid": "cc34d016_0f4c7ea0",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edbc5e4d_5ccc13df",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "could we pass D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED since we manage our state behind a lock?",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 28
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8828d25_f0bc0cc7",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 137,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "The dawn lock can only protect device context used within dawn. ANGLE and media code can still use the context with holding the lock in dawn.",
      "parentUuid": "edbc5e4d_5ccc13df",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 28
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9733b2b8_0b1944fb",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-30T22:52:11Z",
      "side": 1,
      "message": "when we are creating the context state here, isn\u0027t it used exclusively by Dawn, and not shared with ANGLE/media? The context itself yes is shared, but when Dawn is using the context, we lock it and swap in our own single-threaded state.",
      "parentUuid": "a8828d25_f0bc0cc7",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 28
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd0880ff_4c68cd7c",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 137,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-31T19:43:24Z",
      "side": 1,
      "message": "But the media code is not protected with the lock in dawn. and the media code could use the ID3D11DeviceContext which has been swapped with the context state in dawn.",
      "parentUuid": "9733b2b8_0b1944fb",
      "range": {
        "startLine": 137,
        "startChar": 16,
        "endLine": 137,
        "endChar": 28
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32bed658_aacf5127",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "are there methods that strictly may be called when the device context is swapped? If so, it would be preferable to have two separate classes. like ScopedContext and ScopedContextState where ScopedContextState extends ScopedContext.\n\nThen, ScopedContextState can provide the additional methods that are allowed when the state is swapped in",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 86
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2007fc33_4ee8215e",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 46,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "It is hard to do that. the d3d11 backend needs access ID3D11DeviceContext to either update resource content or modify context state. We cannot only allow updating resources but not modifying context state.",
      "parentUuid": "32bed658_aacf5127",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 86
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50830be1_f215f11c",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-30T22:52:11Z",
      "side": 1,
      "message": "Can we add helper methods to proxy the UpdateSubresource calls, etc. to the context state?\n\nRight now, the burden is on the developer to not use certain functions if they pass `false` for swapContextState. This seems like a fragile solution. You might get the scoped context and pass it into a function where it\u0027s hard to tell whether the context has a swapped state or not. If we could have a proxy which only allows certain methods to be called when the context state is not swapped, then it would be a lot safer. We can more carefully review when proxy methods are added to be sure they are actually OK thread-safe.\nAlternatively - we could always swap the state - but I imagine the performance of this would not be desirable.",
      "parentUuid": "2007fc33_4ee8215e",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 86
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94fb3308_ef6393d8",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 46,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-31T19:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50830be1_f215f11c",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 86
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b007efa6_193ea05d",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "could it be NonMovable? what do you need these for?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d0b15ab_6f063f4c",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b007efa6_193ea05d",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f9f19fa_e7fe4884",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "nit: even though these definitions are small, still prefer to put them in the .cpp file\n\nthe linker can take care of link-time optimization to inline",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b9a4a5f_fd6d1cbd",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "Really? Can linker inline a method defined in .cpp file but used in other .cpp file? I thought the linker can only inline a method defined and used in the same .cpp file.\n\nDone",
      "parentUuid": "5f9f19fa_e7fe4884",
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb6e16af_d86f3454",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-27T02:36:39Z",
      "side": 1,
      "message": "nit: casing as \"D3D11Device\" to match",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 69
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7962481b_576a3735",
        "filename": "src/dawn/native/d3d11/PhysicalDeviceD3D11.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-10-27T14:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb6e16af_d86f3454",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 69
      },
      "revId": "f19fa9c3a5c8ad4865dc6e29c96946ca00f50aa5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}