{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e99c9c6_c586bef8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-11T18:20:39Z",
      "side": 1,
      "message": "Thanks for the help, Austin.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e4d5c51_bef9f91c",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "We should destroy the persistent cache here most likely.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cadf523a_b43f8951",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e4d5c51_bef9f91c",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2a2449_426522be",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "u-nit: sort alphabetically.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3955f02_d8bcc2da",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac2a2449_426522be",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c51a7c4_1a238a7d",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-11T21:04:59Z",
      "side": 1,
      "message": "[1] Is this expected to change throughout the lifetime of the PersistentCache ? I would think that we only need to get the interface once on construction of the persistent cache. We would also pass in the device fingerprint there too.",
      "range": {
        "startLine": 27,
        "startChar": 7,
        "endLine": 27,
        "endChar": 95
      },
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161dae26_fdbc9119",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-12T18:29:49Z",
      "side": 1,
      "message": "Yes, it is expected to change since the client can decide to blow away the cache at any time.",
      "parentUuid": "4c51a7c4_1a238a7d",
      "range": {
        "startLine": 27,
        "startChar": 7,
        "endLine": 27,
        "endChar": 95
      },
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a1737bb_996555a3",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-12T18:34:35Z",
      "side": 1,
      "message": "okay but if the client wants to do that, it can just do it inside whatever implementation it returns as the dawn_platform::CachingInterface.\n\nAlso, it looks like you\u0027re using GetCachingInterface(fingerprint, size) for the client to make a new cache, but the client can do that internally without touching the platform interface.",
      "parentUuid": "161dae26_fdbc9119",
      "range": {
        "startLine": 27,
        "startChar": 7,
        "endLine": 27,
        "endChar": 95
      },
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49c3ac83_9dd7567d",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a1737bb_996555a3",
      "range": {
        "startLine": 27,
        "startChar": 7,
        "endLine": 27,
        "endChar": 95
      },
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5c271ab_479fc3f7",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Why not just std::vector\u003cuint8_t\u003e? It would avoid src/dawn_native/d3d12/ShaderModuleD3D12.h to have to include src/dawn_native/PersistentCache.h and propagate \u003cfunctional\u003e",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50b857e4_95018444",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "I had a slight preference away from vector because the buffer should not ever be grown, initialized outside LoadData, nor iterable and so on. But if you prefer vector for future uses, that\u0027s fine too.",
      "parentUuid": "e5c271ab_479fc3f7",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70004187_1feaaeaa",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "unique_ptr seems fine to me, and \u003cfunctional\u003e isn\u0027t an issue any more",
      "parentUuid": "50b857e4_95018444",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6be5ee6e_583fd2a6",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "Okay, do re-open if not.",
      "parentUuid": "70004187_1feaaeaa",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ed8edc4_880fa18b",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "What does the bool do? How should the createFn react to each return value?",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62d11035_ba9080f8",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Oops, removed.",
      "parentUuid": "7ed8edc4_880fa18b",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1ed03cb_55f83899",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Can we have a trivial example showing its use? Also the code in GetOrCreate to breath a bit with newline and comments.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e66b6f0_ca787c3f",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1ed03cb_55f83899",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e58f9eb8_25ca5d11",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "I have some concerns that this interface only works for things that produce blobs, but not for things that produce structured data. For example what is the code path for caching of Tint reflection data when we have a cache miss? Right now it seems it would do:\n\n - createFn\n  - Extracts the reflection data\n  - Serializes it\n  - Call DoCache\n - We get a vector\u003cuint8_t\u003e\n - Deserialize that vector into reflection data.\n\nIf it\u0027s too complicated to find a nice solution for this now we can add a comment about it and figure it out when we start caching structured data.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5805fa9d_62dfd4dd",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-12T18:43:45Z",
      "side": 1,
      "message": "I think this is probably good enough for now, Bryan\u0027s CL avoids the extra serialize+deserialize shenanigans because:\n\nMyBlob blob;\nCache()-\u003eGetOrCreate(key, [\u0026](doCache) {\n   // stuff\n   doCache(blob.data(), blob.size());\n});\n\n\n// I still have |blob| here and don\u0027t need to deserialize it from the cache!\nreturn std::move(blob);",
      "parentUuid": "e58f9eb8_25ca5d11",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b7d9b6c_58aedce9",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Yup, if we keep a ref to the original structured data then there is no need to de-serialize upon store.",
      "parentUuid": "5805fa9d_62dfd4dd",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42261d85_281d1c3e",
        "filename": "src/dawn_native/PersistentCache.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8b7d9b6c_58aedce9",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e822b00_ba391c26",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 368,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-11T18:39:44Z",
      "side": 1,
      "message": "nit: maybe name it \"CreateHLSLKey\" so we don\u0027t mess this up in the future and use it for something else",
      "range": {
        "startLine": 368,
        "startChar": 37,
        "endLine": 368,
        "endChar": 46
      },
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81d3b561_05f80367",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 368,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-12T18:29:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e822b00_ba391c26",
      "range": {
        "startLine": 368,
        "startChar": 37,
        "endLine": 368,
        "endChar": 46
      },
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d551fab2_91a50afe",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Can multiple entrypoints have the same name if they are different stages? That\u0027s not allowed in WGSL at least.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7addcd9_5618758a",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Absolutely.",
      "parentUuid": "d551fab2_91a50afe",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e319f153_1a457ad4",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "We should also have a prefix for each type of key so make sure that there can\u0027t be collision where different types of cached things end up with the same key.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53f31e05_7530ea23",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e319f153_1a457ad4",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "135d731c_40f06062",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 384,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Isn\u0027t there a way to create a vector from a stringstream without that extra copy? :(",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e154a90_e0d89cf2",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 384,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Oh yea, can use istreambuf and do 1 copy.",
      "parentUuid": "135d731c_40f06062",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e4e9341_6c351ce1",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "nit: Manages a ref to one of the various representations of shader blobs.",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5441e88_b3b76807",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e4e9341_6c351ce1",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10eb5b88_67aa1b11",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Nice",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54679c92_bcfcda24",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.h",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "10eb5b88_67aa1b11",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4250c7d0_869a9d7d",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "nit: DAWN_PLATFORM_EXPORT and put the \u003d default in DawnPlatform.cpp",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16a490ce_21f01c46",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4250c7d0_869a9d7d",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dc63338_d9e93d3b",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Please add comments that explain how these functions will be called (in particular the valueSize \u003d 0)",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb69f543_a5c115d6",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dc63338_d9e93d3b",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f606dcf9_6f9522fb",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Can we have a comment about the lifetime of the return object and what the fingerprint is?",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f87e088c_c4d1212c",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f606dcf9_6f9522fb",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b60904c7_9a976bb8",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "ditto, put implementations in DawnPlatform.cpp",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a82a43fd_b4013d03",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b60904c7_9a976bb8",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c37d79e2_2da41bf6",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "Is this version of GetCachingInterface ever used?",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac7bd5bb_ba93dd44",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 6
      },
      "lineNbr": 76,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Combined",
      "parentUuid": "c37d79e2_2da41bf6",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acb2ac53_40e6490d",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 178,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-12T18:39:25Z",
      "side": 1,
      "message": "This means the testing of the caching interface is done manually by looking at the test output and adds more implicit logic in all the tests. Instead could we have the platform created just for the tests that need it by having a virtual CreateTestPlatform in DawnTestBase that\u0027s overloaded for the D3D12CachingTests?\n\nThen in these tests a fake cache could be added that checks for specific things, like the HLSL compilation being reused, but also duplicate compilation working even when the cache isn\u0027t present (by having the fake cache always return a size of 0).",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81ef0411_d609e963",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 178,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "acb2ac53_40e6490d",
      "revId": "2031a242105151496f372bb0e7ac38943f9669b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}