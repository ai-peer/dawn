{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8ba4e786_54ab99a8",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T12:45:10Z",
      "side": 1,
      "message": "We probably only need to do this unbinding on compute passes which would be nice because the Apply() on render passes is hot code.\n\nAlso can you explain why this change was needed?",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45b471ac_0ad0ae04",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T13:18:35Z",
      "side": 1,
      "message": "It\u0027s because that `mDirtyBindGroups` may have groups that are not in the `mLastAppliedPipelineLayout`. That may cause `UnApplyBindGroup` to run into Assert.",
      "parentUuid": "8ba4e786_54ab99a8",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c65d95d_971c4be0",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T13:48:36Z",
      "side": 1,
      "message": "Then maybe this could use InheritedGroupsMask: https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/dawn/src/dawn/native/PipelineLayout.h;drc\u003d7857c62e3a2131ef6558ec984fb99a6d3ff35d79;l\u003d73\n\n```\n// Unset currently bound bindgroups that aren\u0027t inherited from the layout.\nBindGroupLayoutMask inheritedGroups \u003d mPipelineLayout-\u003eInheritedGroupMask(mLastAppliedPipelineLayout);\nfor (BindGroupIndex index : IterateBitSet(mDirtyBindGroups \u0026 ~inheritedGroupsMask))\n```\n\nOr maybe I\u0027m missing something. (this would both make the semantic of the code more understandable, and would UnApply less bindgroups overall).",
      "parentUuid": "45b471ac_0ad0ae04",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9b1bae6_9f5358af",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T14:47:54Z",
      "side": 1,
      "message": "Would `inheritedGroups` be always null here? Since we are not allowing [CanInheritBindGroups](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d11/BindGroupTrackerD3D11.h;drc\u003d283b3a042fc3e85a57b0b1a844e3f1b10d6f61c4;l\u003d27).\nBesides, we also need to UnApply the unused groups in the `mLastAppliedPipelineLayout`.\n\nThe purpose here is to unbind the groups in the previous pipeline. There are 3 types of them:\n  1) Unused: not in the current pipeline.\n  2) Inherited: in both pipelines and clean for re-use.\n  3) Dirty: in both pipelines but can\u0027t be re-used because they are dirty.\n What we should unbind are 1) and 3). But for UAVs in render passes, we should also unbind 2) because we will rebind them in the current pipeline even they are clean. As we are not allowing inheritance, 2) should be always empty. So that\u0027s fine still.",
      "parentUuid": "4c65d95d_971c4be0",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a7a7888_67c6cb78",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T15:25:35Z",
      "side": 1,
      "message": "Mmmmh I should `CanInheritBindGroups` should be possible to be `true`. The binding model is very similar to Metal which has it to `true`. Peng do you remember why we are not doing it?\n\nIf we could do inheritance, then we would only need to unset the bindgroups that aren\u0027t inherited (and are present). This is because inherited bindgroups are either valid (ok) or dirty and will be implicitly unset when they are overwritten.\n\nAlso for UAVs we could almost have a static array with the max number of UAVs supported by D3D11, then in the pipeline layout compute for each BGL which index its UAVs start at, such that we can directly set them in the correct place in the array and don\u0027t need to touch other, non-dirty bindgroups.",
      "parentUuid": "d9b1bae6_9f5358af",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff30081_c545750f",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T15:46:15Z",
      "side": 1,
      "message": "I think `CanInheritBindGroups` should be `true` as well for better performance. I just didn\u0027t understand `BindGroupTracker` very well when I was implementing the CommandBufferD3D11.",
      "parentUuid": "9a7a7888_67c6cb78",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6745d0cb_5182eab5",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T12:29:00Z",
      "side": 1,
      "message": "`CanInheritBindGroups` is enabled. It seems to work fine.",
      "parentUuid": "1ff30081_c545750f",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f3f907c_6f2ed6fc",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-16T13:51:26Z",
      "side": 1,
      "message": "Ok so now that we have `CanInheritBindGroups`, we should be able to do better for this loop: we want to unset only bindgroups that are in the previous pipeline layout and not in the current pipeline layout. All others are ok: either they are inherited, or they will be overwritten as dirty.\n\nSo this should work?\n\n```\nfor(mLastAppliedPipelineLayout-\u003eGetBindGroupLayoutsMask() \u0026 ~mPipelineLayout-\u003eGetBindGroupLayoutsMask())\n```",
      "parentUuid": "6745d0cb_5182eab5",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ed18e0_cbb32ef1",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T14:49:25Z",
      "side": 1,
      "message": "I kind of got your point. It\u0027s about dirty groups, right?\nThe current assumption is that we should unbind the dirty groups first, and then bind the new ones. That\u0027s to say we should always bind their slots to null first, and then bind to new one. The question here is that can we just skip setting to null, and bind the new one directly? It seems okay regarding the current implementation of `UnApplyBindGroup`. However semantically it looks less smooth. I would slightly feel like that constructors and destructors don\u0027t come in pairs. Anyway I am okay either way.",
      "parentUuid": "2f3f907c_6f2ed6fc",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67606e03_f908588f",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-17T03:17:55Z",
      "side": 1,
      "message": "Forget my previous comment. That was incorrect. Let me try to get this straight.\n\n\n\n\u003ewe want to unset only bindgroups that are in the previous pipeline layout and not in the current pipeline layout. All others are ok: either they are inherited, or they will be overwritten as dirty.\n\nIt\u0027s not exactly true. For common dirty groups in both previous and current pipelines, we also need to unbind them with regards to the previous pipeline, and then bind them according to current pipeline, as the actual slot bindings can be different between the pipelines.\n`SetPipeline(pipeline1);\n SetBindGroup(0, BG_Uniform_1);\n SetBindGroup(1, BG_UAV_1);\n Draw();\n SetPipeline(pipeline2);\n SetBindGroup(1, BG_UAV_2);\n Draw();\n`\nIn this example, bind group 1 is the common dirty group. `BG_UAV_1` may have 1 SRV and 1 UAV, and `BG_UAV_2` may have 2 UAVs. We can\u0027t skip un-setting `BG_UAV_1`, otherwise its SRV would remain active.",
      "parentUuid": "a6ed18e0_cbb32ef1",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da3754b_dfbea4ee",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-17T12:02:11Z",
      "side": 1,
      "message": "This is all becoming way more complicated than it feels should be necessary. First off the WebGPU API guarantees that resources are not used both as UAV and SRV in the same render pass. So we shouldn\u0027t need to unset bindgroups inside render passes. Second compute passes don\u0027t need the mUAVs handling either, so we can structure code as:\n\n```\nif (compute) {\n  [compute pass specific code]\n} else {\n  // Render pass\n  [render pass specific code]\n}\n\n// Common code\nfor (BindGroupIndex index : IterateBitSet(mDirtyBindGroupsObjectChangedOrIsDynamic)) {\n    DAWN_TRY(ApplyBindGroup(index));\n}\n```\n\nIn the compute pass, to prevent the UAV / SRV conflict we need to unset the bindgroups that are present in the previous layout that aren\u0027t inherited. The other bindgroups either stay bound, or will be overwritten anyway. So `[compute pass specific code]` becomes something like:\n\n```\n// To avoid a branch we can set mLastAppliedPipelineLayout to the empty pipeline\n// layout on creation. That layout could be added to the DeviceBase similarly to\n// the EmptyBindGroupLayout.\nBindGroupLayoutMask inheritedGroups \u003d mPipelineLayout-\u003eInheritedGroupMask(mLastAppliedPipelineLayout);\nBindGroupLayoutMask previousGroups \u003d mLastAppliedPipelineLayout-\u003eGetBindGroupLayoutsMask();\n\n// To avoid UAV / SRV conflicts with bindings in previously bind groups, we\n// unset the bind groups that aren\u0027t reused by the current pipeline.\nBindGroupLayoutMask groupsToUnset \u003d previousGroups \u0026 ~inheritedGroups;\nfor (BindGroupIndex index : IterateBitSet(groupsToUnset)) {\n    UnApplyBindGroup(index);\n}\n```\n\nThe render pass handling can start by rebuilding a vector of UAV every time for now and apply it, so `[render pass specific code]` would look like:\n\n```\nBindGroupLayoutMask uavGroups \u003d ToBackend(mPipelineLayout)-\u003eGetUAVBindGroupLayoutsMask();\nif (uavGroups.any()) {\n    // Could be a stackvector with 4 slots.\n    std::vector\u003cComPtr\u003cID3D11UnorderedAccessView\u003e\u003e uavs;\n    for (BindGroupIndex index : IterateBitSet(uavGroups)) {\n        append uav bindings to the vector.\n        (of course handling of mUAVs is removed from the rest of the code)\n    }\n    mCommandContext-\u003eGetD3D11DeviceContext1()-\u003eOMSetRenderTargetsAndUnorderedAccessViews(\n        D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL, nullptr, nullptr,\n        uavSlotCount - uavs.size(), uavs.size(), nullptr, nullptr);\n}\n```",
      "parentUuid": "67606e03_f908588f",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf70d4f_c5017dd8",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-17T14:13:15Z",
      "side": 1,
      "message": "`[compute pass specific code]` looks fine to me.\n\nThere seems to be no `UnApplyBindGroup` at all in the `[render pass specific code]`. It\u0027s hard for me to understand. Could you clarify a little bit?",
      "parentUuid": "6da3754b_dfbea4ee",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b3aae29_f29d1f3d",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-17T14:34:34Z",
      "side": 1,
      "message": "We shouldn\u0027t need to call `UnApplyBindGroup` in render passes because the WebGPU validation should guarantee that buffer/textures are used as either a UAV or an SRV but not both inside the same render pass. See https://gpuweb.github.io/gpuweb/#usage-scopes",
      "parentUuid": "3cf70d4f_c5017dd8",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0934e9de_9c757023",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-17T15:01:46Z",
      "side": 1,
      "message": "FYI, we can not set all SRVs and UAVs with one D3D11 function call. So sometimes, `SetShaderResources()` and `SetUAVs()` will fail, if a resources is still bound for last `Draw` call, even if the old binding will be replaced soon.\nfor example:\n```\nSetShaderResource(0, resoureA);\nSetUAV(0, resourceB);\nDraw();\nSetShaderResource(0, resourceB);  // this call will fail because resourceB is still bound to UAV slot 0.\nSetSUAV(0, resourceA); \nDraw();\n\n```\n\nor\n```\nSetShaderResource(0, resoureA);\nSetUAV(0, resourceB);\nDraw();\nSetUAV(0, resourceA); // this call will fail, because resourceA is still bound to SRV 0.\nSetShaderResource(0, resourceB);\nDraw();\n\n```",
      "parentUuid": "6b3aae29_f29d1f3d",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d045b3ca_c155ac25",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-18T00:57:22Z",
      "side": 1,
      "message": "I am still confused about why we shouldn\u0027t need to call `UnApplyBindGroup` in render passes. Even without UAV like the sample below:\n\n```\n// pipeline1 has 2 bind groups\nSetPipeline(pipeline1);\nSetBindGroup(0, BG_Uniform_A1);\nSetBindGroup(1, BG_Uniform_B);\nDraw();\n\n// pipeline2 has 1 group only\nSetPipeline(pipeline2);\nSetBindGroup(0, BG_Uniform_A2);\nDraw();\n\n// pipeline3 has also 1 group only\nSetPipeline(pipeline3);\nSetBindGroup(0, BG_Uniform_A3);\nDraw();\n```\n\nThe resource bindings in`BG_Uniform_B` will be still active after the pass is done. We would run into the [ASSERT(CheckAllSlotsAreEmpty(mCommandContext));](https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/dawn/src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp;drc\u003d91fd9d97a29963f5765820913344a6bcd8156acd;l\u003d94), right?",
      "parentUuid": "0934e9de_9c757023",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4374ab99_5c96c942",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-18T10:54:06Z",
      "side": 1,
      "message": "Right, in render passes we should probably remove all bindings at the end of the render pass then. Alternatively we can remember the layout of each currently applied bindgroup.",
      "parentUuid": "d045b3ca_c155ac25",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e75dffd1_e6a6db4a",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T12:45:10Z",
      "side": 1,
      "message": "I think that this will not work as is. What if we have BG0 and BG1A and BG1B all with a UAV and do:\n\n```\nSetBindGroup(0, BG0)\nSetBindGroup(0, BG1A)\nDraw()\nSetBindGroup(0, BG1B)\nDraw()\n```\n\nThen in the second `Draw()` the call to apply will only iterate over `BG1A` and `mUAVs` will only contain a single UAV, when it should contain two.\n\nInstead, I think we could pre-compute in the pipeline layout the mask of BGLs that have a fragment/vertex UAV, then here do:\n\n```\nwgpu::BindGroupLayoutMask renderUAVMask \u003d pipeline-\u003eGet...();\nif (renderUAVMask !\u003d 0) {\n  stack_vector\u003cComPtr\u003cUAV\u003e, 4?\u003e uavs;\n  for (group in IterateBitSet(renderUAVMask)) {\n    Iterate the UAVs of the group and add them to the vector\n  }\n  \n  Call OMSetRenderTargetsAndUnorderedAccessViews\n}\n```\n\nCould we also have a test that would have caught this?",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb579235_c40f5ce3",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T13:18:35Z",
      "side": 1,
      "message": "\u003e  when it should contain two.\nSorry, could you please explain this? If I understand the example correctly, `BG0` shouldn\u0027t in fact count.",
      "parentUuid": "e75dffd1_e6a6db4a",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f57d728_84580330",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T13:48:36Z",
      "side": 1,
      "message": "Whoops sorry my example was mistyped:\n\n```\nSetBindGroup(0, BG0)\nSetBindGroup(1, BG1A) // Changed to 1\nDraw()\nSetBindGroup(1, BG1B) // Changed to 1\nDraw()\n```\n\nIn the second draw `mUAVs` should be `[BG0, BG1B]` but it will only be `[BG1B]`.",
      "parentUuid": "fb579235_c40f5ce3",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0335bd52_b1bc7792",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T14:47:54Z",
      "side": 1,
      "message": "Got it, thanks!\nMaybe we can simply force all UAV groups dirty.",
      "parentUuid": "1f57d728_84580330",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d65575e_83ce434b",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T15:25:35Z",
      "side": 1,
      "message": "That\u0027d work but be doing more work than necessary. If you\u0027d like to take this approach we could use a TODO to optimize things afterwards.",
      "parentUuid": "0335bd52_b1bc7792",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2badc19f_0dd17d4a",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T12:29:00Z",
      "side": 1,
      "message": "Added a new test case to cover this.\n\nAlso added TODO for this further optimization:\n\n\u003e `  for (group in IterateBitSet(renderUAVMask)) {\n    Iterate the UAVs of the group and add them to the vector\n  }`\n \n\nLikely this would be basically similar to `ApplyBindGroup`. Maybe we could add a parameter like `bool uavOnly` to have it only handle UAVs.",
      "parentUuid": "1d65575e_83ce434b",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f7e5128_256467a9",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-16T13:51:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2badc19f_0dd17d4a",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6adf0e52_55872224",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T12:45:10Z",
      "side": 1,
      "message": "nit: ASSERT",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26442d15_aa447bcb",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T12:29:00Z",
      "side": 1,
      "message": "Done.\n\nBTW, I am still not aware of the guideline of using `DAWN_ASSERT` or `ASSERT`. Could you clarify that for me a little bit, thanks!",
      "parentUuid": "6adf0e52_55872224",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d9104c5_5b62b0da",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 129,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T12:45:10Z",
      "side": 1,
      "message": "We should probably pre-compute this value somewhere, for example on the device, and reuse it. It would avoid some indirections and a branch.",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b36868ee_82eeaeb3",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 129,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T12:29:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d9104c5_5b62b0da",
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ca299f_5a805e9d",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 211,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-15T12:45:10Z",
      "side": 1,
      "message": "nit: this could be an std::move() to avoid an extra ref-deref cycle for the ComPtr. Ditto in other places.",
      "range": {
        "startLine": 211,
        "startChar": 56,
        "endLine": 211,
        "endChar": 64
      },
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1641aa4e_12617228",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 211,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T12:29:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58ca299f_5a805e9d",
      "range": {
        "startLine": 211,
        "startChar": 56,
        "endLine": 211,
        "endChar": 64
      },
      "revId": "6969942bd94aaa90aef6401ef983609633150873",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}