{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "19245d29_357fe878",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f736c9f2_8dca2336",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "For a first version adding the offset unconditionally in all root signatures seems ok, but in the future we should create root signatures from the pipeline layout on demand (and cache them in the layout) so that pipelines that don\u0027t use gl_VertexIndex / gl_InstanceIndex don\u0027t need to have a bigger root signature.",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1355d964_8c4a448c",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-01-15T00:22:00Z",
      "side": 1,
      "message": "Enrico, let\u0027s file a bug for this and put it in a comment here.",
      "parentUuid": "f736c9f2_8dca2336",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bc5c8fb_542358cd",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-15T23:35:43Z",
      "side": 1,
      "message": "IHMO, I\u0027m not sure that it is worth the added code complexity. Our own driver team has mentioned that there is more than enough room in the HW. That said, I\u0027m happy to be proven wrong ðŸ˜Š.",
      "parentUuid": "1355d964_8c4a448c",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70367357_b771799c",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-18T09:21:33Z",
      "side": 1,
      "message": "There\u0027s a lot of room in Intel HW but I know AMD HW has very little room instead (and would prefer high-frequency root table change to be at the start, not at the end like is done here). Not that we need to change anything in this CL, but in the future when people start looking at WebGPU performance in detils, it\u0027s probably going to come up.\n\nHappy to downgrade from a TODO() to a Note: \u003cwe could do this and that to be more optimal\u003e",
      "parentUuid": "2bc5c8fb_542358cd",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bef5c9f3_12c4f58f",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-19T19:56:24Z",
      "side": 1,
      "message": "Done, added 2 notes, one for delaying creating the root signature until we know how many constants we need and another one for moving the entry to the beginning of the signature.",
      "parentUuid": "70367357_b771799c",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceb044ab_59bfba1e",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "I think this problem would disappear if we were drawing a single point, is that an option?",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd706be9_82ec08cc",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "No, OpenGL throws a GLSL error about uint requiring flat. Under Vulkan (at least on Intel iGPUs) the attribute will be 0 (which couldn\u0027t possible have been interpolated from the given values) if the SPIR-V doesn\u0027t have OpDecorate \u003cattrib\u003e \"Flat\".\n\nAlso, we can\u0027t test DrawIndexed() with PointList.",
      "parentUuid": "ceb044ab_59bfba1e",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfbc046a_03aec1de",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T18:12:50Z",
      "side": 1,
      "message": "Uh? Why can\u0027t we DrawIndexed with pointlist?",
      "parentUuid": "cd706be9_82ec08cc",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "501fb2c8_c27112a6",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T18:57:06Z",
      "side": 1,
      "message": "Got unexpected device error: indexFormat must be undefined when using non-strip primitive topologies",
      "parentUuid": "cfbc046a_03aec1de",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b39faa7f_3db0fdbf",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-01-14T19:01:55Z",
      "side": 1,
      "message": "Right, you don\u0027t need the indexformat in SetIndexBuffer.",
      "parentUuid": "501fb2c8_c27112a6",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "279c1fb4_4ec9bbc3",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T19:16:13Z",
      "side": 1,
      "message": "Not sure what you mean, RenderEncoderBase::SetIndexBuffer has the following check.\n\n            if (format \u003d\u003d wgpu::IndexFormat::Undefined) {\n                return DAWN_VALIDATION_ERROR(\"Index format must be specified\");\n            }",
      "parentUuid": "b39faa7f_3db0fdbf",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bb642b4_9054657b",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-01-14T19:21:11Z",
      "side": 1,
      "message": "and... that\u0027s why we need better error messages. Sorry the optional one is on the pipeline descriptor. We can omit:\npipelineDesc.cVertexState.indexFormat \u003d wgpu::IndexFormat::Uint32;",
      "parentUuid": "279c1fb4_4ec9bbc3",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1615072d_0b8b8fb6",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T23:06:46Z",
      "side": 1,
      "message": "Oops, I just noticed that I was passing pipelineDesc.cVertexState.indexFormat to SetIndexBuffer (which would have been undefined). Switching to PointList to simplify shaders and buffers.\n\nThat said, Vulkan and OpenGL are still broken due to missing OpDecorate. Confirmed that SwiftShader also breaks without OpDecorate. Also, forcing Tint to add OpDecorate \"Flat\" to all (u)int attributes fixes the issue.",
      "parentUuid": "5bb642b4_9054657b",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c03d9fe1_45662e90",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-01-15T00:22:00Z",
      "side": 1,
      "message": "Ok thanks! Please file a Tint bug for this so it gets fixed.",
      "parentUuid": "1615072d_0b8b8fb6",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7029f05f_1d4e9eba",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-15T23:35:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c03d9fe1_45662e90",
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd55d9b9_dadead90",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "nit: let\u0027s use vertex_index instead of idx because it was fixed in the upstream WGSL spec. (ditto for out_ and in_ versions of the variable)",
      "range": {
        "startLine": 104,
        "startChar": 40,
        "endLine": 104,
        "endChar": 50
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84e2fec2_e92e3e9c",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd55d9b9_dadead90",
      "range": {
        "startLine": 104,
        "startChar": 40,
        "endLine": 104,
        "endChar": 50
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7abf8e26_c44cd277",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "We should be able to hardcode position 0 and 1 for vertex_index and instance_index respectively . WebGPU should allow sparse varyings.",
      "range": {
        "startLine": 105,
        "startChar": 25,
        "endLine": 105,
        "endChar": 33
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f809702f_c189fd35",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "Done. Using 1 and 2 since 0 is used by position.",
      "parentUuid": "7abf8e26_c44cd277",
      "range": {
        "startLine": 105,
        "startChar": 25,
        "endLine": 105,
        "endChar": 33
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56231b64_88d235c2",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "ditto instance_index.",
      "range": {
        "startLine": 116,
        "startChar": 46,
        "endLine": 116,
        "endChar": 58
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d40ba40_b34e3e96",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56231b64_88d235c2",
      "range": {
        "startLine": 116,
        "startChar": 46,
        "endLine": 116,
        "endChar": 58
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "763b0a25_e1681e35",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 204,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "this should be optional",
      "range": {
        "startLine": 204,
        "startChar": 57,
        "endLine": 204,
        "endChar": 82
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aeaeaf97_8b598f22",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 204,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "763b0a25_e1681e35",
      "range": {
        "startLine": 204,
        "startChar": 57,
        "endLine": 204,
        "endChar": 82
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5875f06_6c649ab5",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "nit: maybe call it firstIndex and firstInstance?",
      "range": {
        "startLine": 207,
        "startChar": 34,
        "endLine": 207,
        "endChar": 45
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2aa98891_9deb9455",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5875f06_6c649ab5",
      "range": {
        "startLine": 207,
        "startChar": 34,
        "endLine": 207,
        "endChar": 45
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f249ec55_73c8eda2",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-01-14T13:40:23Z",
      "side": 1,
      "message": "nit: the constants don\u0027t exist, did you mean to set them to 7 and 11 respectively?",
      "range": {
        "startLine": 230,
        "startChar": 54,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a48fd62a_d2785f7b",
        "filename": "src/tests/end2end/FirstIndexOffsetTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2021-01-14T17:47:59Z",
      "side": 1,
      "message": "Done. Forgot to convert these to 7 and 11 respectively after Austin asked me to remove the constants and inline the numbers.",
      "parentUuid": "f249ec55_73c8eda2",
      "range": {
        "startLine": 230,
        "startChar": 54,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "47aabcd2c8b81a9257a13d3f573cd4463cd7cafc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}