{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b39692_56889454",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 15
      },
      "lineNbr": 3023,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-21T00:34:55Z",
      "side": 1,
      "message": "Not sure off the bat, but this might need `\"annotation\": \"const*\"`, see `get compilation info` for example.\n\nProbably also need a `status` field with a corresponding `request adapter info status` code. Mainly to handle the `instance dropped` case.",
      "range": {
        "startLine": 3023,
        "startChar": 12,
        "endLine": 3023,
        "endChar": 61
      },
      "revId": "f46aa72792d4aeb7b300f50781e3dbeb78652618",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9047d7b0_ca12ab91",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 15
      },
      "lineNbr": 3023,
      "author": {
        "id": 1000480
      },
      "writtenOn": "2024-02-21T09:21:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2b39692_56889454",
      "range": {
        "startLine": 3023,
        "startChar": 12,
        "endLine": 3023,
        "endChar": 61
      },
      "revId": "f46aa72792d4aeb7b300f50781e3dbeb78652618",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1eef500_4923e1b6",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 126,
      "author": {
        "id": 1000480
      },
      "writtenOn": "2024-02-20T16:03:37Z",
      "side": 1,
      "message": "I\u0027ve started adding a skeleton for wire adapter info tests but I get this.\n@lokokung@google.com Does that make sense to you?\n\n```\n[1/4] WireAdapterInfoTests.RequestAdapterInfoSuccess/Async (17 ms)\n[2/4] WireAdapterInfoTests.RequestAdapterInfoSuccess/WaitOnly (0 ms)\n[3/4] WireAdapterInfoTests.RequestAdapterInfoSuccess/ProcessEvents (0 ms)\n[4/4] WireAdapterInfoTests.RequestAdapterInfoSuccess/Spontaneous (TIMED OUT)\n1 test timed out:\n    WireAdapterInfoTests.RequestAdapterInfoSuccess/Spontaneous (../../third_party/dawn/src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp:125)\n```",
      "revId": "f46aa72792d4aeb7b300f50781e3dbeb78652618",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f74bfa11_2d598895",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 126,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-21T00:34:55Z",
      "side": 1,
      "message": "You need an expectation and reply block, example:\n\n```\nWGPUAdapterInfo info;\n\nEXPECT_CALL(api, OnRequestAdapterInfo(apiAdapter, NotNull(), NotNull()))\n    .WillOnce([]() {\n        // Call the callback so the test doesn\u0027t wait indefinitely.\n        api.CallAdapterRequestAdapterInfoCallback(\n            apiAdapter,\n            WGPURequestAdapterInfo_Success,\n            \u0026info\n        );\n    });\nFlushClient();\nFlushFutures();\nExpectWireCallbacksWhen([\u0026](auto\u0026 mockCb) {\n    EXPECT_CALL(mockCb, Call).Times(1);\n\n    FlushCallbacks();\n});\n```",
      "parentUuid": "a1eef500_4923e1b6",
      "revId": "f46aa72792d4aeb7b300f50781e3dbeb78652618",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e18e9a41_326d5d1b",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 126,
      "author": {
        "id": 1000480
      },
      "writtenOn": "2024-02-21T09:21:40Z",
      "side": 1,
      "message": "`CallAdapterRequestAdapterInfoCallback` and `OnRequestAdapterInfo` are not generated in `mock_webgpu.h/.cpp` files sadly.\n\n```\n../../third_party/dawn/src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp:132:13: error: no member named \u0027CallAdapterRequestAdapterInfoCallback\u0027 in \u0027testing::StrictMock\u003cMockProcTable\u003e\u0027\n  132 |         api.CallAdapterRequestAdapterInfoCallback(apiAdapter, WGPURequestAdapterInfoStatus_Success,\n      |         ~~~ ^\n../../third_party/dawn/src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp:130:5: error: no member named \u0027gmock_OnRequestAdapterInfo\u0027 in \u0027testing::StrictMock\u003cMockProcTable\u003e\u0027\n  130 |     EXPECT_CALL(api, OnRequestAdapterInfo(apiAdapter, NotNull(), NotNull())).WillOnce(InvokeWithoutArgs([\u0026] {\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```",
      "parentUuid": "f74bfa11_2d598895",
      "revId": "f46aa72792d4aeb7b300f50781e3dbeb78652618",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efeb31ff_c33aad62",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterInfoTests.cpp",
        "patchSetId": 15
      },
      "lineNbr": 126,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-02-22T01:20:20Z",
      "side": 1,
      "message": "Ah.. ok I see the issue now... Because we are passing these structs instead of the raw callbacks in the newer APIs, we need to do some massaging of the generated code... i.e. https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/generator/dawn_json_generator.py;l\u003d913?q\u003dhas_callback_arguments\u0026ss\u003dchromium%2Fchromium%2Fsrc probably needs to be changed.\n\nTo unblock you, lets go ahead and just implement both the older API and the newer one! I will follow up with some infra changes and make sure that this can work separately. You can additionally add the `\"tags\": [\"deprecated\"]` on the old function signature as well to indicate that users shouldn\u0027t use it. Sorry about that!",
      "parentUuid": "e18e9a41_326d5d1b",
      "revId": "f46aa72792d4aeb7b300f50781e3dbeb78652618",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}