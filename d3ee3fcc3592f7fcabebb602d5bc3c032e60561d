{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3bd549df_098ec2ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-17T12:36:48Z",
      "side": 1,
      "message": "This is good. A couple of nits.",
      "revId": "d3ee3fcc3592f7fcabebb602d5bc3c032e60561d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a07451ac_3a7570da",
        "filename": "src/tint/lang/msl/writer/ast_raise/packed_vec3.cc",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-17T12:36:48Z",
      "side": 1,
      "message": "```suggestion\n/// Arrays larger than this will be packed/unpacked with a for loop.\n/// Arrays up to this size will be packed/unpacked with a sequence of statements.\n```",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 62,
        "endChar": 80
      },
      "revId": "d3ee3fcc3592f7fcabebb602d5bc3c032e60561d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17057c91_1d94b046",
        "filename": "src/tint/lang/msl/writer/ast_raise/packed_vec3.cc",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-17T12:36:48Z",
      "side": 1,
      "message": "to avoid type mismatches, suggest `uint32_t`. This is also not in an anonymous namespaces, so should have `static`.\n\n```suggestion\nstatic constexpr uint32_t kMaxSeriallyUnpackedArraySize \u003d 8;\n```",
      "range": {
        "startLine": 63,
        "startChar": 10,
        "endLine": 63,
        "endChar": 18
      },
      "revId": "d3ee3fcc3592f7fcabebb602d5bc3c032e60561d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecefa3c8_7fcd400b",
        "filename": "src/tint/lang/msl/writer/ast_raise/packed_vec3.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-17T12:36:48Z",
      "side": 1,
      "message": "remove - not used.",
      "range": {
        "startLine": 260,
        "startChar": 16,
        "endLine": 260,
        "endChar": 61
      },
      "revId": "d3ee3fcc3592f7fcabebb602d5bc3c032e60561d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a40b398c_14543e35",
        "filename": "src/tint/lang/msl/writer/ast_raise/packed_vec3_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 523,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-17T12:36:48Z",
      "side": 1,
      "message": "Ã¼bernit: Would probably be more efficient to initialize the array with the values instead of zero-initializing the array then assigning. The backend compiler should be smart enough to remove the initial zeroing, but I\u0027ve learnt to never assume.",
      "revId": "d3ee3fcc3592f7fcabebb602d5bc3c032e60561d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}