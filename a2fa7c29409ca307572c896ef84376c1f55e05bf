{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "397132f6_f7c5da50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-15T14:24:21Z",
      "side": 1,
      "message": "Guys, can you still recall why we decided not to support R16Unorm and RG16Unorm in V1? If any hard limitation insurmountable, I would have to make it as an optional feature. Otherwise I should try to implement them fully supported like R8Unorm and RG8Unorm. I would really appreciate your perspective on this!\n\nBTW, this CL, jointly with the other two below, can barely work for P010 videos.\nhttps://skia-review.googlesource.com/c/skia/+/742636\nhttps://chromium-review.googlesource.com/c/chromium/src/+/4780335",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8fb6c04_6ab7c764",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-15T15:14:38Z",
      "side": 1,
      "message": "This seems like a good direction but we should separate it in at least 3 commits:\n\n - Addition of a feature for R/RG/RGBA16Unorm with validation tests in addition to the formats tests added in this CL.\n - Loosening the validation of ExternalTexture to allow planes to be any 1/2 component filterable formats. Plus tests would be good. (validation and simple end2end).\n - The commit adding P010 support, along with a whitebox test if possible.",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e245067_68657690",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-08-15T17:57:21Z",
      "side": 1,
      "message": "r/rg/rgba16unorm and snorm investigation:\nhttps://github.com/gpuweb/gpuweb/issues/3001",
      "parentUuid": "397132f6_f7c5da50",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06de4ec0_3ad8a7b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-22T07:48:49Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2e245067_68657690",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f84bf23_7f254a98",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 3141,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-15T14:39:21Z",
      "side": 1,
      "message": "This change will break ABI. Does dawn have the requirement to keep binary compatible?",
      "range": {
        "startLine": 3141,
        "startChar": 12,
        "endLine": 3141,
        "endChar": 45
      },
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d40ffc97_c4b54592",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 3141,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-15T15:14:38Z",
      "side": 1,
      "message": "We don\u0027t have ABI requirements (yet?), but until the formats are upstreamed in webgpu.h I think it\u0027s better to keep them below ASTC formats that are the last upstream formats we added. Also could we tag them with \"dawn\" until they are upstreamed?",
      "parentUuid": "4f84bf23_7f254a98",
      "range": {
        "startLine": 3141,
        "startChar": 12,
        "endLine": 3141,
        "endChar": 45
      },
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce83a927_52a7eaa4",
        "filename": "dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 3141,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-22T07:48:49Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d40ffc97_c4b54592",
      "range": {
        "startLine": 3141,
        "startChar": 12,
        "endLine": 3141,
        "endChar": 45
      },
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e2af0d1_3130b8ee",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-15T15:14:38Z",
      "side": 1,
      "message": "We should probably update the validation to check the number of components and the filterability of the plane\u0027s formats instead of hardcoding them. This could be done in a other commit (before this one?)",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "363dabfa_665a3a89",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-17T02:24:34Z",
      "side": 1,
      "message": "Not sure I understand you exactly. Do you mean something like this:\n```\n    ...\n    if (descriptor-\u003eplane1) {\n        DAWN_INVALID_IF(\n            !descriptor-\u003eyuvToRgbConversionMatrix,\n            \"When more than one plane is set, the YUV-to-RGB conversion matrix must be non-null.\");\n\n        for (const auto\u0026 plane : {descriptor-\u003eplane0, descriptor-\u003eplane1}) {\n            DAWN_TRY(device-\u003eValidateObject(plane));\n            wgpu::TextureFormat planeFormat \u003d plane-\u003eGetFormat().format;\n            bool planeFormatValid \u003d false;\n            switch (planeFormat) {\n                case wgpu::TextureFormat::R8Unorm:\n                case wgpu::TextureFormat::RG8Unorm:\n                case wgpu::TextureFormat::R16Unorm:\n                case wgpu::TextureFormat::RG16Unorm:\n                    planeFormatValid \u003d true;\n                    break;\n                default:;\n            }\n            DAWN_INVALID_IF(!planeFormatValid,\n                            \"The bi-planar external texture plane format (%s) is not valid.\",\n                            planeFormat);\n\n            DAWN_TRY(ValidateExternalTexturePlane(plane));\n        }\n    } else {\n    ...\n```",
      "parentUuid": "6e2af0d1_3130b8ee",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb6645d5_1bea8719",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-17T09:18:23Z",
      "side": 1,
      "message": "I was thinking of something like:\n\n```\nauto CheckPlaneFormat \u003d [](device, format, requiredComponentCount) -\u003e MaybeError {\n    DAWN_INVALID_IF(format.aspects !\u003d Color);\n    DAWN_INVALID_IF(format.GetAspectInfo(Color).supportSampleTypes doesn\u0027t have FilterableFloat);\n    DAWN_INVALID_IF(format.GetAspectInfo(Color).componentCount !\u003d requiredComponentCount);\n    return {};\n}\n\nif (descriptor-\u003eplane1 !\u003d nullptr) {\n    // Y + UV case.\n    DAWN_TRY_CONTEXT(CheckPlaneFormat(device, plane0.format, 1), \"validating the format of plane 0\");\n    DAWN_TRY_CONTEXT(CheckPlaneFormat(device, plane0.format, 2), \"validating the format of plane 1\");\n} else {\n    // RGBA case.\n    DAWN_TRY_CONTEXT(CheckPlaneFormat(device, plane0.format, 4), \"validating the format of plane 0\");\n}\n```\n\nGiven the way Dawn implements ExternalTextures, it should be possible to use any filterable format with the correct component count in the various planes.",
      "parentUuid": "363dabfa_665a3a89",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c3e6254_086286ad",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-22T07:48:49Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "cb6645d5_1bea8719",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cdeb2ea_80d7f003",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-15T15:14:38Z",
      "side": 1,
      "message": "Could this be done in a separate commit, with an extension for all 3 16Unorm formats? Right now this is extending the capabilities available on devices with no-optional features enabled, and the reason we didn\u0027t put this format in the spec is that at least some devices can\u0027t support 16Unorm formats.",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3321b88_40689f6d",
        "filename": "src/dawn/native/Format.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-22T07:48:49Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "4cdeb2ea_80d7f003",
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed79ab82_bb4e4534",
        "filename": "src/dawn/utils/TextureUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-08-15T14:39:21Z",
      "side": 1,
      "message": "Where is R16Unorm?",
      "range": {
        "startLine": 144,
        "startChar": 62,
        "endLine": 144,
        "endChar": 71
      },
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "662c3ff4_9250774b",
        "filename": "src/dawn/utils/TextureUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-08-22T07:48:49Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ed79ab82_bb4e4534",
      "range": {
        "startLine": 144,
        "startChar": 62,
        "endLine": 144,
        "endChar": 71
      },
      "revId": "a2fa7c29409ca307572c896ef84376c1f55e05bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}