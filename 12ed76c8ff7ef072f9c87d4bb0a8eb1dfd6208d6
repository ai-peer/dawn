{
  "comments": [
    {
      "key": {
        "uuid": "a3ad2e00_08e2b21b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-23T20:15:39Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eac3a79_e83950e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-27T09:40:23Z",
      "side": 1,
      "message": "LGTM",
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2975e768_c61cd6a6",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-27T09:40:23Z",
      "side": 1,
      "message": "Maybe we could use webgpu.h\u0027s EnumClassBitmask to avoid having to deal with the enum / mask duality.",
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f1c280_02066ea9",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-28T23:40:42Z",
      "side": 1,
      "message": "We could but that would require declaring them as \n\nenum class Aspect {\n Color \u003d 0x1,\n Depth \u003d 0x2,\n Stencil \u003d 0x4,\n};\n\n\nAnd we couldn\u0027t do IterateBitset on it because that yields us values {0, 1, 2} not {1, 2, 4}.\n\n\nWe could however make a different version like.. \"IterateEnumMask\" which calls IterateBitset and then yields (1 \u003c\u003c result)\n\nThat\u0027s actually a nice idea. Thoughts?",
      "parentUuid": "2975e768_c61cd6a6",
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be4c3c9e_b13c1bd8",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-29T00:39:38Z",
      "side": 1,
      "message": "Guess it also means making a copy of EnumClassBitMasks.h too because it\u0027s implemented in the wgpu:: namespace now",
      "parentUuid": "15f1c280_02066ea9",
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db77b901_f87ae766",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-29T08:27:11Z",
      "side": 1,
      "message": "IterateEnumMask seems like a good idea. Even with EnumClassBitmasks.h in wgpu:: isn\u0027t it possible to use it in dawn_native? Otherwise making a copy sounds fine.",
      "parentUuid": "be4c3c9e_b13c1bd8",
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "684dc4e3_9bc9304c",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-27T09:40:23Z",
      "side": 1,
      "message": "nit: aspects?",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 29
      },
      "revId": "12ed76c8ff7ef072f9c87d4bb0a8eb1dfd6208d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}