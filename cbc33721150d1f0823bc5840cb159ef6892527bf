{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d4b67fc_324f3b51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 48
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "Still didn\u0027t look at the tests. I feel like the native side could be made a bunch simpler somehow but I didn\u0027t take the time to wrap my head around it yet.",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "640e6f5e_2f4102bd",
        "filename": "dawn.json",
        "patchSetId": 48
      },
      "lineNbr": 1958,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-09-05T23:30:42Z",
      "side": 1,
      "message": "nit. Should this be called `future count` with a default of 0?",
      "range": {
        "startLine": 1958,
        "startChar": 20,
        "endLine": 1958,
        "endChar": 56
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0ddb6f9_66d80159",
        "filename": "dawn.json",
        "patchSetId": 48
      },
      "lineNbr": 1958,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "It\u0027s a function argument, so the name is mostly invisible to the user, but renaming it to match the other argument makes sense. Done, and done in the design doc too.\n\nIt can\u0027t have a default because there are required args after it.",
      "parentUuid": "640e6f5e_2f4102bd",
      "range": {
        "startLine": 1958,
        "startChar": 20,
        "endLine": 1958,
        "endChar": 56
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4196ffe_fbbadee0",
        "filename": "generator/templates/dawn/wire/client/ApiProcs.cpp",
        "patchSetId": 48
      },
      "lineNbr": 164,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: in a follow-up could we 1) do like generator/templates/dawn/native/Proctable.cpp and autogen this for each freestanding function and 2) move ClientCreateInstance and ClientGetInstanceFeatures to client/Instance.h/.cpp ?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb1c35bf_d88b09e5",
        "filename": "generator/templates/dawn/wire/client/ApiProcs.cpp",
        "patchSetId": 48
      },
      "lineNbr": 164,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "This is a tiny change, so just did it now.",
      "parentUuid": "a4196ffe_fbbadee0",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f149e26_271bc03d",
        "filename": "src/dawn/common/FutureUtils.cpp",
        "patchSetId": 48
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "There\u0027s a lot of cases which are ASSERTs in the API contract instead of validation errors. Don\u0027t we want to properly define them so that there is less footguns / crashes? Or since this is not Web-exposed, we can afford to be more lenient?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c32ae9_a805854b",
        "filename": "src/dawn/common/FutureUtils.cpp",
        "patchSetId": 48
      },
      "lineNbr": 25,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "I don\u0027t know for sure. Having error reporting for every single possible error is kind of onerous. For example, if you pass bogus CallbackMode flags, what\u0027s a reasonable thing to happen? Call the callback immediately with an Unknown status (ignoring the flags) [a]? Make a best guess at how it was meant to be called (immediate or ProcessEvents or WaitAny) and call it then with Unknown? Never call it but return a failure status some other way?\n\nI partly left it UB because if we really want to tighten it up later we can define the behavior and do something. I\u0027d propose [a] if we do. But ASSERTs also seem more friendly to developers. Passing bogus flags seems almost as silly as, like, `wgpuDeviceCreateTexture(nullptr, desc)`, except that two different webgpu.h implementations could support a different set of flags. For that we should have better feature detection via GetInstanceFeatures.",
      "parentUuid": "9f149e26_271bc03d",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779cba67_e9aa4efc",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 48
      },
      "lineNbr": 2059,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "should this be named \"WaitAny\" ?",
      "range": {
        "startLine": 2059,
        "startChar": 28,
        "endLine": 2059,
        "endChar": 32
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47becf75_98701be1",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 48
      },
      "lineNbr": 2059,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "779cba67_e9aa4efc",
      "range": {
        "startLine": 2059,
        "startChar": 28,
        "endLine": 2059,
        "endChar": 32
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aee944e_b8fa84eb",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "nit: unnecessary parens\n\n```suggestion\n        DeviceBase* waitDevice \u003d futures[sliceStart].event-\u003eGetWaitDevice();\n```",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 78
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d15ff5a8_61a01d75",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 50,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2aee944e_b8fa84eb",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 78
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eb9ba4b_bd1b0b98",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 82,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:54:46Z",
      "side": 1,
      "message": "```suggestion\n        mTimedWaitEnable \u003d descriptor-\u003efeatures.timedWaitAnyEnable;\n        mTimedWaitMaxCount \u003d descriptor-\u003efeatures.timedWaitAnyMaxCount;\n```\n?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "051edbe5_f4abdfe5",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 82,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4eb9ba4b_bd1b0b98",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c671bd18_fa9d8e79",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 92,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-09-05T23:30:42Z",
      "side": 1,
      "message": "Hmm.. now that I see the handling/logic here, I do feel like just having the explicit modes instead of flags could be simpler? It would also allow for a `switch/case` here which is a bit easier to read. Not too partial about it though?",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 92,
        "endChar": 0
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7f02808_9d0eaddc",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 92,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "This is a fair point. I originally was going to return a future for everything but decided it was unnecessarily difficult to do so alongside ProcessEvents.\n\nI\u0027ll change our implementation to convert this to an enum first for clearer logic.\nIMO let\u0027s leave the API side of this as a followup for the moment. Left a comment here:\nhttps://docs.google.com/document/d/1qJRTJRY318ZEqhK6ryw4P-91FumYQfOnNP6LpANYy6A/edit?pli\u003d1\u0026disco\u003dAAAA4rhkko0",
      "parentUuid": "c671bd18_fa9d8e79",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 92,
        "endChar": 0
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd9ac57d_5cd27497",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "this comment implies the future is returned to the application such that it can call WaitAny before Track.\n\nHowever, it looks like Track is always called during creation of the future",
      "range": {
        "startLine": 97,
        "startChar": 12,
        "endLine": 99,
        "endChar": 25
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37025eac_db3efc71",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 99,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Good catch. I think I used to have some logic where this was a problem because I stored the future id into the TrackedFuture. I think it\u0027s fine now. Done.",
      "parentUuid": "bd9ac57d_5cd27497",
      "range": {
        "startLine": 97,
        "startChar": 12,
        "endLine": 99,
        "endChar": 25
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f721eaa_739fc92f",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "if the mode is Future | ProcessEvents, we don\u0027t track it in `mTrackedPollEvents`\n\nis that correct?",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 33
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd090268_eb9e6ed5",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 103,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "`Future | ProcessEvents` is not allowed by AssertValidCallbackMode. Made this clearer.",
      "parentUuid": "2f721eaa_739fc92f",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 33
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d35aaa7_280e2bec",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 105,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: put a comment here as well (potentially referencing the one above?)",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb881c7d_0192a860",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 105,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Obsolete thanks to Austin\u0027s comment.",
      "parentUuid": "2d35aaa7_280e2bec",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef0dde5e_1ad552b0",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 109,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-09-05T23:30:42Z",
      "side": 1,
      "message": "Is this `ASSERT` really worth anything? We are in an `else if` clause after `if (isFuture)`.",
      "range": {
        "startLine": 109,
        "startChar": 8,
        "endLine": 109,
        "endChar": 26
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cf18392_949208a6",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 109,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Not really. The comment is enough.",
      "parentUuid": "ef0dde5e_1ad552b0",
      "range": {
        "startLine": 109,
        "startChar": 8,
        "endLine": 109,
        "endChar": 26
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4858eaa9_a2fdb64c",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: kInvalidFuture?",
      "range": {
        "startLine": 110,
        "startChar": 15,
        "endLine": 110,
        "endChar": 16
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e80760c5_a4c0f4f5",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 110,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4858eaa9_a2fdb64c",
      "range": {
        "startLine": 110,
        "startChar": 15,
        "endLine": 110,
        "endChar": 16
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39a74335_5ab31e96",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "I\u0027m slightly concerned about the repeated O(N) processing here. Couldn\u0027t the completion of an event signal that the future is ready and only then would we need to iterate over them here?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c920d9_b833477b",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 123,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "It\u0027s not always possible. If it\u0027s backed by an OS event, the only way to find out it\u0027s ready is to poll it. There are a lot of possible optimizations, but I don\u0027t want to do them yet:\n- Only pay attention to the earliest serial on each queue.\n- Spontaneously set events as \"early-ready\" in other places when we see serials advance, e.g. Submit, checking a later wait before an earlier wait.\n- Once we have thread-driven events (async pipeline compilation), defer tracking it for ProcessEvents until the event is already completed.\n\nI\u0027ve written all this out in a TODO.",
      "parentUuid": "39a74335_5ab31e96",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c3f72c1_587fae99",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 183,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "should we `break` as soon as we see `anyCompleted`?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d306be6_b8bafa20",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 183,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:54:46Z",
      "side": 1,
      "message": "nevermind - I suppose you want to mark all of the completed ones as completed.",
      "parentUuid": "0c3f72c1_587fae99",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3c9d76e_539e58d4",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 205,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "nit: dedent",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea6ecdb1_e3085327",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 205,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3c9d76e_539e58d4",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "528cd190_68bb9e68",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 221,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "EnsureCompleteFromWaitAny calls callbacks. Should we set the completed bit first? that way if the caller checks the info inside the callback, they see it is done",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 221,
        "endChar": 0
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "134cc24c_c9e220be",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 221,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "I hadn\u0027t thought of a good reason to do this one way or the other, but this is a good reason. I\u0027ll write it in the design doc too.",
      "parentUuid": "528cd190_68bb9e68",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 221,
        "endChar": 0
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1ddb061_05a8072b",
        "filename": "src/dawn/native/EventManager.h",
        "patchSetId": 48
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "Maybe the nodiscard could be on these types directly. (ditto for WaitStatus)",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09add622_97c850f9",
        "filename": "src/dawn/native/EventManager.h",
        "patchSetId": 48
      },
      "lineNbr": 49,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s possible to put `[[nodiscard]]` on a typedef/`using`. It might work (in debug builds) if FutureID were a TypedInteger though it would be a bit of a pain to wire through.\n\nWaitStatus is generated in webgpu_cpp.h, so I added a TODO in dawn.json.",
      "parentUuid": "a1ddb061_05a8072b",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0deb08dd_49ddd3ed",
        "filename": "src/dawn/native/OSEventPipe.cpp",
        "patchSetId": 48
      },
      "lineNbr": 39,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "nit: maybe just CHECK(status \u003e\u003d 0) and fold the UNLIKELY into the CHECK ?",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 39,
        "endChar": 5
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1da5bee4_1c278937",
        "filename": "src/dawn/native/OSEventPipe.cpp",
        "patchSetId": 48
      },
      "lineNbr": 39,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0deb08dd_49ddd3ed",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 39,
        "endChar": 5
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a776785_c1b388ff",
        "filename": "src/dawn/native/Queue.h",
        "patchSetId": 48
      },
      "lineNbr": 65,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: it is surprising that this is a reference given that the webgpu.h API is a pointer. The reinterpret_cast can work I guess but IMHO it might be better (and not that much more annoying) to keep it as a pointer.",
      "range": {
        "startLine": 65,
        "startChar": 74,
        "endLine": 65,
        "endChar": 75
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a2f0659_aef06347",
        "filename": "src/dawn/native/Queue.h",
        "patchSetId": 48
      },
      "lineNbr": 65,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "It\u0027s actually passed by value, not by pointer, in the C API. Do you think it should be passed by pointer? Or change this plumbing to use a value instead of a reference?\n(cwfitzgerald has expressed a general preference for passing small structs by value; here in particular, passing by value is more similar to what we would do without the struct, just pass 4 function arguments.)",
      "parentUuid": "6a776785_c1b388ff",
      "range": {
        "startLine": 65,
        "startChar": 74,
        "endLine": 65,
        "endChar": 75
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4391cbea_5b7e7acc",
        "filename": "src/dawn/native/Queue.h",
        "patchSetId": 48
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "u-nit: put in the .cpp?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "416dcd25_7e9a4e2d",
        "filename": "src/dawn/native/Queue.h",
        "patchSetId": 48
      },
      "lineNbr": 90,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4391cbea_5b7e7acc",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1acdb73_2d42b4d8",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 41,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "not used",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 1
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18a9b9da_dea601cc",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 41,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1acdb73_2d42b4d8",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 1
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "351044f7_b6e6ed16",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "not used",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 46,
        "endChar": 0
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f47a0037_f9368d1f",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 46,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "351044f7_b6e6ed16",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 46,
        "endChar": 0
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58961269_bc48c0e3",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 107,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "All the logic for WorkDoneEvent feels like it should live in the queue?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53a9e882_23904d1c",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 107,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "I\u0027ll try to move this in the next patchset.",
      "parentUuid": "58961269_bc48c0e3",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf9cd53d_734aef93",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 107,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T05:07:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53a9e882_23904d1c",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f9bff76_3bf757de",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: Can be declared just when needed.",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb261c17_f96d1a4d",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 109,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f9bff76_3bf757de",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3d13e18_70469ab0",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 115,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "SetEarlyReady is only used here.\n\nI think it\u0027ll be easier to understand if immediately on creation, it is created as ready - instead of mutating its state after. Then, we don\u0027t have to think about when/if TriggerEarlyReady is called on some event that has a not-yet-signaled receiver.",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 115,
        "endChar": 68
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9d3d884_a7891092",
        "filename": "src/dawn/native/TrackedEvent.cpp",
        "patchSetId": 48
      },
      "lineNbr": 115,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:54:22Z",
      "side": 1,
      "message": "Good idea. I initially intended for it to also be used for spontaneous completions in Tick in Submit. But I\u0027m not sure it will end up being used that way, so I\u0027ll remove it.",
      "parentUuid": "b3d13e18_70469ab0",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 115,
        "endChar": 68
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd2b495_9b754c94",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "Can we have some more explanations there?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce957cfd_3c1399d5",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 34,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3cd2b495_9b754c94",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d19eeda_04d58ef7",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: The assert could be done by the caller so we don\u0027t need these two methods.",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f1f598c_5957f1b4",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 44,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:54:22Z",
      "side": 1,
      "message": "I somewhat prefer the two methods because otherwise mCallbackMode is currently `protected`. I could make it unprotected (and therefore mutable) or replace these two methods with a GetCallbackMode method which doesn\u0027t seem like a great tradeoff.",
      "parentUuid": "9d19eeda_04d58ef7",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e03a81_bedddbec",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 44,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Maybe I can move this to an inner class of EventManager, like in the wire. I thought this class would be more widely used but it turns out that probably makes more sense.",
      "parentUuid": "7f1f598c_5957f1b4",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "242612bc_893a90c4",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 44,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T05:07:34Z",
      "side": 1,
      "message": "It\u0027s a bit hefty but I\u0027ve moved it in the latest patchset (52-\u003e53). Could be undone if it\u0027s too much.",
      "parentUuid": "35e03a81_bedddbec",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15ef2882_354dd201",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 52,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit extra ASSERTs that a single WaitRef can be present at a time, used to check that the WaitAny algorithm doesn\u0027t concurrently call wait() on the same future.",
      "range": {
        "startLine": 52,
        "startChar": 43,
        "endLine": 52,
        "endChar": 50
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44fd92ec_27664d1b",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 52,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15ef2882_354dd201",
      "range": {
        "startLine": 52,
        "startChar": 43,
        "endLine": 52,
        "endChar": 50
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52619914_0f581e3f",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "Overall, I\u0027m wondering if TrackedEvent should store OSEventReceiver, or it would be better to store some object with virtual methods from which you can get an OSEventReceiver/Primitive.\n\nThen, we do not need to pay the cost of making pipes / Win32 events in poll-only mode. We can also defer making the pipe/event until we really need it - which allows the already-signaled case to make nothing at all.\n\nI guess it is just an optimization though and could be left as a TODO",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 30
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "668a3522_0da4d59f",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 76,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Added TODO",
      "parentUuid": "52619914_0f581e3f",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 30
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cec4862_b044840b",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 98,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: unused?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5050735_ab01e0f3",
        "filename": "src/dawn/native/TrackedEvent.h",
        "patchSetId": 48
      },
      "lineNbr": 98,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "These are used in EventManager. Added comments.",
      "parentUuid": "9cec4862_b044840b",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2f6213c_f8cf5dfd",
        "filename": "src/dawn/native/metal/QueueMTL.h",
        "patchSetId": 48
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "```suggestion\n    // TODO(dawn:1987): if we atomically knew a conservative lower bound on the mWaitingEvents\n```",
      "range": {
        "startLine": 74,
        "startChar": 12,
        "endLine": 74,
        "endChar": 19
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60042c23_218b1294",
        "filename": "src/dawn/native/metal/QueueMTL.h",
        "patchSetId": 48
      },
      "lineNbr": 74,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2f6213c_f8cf5dfd",
      "range": {
        "startLine": 74,
        "startChar": 12,
        "endLine": 74,
        "endChar": 19
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e24aa9_4d1596cd",
        "filename": "src/dawn/native/metal/QueueMTL.h",
        "patchSetId": 48
      },
      "lineNbr": 78,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "nit: use MutexProtected",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 78,
        "endChar": 61
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd2174e5_8d283ba0",
        "filename": "src/dawn/native/metal/QueueMTL.h",
        "patchSetId": 48
      },
      "lineNbr": 78,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6e24aa9_4d1596cd",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 78,
        "endChar": 61
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06ef2884_9081830f",
        "filename": "src/dawn/native/metal/QueueMTL.mm",
        "patchSetId": 48
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "A lot of different things will be using the GPU\u0027s progress to signal futures. Wouldn\u0027t it be better to eagerly add a an OSReceiver/OSPipe (names could be better) and then when a WorkDoneEvent request is there, dup() the last submit\u0027s OSReceiver?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "283dfb7a_e15e7d28",
        "filename": "src/dawn/native/metal/QueueMTL.mm",
        "patchSetId": 48
      },
      "lineNbr": 50,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the goal. Wouldn\u0027t this result in more pipes in most cases? Seems like we should try to cut down on the number of pipes (maybe even lower than this). See also the comment I added in native/TrackedEvent.h about optimizing.",
      "parentUuid": "06ef2884_9081830f",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81844c90_bc1f73ba",
        "filename": "src/dawn/wire/client/Client.h",
        "patchSetId": 48
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "u-nit: Can be in the .cpp",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10fafeee_1421d478",
        "filename": "src/dawn/wire/client/Client.h",
        "patchSetId": 48
      },
      "lineNbr": 95,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81844c90_bc1f73ba",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5879b58d_8e5ee5ad",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "u-nit: we could use an early out to simplify control a tiny bit:\n\n if (!event.mReady || !(event.mMode \u0026 WGPUCallbackMode_ProcessEvents)) {\n   return false;\n }\n \n if (event.mCallback !\u003d nullptr) // add to vector\n \n return true;",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "086c37d0_fdb78284",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 85,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "I think I prefer the code I\u0027ve written because it clearly names the bool variable. Otherwise I find it kind of hard to follow the logic when I\u0027m embedding so much logic inside of erase_if.",
      "parentUuid": "5879b58d_8e5ee5ad",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0875553f_58823906",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 85,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-07T05:34:51Z",
      "side": 1,
      "message": "Had to refactor this for C++17 anyway so now this is done.",
      "parentUuid": "086c37d0_fdb78284",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7833e17_d19c739b",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "u-nit: we could early continue to dedent. Likewise for !event.mReady.",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6040098c_54bedfb1",
        "filename": "src/dawn/wire/client/EventManager.cpp",
        "patchSetId": 48
      },
      "lineNbr": 123,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Done, flattened the first one but not the second one. Found it weird to say:\n\n```\nif (...) { completed \u003d true; continue; }\nif (...) { completed \u003d false; continue; }\ncompleted \u003d true;\n````",
      "parentUuid": "f7833e17_d19c739b",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9759ed10_f1adf157",
        "filename": "src/dawn/wire/client/Instance.cpp",
        "patchSetId": 48
      },
      "lineNbr": 18,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-09-05T23:30:42Z",
      "side": 1,
      "message": "nit. Unclear what these were added for?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 18
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e8dba4c_5c800e16",
        "filename": "src/dawn/wire/client/Instance.cpp",
        "patchSetId": 48
      },
      "lineNbr": 18,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Ugh. I ended up with a lot of these stray includes because I kept moving code around.",
      "parentUuid": "9759ed10_f1adf157",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 18
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfebfbab_5fc4318b",
        "filename": "src/dawn/wire/client/Queue.cpp",
        "patchSetId": 48
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-05T22:48:04Z",
      "side": 1,
      "message": "static_cast should work\n\n```suggestion\n             auto* lambda \u003d static_cast\u003cLambda*\u003e(userdata);\n```",
      "range": {
        "startLine": 71,
        "startChar": 28,
        "endLine": 71,
        "endChar": 44
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c713275_937e7609",
        "filename": "src/dawn/wire/client/Queue.cpp",
        "patchSetId": 48
      },
      "lineNbr": 71,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T04:38:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfebfbab_5fc4318b",
      "range": {
        "startLine": 71,
        "startChar": 28,
        "endLine": 71,
        "endChar": 44
      },
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1584af16_36f0d8ea",
        "filename": "src/dawn/wire/client/RequestTracker.h",
        "patchSetId": 48
      },
      "lineNbr": 19,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-04T13:42:03Z",
      "side": 1,
      "message": "nit: stray include?",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99932c2c_21a2e65b",
        "filename": "src/dawn/wire/client/RequestTracker.h",
        "patchSetId": 48
      },
      "lineNbr": 19,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-09-06T01:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1584af16_36f0d8ea",
      "revId": "cbc33721150d1f0823bc5840cb159ef6892527bf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}