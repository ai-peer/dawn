{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "52b5eaf9_5d005398",
        "filename": "src/dawn/native/ExternalTexture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-04-15T22:55:38Z",
      "side": 1,
      "message": "I\u0027m leaning towards passing the YUV-to-RGB matrix in as a CreateExternalTexture param alongside other constants - just haven\u0027t gotten to it yet.\n\nAlso note that the media team told me BT.601 full range was important to support, however I can\u0027t find it inside SkYuvMath.cpp.",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73379f37_e3e2a2fa",
        "filename": "src/dawn/tests/end2end/ExternalTextureTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-04-15T22:55:38Z",
      "side": 1,
      "message": "The constants I used for conversion previously were slightly off, which is why I had to change the test. These new values were found manually using the SkYuvMath matrix.",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "188432e4_09b1bbef",
        "filename": "src/tint/transform/multiplanar_external_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-04-15T22:55:38Z",
      "side": 1,
      "message": "@Ben - I think you mentioned we could get rid of this branch by extending the matrix. I assume you mean moving to a mat3x4 and always subtracting the additional constants from the y,u,v values. This sounds good, but I wasn\u0027t sure what the most eloquent way to get a mat3x3 out of a mat3x4 was - could you give me an example?",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69ef7efd_b46a47e5",
        "filename": "src/tint/transform/multiplanar_external_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-18T19:37:30Z",
      "side": 1,
      "message": "Yes, that\u0027s pretty much what I was thinking. I\u0027m probably missing something, but why do you need to get the mat3x3 out of the mat3x4? I was thinking you\u0027d just multiply the matrix with a vec4 (the vec3 you have now, but with a `1.0` in the last component).",
      "parentUuid": "188432e4_09b1bbef",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f0921ba_f8f926f4",
        "filename": "src/tint/transform/multiplanar_external_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-04-18T22:02:02Z",
      "side": 1,
      "message": "I think that\u0027ll work.",
      "parentUuid": "69ef7efd_b46a47e5",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb84d064_3e0f9c14",
        "filename": "src/tint/transform/multiplanar_external_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-18T22:16:56Z",
      "side": 1,
      "message": "Great. To make sure there\u0027s no confusion, the extra row would always be multiplied by `1.0`, so provides you a place to put `y`, `u` and `v` biases, condition free.",
      "parentUuid": "5f0921ba_f8f926f4",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5236ac42_98c41ad0",
        "filename": "src/tint/transform/multiplanar_external_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-04-19T00:06:31Z",
      "side": 1,
      "message": "You mean multiply by 0.0, right? If so, done. I did only use one constant for UV bias because it should always be the same for U and V.",
      "parentUuid": "cb84d064_3e0f9c14",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ac5a29b_281c4bdc",
        "filename": "src/tint/transform/multiplanar_external_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-19T20:25:04Z",
      "side": 1,
      "message": "I meant `1.0`:\n\n```\n   color \u003d vec4(y, uv, 1.0) * params.yuvToRgbConversionMatrix;\n```\n\n\nWith this your RGB color value is calculated with a single `vec4` × `mat3x4` matrix multiply:\n\n```\n\n                       ╭         ╮\n                       │ a, b, c │\ncolor \u003d [y, u, v, 1] × │ d, e, f │\n                       │ g, h, i │\n                       │ j, k, l │\n                       ╰         ╯\n\n// Which is equivalent to:\n\ncolor.r \u003d y⋅a + u⋅d + v⋅g + j\ncolor.g \u003d y⋅b + u⋅e + v⋅h + k\ncolor.b \u003d y⋅c + u⋅f + v⋅i + l\n```\n\nAs the `w` of your LHS vector is always `1.0`, the last row of your matrix (`j`, `k`, `l`) are just biases on your final RGB values. I\u0027m aware that you\u0027re biasing before the matrix multiply, but it should be easy to figure out the values for `j`, `k`, and `l` to give you the same end result.\n\nReally, it doesn\u0027t make a whole lot of difference to the computational cost, as most GPU architectures are scalar, but doing it this way is a bit cleaner.\n\nI don\u0027t feel particularly strongly here. Happy to stick with what you have, if that\u0027s what you prefer.",
      "parentUuid": "5236ac42_98c41ad0",
      "revId": "284a76f41cdf6c089d50c8427ee657be77338a2a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}