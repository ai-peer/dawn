{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6b7f386c_494b9546",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-18T14:16:36Z",
      "side": 1,
      "message": "WGSL binding numbers can be arbitrary u32s in Dawn right now, and arbitrary u16 in the WebGPU spec (Dawn is missing validation). Is that ok for the D3D runtime?",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c6437cd_ea7e888c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T18:38:39Z",
      "side": 1,
      "message": "AFAIK there\u0027s no limit on the max shader register in d3d12. However, experimentally, it seems that WARP supports up to UINT32_MAX, but my NVidia card (and the ANGLE/Swiftshader and Vulkan backends) only support up to INT32_MAX.\n\nDo you think it\u0027s worth adding a binding to BindGroupTests.ArbitraryBindingNumbers (https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/tests/end2end/BindGroupTests.cpp;l\u003d1017?q\u003darbitrarybind\u0026sq\u003d\u0026ss\u003dchromium) that is UINT16_MAX?",
      "parentUuid": "6b7f386c_494b9546",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44e7447a_89514a7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-19T07:52:20Z",
      "side": 1,
      "message": "Probably worth adding in a follow up along with the validation in ShaderModule.cpp that bindings are at most 2^16",
      "parentUuid": "1c6437cd_ea7e888c",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e77f3bcf_2dc27387",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-18T14:16:36Z",
      "side": 1,
      "message": "nit: We usually pass mutable references by pointer instead so it is clear at the callsite that the value may be modified.",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cdd1cfe_b9a49c4b",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T18:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e77f3bcf_2dc27387",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c157515_0be5f6e2",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-18T14:16:36Z",
      "side": 1,
      "message": "nit: The first part of this || will always be true so I\u0027m not sure what we\u0027re testing here.",
      "range": {
        "startLine": 78,
        "startChar": 68,
        "endLine": 80,
        "endChar": 74
      },
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "203df5f5_f9dd4d6a",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T18:38:39Z",
      "side": 1,
      "message": "My intention was to make this code work in case the descriptor range offsets are explicitly set in the future. I\u0027ll remove it for now, since I assume testing/code review will catch any future issues.",
      "parentUuid": "3c157515_0be5f6e2",
      "range": {
        "startLine": 78,
        "startChar": 68,
        "endLine": 80,
        "endChar": 74
      },
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ef2aab_80e9e448",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-18T14:16:36Z",
      "side": 1,
      "message": "Isn\u0027t this potentially doing O(n^2) computations?\n\nWe could directly try to extend the range at [1] if it is possible instead of merging at posteriori.",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ea908c4_c80a4c82",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 82,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T18:38:39Z",
      "side": 1,
      "message": "You\u0027re totally right, I\u0027ll move it back.\n\nI think I was originally trying to be clever here by allowing for more fancy merging, but just sorting the bindings here (https://dawn-review.googlesource.com/c/dawn/+/60765/1) ended up making this much more effective by itself.",
      "parentUuid": "52ef2aab_80e9e448",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a0541e9_fa498a61",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-18T14:16:36Z",
      "side": 1,
      "message": "[1]",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "050ee80f_eabb86db",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T18:38:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0a0541e9_fa498a61",
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50b5c97c_e766241e",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T01:58:35Z",
      "side": 1,
      "message": "The win-dawn-rel job failed inside a bounds check on `ranges`. This is because we\u0027re getting the address of a range that we push on line 106 below.\n\nThere are a handful of ways to resolve this (e.g. pushing the ranges before getting the address), but I figured doing pointer math should raise the \"oops unsafe code\" alarm and get closer scrutiny. We don\u0027t expect ranges.data() to change, given the `.reserve()` call above and the `ASSERT` on `ranges.size()` below.",
      "range": {
        "startLine": 102,
        "startChar": 66,
        "endLine": 102,
        "endChar": 92
      },
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd1e107a_73f4ebcf",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-18T02:18:58Z",
      "side": 1,
      "message": "Perhaps instead of reserve, would it be possible to just actually fill `ranges` with zero-initialized D3D12_DESCRIPTOR_RANGEs and then set them by index instead of push_back?",
      "parentUuid": "50b5c97c_e766241e",
      "range": {
        "startLine": 102,
        "startChar": 66,
        "endLine": 102,
        "endChar": 92
      },
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "687d8a5c_971643eb",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-18T18:38:39Z",
      "side": 1,
      "message": "Seems reasonable, we potentially get extra bounds checking in this case.",
      "parentUuid": "bd1e107a_73f4ebcf",
      "range": {
        "startLine": 102,
        "startChar": 66,
        "endLine": 102,
        "endChar": 92
      },
      "revId": "8458f1232ac2040c23840073d51f9468e996d886",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}