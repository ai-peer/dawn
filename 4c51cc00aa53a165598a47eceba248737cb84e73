{
  "comments": [
    {
      "key": {
        "uuid": "6de992d9_66d36124",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 156,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-27T04:48:04Z",
      "side": 1,
      "message": "nit: use DAWN_TRY(CheckHResult(..)) like elsewhere and return MaybeError. If the D3D call fails, better to handle it immediately vs allowing adapter to continue initializing under error.",
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc26ce7d_8ce5f165",
        "filename": "src/dawn_native/d3d12/AdapterD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-27T04:48:04Z",
      "side": 1,
      "message": "ditto",
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b37190e7_6d1e67ce",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 471,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-27T02:01:39Z",
      "side": 1,
      "message": "Why is \"GetState() !\u003d State::Alive\" added to the list of conditions? \n\nI think the kMaxDebugMessagesToPrint limit should work well enough to avoid outputting too many messages.",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 38
      },
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b119b574_86e10d7e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 471,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-05-27T02:53:00Z",
      "side": 1,
      "message": "An attempt to get around the infinity loop caused by calling ConsumedError() with an internal error without first clearing the info queue. If !\u003d State::Alive is too broad, we could switch to \u003d\u003d State::BeingDisconnected.\n\nAlternatively, we could read all messages and clear the queue before calling ConsumedError(). This would guard against the messages being generated during shutdown. That said, any message generated during shutdown might get silenced by AssertAndIgnoreDeviceLossError anyways.",
      "parentUuid": "b37190e7_6d1e67ce",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 38
      },
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36cd0a38_0a71ea7f",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 471,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-05-27T03:03:48Z",
      "side": 1,
      "message": "Decided to create an array.",
      "parentUuid": "b119b574_86e10d7e",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 38
      },
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a85a3bee_01e92650",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 471,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-05-27T05:02:18Z",
      "side": 1,
      "message": "I think this may never terminate if an error occurs during shutdown. The termination condition cannot be met if an error is inserted back into the queue upon being disconnected.\n\nIt would be safer to check `if State::BeingDisconnected` or better yet, ASSERT(\u003cno errors\u003e) before returning early.",
      "parentUuid": "36cd0a38_0a71ea7f",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 38
      },
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "180c3ad3_1da94882",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 11
      },
      "lineNbr": 471,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-05-27T05:38:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a85a3bee_01e92650",
      "range": {
        "startLine": 471,
        "startChar": 12,
        "endLine": 471,
        "endChar": 38
      },
      "revId": "4c51cc00aa53a165598a47eceba248737cb84e73",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}