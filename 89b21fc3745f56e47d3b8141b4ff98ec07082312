{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "300c3009_866ac372",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-06T14:56:17Z",
      "side": 1,
      "message": "Austin: for review\nSaif, Nicolette: FYI\n\nThanks!",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1364543_b8b1cfb7",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-06T14:56:17Z",
      "side": 1,
      "message": "Is there anything problematic about using YCbCrVkDescriptor here when it\u0027s listed as\n\n\"chained\": \"in\",\n\"chain roots\": [\"sampler descriptor\", \"texture view descriptor\"],\n\n?",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97a82ce6_0148332f",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-06T18:17:11Z",
      "side": 1,
      "message": "@kainino@chromium.org for an API/webgpu.h perspective here.\n\nI believe what you have would \"work\" but it may be a bit odd API structure? Should we instead of a separate y cb cr info standalone struct, and then:\n```\nstruct WGPUYCbCrInfo {\n // not chained\n // ...\n};\nstruct WGPUYCbCrVkDescriptor {\n  WGPUChainedStruct chain;\n  WGPUYCbCrInfo ycbcrInfo;\n};\nstruct WGPUYCbCrVkProperties {\n  WGPUChainedStructOut chain;\n  WGPUYCbCrInfo suggestedYcbcrInfo;\n};\n```\n?\n\nThe downside of this is that it\u0027s potentially a lot of extra \".\" to actually pass your info.\n\n\n```\nWGPUTextureViewDescriptor viewDesc;\nWGPUYCbCrVkDescriptor ycbcrDesc;\nviewDesc.chain.next \u003d \u0026ycbcrDesc;\nycbcrDesc.ycbcrInfo.vkYCbCrModel \u003d ...;\nycbcrDesc.ycbcrInfo.vkYCbCrRange \u003d ...;\n```\n\nAlternatively, you might argue that Colin\u0027s current structure is better - since it outputs directly the input descriptor you can use for creation.",
      "parentUuid": "d1364543_b8b1cfb7",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e558ef92_52b3c5eb",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-06T21:45:40Z",
      "side": 1,
      "message": "The thing Austin described is basically what we currently do for WGPULimits/WGPURequiredLimits/WGPUSupportedLimits. However we said we were going to try to change that:\nhttps://github.com/webgpu-native/webgpu-headers/issues/260#issuecomment-1910891166\n\nWe haven\u0027t proven that out to make sure it works. There\u0027s at least one odd consequence of that, which is that if you put it in the middle of a chain, then whatever struct comes next needs to be passed as a non-const pointer. I think this will be fine though.",
      "parentUuid": "97a82ce6_0148332f",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fce32a2_ce2eb383",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-06T22:07:06Z",
      "side": 1,
      "message": "Note that Colin\u0027s thing is slightly different from the limits because in this case, the const chain that we\u0027re putting in the output is not actually part of the chian. It a member of an out chained struct instead.\n\nIt looks like:\n```c\ntypedef struct WGPUSharedTextureMemoryVkProperties {\n  WGPUChainedStructOut chain;\n  // use this info to make a ycbcr texture view\n  const WGPUYCbCrVkDescriptor ycbcrDescriptor;\n} WGPUSharedTextureMemoryVkProperties;\n\n// Usage:\n\nWGPUSharedTextureMemoryVkProperties vkProperties;\nWGPUSharedTextureMemoryProperties properties;\nproperties.chain.next \u003d \u0026vkProperties.chain;\n\nstm.GetPropreties(\u0026properties);\n\nt \u003d stm.CreateTexture();\nv \u003d t.CreateView(\u0026vkProperties.ycbcrDescriptor);\n```\nIt is not:\n```c\nWGPUYCbCrVkDescriptor ycbcrDescriptor;\nWGPUSharedTextureMemoryVkProperties vkProperties;\nWGPUSharedTextureMemoryProperties properties;\nvkProperties.chain.next \u003d \u0026ycbcrDescriptor.chain;\nproperties.chain.next \u003d \u0026vkProperties.chain;\n```\n\nWith the current code, the const-ness of `ycbcrDescriptor`\u0027s chain (ycbcrDescriptor.chain.next is const) is not a problem if you have more shared texture memory properties you want to chain onto `vkProperties`.\n\n\nSo I think... what Colin has is fine! Especially since we would like to remove the repetitive pattern that Kai describes with the limits.\n\nOne thing we should probably document, Colin, is that some of the info in the output descriptor is *required*, and some of it is *suggested*. IMO it would be unescessary to make a new struct with new names just to denote this distinction, and that documentation is sufficient, but open to other opinions.",
      "parentUuid": "e558ef92_52b3c5eb",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eecd9b7a_562f4994",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-05-06T23:24:36Z",
      "side": 1,
      "message": "Oh right, I noticed that and then forgot about it while looking for that github issue.\n\nIn that case yeah, this is probably good (better than introducing another copy of the GPULimits pattern we\u0027re trying to get rid of).\n\nI would say add a DAWN_CHECK or validation error that the next pointer here is always nullptr and maybe a test for it.",
      "parentUuid": "7fce32a2_ce2eb383",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc6b4ea_7e5c2562",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-07T12:04:55Z",
      "side": 1,
      "message": "SGTM, thanks for the discussion!",
      "parentUuid": "eecd9b7a_562f4994",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5873720_990b2003",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 1892,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-07T13:46:40Z",
      "side": 1,
      "message": "Actually, a couple questions:\n\n* Austin, where does it make sense to do that documentation?\n* Kai, when you mention \"add[ing] a DAWN_CHECK or validation error that the next pointer here is always nullptr\", by \"here\" you mean on the passed-in WGPUYCbCrVkDescriptor, correct?",
      "parentUuid": "dfc6b4ea_7e5c2562",
      "revId": "89b21fc3745f56e47d3b8141b4ff98ec07082312",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}