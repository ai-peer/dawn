{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e9fa5ac6_3100b441",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-22T22:02:51Z",
      "side": 1,
      "message": "nit: this pointer can be const",
      "range": {
        "startLine": 69,
        "startChar": 58,
        "endLine": 69,
        "endChar": 70
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f872816_7e8925a0",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "The QuerySetBase pointer in mQueryAvailabilities is not const, and we need update availability in QuerySetBase",
      "parentUuid": "e9fa5ac6_3100b441",
      "range": {
        "startLine": 69,
        "startChar": 58,
        "endLine": 69,
        "endChar": 70
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ebee909_4949e8bc",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T12:09:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8f872816_7e8925a0",
      "range": {
        "startLine": 69,
        "startChar": 58,
        "endLine": 69,
        "endChar": 70
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3006c89e_ce34b1de",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-22T15:28:36Z",
      "side": 1,
      "message": "nit: \u003d true or .set(qureyIndex)",
      "range": {
        "startLine": 79,
        "startChar": 33,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "612713bc_8a93762d",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3006c89e_ce34b1de",
      "range": {
        "startLine": 79,
        "startChar": 33,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50a50980_3dd4c715",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 4
      },
      "lineNbr": 146,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-22T22:02:51Z",
      "side": 1,
      "message": "nit: is there a reason to not always use fill_n ?",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37d1bbd7_0bb6352c",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 4
      },
      "lineNbr": 146,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-03-23T08:59:16Z",
      "side": 1,
      "message": "Just thought it\u0027s more efficient by subscripting than the iterator if there is only one index need to be updated.",
      "parentUuid": "50a50980_3dd4c715",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3792fe32_5fd10591",
        "filename": "src/dawn_native/QuerySet.cpp",
        "patchSetId": 4
      },
      "lineNbr": 146,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "Discussed with corentin, we could do on-demand query resetting in the feature implementation stage, making it correct is more import, so this change is not needed.",
      "parentUuid": "37d1bbd7_0bb6352c",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "628cf0c3_0a269ace",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 428,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-22T22:02:51Z",
      "side": 1,
      "message": "typo: iterator",
      "range": {
        "startLine": 428,
        "startChar": 31,
        "endLine": 428,
        "endChar": 40
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bd3fc6e_61da359e",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 428,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "628cf0c3_0a269ace",
      "range": {
        "startLine": 428,
        "startChar": 31,
        "endLine": 428,
        "endChar": 40
      },
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b295eed_92a78555",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 439,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-03-24T03:57:25Z",
      "side": 1,
      "message": "[1]",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93af0b62_d157567e",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 439,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T12:09:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4b295eed_92a78555",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cffaed0_2ed76144",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 501,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-22T15:28:36Z",
      "side": 1,
      "message": "We could do on-demand query resetting until we find that it is a performance problem. Once that happens we could optimize it with a mechanism similar to whatever we do for optimizing barriers. This comment is general for this file.",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b183d8f9_5d8d2534",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 501,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-03-24T07:43:10Z",
      "side": 1,
      "message": "Roughly tested the time for 1000 queries on Intel UHD 630.\nReset 100 queries in one time: ~0.01 ms\nReset 100 queries in 100 times: ~0.016 ms\nReset 1000 queries in one time: ~0.013 ms\nReset 1000 queries in 1000 times: ~0.167 ms\n\nWhen resetting a small number of queries, their time difference is not big, but when the number increases, there is almost a 10 times difference.",
      "parentUuid": "0cffaed0_2ed76144",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60ca7d4e_89662ad8",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 501,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T12:09:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b183d8f9_5d8d2534",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c99d58f_aefea4a6",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-22T15:28:36Z",
      "side": 1,
      "message": "This wouldn\u0027t work if we write the same query multiple times in the same command buffer. We should have on-demand resetting (except for render pass that can be done at the start of the render pass like is done in this patchset).",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61671f8d_4ab16d4f",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-03-23T08:59:16Z",
      "side": 1,
      "message": "Do you mean we just need to reset each query at where it\u0027s used outside the render pass?",
      "parentUuid": "4c99d58f_aefea4a6",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7d8fc9_5e84bb49",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-23T14:54:46Z",
      "side": 1,
      "message": "Somethin like that. Right now if we do:\n\n  encoder \u003d createCommandEncoder()\n  encoder.WriteTimestamp(set, 0);\n  encoder.WriteTimestamp(set, 0);\n\nI think it doesn\u0027t reset the query set between the two writes, which is invalid in Vulkan.",
      "parentUuid": "61671f8d_4ab16d4f",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4aa6e339_778db6aa",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-03-24T03:57:25Z",
      "side": 1,
      "message": "Actually it\u0027s reset at [1].",
      "parentUuid": "0b7d8fc9_5e84bb49",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b3014b7_765ef6df",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T12:09:15Z",
      "side": 1,
      "message": "Thanks for the link, and for the iteration.",
      "parentUuid": "4aa6e339_778db6aa",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd4c05ba_993ef847",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-22T15:28:36Z",
      "side": 1,
      "message": "This CL makes the Vulkan backend modify data in the frontend, which is breaking the layering of dawn_native between frontend and backend. While technically correct it will make stuff harder to maintain in the long term. Can we have a QueryAvailabilityMap in vulkan::Query to track the Vulkan-specific state? It\u0027s less optimal but better layered.",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b945cdf3_3e582f4a",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "I think we don\u0027t track an additional availability on Vulkan::QuerySet if we do on-demand query resetting. For every beginOcclusionQuery/beginPipelineStatisticsQuery/writeTimestamp, we must need to insert a reset command before it, no matter if he has been used or not, because each query must be reset before it\u0027s used or re-used.\nThe availability tracking on passes is needed by reseting all used queries on each pass together, so the tracking on render pass is enough, we can remove others including command encoder now.",
      "parentUuid": "dd4c05ba_993ef847",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "547cf152_e8ca88da",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T12:09:15Z",
      "side": 1,
      "message": "Thanks for the explanation! I thought that vkCmdResetQueryPool was disallowed if the query had not previously being started but checking the Vulkan spec, that\u0027s not the case.",
      "parentUuid": "b945cdf3_3e582f4a",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "104ed40a_904e7f58",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 411,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-22T15:28:36Z",
      "side": 1,
      "message": "ditto, same comment as for the compute pass.",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53912c3_81f0d2b6",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 411,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "104ed40a_904e7f58",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "234778c7_b4176409",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-22T15:28:36Z",
      "side": 1,
      "message": "Did you mean to start a render pass that writes to 0 and 0?\n\nThis case were both the outside and the inside of the compute pass write conflicting slots is also interesting.",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "887a7cc2_aabe4cfc",
        "filename": "src/tests/end2end/QueryTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-04-01T11:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "234778c7_b4176409",
      "revId": "f4a42a22ba7d1b94b88e9cee168868604df8891e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}