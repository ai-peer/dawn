{
  "comments": [
    {
      "key": {
        "uuid": "20549859_9f7ce3e9",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-16T23:18:49Z",
      "side": 1,
      "message": "Metal documentation says that \"The x/y rectangle of the viewport must lie entirely within the current attachment size\". This statement is the same as what it is for SetScissorRect. See https://developer.apple.com/documentation/metal/mtlrendercommandencoder/1515527-setviewport?language\u003dobjc. \n\nThe implementation of scissorRect obeys this rule and clip the scissor rect if needed (see the code below), but I didn\u0027t do that. If we have this restriction, then lots of test in ViewportTest can\u0027t pass (and they are impossible to test at all). For example, I enlarged the viewport as twice as the attachment size, I shifted the viewport to top-left or bottom-right of the attachment, making the viewport rect out of the bounds of attachment. If the viewport rect must lie inside the attachment, these tests are not allowed at all.  \n\nHowever, all tests can pass. It looks like Metal doesn\u0027t obey this rule. \n\nWDYT?",
      "range": {
        "startLine": 831,
        "startChar": 1,
        "endLine": 834,
        "endChar": 50
      },
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "717c5fbe_0ff0082e",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-17T10:57:11Z",
      "side": 1,
      "message": "Since it passes even with the Metal debug device enabled, I think it is ok to submit as is. We\u0027ll be sure to check with Apple when we write the relevant part of the spec.",
      "parentUuid": "20549859_9f7ce3e9",
      "range": {
        "startLine": 831,
        "startChar": 1,
        "endLine": 834,
        "endChar": 50
      },
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86471c6c_909ee981",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 814,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-18T01:13:19Z",
      "side": 1,
      "message": "I just realized that we can in fact set float viewports in OpenGL with glViewportIndexedf:\nhttps://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glViewportIndexed.xhtml\n\nSo I think we should do that.",
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8ea1652_8e491a1d",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 814,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-18T01:13:52Z",
      "side": 1,
      "message": "(And add a test. I think it should be pretty easy to write a very simple test for this.)",
      "parentUuid": "86471c6c_909ee981",
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8f930dc_591670ef",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 814,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-18T16:22:33Z",
      "side": 1,
      "message": "It\u0027s true, we can use glViewportIndexedf. And this API can be supported on OpenGL 4.1. The GL version required is reasonable. It is not very high. \n\nRegarding adding a test, what do you want to test? I am not very clear about it.",
      "parentUuid": "e8ea1652_8e491a1d",
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86d689a4_c9be4823",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 814,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-19T00:05:12Z",
      "side": 1,
      "message": "When I use glViewportIndexf(index, x, y, w, h) at patchset 4, a few tests failed on Windows Vulkan backend on Intel platforms. Unfortunately, I don\u0027t have that device at hand. We may take a look. \n\nWhen I use glViewport(x, y, w, h), all tests can pass. \n\nSo the failure can be either a driver bug or some emulation used under hood which uses multiple viewports (I always use viewport index 0 for glViewportIndexf).",
      "parentUuid": "d8f930dc_591670ef",
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d59c2b2a_14935756",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 814,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-19T01:44:11Z",
      "side": 1,
      "message": "The tests that failed are BCCompressedTexture tests on Intel Vulkan though, which has nothing to do with OpenGL or SetViewport. Maybe they\u0027re flaky? I saw these fail randomly once before as well.\n\nI\u0027m running another tryjob on win-dawn-rel on Patchset 4 to see.",
      "parentUuid": "86d689a4_c9be4823",
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b92a618f_70bdca30",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 815,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-07-17T14:35:23Z",
      "side": 1,
      "message": "Does this need to be reset at the beginning of a RenderPass? Otherwise, the state will persist between render passes. If it does need to be reset, let\u0027s add tests that would have caught the problem.",
      "range": {
        "startLine": 815,
        "startChar": 23,
        "endLine": 815,
        "endChar": 34
      },
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4a846b7_9c9c509c",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 815,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-18T01:03:22Z",
      "side": 1,
      "message": "Hi Austin, your concern is valid, see the newly added tests at https://dawn-review.googlesource.com/c/dawn/+/9140. Thank you.",
      "parentUuid": "b92a618f_70bdca30",
      "range": {
        "startLine": 815,
        "startChar": 23,
        "endLine": 815,
        "endChar": 34
      },
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1609650_84959fd4",
        "filename": "src/dawn_native/opengl/CommandBufferGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 815,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-19T00:05:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4a846b7_9c9c509c",
      "range": {
        "startLine": 815,
        "startChar": 23,
        "endLine": 815,
        "endChar": 34
      },
      "revId": "84adce12d64310e78b9d74b5d2628604d51e10bc",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}