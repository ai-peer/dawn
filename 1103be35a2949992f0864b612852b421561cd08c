{
  "comments": [
    {
      "key": {
        "uuid": "df387551_413a2548",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 592,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "nit: If I understand correctly, this doesn\u0027t actually have to memory for an image. It could just be some other Vulkan memory allocation. It could be used in the future to do something like \"CreateBufferWrappingVulkanBuffer\"\n\nRename to \"ImportMemory\"?",
      "range": {
        "startLine": 592,
        "startChar": 23,
        "endLine": 592,
        "endChar": 40
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02ad62c3_2aff10dd",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 610,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "Why not TextureBase::MakeError(...) ?",
      "range": {
        "startLine": 610,
        "startChar": 19,
        "endLine": 610,
        "endChar": 26
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d053efdc_5fd89068",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 618,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T00:15:34Z",
      "side": 1,
      "message": "I think this returns nullptr without producing a device error; should probably send one here.",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "471d5c88_b29d4bb9",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 630,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T00:15:34Z",
      "side": 1,
      "message": "nit: move comment into the else if so the `} else if (` isn\u0027t broken across lines.",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70c67016_b191bd88",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 644,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T00:15:34Z",
      "side": 1,
      "message": "optional: moving this block into a separate function should avoid the weird control flow that\u0027s going on here, because you\u0027ll be able to return early. And that can return MaybeError and CreateExportableSemaphore et al can return ResultOrError (I think).",
      "range": {
        "startLine": 626,
        "startChar": 0,
        "endLine": 644,
        "endChar": 9
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b9432e5_78491cc7",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 644,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "+1. To be more clear, probably something like\n\nMaybeError CreateExternalImageMemory(\n    VkSemaphore* signalSemaphore,\n    VkDeviceMemory* allocation,\n    const std::vector\u003cExternalSemaphoreHandle\u003e\u0026 waitHandles,\n    VkSemaphore** waitSemaphores) {\n  DAWN_TRY_ASSIGN(*signalSemaphore, CreateExportable...);\n  DAWN_TRY_ASSIGN(*allocation, ImportImage...);\n  for (i... waitHandles..) {\n    DAWN_TRY_ASSIGN(*waitSemaphores[i], ImportSempahore...);\n  }\n}\n\nOne question about destruction below though.",
      "parentUuid": "70c67016_b191bd88",
      "range": {
        "startLine": 626,
        "startChar": 0,
        "endLine": 644,
        "endChar": 9
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee85b8ce_1fdd3c92",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 656,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "There are failure cases where only some of these have been created. Is it okay to call destroy?",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9bfb965_7c21d38b",
        "filename": "src/dawn_native/vulkan/DeviceVk.h",
        "patchSetId": 50
      },
      "lineNbr": 87,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T00:15:34Z",
      "side": 1,
      "message": "Internally these just unpack a ResultOrError into a MaybeError+out pointer. We could just change them to return the ResultOrError directly, after a small refactor below.\n\n(Or possibly they can be removed entirely, if that\u0027s the only reason they exist.)",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 87,
        "endChar": 68
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6a4e719_6b7fd83d",
        "filename": "src/dawn_native/vulkan/DeviceVk.h",
        "patchSetId": 50
      },
      "lineNbr": 87,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "+1 to removing these.",
      "parentUuid": "f9bfb965_7c21d38b",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 87,
        "endChar": 68
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbb6d5de_0a6bec4b",
        "filename": "src/dawn_native/vulkan/ExternalHandle.h",
        "patchSetId": 50
      },
      "lineNbr": 8,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: Comment that these are file descriptors.",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 8,
        "endChar": 40
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96f4c3b8_6b0ad6de",
        "filename": "src/dawn_native/vulkan/ExternalHandle.h",
        "patchSetId": 50
      },
      "lineNbr": 8,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "comment explaining that these are file descriptors",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f3cb25_c066a5ec",
        "filename": "src/dawn_native/vulkan/ExternalHandle.h",
        "patchSetId": 50
      },
      "lineNbr": 11,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "Why void* on other platforms? Is this (going to be) used? (Add comment to explain if so)",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d60fb165_40ca27a2",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 502,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: createInfo \u003d {};",
      "range": {
        "startLine": 502,
        "startChar": 26,
        "endLine": 502,
        "endChar": 36
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "689e4cae_3b4d3cc5",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 502,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "Probably not necessary though because you set all the fields.",
      "parentUuid": "d60fb165_40ca27a2",
      "range": {
        "startLine": 502,
        "startChar": 26,
        "endLine": 502,
        "endChar": 36
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e55437d0_97abf7db",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 537,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "[1]",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77745ba2_9af0070e",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 618,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "What if it\u0027s None?",
      "range": {
        "startLine": 618,
        "startChar": 48,
        "endLine": 618,
        "endChar": 87
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ba268fb_c58d4ba8",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 649,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "Does this need to override oldLayout or newLayout? (If not, maybe a comment on why)",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06a09052_384c37b4",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 50
      },
      "lineNbr": 665,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "nit: Could have one comment for both lines: ~ \"Move required semaphores into waitSemaphores\"",
      "range": {
        "startLine": 660,
        "startChar": 0,
        "endLine": 665,
        "endChar": 34
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f36ff63a_6a313934",
        "filename": "src/dawn_native/vulkan/TextureVk.h",
        "patchSetId": 50
      },
      "lineNbr": 37,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "\"InternalOnly\" or something like that?",
      "range": {
        "startLine": 37,
        "startChar": 35,
        "endLine": 37,
        "endChar": 39
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a84363_8f282f69",
        "filename": "src/dawn_native/vulkan/VulkanBackend.cpp",
        "patchSetId": 50
      },
      "lineNbr": 65,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "This is unfortunate. Maybe we could separate the last 5 args here into a separate struct, and use it as a const\u0026 arg here, and as a member of ExternalImageDescriptorOpaqueFD?",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68fd530e_c8bac7db",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryService.h",
        "patchSetId": 50
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "nit: add copyright 2019 headers to all new files. We probably have files that are missing it, but I just realized it should be here.",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0826fbff_eccd9f22",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryService.h",
        "patchSetId": 50
      },
      "lineNbr": 3,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: whitespace",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52d2f158_e8d4b262",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryService.h",
        "patchSetId": 50
      },
      "lineNbr": 15,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: explicit Service(Device* device)",
      "range": {
        "startLine": 15,
        "startChar": 8,
        "endLine": 15,
        "endChar": 15
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "788ceee5_dd2d53e0",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 10,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: We have a DAWN_UNUSED macro",
      "range": {
        "startLine": 10,
        "startChar": 8,
        "endLine": 10,
        "endChar": 22
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a88eca7_bf8f89fd",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 10,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "Can also remove the comment",
      "parentUuid": "788ceee5_dd2d53e0",
      "range": {
        "startLine": 10,
        "startChar": 8,
        "endLine": 10,
        "endChar": 22
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54fe59ce_731638e9",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 23,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: This is only used once: Just return the error without doing the #define",
      "range": {
        "startLine": 23,
        "startChar": 15,
        "endLine": 23,
        "endChar": 25
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37683e4_773acf7e",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 8,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "Is this just about moving some of the support querying up from Supported()? Can\u0027t we trivially do this right now?",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aab2b3b_f25765ad",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 15,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "Add details on what else needs to be done here.",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82007491_d4851803",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 27,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "Validate this isn\u0027t negative? If it\u0027s validated elsewhere, add an ASSERT",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7daea109_197b6227",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreService.h",
        "patchSetId": 50
      },
      "lineNbr": 3,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: add whitespace",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f663e031_61f95508",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreService.h",
        "patchSetId": 50
      },
      "lineNbr": 15,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: explicit Service(Device* device)",
      "range": {
        "startLine": 15,
        "startChar": 8,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e37f6d5_cfe0c59f",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 4,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "I\u0027d rather not do this :/",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 18
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24bdb45e_5f247d6e",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 4,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "Seems ok to me to have 3 copies of this line.",
      "parentUuid": "8e37f6d5_cfe0c59f",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 18
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45b1bc9e_431bcdae",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 10,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: DAWN_UNUSED",
      "range": {
        "startLine": 10,
        "startChar": 8,
        "endLine": 10,
        "endChar": 22
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0018516f_ee4ccc20",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceNull.cpp",
        "patchSetId": 50
      },
      "lineNbr": 14,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: ~Service() \u003d default;",
      "range": {
        "startLine": 13,
        "startChar": 24,
        "endLine": 14,
        "endChar": 5
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eb2904c_ecc655d4",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 8,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "same",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2d5a0e7_7230434f",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 12,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "nit: ~Service() \u003d default;",
      "range": {
        "startLine": 11,
        "startChar": 24,
        "endLine": 12,
        "endChar": 5
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f8a8de_f3f62f68",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 15,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "same",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21115427_1e9cad96",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 37,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "ditto: Validate the file descriptor or ASSERT not negative",
      "range": {
        "startLine": 37,
        "startChar": 8,
        "endLine": 37,
        "endChar": 9
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe5fe6e4_a6ecfa6a",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 45,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "I think this could be `return status.AcquireError()`, which makes it clearer that this will definitely return.",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c7b8cb_c987edb7",
        "filename": "src/dawn_native/vulkan/external_semaphore/SemaphoreServiceOpaqueFD.cpp",
        "patchSetId": 50
      },
      "lineNbr": 84,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-08-08T01:32:54Z",
      "side": 1,
      "message": "I think it would be safe to ASSERT(fd \u003e\u003d 0) or ASSERT(fd \u003e 2) instead; shouldn\u0027t vkGetSemaphoreFdKHR always give us a valid fd if it succeeds?",
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1428bc29_d1874f89",
        "filename": "src/include/dawn_native/VulkanBackend.h",
        "patchSetId": 50
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T00:28:14Z",
      "side": 1,
      "message": "#ifdef DAWN_PLATFORM_LINUX ?",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 49,
        "endChar": 99
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a566b017_16dc322a",
        "filename": "src/tests/white_box/VulkanImageWrappingTests.cpp",
        "patchSetId": 50
      },
      "lineNbr": 210,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-08T16:54:14Z",
      "side": 1,
      "message": "I\u0027m guessing if these don\u0027t match the imported image, Vulkan will fail somewhere around [1]. Is there a way to validate and test this behavior?\n\nAt the very least, \"The size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image must be less than or equal to the size of memory minus memoryOffset\" would be a problem.\nhttps://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkBindImageMemory.html\n\nI think we should at least be able to check that the exported memory allocation is big enough for the texture.",
      "range": {
        "startLine": 208,
        "startChar": 8,
        "endLine": 210,
        "endChar": 42
      },
      "revId": "1103be35a2949992f0864b612852b421561cd08c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}