{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a9945207_fe5ceffe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-13T09:46:19Z",
      "side": 1,
      "message": "I\u0027ll find a linux machine to fix the compile issue.\nPls take a look for the overall ideal. Thanks!",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0a28556_76626bbc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-13T14:26:22Z",
      "side": 1,
      "message": "overall seems ok",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1382db05_285950dd",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-13T14:26:22Z",
      "side": 1,
      "message": "nit: capitalize \"Trace\"",
      "range": {
        "startLine": 43,
        "startChar": 17,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "876a63dd_2ccba9e3",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T06:57:31Z",
      "side": 1,
      "message": "Done. Abandon this trivial API.",
      "parentUuid": "1382db05_285950dd",
      "range": {
        "startLine": 43,
        "startChar": 17,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8933fac_af19a806",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-13T14:26:22Z",
      "side": 1,
      "message": "maybe instead we can use TRACE_EVENT_ASYNC_BEGIN/END to mark the entire range where the device is busy. So we would emit BEGIN on state transition from idle-\u003ebusy, and emit END on state transition from busy-\u003eidle. That might be easier to see than multiple individual events for isDeviceIdle",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f5ca289_1531fc1e",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T00:42:16Z",
      "side": 1,
      "message": "That\u0027s great! Let me try this.",
      "parentUuid": "b8933fac_af19a806",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8548fce_adb10217",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T06:57:31Z",
      "side": 1,
      "message": "in IsDeviceIdle(), dawn compares mCompletedSerial with std::max(mLastSubmittedSerial, mFutureSerial). If they\u0027re equal, the device state is marked as Idle(And without any pending AsyncTask ).\nBut the mCompltedSerial, mLastSubmittedSerial and mFutureSerial are updated in the Tick() call.\nSo I think this line is the place where dawn could know whether device is idle and TRACE_EVENT_ASYNC_BEGIN/END might help with asyncTask but not that useful for tracing the serial update.",
      "parentUuid": "7f5ca289_1531fc1e",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3742f31a_ba15006e",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-15T15:30:17Z",
      "side": 1,
      "message": "ok, sounds fine. we can always add it in the future if it\u0027s valuable.",
      "parentUuid": "d8548fce_adb10217",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c08744f7_81e1e759",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-13T14:26:22Z",
      "side": 1,
      "message": "why not just put trace inside Finish for whatever tasks we\u0027re interested in tracing? It doesn\u0027t seem like it needs to be a new virtual method.",
      "range": {
        "startLine": 261,
        "startChar": 12,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1578605f_9b94b1fd",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T00:42:16Z",
      "side": 1,
      "message": "My concern comes from that Finish() doesn\u0027t need the platform object to work. It is only for tracing. So I hesitate to add this in Finish() parameter list.",
      "parentUuid": "c08744f7_81e1e759",
      "range": {
        "startLine": 261,
        "startChar": 12,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47451588_7d6349a3",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T06:57:31Z",
      "side": 1,
      "message": "Remove the extra Trace() and expand Finish parameter list. Done.",
      "parentUuid": "1578605f_9b94b1fd",
      "range": {
        "startLine": 261,
        "startChar": 12,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58e0a521_1612dbe3",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-13T14:26:22Z",
      "side": 1,
      "message": "did you measure a performance regression without adding this toggle? Trace events already are supposed to include a check about whether or not tracing is enabled. We shouldn\u0027t add this Toggle unless we need to.\nHowever, the current check is a virtual call, but I would be surprised if it were very very slow.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/include/dawn/platform/DawnPlatform.h;l\u003d87;drc\u003d4b03575fc3a5f7e1fd5cde04d33c204572fd9c29;bpv\u003d1;bpt\u003d1",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4b81728_add63fc9",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T00:42:16Z",
      "side": 1,
      "message": "Good point. I\u0027ll do the compare on my sample to see whether there is some perf diff.",
      "parentUuid": "58e0a521_1612dbe3",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27054744_ab0011ff",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-14T06:57:31Z",
      "side": 1,
      "message": "Yes, only choose gpu.dawn in chrome://tracing record will trigger these traces. So adding them don\u0027t affect the performance.\nAnd I also checked that running chrome://tracing w/wo these additional traces doesn\u0027t affect the trace result a lot.\nSo I agree we don\u0027t need this toggle.\nIn future, if we have traces that might affect chrome://tracing result in perf, we could seperate them in gpu.dawn.debug(I think.)",
      "parentUuid": "a4b81728_add63fc9",
      "revId": "f7f7fef626a172cb181105700089fdbe18117cf7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}