{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8dce2a01_79d32561",
        "filename": "src/dawn/tests/DawnTest.cpp",
        "patchSetId": 47
      },
      "lineNbr": 1171,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-06T10:01:11Z",
      "side": 1,
      "message": "I happened to run into https://awesomekling.github.io/MutexProtected-A-C++-Pattern-for-Easier-Concurrency/ today that describes something similar to Rust\u0027s Mutex but in C++. It might be worth having this and it would make sure we don\u0027t forget to lock mDeferredExpectations.\n\nNote that it could be a followup",
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e624429_d8d4d6cf",
        "filename": "src/dawn/tests/DawnTest.h",
        "patchSetId": 47
      },
      "lineNbr": 657,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "can we use our own Mutex and Autolock?\n\nThat way when we add Clang thread safety analysis to them, we\u0027ll get the value in the test harness as well.",
      "range": {
        "startLine": 657,
        "startChar": 0,
        "endLine": 657,
        "endChar": 22
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0bf25a1_889ff9d4",
        "filename": "src/dawn/tests/DawnTest.h",
        "patchSetId": 47
      },
      "lineNbr": 657,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e624429_d8d4d6cf",
      "range": {
        "startLine": 657,
        "startChar": 0,
        "endLine": 657,
        "endChar": 22
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb9d1f6_d70bc00f",
        "filename": "src/dawn/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-06T10:01:11Z",
      "side": 1,
      "message": "Why these tests in particular are checked with ImplicitDeviceSynchronization?\n\nAlso maybe it would be worth having a new run of the Dawn end2end tests on CI that run with the implicit synchronization on, similarly to how we have them run with the wire. (it would avoid the need to special case each test that we want to run with implicit sync)",
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdb0a802_308e74d2",
        "filename": "src/dawn/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 29,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T11:06:17Z",
      "side": 1,
      "message": "Done. Created another CL to enable implicit sync via command line, in preparing for a CI config. https://dawn-review.googlesource.com/c/dawn/+/126580",
      "parentUuid": "1cb9d1f6_d70bc00f",
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa3886f4_61a0a92c",
        "filename": "src/dawn/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 29,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done. No longer checking these tests specifically with ImplicitDeviceSynchronization.",
      "parentUuid": "bdb0a802_308e74d2",
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c6396e0_e8436bad",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-04-06T10:01:11Z",
      "side": 1,
      "message": "I skipped reviewing this file for now",
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d837c0f3_080b9132",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 68,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "return a reference instead of a value?",
      "range": {
        "startLine": 68,
        "startChar": 4,
        "endLine": 68,
        "endChar": 5
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcf68bb3_5b2b65ba",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 68,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done. Removed `GuardedObject`.",
      "parentUuid": "d837c0f3_080b9132",
      "range": {
        "startLine": 68,
        "startChar": 4,
        "endLine": 68,
        "endChar": 5
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb2a0f89_f60d7a96",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 126,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "what about dropping the last ref to the device inside a callback?",
      "range": {
        "startLine": 126,
        "startChar": 25,
        "endLine": 126,
        "endChar": 54
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b280d987_4a8e716d",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 126,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done. Added a 2nd test for this.",
      "parentUuid": "fb2a0f89_f60d7a96",
      "range": {
        "startLine": 126,
        "startChar": 25,
        "endLine": 126,
        "endChar": 54
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14e464ab_6b1f0c73",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "is the randomly choosing which thread drops the last ref for this test / does it test something novel in the implementation? I\u0027m wondering whether it would be better to have something that is more deterministic. If the test starts failing due to a regression, it would be better to have it be consistent rather than flaky",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 67
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23ae0b4b_ab16f74b",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 137,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T10:01:35Z",
      "side": 1,
      "message": "AFAIK, `std::mt19937` default ctor uses a fixed seed value. So this randomness is already deterministic, i.e. you can get the same values every time.",
      "parentUuid": "14e464ab_6b1f0c73",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 67
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63e28a23_213823b8",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 163,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "what is the error scope for?",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 163,
        "endChar": 12
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58c60150_2bee30c3",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 163,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T10:01:35Z",
      "side": 1,
      "message": "Just trying to use the device before dropping it. Push \u0026 pop error scope are easy to use. Unlike most other methods requiring creating additional resources.",
      "parentUuid": "63e28a23_213823b8",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 163,
        "endChar": 12
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "459fea14_ca72259c",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 300,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "same question - must this be guarded? Each thread writes a separate index. Then the pipelines are all verified after the threads join",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e60a3f46_699f09bf",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 300,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T13:33:34Z",
      "side": 1,
      "message": "Same as above, `WaitAbit` will flush the pending callbacks of any device on any thread, i.e. the pipeline could be written on another thread different from the one that does that wait.",
      "parentUuid": "459fea14_ca72259c",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e130936c_6c3fa862",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 300,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T13:38:40Z",
      "side": 1,
      "message": "edit: ack, I think I misread the comment.",
      "parentUuid": "e60a3f46_699f09bf",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09d8c107_bee3e8b4",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 300,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e130936c_6c3fa862",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fc60718_16b31a29",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 432,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "can we use `utils::RequiredBytesInCopy` ?",
      "range": {
        "startLine": 428,
        "startChar": 4,
        "endLine": 432,
        "endChar": 5
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc939503_2b50a67d",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 432,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "6fc60718_16b31a29",
      "range": {
        "startLine": 428,
        "startChar": 4,
        "endLine": 432,
        "endChar": 5
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17578833_243298d3",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 515,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "I don\u0027t think this case is ever used? we can instead use EXPECT_TEXTURE_EQ directly in the tests",
      "range": {
        "startLine": 512,
        "startChar": 20,
        "endLine": 515,
        "endChar": 30
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8361da09_0cf463e7",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 515,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17578833_243298d3",
      "range": {
        "startLine": 512,
        "startChar": 20,
        "endLine": 515,
        "endChar": 30
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba6273ba_c4a4b1ed",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 518,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "we have UNREACHABLE() macro",
      "range": {
        "startLine": 517,
        "startChar": 24,
        "endLine": 518,
        "endChar": 32
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14c5733b_ed51e6a4",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 518,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done. Removed.",
      "parentUuid": "ba6273ba_c4a4b1ed",
      "range": {
        "startLine": 517,
        "startChar": 24,
        "endLine": 518,
        "endChar": 32
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "780f2eac_cabb13bd",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 617,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "can we hoist CreateBuffer out? then we don\u0027t need to have GuardedBuffer",
      "range": {
        "startLine": 615,
        "startChar": 8,
        "endLine": 617,
        "endChar": 69
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49e6b65b_05724c0b",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 617,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T15:01:45Z",
      "side": 1,
      "message": "Now I have checked again, there is no need to guard even if we create buffer on this thread. Because the copy thread will wait for \"buffer written\" conditional variable to signal first before proceeding.",
      "parentUuid": "780f2eac_cabb13bd",
      "range": {
        "startLine": 615,
        "startChar": 8,
        "endLine": 617,
        "endChar": 69
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab32d698_dc6289cf",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 617,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done. no need for guarding.",
      "parentUuid": "49e6b65b_05724c0b",
      "range": {
        "startLine": 615,
        "startChar": 8,
        "endLine": 617,
        "endChar": 69
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed0516f9_67274bea",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 786,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "Why must these be GuardedTexture?\n\nSeems like it would be sufficient to break `CreateAndWriteTexture` in half so you only race writeTexture and copyTextureToTexture",
      "range": {
        "startLine": 786,
        "startChar": 0,
        "endLine": 786,
        "endChar": 30
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8f0b03_fa76903a",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 786,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-06T15:01:45Z",
      "side": 1,
      "message": "Actually, after looking at again, I don\u0027t think we need to guard even if the texture is created here because there is already a conditional variable wait in the copy thread.",
      "parentUuid": "ed0516f9_67274bea",
      "range": {
        "startLine": 786,
        "startChar": 0,
        "endLine": 786,
        "endChar": 30
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4d55d44_7b60399c",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 786,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done. No need for guarding.",
      "parentUuid": "4d8f0b03_fa76903a",
      "range": {
        "startLine": 786,
        "startChar": 0,
        "endLine": 786,
        "endChar": 30
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19928eb5_654f9358",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 888,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-04-05T21:10:35Z",
      "side": 1,
      "message": "why this versus push/pop error scope?\n\nOverwriting the uncaptured error callback will change the test fixture\u0027s default error callback - which checks that no errors happen.",
      "range": {
        "startLine": 880,
        "startChar": 0,
        "endLine": 888,
        "endChar": 26
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa548ff9_c9542f3d",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 47
      },
      "lineNbr": 888,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-04-10T07:31:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19928eb5_654f9358",
      "range": {
        "startLine": 880,
        "startChar": 0,
        "endLine": 888,
        "endChar": 26
      },
      "revId": "d925c1dd86b3d970d88118ad5afbeb831994bc1f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}