{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f1dc2dc5_148b450f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-05T23:00:15Z",
      "side": 1,
      "message": "Dawn uses FXC with shader model 5.1, so it\u0027s possible to enable `useBindingsAsRegisters \u003d true` unconditionally.\n\nI\u0027m unsure if it\u0027s better to avoid the branching and just do the above or to keep the option to compact registers available (if we want to target sm50 and avoid the max slot count, it\u0027s possible to compact the register space even further--by splitting up non-samplers registers into cbv, uav, and srv registers seperately). If the latter, I\u0027d like to add some whitebox tests for both settings.",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "252b4e9b_83e1eabe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-05T23:15:28Z",
      "side": 1,
      "message": "This change is needed because dawn\u0027s d3d12 backend currently allows register overlap between samplers and non-samplers.\n\ne.g. the following:\n\n    [[group(0), binding(0)]] var sampler0 : sampler;\n    [[group(0), binding(1)]] var texture0 : texture_2d\u003cf32\u003e;\n\nwould result in the HLSL registers `s0` and `t0`, which unfortunately SPIR-V cannot represent. This change will preserve the binding numbers and result in `s0` and `t1` in the output DXIL.\n\nAgain, thanks for your time!",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "039c15c9_15c3840d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-06T00:54:57Z",
      "side": 1,
      "message": "I\u0027m not very familiar, but lgtm I think",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c506d595_7dd908f0",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-06T00:54:57Z",
      "side": 1,
      "message": "decriptor -\u003e descriptor",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80e99b83_11aaaba4",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-06T22:10:56Z",
      "side": 1,
      "message": "Good catch, thanks",
      "parentUuid": "c506d595_7dd908f0",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc32fea9_3b8b6a15",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-06T00:54:57Z",
      "side": 1,
      "message": "This subtraction seems like it may overflow. That\u0027s probably fine, but also I think this would be a little clearer:\n\n previous-\u003eBaseShaderRegister + previous-\u003eNumDescriptors \u003d\u003d current-\u003eBaseShaderRegister",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d251650_cdb222a6",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-06T22:10:56Z",
      "side": 1,
      "message": "Good catch. I think my code assumes that the base registers are monotomically increasing with the range index, but that may not be always true.\n\nYour version is also easier to read, for sure.",
      "parentUuid": "fc32fea9_3b8b6a15",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b39d54a8_2e3a4be1",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-06T00:54:57Z",
      "side": 1,
      "message": "nit: I think dawn uses the kRegisterSpacePlaceholder style for constants",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d4d1250_5b436473",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-06T22:10:56Z",
      "side": 1,
      "message": "Sounds good. It also looks like dawn prefers `static constexpr` instead of just `const`, so I will use that as well.",
      "parentUuid": "b39d54a8_2e3a4be1",
      "revId": "77e97a2e79a787b0088b62d412a2127e64a3cb03",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}