{
  "comments": [
    {
      "key": {
        "uuid": "b7d5f59e_9e2f7f49",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 14
      },
      "lineNbr": 423,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-03-27T19:40:00Z",
      "side": 1,
      "message": "I thought we agreed in a previous iteration that mState should be set to \u0027Destroyed\u0027 even for OwnedExternal textures as well. If so, that means mState should be set to \u0027Destroyed\u0027 unconditionally and we should only call DestroyImpl if the state is `OwnedInternal`.",
      "range": {
        "startLine": 423,
        "startChar": 12,
        "endLine": 423,
        "endChar": 45
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9523364d_8ecc30f6",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 14
      },
      "lineNbr": 423,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-03-27T20:13:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7d5f59e_9e2f7f49",
      "range": {
        "startLine": 423,
        "startChar": 12,
        "endLine": 423,
        "endChar": 45
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55ecaa96_6d473e4f",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 14
      },
      "lineNbr": 423,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-03-27T20:35:36Z",
      "side": 1,
      "message": "Good point, this simplifies things. (I think it\u0027s also more correct since destroyed swapchain textures now can\u0027t be used.)",
      "parentUuid": "9523364d_8ecc30f6",
      "range": {
        "startLine": 423,
        "startChar": 12,
        "endLine": 423,
        "endChar": 45
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "807767f6_47ffd625",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 14
      },
      "lineNbr": 49,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-03-27T19:40:00Z",
      "side": 1,
      "message": "According to the Google C++ style guide, enum values should be prefaced with the letter k and each be on their own line. \n\n@Kai and @Corentin, should we follow this style for enums?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5e30a28_00f77c9a",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 14
      },
      "lineNbr": 49,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-03-27T20:35:36Z",
      "side": 1,
      "message": "Hm, I suppose we should. However, the rest of the enum classes in Dawn do not use the k prefix, so let\u0027s leave it out for now for consistency.\nhttps://cs.chromium.org/search/?q\u003df:third_party/dawn+-f:gen+%22enum+class%22\u0026sq\u003dpackage:chromium\u0026type\u003dcs",
      "parentUuid": "807767f6_47ffd625",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9be5db8f_e276f59f",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 14
      },
      "lineNbr": 49,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-03-27T20:52:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5e30a28_00f77c9a",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b6f926c_29030882",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-03-27T18:37:51Z",
      "side": 1,
      "message": "nit: probably could also be \u003d\u003d OwnedInternal?",
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a2b13c6_317499cf",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-03-27T19:40:00Z",
      "side": 1,
      "message": "I see a pattern where several functions check \"GetTextureState() !\u003d TextureState::OwnedExternal\".  In many places, the same check is performed both in the caller and callee.\n\nTo have better separation of concerns, we should have TextureBase::Destroy be soley responsible for checking the texture state and calling DestroyImpl if the state is not \u0027OwnedExternal\u0027.  The DestroyImpl overrides should always destroy the resource unconditionally if the underlying native pointer is not \"null\".\n\nThe destructor for each backend should call TextureBase::Destroy unconditionally, not DestroyImpl. This leaves DestroyImpl\u0027s only caller being TextureBase::Destroy. \n\nI think this will make the code more readable and the ownership clearer.",
      "range": {
        "startLine": 150,
        "startChar": 8,
        "endLine": 150,
        "endChar": 60
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78a6099a_c5133230",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-03-27T20:13:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a2b13c6_317499cf",
      "range": {
        "startLine": 150,
        "startChar": 8,
        "endLine": 150,
        "endChar": 60
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "182e1347_16f2e73e",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-03-27T20:35:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b6f926c_29030882",
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ffd03a9_fd8b2d79",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 14
      },
      "lineNbr": 163,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-03-27T19:40:00Z",
      "side": 1,
      "message": "I think this comment can now be deleted since you fixed it.",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 163,
        "endChar": 24
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bfe2b32_d4eb9003",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 14
      },
      "lineNbr": 163,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-03-27T20:13:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ffd03a9_fd8b2d79",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 163,
        "endChar": 24
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "076d22ac_eaafc1e1",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 253,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-03-27T19:40:00Z",
      "side": 1,
      "message": "What is the rationale for defining two descriptors when you only pass one to CreateTextureView?",
      "range": {
        "startLine": 249,
        "startChar": 0,
        "endLine": 253,
        "endChar": 1
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a654b2d_dbd0af57",
        "filename": "src/tests/unittests/validation/TextureViewValidationTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 253,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-03-27T20:13:03Z",
      "side": 1,
      "message": "oops, his was just copied from a previous test, I can shorten this.",
      "parentUuid": "076d22ac_eaafc1e1",
      "range": {
        "startLine": 249,
        "startChar": 0,
        "endLine": 253,
        "endChar": 1
      },
      "revId": "e3aa8048cc0ba843e3185a6074b57096f998ba0b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}