{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d1e95aa6_5f149bd0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T10:30:18Z",
      "side": 1,
      "message": "Adding Tint folks, right now this does redundant module parsing in the D3D12 backend, is that ok for now until we move to using Tint to ingest SPIR-V in the frontend?\n\nLGTM",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "094f29a5_78420274",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-03T16:55:28Z",
      "side": 1,
      "message": "Looks good overall. Also, seems weird that we must redundantly parse (esp. when off by default). Maybe Ryan knows if it\u0027s safe to disable?",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498a6706_e923ef56",
        "filename": "src/dawn_native/Toggles.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-03T17:51:53Z",
      "side": 1,
      "message": "Is the plan to have a toggle per backend? Or, should this just be a UseTintGenerators instead of making it HLSL specific?",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2df6d623_705712a6",
        "filename": "src/dawn_native/Toggles.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T18:07:11Z",
      "side": 1,
      "message": "Either way would work. If it\u0027s per-backend then it the defaulting of the toggle would need to be per backend too.",
      "parentUuid": "498a6706_e923ef56",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c072c9d_dc22ae45",
        "filename": "src/dawn_native/Toggles.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Moved to a common toggle.",
      "parentUuid": "2df6d623_705712a6",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88afbac1_b24fc12d",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-03T16:55:28Z",
      "side": 1,
      "message": "uunit: relocate near |entryPoint|?",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e717c45_8a705c93",
        "filename": "src/dawn_native/d3d12/RenderPipelineD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88afbac1_b24fc12d",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec8869cf_3f675f18",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T10:30:18Z",
      "side": 1,
      "message": "nit: Can we split TranslateToHLSL into two functions: TranslateToHLSLWithTint and TranslateToHLSLWithSPIRVCross? I was going to suggest that the SPIRV-Cross stuff should be in an else clause, but that\u0027s already a lot of code in a single function so I think we can split it. (especially since the Tint side will grow over time.)",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ffe4540_56c26fd6",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-03T16:55:28Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ec8869cf_3f675f18",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73d56a25_15c6a705",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ffe4540_56c26fd6",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6d8304e_fc43d27b",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-03T17:51:53Z",
      "side": 1,
      "message": "This also needs to run the tint::Validator to validate the WGSL module (and probably the transform to do bounding of array accesses as well)",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c83615c_d7a760e8",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6d8304e_fc43d27b",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa405b34_693354ca",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T10:30:18Z",
      "side": 1,
      "message": "nit: Stray include done by VisualStudio\u0027s \"automatic declaration\" quick fix.",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06ea2009_d02963c8",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa405b34_693354ca",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22f24c6b_50106a0f",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 632,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T10:30:18Z",
      "side": 1,
      "message": "Mmmh the terminology should be \"toggle\" instead of workaround. In this CL we can fix just the name of this function but we should rename the concept throughout DawnTest later.",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e80f69d3_b7f67081",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 632,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22f24c6b_50106a0f",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f193e57_7eefd3ce",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 634,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T10:30:18Z",
      "side": 1,
      "message": "This compares the pointer values, which happens to work because the linker does string deduplication so two static strings that are the same get the same value. But please use std::string comparison or strcmp() \u003d\u003d 0.",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbdc343c_686753fe",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 634,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f193e57_7eefd3ce",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d60725f_a70091d3",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T17:02:10Z",
      "side": 1,
      "message": "Oh maybe it shouldn\u0027t support it, I don\u0027t remember what we decided in the WGSL group. Dan do you remember?",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4282210c_d7436539",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-03T17:51:53Z",
      "side": 1,
      "message": "You can\u0027t have multiple entry points with the same name in WGSL anymore. They all have to be unique.",
      "parentUuid": "6d60725f_a70091d3",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "300e596a_131ddb7c",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Done, we should probably make it fail during validation.",
      "parentUuid": "4282210c_d7436539",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc11d82_a9068af4",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-03T16:55:28Z",
      "side": 1,
      "message": "unit: maybe `IsD3D12() \u0026\u0026 UseTint()` toggle is more fitting?",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ddaecba_7ab6f79e",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T17:02:10Z",
      "side": 1,
      "message": "I don\u0027t think we have a UseTint() yet. The problem is that there isn\u0027t a single boolean that says to use Tint for the whole frontent-backend combination and it\u0027s specifically failing in the backend. (but maybe we can just rename the entrypoints if WGSL spec disallows conflicts.)",
      "parentUuid": "acc11d82_a9068af4",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf453af0_0b09a5ad",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-03T17:51:53Z",
      "side": 1,
      "message": "We should rename the entrypoints as this isn\u0027t valid WGSL any more.",
      "parentUuid": "8ddaecba_7ab6f79e",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c61d2a6_9e942f05",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "Since FragAndVertexSameModule already exists, I removed the test.",
      "parentUuid": "bf453af0_0b09a5ad",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07936e1b_c40cee9c",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-04T10:02:43Z",
      "side": 1,
      "message": "Sounds good",
      "parentUuid": "5c61d2a6_9e942f05",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af57b946_5446815b",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-03T17:51:53Z",
      "side": 1,
      "message": "This one should already be fine, what is the issue causing it to be disabled?",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f82f7db9_328523e2",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000861
      },
      "writtenOn": "2020-11-04T01:15:17Z",
      "side": 1,
      "message": "It is generating 2 RWByteAddressBuffer\u0027s with the same name\n\n struct Data {\n  uint data;\n };\n\n RWByteAddressBuffer data : register(u0);\n\n RWByteAddressBuffer data : register(u0);",
      "parentUuid": "af57b946_5446815b",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ce715a6_b4913ea4",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-04T02:47:50Z",
      "side": 1,
      "message": "Can you please file this as a bug in `crbug.com/tint` with the below shader? This is a bad compilation due to the buffer begin used in both entry points.",
      "parentUuid": "f82f7db9_328523e2",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f990d68b_e4e5d2f3",
        "filename": "src/tests/end2end/EntryPointTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-04T14:09:44Z",
      "side": 1,
      "message": "I filed https://bugs.chromium.org/p/tint/issues/detail?id\u003d297 to track this issue. Can you add that in to the comment.",
      "parentUuid": "0ce715a6_b4913ea4",
      "revId": "3dcfaf355f99e446faa1bd44ba3954aff707ba8c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}