{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f08bf771_92f17090",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-27T09:02:48Z",
      "side": 1,
      "message": "Sending out for review but note that some of the unit tests are failing on Windows because I guess MSVC doesn\u0027t have `\u003cexperimental/type_traits\u003e`. Maybe I can just disable those tests on Windows for now?",
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe180e41_7a84622b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T21:43:33Z",
      "side": 1,
      "message": "mm I feel iffy about including \u003cexperimental\u003e - is there a way we can do without it?",
      "parentUuid": "f08bf771_92f17090",
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91dac445_1fa73948",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-28T00:01:27Z",
      "side": 1,
      "message": "It\u0027s only in the tests though? I wasn\u0027t able to find another way to write these tests because the point is that the failure cases do not compile. Plus according to https://stackoverflow.com/questions/36418570/what-compiler-option-library-do-i-need-to-use-detect-or-t-type-trait (which was posted in 2017?), it seems like GCC and Clang shouldn\u0027t be a problem?\n\nMy take here is that some testing is better than none.",
      "parentUuid": "fe180e41_7a84622b",
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25f8854e_0196c6bf",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T21:43:33Z",
      "side": 1,
      "message": "should it be called \"WeakRefData\" or \"WeakRefTargetData\" or something? because this class is for WeakRef, not for RefCounted\n\ncan it go in WeakRef.h?",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "527a4c7d_c68f2541",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-28T00:01:27Z",
      "side": 1,
      "message": "I am unable to put it in `WeakRef.h` because of circular deps on `Ref` and `AcquireRef` in the implementation of `TryGetRef` below. I agree the naming is sort of confusing, but I was worried that having something named `WeakRef*` in here would also be more confusing.",
      "parentUuid": "25f8854e_0196c6bf",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "943c553d_e56c7432",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-28T13:17:58Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the circular dependency, WeakRef.h includes Ref.h so it should have access to Ref and AcquireRef?\n\n+1 for WeakRef in the name, `WeakRefData/Proxy`?",
      "parentUuid": "527a4c7d_c68f2541",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c4c661_77c1758f",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-28T15:13:38Z",
      "side": 1,
      "message": "\"RefCountedDataForWeakRef\" ? \n\nthis name no one really needs to type outside the implementation of the class, so it could be longer and more descriptive",
      "parentUuid": "527a4c7d_c68f2541",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20a5c51a_1f6427b4",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T21:43:33Z",
      "side": 1,
      "message": "not sure but idea -\n\ndo we need detail::WeakRefCountedBase?\n\nmaybe, we could have\n\n`WeakRef\u003cT\u003e WeakRefCounted\u003cT\u003e::GetWeakRef()`\n\nthen, I think we don\u0027t need the is_base_of check here, and you could do both:\n```\n// if T inherits WeakRefCounted\u003cT\u003e\nT* bar \u003d ...;\nWeakRef\u003cT\u003e weak_bar \u003d bar-\u003eGetWeakRef();\n\n// via Ref\u003cT\u003e::operator-\u003e returning T*\nRef\u003cT\u003e foo \u003d ...;\nWeakRef\u003cT\u003e weak_foo \u003d foo-\u003eGetWeakRef();\n```",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 77,
        "endChar": 5
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e329191a_6672abf8",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-28T00:01:27Z",
      "side": 1,
      "message": "The problem with putting `GetWeakRef()` on `WeakRefCounted` is that depending on when `WeakRefCounted` is extended from, you will never be able to get a type that is further down the hierarchy. Example:\n\n```\nclass BindGroupLayoutBase : public WeakRefCounted\u003cBindGroupLayoutBase\u003e {}\n\nclass BindGroupLayoutVk : public BindGroupLayoutBase {}\n\nBindGroupLayoutVk* x \u003d ...;\nRef\u003cBindGroupLayoutVk\u003e xRef \u003d AcquireRef(x);\n\n// These both will not work because you are implicitly trying to downcast:\nWeakRef\u003cBindGroupLayoutVk\u003e weakref \u003d x-\u003eGetWeakRef();\nWeakRef\u003cBindGroupLayoutVk\u003e weakref \u003d xRef-\u003eGetWeakRef();\n\n// Only this will work:\nWeakRef\u003cBindGroupLayoutBase\u003e weakref \u003d x-\u003eGetWeakRef();\n```\n\nWhile this isn\u0027t necessarily problematic w.r.t the cache, I feel like it isn\u0027t ergonomic to use. Intuitively you should be able to get a WeakRef of the type anywhere in the hierarchy as long as you are only upcasting. In order to fix this, you could go into all lowest types `D` and extend `WeakRefCounted\u003cD\u003e` on them, but that also feels very limiting and clunky to use.",
      "parentUuid": "20a5c51a_1f6427b4",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 77,
        "endChar": 5
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e1d894c_e989024d",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-28T15:13:38Z",
      "side": 1,
      "message": "don\u0027t the constructors you\u0027ve made at [1] allow you to construct a derived WeakRef from the base one?",
      "parentUuid": "e329191a_6672abf8",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 77,
        "endChar": 5
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4709ac7_da089c46",
        "filename": "src/dawn/common/Ref.h",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-06-28T18:37:08Z",
      "side": 1,
      "message": "No, those ctors allow for the upcasting, but this example would be a downcasting case, i.e. trying to cast a `WeakRef\u003cBindGroupLayoutBase\u003e` to a `WeakRef\u003cBindGroupLayoutVk\u003e`.",
      "parentUuid": "8e1d894c_e989024d",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 77,
        "endChar": 5
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e26b5434_414840b2",
        "filename": "src/dawn/common/WeakRef.h",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-28T15:13:38Z",
      "side": 1,
      "message": "nit: WeakRef",
      "range": {
        "startLine": 34,
        "startChar": 27,
        "endLine": 34,
        "endChar": 34
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d9fd8c_f560b383",
        "filename": "src/dawn/common/WeakRefCounted.cpp",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T21:43:33Z",
      "side": 1,
      "message": "it\u0027s odd that the constructor acquires the ref. It\u0027s probably better to have AcquireRef happen at the caller, and take Ref\u003c\u003e as the argument instead",
      "range": {
        "startLine": 19,
        "startChar": 77,
        "endLine": 19,
        "endChar": 93
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f003df85_c8f51a37",
        "filename": "src/dawn/common/WeakRefCounted.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T21:43:33Z",
      "side": 1,
      "message": "unit: \"WeakRefCounted\" makes it seem like it is also Refcounted which in fact it\u0027s not. Maybe we can use a different name like \"WeakRefSupport\" or \"SupportsWeakRef\" or \"WeakRefTarget\" or IDK",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "7abd92ee783c4465ef8d4d3ed40eb001d753dbc6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}