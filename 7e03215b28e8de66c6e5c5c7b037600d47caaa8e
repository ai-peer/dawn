{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "280732ef_3f984c25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-07T22:42:05Z",
      "side": 1,
      "message": "lgtm",
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59ab4357_ec24764e",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 171,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-08T06:33:09Z",
      "side": 1,
      "message": "nit: change this to just std::get which will assert internally",
      "range": {
        "startLine": 170,
        "startChar": 8,
        "endLine": 171,
        "endChar": 36
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3489f4f3_2ffe2d87",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 171,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-08T14:12:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59ab4357_ec24764e",
      "range": {
        "startLine": 170,
        "startChar": 8,
        "endLine": 171,
        "endChar": 36
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f62a2c6_b4265069",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "Do we really need the lock for all below operations?",
      "range": {
        "startLine": 182,
        "startChar": 17,
        "endLine": 182,
        "endChar": 27
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215ae653_be6fd22e",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-07T02:18:33Z",
      "side": 1,
      "message": "Per [1], I think so, but not sure. Probably, @lehoangquyen@chromium.org can help clarify this.",
      "parentUuid": "4f62a2c6_b4265069",
      "range": {
        "startLine": 182,
        "startChar": 17,
        "endLine": 182,
        "endChar": 27
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c14a084_9c4478f8",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-03-07T09:54:35Z",
      "side": 1,
      "message": "Yes, from what I can see the lambda below accesses buffer\u0027s `mState` \u0026 `FinalizeMapAsync`, device\u0027s `ConsumedError`. `mBufferOrEarlyStatus.Use` is not enough because there are some places that access the same members without `mBufferOrEarlyStatus.Use` scope. Those places use device lock so we need to use the same device lock here.\n\nAnd you are correct that this function doesn\u0027t already have any device lock held since it will invoke a callback to user\u0027s code.",
      "parentUuid": "215ae653_be6fd22e",
      "range": {
        "startLine": 182,
        "startChar": 17,
        "endLine": 182,
        "endChar": 27
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee74fc9b_abbbfdf3",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-07T22:42:05Z",
      "side": 1,
      "message": "I see. Usually, the users should have make sure the buffer is used in a thread safe way. But users are not sure which thread the `Complete()` could be called on. So we have to protect data in the `BufferBase`. And unfortunately, a global device lock is used for protecting all resources. Ideally, we should have at least one lock per resource for this purpose. But it is out of scope of this CL.",
      "parentUuid": "0c14a084_9c4478f8",
      "range": {
        "startLine": 182,
        "startChar": 17,
        "endLine": 182,
        "endChar": 27
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31070274_12376754",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "nit: move it into `FinalizeMapAsync()`?",
      "range": {
        "startLine": 197,
        "startChar": 19,
        "endLine": 197,
        "endChar": 78
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a3fed98_8ab604c8",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "FYI. I think you can use `DAWN_TRY((*buffer)-\u003eFinalizeMapAsync());` here. \nFor example:\n```\nauto error \u003d mBufferOrEarlyStatus.Use([\u0026](auto bufferOrEarlyStatus)\n    -\u003e MaybeError {\n    DAWN_TRY(...);    \n    return {}\n}; \nstd::ignore \u003d device-\u003eConsumedErrorUnlocked(std::move(error));\n```",
      "range": {
        "startLine": 198,
        "startChar": 20,
        "endLine": 198,
        "endChar": 63
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b8cb00e_c3721b68",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-07T22:42:05Z",
      "side": 1,
      "message": "Please ignore this one",
      "parentUuid": "5a3fed98_8ab604c8",
      "range": {
        "startLine": 198,
        "startChar": 20,
        "endLine": 198,
        "endChar": 63
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8624b4_00f2ec17",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "nit: move it into `FinalizeMapAsync()`?",
      "range": {
        "startLine": 202,
        "startChar": 24,
        "endLine": 202,
        "endChar": 64
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a2707b2_b6ee5a8b",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-08T06:33:09Z",
      "side": 1,
      "message": "IMO we should keep these variables here since they are for frontend state, and FinalizeMapAsync is purely a backend thing",
      "parentUuid": "4d8624b4_00f2ec17",
      "range": {
        "startLine": 202,
        "startChar": 24,
        "endLine": 202,
        "endChar": 64
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92067773_485f6ed2",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "nit: move it into `FinalizeMapAsync()`?",
      "range": {
        "startLine": 205,
        "startChar": 20,
        "endLine": 205,
        "endChar": 67
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "853c93a4_3a60379a",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 208,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "nit: It is not necessary. `ConsumedError(std::move(maybeError))` is noop, if maybeError is not an error.",
      "range": {
        "startLine": 208,
        "startChar": 16,
        "endLine": 208,
        "endChar": 36
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8903d6a7_e27f7b4f",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "nit: should we have a helper method `DeviceBase::ConsumedErrorUnlocked()` for this case?",
      "range": {
        "startLine": 210,
        "startChar": 56,
        "endLine": 210,
        "endChar": 69
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74e5e177_65115f8c",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-07T22:42:05Z",
      "side": 1,
      "message": "Please ignore this one",
      "parentUuid": "8903d6a7_e27f7b4f",
      "range": {
        "startLine": 210,
        "startChar": 56,
        "endLine": 210,
        "endChar": 69
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e256211d_3fd7cf46",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 850,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-07T02:18:33Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 848,
        "startChar": 0,
        "endLine": 850,
        "endChar": 54
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddd87ec6_68700cbe",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 852,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-06T14:58:28Z",
      "side": 1,
      "message": "It is better to only call `ConsumedError()` with the lock, but not `FinialieMapAsync()`. Maybe using a helper `DeviceBase::ConsumedErrorUnlocked()`.",
      "range": {
        "startLine": 852,
        "startChar": 39,
        "endLine": 852,
        "endChar": 55
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea3bcd56_2af6e31a",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 852,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-07T22:42:05Z",
      "side": 1,
      "message": "Please ignore this one",
      "parentUuid": "ddd87ec6_68700cbe",
      "range": {
        "startLine": 852,
        "startChar": 39,
        "endLine": 852,
        "endChar": 55
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc13e402_0b77d89c",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-08T06:33:09Z",
      "side": 1,
      "message": "what changed such that there may be no data now?",
      "range": {
        "startLine": 318,
        "startChar": 4,
        "endLine": 318,
        "endChar": 22
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c20f31ee_40ea3f24",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-08T08:52:04Z",
      "side": 1,
      "message": "Immediately un-mapping a buffer without waiting for the callback, can ran into it. Simply like this:\n```\nMapAsync(buffer, callback);\nUnmap(buffer);\n```\nIt\u0027s okay before the CL, but not now, as we postpone the `MapInternal`.",
      "parentUuid": "bc13e402_0b77d89c",
      "range": {
        "startLine": 318,
        "startChar": 4,
        "endLine": 318,
        "endChar": 22
      },
      "revId": "7e03215b28e8de66c6e5c5c7b037600d47caaa8e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}