{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c58e5d0c_96957648",
        "filename": "src/tint/ir/transform/block_decorated_structs.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:34:25Z",
      "side": 1,
      "message": "Not asking for changes with this CL.\n\nI\u0027ve seen this a pattern a bunch.\n\nPerhaps we should split `ir::Var` into two (or derive two classes off `ir::Var`), one for handle types (textures / samplers) and another for non-handle-types. \n\nThe latter can declare `type::Pointer* Type() override`, avoiding these casts everywhere.",
      "range": {
        "startLine": 49,
        "startChar": 20,
        "endLine": 49,
        "endChar": 52
      },
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d60275de_49f41bd1",
        "filename": "src/tint/ir/transform/block_decorated_structs.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T23:41:23Z",
      "side": 1,
      "message": "We discussed this in our 1:1 - textures and samplers can both be pointers in the IR, so no need to split the classes. We should change `ir::Var::Type()` to be `type::Pointer` and then clean up all these dynamic casts.",
      "parentUuid": "c58e5d0c_96957648",
      "range": {
        "startLine": 49,
        "startChar": 20,
        "endLine": 49,
        "endChar": 52
      },
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04f1b4f7_5f720fb8",
        "filename": "src/tint/ir/transform/block_decorated_structs.cc",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:56:24Z",
      "side": 1,
      "message": "In the case of `!wrapped`, would this be simpler if we could just do something like:\n\n```\nif (!wrapped) {\n  var-\u003eSetType(ir-\u003eTypes().pointer(block_struct, ptr-\u003eAddressSpace(), ptr-\u003eAccess());\n  return;\n}\n```\n\nThen, we just need to create a replacement var in the case of a wrapped struct?\n\n(Even then, we could replace the type and just update usages instead of creating a new declaration?)",
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2257fd5d_9d247e45",
        "filename": "src/tint/ir/transform/block_decorated_structs.cc",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T20:21:34Z",
      "side": 1,
      "message": "This may be simpler, but I\u0027m not sure how I feel about directly mutating the types of values. Maybe it\u0027s OK because we\u0027re going to be validating all this stuff?",
      "parentUuid": "04f1b4f7_5f720fb8",
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b81bd46c_f1889a18",
        "filename": "src/tint/ir/transform/block_decorated_structs.cc",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-06T23:39:27Z",
      "side": 1,
      "message": "The IR is mutable, so it seems like making the simplest changes we can to it is better? We\u0027ll have some validation, but also some TINT_ASSERT code as we go.\n\nI\u0027d argue that `SetType` should do something like:\n\n```\nTINT_ASSERT(IR, type !\u003d nullptr);\nTINT_ASSERT(IR, type-\u003eIs\u003cPointer\u003e || type-\u003eIs\u003cSampler\u003e || type-\u003eIs\u003cTexture\u003e);\n```\n\nso we catch the error as early as possible when we can.",
      "parentUuid": "2257fd5d_9d247e45",
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc98a22d_4172deb2",
        "filename": "src/tint/ir/transform/block_decorated_structs.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T22:56:24Z",
      "side": 1,
      "message": "What does this do?",
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21f46e20_416241ba",
        "filename": "src/tint/ir/transform/block_decorated_structs.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:34:25Z",
      "side": 1,
      "message": "[It is inheriting](https://en.cppreference.com/w/cpp/language/using_declaration#Inheriting_constructors) the `Base` (`type::Struct`) constructor.",
      "parentUuid": "cc98a22d_4172deb2",
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fdef935_50b36c69",
        "filename": "src/tint/ir/transform/block_decorated_structs.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-06T23:39:27Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "21f46e20_416241ba",
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba472f8c_6dbf8f37",
        "filename": "src/tint/ir/transform/block_decorated_structs_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-06T09:34:25Z",
      "side": 1,
      "message": "Bit of an issue we can\u0027t actually see the type here. Given that the transform is building a new type, we\u0027re not properly testing the expected value.\n\nI\u0027d like to have the structure emitted so we can confirm the test is doing the right thing.",
      "range": {
        "startLine": 64,
        "startChar": 18,
        "endLine": 64,
        "endChar": 31
      },
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f404c609_416970af",
        "filename": "src/tint/ir/transform/block_decorated_structs_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-06T20:21:34Z",
      "side": 1,
      "message": "Structures added to the disassembly in the parent change.",
      "parentUuid": "ba472f8c_6dbf8f37",
      "range": {
        "startLine": 64,
        "startChar": 18,
        "endLine": 64,
        "endChar": 31
      },
      "revId": "04aeeb8cbed12a7857ff9611836b26328d7d0337",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}