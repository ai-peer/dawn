{
  "comments": [
    {
      "key": {
        "uuid": "62af7337_9ef425f0",
        "filename": "src/common/Math.h",
        "patchSetId": 8
      },
      "lineNbr": 21,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "This include isn\u0027t used.",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260020f1_ce9a56db",
        "filename": "src/common/Math.h",
        "patchSetId": 8
      },
      "lineNbr": 21,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62af7337_9ef425f0",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b037d9a_9fc513ea",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "Let\u0027s not land commented out code.",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c032f95_e2370b4c",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Sorry for the garbage... Done.",
      "parentUuid": "9b037d9a_9fc513ea",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20c43b61_14fa288c",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "nit: this is the same as ShaderVariableType with componentCount \u003d 1.",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "908904ab_88dd6537",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Change ShaderVariableType to ShaderTypeGenerator and reuse it. Done.",
      "parentUuid": "20c43b61_14fa288c",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "466954c4_fe74d023",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 265,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "To simplify code, I think an array of 1 is valid.",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b052d11_32d45f36",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 265,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "466954c4_fe74d023",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "848d11ca_88d199a2",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "This could also be simplified with an array of 1.",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec4675ec_effbe5d7",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T08:35:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "848d11ca_88d199a2",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69de1465_79e468fa",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 278,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "This is used many times can we have a variable for it, like isInputTypeFloat?",
      "range": {
        "startLine": 278,
        "startChar": 24,
        "endLine": 278,
        "endChar": 47
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21298c94_0410e111",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 278,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T08:35:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69de1465_79e468fa",
      "range": {
        "startLine": 278,
        "startChar": 24,
        "endLine": 278,
        "endChar": 47
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a53142c2_a8c16f0a",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "nit: use std::isnan()\n\nLogic could be simplified with\n\nif ((isFloat || isNormalized) \u0026\u0026 std::isnan(expectedData...)) {\n  vs \u003c\u003c \"0.0 / 0.0\"\n} else {\n  vs \u003c\u003c std::to_string(expectedData[i * componentCount + j]) \u003c\u003c \");\\n\";\n}",
      "range": {
        "startLine": 280,
        "startChar": 28,
        "endLine": 281,
        "endChar": 64
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3ce707c_42810fe5",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 281,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "I tried isnan but failed to compile because expectedData could be integers and isnan is ambiguous, so keep the silly judgement.",
      "parentUuid": "a53142c2_a8c16f0a",
      "range": {
        "startLine": 280,
        "startChar": 28,
        "endLine": 281,
        "endChar": 64
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6928e214_965ecba0",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-16T08:18:50Z",
      "side": 1,
      "message": "Try std::isnan(static_cast\u003cfloat\u003e()) I think that should work.",
      "parentUuid": "f3ce707c_42810fe5",
      "range": {
        "startLine": 280,
        "startChar": 28,
        "endLine": 281,
        "endChar": 64
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c76665f_c658598c",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 281,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-26T01:37:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6928e214_965ecba0",
      "range": {
        "startLine": 280,
        "startChar": 28,
        "endLine": 281,
        "endChar": 64
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b029730d_dff7e129",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 315,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "ditto this could be simplified with arrays of size 1",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ee575d4_54b4b65a",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 315,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "For expectedData it is true, but for test, because the type of it maybe \"in float test\", the judgement is still needed. I use \": ?\" to make the format be more clear.",
      "parentUuid": "b029730d_dff7e129",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dcc0471_1bf50690",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 315,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-16T08:18:50Z",
      "side": 1,
      "message": "Sounds good",
      "parentUuid": "6ee575d4_54b4b65a",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79230e86_9f4703de",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 324,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "ditto",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e47d36af_e118f018",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 324,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79230e86_9f4703de",
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "019a6858_e053d3d5",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "This is a conversion so uint(1.2f) is 1. You need to use GLSL\u0027s floatBitsToUint.",
      "range": {
        "startLine": 326,
        "startChar": 35,
        "endLine": 326,
        "endChar": 39
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af9d2c27_2ff80a00",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Thank you for telling me about this.... and I suddenly realized my experiments are not correct to prove uint() is a bit transfer....",
      "parentUuid": "019a6858_e053d3d5",
      "range": {
        "startLine": 326,
        "startChar": 35,
        "endLine": 326,
        "endChar": 39
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dac5f5_1c488611",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "Unsigned integers that are \u003c 1 are exactly 0.",
      "range": {
        "startLine": 330,
        "startChar": 74,
        "endLine": 330,
        "endChar": 78
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38e959e8_e717ba15",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "I tried 4 but normalization still cannot pass, so keep 2 here temp. And I was surprised by setting 1 passed all the float realted tests....(I think they\u0027re compeletly the same in bits..)",
      "parentUuid": "e6dac5f5_1c488611",
      "range": {
        "startLine": 330,
        "startChar": 74,
        "endLine": 330,
        "endChar": 78
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de764ffa_e1a6d865",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-16T08:18:50Z",
      "side": 1,
      "message": "That would make sense because data is passed as is. What you could do to experiment know what is happening for normalized and half float would be to render the color to a float render target and EXPECT_EQ the pixel so that the failure prints the actual value.",
      "parentUuid": "38e959e8_e717ba15",
      "range": {
        "startLine": 330,
        "startChar": 74,
        "endLine": 330,
        "endChar": 78
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fff0e5f5_65b3f77f",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T08:35:47Z",
      "side": 1,
      "message": "Yes and that\u0027s exactly what I\u0027m doing :). (The comments here means that because uint() do cast so compare with 1 always right, and in that time, I was surprised by test and experiment value are same in all bits(actually they\u0027re not :-( )). I\u0027m doing experiments to see how to change normalize function and how to deal with float16 type now.",
      "parentUuid": "de764ffa_e1a6d865",
      "range": {
        "startLine": 330,
        "startChar": 74,
        "endLine": 330,
        "endChar": 78
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32827fcf_e63ef8d0",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-26T01:37:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fff0e5f5_65b3f77f",
      "range": {
        "startLine": 330,
        "startChar": 74,
        "endLine": 330,
        "endChar": 78
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35034a4b_6939e05a",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 655,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-12T11:42:40Z",
      "side": 1,
      "message": "Can we also have checks for + or - 1 and 18.23f? You could call DoVertexFormatTest twice.",
      "range": {
        "startLine": 653,
        "startChar": 0,
        "endLine": 655,
        "endChar": 74
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd4020c0_76c58431",
        "filename": "src/tests/end2end/VertexFormatTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 655,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2019-04-16T02:01:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35034a4b_6939e05a",
      "range": {
        "startLine": 653,
        "startChar": 0,
        "endLine": 655,
        "endChar": 74
      },
      "revId": "031946c53f2eb6122cd56a5eb38d3603cd2318ff",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}