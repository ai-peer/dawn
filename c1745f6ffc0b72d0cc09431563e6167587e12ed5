{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d568b968_a97a1029",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 389,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-06-04T22:35:48Z",
      "side": 1,
      "message": "I\u0027m a bit questionable about doing the copy like this. I think maybe if we can map BOTH the buffer AND the texture without waiting, then it seems reasonable to do, especially on UMA platforms.\n\nMapping waits for the GPU to complete.\nIn the general case, either the texture or the buffer will be in use. Shouldn\u0027t we have a solution that requires no CPU/GPU synchronization? Even if there\u0027s an intermediate resource, I think a blit from texture -\u003e intermediate -\u003e buffer would be better than stalling and mapping.\n\nDefault texture mapping also seems useful for WriteTexture - we can check if we can map without waiting, and if so, map and memcpy the data in.",
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "773c8018_860fed7e",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 389,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-05T07:41:53Z",
      "side": 1,
      "message": "Makes sense. Here are the things in my mind:\n1)current(default texture-\u003e staging texture -\u003e staging buffer): \u00271 GPU copy\u0027 + \u0027map stall\u0027 + \u00271 CPU copy\u0027\n2) this CL(default texture-\u003e staging buffer): \u0027map stall\u0027 + \u00271 CPU copy\u0027\n3) a follow CL likely(default texture-\u003e staging buffer): \u0027non-blocking map\u0027 + \u00271 CPU copy\u0027\n4) Compute shader T2B(default texture -\u003e default buffer -\u003e staging buffer): \u00272 GPU copies\u0027\n\nActually I have started to think about 3). To get rid of the map stall, we need to postpone the `ReadFromSubresource` call, after the src texture is done written, and before the dst buffer is used in next commands. Such tracking mechanism is needed, and may be a little complicated.\n\nFor WriteTexture, currently it has no map stall thanks to \u0027UpdateSubresource\u0027. We may use default texture mapping once we solve the map stall issue in 3), otherwise it would not be a worthwhile effort.",
      "parentUuid": "d568b968_a97a1029",
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba66e54f_8319f863",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 389,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-06-05T16:25:58Z",
      "side": 1,
      "message": "(3) seems quite complicated. and ultimately while you may not be stalling immediately, if the dst buffer is used, Dawn will effectively need to artificially stall until the dst buffer is ready.\n\nSo I really think that we should have (4) as a general case that will cover most situations. (2) can be done when the texture and buffer are ready and not in use - but I think this will be a relatively rare situation.",
      "parentUuid": "773c8018_860fed7e",
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c645c3_66ea2b85",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 389,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-06T01:32:53Z",
      "side": 1,
      "message": "Okay, let\u0027s put (3) aside. Overall (4) should be the better one. In spite of the considerable implementation efforts, we will have to do that sooner or later.\n\nThis CL just serves as a short term improvement to (1) with 1 copy saved. According to TextureReadPerf data on both Intel Gen9 and Gen12, it\u0027s much faster than (1). I pasted the perf data in the previous comment.",
      "parentUuid": "ba66e54f_8319f863",
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c6de188_985bcfd3",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-06-04T22:35:48Z",
      "side": 1,
      "message": "can be const",
      "range": {
        "startLine": 286,
        "startChar": 39,
        "endLine": 286,
        "endChar": 65
      },
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e3eced7_d752408e",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-05T07:41:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c6de188_985bcfd3",
      "range": {
        "startLine": 286,
        "startChar": 39,
        "endLine": 286,
        "endChar": 65
      },
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d67d72d9_1a2c1aac",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 333,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-06-04T22:35:48Z",
      "side": 1,
      "message": "nit: it\u0027s odd to mutate the member variable here. I think it would be better to call a helper and say:\n\nmUseDefaultTextureMapping \u003d SupportsDefaultTextureMapping(device, GetFormat(), desc);",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 333,
        "endChar": 43
      },
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ad6078_424922f7",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 333,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-05T07:41:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d67d72d9_1a2c1aac",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 333,
        "endChar": 43
      },
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "418ea0ab_dec129d1",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1060,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-06-04T22:35:48Z",
      "side": 1,
      "message": "overall, this method reads the data in 2 ways. It either writes to `data`, or it passes the data to the ReadCallback. IMO we should not do it this way because it\u0027s confusing to know where the data will end up. You should instead have two separate methods so the distinction is clear.",
      "range": {
        "startLine": 1045,
        "startChar": 0,
        "endLine": 1060,
        "endChar": 5
      },
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e45c1692_4deafe31",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1060,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-06-05T07:41:53Z",
      "side": 1,
      "message": "My consideration was to make default texture mapping completely internal to `TextureD3D11`, so that client classes like `CommandBufferD3D11` just need to provide both `data` and `callback` to `TextureD3D11`, which can fully decide how to properly use them. Otherwise if there were 2 separate read methods, `CommandBufferD3D11` would be burdened with some conditions to use each read method. To some extent, `data` and `callback` are \u0027both\u0027 rather than \u0027either\u0027 to `Read`. Just my slight preference. I am okay either way.",
      "parentUuid": "418ea0ab_dec129d1",
      "range": {
        "startLine": 1045,
        "startChar": 0,
        "endLine": 1060,
        "endChar": 5
      },
      "revId": "c1745f6ffc0b72d0cc09431563e6167587e12ed5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}