{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2d159807_521d3f6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-17T18:27:02Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7bbe62d_af12a87e",
        "filename": "src/tint/lang/glsl/writer/printer/printer.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-17T18:39:42Z",
      "side": 1,
      "message": "As a followup, please can we move the impl to the .cc?",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75544045_3b3a0042",
        "filename": "src/tint/lang/glsl/writer/printer/printer.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-17T18:41:51Z",
      "side": 1,
      "message": "I don\u0027t understand the comment, you want a second class that this calls into to do the work hidden inside the cc file? Why? Having the class definition in the `.h` makes it a lot easier to search and find things and to add new members.",
      "parentUuid": "f7bbe62d_af12a87e",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7fd8d00_62af5e3d",
        "filename": "src/tint/lang/glsl/writer/printer/printer.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-17T18:44:15Z",
      "side": 1,
      "message": "That would also be different from how both MSL and SPIR-V printers work. All three of them are currently setup the same way with a Printer class. There is no hidden Impl class.",
      "parentUuid": "75544045_3b3a0042",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4acd2a95_20cc373a",
        "filename": "src/tint/lang/glsl/writer/printer/printer.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-17T18:50:01Z",
      "side": 1,
      "message": "A single class, only in the `.cc` file. For the same reasons I\u0027ve asked before:\n\n* There\u0027s only a single free function that\u0027s needed to be public: `tint::Result\u003cstd::string\u003e Print(core::ir::Module\u0026 module)`. \n* The API is cleaner - no split between constructor, `Generate()` and `Result()`\n* The compiler / linker does a better job inlining - binary size is smaller, sometimes faster.\n* You don\u0027t have to forward-declare or `#include` a bunch of implementation details in the header.\n* You don\u0027t have to duplicate the methods in two files.\n\n\u003e Having the class definition in the `.h` makes it a lot easier to search and find things and to add new members.\n\nI personally find the opposite is true.",
      "parentUuid": "75544045_3b3a0042",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03388392_d4f66fcf",
        "filename": "src/tint/lang/glsl/writer/printer/printer.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-17T18:53:01Z",
      "side": 1,
      "message": "This class is _already_ an implementation for the writer file at the higher level. So, we just have a chain of Impls calling each other.\n\nLike, the API is already to call `glsl::writer::Generate()` and you never call the printer.",
      "parentUuid": "4acd2a95_20cc373a",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af4abecc_0185bb78",
        "filename": "src/tint/lang/glsl/writer/printer/printer.h",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-17T18:57:32Z",
      "side": 1,
      "message": "\u003e That would also be different from how both MSL and SPIR-V printers work. All three of them are currently setup the same way with a Printer class. There is no hidden Impl class.\n\nI\u0027ve asked James to change the SPIR-V writer. It\u0027s on his TODO list.",
      "parentUuid": "03388392_d4f66fcf",
      "revId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "cd8eb3ea284ae57936b54f883a6af168c6e34aaf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}