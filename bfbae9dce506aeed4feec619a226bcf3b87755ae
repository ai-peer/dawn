{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b63dfac_f93337ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-09-20T20:31:50Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69fa7169_f629088d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "LGTM - great job, thank you!\nA bunch of nits, but I can address them as a follow-up.",
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "626ef45f_24dac7d1",
        "filename": "src/tint/lang/core/ir/continue_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "`cont` ?",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 13
      },
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abed002b_15467c89",
        "filename": "src/tint/lang/core/ir/continue_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "Would be good to check that the returned instructions from `ctx.Clone()` are different from the argument.\n```\nEXPECT_NE(loop, new_loop);\nEXPECT_NE(cont, new_cont);\n```",
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc734dd_fd91599f",
        "filename": "src/tint/lang/core/ir/continue_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "`cont` ?",
      "range": {
        "startLine": 77,
        "startChar": 10,
        "endLine": 77,
        "endChar": 13
      },
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c6c4d4b_f04ac96f",
        "filename": "src/tint/lang/core/ir/function.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "Feels like it would have been simpler to call `ctx.Clone(block_`) after `ctx.Replace(this, new_func);`",
      "range": {
        "startLine": 39,
        "startChar": 23,
        "endLine": 39,
        "endChar": 56
      },
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e3b555d_ba8b3524",
        "filename": "src/tint/lang/core/ir/function_param_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 76,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "bots are unhappy that you had the audacity to omit a `u`. Probably same in many other places.",
      "range": {
        "startLine": 76,
        "startChar": 14,
        "endLine": 76,
        "endChar": 15
      },
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee5e9657_ec0e1b8b",
        "filename": "src/tint/lang/core/ir/ir_helper_test.h",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "Ã¼bernit: I\u0027d personally declare this in the clone tests themselves to cut down the amount of stuff all the IR tests carry. I was also thinking it would be good to check that two clone contexts can be used to reconstruct the same thing twice, without remappings to the first clone.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 32
      },
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a9392c_37f4cc0a",
        "filename": "src/tint/lang/core/ir/multi_in_block.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "While the control instructions must use `CloneInfo()` to clone themselves, I think it might be nice to have a `Clone()` implementation for `ctx.Clone(some_block)`. It would be something like:\n\n```\nauto* out \u003d ctx.ir.Create\u003cMultiInBlock\u003e();\nctx.Replace(this, out);\nCloneInto(ctx, out);\nreturn out;\n```",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 65
      },
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce554134_ad0a1c53",
        "filename": "src/tint/lang/core/ir/switch.cc",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-09-20T21:04:09Z",
      "side": 1,
      "message": "While I don\u0027t think anything currently has pointers to the blocks, aside from the owning `ControlInstruction`s, I think it might be a good idea to add `ctx.Replace(cse.block, new_case.block)`. Here and the other control instructions.",
      "revId": "bfbae9dce506aeed4feec619a226bcf3b87755ae",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}