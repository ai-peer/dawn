{
  "comments": [
    {
      "key": {
        "uuid": "d1a4f46c_2261f011",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-28T10:23:43Z",
      "side": 1,
      "message": "I\u0027m pretty sure this was correct see explanation in [1]",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8a7bd83_2151a37e",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-06-28T16:44:35Z",
      "side": 1,
      "message": "I thought you added a test for this behavior, but I guess not.",
      "parentUuid": "d1a4f46c_2261f011",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "342ccbe4_7dabe8d9",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-06-28T17:44:38Z",
      "side": 1,
      "message": "Sorry, Corentin and Austin, I didn\u0027t understand you. What do you mean? Did you mean that the original code here was correct, and I shouldn\u0027t change the code snippet here? \n\nBut the test fail (see patchset 3, and the bots failure was: https://ci.chromium.org/p/chromium/builders/try/mac-dawn-rel/1428). So, the root cause is that either the new added culling tests were incorrect, or the original code snippet here was incorrect. I think the reason was the latter, not the new added tests. \n\nPer my understanding, if we say that Y axis is down in WebGPU (Corentin told me about this in https://dawn-review.googlesource.com/c/dawn/+/8401), and Y is actually down on some backend (like Metal backend and Vulkan backend), then we don\u0027t need to invert winding. Otherwise (like OpenGL backend) we have to invert winding.  \n\nOne example here: if we draw a triangle with 3 points in this sequence: A(-1, -1), B(-1, 0), C(0, -1). The triangle is CW if Y is up, and it is CCW if Y is down. So if we say Y axis is down is WebGPU, then web developers will think that triangle ABC is CCW. As a result, when we map it to Metal, we don\u0027t need to invert CCW to CW. On the contrary, when we implement it on OpenGL, we need to invert CCW to CW.    \n\nWhat do you think?\n\n(btw, I didn\u0027t invert CCW/CW to CW/CCW on Vulkan backend and the new added culling tests can pass on my local machine.)",
      "parentUuid": "d8a7bd83_2151a37e",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d55336e_a6dcf056",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T17:54:38Z",
      "side": 1,
      "message": "I was looking at this at the same time, and I\u0027m confused as well: If these tests all pass on all backends, then they must be behaving consistently. And yet, this switch was needed for actual demos to render correctly.\n\nDoes shader (-1,-1) show up in the lower left or the upper left? This test seems to say it\u0027s the upper left, but I thought it was the lower left. I\u0027m trying to test this now.",
      "parentUuid": "342ccbe4_7dabe8d9",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11b16cff_88f905d3",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T18:05:00Z",
      "side": 1,
      "message": "Ok. (-1, -1) is the upper left. This is consistent across the backends.\n\nI forgot we don\u0027t have culling on the other backends yet. How does this test pass on those backends?",
      "parentUuid": "2d55336e_a6dcf056",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f1d2c54_96e1a3bb",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-06-28T18:10:49Z",
      "side": 1,
      "message": "Hey Kai, thanks for your testing. (-1, -1) is upper left, seems that we can say that Y axis is down. Did you test it on OpenGL? Is (-1, -1) upper left on OpenGL backend? \n\nI implemented culling on Vulkan backend at https://dawn-review.googlesource.com/c/dawn/+/8300. It was blocked because of no tests.",
      "parentUuid": "11b16cff_88f905d3",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59b4f0c6_bbc252b5",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-06-28T18:14:34Z",
      "side": 1,
      "message": "BTW, did you test (-1, -1) via dawn with different backends, or you tested it on native backends directly? For dawn, I suspected that we might flip Y, so it is consistent across different backends and Y axis is up on all backends. But for native OpenGL backend, I am afraid Y is down.",
      "parentUuid": "9f1d2c54_96e1a3bb",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0af19bf6_1d3310a0",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-06-28T18:16:46Z",
      "side": 1,
      "message": "(Whoops, sent it too fast and made a mistake) BTW, did you test (-1, -1) via dawn with different backends, or you tested it on native backends directly? For dawn, I suspected that we might flip Y, so it is consistent across different backends and Y axis is DOWN on all backends. But for native OpenGL backend, I am afraid Y is UP.",
      "parentUuid": "59b4f0c6_bbc252b5",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78231ef0_fc16122d",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T18:53:18Z",
      "side": 1,
      "message": "I mean that Dawn has y-down. We tested on Dawn on Vulkan, OpenGL, and Metal to ensure that Dawn is doing the right flipping for all backends. The triangle in CHelloTriangle renders the same direction for all of them.",
      "parentUuid": "0af19bf6_1d3310a0",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6536cb64_a30d6443",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-06-28T18:56:28Z",
      "side": 1,
      "message": "Make sense. So I think that we don\u0027t need to invert CCW to CW for Metal backend if we tell web developers that Y axis is down.",
      "parentUuid": "78231ef0_fc16122d",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7e4d074_b92878b1",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T22:06:53Z",
      "side": 1,
      "message": "I just spent a while investigating this. I know that this CW-CCW inversion was necessary for Babylon.js and other demos to appear correctly.\n\nWhat I realized is that hello_triangle.html and CHelloTriangle use the same vertex positions: CW (if +Y is down).\nBut hello_triangle.html points up (on both Metal and Idan\u0027s WIP Vulkan code) and CHelloTriangle points down (on Dawn on Metal, Vulkan, and OpenGL (pretty sure D3D12 is the same too)).\n\nI verified the render target orientation by displaying the gl_FragCoord as the color of the triangle. That seems to indicate that our flip_vert_y setting in ShaderModuleMTL.mm is correct, and our render target is right side up in Dawn, but it\u0027s *upside down* in Chrome\u0027s \u003ccanvas\u003e.\n\nSo I think what we have to do is un-invert MTLFrontFace (as you have already done here), and also flip the canvas in Chrome. Doing so would require Babylon.js to change its camera matrix so that the scene becomes right-side-up, and then the culling would become correct.",
      "parentUuid": "6536cb64_a30d6443",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6053a19_8e95d98b",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T22:33:49Z",
      "side": 1,
      "message": "Patch:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/1682839",
      "parentUuid": "f7e4d074_b92878b1",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f041a63_5c565a47",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-01T09:15:35Z",
      "side": 1,
      "message": "I\u0027m still convinced that we shouldn\u0027t change the MTLFrontFace here. There are three coordinate systems and frontFace only applies on one of them:\n\n - clipspace coordinates: what\u0027s in gl_Position with X in [-1, 1] and Y in [-1, 1] (this is actually called normalized device coordinates but w/e)\n - framebuffer coordinates: in texels, X in [0, w], and Y in [0, h]. **This is where frontFace computation happens**. ClipSpaceTest checks that the transform from clipspace to framebuffer is frambufferCoords \u003d (clipspaceCoord + vec2(1.0)) * vec2(w, h) /  2. Note that there is no inversion of Y. This is where Metal differs from other APIs because it flips the transform from clipspace to framebuffer, flipping the winding of triangles at the same time.\n - window coordinates: in screen pixels, only for textures that are presented to the screen. This is where we say that OpenGL is Y up while WebGPU and Vulkan/D3D12 are Y down.\n\nYou can see the difference in https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf section 1.6 Metal Coordinate Systems vs. Vulkan\u0027s section 23.5. Controlling the Viewport.",
      "parentUuid": "d6053a19_8e95d98b",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e48fca30_f791e5b9",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-01T18:32:13Z",
      "side": 1,
      "message": "With the CW/CCW flipped here, the culling behavior is still reversed relative to the Vulkan backend in Yunchao\u0027s other patch. We also already have one thing which flips Y relative to the shader code - flip_vert_y in MTLShaderModule, which I think takes care of Metal\u0027s flip between clipspace and framebuffer coordinates.",
      "parentUuid": "6f041a63_5c565a47",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d817d7cf_fe4ec926",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-02T07:49:04Z",
      "side": 1,
      "message": "I\u0027m not sure flip-vert-y helps for CCW vs. CW. I really don\u0027t know how to interpret the Metal spec so we\u0027re 100% sure. At this point what we need are tests that pass on all other backends where we understand what happens (and shouldn\u0027t need CW/CCW inversion), then make Metal pass that test.",
      "parentUuid": "e48fca30_f791e5b9",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9b5bc98_34f6671d",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-02T13:15:39Z",
      "side": 1,
      "message": "Fine. Can we recover the code snippet here, and land the test itself (or land it with https://dawn-review.googlesource.com/c/dawn/+/8300)? This task is actually blocked right now.",
      "parentUuid": "d817d7cf_fe4ec926",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e546317_243681de",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-02T17:30:11Z",
      "side": 1,
      "message": "We do have many coordinate systems, for example, clip coordinates (also aka normalized device coordinates, NDC), framebuffer coordinates, and texture coordinates. And there are more coordinate systems like window coordinates and hw device coordinates. I don\u0027t care about window coordinates, because it\u0027s the drivers\u0027 (or system compositors\u0027 or system window manager\u0027s) duty to map Graphics API\u0027s framebuffer coordinates to window coordinates. I don\u0027t care hw device coordinates (or hw device memory layout for graphics) either, because it is display/kernel\u0027s duty. \n\nPer my understanding, clip and culling are applied on NDC, and clip/culling are done after vertex shader but before rasterization. However, viewport and scissor are applied on framebuffer coordinates, and they are done during or after rasterization.\n\nIn OpenGL: Y is up for both NDC and framebuffer coordinates. \nIn Metal and D3D12: Y is up for NDC, but Y is down for framebuffer coordinates. \nIn Vulkan: Y is down for both NDC and framebuffer coordinates. \n(An investigation about this: http://hacksoflife.blogspot.com/2019/04/keeping-blue-side-up-coordinate.html)\n\nCurrently, we inverted CCW/CW on OpenGL but no flip in shader. On Metal/D3D12, we flipped Y in vertex shader on Metal/D3D12 (after flipping, Y is down. And culling will be applied after flipping, so we don\u0027t need to invert CCW/CW on Metal/D3D12). On Vulkan, no flip and no invert at all. Then culling tests can pass on all backends.\n\nSo, it looks like that WebGPU follows Vulkan\u0027s tradition: Y is down in both NDC and framebuffer coordinates. \n\nI may make mistake here, please correct me if I am incorrect.",
      "parentUuid": "a9b5bc98_34f6671d",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30f791b1_cd9d7129",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-02T18:21:52Z",
      "side": 1,
      "message": "This seems probably right to me, but do we have tests? If we can test everything (except for the final presentation to the screen) to make sure that all of the following are consistent across backends, then I think we\u0027re OK (might be missing something):\n- which corner is gl_Position\u003d(-1, -1)\n- which corner is gl_FragCoord\u003d(0, 0)\n- which winding has gl_FrontFacing\u003d\u003dtrue (don\u0027t know for sure if spirv-cross supports this everywhere, but hopefully)\n- which winding is considered Front by the cull mode",
      "parentUuid": "2e546317_243681de",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "017ecf72_34b3bb19",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-03T15:07:33Z",
      "side": 1,
      "message": "Thanks for the detailed explanation, that seems correct to me as well. Having tests gives a lot more confidence, and I think Kai\u0027s test items 1) and 4) are already done in ClipSpaceTests and this CL respectively. I also checked both MoltenVk and gfx-rs and they don\u0027t flip windings. I\u0027m still have trouble understanding why we don\u0027t need the flip, but with test coverage I think we\u0027re ok to move forward, sorry for blocking this for so long.",
      "parentUuid": "30f791b1_cd9d7129",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cedaa9b8_62d0441b",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-04T06:35:02Z",
      "side": 1,
      "message": "I think item 2) is not related to culling. We need to make it correct for sampling and drawing though. For item 3), I am not familiar with spirv-cross, do we need more tests to cover this? Can we land this patch at first if no objection, and I can write more tests for item 3) for spirv-cross (It\u0027s OK for me to add tests for item 3) in this patch if you want, just let me know how to step forward for this feature. :) )\n\nBTW, I think that we need to clearly state item 1) and 2) and other things like y axis direction in NDC and framebuffer coordinate in WebGPU spec, if we begin to detail the spec.",
      "parentUuid": "017ecf72_34b3bb19",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c89cd0e_486ca333",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-04T18:31:44Z",
      "side": 1,
      "message": "2 is winding related because if it is wrong we may have to flip the winding. I think what we have is right, but I would love to have those tests sooner rather than later - they should be pretty easy to implement (don\u0027t have to be super thorough - but I\u0027m personally ok landing this first.",
      "parentUuid": "cedaa9b8_62d0441b",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9d2167a_4db23e73",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-05T12:46:38Z",
      "side": 1,
      "message": "+1 at this point I\u0027m 90% sure this CL is correct but 2) would be more like 95% :)",
      "parentUuid": "6c89cd0e_486ca333",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74cc03fb_c7a94ba4",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-28T10:23:43Z",
      "side": 1,
      "message": "[1] These triangles are actually the inverse of what\u0027s described in the comment. The winding of a triangle is done in \"framebuffer coordinate\" (Vulkan 1.1 spec 24.7.1. Basic Polygon Rasterization) (GLES 3.1 spec 13.5.1 Basic Polygon Rasterization) using the regular mathematical convention of Y being \"up\". That the displaying of textures on the screen is Y down is independent of frontFace computations.",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95a0c37a_8a0dbc08",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T22:38:07Z",
      "side": 1,
      "message": "Shouldn\u0027t WebGPU\u0027s CCW always match the winding as it appears on the screen? Regardless of framebuffer coordinates.",
      "parentUuid": "74cc03fb_c7a94ba4",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a781581_33ef56d7",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-01T09:15:35Z",
      "side": 1,
      "message": "It shouldn\u0027t because how a texture is presented is not linked at all to how it is rendered.",
      "parentUuid": "95a0c37a_8a0dbc08",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1aca285_5867edc8",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-07-02T18:21:52Z",
      "side": 1,
      "message": "But it has to be presented in the same way on all systems, or apps won\u0027t appear consistently. And of the 2 options, we should set it up so that CCW means CCW-on-screen, because the opposite would be confusing to developers.",
      "parentUuid": "8a781581_33ef56d7",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64529211_c7bb24ce",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-02T20:30:51Z",
      "side": 1,
      "message": "Agreed with Kai. As I said at another comment. clipping/culling are applied on NDC (Nornalized Device Coordinates, aka clip coordinates). If we say Y is down in NDC for WebGPU, and WebGPU developers follow this rule and set appropriate cull mode and winding direction, it should behave correctly (for example, enable back-face culling), and the CCW triangle in NDC should be presented CCW on screen. If WebGPU developers set a triangle at top-left in its model according to WebGPU\u0027s spec (for example, WebGPU\u0027s spec need to clearly state that Y is down, where is the origin of NDC, where is the origin of framebuffer coordinate, where is the origin of texture coordinate, etc.) but it isn\u0027t drawn at top-left on the screen because of flip Y or CCW/CW intersion, then it is weird. Developers can\u0027t rely on such an implementation. \n\nHowever, this is done by an implementation chain, not only by dawn project.\n\nWebGPU\u0027s implementations, say dawn project, need to map its NDC and framebuffer coordinate to different backends. This means some operations like flip Y or CCW/CW inversion is needed for some backends. Likewise, every backend has its own behavior (Y is up or down in its NDC), and its driver implementation should map its coordinates correctly on different HWs. Finally, a CCW triangle in WebGPU\u0027s NDC coordinates went through all these implementation chains, and being presented CCW on screen on all backends and hws. But Dawn doesn\u0027t need to care about how Metal/D3D12/Vulkan/OpenGL backends map their own coordinates to hw and how to correctly present triangles on the screen (Well, sometime we do need to know this if the driver is broken for some reason and we have to have a workaround for a particular case). What we need to do is mapping WebGPU\u0027s coordinates to backends correctly and make sure it is finnally presentend correctly on the screen (via tests to verify this).",
      "parentUuid": "f1aca285_5867edc8",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d0e9ec2_1c4317d4",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-03T15:07:33Z",
      "side": 1,
      "message": "That makes a lot of sense, you\u0027re right that CW CCW should probably be defined as what you\u0027d see on the screen if you took a texture and just presented it using Dawn.",
      "parentUuid": "64529211_c7bb24ce",
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05f1a44c_de352b6f",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T17:54:38Z",
      "side": 1,
      "message": "nit: factor out these constants into \"kTriangleVisible\" and \"kTriangleCulled\"",
      "range": {
        "startLine": 91,
        "startChar": 34,
        "endLine": 91,
        "endChar": 55
      },
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcc9d8e4_52e58f28",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-28T18:05:00Z",
      "side": 1,
      "message": "And then you can have kCCWTriangleColor \u003d isCCWTriangleCulled ? ... : ...",
      "parentUuid": "05f1a44c_de352b6f",
      "range": {
        "startLine": 91,
        "startChar": 34,
        "endLine": 91,
        "endChar": 55
      },
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21bd1786_3c1caa87",
        "filename": "src/tests/end2end/CullingTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-07-02T01:47:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcc9d8e4_52e58f28",
      "range": {
        "startLine": 91,
        "startChar": 34,
        "endLine": 91,
        "endChar": 55
      },
      "revId": "2d4e5b854942958b6acee000a0fc532c6e7ebc6f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}