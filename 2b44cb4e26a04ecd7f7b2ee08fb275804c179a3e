{
  "comments": [
    {
      "key": {
        "uuid": "b7490319_f492ceb0",
        "filename": "generator/main.py",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-09T13:23:42Z",
      "side": 1,
      "message": "Sorry I just realized that this should be \"const*const*\" because the API guarantees it won\u0027t modify the descriptors nor the pointers.\n\nThis will cause a compile error in the combo descriptor but cColorAttachments should still be an array of pointers to non-const values and we can do a cast when filling the Dawn descriptor.",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52864634_79efd108",
        "filename": "generator/main.py",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-01-14T17:14:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7490319_f492ceb0",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "759fe827_847b7605",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-09T13:23:42Z",
      "side": 1,
      "message": "This is a pointer to a stack variable which isn\u0027t valid after the end of the function.\n\nFor const*const* we need to allocate an array of `memberLength` pointers, fill it with pointers to all copiedMembers and then record-\u003e{{memberName}} \u003d pointerArray.",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1c198c1_950a2e45",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-14T14:57:49Z",
      "side": 1,
      "message": "This hasn\u0027t been addressed yet :)",
      "parentUuid": "759fe827_847b7605",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61991375_761b21b1",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-01-14T17:14:26Z",
      "side": 1,
      "message": "Ah. I forgot to send this out.\n\nCorentin/Kai/Austin, do you know how to allocate such a pointerArray? It is a pointer to an array of pointers, its type is \u0027{{as_cType(member.type.name)}}**. It is an array with \u0027memberLength\u0027 of \u0027{{as_cType(member.type.name)}}*\u0027. \n\nI am not familiar with Jinja. It seems to me that the jinja template is quite different from C++ (even though this file is a .cpp file), because I tried to use alloc(), it doesn\u0027t work. \n\nBTW, if anyone of you from Google side like Austin can take this patch. I am OK.",
      "parentUuid": "759fe827_847b7605",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c36d73ed_a40803a6",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-01-14T18:32:33Z",
      "side": 1,
      "message": "You\u0027ll need to allocate another array for the pointers using |GetSpace|.\n\nSomething like:\n\n{{as_cType(member.type.name)}}** pointerArray \u003d nullptr;\nDESERIALIZE_TRY(GetSpace(allocator, memberLength, \u0026pointerArray));\nrecord-\u003e{{memberName}} \u003d pointerArray;\n\nThe size of that array will also need to be added to the result in {{name}}GetExtraRequiredSize",
      "parentUuid": "61991375_761b21b1",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba0c9d76_591e14c2",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-14T18:33:29Z",
      "side": 1,
      "message": "(and pointerArray filled with pointers to each element of copiedMembers)",
      "parentUuid": "c36d73ed_a40803a6",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a5cba3e_7fde772c",
        "filename": "generator/templates/dawn_wire/WireCmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-01-18T06:42:11Z",
      "side": 1,
      "message": "Done. \n\nAustin, do you mean that I should also add the size of pointerArray to \u0027result\u0027 at code snippet between line 137 and line 138? But GetRequiredSize can only recognize a structure, it can\u0027t recognize a pointer to a structure (which is the pointerArray[i] stores). Otherwise, it will fail to compile.",
      "parentUuid": "ba0c9d76_591e14c2",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7361e17_1a64bc60",
        "filename": "src/utils/ComboRenderPipelineDescriptor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-09T13:23:42Z",
      "side": 1,
      "message": "This wouldn\u0027t work if you use two combo descriptors at the same time and in general we avoid the use of static in our code. It could be a private mColorAttachmentValues of the combo descriptor.",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ce348ed_c053ee4a",
        "filename": "src/utils/ComboRenderPipelineDescriptor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2019-01-14T17:14:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7361e17_1a64bc60",
      "revId": "2b44cb4e26a04ecd7f7b2ee08fb275804c179a3e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}