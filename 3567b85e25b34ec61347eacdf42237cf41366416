{
  "comments": [
    {
      "key": {
        "uuid": "0cdf6e25_44583503",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-12-20T07:24:37Z",
      "side": 1,
      "message": "We will not support the texture view having a different format when it is used as color or depth stencil attachments, in these cases we should use the texture handle directly instead of calling newTextureViewWithPixelFormat, so it is safe to not set this flag.",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 70,
        "endChar": 57
      },
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d8d28f_c21327ee",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-12-20T13:31:02Z",
      "side": 1,
      "message": "I don\u0027t expect WebGPU to allow texture views for attachments to have a different format from their parent texture. Reading the Vulkan spec, it seems to be a constraint there too: the VkImage format must match the format of the attachment in the VkRenderPass given to the VkFramebuffer creation, and render pass compatilibity requires formats to match.",
      "parentUuid": "0cdf6e25_44583503",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 70,
        "endChar": 57
      },
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aee23c9_4e6f86a0",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-12-24T04:15:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "73d8d28f_c21327ee",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 70,
        "endChar": 57
      },
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42d99045_eccc5580",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 107,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-12-20T13:31:02Z",
      "side": 1,
      "message": "As commented above, BeginRenderPass should validate that the texture view doesn\u0027t change the format, so this could be an actual check instead of an ASSERT.",
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ce2c61e_b1efe1fa",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 107,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-12-24T04:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42d99045_eccc5580",
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eefc9810_3421ac6c",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 126,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-12-20T07:24:37Z",
      "side": 1,
      "message": "Actually if the texture view covers the whole array layers and mipmap levels, and uses the same format as the original texture, we can use the texture handle directly without calling newTextureViewWithPixelFormat.\n\nThis is also the case of framebufferOnly textures so we can fix the crash issue in this way.",
      "range": {
        "startLine": 100,
        "startChar": 1,
        "endLine": 126,
        "endChar": 9
      },
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ded9f0_b94b7402",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-12-20T13:31:02Z",
      "side": 1,
      "message": "Again I suggest having the following:\n\nif (!UsageNeedsTextureView) {\n    mMtltextureView \u003d nil;\n} else if (IsSameAsParentTexture) {\n    mMtlTextureView \u003d [mtlTexture retain];\n} else {\n    // create the texture view\n}\n\nIn CreateMTLRenderPassDescriptor instead of doing view-\u003eGetMtlTexture(); we would do view-\u003eGetTexture()-\u003eGetMtlTexture() and set the slice and level based on view-\u003eGetBaseLevel() and view-\u003eGetBaseArrayLayer().\n\nThe reason why I\u0027m asking for this is that I\u0027d like to avoid tying logic in this file to the \"framebufferOnly\" concept because it is a niche thing only used by CAMetalDrawable.",
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86f36d6a_27fa6354",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-12-24T04:15:10Z",
      "side": 1,
      "message": "Done\n\nSince we won\u0027t support attachment using different format against the original texture, shall we implement rendering into a texture array layer with glFramebufferTextureLayer(target, attachment, texture, level, layer) on OpenGL backends? The reason I didn\u0027t implement rendering into a texture array layer on OpenGL was that I failed to render into a texture created by glTextureView.",
      "parentUuid": "97ded9f0_b94b7402",
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "717af83f_8c3b221c",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 187,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-12-20T13:31:02Z",
      "side": 1,
      "message": "This would ASSERT(mMtlTextureView !\u003d nil);",
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9839f7f0_b0ccc58f",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 11
      },
      "lineNbr": 187,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-12-24T04:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "717af83f_8c3b221c",
      "revId": "3567b85e25b34ec61347eacdf42237cf41366416",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}