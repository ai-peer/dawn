{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4ceff520_f004f3d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T01:59:57Z",
      "side": 1,
      "message": "PTAL. I think this is pretty close. There are 2 failing groups of unit tests, 2 tests in HLSL printer, which maybe an actual bug and a handful in VectorizeScalarMatrixInitializers where we picked different constructors?\n\nI\u0027ll look into the two failures on Monday, but wanted to kick this off in case there was anything large that needed to be changed.",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9850b827_89666209",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "Great progress. Some questions about abstracts and the general .def syntax - but looks great!",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e021793e_f47c8afd",
        "filename": "src/tint/lang/core/constant/eval_binary_op_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1978,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "I don\u0027t see why we need these abstract overloads. Much like user-declared functions, the overload is matched via the rules of concretization.",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa236df4_30de11ef",
        "filename": "src/tint/lang/core/constant/eval_binary_op_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1978,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "It makes the list of available overloaders clearer, I think. From the list above it looks like abstracts can\u0027t be used. If you move abstract into the `T` then it looks like the template param can be an abstract which it can\u0027t. So, this also says the value _can_ be different from `T` as long as it\u0027s abstract.",
      "parentUuid": "e021793e_f47c8afd",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a9a12c1_93f9ebbe",
        "filename": "src/tint/lang/core/constant/eval_binary_op_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1978,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T13:33:05Z",
      "side": 1,
      "message": "This change goes well beyond just the diagnostics. You\u0027re adding new overloads that everything downstream now has to understand. Instead of resolving to an overload signature with concrete parameter types, all the transforms and writers need to now handle abstract parameter types.\n\nIt\u0027s also going to impact performance - there\u0027s a bunch more overloads that have to be considered.\n\nIt also introduces a separation between what is defined in the core language and what a user can declare as a function.\n\nWe can continue debating this, but please move out of this CL.",
      "parentUuid": "aa236df4_30de11ef",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d778dd2b_4a12cffe",
        "filename": "src/tint/lang/core/constant/eval_binary_op_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1978,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T19:00:34Z",
      "side": 1,
      "message": "I think fixing this is a separate change, like, the line after the ones I added contains abstracts, so either that line is also wrong and should be removed, or things downstream already have to deal with abstracts.\n\nI don\u0027t understand the separation between core and what a user can define? There is nothing about user functions in here, and users functions can\u0027t have explicit template params?\n\nPerfmon didn\u0027t run for some reason, so can\u0027t tell if there is a performance difference.",
      "parentUuid": "7a9a12c1_93f9ebbe",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e33b321d_5c24bd00",
        "filename": "src/tint/lang/core/constant/eval_binary_op_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1978,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T19:32:47Z",
      "side": 1,
      "message": "\u003e Perfmon didn\u0027t run for some reason, so can\u0027t tell if there is a performance difference.\n\nArgh, it fell over after I apparently lost internet. Thank\u0027s for the heads up, it\u0027s back online now.",
      "parentUuid": "d778dd2b_4a12cffe",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfea2c80_7ff10878",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "This is the core dialect definition file. We shouldn\u0027t have abstracts at all here.",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d364aad_604bef15",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "We shouldn\u0027t but we do because we haven\u0027t removed them. Notice `scalar` entries above and below this line. Having it here keeps the file consistent for when we do remove them.",
      "parentUuid": "dfea2c80_7ff10878",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3b77eb_2c802d8d",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T13:33:05Z",
      "side": 1,
      "message": "I\u0027ll draft a change that removes them from this file. This is long overdue.",
      "parentUuid": "2d364aad_604bef15",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a116cdbd_644fe054",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 937,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "As mentioned above, I don\u0027t know why we have to add abstract overloads? Shouldn\u0027t the rules of concretization cover these?",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03b8d7f4_83f3263f",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 937,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "Possibly, I just find it a lot less clear, this also provides the output lines which specify that `T` and `A` can be different in this case.",
      "parentUuid": "a116cdbd_644fe054",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "714eace2_48f694d4",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 1111,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "If we go with \u0027inferred\u0027 for the old templates (see other comment), suggest `template`. Or perhaps something even more radical:\n\n`name` `\u003c explicit-templates \u003e` `[ inferred ]` `( params... )`\n\nExamples:\n\nExplicit `T`, inferred `A`:\n```\n@must_use @const(\"MatInitV\") ctor mat4x3\u003cT: f32_f16\u003e[A: fa](vec3\u003cA\u003e, vec3\u003cA\u003e, vec3\u003cA\u003e, vec3\u003cA\u003e) -\u003e mat4x3\u003cT\u003e\n```\n\nInferred `A`:\n```\n@must_use @const(\"MatInitV\") ctor mat4x3[T: fa_f32_f16](vec3\u003cT\u003e, vec3\u003cT\u003e, vec3\u003cT\u003e, vec3\u003cT\u003e) -\u003e mat4x3\u003cT\u003e\n```",
      "range": {
        "startLine": 1111,
        "startChar": 30,
        "endLine": 1111,
        "endChar": 39
      },
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "164e4cb8_3ba0fe12",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 1111,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "That\u0027s a lot less readable to me. Having `@templated` be explict makes the line easier to decyper vs magic `[]` and `\u003c\u003e`",
      "parentUuid": "714eace2_48f694d4",
      "range": {
        "startLine": 1111,
        "startChar": 30,
        "endLine": 1111,
        "endChar": 39
      },
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7024b344_013e45cc",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 1189,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "These should be removed from the core definition file too.",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16444397_ea717f10",
        "filename": "src/tint/lang/core/core.def",
        "patchSetId": 1
      },
      "lineNbr": 1189,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "Yes. Cleaning up the core def file is a different task. I\u0027m not sure if this was needed here or in WGSL, so I made the two files have the same content until we clean up this and and the abstract entries.",
      "parentUuid": "7024b344_013e45cc",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a79bba98_580ad236",
        "filename": "tools/src/tint/intrinsic/gen/gen.go",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "gofmt please",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "594887bf_47206a13",
        "filename": "tools/src/tint/intrinsic/gen/gen.go",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "Do I run it over every individual file? Or is there a `git cl format` for go files?",
      "parentUuid": "a79bba98_580ad236",
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c2bdf76_c15cd468",
        "filename": "tools/src/tint/intrinsic/sem/sem.go",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T09:58:53Z",
      "side": 1,
      "message": "I\u0027d lean towards keeping \u0027template\u0027 for the explicit thing. How about \u0027inferred\u0027 for those that you can\u0027t explicitly pass?\n\n```suggestion\n\tTemplateTypes\t  []*TemplateTypeParam\n\tInferredTypes     []*TemplateTypeParam\n\tInferredNumbers   []TemplateParam\n```",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 195,
        "endChar": 34
      },
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6431ded8_695ab45f",
        "filename": "tools/src/tint/intrinsic/sem/sem.go",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-02-09T12:20:24Z",
      "side": 1,
      "message": "I\u0027ll put up a pre-CL which renames `Template` to `Inferred` and will change `Generic` to `Template`.",
      "parentUuid": "2c2bdf76_c15cd468",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 195,
        "endChar": 34
      },
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba0fe9fa_8ffb9e54",
        "filename": "tools/src/tint/intrinsic/sem/sem.go",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-02-09T13:33:05Z",
      "side": 1,
      "message": "Thanks",
      "parentUuid": "6431ded8_695ab45f",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 195,
        "endChar": 34
      },
      "revId": "cfd602320ec326340bc37ffe7d8bff542ffdc403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}