{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "332330de_181a4644",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "LGTM too, still haven\u0027t reviewed tests. Thank you for your patience.",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98fa2be2_eb9dd852",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "Maybe this should return an error instead of silently working.",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "424abdbc_457abd80",
        "filename": "src/dawn/native/BindGroupLayout.cpp",
        "patchSetId": 19
      },
      "lineNbr": 109,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "No, it\u0027s not silently working. When we encounter sampleType \u003d kInternalResolveAttachmentSampleType:\n- if allowInternalBinding is true, then this is valid, so we exit the switch.\n- otherwise, fallthrough to the below `ValidateTextureSampleType` call which will report \"invalid sampleType\" error. I have a test for that.",
      "parentUuid": "98fa2be2_eb9dd852",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6027efc_b67e5b3e",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 19
      },
      "lineNbr": 289,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "u-nit: IMHO validation would be more clear if we had this code block check the usage.\n\nRight now things are peppered a bit everywhere in a way that\u0027s hard to follow. It\u0027s tested so probably ok, but still it will be hard to revisit.",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cf8f391_29d0a52d",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 19
      },
      "lineNbr": 289,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "Done. Moved all of these validations into `ValidateColorAttachmentRenderToSingleSampled` function:\n- texture\u0027s usage.\n- format\u0027s supportsResolveTarget.\n- resolveTarget must be null.",
      "parentUuid": "b6027efc_b67e5b3e",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d98afbfb_0ab3fa8b",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1138,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "We should probably do `if (device-\u003eCOnsumedError(...))` since the only errors we expect are internal errors or OOM errors that should cause a device loss.",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42c80ca9_3f18d0dd",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1138,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d98afbfb_0ab3fa8b",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af4da72f_a3094cf7",
        "filename": "src/dawn/native/CommandValidation.cpp",
        "patchSetId": 19
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "Could we restructure this very hot code to more clearly show the fast paths?\n\n```\nif readOnly || singleUse {return {}}\n\nif (isLoadedResolveTexture) {return {};}\n\nreturn DAWN_VALIDATION_ERROR ...\n```",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f14a5b37_27ab891f",
        "filename": "src/dawn/native/CommandValidation.cpp",
        "patchSetId": 19
      },
      "lineNbr": 67,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af4da72f_a3094cf7",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "487f8ca0_d3a5d765",
        "filename": "src/dawn/native/PassResourceUsageTracker.cpp",
        "patchSetId": 19
      },
      "lineNbr": 118,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "This is fairly hot code as well, I\u0027d love to not need this, but don\u0027t see a better way :/ I wonder if we could somehow not add the pass usages to the tracker so that we can avoid all these changes and just skip validation for the bindgroup used in the blit. But then how do we ensure resource transitions and refcounting? I need to think about this more unless you have an idea?",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da9a48ac_0df9f162",
        "filename": "src/dawn/native/PassResourceUsageTracker.cpp",
        "patchSetId": 19
      },
      "lineNbr": 118,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "How about we think about a better/cleaner approach in a follow-up patch?",
      "parentUuid": "487f8ca0_d3a5d765",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38dd2296_e304091b",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 19
      },
      "lineNbr": 870,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "nit: GetOrCreate maybe?",
      "range": {
        "startLine": 870,
        "startChar": 45,
        "endLine": 870,
        "endChar": 48
      },
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72592cd8_12b42b82",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 19
      },
      "lineNbr": 870,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38dd2296_e304091b",
      "range": {
        "startLine": 870,
        "startChar": 45,
        "endLine": 870,
        "endChar": 48
      },
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c332b658_43e7d37b",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 19
      },
      "lineNbr": 162,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "How important is this caching? Could it be done another way? I\u0027m asking because ideally TextureBase should be mostly a leaf node of the object graph and have not too much logic. Textures are super core to Dawn and the more complex they are, the more complex all of Dawn needs to be.",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40b5b2c2_66da0b93",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 19
      },
      "lineNbr": 162,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-20T17:27:46Z",
      "side": 1,
      "message": "Right now the caching is done in a way that the implicit MSAA texture will be deallocated if the last single-sampled texture using it is deallocated.\n\nIf we don\u0027t store the cached msaa texture\u0027s ref here, I\u0027m not sure what is better way to trigger the deallocation. Besides the `TextureBase` class, who else knows about its destruction/destroy to trigger the MSAA texture\u0027s deallocation? Do you have any suggestion?",
      "parentUuid": "c332b658_43e7d37b",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c8f8b03_ea7f27fd",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 19
      },
      "lineNbr": 162,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-22T16:06:23Z",
      "side": 1,
      "message": "I\u0027ve been wondering if we could get away with not caching since we can create the attachment with TransientAttachment (which could be free), and eventually hope that our GPU memory allocators can reuse memory mid-frame.",
      "parentUuid": "40b5b2c2_66da0b93",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61d39b1d_a483c19d",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 19
      },
      "lineNbr": 162,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T16:31:41Z",
      "side": 1,
      "message": "Memoryless texture is not supported on x86 Mac. And I think x86 is still occupying a lot of Mac devices. Without caching, this would be a major memory regression compare to the 2 passes work-around existing in graphite.",
      "parentUuid": "5c8f8b03_ea7f27fd",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "007b4259_d713856c",
        "filename": "src/dawn/native/dawn_platform.h",
        "patchSetId": 19
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-20T15:27:50Z",
      "side": 1,
      "message": "Why does this use three bits?",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39dc9ae2_9f8084ea",
        "filename": "src/dawn/native/dawn_platform.h",
        "patchSetId": 19
      },
      "lineNbr": 61,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-22T10:15:01Z",
      "side": 1,
      "message": "I just chose a random constant not used by the official enum values. I have changed it to 0x80000000. Is it good enough?",
      "parentUuid": "007b4259_d713856c",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffb505cc_1271912e",
        "filename": "src/dawn/native/dawn_platform.h",
        "patchSetId": 19
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-22T16:06:23Z",
      "side": 1,
      "message": "Probably 0x10000000 since the 31 \u003c\u003c 1 bit is already used for againAsRenderAttachment,",
      "parentUuid": "39dc9ae2_9f8084ea",
      "revId": "ab0448f7d715e0aff7034a74a917289d73eff9e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}