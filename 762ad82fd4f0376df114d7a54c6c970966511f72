{
  "comments": [
    {
      "key": {
        "uuid": "19223a8c_a2369d49",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-09T23:56:44Z",
      "side": 1,
      "message": "OK, I\u0027m looking at this closely now and realizing it probably doesn\u0027t work at all for compressed textures for a few reasons. It\u0027s OK to not support them now, but I think I\u0027d like to simplify this code in the mean time if that\u0027s OK.\n\n bool compressed \u003d blockWidth \u003e 1 || blockHeight \u003e 1;\n ASSERT(!compressed);\n ASSERT(kTextureRowPitchAlignment % blockByteSize \u003d\u003d 0);\n uint32_t rowPitchAlignmentInPixels \u003d kTextureRowPitchAlignment / blockByteSize;\n uint32_t rowPitchInPixels \u003d Align(width, rowPitchAlignmentInPixels);\n ...\n descriptor.size \u003d rowPitch * height * blockByteSize;\n gl.PixelStorei(GL_UNPACK_ROW_LENGTH, rowPitchInPixels);\n gl.PixelStorei(GL_UNPACK_IMAGE_HEIGHT, 0);",
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e22e9a3_ab80abca",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-09T23:57:47Z",
      "side": 1,
      "message": "(Totally untested, fix if wrong)",
      "parentUuid": "19223a8c_a2369d49",
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f2bcaa5_32c7e46e",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-10T00:00:28Z",
      "side": 1,
      "message": "Here are some incomplete thoughts on supporting compressed textures, for later.\n\n bool compressed \u003d blockWidth \u003e 1 || blockHeight \u003e 1;\n ASSERT(kTextureRowPitchAlignment % blockByteSize \u003d\u003d 0);\n uint32_t rowPitchAlignmentInBlocks \u003d kTextureRowPitchAlignment / blockByteSize;\n \n ASSERT(width % blockWidth \u003d\u003d 0);\n uint32_t rowPitchInBlocks \u003d Align(width / blockWidth, rowPitchAlignmentInBlocks);\n ...\n ASSERT(height % blockHeight \u003d\u003d 0);\n uint32_t heightInBlocks \u003d height / blockHeight;\n descriptor.size \u003d widthInBlocks * heightInBlocks * blockByteSize;\n ...\n if (compressed) {\n   gl.PixelStorei(GL_UNPACK_COMPRESSED_BLOCK_SIZE, blockByteSize);\n   gl.PixelStorei(GL_UNPACK_COMPRESSED_BLOCK_WIDTH, blockWidth);\n   gl.PixelStorei(GL_UNPACK_COMPRESSED_BLOCK_HEIGHT, blockHeight);\n }\n gl.PixelStorei(GL_UNPACK_ROW_LENGTH, widthInBlocks * blockWidth);\n gl.PixelStorei(GL_UNPACK_IMAGE_HEIGHT, 0);\n ...\n {\n   if (compressed) {\n     gl.CompressedTexSubImage2D(...);\n   } else {\n     ...\n   }\n }",
      "parentUuid": "0e22e9a3_ab80abca",
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c16a8b4_f0c20868",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-09-11T22:44:02Z",
      "side": 1,
      "message": "do we want to implement this for compressed textures? It\u0027s still being skipped for now",
      "parentUuid": "3f2bcaa5_32c7e46e",
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba73ab93_e6608ee8",
        "filename": "src/dawn_native/opengl/TextureGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-09T23:56:44Z",
      "side": 1,
      "message": "this seems to have blockByteSize factored in twice - would be removed by the suggestion above",
      "range": {
        "startLine": 250,
        "startChar": 16,
        "endLine": 250,
        "endChar": 99
      },
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "593f4709_92095cd7",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 569,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-09T23:56:44Z",
      "side": 1,
      "message": "uNit: \"kSize * 4\"",
      "range": {
        "startLine": 569,
        "startChar": 30,
        "endLine": 569,
        "endChar": 39
      },
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b475c85f_051220a9",
        "filename": "src/tests/end2end/TextureZeroInitTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 570,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-10T00:02:34Z",
      "side": 1,
      "message": "This looks like it\u0027s duplicated with the 4 above. Should it just be rowPitch * kSize?\n\nAlso should use something other than 4 to make it clearer. (sizeof(...))",
      "range": {
        "startLine": 570,
        "startChar": 26,
        "endLine": 570,
        "endChar": 46
      },
      "revId": "762ad82fd4f0376df114d7a54c6c970966511f72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}