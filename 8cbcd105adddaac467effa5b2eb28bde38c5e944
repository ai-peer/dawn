{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c883b3a4_15cbf88a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-10T17:16:40Z",
      "side": 1,
      "message": "LGTM",
      "revId": "8cbcd105adddaac467effa5b2eb28bde38c5e944",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d874f354_e3dea820",
        "filename": "src/dawn/wire/client/ObjectAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-10T17:16:40Z",
      "side": 1,
      "message": "this could use an explanation about why we do +1 here. You would think - I\u0027m freeing my object so I should pass my object id and gen directly. But no, really you\u0027re putting the id back into the pool but tagging it with the next generation.\n\nBut also, maybe `FreeId` should be inlined here directly because it\u0027s tiny and would probably be more clear inlined given the above comment.",
      "range": {
        "startLine": 63,
        "startChar": 12,
        "endLine": 63,
        "endChar": 49
      },
      "revId": "8cbcd105adddaac467effa5b2eb28bde38c5e944",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9754dbe4_88c378b7",
        "filename": "src/dawn/wire/client/ObjectAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-10T17:16:40Z",
      "side": 1,
      "message": "this name is (was already) misleading because it may not be \"new\". But, now it\u0027s more misleading because it gives you a slot instead of an ID. Maybe call it something like `ReserveSlot` ?\n\nOr actually, perhaps we don\u0027t need FreeSlot and can reuse the ObjectHandle struct",
      "range": {
        "startLine": 81,
        "startChar": 13,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "8cbcd105adddaac467effa5b2eb28bde38c5e944",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a5c060_ece7a93e",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-10T17:16:40Z",
      "side": 1,
      "message": "is it better to return const\u0026 ?\n(genuine question). Same total size on 64-bit. Smaller on 32-bit systems. The copy happens in a different place.",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 16
      },
      "revId": "8cbcd105adddaac467effa5b2eb28bde38c5e944",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb9808da_a79b9991",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-10T17:16:40Z",
      "side": 1,
      "message": "seems like we could juts have `const ObjectHandle handle` as a member",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 49,
        "endChar": 38
      },
      "revId": "8cbcd105adddaac467effa5b2eb28bde38c5e944",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}