{
  "comments": [
    {
      "key": {
        "uuid": "65bba757_f8f86bf6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-06T13:30:02Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1b2d822_da90adb4",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-07-06T18:29:01Z",
      "side": 1,
      "message": "Consider changing the datatype of info.shaderModel to be D3D_SHADER_MODEL instead of uint32. That makes it more clear what the data represents when stepping through code in the debugger.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 29
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "163feac4_10502f7a",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-06T18:59:09Z",
      "side": 1,
      "message": "Oh actually it should be 10*major + minor, I need to fix this. So it can\u0027t be a D3D_SHADER_MODEL.",
      "parentUuid": "e1b2d822_da90adb4",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 29
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7a7930a_b4738914",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-06T19:02:11Z",
      "side": 1,
      "message": "Couldn\u0027t you still use D3D_SHADER_MODEL and then unpack it differently later into major / minor ?",
      "parentUuid": "163feac4_10502f7a",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 29
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bea626a_ba059fd2",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-07-06T21:26:20Z",
      "side": 1,
      "message": "In ShaderModule::Create, shaderModel is passed directly to SPIRV and ShaderC \"options\" data structures. Whatever encoding you decide for shaderModel needs to be compatible with what they those accept if you\u0027re going to keep passing it directly.",
      "parentUuid": "b7a7930a_b4738914",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 29
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31066562_4a36adb5",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-07T15:39:58Z",
      "side": 1,
      "message": "This is for SPIRV-Cross and the comment in D3D12Info.h explains how shaderModel is encoded so it\u0027s probably ok?",
      "parentUuid": "6bea626a_ba059fd2",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 29
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "725c28be_e42f2a2f",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-07-06T18:29:01Z",
      "side": 1,
      "message": "The information in D3D12DeviceInfo.shaderModel and D3D12DeviceInfo.shaderProfiles is redundant with one another. Consider removing the shaderProfiles member and have code generate the string on the fly with a helper function. We should only need to do this when we compile shaders, which should be an infrequent operation.",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 95,
        "endChar": 0
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd1c6fbc_4482a19a",
        "filename": "src/dawn_native/d3d12/D3D12Info.cpp",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-07T15:39:58Z",
      "side": 1,
      "message": "I\u0027m not sure how doing things ,any times with a helper function is better than a cheap preprocess (memory and cycle wise). If you want the information could be nested in info.dxc so that it\u0027s clear it\u0027s only used by the DXC-related code.",
      "parentUuid": "725c28be_e42f2a2f",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 95,
        "endChar": 0
      },
      "revId": "9d247a01b1265b467cc4b4bf14d61510f39b29ca",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}