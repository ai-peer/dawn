{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5abbadc6_1362e415",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "nit: I think it should be\n```((mDirtyBindGroups | ~mPipelineLayout-\u003eGetBindGroupLayoutsMask()) \u0026\n  mLastAppliedPipelineLayout-\u003eGetBindGroupLayoutsMask())```, and then [1] will be not necessary, right?",
      "range": {
        "startLine": 117,
        "startChar": 50,
        "endLine": 117,
        "endChar": 81
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8558e1cb_f350be4e",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T10:24:32Z",
      "side": 1,
      "message": "You are right. More simply we only need to un-apply `unusedGroups`, as we regard the `BindGroupTracker` as [CanInheritBindGroups \u003d\u003d false](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d11/BindGroupTrackerD3D11.h;drc\u003d283b3a042fc3e85a57b0b1a844e3f1b10d6f61c4;l\u003d27), right?",
      "parentUuid": "5abbadc6_1362e415",
      "range": {
        "startLine": 117,
        "startChar": 50,
        "endLine": 117,
        "endChar": 81
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7f29071_63767e23",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-14T11:23:15Z",
      "side": 1,
      "message": "I feel we could use `CanInheritBindGroups \u003d true`, if some groups are not changed cross pipelines.\nonly un-applying `unusedGroups` is not sufficient. For example:\nlastPipelineLayout has groups 0, 1, 2, new pipelineLayout has 0. In this case, we just unbind group 1, 2. If last pipeline group 0 bind three slots of UAV, but new group 0 only bind one UAV slot. In this case, we will just replace one UAV slot. the other two are still bound.",
      "parentUuid": "8558e1cb_f350be4e",
      "range": {
        "startLine": 117,
        "startChar": 50,
        "endLine": 117,
        "endChar": 81
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1c51b60_bd818e44",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "You are right. That would be a problem if we enabled `CanInheritBindGroups \u003d true`. For now it should work correctly.",
      "parentUuid": "a7f29071_63767e23",
      "range": {
        "startLine": 117,
        "startChar": 50,
        "endLine": 117,
        "endChar": 81
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c598a68c_0e4f97bd",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "For a pipeline layout, all UAVs are assigned with connected d3d11 slots, and the order is by WGSL bindings(sorted by group \u0026 binding) but reversed. So I thinking it is not necessary to use an extra `std::map`, one `std::vector` should be sufficient. We can store UAVs into the vector directly.",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f810c8a2_914be4b8",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T10:24:32Z",
      "side": 1,
      "message": "I was not sure that the order is ensured. Maybe we should clearly state that in the header for [1]. Otherwise it would be liable to break your assumption when someone make some changes inadvertently.\nBeside that, we also assume that [2] always only contains all bind groups of the current pipeline.\nDo you think a bit more robustness here is meaningful?",
      "parentUuid": "c598a68c_0e4f97bd",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8e2e1c0_bc99f460",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-14T11:23:15Z",
      "side": 1,
      "message": "The order is ensued by code at [1]. I don\u0027t think it will be changed. We can add some ASSERT() in ApplyGroup() or elsewhere to ensure the assumption will never be changed.\n\nSorry, I don\u0027t understand your concern about [2]? Could you please explain it?\n\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d11/PipelineLayoutD3D11.cpp;l\u003d38?q\u003dPipelineLayoutD3D11\u0026ss\u003dchromium",
      "parentUuid": "f810c8a2_914be4b8",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6cbe54b_33dc0d0c",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T11:58:10Z",
      "side": 1,
      "message": "If the tracker supported `CanInheritBindGroups`, the unchanged bind group would not re-apply its UAV bindings. So we would not set all required UAV slots at the same time.",
      "parentUuid": "b8e2e1c0_bc99f460",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6823f0cd_74a12986",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-14T13:04:54Z",
      "side": 1,
      "message": "Yes. If we use `CanInheritBindGroups\u003dtrue`, can we mark groups which contain UAVs dirty, so those groups will be re-apply. And there is no UAVs, we can avoid rebinding unchanged groups.",
      "parentUuid": "e6cbe54b_33dc0d0c",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "272aec81_ff4219ff",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "As vector has no \"push_front()\", I have to use a list instead here.",
      "parentUuid": "6823f0cd_74a12986",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a22d88_4200ae17",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T11:29:56Z",
      "side": 1,
      "message": "vector::insert() does it.\n\nbtw, it will move all items at and behind insert position to make a space, but considering the size of the vector, it should be fine.",
      "parentUuid": "272aec81_ff4219ff",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 15
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a1c2b03_cd3e3876",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T10:24:32Z",
      "side": 1,
      "message": "[2]",
      "range": {
        "startLine": 125,
        "startChar": 46,
        "endLine": 125,
        "endChar": 86
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96b2f6c7_b9d0d3d3",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T11:08:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a1c2b03_cd3e3876",
      "range": {
        "startLine": 125,
        "startChar": 46,
        "endLine": 125,
        "endChar": 86
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb40dfc_158cae8c",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "For a pipeline layout, we always assign slots from the last slot number. And we need to bind all UAVs together, so the `lastSlot` must be `(UAVSlotCount - 1)`, and the `firstSlot` must be `(UAVSlotCount - mSortedUAVs.size())`, right?\n\nIf we switch to use one `std::vector`, we don\u0027t need to record slot numbers for UAVs.",
      "range": {
        "startLine": 136,
        "startChar": 17,
        "endLine": 136,
        "endChar": 25
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9b3abb9_265cd633",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T10:24:32Z",
      "side": 1,
      "message": "You are right. Just for a bit of robustness.",
      "parentUuid": "dcb40dfc_158cae8c",
      "range": {
        "startLine": 136,
        "startChar": 17,
        "endLine": 136,
        "endChar": 25
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01a16472_bd0547ec",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-14T11:23:15Z",
      "side": 1,
      "message": "We can use `ASSERT()s` for this purpose.",
      "parentUuid": "d9b3abb9_265cd633",
      "range": {
        "startLine": 136,
        "startChar": 17,
        "endLine": 136,
        "endChar": 25
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cc22c46_a3de0879",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "01a16472_bd0547ec",
      "range": {
        "startLine": 136,
        "startChar": 17,
        "endLine": 136,
        "endChar": 25
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18a7982e_9201a328",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T10:24:32Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 157,
        "startChar": 54,
        "endLine": 157,
        "endChar": 73
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24db487e_706e8770",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T11:08:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18a7982e_9201a328",
      "range": {
        "startLine": 157,
        "startChar": 54,
        "endLine": 157,
        "endChar": 73
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd1b9a9e_479181b7",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 310,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 308,
        "startChar": 0,
        "endLine": 310,
        "endChar": 5
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d701f49_940fcb89",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 414,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "We need to ubind all UAVs at once, right? What about the mLastAppliedPipelineLayout has two bind groups which have UAVs. but one bind group is replaced for the new draw. In this case, we will inherit the unchanged group, only rebind UAVs in the changed group. It will not work, right? Could you please add a test for this case?",
      "range": {
        "startLine": 412,
        "startChar": 0,
        "endLine": 414,
        "endChar": 46
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf63889a_a53b20b4",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 414,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-14T10:24:32Z",
      "side": 1,
      "message": "The line \"Note  RTVs, DSV, and UAVs cannot be set independently; they all need to be set at the same time.\" is annoyingly vague. Anyway it largely means that the slot bindings in previous calls to \"OMSetRenderTargetsAndUnorderedAccessViews\" don\u0027t take effect. Hence we are required to bind them all at the same time. Such being the case, my understanding is that we don\u0027t need to care the UAV unbindings of `mLastAppliedPipelineLayout` as they don\u0027t count. I could insert some code lines to internally check that, but not sure if I can develop it to an e2d test.",
      "parentUuid": "1d701f49_940fcb89",
      "range": {
        "startLine": 412,
        "startChar": 0,
        "endLine": 414,
        "endChar": 46
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b65eee54_26023a73",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 414,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-14T11:23:15Z",
      "side": 1,
      "message": "I think you can use `OMGetRenderTargetsAndUnorderedAccessViews()` in a demo program to verify if `OMSetRenderTargetsAndUnorderedAccessViews()` will unbind all slots automatically.\nIf it does, probable we just need to Call `OMSetRenderTargetsAndUnorderedAccessViews(0, nullptr, nullptr, 0, 0, nullptr, nullptr)` to unbound all UAVs at once before calling ApplyGroup()\n\nBTW, we need to unbind UAVs from last pipeline first, otherwise bind the same resource to device context as shader input resources(SRV, etc) will fail. D3D11 doesn\u0027t allow a resource being bound to UAV slot and other slot at same time. That why `UnApplyGroup()` is added. see comment at line 110",
      "parentUuid": "bf63889a_a53b20b4",
      "range": {
        "startLine": 412,
        "startChar": 0,
        "endLine": 414,
        "endChar": 46
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f9e4e8_bb18696b",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 414,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "[3] shows UAV slots can be successfully unset while switching the pipelines in the same render pass.\n`\n[ RUN      ] DynamicBufferOffsetTests.InheritDynamicOffsetsRenderPipeline/D3D11_Intel_R_UHD_Graphics_770\nDump all used UAV slots ...\nDump done.\nDump all used UAV slots ...\nDump done.\n[       OK ] DynamicBufferOffsetTests.InheritDynamicOffsetsRenderPipeline/D3D11_Intel_R_UHD_Graphics_770 (63 ms)\n`",
      "parentUuid": "b65eee54_26023a73",
      "range": {
        "startLine": 412,
        "startChar": 0,
        "endLine": 414,
        "endChar": 46
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c509c082_eb19d0ae",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 414,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-15T11:29:56Z",
      "side": 1,
      "message": "Yeah. Right now, `CanInheritBindGroups` is false, `BindGroupTracker::BeforeApply()` will mark all groups are dirty, so `UnApplyGroup()` will be called for all groups in last pipeline.",
      "parentUuid": "57f9e4e8_bb18696b",
      "range": {
        "startLine": 412,
        "startChar": 0,
        "endLine": 414,
        "endChar": 46
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7be7283c_273d93dd",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "nit: `const bool`",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 8
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f906bec_c2a7c4bf",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7be7283c_273d93dd",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 8
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9b39d7d_2927d87e",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "nit: `/*isRenderPass\u003d*/false`.",
      "range": {
        "startLine": 325,
        "startChar": 54,
        "endLine": 325,
        "endChar": 59
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6330a139_eee3473e",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9b39d7d_2927d87e",
      "range": {
        "startLine": 325,
        "startChar": 54,
        "endLine": 325,
        "endChar": 59
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56ef005e_5d8dcf08",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 483,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-13T12:52:46Z",
      "side": 1,
      "message": "nit: same here",
      "range": {
        "startLine": 483,
        "startChar": 54,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2cf50755_1a19a901",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 483,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-15T08:40:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56ef005e_5d8dcf08",
      "range": {
        "startLine": 483,
        "startChar": 54,
        "endLine": 483,
        "endChar": 58
      },
      "revId": "8e266854c350a12232e4f4e78ec33be1c998bd72",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}