{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d65e7731_5a335e3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-04T08:30:19Z",
      "side": 1,
      "message": "Ben PTAL! I think you missed this one.",
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "958fbedd_6b9f12cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-04T08:33:12Z",
      "side": 1,
      "message": "https://www.w3.org/TR/WGSL/#textual-structure states:\n\n\u003e The program text must not include a null character.\n\n\nSo... This shouldn\u0027t be reachable code?",
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50928478_6ba0d117",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-04T08:34:31Z",
      "side": 1,
      "message": "This is for the entryPoint passed from the API to match against the shader. WGSL can\u0027t contain a \\0, but \"main\\0\" shouldn\u0027t match with the entryPoint \"main\" in the shader.",
      "parentUuid": "958fbedd_6b9f12cb",
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4062885_a198f709",
        "filename": "src/dawn/node/binding/Converter.cpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-04T09:26:42Z",
      "side": 1,
      "message": "What do you think about putting this logic in `src/dawn/node/binding/Converter.h`\u0027s string conversion function, and using that?\n\n```\n        // std::string to C string\n        inline bool Convert(const char*\u0026 out, const std::string\u0026 in) {\n            out \u003d in.c_str();\n            return true;\n        }\n```\n\nOr do you think there\u0027s no other places where null characters might creep in?",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 554,
        "endChar": 36
      },
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4643cc2f_6e54897b",
        "filename": "src/dawn/node/binding/Converter.cpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-04T10:25:16Z",
      "side": 1,
      "message": "This would make \\0 in WGSL code pass through and would make it valid in comments. Note that this is an existing issue in Dawn right now because we take WGSL as a null-terminated string.\n\nOther places where we\u0027d need to do this workarounds would be GPUShaderModule.hints keys, GPUPipelineDescriptorBase.constants keys and I think that\u0027s it.\n\nWDYT of putting this code in a helper function so it can be reused easily, but not changing Convert(std::string)?",
      "parentUuid": "f4062885_a198f709",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 554,
        "endChar": 36
      },
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b52bc7f_1c1f6004",
        "filename": "src/dawn/node/binding/Converter.cpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-04T11:49:45Z",
      "side": 1,
      "message": "Copying in IM discussions here:\n\nI feel this is a bodge, highlighting a problem with the Dawn interface. Changing the actual data at the binding layer is just going to add WTFs.\n\nI\u0027d personally prefer to either:\n\n(a) Change the Dawn API so that it can accept strings that contain `\\0`. Having a `const char*` paired with an optional length is a common pattern, and would suffice.\n(b) Change the spec to forbid `\\0` from all API interfaces, and reject these consistently.\n\nIf we can agree on one of these, and file issues so this is actually tracked, and link to that issue here, I\u0027d be happy to land this as a temporary solution.",
      "parentUuid": "4643cc2f_6e54897b",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 554,
        "endChar": 36
      },
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01caf0b9_6dc4c878",
        "filename": "src/dawn/node/binding/Converter.cpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-04T14:11:23Z",
      "side": 1,
      "message": "Done, filed crbug.com/dawn/1345",
      "parentUuid": "3b52bc7f_1c1f6004",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 554,
        "endChar": 36
      },
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cbda6ff_7d3dffbc",
        "filename": "src/dawn/node/binding/Converter.cpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-04T18:56:15Z",
      "side": 1,
      "message": "Thanks",
      "parentUuid": "01caf0b9_6dc4c878",
      "range": {
        "startLine": 543,
        "startChar": 0,
        "endLine": 554,
        "endChar": 36
      },
      "revId": "eddd8db935af5c2d4a94cceb07fbad0855d8def1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}