{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "547fe837_005c5c65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-06-13T02:48:13Z",
      "side": 1,
      "message": "Please take a look, thanks",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e7df550_3cee6f47",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T12:40:44Z",
      "side": 1,
      "message": "IMHO the instance should set up the toggles before passing them to the Adapter. Here we have three things happening to the toggle state which don\u0027t really make sense to live in the adapter: inheritance, overrides for the adapter, and overrides from the backend.",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5a6ab47_4b25c1b0",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 39,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-14T06:13:01Z",
      "side": 1,
      "message": "oh - I think this happened due to my suggestion. Because it didn\u0027t seem like it should be allowed to create an adapter without doing all of those three steps; they should be part of every construction.\n\nThough I was thinking that DawnTogglesDescriptor would be an argument to AdapterBase. so it would do all of creating TogglesState, inheriting, and backend overrides.",
      "parentUuid": "4e7df550_3cee6f47",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16fbf59e_367bd1e1",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 39,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-06-14T06:21:25Z",
      "side": 1,
      "message": "Yes I think adapter inheriting instance toggles is a critical path, although in some test it may be unnecessary?\nIn the latest patchset I change it back again, but I can still change it if we decide to handle the descriptor in AdapterBase ctor.",
      "parentUuid": "c5a6ab47_4b25c1b0",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be8bf29c_b8fe05ce",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-14T13:22:09Z",
      "side": 1,
      "message": "Ah ok, sorry for the back and forth. I agree that it\u0027s not ideal that we need these steps to happen but also don\u0027t have them in the adapter. What about putting it in an Adapter::Create() method, such that the constructor of the adapter doesn\u0027t have fancy logic, but we also can\u0027t create an adapter without these steps (because the constructor would become private)?\n\nAll three solutions would work though.",
      "parentUuid": "16fbf59e_367bd1e1",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08941104_8e8d6178",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 50,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T12:40:44Z",
      "side": 1,
      "message": "[1] We could query the features only once on initialization and cache them on the AdapterBase. This would allow moving the implementation of APIHasFeature and APIEnumerateFeatures to the adapter.",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4234299_3d70cba0",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 150,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T12:40:44Z",
      "side": 1,
      "message": "With [1] we don\u0027t really need to have this validation anymore, and ValidateFeatureSupportedWithToggles becomes \"IsFeatureSupported\" or maybe even we only need PhysicalDevice::GetSupportedFeatures(Toggles) -\u003e FeatureSet",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28d13f8d_cef3cb56",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 9
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T12:40:44Z",
      "side": 1,
      "message": "Where is this constructor used? Isn\u0027t it the same as passing a defaulted TogglesState?",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01a477ea_29d9cc6f",
        "filename": "src/dawn/native/Adapter.h",
        "patchSetId": 9
      },
      "lineNbr": 34,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-06-14T06:21:25Z",
      "side": 1,
      "message": "Removed. They were used in some unittests.",
      "parentUuid": "28d13f8d_cef3cb56",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc987625_01ec5289",
        "filename": "src/dawn/native/PhysicalDevice.cpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T12:40:44Z",
      "side": 1,
      "message": "We should avoid using error handling for things that aren\u0027t errors. Here a boolean would be sufficient. Also see [1]",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2062c87a_282ffe39",
        "filename": "src/dawn/native/PhysicalDevice.cpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-06-14T06:21:25Z",
      "side": 1,
      "message": "A point is that the error of `ValidateFeatureSupportedWithToggles` is used to provide informative error message (\"xxx feature require toggle xxx\") when user creating devices. Most other usage of this function don\u0027t need the error, but I thought if we need this error message then we should keep this validatation function and just reuse it?",
      "parentUuid": "fc987625_01ec5289",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e7f849c_83d85565",
        "filename": "src/dawn/native/PhysicalDevice.cpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-14T13:22:09Z",
      "side": 1,
      "message": "IMHO we could just remove the message. It\u0027s only useful for DXC and F16, and we\u0027re looking at how to ship DXC anyway so it won\u0027t be needed for too long.",
      "parentUuid": "2062c87a_282ffe39",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5edb7c80_c7345f36",
        "filename": "src/dawn/native/PhysicalDevice.cpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-06-14T13:27:54Z",
      "side": 1,
      "message": "The \"feature guarded by AllowUnsafeAPIs\" message also generated here. Just replace them with a general \"xxx feature not supported\" or \"xxx feature not supported with given toggles\"?",
      "parentUuid": "2e7f849c_83d85565",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a36420b9_3f89c5c0",
        "filename": "src/dawn/native/PhysicalDevice.cpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-14T13:44:29Z",
      "side": 1,
      "message": "Ah gotcha, that might be a reason to keep the code as it is now, using Validate methods to get booleans but it\u0027s a bit ugly. I don\u0027t really see a better way :/\n\nThat said, this should be changed to be done only once at adapter creation with [1].",
      "parentUuid": "5edb7c80_c7345f36",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c53f1ffa_33ca51b5",
        "filename": "src/dawn/native/PhysicalDevice.cpp",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2023-06-14T13:51:18Z",
      "side": 1,
      "message": "Sorry for making this annoying, but I thought this validate method have to called every time when creating a device from the adapter to get proper message, or if we cached the valid features in AdapterBase and only check the cache when creating device we will just lost the reason why a feature is not supported in the cached features list and have to report a general error message...",
      "parentUuid": "a36420b9_3f89c5c0",
      "revId": "e323e8865f797fef3af2500774e4215ce95cdf04",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}