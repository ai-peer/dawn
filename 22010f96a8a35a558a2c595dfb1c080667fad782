{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "94ef1547_81009594",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2024-01-18T23:53:07Z",
      "side": 1,
      "message": "PTAL! This makes a massive difference in the test pages I\u0027ve tried it with. (In one case I measured the validation as being over 400x faster due to increased batching.)",
      "revId": "22010f96a8a35a558a2c595dfb1c080667fad782",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d556b98b_908144a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-19T16:57:56Z",
      "side": 1,
      "message": "LGTM",
      "revId": "22010f96a8a35a558a2c595dfb1c080667fad782",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dba78f37_03a39d0c",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2024-01-18T23:53:07Z",
      "side": 1,
      "message": "FYI: I would have preferred to copy the indirectOffset and numIndexBufferElements here to a struct with properly named members but the struct alignment for a { uint32_t, uint64_t } didn\u0027t line up with the WGSL struct\u0027s binary layout. I could have made it work with additional padding, but given that we\u0027re allocating an additional 8 bytes already for every draw validation with this patch I wanted to try and keep the memory impact to a minimum.",
      "revId": "22010f96a8a35a558a2c595dfb1c080667fad782",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a89105d7_e5353e4c",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-19T16:57:56Z",
      "side": 1,
      "message": "Ack, could we maybe still use a `struct DrawData { uint32_t data[3];}` and rename the `indirectOffsets` pointer?",
      "parentUuid": "dba78f37_03a39d0c",
      "revId": "22010f96a8a35a558a2c595dfb1c080667fad782",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bf44370_39eb7c21",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-19T17:09:11Z",
      "side": 1,
      "message": "or even?\n\n```\nstruct IndirectDraw {\n  indirectOffset: uint32_t;\n  numIndexBufferElementsLow: uint32_t;\n  numIndexBufferElementsHigh: uint32_t;\n};\n\nstatic_assert(sizeof(IndirectDraw) \u003d\u003d sizeof(uint32_t) * 3);\nstatic_assert(alignof(IndirectDraw) \u003d\u003d alignof(uint32_t));\n\nauto* indirectDrawData \u003d reinterpret_cast\u003cIndirectDraw*\u003e(batch.batchInfo + 1);\nfor (draw : draws) {\n  indirectDrawData-\u003eindirectOffset \u003d ...;\n  indirectDrawData-\u003enumIndexBufferElementsLow \u003d elements \u0026 0xFFFFFFFF;\n  indirectDrawData-\u003enumIndexBufferElementsHigh \u003d (elements \u003e\u003e 32) \u0026 0xFFFFFFFF;\n  indirectDrawData +\u003d 1;\n}\n```\n\nthis way it matches WGSL exactly\n\nLGTM though",
      "parentUuid": "a89105d7_e5353e4c",
      "revId": "22010f96a8a35a558a2c595dfb1c080667fad782",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}