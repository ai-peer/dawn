{
  "comments": [
    {
      "key": {
        "uuid": "0bc399e0_073e8170",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-16T17:03:34Z",
      "side": 1,
      "message": "nit: This validation is redundant with the one in RenderPassEncoder.cpp and could be removed.",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0393a781_b4f97186",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-17T01:16:09Z",
      "side": 1,
      "message": "In RenderPassEncoder and ComputePassEncoder, there is only Object validation. I saw these validations are checked when command encoder finish, so put it here. It should be added to RenderPassEncoder and ComputePassEncoder, right?",
      "parentUuid": "0bc399e0_073e8170",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae37bd8_9f1271c3",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-17T23:20:44Z",
      "side": 1,
      "message": "not sure I\u0027m following this conversation thread, but I don\u0027t see this validation in Render/ComputePassEncoder currently.\n\nOn a separate note, @Corentin, I\u0027m a bit confused that most of the validation is in these functions, which happens on Finish(), except for a couple random bits like [1] [2] [3]. I feel like all of the pass validation should be moved to CommandValidation.cpp. Maybe I missed doing this in the past.\n 1) This makes it easier for the skip validation toggle to turn everything off\n 2) better supports the future where I hope the wire format can be the same as this command format, and we can just copy the transfer buffer, convert ids to Ref\u003c\u003es, and run it through validation",
      "parentUuid": "0393a781_b4f97186",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fc8c5c0_f94088bb",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-18T07:29:55Z",
      "side": 1,
      "message": "Oh yeah, we talked offline with Hao and my comment was wrong, it should have said that this validation can be moved to RenderPassEncoder/ComputePassEncoder.cpp\n\nIn my mind I thought we wanted to move everything in the encoders so that we could get rid of this validation pass. The decision of what passes are required, where validation happens, etc, has far reaching consequences and we should figure out what we want to do in the long term. There\u0027s many different aspects to consider so I think either is fine in this CL and we should make a design doc that investigates what the different possibilities are, and what the resulting tradeoffs are.",
      "parentUuid": "4ae37bd8_9f1271c3",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7985fc63_92c1abb3",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fc8c5c0_f94088bb",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec66b5e8_9284fb89",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-16T17:03:34Z",
      "side": 1,
      "message": "ditto.",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9a7122a_cc3c89c5",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec66b5e8_9284fb89",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "837978e9_413e8fde",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-16T17:03:34Z",
      "side": 1,
      "message": "Since QuerySets are destroyable, we should track the set of all QuerySets used in a command buffer similarly to texture / buffers and validate on Queue::Submit that they can be used (i.e. they are not destroyed). https://source.chromium.org/chromium/chromium/src/+/master:third_party/dawn/src/dawn_native/Queue.cpp;l\u003d133\n\nWe should also have tests for it.",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d595ca6_e2a04d99",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "837978e9_413e8fde",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5ddde28_436deec9",
        "filename": "src/dawn_native/Commands.cpp",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-16T17:03:34Z",
      "side": 1,
      "message": "Can you add the same empty switches in the backends along with a return DAWN_UNIMPLEMENTED_ERROR()? This way fuzzer won\u0027t be able to crash backends by doing calls to WriteTimestamp.",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72e4ecbe_4d19adf7",
        "filename": "src/dawn_native/Commands.cpp",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5ddde28_436deec9",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3792d2c4_dd38e528",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-17T23:20:44Z",
      "side": 1,
      "message": "[1]",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c22dfbcb_b0272101",
        "filename": "src/dawn_native/ComputePassEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3792d2c4_dd38e528",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42c743b0_fe86d500",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-17T23:20:44Z",
      "side": 1,
      "message": "[2]",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59ecd7da_dde5662f",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42c743b0_fe86d500",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8464e150_591dcccb",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-17T23:20:44Z",
      "side": 1,
      "message": "[3]",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c3aea9_0fddcac1",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-06-29T10:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8464e150_591dcccb",
      "revId": "ec9d1c3e4c3f6a9c10f027b71357ee6f1bc14c48",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}