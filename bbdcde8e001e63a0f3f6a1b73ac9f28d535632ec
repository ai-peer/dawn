{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "aff8f66e_72b94baf",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1160,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-01T23:11:16Z",
      "side": 1,
      "message": "I think we can be pretty confident that this is what the upstream equivalent will be, so would just remove the TODO and tags.",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "704fd727_b6c0afb0",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1680,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-01T23:11:16Z",
      "side": 1,
      "message": "same",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb85c84c_af906dcc",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-01T20:56:47Z",
      "side": 1,
      "message": "This is causing a problem and I don\u0027t know why? While the checks above work fine if I assign the descriptor\u0027s label to mLabel (an std::string) then it starts causing crashes when I run the code from Chrome. This is really confusing because every other object that uses a label is effectively doing the same thing without issue?",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8d35ae8_41e5e2a6",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-01T22:03:05Z",
      "side": 1,
      "message": "hm, maybe because in Chrome we don\u0027t zero-initialize the device descriptor?\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:gpu/command_buffer/service/webgpu_decoder_impl.cc;l\u003d1064;bpv\u003d1;bpt\u003d1?q\u003dwebgpu_decoder_impl\n\nso it\u0027s pointing to just garbage and going through random bytes.\nMaybe strlen gives up at some point and returns 0.",
      "parentUuid": "eb85c84c_af906dcc",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b4a6589_b1e2300a",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-01T22:59:08Z",
      "side": 1,
      "message": "*sigh* Yup, that fixes it. I\u0027ll have to land that change first then.\n\nOut of curiosity, why does RequestDevice have that sort of two-stage descriptor (DeviceProperties in Blink-\u003eDeviceDescriptor in the Command Bufffer) rather than just passing one directly from Blink like we do every other object?",
      "parentUuid": "a8d35ae8_41e5e2a6",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d59b8d2_f9b1c829",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-04-01T23:05:51Z",
      "side": 1,
      "message": "most other objects go directly from Blink -\u003e dawn::wire -\u003e dawn::native\nNot the case for requestDevice cause we want to do \"stuff\", so there\u0027s this other custom serialization thing.\nI want to get rid of it and use the wire serialization, but haven\u0027t gotten around to providing a way for webgpu_decoder_impl to still customize the implementation of requestDevice to do things like set Dawn toggles, etc.\n\nbasically, it\u0027s an artifact of old code, and there\u0027s some new stuff we need to implement to fully remove it",
      "parentUuid": "8b4a6589_b1e2300a",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3fa249d_3d476563",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-04-01T23:11:16Z",
      "side": 1,
      "message": "If only we were using the C++ API in Blink, which defaults it to nullptr :)\n\nre: last thing: likely historical due to the recent change from a dawn-specific init API to the standard one?",
      "parentUuid": "8b4a6589_b1e2300a",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15eb48e6_13890afb",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-04-01T20:56:47Z",
      "side": 1,
      "message": "Same problem here as well.",
      "revId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "bbdcde8e001e63a0f3f6a1b73ac9f28d535632ec",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}