{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b97913e7_2ae2f95e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-09-28T21:28:11Z",
      "side": 1,
      "message": "I think this CL is now ready for more thorough review, given that all precursors are merged.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "740c71cf_3cf47515",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-29T17:57:10Z",
      "side": 1,
      "message": "could you follow this process to add it to third_party?\nhttps://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/adding_to_third_party.md",
      "parentUuid": "b97913e7_2ae2f95e",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfb8aede_11c9d378",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-29T17:57:10Z",
      "side": 1,
      "message": "looks okay, but we really need to first resolve how we\u0027re going to build this project\n",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a567f959_52fb6dd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-09-29T22:04:42Z",
      "side": 1,
      "message": "I agree we need to resolve how to build the project before we ship on-by-default. \n\nHowever, I do not think that decision should block this CL. We already have a similar toggle for DXC that allows people to test in that configuration with outside binaries. Mesa should be the same.",
      "parentUuid": "dfb8aede_11c9d378",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "198acce9_aa8f654d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:57:37Z",
      "side": 1,
      "message": "DXC was already some cruft that because it is a completely untested codepath. This CL is in a sense worse than what we already have for DXC because the headers and the lib are not part of the Windows SDK so it has to check stuff in Dawn.",
      "parentUuid": "a567f959_52fb6dd1",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f277f8b_89d040fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-09-30T20:34:55Z",
      "side": 1,
      "message": "(Unresolving this so we can discuss as an open issue)\n\nTo be clear, there is no lib linking requirement here. Same as with the DXC toggle, the DLL must be provided externally by the person using the toggle.\n\nFor header files, Dawn\u0027s DXC and PIX functionality does not include external header files. However, in PlatformFunctions.h, the code typedefs the exact function pointer that happens to be exposed by the two DLLs. We could do that instead if you wish. :-)\n\nIs it the license you\u0027re worried about? Lack of a plan for shipping?\n\nIf the latter, how do we move forward? Would you like a GN file? Is it up to me to drive this with people external to the Dawn team on my own?",
      "parentUuid": "198acce9_aa8f654d",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "828cd3f8_829bb1e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-01T12:05:59Z",
      "side": 1,
      "message": "Yeah the typedef aren\u0027t great either.\n\nI\u0027m worried about adding build scripts and headers for a dependency in random places in the repo. I don\u0027t really mind the license since it is BSD 3-clause as far as I can tell, but 1) we would need a README.dawn that explains what the license is in the spirv_to_dxil folder and 2) since the copyright is Microsoft, I think I should remind you it will get contributed under the Google CLA.\n\nThe plan for shipping being ??? is concerning yes. As discussed in previous meetings I think you should start a thread with Chrome eng review for this addition of this third-party dependency. If you want to ship a .dll and not be part of the CHromium build then you should highlight that. Otherwise we\u0027ll need GN files.",
      "parentUuid": "2f277f8b_89d040fd",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "345faded_43d2d792",
        "filename": "build_mesa.ps1",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "Can we avoid checking in this script until we have GN files for spirv_to_dxil (or decided to do something different). Or at least have it in scripts/ and with a license.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1f728fd_020b0d13",
        "filename": "build_mesa.ps1",
        "patchSetId": 30
      },
      "lineNbr": 21,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "spirv_to_dxil is an external dependency, so I think it should be in third_party/spirv_to_dxil/spirv_to_dxil.h or something like that to make it clear. But also the header is present in this CL?",
      "range": {
        "startLine": 21,
        "startChar": 88,
        "endLine": 21,
        "endChar": 109
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffb6d4a6_ccd37962",
        "filename": "src/dawn_native/Toggles.h",
        "patchSetId": 30
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "nit UseMesaSpirvToDxil, Mesa is a lot more than the translator.",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 15
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "024a5e18_aba2d56d",
        "filename": "src/dawn_native/Toggles.h",
        "patchSetId": 30
      },
      "lineNbr": 48,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffb6d4a6_ccd37962",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 15
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8921aff_79111fed",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 208,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-09-29T22:04:42Z",
      "side": 1,
      "message": "I see this hardcoded number used in a couple of places. Please put it in a comment and describe why 60 was chosen.",
      "range": {
        "startLine": 208,
        "startChar": 42,
        "endLine": 208,
        "endChar": 44
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26224927_ec974055",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 208,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "I\u0027ve moved this check into a function that\u0027s documented.",
      "parentUuid": "b8921aff_79111fed",
      "range": {
        "startLine": 208,
        "startChar": 42,
        "endLine": 208,
        "endChar": 44
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc1e7090_7a3416e6",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 214,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-29T17:57:10Z",
      "side": 1,
      "message": "nit: could also ForceSetToggle to false if this is not available",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 214,
        "endChar": 82
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2152898_14c4f9c6",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 214,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "I\u0027ve added a check for DXIL.dll in IsSPIRVToDXILAvailable, which should make this behave similarly to ApplyUseDxcToggle. Should I update both ApplyUseMesaToggle and ApplyUseDxcToggle to disable their toggles if the DXC libs fail to load?",
      "parentUuid": "fc1e7090_7a3416e6",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 214,
        "endChar": 82
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e575461_25f3dc5a",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 214,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-04T15:46:36Z",
      "side": 1,
      "message": "No strong opinion here. ForceToggle to off would mean we\u0027re more robust but we\u0027d also silently fall back to something the application isn\u0027t expecting.",
      "parentUuid": "f2152898_14c4f9c6",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 214,
        "endChar": 82
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a019528a_d2aa4d6e",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 97,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "nit: SpirvToDxil?",
      "range": {
        "startLine": 97,
        "startChar": 38,
        "endLine": 97,
        "endChar": 42
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "191791f8_f79b1c2b",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 97,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done\n\nI\u0027d previously had suspicions about having Mesa and SpirvToDxil both floating around, but I agree that letting it be SpirvToDxil everywhere in the code and acknowledging somewhere once (perhaps on the toggle?) that it comes from Mesa is probably best.",
      "parentUuid": "a019528a_d2aa4d6e",
      "range": {
        "startLine": 97,
        "startChar": 38,
        "endLine": 97,
        "endChar": 42
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2ee674_55210d83",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "Half of these variables are uninitialized and will cause the hash of the request to vary from run to run.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06f9e077_dfd68d2c",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 100,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "I think I got all the fields in the ShaderCompilationRequest::Create function, perhaps I\u0027m unaware of an aspect of C++? Or is the concern a user creating a ShaderCompilationRequest without ::Create?\n\nDoes it make sense for me to provide explicit default initializers for each of these fields?",
      "parentUuid": "ac2ee674_55210d83",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6feb33c_fa9c90c5",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-04T15:46:36Z",
      "side": 1,
      "message": "Ah, my bad, I didn\u0027t see that we explicitly default some of them at the top of ::Create.",
      "parentUuid": "06f9e077_dfd68d2c",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d66ba1d_65ecf986",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 396,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "ApplyCommonD3DTransforms?",
      "range": {
        "startLine": 396,
        "startChar": 37,
        "endLine": 396,
        "endChar": 57
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "928542cf_3d24bd10",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 396,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d66ba1d_65ecf986",
      "range": {
        "startLine": 396,
        "startChar": 37,
        "endLine": 396,
        "endChar": 57
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec3e98b8_4b70adc9",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 459,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-09-29T22:04:42Z",
      "side": 1,
      "message": "The way the method is currently structured, it will return a valid remappedEntryPointName even when the method, itself, returns a failure.\n\nTo keep the failure cases consistent and avoid strings existing for longer than they should, please have TranslateTintProgram write to a local, remappedEntryPointName variable and std::move the local to the out parameter at the place where the entire method returns success.",
      "range": {
        "startLine": 459,
        "startChar": 23,
        "endLine": 459,
        "endChar": 72
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50dc1f91_296ff254",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 459,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec3e98b8_4b70adc9",
      "range": {
        "startLine": 459,
        "startChar": 23,
        "endLine": 459,
        "endChar": 72
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c09e6a8_61022711",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 465,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "TranslateToDxilThroughSPIRV?",
      "range": {
        "startLine": 465,
        "startChar": 40,
        "endLine": 465,
        "endChar": 57
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e493069d_6b20f3bf",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 465,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c09e6a8_61022711",
      "range": {
        "startLine": 465,
        "startChar": 40,
        "endLine": 465,
        "endChar": 57
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b46ea17_01f9b761",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 508,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "Does spirv_to_dxil produce any error messages?",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26939d63_a7dd636a",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 508,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "At the moment, ICEs in mesa turn into stderr output (if some env variables are set) and an assert. I\u0027m currently looking into bubbling those error messages up through a user-definde logger, but IIUC the goal of mesa is to be infallible for valid SPIR-V input.",
      "parentUuid": "6b46ea17_01f9b761",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62ddc848_cae8af02",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 508,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-04T15:46:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "26939d63_a7dd636a",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6976716_4fbd3723",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 513,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "nit: I think it is marginally simpler as a RAII class manually defined:\n\nstruct ScopeSpirvDxilObject : NonMovable {\n  dxil_spirv_object object \u003d {};\n  ~ScopeSpirvDxilObject() {\n    spirvToDxilFree(\u0026dxil); // Add an \"if\" if there is no null check in the \"free\" function\n  }\n};",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "499ec872_77d3f075",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 513,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Sounds good. I\u0027ve defined it inline, please let me know if it\u0027d be better in the header (or e.g. in the anonymous namespace at the top of this cpp file)",
      "parentUuid": "b6976716_4fbd3723",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c859567d_f2eb540d",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 513,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-04T15:46:36Z",
      "side": 1,
      "message": "Ah, since this is now an implementation of IDxcBlob, I think it is a bit big and could go in an anonymous namespace. Looks good otherwise.",
      "parentUuid": "499ec872_77d3f075",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84c78574_60b598fb",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 571,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "This could be in TranslateToHLSL. This way could separate the DXC and FXC cases instead of having part common code, part different code.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6665503c_da41daf3",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 571,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Sounds good. Please let me know if you\u0027re also suggesting to moving the call to TranslateToHLSL into CompileShader{DXC,FXC}.",
      "parentUuid": "84c78574_60b598fb",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3ab1e06_6160260b",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 30
      },
      "lineNbr": 571,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-04T15:46:36Z",
      "side": 1,
      "message": "I think it\u0027s ok as is. Steps are very clear.",
      "parentUuid": "6665503c_da41daf3",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bb0ce24_675eaa7e",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.h",
        "patchSetId": 30
      },
      "lineNbr": 40,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "I think we could have either compiledDXBCShader and compiledDXILShader. There doesn\u0027t seem to be a functional difference between mesa and DXC.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eddb5752_4bad18bd",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.h",
        "patchSetId": 30
      },
      "lineNbr": 40,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "You\u0027re correct, I\u0027ll merge the mesa and dxc fields.",
      "parentUuid": "3bb0ce24_675eaa7e",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57e01031_28ed9e79",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 553,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-09-29T22:04:42Z",
      "side": 1,
      "message": "Is there a plan to remove this \"hack\"?",
      "range": {
        "startLine": 553,
        "startChar": 16,
        "endLine": 553,
        "endChar": 86
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0c9f91a_c957a8e0",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 553,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "We\u0027ll need to remove this landing. You can use --enable-toggle\u003duse_mesa",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5c4024a_a467333c",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 553,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Yes, I\u0027ll remove it. This was mostly for ease of testing, but can be replicated with --enable_toggle\u003d\"use_mesa\" (or \"use_spirv_to_dxil\" soon)",
      "parentUuid": "57e01031_28ed9e79",
      "range": {
        "startLine": 553,
        "startChar": 16,
        "endLine": 553,
        "endChar": 86
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24d278e0_6cb1f75f",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 553,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0c9f91a_c957a8e0",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16107c6f_950aa319",
        "filename": "third_party/mesa/BUILD.gn",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "nit: slight preference to have this in spirv_to_dxil.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7990248f_4bcb525b",
        "filename": "third_party/mesa/BUILD.gn",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16107c6f_950aa319",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b192338e_b36eb3f3",
        "filename": "third_party/mesa/BUILD.gn",
        "patchSetId": 30
      },
      "lineNbr": 1,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-29T17:57:10Z",
      "side": 1,
      "message": "2021",
      "range": {
        "startLine": 1,
        "startChar": 12,
        "endLine": 1,
        "endChar": 16
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69d6d455_70bf66bd",
        "filename": "third_party/mesa/BUILD.gn",
        "patchSetId": 30
      },
      "lineNbr": 1,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "nit: 2021",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d0a95cb_4c353c98",
        "filename": "third_party/mesa/BUILD.gn",
        "patchSetId": 30
      },
      "lineNbr": 1,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69d6d455_70bf66bd",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "264bbd7b_cac8c4c0",
        "filename": "third_party/mesa/BUILD.gn",
        "patchSetId": 30
      },
      "lineNbr": 1,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-10-01T19:12:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b192338e_b36eb3f3",
      "range": {
        "startLine": 1,
        "startChar": 12,
        "endLine": 1,
        "endChar": 16
      },
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77834ba0_e4e9ec9e",
        "filename": "third_party/mesa/spirv_to_dxil.h",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "Note that this is implicitly contributing this file under the Google CLA. I think it would be simpler to not check in the file until we figure out the GN integration or otherwise of spirv_to_dxil.",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7b3bd47_9fbd2aba",
        "filename": "third_party/mesa/spirv_to_dxil.h",
        "patchSetId": 30
      },
      "lineNbr": 125,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-30T15:54:36Z",
      "side": 1,
      "message": "Is the API extensible enough that we won\u0027t need to do breaking changes at the same time we roll the header?",
      "revId": "cb81d348cbe991d4fa28766cdbfc69ebbe8050fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}