{
  "comments": [
    {
      "key": {
        "uuid": "37752b91_7b616272",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 877,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-06T21:32:20Z",
      "side": 1,
      "message": "Even though we\u0027re using ClearRenderTargetView, I think we should still consider it a \"lazy clear\".\n\nAlso, should this call SetIsSubresourceContentInitialized ?",
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c32ca11_bbe39e5d",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 877,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-08-06T21:37:38Z",
      "side": 1,
      "message": "we set it initialized if the storeop is store. since vulkan doens\u0027t count this part as a \"lazy clear\" if we count it here, the backdoor counts are not the same and the TextureZero test fails when comparing the expected lazy clear counts. I think corentin said we could mock the count for GL, i wasn\u0027t sure if we could mock it here too.",
      "parentUuid": "37752b91_7b616272",
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ff794ad_0cd9b960",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 877,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-06T21:55:37Z",
      "side": 1,
      "message": "Ah, I was thinking we would also count it on Vulkan, so right here and at [1] we would just do:\nGetDevice()-\u003eIncrementLazyClearCountForTesting();\n\nDid Corentin say that we should not count the standalone clear operations as lazy clears?",
      "parentUuid": "2c32ca11_bbe39e5d",
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f217bd78_3a3b706f",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 877,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-08-07T16:49:01Z",
      "side": 1,
      "message": "I thought we wanted to differentiate the standalone clear operation with the load op clearing, even if D3D12 isn\u0027t doing that right now (in the email he said D3D12 will eventually be optimized). I think only Vulkan is optimizing the clears using the loadop (And Metal but we haven\u0027t implemented clearing in Metal). What do you think we should do? \n\n\nthis is from the original email from Corentin\n\"In backends with the concept of render passes (Metal, Vulkan, eventually D3D12) we need to make sure the clearing of attachments is done via the renderpass load op instead of a standalone clear operation because that\u0027s much more efficient on modern desktop GPUs and mobile GPUs.\"",
      "parentUuid": "5ff794ad_0cd9b960",
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0605b8c2_4e764122",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 877,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-07T18:18:12Z",
      "side": 1,
      "message": "Okay, let\u0027s continue with separating these counts then.",
      "parentUuid": "f217bd78_3a3b706f",
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4907465d_ae21b744",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 882,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-06T21:32:20Z",
      "side": 1,
      "message": "nit: We usually explicitly check pointers with \"ptr !\u003d nullptr\"",
      "range": {
        "startLine": 882,
        "startChar": 20,
        "endLine": 882,
        "endChar": 31
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce086301_5a27b6f3",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 882,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-08-06T21:37:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4907465d_ae21b744",
      "range": {
        "startLine": 882,
        "startChar": 20,
        "endLine": 882,
        "endChar": 31
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43311399_c14a6ad1",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-06T21:32:20Z",
      "side": 1,
      "message": "Why do we need to initialize the resolve texture? Won\u0027t it be initialized when we resolve into it from the source color attachment?",
      "range": {
        "startLine": 884,
        "startChar": 26,
        "endLine": 884,
        "endChar": 61
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11d50c71_bb6a1f58",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-08-06T21:37:38Z",
      "side": 1,
      "message": "is it possible that not the entire texture gets resolved? I think i ran into some test failures without this.",
      "parentUuid": "43311399_c14a6ad1",
      "range": {
        "startLine": 884,
        "startChar": 26,
        "endLine": 884,
        "endChar": 61
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0438795_0a33763e",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-07T17:52:54Z",
      "side": 1,
      "message": "I, too, had the same question as Austin. Since the resolve texture is the output of the render pass, correctly clearing the inputs should result in the resolve target containing initialized data. If we clear the resolve target, there\u0027s no point in running the render pass to begin with.\n\n(Same comment goes for the Vulkan backend)",
      "parentUuid": "11d50c71_bb6a1f58",
      "range": {
        "startLine": 884,
        "startChar": 26,
        "endLine": 884,
        "endChar": 61
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb05eef_2709f7e0",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 884,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-07T18:18:12Z",
      "side": 1,
      "message": "Rafael: This is clearing the resolve target before we execute the render pass though.\n\nNatasha: If the storeop is Store (which is the only one Dawn has right now), then it\u0027s supposed to always completely resolve. Which tests fail?",
      "parentUuid": "11d50c71_bb6a1f58",
      "range": {
        "startLine": 884,
        "startChar": 26,
        "endLine": 884,
        "endChar": 61
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c6c5af_ce90290a",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 215,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-06T21:55:37Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 215,
        "startChar": 24,
        "endLine": 215,
        "endChar": 52
      },
      "revId": "81d0c07a9776c570d89aa365ea6344b4e230c8ad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}