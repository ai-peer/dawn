{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d83b7e5c_be1dc7bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-26T08:43:05Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ad50f37_f003768f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Code in dawn_native LGTM.",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7c348e0_b2fef22d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:20Z",
      "side": 1,
      "message": "Loko FYI",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4385cb65_e220de68",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Unless we need something special for ChromeOS, external texture shouldn\u0027t support multiplanar formats directly. Instead the flow will be something like this:\n\n wgpu::Texture importedMultiPlanar \u003d importFromDMABuf\n wgpu::TextureView plane0  \u003d importMultiPlanar.CreateView(plane0)\n wgpu::TextureView plane1  \u003d importMultiPlanar.CreateView(plane1)\n \n wgpu::ExternalTexture \u003d createExternalTexture(plane0, plane1);\n \nBrandon Jones at Intel is currently implementing the logic to make that flow work, but it is independent from the ability to import a multi-planar texture from DMA bufs.",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f652caf_9fe98909",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4385cb65_e220de68",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a467c649_18e8ce55",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Sounds good. Maybe we could just say that we only allow simple readonly texture usages (not sure about readonly storage in the future)",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51ef839e_b34e665e",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a467c649_18e8ce55",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbcaaaef_bb8e7c42",
        "filename": "src/dawn_native/vulkan/AdapterVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Multi-planar formats were introduced in Vulkan 1.1 so we should probably gate on that. But even then they might not be supported. I don\u0027t know that we want to query the format features at init though. Can you add a TODO(dawn:\u003csome issue related, a new one if needed\u003e) to figure it out?",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23a165f0_3c2d5781",
        "filename": "src/dawn_native/vulkan/AdapterVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbcaaaef_bb8e7c42",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396eeb44_a60bfaf5",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 870,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Maybe we can use this texture\u0027s plane count instead of kMaxPLanesPerFormat so the assert is tighter for non-planar textures. But that also means that the code below will need to be modified because it only handle \"tweaking\" the last barrier added.\n\nDo you know when the addition of multiple barriers happens? Is it allowed in Vulkan to transition the planes separately (at least in D3D12 I think it is not allowed in some cases).\n\nBe sure to run the tests and Chromium with the Vulkan Validation Layers and the synchronization validation enabled, it might catch some issues if there are present.",
      "range": {
        "startLine": 870,
        "startChar": 60,
        "endLine": 870,
        "endChar": 79
      },
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe1bfffb_42030f19",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 870,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-27T03:22:31Z",
      "side": 1,
      "message": "It was from:\n#0  dawn_native::vulkan::Texture::TransitionUsageForPass (this\u003d0x381c015e5a00,\n    recordingContext\u003d0x381c015faaa0, textureUsages\u003d..., imageBarriers\u003d0x7ffe1e715180,\n    srcStages\u003d0x7ffe1e71517c, dstStages\u003d0x7ffe1e715178)\n    at ./../../third_party/dawn/src/dawn_native/vulkan/TextureVk.cpp:1017\n#1  0x00005592d1ece16f in dawn_native::vulkan::(anonymous namespace)::TransitionAndClearForSyncScope (device\u003d0x381c015f7800, recordingContext\u003d0x381c015faaa0, scope\u003d...)\n    at ./../../third_party/dawn/src/dawn_native/vulkan/CommandBufferVk.cpp:185\n#2  0x00005592d1ecc339 in dawn_native::vulkan::CommandBuffer::RecordCommands(dawn_native::vulkan::CommandRecordingContext*)::$_0::operator()(dawn_native::vulkan::Device*, dawn_native::vulkan::CommandRecordingContext*, dawn_native::RenderPassResourceUsage const\u0026) const (this\u003d0x7ffe1e715748, device\u003d0x381c015f7800, recordingContext\u003d0x381c015faaa0,\n    usages\u003d...)\n    at ./../../third_party/dawn/src/dawn_native/vulkan/CommandBufferVk.cpp:506\n#3  0x00005592d1ecb118 in dawn_native::vulkan::CommandBuffer::RecordCommands (\n    this\u003d0x381c048cc300, recordingContext\u003d0x381c015faaa0)\n    at ./../../third_party/dawn/src/dawn_native/vulkan/CommandBufferVk.cpp:713\n#4  0x00005592d1ee3986 in dawn_native::vulkan::Queue::SubmitImpl (this\u003d0x381c01c7cf80,\n    commandCount\u003d1, commands\u003d0x381c019f4268)\n    at ./../../third_party/dawn/src/dawn_native/vulkan/QueueVk.cpp:50\n#5  0x00005592d1e81057 in dawn_native::QueueBase::SubmitInternal (this\u003d0x381c01c7cf80,\n    commandCount\u003d1, commands\u003d0x381c019f4268)\n    at ./../../third_party/dawn/src/dawn_native/Queue.cpp:497\n#6  0x00005592d1e80db3 in dawn_native::QueueBase::APISubmit (this\u003d0x381c01c7cf80,\n\nBut what actually matters I believe is the bindings of texture views in BindGroup:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/PassResourceUsageTracker.cpp;l\u003d111;drc\u003d66f8666257dd5d2687c37c155f40cc72e0176270;bpv\u003d0;bpt\u003d1\n\nSo I can\u0027t exactly catch the purpose of this ASSERT here. Maybe we can simply remove it.",
      "parentUuid": "396eeb44_a60bfaf5",
      "range": {
        "startLine": 870,
        "startChar": 60,
        "endLine": 870,
        "endChar": 79
      },
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58491d3d_701bbaea",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 870,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-30T22:38:56Z",
      "side": 1,
      "message": "I think it is because it modifies \u0026(*barriers)[transitionBarrierStart]; so it expects only one barrier to be newly added since the start.\n\nIf separate barriers are not allowed, we could try to force planes to be transitioned together in a single barrier with ShouldCombineDepthStencilBarriers().\n\nOtherwise, maybe we need to update the code to iterate from transitionBarrierStart --\u003e barriers.size() and tweak all the barriers to transfer to VK_QUEUE_FAMILY_EXTERNAL_KHR",
      "parentUuid": "fe1bfffb_42030f19",
      "range": {
        "startLine": 870,
        "startChar": 60,
        "endLine": 870,
        "endChar": 79
      },
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4004c0b1_022cc6aa",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 870,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T14:28:01Z",
      "side": 1,
      "message": "+1 to either coalescing barriers or tweaking the N last barriers instead of just the last one.",
      "parentUuid": "58491d3d_701bbaea",
      "range": {
        "startLine": 870,
        "startChar": 60,
        "endLine": 870,
        "endChar": 79
      },
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf48877_ef5c8c86",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "This should return false if the format is multiplanar and we don\u0027t have VK_KHR_image_format_list or Vulkan 1.2. You can check it with device-\u003eGetDeviceInfo().HasExt(...)",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f5c8070_90c50c9e",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 80,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecf48877_ef5c8c86",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a1a5266_6a191367",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "nit: I think we could use PNextChainBuilder in this file. https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn_native/vulkan/UtilsVulkan.h;l\u003d55?q\u003dPNextCha\u0026sq\u003d",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9265cc50_57b66821",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a1a5266_6a191367",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67542222_60a62cb7",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 119,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Since this is only used in the plane \u003e 1 condition it could be put inside there.",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1668ea47_46a8cc3c",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 119,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67542222_60a62cb7",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "197de779_c1e4b12c",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "u-u-nit: very slight preference to coalesce this condition with the one above (with PNextInChainBuilder it allows modifying pNext a posteriori)",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cca7eb18_90d68a56",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "197de779_c1e4b12c",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "749b4a6b_01993de2",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 266,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "Ditto pNextInChainBuilder and putting more stuff inside the plane \u003e 1  (or else) conditions.",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed501b04_46586054",
        "filename": "src/dawn_native/vulkan/external_memory/MemoryServiceDmaBuf.cpp",
        "patchSetId": 6
      },
      "lineNbr": 266,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-29T08:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "749b4a6b_01993de2",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6156332a_16bdfdb7",
        "filename": "src/tests/end2end/PlatformVideoViewsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-26T10:09:09Z",
      "side": 1,
      "message": "I didn\u0027t review this part yet because I\u0027m technically OOO. Austin can you take a look? In particular I don\u0027t know if / what\u0027s the best way to reuse the D3D12 tests. #define in files seems like it could be a bit brittle when tests are extended later.",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95f74dd3_4bcf4ce4",
        "filename": "src/tests/end2end/PlatformVideoViewsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-11-30T02:17:19Z",
      "side": 1,
      "message": "It\u0027d better if we had a rule or guide on how to reuse test code lines.\nAnother similar existing example is VulkanImageWrappingTestsDmaBuf and VulkanImageWrappingTestsOpaqueFD, respectively for CROS and Linux. They share a large proportion of code, but are simply duplicated. We generally hate code duplication, but when it comes to test code, sometimes we need it and live with it. That doesn\u0027t mean we can use it unlimitedly. The bug https://dawn-review.googlesource.com/c/dawn/+/71245 I\u0027ve just caught shows the fixes in VulkanImageWrappingTestsOpaqueFD didn\u0027t get applied to VulkanImageWrappingTestsDmaBuf because of duplication. I was wondering if we can put such common test source code files into a separate folder like src/tests/common or src/tests/utils/.",
      "parentUuid": "6156332a_16bdfdb7",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e69addc6_ba711abd",
        "filename": "src/tests/end2end/PlatformVideoViewsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-30T22:38:56Z",
      "side": 1,
      "message": "I\u0027d prefer to have the windows/chromeos implementation in separate files that share a common header if possible. I think the interface would be SetUp, TearDown, CreateVideoTextureForTest, DestroyVideoTextureForTest ? \n\nEffectively what this file is doing is that we\u0027re creating two different test suites which happen to have the same name in different compilation modes - that way we are able to instantiate on both test suites without re-writing the TEST_P code.\n\nWe could instead have\n\n// PlatformVideoViewsTests.h\n class VideoViewsTestBackend {\n  class PlatformTexture {\n    PlatformTexture();\n    virtual ~PlatformTexture();\n  };\n\n  void void SetUp();\n  void TearDown();\n  std::unique_ptr\u003cPlatformTexture\u003e CreateVideoTextureForTest(...);\n  void DestroyVideoTextureForTest(std::unique_ptr\u003cPlatformTexture\u003e, ...);\n };\n\n\n// PlatformVideoViewsTests_win.cpp \n // Implement VideoViewsTestBackend and PlatformTexture for Windows\n\n// PlatformVideoViewsTests_gbm.cpp\n // Implement VideoViewsTestBackend and PlatformTexture using gbm stuff\n\n\n// PlatformVideoViewsTests.cpp\n class VideoViewsTests : public DawnTest {\n   // forward calls to SetUp, TearDown, CreateVideoTextureForTest, to mBackend\n   std::unique_ptr\u003cVideoViewsTestBackend\u003e mBackend;\n };\n \n \nAsked lokokung@ to take a look too in case he has other ideas.",
      "parentUuid": "95f74dd3_4bcf4ce4",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09c2ebbe_ebf014f3",
        "filename": "src/tests/end2end/PlatformVideoViewsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-11-30T23:21:53Z",
      "side": 1,
      "message": "Yea, I think the way that Austin showed is probably (close to) if not the best way to go. You can maybe use the idea he posed in conjunction with typed testing (see https://github.com/google/googletest/blob/main/googletest/samples/sample6_unittest.cc for an example of this), to accomplish the switching.",
      "parentUuid": "e69addc6_ba711abd",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d84ea787_e23208a6",
        "filename": "src/tests/end2end/PlatformVideoViewsTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-01T14:28:01Z",
      "side": 1,
      "message": "I\u0027m not sure that typed testing would work because a different set of things would be available on each platform. But maybe with ifdefs to choose what goes in Types\u003c\u003e it would work?",
      "parentUuid": "09c2ebbe_ebf014f3",
      "revId": "4831df17d6507a1252e66bd6dfaa3c75fbbf635e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}