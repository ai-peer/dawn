{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5fe19527_1c7a9f67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-03T23:41:57Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b34d6965_6efba2bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-05T09:50:04Z",
      "side": 1,
      "message": "The bulk looks good, but the new assert in the constructors make me unsure about the mutability design we\u0027re going with.",
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea381a65_b5ad40e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T12:00:37Z",
      "side": 1,
      "message": "Things are still mutable. If we decide we need to be able to pass a `nullptr` in here we can loosen the restrictions, currently everything has a value.",
      "parentUuid": "b34d6965_6efba2bd",
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6482b9e8_b3711484",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-05T09:50:04Z",
      "side": 1,
      "message": "Using your `TINT_ASSERT_OR_RETURN` would avoid the need to check for null pointers here.\n\nThere\u0027s also the wider question about whether we should be asserting. If one of the goals of the IR is that most things are mutable, then are we expecting for these fields to be reassignable after construction? If so, why couldn\u0027t the pointers be null? That would allow for a constructor to be called with incomplete arguments.\n\nIf we are going for a mutable design, then maybe we should just forward the arguments to setters, which can deal with nullptr.",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "706cde2c_fdddbefe",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T12:00:37Z",
      "side": 1,
      "message": "I didn\u0027t use the `OR_RETURN` so that if the indices are include it would also emit an ICE for those.\n\nI\u0027d rather be as defensive as possible and we can loosen up later if needed. Currently everything that is created knows it\u0027s creation value. If we get to the point where we don\u0027t then we can loosen the restrictions.",
      "parentUuid": "6482b9e8_b3711484",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2cfd966_57488f17",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-05T13:24:22Z",
      "side": 1,
      "message": "\u003e I\u0027d rather be as defensive as possible and we can loosen up later if needed\n\nThe concern I have with this is that it closely follows the pattern of the AST, and it\u0027s giving the reader a strong suggestion that the pointers are going to be non-null, but nothing prevents the next statement after the constructor from nulling the field.\n\nIf the member were `const`, then I\u0027d agree that asserting here makes sense. But as far as I\u0027m aware, they\u0027re not, and the assertion is pretty much useless in terms of nullability guarantees.\n\nIf the constructor called a sequence of setters `SetObject(object)`, `SetResultType(ty)`, then we could put the assertions into the setters and guarantee that the member pointers are never null.\n\nIf we decide that we want to support null members, then there\u0027s a single place to update.",
      "parentUuid": "706cde2c_fdddbefe",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e605558_08bd5e6d",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-05T13:30:56Z",
      "side": 1,
      "message": "The setters do check for nullability and I\u0027m planning on taking a pass at any one that allows mutating the vector directly to use setters if possible, so we can keep the nullability requirements.",
      "parentUuid": "d2cfd966_57488f17",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d2132c_b46c11b4",
        "filename": "src/tint/ir/access.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-05T13:51:25Z",
      "side": 1,
      "message": "Okay. So when the setters are added to these classes, we\u0027ll use them in the constructors and remove these asserts here? If so, SGTM",
      "parentUuid": "8e605558_08bd5e6d",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "d0401005bc77d9fbf7f6c655bd7c40e3b9c76909",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}