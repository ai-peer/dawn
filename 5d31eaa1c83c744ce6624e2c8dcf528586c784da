{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d5611a74_d1f84c4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-14T15:24:38Z",
      "side": 1,
      "message": "(this is still on my review queue but I\u0027m thinking about the approach taken here still, sorry for the delays)",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7c3d22c_004b931c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "Finally got to this and than ran out of time. Working through the Vulkan backend changes.\n\nI believe that the PassResourceUsage changes might be easier to land than the rest so we can start splitting that off.\n\nAustin, Loko PTAL everything but the Vulkan backend changes for now.",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eeaf3dd_11084146",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "I believe we don\u0027t need this BufferUsedAs because it should already be done in [1] and not needed in the usageTracker of the current pass?",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c1baa21_b8cf2ef1",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "Yes, this seems unnecessary.",
      "parentUuid": "9eeaf3dd_11084146",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80a0934f_9a9bfb6f",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c1baa21_b8cf2ef1",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cff7e98a_1c492546",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 372,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "But here we could use a comment that we swap the buffer used as indirect buffer so we need to add the usage explicitly.",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "599fdbbc_51446e7b",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 372,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cff7e98a_1c492546",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "371d4305_10e52833",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 455,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "[1]",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eacfd528_656ea29d",
        "filename": "src/dawn/native/IndirectDrawValidationEncoder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 455,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "371d4305_10e52833",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9543397_cdc2b050",
        "filename": "src/dawn/native/PassResourceUsage.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "nit: can we have a TODO(dawn:N): Consider micro-optimizing with \u003cideas here\u003e.",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58adcead_aa2d25e5",
        "filename": "src/dawn/native/PassResourceUsage.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "Will do. The main thing I can think of is merging these into one `u32` to avoid a bigger `std::map`, but could get messy.",
      "parentUuid": "f9543397_cdc2b050",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d739580_f987a602",
        "filename": "src/dawn/native/PassResourceUsage.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58adcead_aa2d25e5",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b436133_f73e9f97",
        "filename": "src/dawn/native/PassResourceUsageTracker.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "AFAIK the shader stages are only useful for bindings from bindgroups so we should be able either remove them from the API of `SyncScopeUsageTracker` or default them to `None`. The one case in `IndirectDrawValidation.cpp` seems like it might not be needed. This would simplify users of `SyncScopeUsageTracker` a bit.",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ed832a0_046a869c",
        "filename": "src/dawn/native/PassResourceUsageTracker.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "I initially used a `None` default value, but there were changes to `AddBindGroup` to enable write-only storage textures which didn\u0027t cause git conflicts or compilation errors but would cause synchronization issues (which might not be caught in tests since they\u0027re cache/timing issues). I caught them when rebasing (due to git conflicts in `TextureVk.cpp`) but removed the default value to be safe, in case anyone else is writing code using the old API. I wouldn\u0027t mind adding it back for convenience but we need to be careful when merging (and when reviewing any changes after the merge).\n\nI considered adding an assert when calling these methods with a usage that implies a shader stage but `shaderStages` is `None`. But I don\u0027t think that\u0027s valid as users can create bind groups with `visibility\u003d0` (pointless but legal).",
      "parentUuid": "5b436133_f73e9f97",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d756c9ab_f95da4d8",
        "filename": "src/dawn/native/PassResourceUsageTracker.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ed832a0_046a869c",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a52a8b83_144e514b",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "nit: all of these could be in Buffer.h, kMapUsages is already duplicated there.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72af6b72_5a342f8a",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "I don\u0027t mind that, will do.",
      "parentUuid": "a52a8b83_144e514b",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8771ab7c_378b20fd",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72af6b72_5a342f8a",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82f985f0_bda4a8c2",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 396,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "I wonder if we could fold this rule under the skipping of readonly barrier rule. On initialization we would set mReadStage and mReadUsages to all the values, and then they should never change?",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c5a793_d7894575",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 396,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "They could still change (be cleared) due to `MapWrite`.",
      "parentUuid": "82f985f0_bda4a8c2",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80030319_1290589d",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 396,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-03T14:50:18Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e7c5a793_d7894575",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4dd3275_1e164cdd",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 404,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "This is skipped for upload buffers right now. I wonder if we could do this logic only for readback buffers given that upload buffers will skip all barriers (granted we\u0027ll eventually add some form of UMA support and the logic will not be as clear cut).",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b66fdb5a_484e61dd",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 404,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "This will be skipped for upload buffers. Internal upload buffers for `queue.writeBuffer` are skipped as `TransitionUsage` is never called (see `CopyFromStagingToBufferImpl` in `DeviceVk.cpp`).\n\nFor upload buffers created by the user, any buffer with `MapWrite` usage can only be combined with `CopySrc`. So the buffer will have no GPU write usages, and we will skip synchronization based on the previous `if`.",
      "parentUuid": "d4dd3275_1e164cdd",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b016925_78144f17",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 404,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-03T14:50:18Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b66fdb5a_484e61dd",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1eaf6fbb_a27094d9",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 419,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "This seems unnecessary given it is done below and doesn\u0027t change the result of the next if.",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96394a77_8f75210f",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 419,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "It changes `shaderStage` and `mReadShaderStages` so it can change whether the next `if` is taken. Eg. if a compute pass writes to a buffer, then a render pass reads the buffer in the vertex stage, a second compute pass which writes unrelated data, then a second render pass reads the buffer in the fragment stage.\n\nWithout this logic, this will result in a COMPUTE-\u003eVERTEX barrier before the first render pass and a COMPUTE-\u003eFRAGMENT barrier before the second render pass, unnecessarily blocking the second compute pass from executing in parallel with the second render pass\u0027 fragment work.\n\nWith this logic we will skip the second barrier, keeping only the COMPUTE-\u003eVERTEX barrier before the first render pass.\n\nThough this is a very specific scenario (applies to transfer as well, but still needs compute/transfer-\u003erender pass (vertex)-\u003ecompute/transfer-\u003erender pass (fragment) to trigger it, which is not a common case (but could occur when eg. micro-patching a GPU scene). Maybe it\u0027s not worth the extra `if` in what is likely a hot path on CPU.",
      "parentUuid": "1eaf6fbb_a27094d9",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b4ec9c_7df9476b",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 419,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "I think corentin is referring only to the `shaderStage \u0026\u003d ~wgpu::ShaderStage::Fragment` line.\n\nAfter adding Fragment to `mReadShaderStages`, we don\u0027t need to remove it from `shaderStage`\n\nif we don\u0027t remove it, the result of `IsSubset(shaderStage, mReadShaderStages)` will still be the same\n\nif\nIsSubset(shaderStage, mReadShaderStages) is true:\nIsSubset(shaderStage \u0026 ~Fragment, mReadShaderStages | Fragment)\nwill always be true as well because we are shrinking one set and growing the other set.\n\nif\nIsSubset(shaderStage, mReadShaderStages) is false:\nIsSubset(shaderStage \u0026 ~Fragment, mReadShaderStages)\nwill false as well. Removing fragment won\u0027t make it fail to be a subset because mReadShaderStages definitely has Fragment in it (we just added it).",
      "parentUuid": "96394a77_8f75210f",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16ad9d29_d67a1c4d",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 419,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-10-23T13:33:12Z",
      "side": 1,
      "message": "`shaderStage` is also used to determine the `dstStageMask`, so I was thinking there were situations in which we can avoid putting fragment in the destination stages even if we do end up needing a barrier for other reasons (other buffer usage/shader stage in the same sync scope).\n\nThough in practice I think the only time this could happen is if we have a buffer being both read in a fragment shader (uniform or storage) and also used as an indirect or vertex buffer. (This may seem unlikely but the user can do buffer suballocation, so isn\u0027t necessarily that weird.) But the vertex/indirect buffer pipeline stage occurs earlier than the fragment stage, so avoiding the fragment stage doesn\u0027t matter.\n\nIn fact, this is a bug, as I modify only the `shaderStage` but not the `usage` and access masks are determined by `usage`. So we could end up with a `dstAccessMask` containing `VK_ACCESS_UNIFORM_READ_BIT` without the `dstStageMask` containing any supported pipeline stage for that access. I have removed this line now.",
      "parentUuid": "06b4ec9c_7df9476b",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2132bde4_f1df2c04",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 437,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-25T16:37:37Z",
      "side": 1,
      "message": "It seems that we model the buffer as either in 1 last write usage on a specific stage, or a combination of all the readonly usages on a variety of stages. This could lead to a bunch of simplification I believe:\n\n```\n if (readonly) {\n   if (mLastUsage \u0026 writableUsages) {\n     barrier-\u003esrcAccessMask \u003d VulkanAccessFlags(mLastUsage);\n     *srcStages |\u003d mLastAccessStage;\n     *dstStages |\u003d ...\n     mLastUsage \u003d kAllReadonlyUsage \u0026 GetUsage();\n     mLastStage \u003d stage;\n   } else {\n     if (vertex -\u003e fragment) {\n       // No barrier, but record that we\u0027ll have to wait on fragment before any write\n       mLastStage |\u003d wgpu::ShaderStage::Fragment;\n     }\n   }\n }\n```",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d7622f7_84c85658",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 437,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "Ah maybe not because of the non-shader usages.",
      "parentUuid": "2132bde4_f1df2c04",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d13ed8c_61e6009a",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 437,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "Considering only one last usage (or multiple in terms of read) can work but is a different strategy for handling read after read after write cases, and if you want to do it optimally I\u0027m not sure it\u0027s simpler.\n\nEg. consider compute (write) -\u003e fragment (read) -\u003e vertex (read) -\u003e compute (read) -\u003e transfer (read). This would be the worst pathological case (technically you could probably also get an indirect usage in there somewhere).\n\n1st use: `usage \u003d Storage`, `Stage \u003d Compute`. `mLastUsage \u003d None`, `mLastStage \u003d None`.\nNo barrier needed, but set `mLastUsage` and `mLastStage`.\n\n2nd use: `usage \u003d Uniform`, `stage \u003d Fragment`. `mLastUsage \u003d Storage`, `mLastStage \u003d Compute`.\nInsert a Compute -\u003e Fragment barrier. Since we\u0027re going from write to read usage we set `mLastUsage` and `mLastStage` instead of adding to them.\n\n3rd use: `usage \u003d Uniform`, `stage \u003d Fragment`. `mLastUsage \u003d Uniform`, `mLastStage \u003d Fragment`.\nThe write from the compute job is not visible in Vertex so we need to make it visible. We no longer know that the last write was in Compute so we\u0027ll insert a Fragment -\u003e Vertex barrier, which will take care of the Compute -\u003e Vertex dependency indirectly since Fragment has already waited for the write.\n\n4th use: `usage \u003d Uniform`, `stage \u003d Compute`. `mLastUsage \u003d Uniform`, `mLastStage \u003d Vertex | Fragment`.\nWe insert a Vertex | Fragment -\u003e Compute barrier.\n\n5th use: `usage \u003d CopySrc`, `stage \u003d None`. `mLastUsage \u003d Uniform`, `mLastStage \u003d Vertex | Fragment | Compute`.\nWe insert a Vertex | Fragment | Compute -\u003e Transfer barrier.\n\nWe can optimize this. While we need each barrier, we can optimize the source stages. These are read-\u003eread barriers so we don\u0027t actually need to wait for Vertex | Fragment | Compute. We just need to wait for something that we know has waited for the last write. So instead of waiting for all stages, pick one. Prioritize Vertex over Fragment since it\u0027s earlier in the pipeline. Otherwise pick arbitrarily (how to prioritize stages would depend on what content does).\n\nOf course this is a contrived case. It\u0027s unlikely we\u0027ll see something *that* bad.",
      "parentUuid": "2132bde4_f1df2c04",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d39e3dc_1cad4452",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 437,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-03T14:50:18Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5d13ed8c_61e6009a",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "361a5de2_f9efa7e6",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "Changes here seem easier as well and could be landed separately.",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25185ecd_5d35585e",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "Maybe draw indirect as well?",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f714c403_fafb4258",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "Yes, makes sense.",
      "parentUuid": "25185ecd_5d35585e",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa831760_d5481aae",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f714c403_fafb4258",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81ddac9d_ccb23733",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "nit: Prefer CamelCase for lambdas as well.",
      "range": {
        "startLine": 201,
        "startChar": 9,
        "endLine": 201,
        "endChar": 27
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2dab64d_822e9f1b",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "81ddac9d_ccb23733",
      "range": {
        "startLine": 201,
        "startChar": 9,
        "endLine": 201,
        "endChar": 27
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed729f7d_8fe3de3e",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2dab64d_822e9f1b",
      "range": {
        "startLine": 201,
        "startChar": 9,
        "endLine": 201,
        "endChar": 27
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4379c7_c384a02c",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "nit: Can we have a TODO to have the barriers directly added in the correct place?",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bca8d2a7_142eccb0",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "The way TransitionUsageForPass currently works, in the case of images with multiple subresources, we don\u0027t know the final `dstStages` until we\u0027ve already added the image memory barriers to the vector. So it would need some refactoring. But refactoring that will affect the way external textures are handled. I\u0027ve avoided this, but I can add a TODO.",
      "parentUuid": "8c4379c7_c384a02c",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7b0d259_f8473491",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bca8d2a7_142eccb0",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c8335c3_9aea19f9",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "I believe something like this works:\n\n```\nfor (auto\u0026 barriers : {vertexBarriers, nonVertexBarriers}) {\n   // ...\n}\n```",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a294c3_4a41daeb",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "That will make things a bit shorter. Will do.",
      "parentUuid": "0c8335c3_9aea19f9",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce6cea0e_250abda7",
        "filename": "src/dawn/native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1a294c3_4a41daeb",
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c91401bd_a8e30321",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-26T11:48:19Z",
      "side": 1,
      "message": "I believe this could become:\n\n```\n if (usage \u0026 kTextureShaderUsages) {\n    switch over shader stages\n }\n```\n\nWritable storage textures are disallowed in the vertex stage by the BGL validation.",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 147,
        "endChar": 5
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca42dc8_06feb94c",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2023-09-26T13:50:56Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "c91401bd_a8e30321",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 147,
        "endChar": 5
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13a856d6_7a8c6306",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-20T23:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ca42dc8_06feb94c",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 147,
        "endChar": 5
      },
      "revId": "5d31eaa1c83c744ce6624e2c8dcf528586c784da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}