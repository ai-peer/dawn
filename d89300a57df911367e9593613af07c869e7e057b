{
  "comments": [
    {
      "key": {
        "uuid": "19c66c7a_0177e595",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-27T20:03:05Z",
      "side": 1,
      "message": "PTAL",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96bcf396_c44ea4f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "LGTM overall; given that alpha to coverage is implementation defined, it\u0027s definitely rather tricky to test. I\u0027m not sure if we\u0027re just getting lucky that the mask produced by alpha to coverage isn\u0027t (0x1 | 0x4) or (0x2 | 0x8). Perhaps we could try multiple sample masks and check that all of the (varying) resolve results are \u003c\u003d 50% coverage?",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "293f894a_b006030e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "LGTM overall",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b16f4f4_8b15b5e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "We can try all the sample masks including two samples and check that for exactly one we get coverage 0.5, for one coverage 0.0, for two coverage 0.25.\n\nThis cannot be achieved with a simple EXPECT_TEXTURE_RGBA8_EQ. Is there any other way to do that in Dawn?",
      "parentUuid": "96bcf396_c44ea4f6",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07323712_20ae6014",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 23
      },
      "lineNbr": 369,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "Can you make a spec PR to add this validation?",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7052518_bf76c933",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 23
      },
      "lineNbr": 369,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "It\u0027s already in step 7. of render pipeline validation. https://gpuweb.github.io/gpuweb/#device-createRenderPipeline",
      "parentUuid": "07323712_20ae6014",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66b9e209_1495f580",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 23
      },
      "lineNbr": 369,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T10:49:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b7052518_bf76c933",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c065e7fd_1ff1c3e5",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 856,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "unit: I think there are extra spaces here. Did the autoformatter do this?",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45bf1e92_402d97f9",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 856,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "I think I tried to get rid of this change in here and put the spaces back in a wrong place after the autoformatter removed the spaces from the comment below.",
      "parentUuid": "c065e7fd_1ff1c3e5",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7b90c77_6bf8c830",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 877,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "This spacing change looks ok though.",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac869448_0ad4daa7",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 245,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "nit: could be more specific ExpectedMSAAColor",
      "range": {
        "startLine": 245,
        "startChar": 10,
        "endLine": 245,
        "endChar": 23
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3178123_fe534718",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 245,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac869448_0ad4daa7",
      "range": {
        "startLine": 245,
        "startChar": 10,
        "endLine": 245,
        "endChar": 23
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "518484a3_d0c0bc86",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 829,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "nit: ResolveInto2DTextureWithAlphaToCoverageHalfAlpha",
      "range": {
        "startLine": 829,
        "startChar": 34,
        "endLine": 829,
        "endChar": 73
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "275579c0_1d13d8cf",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 829,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "nit: Maybe these three tests could be combined in a single one that tests 5 combinations?",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95ba7281_70f35792",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 829,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "275579c0_1d13d8cf",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35a9d08a_75d7ea56",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 829,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "518484a3_d0c0bc86",
      "range": {
        "startLine": 829,
        "startChar": 34,
        "endLine": 829,
        "endChar": 73
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "531eb338_03fcf037",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 863,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "ResolveInto2DTextureWithAlphaToCoverageZeroAlpha?",
      "range": {
        "startLine": 863,
        "startChar": 34,
        "endLine": 863,
        "endChar": 82
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc178688_f0c92c2c",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 863,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "531eb338_03fcf037",
      "range": {
        "startLine": 863,
        "startChar": 34,
        "endLine": 863,
        "endChar": 82
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6361b755_f0e2a6cc",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 897,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "AlphaOne",
      "range": {
        "startLine": 897,
        "startChar": 73,
        "endLine": 897,
        "endChar": 81
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "568e08a2_42d6bcda",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 897,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6361b755_f0e2a6cc",
      "range": {
        "startLine": 897,
        "startChar": 73,
        "endLine": 897,
        "endChar": 81
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aefe0346_ad2dded2",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 918,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "lot of varied usage of how we pass this data in. We should probably just have a new overload for EncodeRenderPassForTest to take wgpu::Color*",
      "range": {
        "startLine": 918,
        "startChar": 74,
        "endLine": 918,
        "endChar": 90
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95ef40ab_aab1e5ac",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 918,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aefe0346_ad2dded2",
      "range": {
        "startLine": 918,
        "startChar": 74,
        "endLine": 918,
        "endChar": 90
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bab025d_b7261b18",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 970,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "More specifically the alpha to coverage is computed from the first attachment\u0027s output but affects all targets.",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b04f3f4_d30ae2ba",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 970,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8bab025d_b7261b18",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dd5fe2f_d5d82c68",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1014,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "nit: here you\u0027ve passed \"kTestDepth\" which is true, and above you\u0027ve simply passed \"true\". This is a little inconsistent.",
      "range": {
        "startLine": 1014,
        "startChar": 12,
        "endLine": 1014,
        "endChar": 22
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34370aa0_7be821d7",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1014,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2dd5fe2f_d5d82c68",
      "range": {
        "startLine": 1014,
        "startChar": 12,
        "endLine": 1014,
        "endChar": 22
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c476484_d37c612a",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1016,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-27T22:00:02Z",
      "side": 1,
      "message": "There are only 5 values provided to this array. Are the rest intended to be 0?",
      "range": {
        "startLine": 1016,
        "startChar": 25,
        "endLine": 1016,
        "endChar": 27
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2cc8007_f265ad51",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1016,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Fixed here and also in some earlier tests.",
      "parentUuid": "6c476484_d37c612a",
      "range": {
        "startLine": 1016,
        "startChar": 25,
        "endLine": 1016,
        "endChar": 27
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2ff2f1c_c673790e",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1091,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "Why does this one need to flip the triangle? It seems the regular triangle should also have partial coverage.",
      "range": {
        "startLine": 1091,
        "startChar": 62,
        "endLine": 1091,
        "endChar": 75
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b15fc6a_5cd76ac4",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1091,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "When we don\u0027t flip the triangle we get that the alpha-to-coverage mask is exactly equal to the rasterization mask. When we do we get exactly one sample that is covered by both the triangle and alpha-to-coverage.",
      "parentUuid": "e2ff2f1c_c673790e",
      "range": {
        "startLine": 1091,
        "startChar": 62,
        "endLine": 1091,
        "endChar": 75
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8239a24a_99d11180",
        "filename": "src/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1091,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T10:49:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4b15fc6a_5cd76ac4",
      "range": {
        "startLine": 1091,
        "startChar": 62,
        "endLine": 1091,
        "endChar": 75
      },
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81125aa3_1e147f68",
        "filename": "src/tests/unittests/validation/RenderPipelineValidationTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 372,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-28T09:00:42Z",
      "side": 1,
      "message": "nit: Can we have two tests here: a control case that\u0027s a success with sample count \u003d 4 and this error case?",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf85eb2a_a7e9b337",
        "filename": "src/tests/unittests/validation/RenderPipelineValidationTests.cpp",
        "patchSetId": 23
      },
      "lineNbr": 372,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-28T10:24:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81125aa3_1e147f68",
      "revId": "d89300a57df911367e9593613af07c869e7e057b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}