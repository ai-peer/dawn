{
  "comments": [
    {
      "key": {
        "uuid": "f3a0cbaf_80214da8",
        "filename": "src/dawn_native/ResourceHeap.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "This likely needs to be tagged as virtual.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71282afd_0fbf4fd2",
        "filename": "src/dawn_native/ResourceHeap.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3a0cbaf_80214da8",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c85a05a2_53fae003",
        "filename": "src/dawn_native/ResourceHeap.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: this isn\u0027t used in the frontend so it could be put in the child classes.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d8e1e19_09413b37",
        "filename": "src/dawn_native/ResourceHeap.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "c85a05a2_53fae003",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7efefd24_85a790c7",
        "filename": "src/dawn_native/ResourceHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: kInvalidOffset",
      "range": {
        "startLine": 22,
        "startChar": 30,
        "endLine": 22,
        "endChar": 44
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb6a2a89_78f3db7f",
        "filename": "src/dawn_native/ResourceHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7efefd24_85a790c7",
      "range": {
        "startLine": 22,
        "startChar": 30,
        "endLine": 22,
        "endChar": 44
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1fce754_d4195780",
        "filename": "src/dawn_native/ResourceHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: This could be using DAWN_TRY_ASSIGN and CreateHeap return an ResultOrError\u003cResourceHeapBase*\u003e. This would also mean this Allocate would return ResultOrError\u003cResourceMemoryAllocation\u003e",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79fdbbb6_63e0434b",
        "filename": "src/dawn_native/ResourceHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Why wouldn\u0027t this also implement the \"client\" interface?",
      "parentUuid": "b1fce754_d4195780",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d6f3e9_eca69697",
        "filename": "src/dawn_native/ResourceHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "This might not be needed with dynamic polymorphism because the backend\u0027s allocator would wrap the direct resource memory allocator so it can have Tick() called on it directly.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c19f3d7_90a0ef0c",
        "filename": "src/dawn_native/ResourceHeapAllocator.cpp",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f2d6f3e9_eca69697",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08104d37_fe9c0254",
        "filename": "src/dawn_native/ResourceHeapAllocator.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "Why is this using static polymorphism? We could create a \"Client\" interface that needs to be implemented and passed in the constructor of DirectResourceMemoryAllocator.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45e215e1_d3292268",
        "filename": "src/dawn_native/ResourceHeapAllocator.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "08104d37_fe9c0254",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ef4c7ff_60d500a1",
        "filename": "src/dawn_native/ResourceHeapAllocator.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "This would disappear with dynamic polymorphism, also such files are named .inc usually.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f92a8fb2_dfd23926",
        "filename": "src/dawn_native/ResourceHeapAllocator.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ef4c7ff_60d500a1",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f68d738c_12f4eea3",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: this pattern with Initialize is likely to happen often, ideally very few places in the code use ConsumedError. How about changing Device::CreateBufferImpl like this?\n\n    ResultOrError\u003cBufferBase*\u003e Device::CreateBufferImpl(const BufferDescriptor* descriptor) {\n        std::unique_ptr\u003cBuffer\u003e buffer \u003d std::make_unique\u003cBuffer\u003e(this, descriptor);\n        DAWN_TRY(buffer-\u003eInitialize());\n        return buffer.reset();\n    }",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ab25c75_5e61a23b",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "An alternative approach would be to add a static \u0027Create\u0027 method on the class. The static method would create all of the resources that can fail. If all of them succeed, the static method allocates an instance of the object and passes the all of the resources to the constructor.\n\nThis approach has the advantage that you avoid unnecessary object allocation for the failure case.",
      "parentUuid": "f68d738c_12f4eea3",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d2d9d6b_7d3f3d8d",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "SGTM. But I think we want release() not reset().",
      "parentUuid": "f68d738c_12f4eea3",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b43987_27797df1",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "Not sure what this means, can you expand a bit including a link to some msdn doc?",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e31c5540_010787ba",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "This hasn\u0027t been addressed",
      "parentUuid": "a2b43987_27797df1",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27bd5ed5_a4f2a420",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-08T18:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e31c5540_010787ba",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "779aed4a_0cb0c6a9",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 201,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "Why is this needed? If you look at the advanced model in https://docs.microsoft.com/en-us/windows/win32/api/d3d12/nf-d3d12-id3d12device-createplacedresource we can see a resource barrier is only needed between uses of two resources sharing the same memory (that\u0027s why it is called aliasing), and sometimes special initialization is needed (not for buffers).",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20d574b4_07a3224f",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 201,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Accidentally merged.",
      "parentUuid": "779aed4a_0cb0c6a9",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d180d70e_585f39ef",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 201,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-08T18:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20d574b4_07a3224f",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa39a0c1_deac5bf9",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: this can be declared the first time it\u0027s used.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64680493_7273942e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa39a0c1_deac5bf9",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d6f6bef_2d01dd12",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 356,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: explain that heaps have their own alignment and for alignment computations to be correct their alignment must be a multiple of the resource\u0027s alignment.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "584adcf7_89a07bd3",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 356,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done \u0026 moved.",
      "parentUuid": "9d6f6bef_2d01dd12",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98c294a7_acb29218",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "Please rework this so that you only pay the cost of doing two lookups when you need to insert a new item. The current code always does two lookups no matter what.",
      "range": {
        "startLine": 364,
        "startChar": 1,
        "endLine": 364,
        "endChar": 62
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1877e2d0_296e0c53",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98c294a7_acb29218",
      "range": {
        "startLine": 364,
        "startChar": 1,
        "endLine": 364,
        "endChar": 62
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6af3f16_83d50b02",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 366,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: This could use DAWN_TRY_ASSIGN",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ef2295d_320c2817",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 366,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6af3f16_83d50b02",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e4999a7_7d4aff73",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: this should be merged in the previous include block.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7cb21c1_e1efe819",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Moved up to Line#24?",
      "parentUuid": "7e4999a7_7d4aff73",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "745eec40_539a6d2e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "Yep, although clang-format will move it to line 23",
      "parentUuid": "d7cb21c1_e1efe819",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03d9aeb4_b8ff86fd",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-08T18:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "745eec40_539a6d2e",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f770cfa4_27d4dfb0",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "nit: const\u0026 since this is a largeish structure.",
      "range": {
        "startLine": 89,
        "startChar": 12,
        "endLine": 89,
        "endChar": 31
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ab4660c_237ddaf2",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f770cfa4_27d4dfb0",
      "range": {
        "startLine": 89,
        "startChar": 12,
        "endLine": 89,
        "endChar": 31
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "701b195f_9da0ad44",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "I\u0027ve been told that on some hardware, creating a committed resource will be better/faster than using placed resources. Given this, is there a way we can re-jigger things such that the implementation of a \u0027direct allocator\u0027 simply calls CreateCommitedResource and the \u0027suballocator\u0027 implementation is what uses CreateHeap+CreatePlacedResource? \n\nDoing this will also avoid needing to use aliasing barriers altogether for direct allocation.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0094d4f4_c529d24b",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-01T11:32:18Z",
      "side": 1,
      "message": "Do you have a reference that explains why committed resources are faster than placed ones? It seems really strange.\n\nAlso aliasing barriers aren\u0027t needed for the direct allocator using the \"advanced model\" of placed resources.",
      "parentUuid": "701b195f_9da0ad44",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56d3bbe1_7009699a",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-02T00:06:01Z",
      "side": 1,
      "message": "To my understanding, aliasing barriers are only needed when the heap is reused. Direct allocation does not reuse the heap.\n\nUsing committed resources in direct allocation would be an optimization for some hardware in cases sub-allocation cannot be used. Such as 1) allocation is too large or 2) sub-allocator failure. For 1) very large resources tend to be persisted where the cost would be amortized over many frames, and 2) only occurs when allocations near ~32GB or hit OOM. Both are unusual conditions to optimize.\n\nAre there other conditions that can be shared?",
      "parentUuid": "0094d4f4_c529d24b",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9c533d5_c6e1c94e",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-02T00:57:24Z",
      "side": 1,
      "message": "I been told that certain hardware/driver combinations can more efficiently manage committed resources over placed resources. \n\nI think we should continue to use placed resources in cases where we want to subdivide a heap. But in the case where a heap will only ever contain one placed resource, we should simply use a committed resource.",
      "parentUuid": "56d3bbe1_7009699a",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50bace20_f638149c",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "Do you have details on why committed resources could be faster? I\u0027m not able to find a reason why they would. There is a lot of hearsay in GPU performance where GPU vendors say one thing can be faster on their driver but brings only small benefits and balances out to be neutral benefits over all drivers.\n\nIMO this type of optimization should be undertaken when we have real-world benchmarks to test against otherwise it\u0027s difficult to justify the added code complexity (for just one of these things it might be ok, but all the little tentative optimizations add up).",
      "parentUuid": "f9c533d5_c6e1c94e",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d963c9b_014680af",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-02T14:58:55Z",
      "side": 1,
      "message": "The information comes from the D3D team, not hearsay. \n\nIf you feel strongly that using CreateHeap+CreatePlacedResource for direct allocation instead of CreateCommittedResource is better from a code complexity standpoint, I\u0027m fine with doing that for now until we have benchmarks. \n\nThough, once we have benchmarks, it will not be straightforward to determine that general slowness is caused by this particular issue vs. another. We should keep a list of this and other potential optimizations when the time comes so we don\u0027t forget about them.",
      "parentUuid": "50bace20_f638149c",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "103fc416_bce66ffe",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "Note: I didn\u0027t have the time to finish reviewing this file.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa9f59a_3c10c84d",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "Every time you pass a ComPtr by value like this, it AddRefs/Releases the object. Not only does this waste CPU cycles incrementing and decrementing the reference count, the next time you look at a PIX trace, there will be more entries you have to sift through. :-)\n\nThe Google C++ style guide says that if you\u0027re passing a reference counted object to a function that takes ownership of the object, then the parameter should be declared as a smart pointer. Your use case falls into this category but it means you need to be aggressive about using std::move to avoid unnecessary AddRef/Release.",
      "range": {
        "startLine": 142,
        "startChar": 8,
        "endLine": 142,
        "endChar": 83
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78264e2a_d71c3839",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3aa9f59a_3c10c84d",
      "range": {
        "startLine": 142,
        "startChar": 8,
        "endLine": 142,
        "endChar": 83
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83d27f49_68d87462",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "Maybe we could centralizes these deferred freeing queues in d3d12::Device? D3D12::ReferenceUntilUnused is the relevant function.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d39ff5_88987261",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-02T09:26:11Z",
      "side": 1,
      "message": "This hasn\u0027t been addressed",
      "parentUuid": "83d27f49_68d87462",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63916a2e_057a1a6d",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "With the dynamic polymorphism, this PlacedResourceAllocator would likely be merged with ResourceHeapAllocator and heapFlags wouldn\u0027t need to be piped around.",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ac7a7a_1158a072",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "To make finding classes easier for people, please have one class per .h/cpp pair.",
      "range": {
        "startLine": 51,
        "startChar": 10,
        "endLine": 51,
        "endChar": 33
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a6c6a23_9acca4d7",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "These were separated as they will eventually allocate independently.",
      "parentUuid": "63916a2e_057a1a6d",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54009f9f_4a9db692",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 58,
        "startChar": 42,
        "endLine": 58,
        "endChar": 61
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e8a7667_9e795f7e",
        "filename": "src/dawn_native/d3d12/ResourceAllocatorD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54009f9f_4a9db692",
      "range": {
        "startLine": 58,
        "startChar": 42,
        "endLine": 58,
        "endChar": 61
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5064ab55_559bc9db",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "Out of curiosity, why does GetD3D12Resource return a ComPtr\u003cID3D12Resource\u003e but GetD3D12Heap returns a ID3D12Heap*?",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 15
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e382910b_d417983d",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "Its for when a new resource is created on the same heap. It doesn\u0027t need to ref-count since the sub-allocator already tracks when the heap needs to be freed. However, the resource can be ref-counted by the client per usual as the heap would be a weak reference.",
      "parentUuid": "5064ab55_559bc9db",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 15
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf5ebe0a_a0633145",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-02T00:57:24Z",
      "side": 1,
      "message": "Thanks, that makes sense.",
      "parentUuid": "e382910b_d417983d",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 15
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "644c23b4_86224c4b",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-08T18:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf5ebe0a_a0633145",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 15
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4223ae8f_d559f28f",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-07-31T22:45:03Z",
      "side": 1,
      "message": "When I think of the word heap, I think of an aggregation of multiple resources. I was surprised that GetD3D12Resource was on the generic ResourceHeap object. What is the plan moving forward for this function when a heap actually contains more than one resource?",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6201a3dc_bac9ff9a",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "It would use the same heap but with different resources.",
      "parentUuid": "4223ae8f_d559f28f",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fc215d8_9fdb5ff4",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-02T00:57:24Z",
      "side": 1,
      "message": "In the future, I presume that the buffer object would continue to contain a ResourceMemoryAllocation. \n\nHow would the buffer get the corresponding ID3D12Resource from the allocation? I would have expected GetD3D12Resource to be method on the ResourceMemoryAllocation, not on the Heap. If the Buffer object asks the heap for the resource object, how does the heap object know which D3D12 resource to hand out if it aggregates multiple ones?",
      "parentUuid": "6201a3dc_bac9ff9a",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09a63d92_0b3b4d0a",
        "filename": "src/dawn_native/d3d12/ResourceHeapD3D12.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-08T18:13:42Z",
      "side": 1,
      "message": "It would. See Buffer::GetD3D12Resource(). The allocator returns a handle used by the buffer object that has a created \"resource heap\" which contains both the d3d heap and placed resource. Only the placed resource is needed by the buffer object.",
      "parentUuid": "8fc215d8_9fdb5ff4",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b3fe48d_46f4354e",
        "filename": "src/tests/unittests/ResourceAllocatorTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-07-30T15:29:04Z",
      "side": 1,
      "message": "It should be allowed with sub allocation too no?",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca39a546_afb1fbbd",
        "filename": "src/tests/unittests/ResourceAllocatorTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-08-01T18:43:37Z",
      "side": 1,
      "message": "No longer relevant.",
      "parentUuid": "2b3fe48d_46f4354e",
      "revId": "f298ed191ca05601ff08b47ae1196eea7d64a80e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}