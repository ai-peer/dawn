{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9032a881_ab486849",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "y",
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b87ebda6_c94e45f7",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "maybe \"ResolveDefaultCompatiblityViewDimension\"",
      "range": {
        "startLine": 441,
        "startChar": 27,
        "endLine": 441,
        "endChar": 49
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6e1b956_6ddcf8f5",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-11T19:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b87ebda6_c94e45f7",
      "range": {
        "startLine": 441,
        "startChar": 27,
        "endLine": 441,
        "endChar": 49
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6fec6fa_59e7d101",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "nit: dedent the block below by inverting to return early.\n```\nif (viewDimension not undefined) {\n  return viewDimension;\n}\n```",
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fa51596_0aba932b",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-11T19:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6fec6fa_59e7d101",
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e84af8f_54c41233",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "I *think* we should make it validation error to pass `viewDimensionDescriptor` if you\u0027re not in compatibility mode\n\n```suggestion\n    UnpackedTextureDescriptorChain unpacked;\n    DAWN_TRY_ASSIGN(unpacked, ValidateAndUnpackChain(descriptor));\n;\n    const auto* internalUsageDesc \u003d std::get\u003cconst DawnTextureInternalUsageDescriptor*\u003e(unpacked);\n    const auto* viewDimensionDescriptor \u003d std::get\u003cconst TextureViewDimensionDescriptor*\u003e(unpacked);\n    \n    DAWN_INVALID_IF(!device-\u003eIsCompatibilityMode() \u0026\u0026 viewDimensionDescriptor !\u003d nullptr, \"msg\");\n```",
      "range": {
        "startLine": 483,
        "startChar": 4,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3877bdc_a6cb56f7",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-11T19:42:15Z",
      "side": 1,
      "message": "If every valid compat mode program is a valid non-compat mode program (the goal of the JS version) then no, we shouldn\u0027t validate that out. But if you think we should I dawn we can do that.",
      "parentUuid": "4e84af8f_54c41233",
      "range": {
        "startLine": 483,
        "startChar": 4,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd2410f_ff4db689",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T19:58:39Z",
      "side": 1,
      "message": "@kainino@chromium.org this is interesting because this would be a case of \"you passed a chained struct that the implementation may not even recognize; but it is valid and you get no errors\".\n\nperhaps we can have a carve-out in webgpu.h for compat-mode structs.",
      "parentUuid": "f3877bdc_a6cb56f7",
      "range": {
        "startLine": 483,
        "startChar": 4,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee9ae8b7_c9f00126",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-10-11T23:53:20Z",
      "side": 1,
      "message": "It\u0027s probably fine if this is a bit special such that:\n- implementations that understand compat will allow it (even if compat isn\u0027t enabled)\n- implementations that don\u0027t understand compat will error\n\nThough perhaps we could fix the second thing by declaring an SType range for compat (in https://github.com/webgpu-native/webgpu-headers/issues/214) and implementations are supposed to always ignore things in that range if compat isn\u0027t enabled (including if compat doesn\u0027t exist in that implementation).",
      "parentUuid": "8cd2410f_ff4db689",
      "range": {
        "startLine": 483,
        "startChar": 4,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bb3e9bd_04797612",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-23T07:53:38Z",
      "side": 1,
      "message": "How can I proceed?",
      "parentUuid": "ee9ae8b7_c9f00126",
      "range": {
        "startLine": 483,
        "startChar": 4,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df92e1f9_a554f6af",
        "filename": "src/dawn/native/Texture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-23T15:59:58Z",
      "side": 1,
      "message": "we can land this as is based on that github discussion; I\u0027ll file a bug about implementing the compat-range stype block",
      "parentUuid": "4bb3e9bd_04797612",
      "range": {
        "startLine": 483,
        "startChar": 4,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83f0c05b_d3c18c81",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "nit: GetCompatibilityViewDimension",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 47
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5da79ebe_3fe785d7",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-11T19:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83f0c05b_d3c18c81",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 47
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27162e3f_18ae9fa6",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "nit: then call it something like mCompatibilityViewDimension",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 83
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d2220d4_ce105b1e",
        "filename": "src/dawn/native/Texture.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-11T19:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27162e3f_18ae9fa6",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 83
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd2189a_808d4916",
        "filename": "src/dawn/tests/unittests/validation/CompatValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 930,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-10-11T18:28:47Z",
      "side": 1,
      "message": "nit: could use utils::MakeBindGroupLayout helper",
      "range": {
        "startLine": 919,
        "startChar": 8,
        "endLine": 930,
        "endChar": 81
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6feb824_ef476e1d",
        "filename": "src/dawn/tests/unittests/validation/CompatValidationTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 930,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-11T19:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccd2189a_808d4916",
      "range": {
        "startLine": 919,
        "startChar": 8,
        "endLine": 930,
        "endChar": 81
      },
      "revId": "9b70ee0dcae5ff12096856f628d5c6f3cb1cc3af",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}