{
  "comments": [
    {
      "key": {
        "uuid": "994183a5_f4bb862d",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "I\u0027d word this either as (something like):\n\n  size_t newMaxSize \u003d nextPowerOfTwo(max(largestRingBuffer-\u003eGetSize(), size));\n\nor\n\n  size_t newMaxSize \u003d largestRingBuffer-\u003eGetSize() * 2;\n  while (newMaxSize \u003c size) { newMaxSize *\u003d 2; }",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c89a0a4b_3b5ae595",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "994183a5_f4bb862d",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d375d6ff_5b404469",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 61,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "uNit: -\u003e \"last (or largest) buffer\"",
      "range": {
        "startLine": 61,
        "startChar": 31,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1d8f4cf_e791bb6c",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 61,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d375d6ff_5b404469",
      "range": {
        "startLine": 61,
        "startChar": 31,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f776570_21c9ec04",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 62,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "is the last buffer always the largest one? if so, can you update this comment to explicitly point that out?",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2268fc6f_4f5a69e8",
        "filename": "src/dawn_native/DynamicUploader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 62,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f776570_21c9ec04",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3088295_29bb6efd",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 32,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "uNit: splitted -\u003e split",
      "range": {
        "startLine": 32,
        "startChar": 28,
        "endLine": 32,
        "endChar": 36
      },
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ae6534_b5361a71",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 32,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3088295_29bb6efd",
      "range": {
        "startLine": 32,
        "startChar": 28,
        "endLine": 32,
        "endChar": 36
      },
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "018b5009_61d2e129",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 88,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "setting nullptr here seems redundant, but .startOffset is undef. startOffset could have a default value in the struct declaration.",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bddd9e03_282fe38d",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 88,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "018b5009_61d2e129",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7063c32b_cd8d8230",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 95,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "nit: I think it would be clearer to \u0027return UploadHandle{}\u0027 here instead of using the predefined uploadHandle. Then the definition of uploadHandle could move down.",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b438f025_abf8756a",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 95,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7063c32b_cd8d8230",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a08adda8_226a361b",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 110,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "nit: I\u0027d prefer to move this comment such that the \"} else if (\" can be all on one line. Otherwise it kind of makes it look like the \"if\" block above ends here. I guess it could move inside the \"else if\" block.",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "914c4a66_28cfb749",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 110,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a08adda8_226a361b",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e45335a4_e0c02d8d",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 122,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "nit: same",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3014fba0_a84fba5e",
        "filename": "src/dawn_native/RingBuffer.cpp",
        "patchSetId": 12
      },
      "lineNbr": 122,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e45335a4_e0c02d8d",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75470df8_e33907e2",
        "filename": "src/dawn_native/ToBackend.h",
        "patchSetId": 12
      },
      "lineNbr": 111,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-18T01:20:01Z",
      "side": 1,
      "message": "uNit: these are sorted alphabetically.",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3b3190b_ff1a511b",
        "filename": "src/dawn_native/ToBackend.h",
        "patchSetId": 12
      },
      "lineNbr": 111,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75470df8_e33907e2",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61952aaa_992aba30",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 175,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "It\u0027s not clear at a glance why we use -\u003eGetLargestBuffer()-\u003eGetStagingBuffer(). I.e. why do we choose the \u0027largest buffer\u0027 here? It sounds like this is supposed to point at the same data returned by uploader-\u003eAllocate, but I can\u0027t tell if that\u0027s what\u0027s actually happening here.\n\nMaybe uploader-\u003eAllocate should return the StagingBuffer object too?",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe781ed_434ce60b",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 175,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Correct, we always sub-allocate from the largest buffer hence why it\u0027s always used for the copy. It\u0027s possible smaller ring-buffers exist and could be re-used for smaller sub-allocations; however, these will soon be reclaimed as uploads are transient and the largest ring-buffer must persist or is \"pinned\" to allow the larger requests.",
      "parentUuid": "61952aaa_992aba30",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fd0d0ee_ad538dba",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 175,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-26T03:33:14Z",
      "side": 1,
      "message": "Ok. I still would prefer if the implementation didn\u0027t leak as much here - I think it\u0027s confusing that we \"GetLargestBuffer\" when what\u0027s important is that we \"GetTheBufferThatTheAllocationWasIn\". Would it make sense to add a StagingBuffer* to UploadHandle?",
      "parentUuid": "5fe781ed_434ce60b",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3afcd878_82042b1d",
        "filename": "src/dawn_native/d3d12/BufferD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 175,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-28T21:50:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fd0d0ee_ad538dba",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c795c6dc_f3af1cee",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 356,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-18T01:20:01Z",
      "side": 1,
      "message": "note: When we put this on DeviceBase, the DynamicUploader would probably be created on device initialization so GetDynamicUploader could just return a bare pointer.",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fa643df_5257ae10",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 12
      },
      "lineNbr": 356,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c795c6dc_f3af1cee",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6175bca_4e0d3405",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 12
      },
      "lineNbr": 135,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "\"64K\" implies maybe this should be 65536?",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dc4621d_290dd168",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 12
      },
      "lineNbr": 135,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b6175bca_4e0d3405",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a8a6614_718bb731",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 12
      },
      "lineNbr": 135,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-26T03:33:14Z",
      "side": 1,
      "message": "it\u0027s really 64kB and not 64KiB? I don\u0027t know how to look it up. anyway, seems fine.",
      "parentUuid": "1dc4621d_290dd168",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76ea37cf_18ae46fd",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.h",
        "patchSetId": 12
      },
      "lineNbr": 135,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-28T21:50:37Z",
      "side": 1,
      "message": "I\u0027ll leave it for now (MS reviewed) \u0026 will check/fix-up.",
      "parentUuid": "0a8a6614_718bb731",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72828340_e08d7708",
        "filename": "src/tests/unittests/RingBufferTests.cpp",
        "patchSetId": 12
      },
      "lineNbr": 117,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-01-18T01:20:01Z",
      "side": 1,
      "message": "nit: Used",
      "range": {
        "startLine": 117,
        "startChar": 7,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bea2c0d5_d3deefe1",
        "filename": "src/tests/unittests/RingBufferTests.cpp",
        "patchSetId": 12
      },
      "lineNbr": 117,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72828340_e08d7708",
      "range": {
        "startLine": 117,
        "startChar": 7,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acb04d3c_711c7cc0",
        "filename": "src/tests/unittests/RingBufferTests.cpp",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-22T19:47:09Z",
      "side": 1,
      "message": "Would the wasted space get reclaimed after F8 has been freed? e.g. could you Tick(8) then suballocate 28? (I assume yes - maybe this can be tested?)",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "772e70ef_a3bf544b",
        "filename": "src/tests/unittests/RingBufferTests.cpp",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-25T22:15:53Z",
      "side": 1,
      "message": "The waste belongs to F9 not F8. If we Tick(9), the entire buffer gets reclaimed as performed at the end of the test.",
      "parentUuid": "acb04d3c_711c7cc0",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57a1ebb3_cae8726c",
        "filename": "src/tests/unittests/RingBufferTests.cpp",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-01-26T03:33:14Z",
      "side": 1,
      "message": "Gotcha. In theory, it could become available when F8 is freed, right? Maybe it would be good to have a TODO to consider whether we can make that work?",
      "parentUuid": "772e70ef_a3bf544b",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10658ec5_1a682d79",
        "filename": "src/tests/unittests/RingBufferTests.cpp",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2019-01-28T21:50:37Z",
      "side": 1,
      "message": "Correct. Left a TODO.",
      "parentUuid": "57a1ebb3_cae8726c",
      "revId": "ae09556def49b0aa5cdfe43ad2d9589c6bae9efd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}