{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ca752744_c1642b7c",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "```suggestion\n    // Get a string version of the GUID_DEVCLASS_DISPLAY so we don\u0027t need to hardcode it.\n    std::array\u003cwchar_t, 40\u003e displayDevClassGUID;\n```",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48c5221d_ed64f8dd",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 82,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca752744_c1642b7c",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7261ea89_9e5f10ab",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 87,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "```suggestion\n    // Two step retrieval of a device list with buffer sizing and actually filling the buffer.\n    // The buffer will contain a list of null-terminated strings, with an extra null at the end.\n    ULONG deviceIDListSize \u003d 0;\n```",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6104384f_c90549a0",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 87,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7261ea89_9e5f10ab",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65b25576_50768f18",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "nit: this could be from adapter.GetVendorId() so the code is potentially more reusable in the future.",
      "range": {
        "startLine": 99,
        "startChar": 19,
        "endLine": 99,
        "endChar": 23
      },
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be5c98fc_0a0acc45",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65b25576_50768f18",
      "range": {
        "startLine": 99,
        "startChar": 19,
        "endLine": 99,
        "endChar": 23
      },
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8736baab_2bafe328",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 102,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "WDYT of the following:\n\n```\nwchar_t* currentDeviceID \u003d deviceIDList.data();\nwhile (true) {\n  // No more items in the list.\n  size_t itemLength \u003d wcslen(currentDeviceID);\n  if (itemLength \u003d\u003d 0) {\n    return false;\n  }\n\n  // Item is not for this device, go to the next item.\n  if (wcsstr(currentDeviceID, stream.str().c_str()) \u003d\u003d nullptr) {\n    currentDeviceID +\u003d itemLength + 1;\n    continue;\n  }\n\n  // Found the device, copy the whole device id out.\n  wcscpy_s(deviceInfo-\u003edeviceID, MAX_DEVICE_ID_LEN, currentDeviceID);\n  return true;\n}\n```",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1baa27fe_aecdc401",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 102,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8736baab_2bafe328",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c42f2a95_4f27cea5",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "nit: likewise a few comments could help.",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "451a3fed_9ee316c5",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 123,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c42f2a95_4f27cea5",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f3adf88_bc2a26c9",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "Why do we need a second step given that we already queried DEVPKEY_Device_DriverInfPath? Or is it that there is an indirection in the registry?",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fac84c2_1c824653",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 135,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Querying `DEVPKEY_Device_DriverInfPath` only returns a file name of a Windows file about the driver (e.g. `oem17.inf` on my dev machine, to be honest I don\u0027t know what it means).\n\nSetupGetInfDriverStoreLocationW() returns the absolute path of the Intel Windows driver.",
      "parentUuid": "1f3adf88_bc2a26c9",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82ef4962_f6ce5656",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:22:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5fac84c2_1c824653",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3534a3af_1d46d22b",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 165,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "```suggestion\n    // Go through all the enumerated modules and find the loaded driver module\n```",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b08eaaf_033bdae7",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 165,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3534a3af_1d46d22b",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "507ac5b1_41d6512e",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 196,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "If driverFilename is not null as checked above, isn\u0027t it safe to assume the current character is \\ and size \u003e 0? So we can just do a ++ right after the null check.",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a32b9212_28dbeb21",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 196,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done\n\nI think so. As long as `driverFileName` is not `nullptr`, it should at least have a `\\`, so `++driverFileName` should be safe.",
      "parentUuid": "507ac5b1_41d6512e",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69836432_5c86b71a",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 406,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-13T00:29:11Z",
      "side": 1,
      "message": "instead of two sets of #ifdefs, is it possible to have two separate .cpp files?\n\nWe choose which one to build depending on `is_win \u0026\u0026 !dawn_is_winuwp` in the GN build files.\n\nThen, the null implementation of the IntelExtension can simply be:\n```\nstd::unique_ptr\u003cIntelExtension\u003e IntelExtension::Create(const PhysicalDevice\u0026) {\n  return nullptr;\n}\n```\n\nand the actual implementation can have everything here, with no #ifdefs",
      "range": {
        "startLine": 400,
        "startChar": 1,
        "endLine": 406,
        "endChar": 26
      },
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e637857a_ea8c8b9f",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 406,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69836432_5c86b71a",
      "range": {
        "startLine": 400,
        "startChar": 1,
        "endLine": 406,
        "endChar": 26
      },
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26961ab6_a1270aea",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.h",
        "patchSetId": 21
      },
      "lineNbr": 55,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-13T00:29:11Z",
      "side": 1,
      "message": "```suggestion\n#endif  // SRC_DAWN_NATIVE_D3D12_INTELEXTENSIOND3D12_H_\n```",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a5988fa_09bdbb80",
        "filename": "src/dawn/native/d3d12/IntelExtensionD3D12.h",
        "patchSetId": 21
      },
      "lineNbr": 55,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26961ab6_a1270aea",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e4f7af_28e9efbe",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 531,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "[1]",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cf7dcde_e6e5bd05",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 780,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "Shouldn\u0027t this be in SetupBackendDeviceToggles instead and a single condition like this?\n\n```\nif (GetOrLoadIntelExtension() \u003d\u003d nullptr) {\n  deviceToggles-\u003eForceSet(Toggle::D3D12UseIntelMaxPerformanceThrottlePolicy, false);\n}\n```",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14a9b73d_c01df9a6",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 780,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "I\u0027d like to defer the load of Intel extension DLLs (in `GetOrLoadIntelExtension()`) until we create `DeviceD3D12` with toggles, what do you think?",
      "parentUuid": "2cf7dcde_e6e5bd05",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fab8262e_4d172906",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 780,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:22:23Z",
      "side": 1,
      "message": "How expensive is it to load the Intel extension? It seems to be a couple file and registry key reads and then iterating the list of modules.",
      "parentUuid": "14a9b73d_c01df9a6",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd16ede_c6c77a98",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 780,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-18T05:00:47Z",
      "side": 1,
      "message": "The cost is loading an unused DLL to the memory and I am suggested not to do so, so I\u0027d prefer not loading the DLL (in initializing physical device) until we really want (when the toggle is on in the creation of device).\n\nWhat do you think?",
      "parentUuid": "fab8262e_4d172906",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba00eb1_9001b5e0",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 780,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-18T21:42:09Z",
      "side": 1,
      "message": "I think you can still achieve this in `SetupBackendDeviceToggles`\n\n\nyou can do:\n\n```\nif (deviceToggles-\u003eIsEnabled(Toggle::D3D12UseIntelMaxPerformanceThrottlePolicy) \u0026\u0026\n    GetOrLoadIntelExtension() \u003d\u003d nullptr) {\n  deviceToggles-\u003eForceSet(Toggle::D3D12UseIntelMaxPerformanceThrottlePolicy, false);\n}\n```\n\nFor example, we do something similar like:\n```\n    // Polyfill reflect builtin for vec2\u003cf32\u003e on Intel device if using FXC.\n    // See https://crbug.com/tint/1798 for more information.\n    if (gpu_info::IsIntel(vendorId) \u0026\u0026 !deviceToggles-\u003eIsEnabled(Toggle::UseDXC)) {\n        deviceToggles-\u003eDefault(Toggle::D3D12PolyfillReflectVec2F32, true);\n    }\n```",
      "parentUuid": "6bd16ede_c6c77a98",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d85251d2_334e60ae",
        "filename": "src/dawn/native/d3d12/PhysicalDeviceD3D12.cpp",
        "patchSetId": 21
      },
      "lineNbr": 780,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-19T03:18:04Z",
      "side": 1,
      "message": "I have to use `mutate` to achieve this as `GetOrLoadIntelExtension()` is not a `const` function.\n\nPTAL, thanks!",
      "parentUuid": "cba00eb1_9001b5e0",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb7fdc7_37430a5d",
        "filename": "third_party/CMakeLists.txt",
        "patchSetId": 21
      },
      "lineNbr": 265,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-13T11:53:09Z",
      "side": 1,
      "message": "Could you also update tools/fetch_dependencies.py?",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19333e60_e1d25284",
        "filename": "third_party/CMakeLists.txt",
        "patchSetId": 21
      },
      "lineNbr": 265,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-03-15T11:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "feb7fdc7_37430a5d",
      "revId": "07529983ae6e1ae95dd0baef7989f6dc58c2e2d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}