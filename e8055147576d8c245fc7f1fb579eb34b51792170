{
  "comments": [
    {
      "key": {
        "uuid": "e80562c3_05bba6b1",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-08T08:05:25Z",
      "side": 1,
      "message": "You could do it now using the \"if (@available(macOS 10.13, *)) {\" type of syntax. This function will also need to export if we need to resolve using a different render pass.",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a32bf6db_953a5b34",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-08T08:41:31Z",
      "side": 1,
      "message": "Do you mean we should also implement MTLStoreActionStoreAndMultisampleResolve in this patch?\n\nI have tested all the try bots support MTLStoreActionStoreAndMultisampleResolve, so if we use this MTLStoreActionStoreAndMultisampleResolve now, the path that resolving in another render pass won\u0027t be tested on the try bots with this CL. \n\nWe may also need to add queries to determine if we can use this action on the creation of MTLDevice, which I think is better to be added in another patch (maybe just like this:\nhttps://github.com/KhronosGroup/MoltenVK/blob/master/MoltenVK/MoltenVK/GPUObjects/MVKDevice.mm#L739)",
      "parentUuid": "e80562c3_05bba6b1",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b1d4dda_35475aae",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-08T12:28:11Z",
      "side": 1,
      "message": "You\u0027re right that the @available syntax is not enough.\n\nWe don\u0027t really have a good story to test with and without workarounds, even ANGLE doesn\u0027t have that at this point. I\u0027m thinking we could force the enablement of some workarounds for some tests using an extension of the INSTANTIATE_TEST syntax but that would come later.\n\nIn this patch we should definitely implement the good, no-workaround case in priority. Would you like to implement the workaround facilities in Dawn so we can test the second path?",
      "parentUuid": "a32bf6db_953a5b34",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb52490_e53c7374",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-08T12:29:42Z",
      "side": 1,
      "message": "I was using the term workaround but replace this with \"feature\", which would be using a similar path to workaround for emulation.",
      "parentUuid": "4b1d4dda_35475aae",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca638ff5_47f997f6",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-08T13:46:43Z",
      "side": 1,
      "message": "OK so do you mean in this patch (the first one to support MSAA on Metal) I should always use MTLStoreActionStoreAndMultisampleResolve without checking if it is really supported, and add the workaround with \"non-store and resolve\" later?\n\nFor the implementation of MSAA resolve on Metal, we need to add another workaround for the failures in the end2end test. I suggest we discuss the design of the infrastructure of driver workarounds in that patch.",
      "parentUuid": "5cb52490_e53c7374",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14167aee_2ab43446",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-08T14:33:53Z",
      "side": 1,
      "message": "\u003e OK so do you mean in this patch (the first one to support MSAA on Metal) I should always use MTLStoreActionStoreAndMultisampleResolve without checking if it is really supported, and add the workaround with \"non-store and resolve\" later?\n\u003e \nYep!\n\n\u003e For the implementation of MSAA resolve on Metal, we need to add another workaround for the failures in the end2end test. I suggest we discuss the design of the infrastructure of driver workarounds in that patch.\nSounds good",
      "parentUuid": "ca638ff5_47f997f6",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0386aa5_f8c9dc78",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-09T01:14:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14167aee_2ab43446",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8c65239_bd679c37",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-08T08:05:25Z",
      "side": 1,
      "message": "nit: let\u0027s use the texture\u0027s array layer and mip level even if it is always 0 for now.",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00adef71_3dff13d2",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 128,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-08T08:41:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8c65239_bd679c37",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f33ed96_0ba90345",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-08T08:05:25Z",
      "side": 1,
      "message": "That\u0027s more because all WebGPU target APIs don\u0027t support it. Can we replace this with an assert that arrayLayers is 1 in the if (sampleCount \u003e1)?",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5071164_4590f286",
        "filename": "src/dawn_native/metal/TextureMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 57,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-04-08T08:41:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f33ed96_0ba90345",
      "revId": "e8055147576d8c245fc7f1fb579eb34b51792170",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}