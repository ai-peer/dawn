{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a7dae2ae_b5ae5015",
        "filename": "/COMMIT_MSG",
        "patchSetId": 61
      },
      "lineNbr": 15,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "hmmmm...  Server::OnRequestDeviceCallback does `DeviceObjects().Free(data-\u003edeviceObjectId);` when it fails. If we *don\u0027t* do that - then does this problem also get resolved?",
      "range": {
        "startLine": 12,
        "startChar": 45,
        "endLine": 15,
        "endChar": 23
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c54a80_e81e1cb5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 61
      },
      "lineNbr": 15,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:41:47Z",
      "side": 1,
      "message": "Also isn\u0027t requestAdapter supposed to return an error device on failure? (not sure that\u0027s even a thing). Even with this change there are problems that could happen because the Server checks that handles are allocated in order. Imagine the following scenario:\n\n```\nClient                            Server\n\nCreate client::Device 1 (with invalid desc)\nrequestAdapter for Device 1\nCreate client::Device 2 (with valid desc)\nrequestAdapter for Device 2\n\n                                 process requestAdapter for device 1\n                                 error! device 1 is not added to KnownObjects\n                                 process requestAdapter for device 2\n                                 FatalError! ID 2 is past lastAllocated+1 (which is 1)\n```\n\nWe don\u0027t need to fix this now though a DISABLED_ test would be nice.",
      "parentUuid": "a7dae2ae_b5ae5015",
      "range": {
        "startLine": 12,
        "startChar": 45,
        "endLine": 15,
        "endChar": 23
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70182887_c3011682",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 61
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "almost done but I skipped src/dawn/native/Device.cpp and have to go",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15b4b84c_2aeab9d1",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 61
      },
      "lineNbr": 202,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "Breaking change here. We probably need to support both for the moment (use the new one if it\u0027s set, use the old one if not, crash if both are set).\n\nThough if no one is using the old .deviceLostCallback API yet then we can go ahead and break it (in which case we should still be able to remove .mode from DeviceLostCallbackInfo, see below)",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f75a7ad6_485595ac",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 61
      },
      "lineNbr": 202,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Good point! Added it back for now.",
      "parentUuid": "15b4b84c_2aeab9d1",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e23bfa16_c59f5ff6",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 61
      },
      "lineNbr": 204,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "I suppose we haven\u0027t discussed this, but for consistency I think these would go together in an info struct as well.",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7db2ef4c_bc0a83c0",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 61
      },
      "lineNbr": 204,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e23bfa16_c59f5ff6",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f05c13b_83ec1cac",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 61
      },
      "lineNbr": 1495,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "Nothing can be using this API yet so any breakage would only come up during a migration from .deviceLostCallback to .deviceLostCallbackInfo.\n\nIf we include this now then we have to break again later to remove it. Seems better to remove it as part of the breaking change. (Even if we still need to maintain some internal paths to handle the ProcessEvents mode from the deprecated .deviceLostCallback.)",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f4dca56_e9ac85cf",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 61
      },
      "lineNbr": 1495,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-14T21:16:34Z",
      "side": 1,
      "message": "If I don\u0027t default it right now, it\u0027s breaking because then `DeviceDescriptor` is no longer default constructable. See https://ci.chromium.org/ui/p/chromium/builders/try/linux-dawn-rel/31320/overview for example of the failure.",
      "parentUuid": "0f05c13b_83ec1cac",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a885614_8a51ba26",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 245,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-13T00:34:27Z",
      "side": 1,
      "message": "We should always overwrite the mode along with defaulting this callback. Similarly we only really want the userdata if we\u0027re using the user callback. Maybe can be structured similarly to my comment on the wire client",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebdc611d_8650dd7b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 245,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a885614_8a51ba26",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee2adb0_272fbdf7",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 259,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-13T00:34:27Z",
      "side": 1,
      "message": "nit: Same thought about userdata here",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4b8a1ac_b16c7720",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 259,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bee2adb0_272fbdf7",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "291d774f_a8ba7911",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 529,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-12T19:09:16Z",
      "side": 1,
      "message": "I suspect we may have re-entrancy issues here and at [1] for spontaneous mode.",
      "range": {
        "startLine": 529,
        "startChar": 12,
        "endLine": 529,
        "endChar": 82
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09311b67_0c100b41",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 529,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-13T00:34:27Z",
      "side": 1,
      "message": "In the dawn code? Or in user code calling back into dawn? If the latter we could probably make it not fully thread safe... though of course not ideal.",
      "parentUuid": "291d774f_a8ba7911",
      "range": {
        "startLine": 529,
        "startChar": 12,
        "endLine": 529,
        "endChar": 82
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a4d0cdd_8713dc95",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 529,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "about calling back into Dawn.\n\nIMO let\u0027s put a TODO about figuring this out.",
      "parentUuid": "09311b67_0c100b41",
      "range": {
        "startLine": 529,
        "startChar": 12,
        "endLine": 529,
        "endChar": 82
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "079f24a0_20066359",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 529,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "09311b67_0c100b41",
      "range": {
        "startLine": 529,
        "startChar": 12,
        "endLine": 529,
        "endChar": 82
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94c24630_e31aba7c",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 674,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-12T19:09:16Z",
      "side": 1,
      "message": "[1]",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "334c73a1_b3b29db7",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 674,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "94c24630_e31aba7c",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "313f4aef_89977685",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 731,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-12T19:09:16Z",
      "side": 1,
      "message": "Oops, will remove this stale TODO in next PS.",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58da1ccb_7c6a74d2",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 731,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "313f4aef_89977685",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f5d1f4_337b51f8",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 61
      },
      "lineNbr": 602,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "nit (we have a bunch of others to fix up): all `mUserdata`s come from outside the library and are expected to be dangling. I believe we should use `DisableDanglingPtrDetection` for them. (It\u0027s unfortunate we have to have dangling pointers even in Dawn\u0027s C++ API because C API sits in between, but I don\u0027t know what we would do about it.)\n\nIf not doing this now, add the standard TODO though.",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7c640ea_3bae4dc4",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 61
      },
      "lineNbr": 602,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Added standard TODO for now.",
      "parentUuid": "a9f5d1f4_337b51f8",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ad49ad5_38bb7678",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 61
      },
      "lineNbr": 455,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "If the device lost event is in the list, then won\u0027t this just always return false as long as the device is alive? Which will cause Chrome to keep polling periodically as long as a device is alive.\n\nDevice lost events are CPU-triggered, so maybe we could filter them out of the `futures` vector construction above as long as they\u0027re not ready yet..?",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "432e2aed_deba519c",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 61
      },
      "lineNbr": 455,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-14T21:16:34Z",
      "side": 1,
      "message": "So in the block above, when `WaitImpl` returns `TimedOut`, we actually return `false` already if we are just polling and the only events left are not ready, i.e. `DeviceLost` events. That\u0027s the main reason I added the comment as well because it means that right now, the `native::Instance::ProcessEvents` is actually still relying on `Device::Tick` to return `true` when we are doing work on the queue. Unfortunately though, this means that `SystemEvent` driven events don\u0027t currently have a good way to surface that there\u0027s still pending work and that Chrome should keep polling...\n\nOne idea I have right now is to add an additional alternative to the `GetCompletionData` that differentiates an event that polling should wait for verses an event that polling should just ignore... Thoughts?",
      "parentUuid": "3ad49ad5_38bb7678",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f58295f7_a8915e79",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 61
      },
      "lineNbr": 455,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "If we return false here, doesn\u0027t that mean we wrongly report that the application can stop calling ProcessEvents()?\n\nmaybe we can tag using the uppermost bit of device lost futures ? Then we can filter them out and not poll them",
      "parentUuid": "3ad49ad5_38bb7678",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed74938d_c893271f",
        "filename": "src/dawn/native/EventManager.cpp",
        "patchSetId": 61
      },
      "lineNbr": 455,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-16T00:21:54Z",
      "side": 1,
      "message": "Sorry, I was rushing and wrote the wrong thing. Should have been:\n\n\u003e If the device lost event is in the list, then won\u0027t this just always return needFutureProcessEvents\u003d*true* as long as the device is alive?\n\nbecause the device lost futures will always be sitting between readyEnd and futures.end().\n\nAnyway, I see now why you changed the TimedOut case. But I think it will cause a difference in behavior in `dawn::native::InstanceProcessEvents` which is the thing that Chrome uses - Chrome wants to keep checking periodically as long as there\u0027s potential for forward progress.\n\n\u003e One idea I have right now is to add an additional alternative to the GetCompletionData that differentiates an event that polling should wait for verses an event that polling should just ignore... Thoughts?\n\nSomething like this makes sense to me because we DO need to do all the normal handling on DeviceLost events if they *are* ready. It is still a SystemEvent, but maybe like:\n```cpp\nusing CompletionData \u003d std::variant\u003c\n  QueueAndSerial,\n  struct { bool makesForwardProgress; Ref\u003cSystemEvent\u003e\u003e event; }\u003e;\n```\n?",
      "parentUuid": "f58295f7_a8915e79",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "352c7972_f7946f5e",
        "filename": "src/dawn/tests/PartitionAllocSupport.cpp",
        "patchSetId": 61
      },
      "lineNbr": 63,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "IDK what Detected vs Released means but maybe this should have a different string? And maybe print the docs link too, and idk if it should DAWN_CHECK like the other one",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0000489_69e1e9f7",
        "filename": "src/dawn/tests/PartitionAllocSupport.cpp",
        "patchSetId": 61
      },
      "lineNbr": 63,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Oops sorry this was leftover from debugging... heh...",
      "parentUuid": "352c7972_f7946f5e",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1c96ef1_d8bb3a74",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterTests.cpp",
        "patchSetId": 61
      },
      "lineNbr": 133,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "Need to also check that it\u0027s not nullptr then?",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28cc4b94_e21e2971",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterTests.cpp",
        "patchSetId": 61
      },
      "lineNbr": 133,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1c96ef1_d8bb3a74",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "940129ef_068a9c1b",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterTests.cpp",
        "patchSetId": 61
      },
      "lineNbr": 162,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "What does this do if no callback is set? (maybe add a comment)",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85148aa8_eaf3aaa2",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterTests.cpp",
        "patchSetId": 61
      },
      "lineNbr": 162,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "I think this was a remnant from before I defaulted the callback mode in order to make this a non-breaking change, so removed.",
      "parentUuid": "940129ef_068a9c1b",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75997e4b_8b5d9e81",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterTests.cpp",
        "patchSetId": 61
      },
      "lineNbr": 330,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "same",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a347e156_1c24b07f",
        "filename": "src/dawn/tests/unittests/wire/WireAdapterTests.cpp",
        "patchSetId": 61
      },
      "lineNbr": 330,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Ditto to above.",
      "parentUuid": "75997e4b_8b5d9e81",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f66ebb1_77484a87",
        "filename": "src/dawn/wire/client/Adapter.cpp",
        "patchSetId": 61
      },
      "lineNbr": 256,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "```suggestion\n    // Ensure callbacks are not serialized as part of the command, as they cannot be passed between\n```",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6717060_cec3b136",
        "filename": "src/dawn/wire/client/Adapter.cpp",
        "patchSetId": 61
      },
      "lineNbr": 256,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f66ebb1_77484a87",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91386e26_390dad9c",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 216,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "I think this TODO belongs at line 240?",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8768beaf_29f9f7dd",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 216,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91386e26_390dad9c",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f746a99_f5dfff2a",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 217,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "nit: can this be constexpr or const?",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e56a77f_a2aa3fa6",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 217,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f746a99_f5dfff2a",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f3b659_230b05d7",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 248,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "Logic here is a little hard to follow, maybe something like this? Not a lot better but it makes it clear we ignore the descriptor if the callback is null.\n\n```suggestion\n    WGPUDeviceLostCallbackInfo deviceLostCallbackInfo \u003d kDefaultCallbackInfo;\n    if (descriptor \u0026\u0026 deviceLostCallbackInfo.callback !\u003d nullptr) {\n        deviceLostCallbackInfo \u003d descriptor-\u003edeviceLostCallbackInfo;\n        if (deviceLostCallbackInfo.mode \u003d\u003d WGPUCallbackMode_WaitAnyOnly) {\n            // TODO(dawn:2458) Update this when we have WGPUCallbackMode_Undefined.\n            deviceLostCallbackInfo.mode \u003d WGPUCallbackMode_AllowSpontaneous;\n        }\n    }\n\n    if (descriptor) {\n        mErrorCallback \u003d descriptor-\u003euncapturedErrorCallback;\n        mErrorUserdata \u003d descriptor-\u003euncapturedErrorUserdata;\n    }\n```",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b7465f6_fb1cbc2b",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 248,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3f3b659_230b05d7",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "954051bf_7ff549b9",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 352,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "I think the mode should be overwritten here too.",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4145f101_1b3fb5ab",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 61
      },
      "lineNbr": 352,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-14T21:16:34Z",
      "side": 1,
      "message": "Hmm.. I\u0027m not sure if that\u0027s feasible atm... I think that it\u0027s fine as it is because anyone using this is almost certainly not passing a mode into the descriptor?",
      "parentUuid": "954051bf_7ff549b9",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cde49c79_97ab6730",
        "filename": "src/dawn/wire/client/Device.h",
        "patchSetId": 61
      },
      "lineNbr": 104,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "TODO?",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7096d5a9_77446e8a",
        "filename": "src/dawn/wire/client/Device.h",
        "patchSetId": 61
      },
      "lineNbr": 104,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cde49c79_97ab6730",
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d1b78f_2a84e88a",
        "filename": "src/dawn/wire/client/Device.h",
        "patchSetId": 61
      },
      "lineNbr": 109,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-12T23:57:01Z",
      "side": 1,
      "message": "DisableDanglingPtrDetection",
      "range": {
        "startLine": 109,
        "startChar": 22,
        "endLine": 109,
        "endChar": 39
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "505090db_a4f6ca09",
        "filename": "src/dawn/wire/client/Device.h",
        "patchSetId": 61
      },
      "lineNbr": 109,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-15T01:43:17Z",
      "side": 1,
      "message": "Leaving the TODO for now.",
      "parentUuid": "b5d1b78f_2a84e88a",
      "range": {
        "startLine": 109,
        "startChar": 22,
        "endLine": 109,
        "endChar": 39
      },
      "revId": "187dc21884453016107bbd0735dcbeb185f8e7c8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}