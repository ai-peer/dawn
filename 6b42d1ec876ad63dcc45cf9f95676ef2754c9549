{
  "comments": [
    {
      "key": {
        "uuid": "94db43cc_5af96dbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-10T23:42:02Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aacc12e_f13a470b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d72b4a59_fd421dda",
        "filename": "src/common/Constants.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "I think we decided in the group that this would be 8.",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0ba2d10_74e5a3f4",
        "filename": "src/common/Constants.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-11T18:30:06Z",
      "side": 1,
      "message": "https://github.com/gpuweb/gpuweb/issues/693#issuecomment-613555566\n(but we should do it in followup of course)",
      "parentUuid": "d72b4a59_fd421dda",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e9563fc_8bc7a22b",
        "filename": "src/common/Constants.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "Ack. Will follow-up.",
      "parentUuid": "a0ba2d10_74e5a3f4",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0d68924_cbf48ad2",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 427,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "nit: could be initialized in the loop.",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78276eb3_6e413511",
        "filename": "src/dawn_native/RenderPipeline.cpp",
        "patchSetId": 4
      },
      "lineNbr": 427,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0d68924_cbf48ad2",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cbe12f2_424016b5",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "nit: this member variable should be private.",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88781207_01120c50",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "it\u0027s actually only used on GL. Moved it there.",
      "parentUuid": "4cbe12f2_424016b5",
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02f2bf8c_04ab0693",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "nit: slot + VertexBufferSlot(1)?",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddd490cc_5c27d44a",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-11T17:10:29Z",
      "side": 1,
      "message": "We actually don\u0027t have +/- binary operators for TypedIntegers. Initially had them but I think we decided to not include them. The fact that uint8_t(slot) + uint8_t(1) is type \"int\" is really really really unfortunate.\n\nI can add the binops though?",
      "parentUuid": "02f2bf8c_04ab0693",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c45f9dfb_c64d0cf9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-11T18:31:54Z",
      "side": 1,
      "message": "I don\u0027t think we should; it doesn\u0027t really make sense to add indices. An increment would make sense though. (slot.PlusOne()??)",
      "parentUuid": "ddd490cc_5c27d44a",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd064d01_aed0645e",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-11T19:15:46Z",
      "side": 1,
      "message": "Issue with this and the subtraction suggestion are that in release, TypedInteger is a POD. so it would have to be PlusOne(slot) and Subtract(endSlot, startSlot) which is... not so bad? but it would be defined on all uint8_t?",
      "parentUuid": "c45f9dfb_c64d0cf9",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a813c12_942d7482",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-11T19:28:08Z",
      "side": 1,
      "message": "Ah right, I forgot about that. Wish we could just write a \"+ 1\" operator...",
      "parentUuid": "fd064d01_aed0645e",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5808122_d81a8b27",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-14T09:21:22Z",
      "side": 1,
      "message": "TypedIntegers each represent a different \"space\" or \"unit\" so I think it\u0027s ok to add binops to them, especially additions. In physics, units are unchanged under addition and subtraction, but are changed by multiplication and division, so I think that\u0027s a good rational to only add + and -",
      "parentUuid": "9a813c12_942d7482",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d92f87a1_ce039386",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "It turns out I already had +/- operators but it wasn\u0027t working because they work by using the default +/- for the underlying type. uint8_t + uint8_t \u003d\u003e int.\n\nI added an ityp::Add and ityp::Sub to get around this problem though. WDYT?",
      "parentUuid": "e5808122_d81a8b27",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f71f318_f328a95d",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-15T21:46:24Z",
      "side": 1,
      "message": "LGTM\n\nStrictly speaking I disagree that these index types should be addable like physics units, but I think this is fine. In physics, (x kg \u003d x * kg), so (x kg + y kg \u003d (x+y) kg). Here, I see indices as 1d homogeneous coordinates (i,1), so (i,1) + (j,1) doesn\u0027t make sense.",
      "parentUuid": "d92f87a1_ce039386",
      "range": {
        "startLine": 460,
        "startChar": 46,
        "endLine": 460,
        "endChar": 89
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44463a65_8e1d6ce4",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 484,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 484,
        "startChar": 52,
        "endLine": 484,
        "endChar": 96
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e926926a_b502f952",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 484,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44463a65_8e1d6ce4",
      "range": {
        "startLine": 484,
        "startChar": 52,
        "endLine": 484,
        "endChar": 96
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aaddc2e_e75ab54d",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 498,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-11T07:09:22Z",
      "side": 1,
      "message": "nit: static_cast\u003cuint8_t\u003e(endSlot - startSlot)?",
      "range": {
        "startLine": 498,
        "startChar": 32,
        "endLine": 498,
        "endChar": 95
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cb2023e_29578a92",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 498,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-11T18:33:30Z",
      "side": 1,
      "message": "Though maybe we should add a subtraction op such that (endSlot - startSlot) returns uint8_t?",
      "parentUuid": "1aaddc2e_e75ab54d",
      "range": {
        "startLine": 498,
        "startChar": 32,
        "endLine": 498,
        "endChar": 95
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "650ab84a_bee3e142",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 498,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-11T19:15:46Z",
      "side": 1,
      "message": "^ though we could perhaps have TypedInteger binops auto-untypify the result so you have to re-typify if you\u0027re sure it should still be the same type.",
      "parentUuid": "8cb2023e_29578a92",
      "range": {
        "startLine": 498,
        "startChar": 32,
        "endLine": 498,
        "endChar": 95
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e6d2b61_928517c3",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 498,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-11T19:28:08Z",
      "side": 1,
      "message": "This would be fine with me, for + too",
      "parentUuid": "650ab84a_bee3e142",
      "range": {
        "startLine": 498,
        "startChar": 32,
        "endLine": 498,
        "endChar": 95
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7123719_f43ef0d1",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 498,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e6d2b61_928517c3",
      "range": {
        "startLine": 498,
        "startChar": 32,
        "endLine": 498,
        "endChar": 95
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdd515e2_4d04f1cf",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 512,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-09-11T01:17:56Z",
      "side": 1,
      "message": "nit: noop cast to uint8_t I think, also could use kMaxVertexBuffersTyped",
      "range": {
        "startLine": 512,
        "startChar": 40,
        "endLine": 512,
        "endChar": 48
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55f9238_d41f6cb3",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 512,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-09-15T20:24:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdd515e2_4d04f1cf",
      "range": {
        "startLine": 512,
        "startChar": 40,
        "endLine": 512,
        "endChar": 48
      },
      "revId": "6b42d1ec876ad63dcc45cf9f95676ef2754c9549",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}