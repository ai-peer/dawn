{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "02ca1891_c10608a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-30T04:52:19Z",
      "side": 1,
      "message": "PTAL. This CL attempts to address Corentin\u0027s comment at https://dawn-review.googlesource.com/c/dawn/+/45980/4/src/tests/DawnTest.h#b70. ",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3598c6e6_550d7b77",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-30T15:57:40Z",
      "side": 1,
      "message": "A question for Corentin. ",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db629fa3_a66247ae",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-30T13:11:34Z",
      "side": 1,
      "message": "I was trying to find a way to have the same macro for 2D and 3D. The {w, h} trick doesn\u0027t work but the following seems to work:\n\n  https://godbolt.org/z/sbGqzh4a9\n\nThe nested parenthesis are a bit worse than it would have been with nested curly brackets though :/",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e736009_5709676a",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-30T15:57:40Z",
      "side": 1,
      "message": "A quick clarification: do you mean that we need to change all callers in this code refactoring CL in order to reduce one single MACRO? I mean, change all EXPECT_TEXTURE_xxx (..., x, y, width, height, ...) to EXPECT_TEXTURE_xxx (..., {x, y}, {width, height}, ...) in order to fit \"origin\" and \"extent\". \n\nI will do it if you think it is worth, although it might take some effort (need to replace manually one by one, no easy way for string replace).",
      "parentUuid": "db629fa3_a66247ae",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e3820a_c3b79568",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-30T16:24:51Z",
      "side": 1,
      "message": "It\u0027s ok, there\u0027s at most 20 occurences. However note that in the godbolt I used () instead of {} because otherwise the commas inside of {} get used to split the arguments to the C macro.\n\nAustin WDYT about that suggestion?",
      "parentUuid": "0e736009_5709676a",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9a81537_9f09ea62",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-30T16:34:20Z",
      "side": 1,
      "message": "I\u0027m a bit behind on reviews here, but overall seems okay.\nThe godbolt requires you to pass in the unpacked (x, y) coords though - so maybe we should make overloads for MakeOrigin that take in an Extent3D. That way you can say:\n\nEXPECT_TEXTURE_RGBA8_EQ(expected, texture, (mipSize), (mipSize), 0)",
      "parentUuid": "56e3820a_c3b79568",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "196a2a4b_3e40b451",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-30T17:10:22Z",
      "side": 1,
      "message": "It is not 20 occurences. It about 60 for EXPECT_TEXTURE_RGBA8_EQ only. if we change parameters for all these 4 EXPECT_TEXTURE/EXPECT_PIXEL MACROs from (..., x, y, w, h, ...) to (..., (x, y), (w, h), ...), it would be around 500 occurences. \n\nSo I wonder whether it is worth to do so for reducing a single MACRO. I know you set a high standard for code quality though.",
      "parentUuid": "c9a81537_9f09ea62",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c01f71c_20547b53",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-30T17:13:30Z",
      "side": 1,
      "message": "60 is annoying but that\u0027s 15 minutes of work at most if you do it by hand (likely the same amount of time using sed actually). It\u0027s good to do it now before there are too many like EXPECT_PIXEL (which for sure would need a sed script if we need to change it).",
      "parentUuid": "196a2a4b_3e40b451",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0ead2ea_4dc1253d",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-31T05:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c01f71c_20547b53",
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95607386_edf21102",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-30T04:52:19Z",
      "side": 1,
      "message": "We can almost remove this AddTextureExpectation. But there is one difference: we use a vector above, but we use a raw data here. I tend to keep this one, because there are a lot of callers where we use a single raw data for comparison.",
      "range": {
        "startLine": 347,
        "startChar": 46,
        "endLine": 347,
        "endChar": 67
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18485401_7f3c1432",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-31T12:43:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "95607386_edf21102",
      "range": {
        "startLine": 347,
        "startChar": 46,
        "endLine": 347,
        "endChar": 67
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffbe4e22_8dd8ecc2",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-30T04:52:19Z",
      "side": 1,
      "message": "I\u0027d rather to say \"layer\", because all of these three can be seen as slice: different mip levels, layers and aspects can be seen as mip slices, layer slices, and plane slices. So it makes more sense to specify \"layer\" here.",
      "range": {
        "startLine": 408,
        "startChar": 59,
        "endLine": 408,
        "endChar": 64
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a74f98cd_9cad3550",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-30T13:11:34Z",
      "side": 1,
      "message": "+1, but that should be part of the origin since 2D array layers are specified with origin.z in copies.",
      "parentUuid": "ffbe4e22_8dd8ecc2",
      "range": {
        "startLine": 408,
        "startChar": 59,
        "endLine": 408,
        "endChar": 64
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2329766_cee7536a",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-31T05:35:08Z",
      "side": 1,
      "message": "Ack. It should. But the current tests don\u0027t use origin.z at all. Most callers name it \"layer\" too in order to specify the particular layer index if it is a variable (some callers just use a constant value).",
      "parentUuid": "a74f98cd_9cad3550",
      "range": {
        "startLine": 408,
        "startChar": 59,
        "endLine": 408,
        "endChar": 64
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49511b9a_da5b63b3",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-31T12:43:08Z",
      "side": 1,
      "message": "I\u0027m not sure why this is left unaddressed. It makes things easier to understand when putting the layer in the origin because there\u0027s a single number left alone that\u0027s the mip level. This way there is no confusion as to which is the mip level and which is the layer.\n\nAlso I found a better idea for this yesterday evening but didn\u0027t have connection to share it:\n\n https://godbolt.org/z/xsx3MaT4h\n\nIt allows 1) using {} and 2) removing the level argument when it is the default value of 0.\n\nThe second part of the comment can be left unadressed, but we should at least open a bug to track that item.",
      "parentUuid": "e2329766_cee7536a",
      "range": {
        "startLine": 408,
        "startChar": 59,
        "endLine": 408,
        "endChar": 64
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fef0242_96e8c822",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2021-03-31T15:06:16Z",
      "side": 1,
      "message": "Can we leave the first part as a separate issue too? This CL is used to add a potential texture result comparison MACRO but don\u0027t need to add a new one (I confirmed). The next one will remove layer / slice into origin.z, which will change the logic of some functions, I think. Actually, we separate depth and layer in a lot of functions for copy, even though we have one parameter \"depthOrArrayLayers\", and/or depth/layer index is duplicated with parameters like origin.z. I think I can have a more through thinking about code refactoring for this kind of thing.",
      "parentUuid": "49511b9a_da5b63b3",
      "range": {
        "startLine": 408,
        "startChar": 59,
        "endLine": 408,
        "endChar": 64
      },
      "revId": "96acda53d7bc4f5bb51d8c8232863bb358c48824",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}