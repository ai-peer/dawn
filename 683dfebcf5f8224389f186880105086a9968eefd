{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "527bffdf_6c05e6ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Great job, Ben!",
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04172c03_a84c7074",
        "filename": "src/tint/utils/hash_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 50,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Can you add a couple more that show you has to the same value for Vectors of different static size (but with same elements)? Example:\n\n```\nEXPECT_EQ(Hash(Vector\u003cint, 1\u003e({1, 2, 3})), Hash(Vector\u003cint, 10\u003e({1, 2, 3})));\n```",
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d254577d_9349a308",
        "filename": "src/tint/utils/hash_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 50,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-21T16:04:07Z",
      "side": 1,
      "message": "Good idea. Done.",
      "parentUuid": "04172c03_a84c7074",
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aac19d0b_4b4ad23f",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T20:06:04Z",
      "side": 1,
      "message": "I\u0027m on the fence about defaulting this to 0. We will most likely always want to specify a specific size. Further, I think it would be interesting to provide a deduction guide that automatically sets N to the number of elements we contruct with, for example:\n\n```\nutils::Vector a{1, 2, 3}; // Same as utils::Vector\u003cint, 3\u003e\n```",
      "range": {
        "startLine": 121,
        "startChar": 31,
        "endLine": 121,
        "endChar": 34
      },
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d735a254_7d0dfa4d",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T20:17:56Z",
      "side": 1,
      "message": "I saw that MakeVector below pretty much does this, but I think using a deduction guide would be more elegant.",
      "parentUuid": "aac19d0b_4b4ad23f",
      "range": {
        "startLine": 121,
        "startChar": 31,
        "endLine": 121,
        "endChar": 34
      },
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca208ff2_80f46839",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-21T16:04:07Z",
      "side": 1,
      "message": "I keep on thinking this is a C++ 20 feature!\nI\u0027d love to do this, but I can\u0027t figure out how, or whether it\u0027s possible for this type.\n\nThe `std::initializer_list` constructor doesn\u0027t have any way to infer the number of arguments provided, so I don\u0027t think I can use that constructor.\n\nAdding a `template\u003ctypename ... Ts\u003e` constructor could work, but it would introduce overload ambiguities with the other constructors.\n\nHappy to do this as a followup if we can figure out a clean approach.\n\nAs for defaulting to `0`. Yeah, I understand, but 0 seems like the best thing to default to, as it acts like a regular `std::vector`. There are going to be places where the small vector just isn\u0027t going to be useful - think a vector that needs to contain all the AST nodes. The typical number of AST nodes is going to far exceed any small-number we can think of.",
      "parentUuid": "d735a254_7d0dfa4d",
      "range": {
        "startLine": 121,
        "startChar": 31,
        "endLine": 121,
        "endChar": 34
      },
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65a33006_f6edc796",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-21T18:05:03Z",
      "side": 1,
      "message": "\u003e Happy to do this as a followup if we can figure out a clean approach.\nMakes sense.\n\n\u003e As for defaulting to  0 . Yeah, I understand, but 0 seems like the best thing to default to, as it acts like a regular  std::vector\nFair point.",
      "parentUuid": "ca208ff2_80f46839",
      "range": {
        "startLine": 121,
        "startChar": 31,
        "endLine": 121,
        "endChar": 34
      },
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8af1068_d79edd99",
        "filename": "src/tint/utils/vector_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 1358,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Well done on the unit tests!",
      "range": {
        "startLine": 1358,
        "startChar": 0,
        "endLine": 1358,
        "endChar": 4
      },
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fad6baa_26144b35",
        "filename": "src/tint/utils/vector_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 1358,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-21T16:04:07Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "d8af1068_d79edd99",
      "range": {
        "startLine": 1358,
        "startChar": 0,
        "endLine": 1358,
        "endChar": 4
      },
      "revId": "683dfebcf5f8224389f186880105086a9968eefd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}