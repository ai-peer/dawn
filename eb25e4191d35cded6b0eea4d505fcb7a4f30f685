{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "956ab317_5e30fd3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-31T21:31:00Z",
      "side": 1,
      "message": "LGTM",
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f58533d_b3176d8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "LGTM",
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f629a12_b566d281",
        "filename": "dawn.json",
        "patchSetId": 8
      },
      "lineNbr": 773,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-31T21:31:00Z",
      "side": 1,
      "message": "I\u0027m thinking about how this will be used elsewhere now. What we have now is pretty specific to how we\u0027ll implement this in Blink. However, for native emscripten users, it won\u0027t be so useful if they want video/canvas imports.\n\nPerhaps, to have good extensibility we should have an extension struct \"external texture webgpu views descriptor\" that contains the current \"plane0\" member.\n\nLater, for Emscripten, we\u0027ll want to add a chained \"external texture html selector descriptor\" which gets translated in Emscripten into a query of that selector, followed by device.importExternalTexture(). (see \"surface descriptor\" and \"surface descriptor from canvas HTML selector\")\n\nAnd then further on, we may have an extension struct that lets you directly import something like a DXGI handle..?",
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60548a36_606187d1",
        "filename": "dawn.json",
        "patchSetId": 8
      },
      "lineNbr": 773,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "That\u0027s a super interesting idea but I\u0027m worried that it is a bit of feature creep for this CL. It also asks a lot of questions, like is GPUExternalTexture no longer a purely frontend object if you can import DXGI surfaces directly or is the creation done by the backend but the type stays mostly frontend? Also it delays the start of implementing the new type of bind group binding and the rest of the stack. Maybe we can look at it in paralle?",
      "parentUuid": "9f629a12_b566d281",
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4f9dc21_467217dd",
        "filename": "src/common/Constants.h",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "We have kMaxPlanesPerFormat in Format.h maybe we could merge both constants by putting them in Surbresource.h?",
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c87f7832_655aa4ab",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1036,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "nit: just return ExternalTexture::Create(this, descriptor);",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1036,
        "endChar": 42
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49b68dbc_9e02d6bb",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-31T21:31:00Z",
      "side": 1,
      "message": "I think this check doesn\u0027t happen on creation. Similar to how you can create a bind group from destroyed resources, but only get an error when you use the bind group in a queue.submit.\n\nInstead, we would have something like TextureBase\u0027s ValidateCanUseInSubmitNow - which we\u0027ll check when the external texture is used.",
      "range": {
        "startLine": 26,
        "startChar": 7,
        "endLine": 30,
        "endChar": 9
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acda65a4_dbd5f9c7",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "I think that the group decided that we\u0027ll produce a validation error when creating a bindgroup with a destroyed object. Though it\u0027s not written down in the spec yet. Either option work for me, and if need be we\u0027ll change to match bindgroup\u0027s behavior when it is stabilized.",
      "parentUuid": "49b68dbc_9e02d6bb",
      "range": {
        "startLine": 26,
        "startChar": 7,
        "endLine": 30,
        "endChar": 9
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532dcc43_dc09509f",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 63,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-31T21:31:00Z",
      "side": 1,
      "message": "I know we do this elsewhere, but that might just be outdated code. I think the native API can assume inputs are well-formed and this could be an ASSERT if it\u0027s not optional in dawn.json",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 63,
        "endChar": 9
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32944aec_670869f8",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "I found a single occurence and removed it: https://dawn-review.googlesource.com/c/dawn/+/46624",
      "parentUuid": "532dcc43_dc09509f",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 63,
        "endChar": 9
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "067f6a2b_53f2d593",
        "filename": "src/dawn_native/ExternalTexture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "Could we have an allow-list of formats for external textures too? In the future I think only select multi-planar formats should be supported as well as \"filterable float formats\". We can start with RGBA8Unorm BGRA8Unorm and RGBA16Float, WDYT?",
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30f1ef07_e1631b70",
        "filename": "src/dawn_native/ExternalTexture.h",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-31T21:31:00Z",
      "side": 1,
      "message": "unit: extra indentation?\n\nalso, would be nice to have a newline after this",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38161c1c_56cecef3",
        "filename": "src/dawn_native/ExternalTexture.h",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-01T15:06:19Z",
      "side": 1,
      "message": "Uh, and it should be before the includes, that\u0027s what we do in all other files.",
      "parentUuid": "30f1ef07_e1631b70",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "eb25e4191d35cded6b0eea4d505fcb7a4f30f685",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}