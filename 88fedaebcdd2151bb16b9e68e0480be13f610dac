{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e361b6_a5dffcbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-04-28T14:02:32Z",
      "side": 1,
      "message": "PTAL, thanks",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37c8b8b2_7e71af22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T15:40:33Z",
      "side": 1,
      "message": "LGTM",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fbadfe3_aa656f27",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1055,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T15:40:33Z",
      "side": 1,
      "message": "nit: This can do\n\n```\nreturn ValidateWGSLProgramExtensions(...);\n```",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7479d6e8_b3172637",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1055,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-04-29T10:10:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fbadfe3_aa656f27",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "302bad04_ddc9aef8",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T15:40:33Z",
      "side": 1,
      "message": "How cheap is it to make an inspector? I think we could move this logic in ReflectShaderUsingTint and store the list of used extensions somewhere in ShaderModuleBase. We\u0027ll most likely need to use them at some point in Dawn to do backend-dependent things (enable FXC options, pipeline instrumentation etc). We could start with an unordered_map but over time I\u0027d expect we\u0027d use a wrapped bitset like ToggleSet.\n\nWDYT?",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae01031e_06830d24",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-04-29T10:10:11Z",
      "side": 1,
      "message": "For now making a inspector is very cheap, it does nothing but just store the program pointer. I do some refactoring on `ReflectShaderUsingTint` to make it records both entry-point-wise metadatas and shader-wise extensions information, but still leave the validation code here.\n\nFor the wrapped bitset, currently we do have a enum class for all Tint-supported WGSL extension, namely `tint::ast::enable::ExtensionKind`, and a `tint::ast::ExtensionSet` (which is currently a `std::unordered_set\u003ctint::ast::Enable::ExtensionKind\u003e`). Maybe I can change it into a wrapped bitset, and use it in both Tint and Dawn here.",
      "parentUuid": "302bad04_ddc9aef8",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f72d221_d32e8f80",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-29T12:04:06Z",
      "side": 1,
      "message": "I\u0027m not 100% sure if we want to shared Dawn and Tint types directly like this. I\u0027m thinking we probably need to keep the separation because Tint needs to build standalone. Ben WDYT?\n\nThe top comment was not exactly clear. What I meant is that we can also move the validation to ReflectShaderUsingTint. There\u0027s already a lot of error cases there that result in an error shader module if not validated. It would mean that the extensions not present would be in a validation error instead of compilation messages, but that\u0027s probably ok.",
      "parentUuid": "ae01031e_06830d24",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "271b7116_6e4fbbca",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-29T12:59:12Z",
      "side": 1,
      "message": "Please keep them separate. Tint cannot depend on Dawn code.\nWe don\u0027t really want to expose the `tint::ast` as public API, so a list of strings (as exposed by the Tint API) is fine for now. If we find this is too fragile, we can look at exposing an extension symbol list as a later followup.",
      "parentUuid": "9f72d221_d32e8f80",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0113123_2162ddfc",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1086,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T15:40:33Z",
      "side": 1,
      "message": "u-u-nit: uses an extension that\u0027s not enabled maybe? (it\u0027s not disallowed, just not enabled when creating the device).",
      "range": {
        "startLine": 1086,
        "startChar": 55,
        "endLine": 1086,
        "endChar": 65
      },
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bfc3283_ff70a9a5",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1086,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-04-29T10:10:11Z",
      "side": 1,
      "message": "Changed to \"Shader module uses extension(s) not enabled for its device.\".",
      "parentUuid": "e0113123_2162ddfc",
      "range": {
        "startLine": 1086,
        "startChar": 55,
        "endLine": 1086,
        "endChar": 65
      },
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5c96c77_742b0398",
        "filename": "src/dawn/native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1086,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-29T12:04:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1bfc3283_ff70a9a5",
      "range": {
        "startLine": 1086,
        "startChar": 55,
        "endLine": 1086,
        "endChar": 65
      },
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be10080e_f8a2c124",
        "filename": "src/dawn/native/ShaderModule.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-28T15:40:33Z",
      "side": 1,
      "message": "nit: this doesn\u0027t need to be exposed in the header since it is an implementation detail of ValidateAndParseShaderModule",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65f00c43_319314d4",
        "filename": "src/dawn/native/ShaderModule.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-04-29T10:10:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be10080e_f8a2c124",
      "revId": "88fedaebcdd2151bb16b9e68e0480be13f610dac",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}