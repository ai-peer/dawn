{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "80680684_2bf5fa8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-09-28T12:57:17Z",
      "side": 1,
      "message": "android-binary-size supersize result:\n\"total\u003d-32.0kb\" (if I\u0027m reading the metrics correctly): https://logs.chromium.org/logs/chromium/buildbucket/cr-buildbucket/8768710426162276273/+/u/Read_diff_results/json.output",
      "revId": "f70be387abcf72acd284d9f10375f49c76e5d865",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94e76f38_ae050bac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-29T01:44:23Z",
      "side": 1,
      "message": "LGTM\n\nnit: I think we should use +\u003d instead of \u003c\u003c.\nThe stream abstraction isn\u0027t that useful in this particular case\n\nyou could also explore doing the \"string-per-line\" idea that was mentioned in the bug, though it may not help as much as this first major reduction here.",
      "revId": "f70be387abcf72acd284d9f10375f49c76e5d865",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2086e15_2c59608f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-29T12:33:34Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "f70be387abcf72acd284d9f10375f49c76e5d865",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4042fd24_55e30620",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-09-29T13:38:53Z",
      "side": 1,
      "message": "Do you mean using +\u003d operator of string directly?\n\nFor the string-per-line idea, I can think of changing in editor from\n```\nR\"(\naaa\nbbb\n)\"\n```\nto\n```\n\"aaa\"\n\"bbb\"\n```\n\nCorentin mentions \"type/function to compress in release builds. Can you and Corentin provides more details? Is it some config in the build/cmake, or some macro tricks?",
      "parentUuid": "94e76f38_ae050bac",
      "revId": "f70be387abcf72acd284d9f10375f49c76e5d865",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f237b7d3_94343d18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-09-29T14:02:53Z",
      "side": 1,
      "message": "yes, and yes.\n\nCorentin\u0027s idea is to have something like your previous constexpr concat function, but instead one that removes white spaces from the strings.\nI\u0027m not sure precisely how it would be done though - could be tricky",
      "parentUuid": "4042fd24_55e30620",
      "revId": "f70be387abcf72acd284d9f10375f49c76e5d865",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38faa9e0_8facafa8",
        "filename": "src/dawn/native/BlitTextureToBuffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-29T12:33:34Z",
      "side": 1,
      "message": "I wonder if we could have a constexpr type / function that \"compresses\" strings in release builds for binary size, for example by removing extra spaces.",
      "revId": "f70be387abcf72acd284d9f10375f49c76e5d865",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}