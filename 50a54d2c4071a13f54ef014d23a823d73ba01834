{
  "comments": [
    {
      "key": {
        "uuid": "53748907_9785099d",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 16
      },
      "lineNbr": 270,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "nit: We can do this after we\u0027ve caught the error on MapReadAsyncImpl, after tracker-\u003eTrack. Only after tracking the buffer do we care about the new callback.\n\nEven better, maybe the map tracker and the other trackers could call SetHasPendingCallback inside the Track function.",
      "range": {
        "startLine": 270,
        "startChar": 8,
        "endLine": 270,
        "endChar": 41
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7874de5_00c343ce",
        "filename": "src/dawn_native/Buffer.cpp",
        "patchSetId": 16
      },
      "lineNbr": 270,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-28T23:41:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53748907_9785099d",
      "range": {
        "startLine": 270,
        "startChar": 8,
        "endLine": 270,
        "endChar": 41
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aacaf0a3_996cc665",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 719,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "Can this be inside the \"if (mCompletedSerial !\u003d mLastProcessedSerial || mHasNewCallback)\" ?",
      "range": {
        "startLine": 719,
        "startChar": 8,
        "endLine": 719,
        "endChar": 29
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8553043_b45b482a",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 719,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-28T23:41:32Z",
      "side": 1,
      "message": "This needs to be outside because it will update the completed serial, which we need for the if check.",
      "parentUuid": "aacaf0a3_996cc665",
      "range": {
        "startLine": 719,
        "startChar": 8,
        "endLine": 719,
        "endChar": 29
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fd1957c_51108af5",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 725,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "This could use a comment that it will be reset to true by the trackers if there are still pending callbacks remaining. Maybe it should be called \"mHasPendingCallback\".",
      "range": {
        "startLine": 725,
        "startChar": 12,
        "endLine": 725,
        "endChar": 36
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe2d76bb_565d4f5e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 725,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-28T23:41:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fd1957c_51108af5",
      "range": {
        "startLine": 725,
        "startChar": 12,
        "endLine": 725,
        "endChar": 36
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3acfd7c4_9f0ccedb",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 734,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "could we avoid ticking these as well if nothing has changed?",
      "range": {
        "startLine": 728,
        "startChar": 8,
        "endLine": 734,
        "endChar": 51
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4ead48c_c1c11922",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 16
      },
      "lineNbr": 734,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-28T23:41:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3acfd7c4_9f0ccedb",
      "range": {
        "startLine": 728,
        "startChar": 8,
        "endLine": 734,
        "endChar": 51
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "326909eb_93daafbc",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "You removed this branch in DeviceVk. Could it be removed here as well?",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31867bb7_ec38aea9",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T20:42:18Z",
      "side": 1,
      "message": "this has the same problem as the GL backend where we don\u0027t naturally ever get to the pending serial and the callbacks are never fired from the mappings in dawn test tear down. So even with the has new callbacks flag, since we don\u0027t tick to the mapped serial value, we don\u0027t fire the callbacks. maybe we need to rework how we track the map requests instead of using pending serial?",
      "parentUuid": "326909eb_93daafbc",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "295f1c5f_fc44e912",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-28T02:26:37Z",
      "side": 1,
      "message": "Ah, that\u0027s unfortunate. Do you think the following would work?\n\n(rename GetPendingCommandSerial to imply it\u0027s not a simple getter)\nwhen you call GetPendingCommandSerial, the DeviceBase stores off the serial so it remembers it must Tick() until it reaches that future serial. Then, we may not need SetHasNewCallback() because the future serial is the signal that we need to keep ticking until we reach it.\n\nThe |if| condition in DeviceBase::Tick would then become\n\nmCompletedSerial !\u003d std::max(mLastProcessedSerial, mFutureSerial)",
      "parentUuid": "31867bb7_ec38aea9",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99ddcc8a_ca1bd819",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-28T02:29:39Z",
      "side": 1,
      "message": "Probably not rename completely, but instead have a separate function. The simple getter is probably still sufficient in other parts of Dawn.",
      "parentUuid": "295f1c5f_fc44e912",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc5e0b6a_19bda618",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-28T23:41:32Z",
      "side": 1,
      "message": "do we only want to tick to future serial during shut down? when would it be appropriate to go from completed serial to future?",
      "parentUuid": "99ddcc8a_ca1bd819",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87a261c1_9faabaa5",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-29T16:28:15Z",
      "side": 1,
      "message": "I think putting it as part of AssumeCommandsComplete() would make sense. Hard to say though because in the past we\u0027ve had edge cases around serials and when callbacks happen.\n\nThe more I think about it though, the more it seems like it would be rather similar to your current patch, except with a Serial instead of boolean. It could be something like SetFutureCallbackSerial(Serial serial) instead of SetHasNewCallback",
      "parentUuid": "bc5e0b6a_19bda618",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "811aebb7_66d7bb14",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 177,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-06-01T20:37:07Z",
      "side": 1,
      "message": "even though they\u0027re similar, I think I like future callback serial more because it caps the serial so we don\u0027t need to unnecessarily up command serial any larger.",
      "parentUuid": "87a261c1_9faabaa5",
      "range": {
        "startLine": 171,
        "startChar": 10,
        "endLine": 177,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d78c944_f7e835a4",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 304,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "This comment isn\u0027t what the code is doing. We want to be sure all callbacks fire, if I understand correctly. Maybe it would be better to call SetHasNewCallback() instead?",
      "range": {
        "startLine": 302,
        "startChar": 8,
        "endLine": 304,
        "endChar": 46
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a557815_325d89cf",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 16
      },
      "lineNbr": 304,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-06-01T20:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d78c944_f7e835a4",
      "range": {
        "startLine": 302,
        "startChar": 8,
        "endLine": 304,
        "endChar": 46
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15886bdd_8e04b58b",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 16
      },
      "lineNbr": 157,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "Hm, this wasn\u0027t here before; why do we need it now?",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f23e443_3988d689",
        "filename": "src/dawn_native/opengl/DeviceGL.cpp",
        "patchSetId": 16
      },
      "lineNbr": 157,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-05-27T20:42:18Z",
      "side": 1,
      "message": "This was a problem I ran into when we stopped increasing the serials because in dawn test tear down we map slots synchronously and then we wait on the callback to be fired, but since the serials never reach the pending serial it hangs forever. I tried to compare what was missing in GL and metal because it seemed to be fine in d3d12 and vulkan, and it seems to be that in vulkan we have to transition states in our map async impls, which add commands and increments the serials naturally. in d3d12, we always get next serial at the end of tickimpl.",
      "parentUuid": "15886bdd_8e04b58b",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86c029b4_8ed69195",
        "filename": "src/tests/end2end/FenceTests.cpp",
        "patchSetId": 16
      },
      "lineNbr": 158,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-27T19:46:39Z",
      "side": 1,
      "message": "I don\u0027t think we should have the wait in the middle, because that means the fences in flight are empty after the wait. That doesn\u0027t really test the idea that there are multiple callbacks.\n\nMaybe we can have\n 1) A test that does: Signal, Signal, OnCompletion, OnCompletion, Wait\n 2) A test that does: Signal, OnCompletion, Signal, OnCompletion, Wait",
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd4b8f4_b02bc0de",
        "filename": "src/tests/end2end/FenceTests.cpp",
        "patchSetId": 16
      },
      "lineNbr": 158,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2020-06-01T20:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86c029b4_8ed69195",
      "revId": "50a54d2c4071a13f54ef014d23a823d73ba01834",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}