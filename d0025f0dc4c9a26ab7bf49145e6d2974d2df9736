{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "472793c6_f07d1bb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "I have lots of nits, but the structure looks amazingly better!",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba6a43fd_e1684a56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T00:43:58Z",
      "side": 1,
      "message": "Big thanks for the comments (and thanks for the patience too :)).\nReply some comments because they may affect the structure. \n\nI\u0027m fighting with the crash bots (RenderPipeline::Initialize crash on linux vulkan, which I cannot reproduce on local with different mesa driver version from bots and a hang issue when running the case with validation layer with D3D12 on windows, which I can reproduce local, it is also related to the renderPipeline) and will address all of them after I fix the bots :)",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc403be1_8dfbb63f",
        "filename": "dawn.json",
        "patchSetId": 6
      },
      "lineNbr": 1040,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-27T10:19:35Z",
      "side": 1,
      "message": "(Copy from origin CL, left by Corentin):\nIt could be a separate options structure so we can add members over time without breaking compatibility I guess.\n\nReply:\nAgree with use a seperate options structure. My plan is to add flipY support with the internal pipeline in following patch. Do you think it is Ok for me to add this option structure in the next patch?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "401c8f71_59f727de",
        "filename": "dawn.json",
        "patchSetId": 6
      },
      "lineNbr": 1040,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Yeah as long as we don\u0027t start using it in Chromium until then we can do breaking changes to the API.",
      "parentUuid": "fc403be1_8dfbb63f",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f8aba28_20752857",
        "filename": "src/dawn_native/CMakeLists.txt",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: remove commas, and this is missing the InternalPipelineStore",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e617938_58876403",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 35,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Can we have these be either switch statements or arrays? Chromium disallows any new static initializer (that gets executed before main()) like these ones.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4ee3889_a9807f8b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: in a follow-up patch can we switch to using a single triangle like in ANGLE\u0027s BlitGL? It would avoid a seam at the triangle\u0027s edge IIRC.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eca683a6_b3ed93ec",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T00:43:58Z",
      "side": 1,
      "message": "Absolutely, I think this is the reason why my test fails in border case when rect is a bit big.",
      "parentUuid": "c4ee3889_a9807f8b",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b5edecb_c7f560af",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: texcoord?",
      "range": {
        "startLine": 60,
        "startChar": 37,
        "endLine": 60,
        "endChar": 43
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3c84b00_f5dbef95",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: ValidateCopyTextureFormatConversion?",
      "range": {
        "startLine": 92,
        "startChar": 19,
        "endLine": 92,
        "endChar": 43
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bbd9278_1fde3e6b",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "If we use a uniform buffer to pass parameters, do we see the need for any other types of pipeline (except for the output color format)?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3ead796_f4d97fc1",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Do we see any other shaders in the future? Likewise it seems that with a uniform buffer there could be a single shader.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53747a3a_902140e8",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T00:43:58Z",
      "side": 1,
      "message": "Actually, based on current spec, limit the src and dst texture to 2D, the only concern is copy from formats like bgra8unorm to the format rgba8unorm-srgb.  I\u0027m trying to use usampler to get the uint value and use fragment shader to write it into the dest. I think it cannot be handled by uniform + if-else.",
      "parentUuid": "c3ead796_f4d97fc1",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a352d5c_af6abe4a",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T11:19:22Z",
      "side": 1,
      "message": "I\u0027m not sure I understand, what is it that\u0027s not possible with the combination of bgra8unorm to the format rgba8unorm-srgb? both switching R and B and converting color spaces should work well with uniform and if else no?",
      "parentUuid": "53747a3a_902140e8",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4533063d_516a775a",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T12:11:59Z",
      "side": 1,
      "message": "Maybe it works. But I prefer to do the thing like keep the content in the texture as it is and just switch the channel info. More specific case is like :\nCopy rgba8unorm to rgba8unorm-srgb, which is directly copy and no need to do the color conversion in shaders.\n\nBut let\u0027s assume the case can be covered by the uniform buffer and and color space converting logic. So we\u0027ll have one pipeline and one shaders to handle all of the case.\n\nAnd in this condition, do you have more suggestions about the structure? (And I\u0027m happy to accept it if it can simplify current logic ：）)",
      "parentUuid": "7a352d5c_af6abe4a",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "484a21de_b81592b2",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Yeah maybe in that case we could decay to just a CopyTextureToTexture command.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5736bc59_4b9492e7",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: could maybe be split to a separate method called GetOrCreateCopyTexturePipeline() that returns the pipeline?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ab77fef_e9a85a0d",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 177,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "the refcounting problems in InternalPipelineStore would disappear if this user AvquireRef(device-\u003eCreateShaderModule) ditto for pipelines. The issue is that the shader module is created with one ref, then assigning it to a Ref\u003c\u003e takes another ref, when instead what we want to do here is make the Ref\u003c\u003e take ownership of it.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e28962bd_859699b9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 198,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: no need for the cFoo convention that\u0027s mostly used for the Combo descriptors to make the difference between colorStates which is a const pointer that points to cColorState that can be modified. Here we\u0027re not a combo descriptor so we can just use colorState.",
      "range": {
        "startLine": 198,
        "startChar": 33,
        "endLine": 198,
        "endChar": 44
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f28062d9_e404b8c2",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 202,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: group this with the declaration of the variable?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a8661e6_0e45d6de",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 210,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "ditto separate it before setting descriptor.\n\nSo we\u0027d have everything for colorState then everything for the programmable state, then everything for the vertex state.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2d6d9fc_e628b34c",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 221,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: configuration",
      "range": {
        "startLine": 221,
        "startChar": 23,
        "endLine": 221,
        "endChar": 32
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffde7acd_35872f52",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 226,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: this could be left to the default value of \"undefined\" that chooses the texture\u0027s format.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05dd6a8d_6390fbad",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 244,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-27T10:19:35Z",
      "side": 1,
      "message": "(Copy from origin CL, left by Corentin:)\nWe\u0027re working in 2D so if we need to support rotations, 2 by 2 is enough, if we need to support translations then 3 by 3 is enough.\n\nBut why not do the computations in the shader like for ANGLE\u0027s BlitGL shader?\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/angle/src/libANGLE/renderer/gl/BlitGL.cpp;l\u003d1286\n\nBasically vertices could be generated by the shader, then the transform would be specified in the uniform buffer. All the data apart from the source texture would be in that single uniform buffer. It might be possible to have a single VS and a single FS that look at the uniform buffer and make all the decisions. Then you can have a single ShaderModule that contains both the vertex and the fragment.\n\nReply:\nKeep the simple rotation matrix here.(I tried a bit with vec2 but seems cannot get correct value). And in the following patch, I\u0027d like to support flipY with the method in BlitGL in ANGLE to workaround some interpolate issue. I think the vertex shader will be in a different shape, but the API side will keep no changes WDYT?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4ce8986_51b552c6",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 270,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "ditto",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20aabf68_f6464eca",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 277,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Any of these are default values that we can ignore?\n\nAlso overall it would be nice to structure the code here in blocks to make the logic a bit easier to follow at a glance.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2679421_796799ae",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 278,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "The loadOp must be Load otherwise the whole texture will be cleared (which would be incorrect for sub-texture copies, or we could detect subtexture vs. full texture copies)",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8657f8a_04ef5957",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 284,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: that\u0027s the default value.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50e80b1c_fcaf5da9",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 284,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T00:43:58Z",
      "side": 1,
      "message": "Yes, I think it maybe a bug, because https://source.chromium.org/chromium/chromium/src/+/master:out/android-Debug/gen/third_party/dawn/src/include/dawn/webgpu_cpp.h;l\u003d1306?q\u003dRenderPassDescriptor\u0026ss\u003dchromium%2Fchromium%2Fsrc doesn\u0027t set nullptr to it and without this line, I\u0027ll got error when I running the tests. The same for resolveTarget(https://source.chromium.org/chromium/chromium/src/+/master:out/android-Debug/gen/third_party/dawn/src/include/dawn/webgpu_cpp.h;l\u003d1267?q\u003dRenderPassDescriptor\u0026ss\u003dchromium%2Fchromium%2Fsrc)",
      "parentUuid": "b8657f8a_04ef5957",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f5dad9d_fd9aca79",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 284,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T11:19:22Z",
      "side": 1,
      "message": "Thanks for the explanation, that\u0027s a bug and I put up a fix CL here https://dawn-review.googlesource.com/c/dawn/+/31200",
      "parentUuid": "50e80b1c_fcaf5da9",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d6e8cf3_a9f87682",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 284,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T12:11:59Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "9f5dad9d_fd9aca79",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2557e4b_a6fad8fa",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 288,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this comment.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ca69e7_23f9870c",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 289,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "these are the default values, we could add them to the method declaration on ProgrammablePassEncoder.",
      "range": {
        "startLine": 289,
        "startChar": 46,
        "endLine": 289,
        "endChar": 58
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6b9c8e3_ef7b146a",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 290,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 290,
        "startChar": 27,
        "endLine": 290,
        "endChar": 36
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e86e207e_2a44d080",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 298,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Let\u0027s use Ref\u003c\u003e and AcquireRef to prevent leaks instead!",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd4f4244_9ce0e1a8",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.h",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: Buffer and Texture includes aren\u0027t needed.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2266d645_97e81828",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 6
      },
      "lineNbr": 115,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: put it next to the other make_uniques and keep the mepty line.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30e65ddb_5a46d5da",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 6
      },
      "lineNbr": 754,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: add an empty line.\nAlso nit: put it next to the other getters?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89ab39a3_344c7888",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: no need to separate it from the block above.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c144e8b5_ca3bb9ea",
        "filename": "src/dawn_native/InternalPipelineStore.cpp",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Uh, why do we call Release explicitly? The Ref\u003c\u003e should take care of that. And actually the default destructor should do it on its own.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f9573d_58665e23",
        "filename": "src/dawn_native/InternalPipelineStore.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: DebiveBase isn\u0027t used.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c6e769_2efbb1ea",
        "filename": "src/dawn_native/InternalPipelineStore.h",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: unused?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d38adcba_adce130c",
        "filename": "src/dawn_native/InternalPipelineStore.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: use camelCase for public members.",
      "range": {
        "startLine": 32,
        "startChar": 62,
        "endLine": 32,
        "endChar": 91
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc5993d3_b592e176",
        "filename": "src/dawn_native/InternalPipelineStore.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "Can we have comments explaining what the uint32_ts are?",
      "range": {
        "startLine": 32,
        "startChar": 27,
        "endLine": 32,
        "endChar": 35
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e744ad_401cdaba",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: sliceOffset?",
      "range": {
        "startLine": 36,
        "startChar": 27,
        "endLine": 36,
        "endChar": 51
      },
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd0dc77_9be830f3",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit; maybe we could have rowOffset here as well?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a56ad1bd_575293c6",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: there are lots of default values that can be omitted.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4edbf83a_f07e19a6",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "ditto",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a8a1160_d1e8aad1",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: this comment will need to be updated after the comment below.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5222a190_823e8a80",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "We can use WriteTexture instead!! (and remove the need for the encoder and Submit below.)",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18951a86_d88c4e71",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-28T00:43:58Z",
      "side": 1,
      "message": "Super agree! It release tons of code.",
      "parentUuid": "5222a190_823e8a80",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d55e428a_940a597d",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: add a high-level comment saying we perform the copy and that\u0027s what we\u0027re actually testing.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f4a0cf1_ea799253",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 156,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: Have a small comment explaining the test before the test.",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "357b75de_678f1cfd",
        "filename": "src/tests/end2end/CopyTextureForBrowserTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-27T12:57:21Z",
      "side": 1,
      "message": "nit: maybe put a link? http://crbug.com/tint/278",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}