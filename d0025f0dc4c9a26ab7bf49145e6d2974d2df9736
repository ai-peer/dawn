{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fc403be1_8dfbb63f",
        "filename": "dawn.json",
        "patchSetId": 6
      },
      "lineNbr": 1040,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-27T10:19:35Z",
      "side": 1,
      "message": "(Copy from origin CL, left by Corentin):\nIt could be a separate options structure so we can add members over time without breaking compatibility I guess.\n\nReply:\nAgree with use a seperate options structure. My plan is to add flipY support with the internal pipeline in following patch. Do you think it is Ok for me to add this option structure in the next patch?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05dd6a8d_6390fbad",
        "filename": "src/dawn_native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 6
      },
      "lineNbr": 244,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2020-10-27T10:19:35Z",
      "side": 1,
      "message": "(Copy from origin CL, left by Corentin:)\nWe\u0027re working in 2D so if we need to support rotations, 2 by 2 is enough, if we need to support translations then 3 by 3 is enough.\n\nBut why not do the computations in the shader like for ANGLE\u0027s BlitGL shader?\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/angle/src/libANGLE/renderer/gl/BlitGL.cpp;l\u003d1286\n\nBasically vertices could be generated by the shader, then the transform would be specified in the uniform buffer. All the data apart from the source texture would be in that single uniform buffer. It might be possible to have a single VS and a single FS that look at the uniform buffer and make all the decisions. Then you can have a single ShaderModule that contains both the vertex and the fragment.\n\nReply:\nKeep the simple rotation matrix here.(I tried a bit with vec2 but seems cannot get correct value). And in the following patch, I\u0027d like to support flipY with the method in BlitGL in ANGLE to workaround some interpolate issue. I think the vertex shader will be in a different shape, but the API side will keep no changes WDYT?",
      "revId": "d0025f0dc4c9a26ab7bf49145e6d2974d2df9736",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}