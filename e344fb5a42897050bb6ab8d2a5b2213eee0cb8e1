{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "284cf05d_a9627df3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "we discussed this a bit in the past, sorry if I\u0027ve changed my perspective here.\n\nI think that GetPendingCommandContext taking an explicit argument makes it too risky to do incorrect. Right now, it seems like we care primarily about doing byte-counting for writeTexture/writeBuffer.\n\nTo that end, perhaps we can make GetPendingCommandContext take an enum that defaults to SubmitMode::Eventual. (or Strong? Default?). Making this the default will derisk the CL since it\u0027ll be more clear most callsites aren\u0027t changing.\n\nThen, it would be great if we could simplify the places we explicitly need to pass SubmitMode::Weak. From my understanding, that\u0027s the places where we do `CopyFromStaging...`. I think we could do the following:\n 1. change current overloads of `CopyFromStagingToBuffer` to ` CopyFromStagingToBufferImpl`\n 2. in the frontend, check `GetDynamicUploader()-\u003eShouldFlush()` in `CopyFromStagingToBuffer`. No need to do it in the backend.\n 3. If we need a flush, call ForceEventualFlushOfCommands() in the frontend\n 4. No need to pass SubmitMode::Eventual in the backend implementations of `CopyFromStagingToBufferImpl`. we always use SubmitMode::Weak. Forcing the flush will be handled by (3).\n \nI think that the changes for removing mFutureSerial are mostly looking good. You could split that out into a pre-CL since it\u0027ll be easier to land that without the other changes to the recording contexts.",
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb8bd604_fe67beb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-13T08:18:21Z",
      "side": 1,
      "message": "@enga@chromium.org No worries. We always go back and forth during iterations. Thanks for being with me all along.",
      "parentUuid": "284cf05d_a9627df3",
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db81285b_7f8d7b9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "Done. I will split the CL once all your concerns are addressed.",
      "parentUuid": "fb8bd604_fe67beb0",
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad95f89f_84ecb997",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "there\u0027s a slight behavior change here. This used to trace the serial that the task actually finished in. Now it traces the serial it was created with (the pending serial).\n\nI think knowing when the task actually finished is probably more helpful.\nTo restore this behavior, we can instead move the traces into FlushCallbackTaskQueue. Then, we don\u0027t need to even store mPlatform or mSerial.\nEach task can implement a method like `const char* GetStaticNameForTrace();` which will return a constant static string, so we don\u0027t need to store it anywhere.",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 46,
        "endChar": 40
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "febe9e0f_fa0c8d70",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "It seems FlushCallbackTaskQueue are called at a few different lines, where I not sure the \u0027finishedSerial\u0027 can all be known correctly. I changed to set \u0027finishedSerial\u0027 from [Queue]( https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/Queue.cpp;drc\u003d76eeb828c8fff6e83c099b6202d2585fa18fddfa;l\u003d242).",
      "parentUuid": "ad95f89f_84ecb997",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 46,
        "endChar": 40
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6fab8f2_72fd5c2d",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-19T13:17:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "febe9e0f_fa0c8d70",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 46,
        "endChar": 40
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb95c415_6d58798b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1911,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "should this be HasPendingCommands instead of HasPendingCommandsImpl ?",
      "range": {
        "startLine": 1911,
        "startChar": 11,
        "endLine": 1911,
        "endChar": 33
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb040a41_6a968c38",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1911,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "No. this really should be HasPendingCommandsImpl covering case 2 and 4 in [1].",
      "parentUuid": "cb95c415_6d58798b",
      "range": {
        "startLine": 1911,
        "startChar": 11,
        "endLine": 1911,
        "endChar": 33
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab8285d1_ce77fbcb",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1911,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-10-24T16:55:04Z",
      "side": 1,
      "message": "The terminology gets confusing, though I agree that if we use HasPendingCommands then 3) will get the pending command serial instead of the last submitted serial I think.",
      "parentUuid": "eb040a41_6a968c38",
      "range": {
        "startLine": 1911,
        "startChar": 11,
        "endLine": 1911,
        "endChar": 33
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aa38179_29136adb",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1911,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-26T05:19:23Z",
      "side": 1,
      "message": "Would `HasScheduledCommandsImpl` sound better?",
      "parentUuid": "ab8285d1_ce77fbcb",
      "range": {
        "startLine": 1911,
        "startChar": 11,
        "endLine": 1911,
        "endChar": 33
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eb205b7_959ab2b4",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1911,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-27T05:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1aa38179_29136adb",
      "range": {
        "startLine": 1911,
        "startChar": 11,
        "endLine": 1911,
        "endChar": 33
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fe17b5a_855de030",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 25
      },
      "lineNbr": 406,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "I don\u0027t see the serials modified in ForceEventualFlushOfCommands ?",
      "range": {
        "startLine": 405,
        "startChar": 6,
        "endLine": 406,
        "endChar": 12
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10ea5490_f0ebbede",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 25
      },
      "lineNbr": 406,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "ForceEventualFlushOfCommands impacts the serial to be computed as explained in [1].",
      "parentUuid": "2fe17b5a_855de030",
      "range": {
        "startLine": 405,
        "startChar": 6,
        "endLine": 406,
        "endChar": 12
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db713093_20279d9e",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 25
      },
      "lineNbr": 406,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-27T05:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10ea5490_f0ebbede",
      "range": {
        "startLine": 405,
        "startChar": 6,
        "endLine": 406,
        "endChar": 12
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fb8c86_7bb2c6af",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 228,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "I\u0027m not sure I understand. Is this referring to ForceEventualFlushOfCommands?\nIIUC, ForceEventualFlushOfCommands doesn\u0027t do a flush, it only marks the recording context as needsSubmit.",
      "range": {
        "startLine": 228,
        "startChar": 27,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8468a5b9_4a141ad3",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 228,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "Yes, it\u0027s ForceEventualFlushOfCommands. Sorry for the vague wording.",
      "parentUuid": "06fb8c86_7bb2c6af",
      "range": {
        "startLine": 228,
        "startChar": 27,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78f475c5_e0ea4e9f",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 228,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-27T05:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8468a5b9_4a141ad3",
      "range": {
        "startLine": 228,
        "startChar": 27,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b48bc3f_e2b3dceb",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 233,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "if we\u0027re in this branch, then there are pending commands - in which case, is this always going to be the pending command serial?\nDo we need `GetSubmittedWorkDoneSerial` at all?",
      "range": {
        "startLine": 233,
        "startChar": 60,
        "endLine": 233,
        "endChar": 89
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c19c59f_5d58df24",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 233,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "This is kind of subtle. I should have added the comments below about this.\n\n[1]\n\n```\n   // Internally the serial is computed according to whether frontend and backend have pending\n    // commands. There are 4 cases of combination:\n    //   1) Frontend(No), Backend(No)\n    //   2) Frontend(No), Backend(Yes)\n    //   3) Frontend(Yes), Backend(No)\n    //   4) Frontend(Yes), Backend(Yes)\n    // For case 1, we don\u0027t need the serial to track the task as we can ack it right now.\n    // For case 2 and 4, there will be at least an eventual submission, so we can use\n    // \u0027GetPendingCommandSerial\u0027 as the serial.\n    // For case 3, we can\u0027t use \u0027GetPendingCommandSerial\u0027 as it won\u0027t be submitted surely. Instead\n    // we use \u0027GetLastSubmittedCommandSerial\u0027, which must be fired eventually.\n```",
      "parentUuid": "7b48bc3f_e2b3dceb",
      "range": {
        "startLine": 233,
        "startChar": 60,
        "endLine": 233,
        "endChar": 89
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1083c76_ef9ce012",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 233,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-19T13:17:55Z",
      "side": 1,
      "message": "hm I see, but for case (3) since in this function, we are calling ForceEventualFlushOfCommands(), isn\u0027t it the case that `HasPendingCommandsImpl() \u003d\u003d HasPendingCommands()` here? And then also `GetSubmittedWorkDoneSerial() \u003d\u003d GetPendingCommandSerial()`?",
      "parentUuid": "0c19c59f_5d58df24",
      "range": {
        "startLine": 233,
        "startChar": 60,
        "endLine": 233,
        "endChar": 89
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ebe8978_d5c9d2e8",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 233,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-19T13:59:55Z",
      "side": 1,
      "message": "`ForceEventualFlushOfCommands()` doesn\u0027t necessarily make `HasPendingCommandsImpl()` return true, as the recording context in the backend might be unused. So it\u0027s possible in the frontend `GetLastSubmittedCommandSerial() \u003e GetCompletedCommandSerial()`, while the backend is having no pending commands.\n\nBelow case can be such an example.\n```\n    wgpu::CommandEncoder encoder \u003d device.CreateCommandEncoder(nullptr);\n    wgpu::CommandBuffer commandBuffer \u003d encoder.Finish();\n    queue.Submit(1, \u0026commandBuffer);\n\n    queue.OnSubmittedWorkDone(...)\n```",
      "parentUuid": "c1083c76_ef9ce012",
      "range": {
        "startLine": 233,
        "startChar": 60,
        "endLine": 233,
        "endChar": 89
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69a43481_e9337c9b",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 233,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-27T05:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ebe8978_d5c9d2e8",
      "range": {
        "startLine": 233,
        "startChar": 60,
        "endLine": 233,
        "endChar": 89
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e59b5b9_336a8cf4",
        "filename": "src/dawn/native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 25
      },
      "lineNbr": 181,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "The \"Set\" name is deceiving since calling Set(false) will not set the state at all.\n\nWould prefer code to be structured like:\n```\nif (needsSubmit) {\n  context-\u003eSetNeedsSubmit();\n}\n```",
      "range": {
        "startLine": 181,
        "startChar": 30,
        "endLine": 181,
        "endChar": 44
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85bca719_a36f6ced",
        "filename": "src/dawn/native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 25
      },
      "lineNbr": 181,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e59b5b9_336a8cf4",
      "range": {
        "startLine": 181,
        "startChar": 30,
        "endLine": 181,
        "endChar": 44
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "701afbd9_a76bc593",
        "filename": "src/dawn/native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 25
      },
      "lineNbr": 181,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-19T13:17:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85bca719_a36f6ced",
      "range": {
        "startLine": 181,
        "startChar": 30,
        "endLine": 181,
        "endChar": 44
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af8356ab_853eea35",
        "filename": "webgpu-cts/expectations.txt",
        "patchSetId": 25
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "do we need this?\n\nhttps://ci.chromium.org/ui/p/chromium/builders/try/mac-dawn-rel/16900/test-results?q\u003dID%3Aworker_webgpu%3Aapi%2Coperation%2ConSubmittedWorkDone%3Amany%2Cserial\n(very slow to load)\n\ntakes less than 800ms in the latest runs",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 104
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a023fba_a3b97326",
        "filename": "webgpu-cts/expectations.txt",
        "patchSetId": 25
      },
      "lineNbr": 173,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-17T14:40:23Z",
      "side": 1,
      "message": "We don\u0027t need this now. It was introduced by some previous PS.",
      "parentUuid": "af8356ab_853eea35",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 104
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}