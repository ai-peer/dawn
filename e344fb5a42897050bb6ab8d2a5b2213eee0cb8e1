{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "284cf05d_a9627df3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "we discussed this a bit in the past, sorry if I\u0027ve changed my perspective here.\n\nI think that GetPendingCommandContext taking an explicit argument makes it too risky to do incorrect. Right now, it seems like we care primarily about doing byte-counting for writeTexture/writeBuffer.\n\nTo that end, perhaps we can make GetPendingCommandContext take an enum that defaults to SubmitMode::Eventual. (or Strong? Default?). Making this the default will derisk the CL since it\u0027ll be more clear most callsites aren\u0027t changing.\n\nThen, it would be great if we could simplify the places we explicitly need to pass SubmitMode::Weak. From my understanding, that\u0027s the places where we do `CopyFromStaging...`. I think we could do the following:\n 1. change current overloads of `CopyFromStagingToBuffer` to ` CopyFromStagingToBufferImpl`\n 2. in the frontend, check `GetDynamicUploader()-\u003eShouldFlush()` in `CopyFromStagingToBuffer`. No need to do it in the backend.\n 3. If we need a flush, call ForceEventualFlushOfCommands() in the frontend\n 4. No need to pass SubmitMode::Eventual in the backend implementations of `CopyFromStagingToBufferImpl`. we always use SubmitMode::Weak. Forcing the flush will be handled by (3).\n \nI think that the changes for removing mFutureSerial are mostly looking good. You could split that out into a pre-CL since it\u0027ll be easier to land that without the other changes to the recording contexts.",
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb8bd604_fe67beb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-10-13T08:18:21Z",
      "side": 1,
      "message": "@enga@chromium.org No worries. We always go back and forth during iterations. Thanks for being with me all along.",
      "parentUuid": "284cf05d_a9627df3",
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad95f89f_84ecb997",
        "filename": "src/dawn/native/Buffer.cpp",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "there\u0027s a slight behavior change here. This used to trace the serial that the task actually finished in. Now it traces the serial it was created with (the pending serial).\n\nI think knowing when the task actually finished is probably more helpful.\nTo restore this behavior, we can instead move the traces into FlushCallbackTaskQueue. Then, we don\u0027t need to even store mPlatform or mSerial.\nEach task can implement a method like `const char* GetStaticNameForTrace();` which will return a constant static string, so we don\u0027t need to store it anywhere.",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 46,
        "endChar": 40
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb95c415_6d58798b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1911,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "should this be HasPendingCommands instead of HasPendingCommandsImpl ?",
      "range": {
        "startLine": 1911,
        "startChar": 11,
        "endLine": 1911,
        "endChar": 33
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fe17b5a_855de030",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 25
      },
      "lineNbr": 406,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "I don\u0027t see the serials modified in ForceEventualFlushOfCommands ?",
      "range": {
        "startLine": 405,
        "startChar": 6,
        "endLine": 406,
        "endChar": 12
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fb8c86_7bb2c6af",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 228,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "I\u0027m not sure I understand. Is this referring to ForceEventualFlushOfCommands?\nIIUC, ForceEventualFlushOfCommands doesn\u0027t do a flush, it only marks the recording context as needsSubmit.",
      "range": {
        "startLine": 228,
        "startChar": 27,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b48bc3f_e2b3dceb",
        "filename": "src/dawn/native/Queue.cpp",
        "patchSetId": 25
      },
      "lineNbr": 233,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "if we\u0027re in this branch, then there are pending commands - in which case, is this always going to be the pending command serial?\nDo we need `GetSubmittedWorkDoneSerial` at all?",
      "range": {
        "startLine": 233,
        "startChar": 60,
        "endLine": 233,
        "endChar": 89
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e59b5b9_336a8cf4",
        "filename": "src/dawn/native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 25
      },
      "lineNbr": 181,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "The \"Set\" name is deceiving since calling Set(false) will not set the state at all.\n\nWould prefer code to be structured like:\n```\nif (needsSubmit) {\n  context-\u003eSetNeedsSubmit();\n}\n```",
      "range": {
        "startLine": 181,
        "startChar": 30,
        "endLine": 181,
        "endChar": 44
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af8356ab_853eea35",
        "filename": "webgpu-cts/expectations.txt",
        "patchSetId": 25
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-10-12T18:59:17Z",
      "side": 1,
      "message": "do we need this?\n\nhttps://ci.chromium.org/ui/p/chromium/builders/try/mac-dawn-rel/16900/test-results?q\u003dID%3Aworker_webgpu%3Aapi%2Coperation%2ConSubmittedWorkDone%3Amany%2Cserial\n(very slow to load)\n\ntakes less than 800ms in the latest runs",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 104
      },
      "revId": "e344fb5a42897050bb6ab8d2a5b2213eee0cb8e1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}