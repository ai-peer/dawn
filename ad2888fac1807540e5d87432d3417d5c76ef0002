{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a50a596_c33af50d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2022-09-19T18:12:43Z",
      "side": 1,
      "message": "Is it intentional that the various validity checks are letting these invalid fuzzer shaders through?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 48
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c98bcb8b_b579008e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-19T18:24:54Z",
      "side": 1,
      "message": "I don\u0027t think we have a way to check for this at the moment. When a shader comes in we have to avlidate it, but that means we validate with `Override` in the shader. Eventually we\u0027ll run SubstituteOverrides and then we\u0027ll validate again afterwards.\n\nWe have no way to turn on a `Overrides are substituted` flag in the validator to know if we need to error here. Curerently it\u0027s caught as an ICE in the backends.",
      "parentUuid": "4a50a596_c33af50d",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 48
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86ff506a_343d73bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2022-09-19T18:30:30Z",
      "side": 1,
      "message": "Thanks for clarifying.",
      "parentUuid": "c98bcb8b_b579008e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 48
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bde8db3_51273f53",
        "filename": "src/tint/fuzzers/tint_common_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 254,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2022-09-19T18:12:43Z",
      "side": 1,
      "message": "Is the information needed for setting up this transform predicated on the transforms potentionally set up by the fuzzers already having run?\nIf so can you put a comment in the code about that.\n\nAnother way, instead of having this be seperate from the other transform run above, could there just be a check if there is a transform_manager already declared, and tack this transform onto the end, or create one?",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 254,
        "endChar": 9
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ed7c930_a4376a8b",
        "filename": "src/tint/fuzzers/tint_common_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 254,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-19T18:24:54Z",
      "side": 1,
      "message": "I don\u0027t know what all the fuzzers are doing. If they can insert `override` variables in place of `const` or other module-scoped vars, or if they can remove the initializer for an `override` then this must come after.\n\nI thought about reusing `transforms_` but also thought it might be clearer if this was a completely separate pass, making it more obvious that it always runs?",
      "parentUuid": "2bde8db3_51273f53",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 254,
        "endChar": 9
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "405266c6_d8e07253",
        "filename": "src/tint/fuzzers/tint_common_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 254,
      "author": {
        "id": 1000250
      },
      "writtenOn": "2022-09-19T18:30:30Z",
      "side": 1,
      "message": "I agree that having it as a seperate step because we don\u0027t know what the fuzzers are going to do to the shader sounds reasonable.",
      "parentUuid": "5ed7c930_a4376a8b",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 254,
        "endChar": 9
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5834536d_9308e5af",
        "filename": "src/tint/fuzzers/tint_common_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 254,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-19T18:56:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "405266c6_d8e07253",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 254,
        "endChar": 9
      },
      "revId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "ad2888fac1807540e5d87432d3417d5c76ef0002",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}