{
  "comments": [
    {
      "key": {
        "uuid": "91ccb2a8_67f43d82",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: spell out simple types.",
      "range": {
        "startLine": 53,
        "startChar": 13,
        "endLine": 53,
        "endChar": 17
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a40f9291_b719e382",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 74,
        "startChar": 13,
        "endLine": 74,
        "endChar": 17
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d30e2540_a05a1fdd",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.h",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-15T20:52:26Z",
      "side": 1,
      "message": "nit: Dawn headers first, then other system headers",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 14
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecafc67_14abfdf0",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "Why can\u0027t we store Texture* instead? The textures are owned by the command buffers so we know they won\u0027t be freed before the Submit is finished.",
      "range": {
        "startLine": 48,
        "startChar": 17,
        "endLine": 48,
        "endChar": 29
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b11acee1_eb91f3c4",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 239,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "There is a bit of indirection in this logic. Maybe the CommandRecordingContext could be a stupid container and the acquire / release logic could be here?",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93a20720_1fbadc57",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 239,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "We could also make a new method on CommandRecordingContext called ExecuteCommandList that takes a command list pointer. \n\nEither way, there will still need to be a notion of things you do before you call ExecuteCommandList and things you do afterwards. If you encounter an error during acquire, then you have to release the things you acquired.",
      "parentUuid": "b11acee1_eb91f3c4",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94534ee4_a4e74693",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 359,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "I think the template parameter isn\u0027t needed.",
      "range": {
        "startLine": 359,
        "startChar": 25,
        "endLine": 359,
        "endChar": 50
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "232e13bc_bb460d6c",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: comment to explain the black magic that happens here.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "191afc53_a564d324",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: instead of having hr, we can use Natasha\u0027s CheckHRESULT function.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c77ecd8e_d47c7832",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "Natasha\u0027s CheckHRESULT CL hasn\u0027t landed yet. Happy to use it once it lands, or do a followup change if necessary.",
      "parentUuid": "191afc53_a564d324",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d657f7c_85660e53",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 392,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "ditto",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b4fcc85_29133c3c",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 397,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "ditto",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d170226_d09eb9c5",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 408,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "ditto",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69253a54_04708731",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: also assert we have a keyedMutex?",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "782ce948_c50af607",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "If we do not have a keyed mutex, then the next line of code will crash when it dereferences it. That should be a sufficient \"assert\" for us. :-)",
      "parentUuid": "69253a54_04708731",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a827696b_da193274",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 356,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "Shouldn\u0027t that always be the case? Maybe ASSERT on it. Ah that\u0027s because of error handling, mmmh. TBH I\u0027m not sure what we want to do in case of a device loss there because it isn\u0027t clear if the Chrome GPU process can do anything else if the dxgiKeyedMutex operations are failing.\n\nnit: also assert we have a keyedMutex?",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de10c98d_d90b345e",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 356,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "Yeah, once these function calls start failing, we will need to tear everything down. \n\nHowever, AcquireSync does not support re-entrancy so if you call it twice with the same key, you might hang the process. I wanted to be safe for this CL.\n\nIs Chromium guaranteed to tear itself down gracefully when it receives device removed from Dawn? If so, we can probably keep things simple and continue with the bail-on-first-error pattern we\u0027ve been adopting so far.",
      "parentUuid": "a827696b_da193274",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb634dc3_3e20f5bb",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 359,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "Maybe still ASSERT on it?",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2afc031_6239f7b3",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 359,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "The problem with asserting if it fails is that you will get a slew of asserts if the failure is due to device removal. Are we OK with that?",
      "parentUuid": "fb634dc3_3e20f5bb",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7279f037_a640686b",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: explain that the sharedHandle must be a D3D11 texture if we want the shared mutex functions  to work.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d09ec684_13580147",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "This could be passed as part of WrapSharedHandle",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3610aef3_823863b2",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "It can be passed as part of WrapSharedHandle but that makes the textures be single use. If we reuse them over multiple frames (like I\u0027m hoping we can one day), then the acquire key will need to be set multiple times over the course of the texture\u0027s lifetime on the Chromium side.",
      "parentUuid": "d09ec684_13580147",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a3e1f46_2aee7a98",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "We could do something like the Vulkan backend:\n\n\n        // Exports a signal semaphore from a wrapped texture. This must be called on wrapped\n        // textures before they are destroyed. On failure, returns -1.\n \u003cNot in the code right now, but the comment should also says \"implicitly call Destroy() on the texture\"\u003e\n        DAWN_NATIVE_EXPORT int ExportSignalSemaphoreOpaqueFD(DawnDevice cDevice,\n                                                             DawnTexture cTexture);\n\nThis way we know the call to export the mutexKey prevents further usage of the texture.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28701781_65248bb6",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "I am confused by what you are getting at here.  How does ExportSignalSemaphoreOpaqueFD prevent further usage of the texture?",
      "parentUuid": "5a3e1f46_2aee7a98",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f11f09e7_cf6b70c2",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-15T20:52:26Z",
      "side": 1,
      "message": "Right now, in the Vulkan backend, doing this calls DestroyInternal on the texture, so you can\u0027t use it for anything anymore. We create a new wrapping texture every time.\n\nHowever, if we change things, as you mentioned in a previous comment, to reuse wrapped textures and expose Set/GetAcquireMutexKey, it will be safer if we rename them to something like Import/Export or Acquire/Release.\n\nTextureState can have OwnedExternal and OwnedExternalAcquired. \"Acquire\" sets the state to OwnedExternalAcquire, and \"Release\" has the side effect of setting the TextureState to OwnedExternal such that it\u0027s invalid to use in a Queue::Submit.",
      "parentUuid": "28701781_65248bb6",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edd29f88_e6c67a15",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: there is already is a queue member on DanwTest for convenience.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84a49b2f_96eab6e6",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: this is BGRA but the colors are in RGBA order",
      "range": {
        "startLine": 319,
        "startChar": 20,
        "endLine": 319,
        "endChar": 29
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bac5fb1_870f0f6a",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: We are already \"using\" this namespace.",
      "range": {
        "startLine": 353,
        "startChar": 5,
        "endLine": 353,
        "endChar": 24
      },
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0c0830b_422481c0",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 392,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "nit: comment before tests.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad4eaef4_a9840495",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-10-15T10:02:32Z",
      "side": 1,
      "message": "With comment on D3D12Backend we can\u0027t test this. We could either have a GetAcquireMutexKeyForTesting or use the IDXGISharedMutex we extract from the D3D11 texture in WrapAndClearD3D11Texture.",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70a5358b_94bb3526",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T17:40:32Z",
      "side": 1,
      "message": "I am confused by your feedback. What do you mean when you say \"With comment on D3D12Backend we can\u0027t test this\"?  \n\nGet is an no-side-effect accessor for the acquire key. It is called by Chromium to know what key to acquire the texture with when it needs to render the texture to the webpage. The purpose of the test is to make sure the key is the value we expect based on how it is incremented internally by Dawn.",
      "parentUuid": "ad4eaef4_a9840495",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af2c0a42_acb2998f",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-15T20:52:26Z",
      "side": 1,
      "message": "Corentin\u0027s comment was to make GetAcquireMutexKey like ExportSignalSemaphoreOpaqueFD in that it implicitly destroys the texture. If we were to make it destroy the texture, then Get will have side effects and this won\u0027t work.",
      "parentUuid": "70a5358b_94bb3526",
      "revId": "4d1ebefd800cfd9cc2b7368272f031991f03eff5",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}