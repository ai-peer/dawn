{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5145747c_1c1eb37c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-11T18:17:11Z",
      "side": 1,
      "message": "ptal",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30b8158b_851b08d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-05-11T20:37:54Z",
      "side": 1,
      "message": "LGTM, but is it not possible to make kUnusedFormat constexpr? (I had trouble trying to do that, so maybe not.)",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1d34f6a_c561a7d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-11T20:41:59Z",
      "side": 1,
      "message": "Doesn\u0027t making it `constexpr` mean that the `kUnusedFormat` will be `const`? In which case, I\u0027ll have to cast off the const to do the assigment to `Format\u0026`?\n\n(I have not spent a lot of time looking into constexpr so I just maybe wrong here. bclayton@ any insight?)",
      "parentUuid": "30b8158b_851b08d7",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7f8ac7c_f7a0e294",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-05-11T22:24:11Z",
      "side": 1,
      "message": "Does it need to be non-const? `TextureBase::mFormat` is `const Format\u0026`.\n\nI revived my branch and somehow got it building where I couldn\u0027t before (needed to move the `\u003d default` for the destructor into the header, I think).\n\nI didn\u0027t know if it actually avoided a static initializer so I googled it and found this extremely relevant doc:\nhttps://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/static_initializers.md#Step-1-Use-objdump-to-report-them\nbut unfortunately it didn\u0027t discover the static initializer even when I stuck a printf inside it to prevent optimization.\n\nso instead I hacked `\"//build/config/compiler:wglobal_constructors\"` into `src/dawn/native/BUILD.gn` and got it to report the issue building target `libdawn_native.dylib`. This seems to confirm my patch works.\n\nhttps://dawn-review.googlesource.com/c/dawn/+/89863",
      "parentUuid": "b1d34f6a_c561a7d0",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13e00de2_bcbf5509",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-12T08:57:56Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb3161a6_12e26625",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-12T08:59:30Z",
      "side": 1,
      "message": "It should be possible to make the static disappear with a constexpr default constructor. Either approach sounds good.",
      "parentUuid": "b7f8ac7c_f7a0e294",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecfc0a15_1faa93b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-05-12T20:41:01Z",
      "side": 1,
      "message": "Kai, I\u0027m fine either way, if you prefer your constexpr path I can close this.",
      "parentUuid": "fb3161a6_12e26625",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c4d039e_cbeeb625",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-05-13T17:54:26Z",
      "side": 1,
      "message": "I personally prefer it because it seems more straightforward to me than a static local. I\u0027ll figure out how to make that CL actually apply (currently it depends on your reverted patch).",
      "parentUuid": "ecfc0a15_1faa93b4",
      "revId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c46e8d51694c4f79c10f4bcd942a3f33bc72d4f7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}