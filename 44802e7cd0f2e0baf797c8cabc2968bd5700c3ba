{
  "comments": [
    {
      "key": {
        "uuid": "7ad0082a_43d50c90",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 10
      },
      "lineNbr": 329,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T11:45:31Z",
      "side": 1,
      "message": "Most textures are likely to have multiple subresources (at least mipmaps), so I don\u0027t think this fast path gets triggered as much as the else clause, and it adds more instructions in the common case.\n\nA single subresource texture will just go through the loop below once.",
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e404ae8_c1d5805d",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 10
      },
      "lineNbr": 329,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T19:24:18Z",
      "side": 1,
      "message": "Ack \u0026 Done!",
      "parentUuid": "7ad0082a_43d50c90",
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22a59a5c_045daaa1",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 10
      },
      "lineNbr": 333,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T11:45:31Z",
      "side": 1,
      "message": "nit: subresourceUsage just so we don\u0027t confuse it with a sub-usage that could mean one bit of a usage.",
      "range": {
        "startLine": 333,
        "startChar": 44,
        "endLine": 333,
        "endChar": 52
      },
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "971d38a3_8764952a",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 10
      },
      "lineNbr": 333,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T19:24:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22a59a5c_045daaa1",
      "range": {
        "startLine": 333,
        "startChar": 44,
        "endLine": 333,
        "endChar": 52
      },
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "106a01f4_aa55bebc",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 10
      },
      "lineNbr": 334,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T11:45:31Z",
      "side": 1,
      "message": "This should be updated to be readOnly || singleUsage because Sampled | ReadOnlyStorage is allowed (and maybe have the ComputePass check too?)",
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe6cfbb_5a95ca66",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 10
      },
      "lineNbr": 334,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T19:24:18Z",
      "side": 1,
      "message": "Done. \n\nAnd I realized that we can add one more unittest for this. Becuase the current tests can\u0027t capture this mistake.\n\nWe checked the readOnly and singleUse twice, maybe we can use a simple function and call that function. I will revisit it if needed when I do usage validation for compute.",
      "parentUuid": "106a01f4_aa55bebc",
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f73f19e3_ed20912b",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 10
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T19:38:14Z",
      "side": 1,
      "message": "Sorry for the contradictory comments but we just realized we can\u0027t use designated initializers like this because it is a clang / GCC / C++20 extension and we should instead use standard C++. Can you undo this? Otherwise I\u0027ll remove all designated initializers once I remove the warning suppression.",
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4202d4f_6a2bf680",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 10
      },
      "lineNbr": 42,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T19:49:14Z",
      "side": 1,
      "message": "I have already undo this, Corentin. Otherwise, the CL can\u0027t been built successfully.",
      "parentUuid": "f73f19e3_ed20912b",
      "revId": "44802e7cd0f2e0baf797c8cabc2968bd5700c3ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}