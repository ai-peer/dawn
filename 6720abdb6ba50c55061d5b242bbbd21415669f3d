{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "11828dea_5a885cc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-24T20:33:42Z",
      "side": 1,
      "message": "A very nice set of improvements, thank you!\nA few comments. Adding @cwallez@chromium.org for secondary reviewer",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d288710_bc778ffd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "Thank you for the all the changes! A couple comments but it looks good overall!",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98c04437_022398d6",
        "filename": "src/dawn/node/README.md",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "This seems like it could be done now.",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8aced23_3d325020",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 240,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "Can we have some TODO here? The result would depend on the OS and I believe that only on Android will the answer be RGBA8Unorm. Other OSes prefer BGRA for swapchains.",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3fbab50_7720ac25",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 240,
      "author": {
        "id": 1003896
      },
      "writtenOn": "2023-07-25T01:36:30Z",
      "side": 1,
      "message": "looks like chrome\u0027s impl just returns rgba or bgra depending on androidness, so that\u0027s probably good enough here?",
      "parentUuid": "b8aced23_3d325020",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a003ddb3_afa00c13",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 240,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-25T10:40:28Z",
      "side": 1,
      "message": "Sounds good, we can improve later if need be.",
      "parentUuid": "f3fbab50_7720ac25",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46703af4_9f7df1a5",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-24T20:33:42Z",
      "side": 1,
      "message": "Given that this isn\u0027t actually implemented, I think it would be preferable to keep the `UNIMPLEMENTED()` call. That way it fails hard and fast, and you\u0027re not left wondering why something didn\u0027t work.\nKeep the TODO comment though.",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23820353_4d4939f0",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1003896
      },
      "writtenOn": "2023-07-24T20:45:03Z",
      "side": 1,
      "message": "that\u0027s fair. my main goal here is to reduce the surface that can cause an instance to crash from c++. would you be okay with raising a js exception?",
      "parentUuid": "46703af4_9f7df1a5",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ca3691c_296da63f",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-24T22:09:25Z",
      "side": 1,
      "message": "I\u0027d prefer it if we were consistent. If crashing is what you want to avoid, what do you think about changing `UNIMPLEMENTED()` to raise a JS exception and return? It might need to take a second arg for the return value (if any).",
      "parentUuid": "23820353_4d4939f0",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "905ae0dd_baac03f3",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1003896
      },
      "writtenOn": "2023-07-25T01:36:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ca3691c_296da63f",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "841b1f61_b138fe63",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-24T20:33:42Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 251,
        "startChar": 12,
        "endLine": 251,
        "endChar": 13
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "172e7e36_8a7642de",
        "filename": "src/dawn/node/binding/GPU.cpp",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-25T08:17:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "841b1f61_b138fe63",
      "range": {
        "startLine": 251,
        "startChar": 12,
        "endLine": 251,
        "endChar": 13
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47230854_6607e9d4",
        "filename": "src/dawn/node/binding/GPUBindGroup.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "nit: this could be a const reference. Ditto in other files.",
      "range": {
        "startLine": 30,
        "startChar": 26,
        "endLine": 30,
        "endChar": 30
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8da5cd5_1b91a722",
        "filename": "src/dawn/node/binding/GPUBindGroup.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1003896
      },
      "writtenOn": "2023-07-25T01:36:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47230854_6607e9d4",
      "range": {
        "startLine": 30,
        "startChar": 26,
        "endLine": 30,
        "endChar": 30
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dae0c294_c6e0f9ec",
        "filename": "src/dawn/node/binding/GPUBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "There\u0027s a lot of similar changes for each of the objects. I wonder if we could eventually (as a follow-up, or an issue tracking the work) a DawnObject\u003cHandleType\u003e with a (HandleType, const char* label) constructor that takes care of get/SetLabel etc.",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a22cb50_6063fcba",
        "filename": "src/dawn/node/binding/GPUDevice.cpp",
        "patchSetId": 3
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "The async resolution happens after the call to `GPUDevice::createRenderPipelineAsync` and the `descriptor-\u003elabel` pointer could be invalid after the end of the call. We could store the label explicitly as an `std::string` in the `Context` and then pass it in new constructor for the compute/render pipeline.",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da629fb3_4e9d8923",
        "filename": "src/dawn/node/binding/GPUDevice.cpp",
        "patchSetId": 3
      },
      "lineNbr": 424,
      "author": {
        "id": 1003896
      },
      "writtenOn": "2023-07-25T01:36:30Z",
      "side": 1,
      "message": "i took a slightly different approach and initialized the descriptor directly inside the context, instead of stack allocating one and then copying it, so i think it should be safe now?",
      "parentUuid": "3a22cb50_6063fcba",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb463773_2c37d301",
        "filename": "src/dawn/node/binding/GPUDevice.cpp",
        "patchSetId": 3
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-25T10:40:28Z",
      "side": 1,
      "message": "Unfortunately it\u0027s not safe, the descriptors are tree of structures pointing at each other but don\u0027t have RAII semantics (because webgpu_cpp.h is just a thin wrapper around webgpu.h, a C API). The allocation for the label lives as long as conv IIRC so it still becomes invalid after the end of the function. That\u0027s why I think the easiest solution would be to add an `std::string label` to the `Context`.",
      "parentUuid": "da629fb3_4e9d8923",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "361d86ce_185abe05",
        "filename": "src/dawn/node/binding/GPUQueue.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-24T21:07:52Z",
      "side": 1,
      "message": "A descriptor should be available from GPUDeviceDescriptor.defaultQueue that contains the label.",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ace0d0_108a479b",
        "filename": "src/dawn/node/binding/GPUQueue.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1003896
      },
      "writtenOn": "2023-07-25T01:36:30Z",
      "side": 1,
      "message": "i\u0027m not sure what i\u0027m looking for here. Are you saying that Device::GetQueue() should have a descriptor on it? or something else?",
      "parentUuid": "361d86ce_185abe05",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9276494_57e256d5",
        "filename": "src/dawn/node/binding/GPUQueue.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-25T10:40:28Z",
      "side": 1,
      "message": "As part of the GPUDeviceDescriptor given to requestDevice there is a GPUQueueDescriptor (GPUDeviceDescriptor.defaultQueue) which contains a label. We should forward the label to the default queue when creating it. I think the changes needed are along the lines of:\n\n - In `GPUAdapter::requestDevice`:\n   - Fill in the defaultQueue part of `desc`\n   - Pass `desc` to the `GPUDevice::Create`\n - In `GPUDevice`:\n   - Move the creation of the `GPUQueue` for the default queue from `GPUDevice::getQueue` to `GPUDevice::GPUDevice`\n   - Pass the defaultQueue descriptor to `GPUQueue::GPUQueue`.\n - In `GPUQueue`:\n   - Use that descriptor to set the `label_`.\n\nFeel free to defer / delegate that.",
      "parentUuid": "67ace0d0_108a479b",
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c096f7fd_f9612bac",
        "filename": "src/dawn/node/binding/GPUQueue.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-24T20:33:42Z",
      "side": 1,
      "message": "A bit misleading? Why is this better than `UNIMPLEMENTED()` ?",
      "range": {
        "startLine": 148,
        "startChar": 4,
        "endLine": 149,
        "endChar": 38
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13d304b8_b44cbdcc",
        "filename": "src/dawn/node/binding/GPUQueue.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-25T08:17:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c096f7fd_f9612bac",
      "range": {
        "startLine": 148,
        "startChar": 4,
        "endLine": 149,
        "endChar": 38
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b31abcc0_484cf25c",
        "filename": "src/dawn/node/binding/GPURenderBundle.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-07-24T20:33:42Z",
      "side": 1,
      "message": "Can drop the `explicit` when you have two or more args.\nHere and elsewhere",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 12
      },
      "revId": "6720abdb6ba50c55061d5b242bbbd21415669f3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}