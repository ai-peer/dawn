{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e7e84609_25e952de",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-05-10T23:46:22Z",
      "side": 0,
      "message": "Hmm slightly concerned about whether removing this and directly implementing the type could be an issue for stuff like emscripten? Should I wrap the generated implementation with an if?",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06691051_8e9ebe7d",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-11T17:08:53Z",
      "side": 0,
      "message": "I thought we would put the descriptor in DawnNative.h so it wouldn\u0027t be in webgpu.h ? \n\nand with Emscripten you wouldn\u0027t have DawnNative.h available, so it could be ok?",
      "parentUuid": "e7e84609_25e952de",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40581974_f936036b",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-05-11T23:12:45Z",
      "side": 0,
      "message": "Changed it like how we talked about offline. Lmk what you think.",
      "parentUuid": "06691051_8e9ebe7d",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "067bcfa2_b714f1ee",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-11T23:28:11Z",
      "side": 0,
      "message": "I think it\u0027ll work; curious to get Kai\u0027s opinion.\n\nThe context is that:\n - we want DawnInstanceDescriptor to have a dawn::platform::Platform* member\n - we don\u0027t want to do void* so there\u0027s more type safety - making it a C++ only concept\n - So instead of putting it in the .json we put it in DawnNative.h since you need that for defining your own dawn::platform::Platform* anyway.\n - ChainedStruct is split out to its own header so you can include it by itself and some implementation (like us) can add their own chained structs without pulling in the rest of the c++ header (which may not be safe to use all the time because it assumes a global proc table - and you might not have that set).",
      "parentUuid": "40581974_f936036b",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "807f8f7a_f13ad6fd",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-05-12T01:55:16Z",
      "side": 0,
      "message": "Not sure I quite understand the proposal. SType and ChainedStruct are still needed in the standard non-dawn header for a bunch of things like window system integration and optional features.\n\nThere might be a solution like this that works, but why not just make an opaque C pointer type for `dawn::platform::Platform*`? In this case I think users only need to go from the C++ type to the C type so you could have a dawn::Platform::Platform::Get() that returns `reinterpret_cast\u003cWGPUDawnPlatform*\u003e(this)` (and then inside dawn reinterpret_cast back to C++).",
      "parentUuid": "067bcfa2_b714f1ee",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97e697e5_0db869a8",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-12T02:05:45Z",
      "side": 0,
      "message": "the idea was to not have WGPUDawnPlatform at all because it seemed like not a WGPU thing.\n\nbut yes I suppose we could do that, but it would feel kinda wonky in the generator. like:\n\n```\n\"dawn platform\": {\n  \"category\": \"external\",\n  \"c type\": \"struct DawnPlatformImpl*\",\n  \"cpp type\": \"class ::dawn::platform::Platform*\",\n}\n```\n\nor something?\n\nfelt odd to have it in the generator to me, because the \"c type\" and \"cpp type\" are effectively \"please paste this string in\" - so it started to make more sense for them to be externally defined.\n\nit starts to get wonky if you don\u0027t want void* in other places - like the surface descriptors - like\nfor SurfaceDescriptorFromWindowsHWND, where do I get the definition of HWND for?\nit might make more sense to me if sTypes are declared in the main webgpu.h, but then some descriptors are provided by other headers. then they can do their own #includes for dependent types like:\n\n```\n// webgpu_cpp_surface_descriptor_from_windows_hwnd.h\n\n#include \u003cmicrosoft.ui.xaml.window.h\u003e\n#include \u003cwebgpu/webgpu_cpp_chained_struct.h\u003e\n\nstruct SurfaceDescriptorFromWindowsHWND : ChainedStruct {\n        SurfaceDescriptorFromWindowsHWND() {\n            sType \u003d SType::SurfaceDescriptorFromWindowsHWND;\n        }\n        static constexpr size_t kFirstMemberAlignment \u003d detail::ConstexprMax(alignof(ChainedStruct), alignof(void * ));\n        alignas(kFirstMemberAlignment) void * hinstance;\n        HWND hwnd;\n};\n```",
      "parentUuid": "807f8f7a_f13ad6fd",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0dfb794_70396dee",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-05-12T19:02:41Z",
      "side": 0,
      "message": "Eventually we\u0027re going to want just one vanilla webgpu.h regardless of which project you\u0027re using it with, and dawn extensions in another file. Certainly there will be some `SType`s (in both the C and C++ headers) that are going to be dawn specific, I don\u0027t know exactly how we should split them out but I think we should (as `static const` or `#define`).\n\nHonestly, I think `void*` would be fine for the platform and the HWND/etc., because they represent a pretty minimal amount of user code. The types are nice though, so I also like the idea of splitting them into other headers. Those headers can be dependent on other things (like OS headers, or C++). I\u0027d probably define both the SType and the struct in the extension header.\n\nUnfortunately generating extension headers is probably a bit of a pain. I would just say handwrite them, but I assume we also need to generate wire/validation code. Maybe we can do that in the future and for now just gate some things in webgpu.h behind `#ifdef __cplusplus`?",
      "parentUuid": "97e697e5_0db869a8",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d023e51e_2dec54de",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-12T20:56:10Z",
      "side": 0,
      "message": "for this CL we have for DawnInstanceDescriptor handwritten in DawnNative.h (already a c++ header). I was thinking we don\u0027t need a C version for it.\n\nI was also thinking sTypes would be reserved in webgpu.h so that we can have a place to track new ones added and avoid conflicts. So some implementation can add sTypes to webgpu.h, but the structs would live in their own headers somewhere. IIRC it\u0027s similar to how spirv op codes get reserved",
      "parentUuid": "c0dfb794_70396dee",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17de42fa_0a771ebe",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-12T21:06:12Z",
      "side": 0,
      "message": "separately, I\u0027m realizing C++ extensibility is going to be interesting. how do you add additional methods onto existing objects? it would require changing the class definition.. ðŸ¤”",
      "parentUuid": "d023e51e_2dec54de",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3db73491_59c5a220",
        "filename": "dawn.json",
        "patchSetId": 2
      },
      "lineNbr": 1535,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-05-15T21:33:02Z",
      "side": 0,
      "message": "Adding methods to existing C++ classes shouldn\u0027t cause compatibility issues. It might break the ABI in some cases, but I don\u0027t think we are going for C++ ABI stability.",
      "parentUuid": "17de42fa_0a771ebe",
      "range": {
        "startLine": 1535,
        "startChar": 8,
        "endLine": 1535,
        "endChar": 35
      },
      "revId": "9af5ceb553d76cb386870361c863f82be97df8ea",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}