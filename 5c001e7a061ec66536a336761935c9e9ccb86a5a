{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a54e268b_8968ee3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-14T15:25:06Z",
      "side": 1,
      "message": "Austin: for review\nSaif, Nicolette: FYI\n\nThanks!",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c713aa03_af9bb858",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-15T15:37:31Z",
      "side": 1,
      "message": "Thanks, Austin! QQ in response.",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ef4dffb_b08655ab",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-15T15:28:12Z",
      "side": 1,
      "message": "only you are going to know what method \"GetChainedProperties\" is. In general, we want the error message to use terms that are directly relevant to the developer - and the dev didn\u0027t write GetChainedProperties anywhere.\n\nInstead, this whole function could be:\n\n```\nAPIGetProperties(...) {\n  [[maybe_unused]] hadError \u003d GetDevice()-\u003eConsumedError(\n     GetProperties(...), \"calling %s.GetProperties\", this);\n}\n\nMaybeError GetProperties(...) {\n  DAWN_TRY_ASSIGN(unpacked, ValidateAndUnpack(properties));\n  DAWN_TRY(GetChainedProperties(unpacked), \"unpacking extension chains\");\n  return {};\n}\n```\n\nthis way the error will look like:\n \u003e I had an error!\n \u003e      while unpacking extension chains\n \u003e      while calling [SharedTextureMemory (unlabled)].GetProperties",
      "range": {
        "startLine": 120,
        "startChar": 47,
        "endLine": 120,
        "endChar": 67
      },
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d866ff05_caa9a811",
        "filename": "src/dawn/native/SharedTextureMemory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-16T14:34:26Z",
      "side": 1,
      "message": "Thanks! Done.",
      "parentUuid": "2ef4dffb_b08655ab",
      "range": {
        "startLine": 120,
        "startChar": 47,
        "endLine": 120,
        "endChar": 67
      },
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "939b38ae_f763ded7",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 549,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-05-14T15:41:35Z",
      "side": 1,
      "message": "Thanks Colin for adding the externalFormat! I was just adding TextureFormat::External and somehow ended up reaching this TODO [yesterday](https://dawn-review.googlesource.com/c/dawn/+/187361?checksPatchset\u003d10\u0026tab\u003dchecks) but not hitting this validation yet as my test does not create video but just AHB. Can this validation be removed/relaxed as for video from chrome the vkFormat can be undefined?",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 53
      },
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d54cc86_1fe4529d",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 549,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-14T16:31:55Z",
      "side": 1,
      "message": "I had noticed this too and was also wondering if this is the point at which we should remove it. It would make sense to me!",
      "parentUuid": "939b38ae_f763ded7",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 53
      },
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "702acf07_6b9c3742",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 549,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-16T14:34:26Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2d54cc86_1fe4529d",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 53
      },
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c008e00_a0d9f13d",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 569,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-14T15:25:06Z",
      "side": 1,
      "message": "I think that it would be cleaner to add this to `properties` and pass it through in the above call, but I\u0027m not yet experienced enough in playing with the chained structs to determine how to create/chain the SharedTextureMemoryVkProperties such that it will end up with the lifetime of `SharedTextureMemory::mProperties` as needed rather than dangling when it falls out of scope here. Do you have feedback on that front?",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aedca451_0359cd0f",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 569,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-15T15:28:12Z",
      "side": 1,
      "message": "I think it\u0027s actually OK - in general we don\u0027t store the chains within Dawn. Chains are there as an extension mechanism for the application to pass things in/out in an ABI-stable way. They get annoying to work with once inside the implementation, so it\u0027s more useful to leave it unpacked. Secondly, it\u0027s only useful for Vulkan here so better to keep it in the Vulkan backend than on the base properties struct.",
      "parentUuid": "3c008e00_a0d9f13d",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "300a6308_ff7791f3",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 569,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-16T14:34:26Z",
      "side": 1,
      "message": "Thanks, makes sense!",
      "parentUuid": "aedca451_0359cd0f",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "518d175c_ea094f9e",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1079,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-15T15:28:12Z",
      "side": 1,
      "message": "we should validate here that the Ycbcr feature is enabled on the device",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b771329_6e4d7835",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1079,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-15T15:37:31Z",
      "side": 1,
      "message": "I was wondering about whether to validate that here - if we add more SharedTextureMemoryVk properties, a client could query for reasons other than wanting the YCbCr info, right?",
      "parentUuid": "518d175c_ea094f9e",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e735435f_82316ab8",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1079,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-15T15:48:23Z",
      "side": 1,
      "message": "ah.. we haven\u0027t had a lot of output structs yet so we\u0027re still figuring out how to best express this in the API. So the higher order bit is that we don\u0027t want to expose this for other SharedTextureMemory backings - like dma buf.\n\nFor additional properties, I think it should be be different structs. \nFor now, could we change SharedTextureMemoryVkProperties to SharedTextureMemoryAHardwareBufferProperties ? IIRC all the properties we\u0027re adding are ahardwarebuffer-related (including the format features; comes from VkAndroidHardwareBufferFormatPropertiesANDROID).\n\nThen, we would gate usage of `SharedTextureMemoryAHardwareBufferProperties` on the AHardwareBufferSTM feature",
      "parentUuid": "9b771329_6e4d7835",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63e25ea8_97947564",
        "filename": "src/dawn/native/vulkan/SharedTextureMemoryVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1079,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-16T14:34:26Z",
      "side": 1,
      "message": "Thanks, done!",
      "parentUuid": "e735435f_82316ab8",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6addba_8f9458e3",
        "filename": "src/dawn/tests/white_box/SharedTextureMemoryTests_android.cpp",
        "patchSetId": 2
      },
      "lineNbr": 409,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-14T15:25:06Z",
      "side": 1,
      "message": "`vKChromaFilter` and `forceExplicitReconstruction` don\u0027t correspond to info from the AHB. Do you think it\u0027s better to leave them as whatever the client set them to or to clear them? Once we have a decision there, I can enforce the semantics here.",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef37a2f0_77f5c758",
        "filename": "src/dawn/tests/white_box/SharedTextureMemoryTests_android.cpp",
        "patchSetId": 2
      },
      "lineNbr": 409,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-15T15:28:12Z",
      "side": 1,
      "message": "I\u0027m not sure; I hadn\u0027t realized the info reported back was not the same.\n\nGiven that what we\u0027re exporting here isn\u0027t necessarily always a *requirement* but more a suggestion (suggestedYcbcrModel, suggestedYcbcrRange, etc.) I think we should report the best-possible default. In general for WebGPU, we choose defaults by looking at:\n - default should generally be cheap (application should opt into more work/overhead)\n - default should be useful and work\n\nlooking at the vulkan [spec](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionCreateInfoKHR.html), I\u0027d look at:\n\n\u003e Setting forceExplicitReconstruction to VK_TRUE may have a performance penalty on implementations where explicit reconstruction is not the default mode of operation.\n\n\u003e If format supports VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT the forceExplicitReconstruction value behaves as if it was set to VK_TRUE.\n\n\u003e If the potential format features of the sampler Y′CBCR conversion do not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT, chromaFilter must not be VK_FILTER_LINEAR\n\nso I think that means:\n - forceExplicitReconstruction is false, unless it has VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT. Then it is true.\n - chrome filter is NEAREST. (nearest is generally always cheaper, and the default mode in WebGPU). And linear is not always supported anyway. application should check the format features (that you will likely be adding separately)",
      "parentUuid": "5a6addba_8f9458e3",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f02e0d76_b932990f",
        "filename": "src/dawn/tests/white_box/SharedTextureMemoryTests_android.cpp",
        "patchSetId": 2
      },
      "lineNbr": 409,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-05-16T14:34:26Z",
      "side": 1,
      "message": "Actually as I look more closely I think that we should do with `vkChromaFilter` is set it based on the format features like [1]. Then we don\u0027t even need to expose the format features outward as Skia can just check `vkChromaFilter` directly \\o/. My understanding is that the client could still choose to use NEAREST if they want to since it\u0027s always supported - this just indicates that LINEAR *can* be used.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:gpu/command_buffer/service/skia_utils.cc;l\u003d405-409?q\u003dVK_FILTER_NEAREST\u0026ss\u003dchromium",
      "parentUuid": "ef37a2f0_77f5c758",
      "revId": "5c001e7a061ec66536a336761935c9e9ccb86a5a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}