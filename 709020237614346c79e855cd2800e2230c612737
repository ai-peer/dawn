{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e9772597_ced40eb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-02T15:43:44Z",
      "side": 1,
      "message": "For Kokoro",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36726769_a8d410cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-02T17:10:29Z",
      "side": 1,
      "message": "Please take a look, thanks",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab5fede2_e0057645",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "LGTM overall. Feel free to push fixes for some of the comments to follow-ups if that\u0027s convenient.",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a68b762_079fc0c2",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 206,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "nit: Maybe we could have a UserToggles structure in Toggles.h with a ::Create function from DawnTogglesDeviceDescriptor so more of the logic is gathered in Toggles.h and so a single thing needs to be passed in constructors.",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "385f95c2_97febe4f",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 206,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Done, add a `TripleStatesTogglesSet` struct.",
      "parentUuid": "7a68b762_079fc0c2",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bad9cfc9_7814ad43",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 206,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-06T15:40:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "385f95c2_97febe4f",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fefee9d_a52f571a",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 223,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "nit: maybe could be on that UserToggles struct.",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdfda728_3b330c1b",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 223,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fefee9d_a52f571a",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af43aa67_9be55f42",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 237,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "I wonder if maybe we should have an \"experimental\" flag in Features.h so we don\u0027t need to add special handling here. WDYT?",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "854241ee_f08baee2",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 237,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "I will have a look about the flags, I am not familiar with it now.",
      "parentUuid": "af43aa67_9be55f42",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1330b9bc_cb6e0955",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 237,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-06T15:40:02Z",
      "side": 1,
      "message": "What I meant was adding a \"bool experimental\" to FeatureInfo so that we don\u0027t need to remember to add the feature in the list in ValidateFeatureSupportedWithToggles to make it experimental. Could be a follow-up if you want, or a TODO, or skipped ;)",
      "parentUuid": "854241ee_f08baee2",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9664a726_db2a50c4",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 237,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-07T03:15:56Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "1330b9bc_cb6e0955",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75e7839b_d9298829",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 237,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-07T07:09:46Z",
      "side": 1,
      "message": "Done, add a enum class `FeatureInfo::FeatureState` containing `Stable` and `Experimental`.",
      "parentUuid": "9664a726_db2a50c4",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72c0741d_c46f99ef",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 237,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-07T11:34:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "75e7839b_d9298829",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0d23d01_23c010b5",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 247,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "Maybe this validation could be done in d3d12::Device::Create since it is D3D12-specific. (it\u0027s annoying to re-iterate the features, so I wonder if maybe we should parse the device descriptor here and pass a ParsedDeviceDescriptor desc through the constructors?)",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aea58404_5b0e5076",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 247,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "I add a `AdapterBase::ValidateFeatureSupportedWithToggles` for common feature validation and a virtual `adapter::ValidateFeatureSupportedWithTogglesImpl` for backend-specific feature validation.\n(I would like all feature validation logic be placed together around `AdapterBase::CreateDeviceInternal` and can be easily tracked, so I prefer not to have a piece of feature validation in `d3d12::Device::Create`...)",
      "parentUuid": "d0d23d01_23c010b5",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "829ac548_7a61d1bb",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 9
      },
      "lineNbr": 247,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-06T15:40:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "aea58404_5b0e5076",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61ba6418_59c18c39",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "u-u-nit: IMHO this comment reads like a changelog but doesn\u0027t help future readers. It seems like features here should all have been validated already because WeBGPU should validate everything. So the comment is more confusing than it should be.\n\nAlso it\u0027s weird that the WebGPU API is APIHasFeature while Dawn internally uses IsFeatureEnabled. WDYT of renaming IsFeatureEnabled to HasFeature in a follow-up, and make APIHasFeature just proxy to HasFeature?",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77592228_89dbbccf",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Done, however `APIHasFeature` works with `wgpu::FeatureName` while `HasFeature` works with `dawn::native::Feature`, and `FeaturesSet::IsEnabled` has overloads for both, so just call `FeaturesSet::IsEnabled` in both methods.",
      "parentUuid": "61ba6418_59c18c39",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10a3dc5d_0f3acdf7",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-06T15:40:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "77592228_89dbbccf",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b17ac0a_59cda7c7",
        "filename": "src/dawn/native/Features.cpp",
        "patchSetId": 9
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "u-u-nit: \"Supports \"enable f16\" in WGSL\" or \"Supports the \"enable f16\" directive in WGSL\"",
      "range": {
        "startLine": 67,
        "startChar": 29,
        "endLine": 67,
        "endChar": 34
      },
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdf38cac_ecb04dc2",
        "filename": "src/dawn/native/Features.cpp",
        "patchSetId": 9
      },
      "lineNbr": 67,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b17ac0a_59cda7c7",
      "range": {
        "startLine": 67,
        "startChar": 29,
        "endLine": 67,
        "endChar": 34
      },
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "751cd94d_0085e497",
        "filename": "src/dawn/native/Features.cpp",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "Do you see any issues with removing this feature immediately? Since it was never implemented in Dawn, maybe noone was relying on it yet?\n\nAh, Blink uses it, nevermind :) Can you still remove the feature from Blink without a deprecation period as a follow up, then remove it from Dawn? Thanks!",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a300f27b_c56c5496",
        "filename": "src/dawn/native/Features.cpp",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Yes, I am going to remove it from Blink soon after this CL merged. I mark it as \"deprecated\" just because I can\u0027t completely remove it from Dawn now...",
      "parentUuid": "751cd94d_0085e497",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23b14872_4e448eef",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 145,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "Is it the only extension for F16 on GL? That\u0027d be unfortunate :(",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1549abb_e76773ea",
        "filename": "src/dawn/native/opengl/AdapterGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 145,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "There is a weaker extension `NV_gpu_shader5` supported by some Nvidia devices, but lack some functionality. I am not sure if Intel GPU support any F16 OpenGL extension.",
      "parentUuid": "23b14872_4e448eef",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ef899a_aa5ca6bf",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 503,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "didn\u0027t we decide that storageInputOutput16 would be handled by a transform if it isn\u0027t present?",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a8f9cca_6351e688",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 503,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Yes, but I plan to first require all features (which make things easier), and then release the requirement by implementing transforms to support more devices as follow up.",
      "parentUuid": "c6ef899a_aa5ca6bf",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0ece4d5_07bc6ffd",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 503,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-06T15:40:02Z",
      "side": 1,
      "message": "Ack, maybe add a TODO?",
      "parentUuid": "7a8f9cca_6351e688",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c85bef87_565d3d45",
        "filename": "src/dawn/native/vulkan/DeviceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 503,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-07T07:09:46Z",
      "side": 1,
      "message": "Done, add a TODO.",
      "parentUuid": "f0ece4d5_07bc6ffd",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e60f5a0_7f9e4f2e",
        "filename": "src/dawn/tests/end2end/ShaderF16Tests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-05T20:50:34Z",
      "side": 1,
      "message": "u-u-nit: Indent 4 to match the start of const char* above?",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9216dfe3_6272e88c",
        "filename": "src/dawn/tests/end2end/ShaderF16Tests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1002536
      },
      "writtenOn": "2022-09-06T12:53:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e60f5a0_7f9e4f2e",
      "revId": "709020237614346c79e855cd2800e2230c612737",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}