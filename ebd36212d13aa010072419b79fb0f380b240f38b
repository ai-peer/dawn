{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3603315b_cf9f686c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1873cc0a_385eb2cc",
        "filename": "src/dawn/native/metal/CommandBufferMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 152,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "nit: Maybe `else {assert(not timestamps)}`.",
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ff1ef5c_98c4a005",
        "filename": "src/dawn/native/metal/CommandBufferMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "nit: there\u0027s usually no space between TODO and the (. But also is there a reason why we don\u0027t have a Toggle for this workaround?",
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08917704_ec5c2077",
        "filename": "src/dawn/native/metal/CommandBufferMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 1530,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "nit: instead of IsFooSupported, the method could be more prescriptive and say what MUST be used: UseCounterSamplingAtStageBoundary vs. UseCounterSamplingAtCommandBoundary. Something like that, otherwise it is not as clear what we should do if both are supported.",
      "range": {
        "startLine": 1530,
        "startChar": 49,
        "endLine": 1530,
        "endChar": 82
      },
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321e5003_1dbd5810",
        "filename": "src/dawn/native/metal/DeviceMTL.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "nit: this enum could be private to the Device since it is only used internally and not exposed in the interface. You could even forward declare `enum class CounterSamplingPoint : uint8_t` and define the enum in the .cpp.",
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fd6bd4b_2b5ef15f",
        "filename": "src/dawn/native/metal/DeviceMTL.h",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "nit: no need to initialize this variable since it is done at [1]",
      "range": {
        "startLine": 160,
        "startChar": 46,
        "endLine": 160,
        "endChar": 75
      },
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62874ada_214e4db6",
        "filename": "src/dawn/native/metal/DeviceMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "[1]",
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c933f5_9cf197c9",
        "filename": "src/dawn/native/metal/DeviceMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "On macOS \u003c 11.0 we can always sample at command boundary?? That\u0027s a bit weird. Is it because the M1 requires macOS \u003e 12.0 and all previous hardware can do command boundary? Can we add that as a comment if it is the case?",
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e86baf8b_43cc6c51",
        "filename": "src/dawn/tests/end2end/QueryTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 554,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-25T12:44:26Z",
      "side": 1,
      "message": "nit: this must always be true as it is an error to create a render pipeline without a vertex stage. So we could remove this argument",
      "range": {
        "startLine": 554,
        "startChar": 46,
        "endLine": 554,
        "endChar": 67
      },
      "revId": "ebd36212d13aa010072419b79fb0f380b240f38b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}