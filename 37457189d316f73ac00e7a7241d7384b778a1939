{
  "comments": [
    {
      "key": {
        "uuid": "c68c398f_b01e7d3b",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 392,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-29T08:09:39Z",
      "side": 1,
      "message": "Woa this is so much easier than in Vulkan :D",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a8f0d58_ed584957",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 392,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T17:53:34Z",
      "side": 1,
      "message": "Indeed!",
      "parentUuid": "c68c398f_b01e7d3b",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c42126a_811a5422",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "Maybe we can split this validation function in two. The first part doesn\u0027t rely on having the resource so we can do it before OpenSharedHandle",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22faa576_bcce4818",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "nit: Also check DepthOrArraySize, MipLevels, DXGI_SAMPLE_DESC.Count are 1?",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca7884bb_1809a5be",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T18:04:20Z",
      "side": 1,
      "message": "Since we\u0027re going to have an \u0027external object\u0027 descriptor anyways, what do you think of only having fields in the struct that cannot be determined from the object itself?  So things like TextureUsage will be in the struct but not width, height, miplevels, etc. Internally, Dawn would still make a DawnTextureDescriptor but it would be filled in from properties of the object it receives.",
      "parentUuid": "22faa576_bcce4818",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b4956f4_94fdf9a6",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T22:29:18Z",
      "side": 1,
      "message": "I don\u0027t have a strong I don\u0027t have a very strong opinion about this, and it seems okay to me.",
      "parentUuid": "ca7884bb_1809a5be",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20995d61_0d5b9d08",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "In the Vulkan backend we have a separate constructor which takes an ExternalImageDescriptor.\nExternalImageDescriptor has an |isCleared| boolean for controlling whether or not we set the content as initialized.\n\nThis descriptor is passed to WrapVulkanImage instead of the DawnTextureDescriptor. I suggest we do the same here. If Chrome knows the image is cleared, we need a way to tell Dawn so we don\u0027t clear it again.",
      "range": {
        "startLine": 321,
        "startChar": 8,
        "endLine": 322,
        "endChar": 72
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cfd2302_9511cc31",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-29T08:09:39Z",
      "side": 1,
      "message": "+1. Although for the clearing I think it might be useful to expose an API in DawnNative.h like:\n - bool IsTextureSubResourceInitialized(mipLevel, layer)\n - void SetTextureSubResourceInitialized(mipLevel, layer, bool initialized \u003d true);\n\nAnd then use it for the Vulkan backend too.",
      "parentUuid": "20995d61_0d5b9d08",
      "range": {
        "startLine": 321,
        "startChar": 8,
        "endLine": 322,
        "endChar": 72
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74d462b7_8599944b",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T17:53:34Z",
      "side": 1,
      "message": "In my last meeting with Corentin, we agreed to tackle clearing as a separate CL. This will need an additional set of work on the Chromium side since the SharedImageBackingD3D class always returns true for IsCleared(). This is the reason why I\u0027ve skipped it in this initial change.",
      "parentUuid": "20995d61_0d5b9d08",
      "range": {
        "startLine": 321,
        "startChar": 8,
        "endLine": 322,
        "endChar": 72
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d4df0d_3a018337",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T22:29:18Z",
      "side": 1,
      "message": "Sounds good.",
      "parentUuid": "74d462b7_8599944b",
      "range": {
        "startLine": 321,
        "startChar": 8,
        "endLine": 322,
        "endChar": 72
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2476955e_03a33dda",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-29T08:09:39Z",
      "side": 1,
      "message": "This could return the ID3D12Device directly instead of having it as an out parameter.",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f6cf3b9_331a47f8",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T17:53:34Z",
      "side": 1,
      "message": "The reason I have it as an out parameter is to force the user of the API to take a reference to the object and prevent it from getting freed out from under them. Are ComPtr\u003cID3D12Resource\u003e return values allowed in D3D12Backend.h? If not I think we should leave as is.",
      "parentUuid": "2476955e_03a33dda",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0074e874_9e2e9e3c",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-29T08:09:39Z",
      "side": 1,
      "message": "nit: Do we expect other types of SharedHandle? Maybe it could be WrapTextureSharedHandle",
      "range": {
        "startLine": 32,
        "startChar": 35,
        "endLine": 32,
        "endChar": 51
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36366950_48f243e9",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T17:53:34Z",
      "side": 1,
      "message": "Besides possibly fence objects in the future, we do not expect to share other objects in the short term. But I like your suggested name becuase it makes things explicit. I\u0027ll change this in an upcoming patchset.",
      "parentUuid": "0074e874_9e2e9e3c",
      "range": {
        "startLine": 32,
        "startChar": 35,
        "endLine": 32,
        "endChar": 51
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bddd3f28_24e942fa",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-30T01:19:26Z",
      "side": 1,
      "message": "On second thought, the datatypes passed to the function have the word texture in them, so that should be enough to disambiguate between the two.",
      "parentUuid": "36366950_48f243e9",
      "range": {
        "startLine": 32,
        "startChar": 35,
        "endLine": 32,
        "endChar": 51
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb65369f_58d7ecc5",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "nit: These could be factored as constants so they stay in sync with the descriptor sizes. And then at [1] we can do something like |kConstant + 1|",
      "range": {
        "startLine": 68,
        "startChar": 25,
        "endLine": 68,
        "endChar": 27
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46a22069_021a8bbb",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "unit: newline to match to whitespace at the beginning of the namespace",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bb70cb0_cc8aa970",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "nit: D3D12ImageWrappingValidationTestBase. Probably could rename the base class too",
      "range": {
        "startLine": 112,
        "startChar": 6,
        "endLine": 112,
        "endChar": 34
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84105317_8f87818a",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T17:53:34Z",
      "side": 1,
      "message": "I was copying the code in IOSurfaceWrappingTests.cpp where the corresponding class is called IOSurfaceValidationTests and IOSurfaceTestbase. Did the person who wrote that code also do it wrong? :-)",
      "parentUuid": "3bb70cb0_cc8aa970",
      "range": {
        "startLine": 112,
        "startChar": 6,
        "endLine": 112,
        "endChar": 34
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f10ec7a_d3481ad6",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T22:29:18Z",
      "side": 1,
      "message": "Blame Corentin :) Although the name IOSurface implies it\u0027s a texture whereas D3D12Resource doesn\u0027t.",
      "parentUuid": "84105317_8f87818a",
      "range": {
        "startLine": 112,
        "startChar": 6,
        "endLine": 112,
        "endChar": 34
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a9637ab_82dae2d0",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-08-29T00:40:11Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 187,
        "startChar": 28,
        "endLine": 187,
        "endChar": 30
      },
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8c1d6ad_b6c1eba1",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-08-29T08:09:39Z",
      "side": 1,
      "message": "It would be nice to have rendering tests where the texture is written outside of Dawn and able to be read back through Dawn and vice-versa. Doesn\u0027t need to be in this CL though. You can look at the IOSurface or the more complex Vulkan tests for inspiration.",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5d3c296_fb145c5a",
        "filename": "src/tests/end2end/D3D12ResourceWrappingTests.cpp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-08-29T17:53:34Z",
      "side": 1,
      "message": "Yes, I saw the IOSurface and Vulkan tests. I\u0027ll add these tests for the D3D12 backend when I add keyed shared mutex support. The tests will be flaky without them.",
      "parentUuid": "d8c1d6ad_b6c1eba1",
      "revId": "37457189d316f73ac00e7a7241d7384b778a1939",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}