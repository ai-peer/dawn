{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3cfa8dfc_eee32004",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003461
      },
      "writtenOn": "2023-01-04T11:26:35Z",
      "side": 1,
      "message": "Hello again.\n\nThis is a small change to enable precompiled headers for the `tint` and `dawn_native` projects.\n\nWith this small change, I get a 1.5x compilation speed improvement in my case for dawn_native (from ~20 to ~12sec), and a 2.5x one for tint (from ~50 to ~20sec).\n\nThere are more gains to be had (at least very small ones with a similar change for Vulkan and D3D12 common headers, for example, but might be others) but I wanted to keep things simple, as at this point it\u0027s not really noticeable (although it really depends on the computer).",
      "revId": "97317e513ea598b2cf22a1b90b2912ef189853fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "349c555f_380cfab9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-01-04T12:37:43Z",
      "side": 1,
      "message": "Thank you, again!",
      "revId": "97317e513ea598b2cf22a1b90b2912ef189853fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61f5ab0f_c5022505",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003461
      },
      "writtenOn": "2023-01-04T12:39:01Z",
      "side": 1,
      "message": "You\u0027re welcome ðŸ˜Š. I\u0027m curious to see how it behaves on your CI and other platforms as well, hopefully it\u0027s a net positive overall.",
      "parentUuid": "349c555f_380cfab9",
      "revId": "97317e513ea598b2cf22a1b90b2912ef189853fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b122211_e731eeb9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-01-04T13:18:20Z",
      "side": 1,
      "message": "Ohh, our performance monitor bot doesn\u0027t like this change. Let me investigate why.",
      "revId": "97317e513ea598b2cf22a1b90b2912ef189853fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acbf23c2_835cb927",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-01-04T13:23:54Z",
      "side": 1,
      "message": "Curious. The precompiled headers appears to break `TINT_INSTANTIATE_TYPEINFO`, when compiling using clang 14, on linux:\n\n```\n/home/ben/src/dawn/src/tint/ast/binding_attribute.cc:21:1: error: explicit specialization of \u0027info\u0027 after instantiation\nTINT_INSTANTIATE_TYPEINFO(tint::ast::BindingAttribute);\n^\n/home/ben/src/dawn/src/tint/castable.h:72:59: note: expanded from macro \u0027TINT_INSTANTIATE_TYPEINFO\u0027\n    const tint::TypeInfo tint::detail::TypeInfoOf\u003cCLASS\u003e::info{ \\\n                                                          ^\n/home/ben/src/dawn/src/tint/castable.h:178:57: note: implicit instantiation first required here\n        return detail::TypeInfoOf\u003cstd::remove_cv_t\u003cT\u003e\u003e::info;\n                                                        ^\n1 error generated.\n```",
      "parentUuid": "7b122211_e731eeb9",
      "revId": "97317e513ea598b2cf22a1b90b2912ef189853fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "549eba5c_75ce12b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003461
      },
      "writtenOn": "2023-01-04T15:18:16Z",
      "side": 1,
      "message": "There is always the possibility of this kind of stuff happening. I\u0027ll try getting a clang-14 on Linux and test ASAP.\n\nAny other failures on any other system/version? I can\u0027t see the error on those checks above, that\u0027s why I\u0027m asking, so I\u0027m assuming those linux-clang-* CI agents are on a different version of clang...",
      "parentUuid": "acbf23c2_835cb927",
      "revId": "97317e513ea598b2cf22a1b90b2912ef189853fd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}