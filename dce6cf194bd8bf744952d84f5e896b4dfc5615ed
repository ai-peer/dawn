{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "69e7e4dd_31bf4808",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:35:21Z",
      "side": 1,
      "message": "Minor comments, LGTM overall!",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "211e2a0e_0ca6ac9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-11T15:42:53Z",
      "side": 1,
      "message": "no additional comments",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70aa2925_ab9ed69f",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 7
      },
      "lineNbr": 3696,
      "author": {
        "id": 1004687
      },
      "writtenOn": "2024-04-11T16:00:31Z",
      "side": 1,
      "message": "nit: Is there a reason there are spaces b/w `y cb cr`? I just ask because it\u0027s typically YCbCr, or for camelCase variables, Ycbcr. This could be just some Dawn-ism though that I\u0027m not familiar with, so I defer to you to make the final call :D",
      "range": {
        "startLine": 3696,
        "startChar": 45,
        "endLine": 3696,
        "endChar": 52
      },
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38283b21_28f02a84",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 7
      },
      "lineNbr": 3696,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T16:16:09Z",
      "side": 1,
      "message": "It is a dawn.json-ism to format names correctly so codegen templates later know how to do CamelCase vs. SNAKE_CASE etc. (consider for example enums used to be CamelCase in C++ but SNAKE_CASE in C a couple years ago). If we choose only CamelCase in dawn.json then RGBAUnorm could be interpreted as R_G_B_A or RGBA_UNORM or whatever other split.",
      "parentUuid": "70aa2925_ab9ed69f",
      "range": {
        "startLine": 3696,
        "startChar": 45,
        "endLine": 3696,
        "endChar": 52
      },
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89f00941_2db8ab08",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 7
      },
      "lineNbr": 3696,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-04-11T23:30:21Z",
      "side": 1,
      "message": "Yeah, I figured we needed this for camel casing Cb and Cr. The spaces might help here distinguish Cb vs Cr order which is quite confusing.",
      "parentUuid": "38283b21_28f02a84",
      "range": {
        "startLine": 3696,
        "startChar": 45,
        "endLine": 3696,
        "endChar": 52
      },
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bedeb905_35424982",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:35:21Z",
      "side": 1,
      "message": "note: not for this CL, but we could have a .Has\u003cT\u003e() on UnpackedPtr to avoid needing to actually get the variable for such validation.",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a72051ed_408255cf",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-04-11T23:30:21Z",
      "side": 1,
      "message": "That sounds good! Acknowledged.",
      "parentUuid": "bedeb905_35424982",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c74e83_a69318ec",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:35:21Z",
      "side": 1,
      "message": "nit: We don\u0027t need to validate static samplers here IMHO, we\u0027ll have validation in BGL creation that wgpu::SamplerBindingType::YCbCr can only be static. Creating the sampler would be valid, but then you can only use it as a static sampler.",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9c20318_a5e1f562",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-04-11T23:30:21Z",
      "side": 1,
      "message": "Ah okay, yeah I wasn\u0027t sure about it and then erred on the side of adding it rather than not. I\u0027ve removed this validation check.",
      "parentUuid": "d6c74e83_a69318ec",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d94f654f_369fdae8",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:35:21Z",
      "side": 1,
      "message": "It might be worth adding some test files for the YCbCr sampler work. We\u0027d start with adding validation tests that the feature is required. \n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/third_party/dawn/src/dawn/tests/end2end/AdapterPropertiesVkTests.cpp shows how to add a new test file. Without a special fixture we can test what happens when the extension is not present, and with a fixture like https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/third_party/dawn/src/dawn/tests/end2end/QueryTests.cpp;drc\u003d3252383e3842a722e39f404882a1ae10f5fdbace;l\u003d641 we can enable the extension and test with it.\n\nThe reason why it would be an new test file is that we\u0027d need to use vulkan.h eventually in it to create the YCbCr info and so we\u0027d conditionally compile the test only when dawn_enable_vulkan.",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02ad49fd_a04566f4",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-04-11T23:30:21Z",
      "side": 1,
      "message": "Thanks for the pointers!! I added a file each for end2end and validation test which don\u0027t do much other than just check if feature is available or not and validate if sampler should be created or not.",
      "parentUuid": "d94f654f_369fdae8",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edf36062_f3f697c4",
        "filename": "src/dawn/native/Sampler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-12T10:41:03Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "02ad49fd_a04566f4",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2427822_9769ad98",
        "filename": "src/dawn/native/Sampler.h",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:35:21Z",
      "side": 1,
      "message": "nit: unused in the header",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bdccebc_6d6f3af5",
        "filename": "src/dawn/native/Sampler.h",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1003581
      },
      "writtenOn": "2024-04-11T23:30:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2427822_9769ad98",
      "revId": "dce6cf194bd8bf744952d84f5e896b4dfc5615ed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}