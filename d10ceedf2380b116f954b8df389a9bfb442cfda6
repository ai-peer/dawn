{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "27259c02_f4ce5320",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-13T21:10:13Z",
      "side": 1,
      "message": "apologies I probably won\u0027t be able to thoroughly review this until after Wednesday evening.\n\nOne thing I\u0027ll say is that it doesn\u0027t seem great to hardcode the SPIRV in the backend. Do we have to do it this way?",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "604de46e_9942ceac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-14T10:19:44Z",
      "side": 1,
      "message": "Do you mean we should autogen the spirv using a script or we should include the shader on front end side?\n\n- If the former then we can do that. I put TODO there but if you think it\u0027s necessary, we could do that now. Is there any easy way or an example of existing shader generating step in Dawn\u0027s gn or cmake?\n- If the latter then it\u0027s because the wgsl doesn\u0027t seem to have input attachment yet and front end Bindgroup doesn\u0027t have a concept of input attachment specific to vulkan. But yes, we could add the support to wgsl as Corentine suggested.",
      "parentUuid": "27259c02_f4ce5320",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "081b6a5c_114672a3",
        "filename": "src/dawn/native/BlitColorToColorWithDraw.h",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "nit: if we keep a Ref\u003cvulkan::Pipline\u003e in the Vulkan backend, then this could be replaced with Ref\u003cPipelineType\u003e instead.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f33b8caa_71d54fe0",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "u-nit: maybe we could have a validation test for this.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5ed3e86_5359c35b",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-14T10:19:44Z",
      "side": 1,
      "message": "This is untestable currently anw since we disallow a multiplanar texture\u0027s view to be used as resolve target https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/CommandEncoder.cpp;drc\u003d9da3eaf710d7c5ae6c81f2a6af42b078ecab3b40;l\u003d170",
      "parentUuid": "f33b8caa_71d54fe0",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c611e09_5725eafd",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-14T12:35:10Z",
      "side": 1,
      "message": "Then why do we add validation here that can never fail? I feel like I\u0027m missing something.",
      "parentUuid": "b5ed3e86_5359c35b",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca7b3450_bdccd59b",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-14T12:38:12Z",
      "side": 1,
      "message": "You are right. This validation seems redundant (for now). Maybe should be an assert.",
      "parentUuid": "6c611e09_5725eafd",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d264e31_a1c4b626",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 946,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "This a slightly weird, maybe it could be device-\u003eUseResolveTextureBlitForLoadOp and comment that some backends need to handle it internally, instead that they must (otherwise they\u0027d just not expose the extension)",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "404e2860_2323f468",
        "filename": "src/dawn/native/vulkan/InternalPipelineStoreVk.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "Can\u0027t we use PipelineVK.h/.cpp to create the pipeline instead of copying a LOT of code around to create a Vulkan pipeline? This would also make it much easier to rely on caches etc. Right now everytime we will make a change to how some commands are done in the Vulkan backend, we\u0027ll also need to change the duplicate utility file.\n\nI understand that this is currently needed because we use hardcoded SPIR-V but IMHO we should instead augment Tint with minimal support for input attachments (since we\u0027ll need them for PLS anyway) and then use WGSL + wgpu::RenderPipelineDescriptor etc to compile the Vulkan pipeline.\n\nWe\u0027ll also need to add some input attachment descriptor type for internal use in the pipeline layout in the Vulkan backend.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27b2d681_2e77fbad",
        "filename": "src/dawn/native/vulkan/InternalPipelineStoreVk.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-14T10:19:44Z",
      "side": 1,
      "message": "Ok we could add support to wgsl. Let me think about this. Though I think in order to that we need to add some internal flags to RenderPipelineDescriptor which would end up only being useful for vulkan backend. Which seems odd to be handled on front-end side.\n\nAnw the pipeline setup code here even though look like being copied from PipelineVk, most of them are just default initialization. I think it\u0027s unlikely that any change to how Vulkan commands work outside would affect this code. The pipeline here doesn\u0027t need any info from outside except the attachments\u0027 formats and size.",
      "parentUuid": "404e2860_2323f468",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1704778e_dcb12077",
        "filename": "src/dawn/native/vulkan/InternalPipelineStoreVk.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-14T12:35:10Z",
      "side": 1,
      "message": "The creation of the pipeline is one thing, but there\u0027s also render pass querying, shadermodule creation (that\u0027s not cached), descriptor set layout and descriptor set allocation / writing, etc. It\u0027s really better to use Dawn re-entrantly when possible so we can take advantage of all the automatic handling that\u0027s already done in the backends. (even if adding stuff to Tint / the pipeline layout will be some effort, but we are likely interested in using it for things like PLS in the future as well)",
      "parentUuid": "27b2d681_2e77fbad",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "584f19be_37de6e69",
        "filename": "src/dawn/native/vulkan/InternalPipelineStoreVk.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-14T19:17:10Z",
      "side": 1,
      "message": "Just want to make sure I understood your suggestions correctly:\n1. Are you suggesting that we should add a new `subpassInput` type to Tint?\n2. Or you want to use PLS for expand resolve texture?\n\nIf it\u0027s 1 then I\u0027m not sure how it would be of use for PLS in future. If it\u0027s 2 then it\u0027s overkill isn\u0027t it?",
      "parentUuid": "1704778e_dcb12077",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2e6302e_3c4c4b0e",
        "filename": "src/dawn/native/vulkan/InternalPipelineStoreVk.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-15T15:10:27Z",
      "side": 1,
      "message": "\u003e Are you suggesting that we should add a new subpassInput type to Tint?\nI meant I could do that but want to make sure I follow do the right path. With Tint `subpassInput` I\u0027m confused on why it would be useful for PLS.",
      "parentUuid": "584f19be_37de6e69",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6cb56b3_166b5ae6",
        "filename": "src/dawn/native/vulkan/InternalPipelineStoreVk.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-15T15:20:57Z",
      "side": 1,
      "message": "I was thinking about 1). For Vulkan PLS it would be useful see https://docs.google.com/document/d/1djJwQLJcVGnDXOA7nhsweppim-hhbqglB4JNyfZcRqQ/edit where there is some pass with self-dependency between storage and input attachments. +CC James, would it be ok to add some input attachment in Tint just for Dawn internal use and other Tint transforms (no plan to expose it to WGSL in the wild)?",
      "parentUuid": "584f19be_37de6e69",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "618baba5_03ee807c",
        "filename": "src/dawn/native/vulkan/RenderPassCache.cpp",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "Note, I still need to review this in detail.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33914551_61ea4915",
        "filename": "src/dawn/native/vulkan/RenderPassCache.cpp",
        "patchSetId": 5
      },
      "lineNbr": 308,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "nit: slight preference for creating the SupbassDesc on the stack and then copying it to the vector so that we avoid pointers that might be invalidated later if there\u0027s another push_back for any other reason.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5352a73_a747acc4",
        "filename": "src/dawn/native/vulkan/RenderPassCache.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "Maybe this could be returned by GetRenderPass and stored in the so that computations around multi-subpass happen only once.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48dfd656_a89e4701",
        "filename": "src/dawn/native/vulkan/RenderPipelineVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 547,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "Maybe we could have a `ColorAttachmentMask GetExpandedResolveMask()` in `RenderPipelineBase` and add that mask to the query. It would still allow considering that all load/store ops are the same and simplify the code here and renderpasscache a bit.\n\nOut of curiiosity, what about render bundle compatibility with render passes that use ExpandToResolve? It looks like it might already work but maybe I\u0027m missing something.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7700ec12_f78f5d54",
        "filename": "src/dawn/native/vulkan/ResolveTextureLoadingUtilsVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1003806
      },
      "writtenOn": "2024-05-11T02:11:42Z",
      "side": 1,
      "message": "FYI, ANGLE has code to generate this based on the color attachment locations and format in UtilsVk.cpp",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a283bd9_63e56279",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 320,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "This is very hot code and I would like to keep it as streamlined as possible. Also in the future it will change to use VkImageLayout directly. What about making `VulkanImageLayout(kResolveTextureLoadAndStoreUsages)` return RenderAttachment, then doing the following in `ExpandResolveTextureWithDrawInSubpass`\n\n```\nattachment-\u003eTransitionUsageNow(TextureBinding);\ndo the load etc.\n```\n\nThen the code in EncodeRenderPass will automatically do the transition to the render attachment layout.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ec51bfc_d191e0d6",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 631,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "Did you mean `IsSubset(RenderAttachment | TextureBinding, usage)`?",
      "range": {
        "startLine": 631,
        "startChar": 8,
        "endLine": 631,
        "endChar": 92
      },
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0141e77c_a5057a13",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 633,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T14:51:55Z",
      "side": 1,
      "message": "Hopefully this won\u0027t add too much overhead. If it does, we\u0027ll need to add an additional webgpu.h usage just for this case.",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b57c54e_2424d436",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 633,
      "author": {
        "id": 1003806
      },
      "writtenOn": "2024-05-11T14:59:53Z",
      "side": 1,
      "message": "We opportunistically set this whenever we can in ANGLE (on color, not depth/stencil), seems to be harmless.\n\nFor depth/stencil, we set it for renderbuffers when MSRTT (because that has a dedicated way). For textures, we don\u0027t because luckily EXT_multisampled_render_to_texture2 allows us to autoinvalidate depth/stencil and thus never need to unresolve. I\u0027m saying this to say that I don\u0027t know if there\u0027s a downside to this for depth/stencil.",
      "parentUuid": "0141e77c_a5057a13",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5335a93d_774de42e",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 633,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T15:01:47Z",
      "side": 1,
      "message": "Thanks for this info! Closing as resolved then!",
      "parentUuid": "2b57c54e_2424d436",
      "revId": "d10ceedf2380b116f954b8df389a9bfb442cfda6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}