{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eae1d391_578c2f35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2024-04-10T12:49:50Z",
      "side": 1,
      "message": "Fixed merge conflict.",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd8d6d34_9884ed65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-10T16:49:11Z",
      "side": 1,
      "message": "LGTM",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c08827_711fe380",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-12T17:30:01Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbc16fe4_a49b29ff",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 580,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-12T17:30:01Z",
      "side": 1,
      "message": "u-nit: this can declared just before use, or we can pass reinterpret_cast\u003cvoid**\u003e(\u0026memory) to vkMapMemory.",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05324b18_8b688c83",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 580,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2024-04-17T13:50:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbc16fe4_a49b29ff",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09e83f7c_fb80566c",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 624,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-12T17:30:01Z",
      "side": 1,
      "message": "We might be able to collect these on the queue or device object to batch the flushes, which are probably a syscall each. Unless we can expect drivers to do the batching for us? Can we have a TODO for that?",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3aa68466_ecf6a0fd",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 624,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2024-04-17T13:50:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09e83f7c_fb80566c",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a49e854b_bad80546",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 628,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-12T17:30:01Z",
      "side": 1,
      "message": "Would there be a cost to always mapping host-visible memory so we don\u0027t need to do map and unmap all the time, nor the computation to map only the small region for host-coherent memory?",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c22edd8b_db9dbe85",
        "filename": "src/dawn/native/vulkan/BufferVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 628,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2024-04-17T13:50:13Z",
      "side": 1,
      "message": "For frequently updated buffers, keeping them persistently mapped instead of mapping/unmapping each time is best practice to avoid the mapping overhead. Doing it for writeBuffer means also persistently mapping eg. a vertex buffer where data is only written once, unless we have some strategy to avoid that (eg. map/unmap on first writeBuffer, move to persistent mapping if the buffer is written to again). For Arm GPUs, simply persistently mapping all buffers should be fine, but I don\u0027t know what the case is for other vendors. I\u0027ve added it as a TODO.",
      "parentUuid": "a49e854b_bad80546",
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e20e331_4968fba1",
        "filename": "src/dawn/native/vulkan/BufferVk.h",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-04-10T13:47:26Z",
      "side": 1,
      "message": "Suggest zero initializing these.",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 35
      },
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ef11d35_c3fe5a1d",
        "filename": "src/dawn/native/vulkan/BufferVk.h",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1003586
      },
      "writtenOn": "2024-04-10T14:59:54Z",
      "side": 1,
      "message": "In CMake we specify our C++ standard as C++17. Default initializers for bitfields is a C++20 feature.",
      "parentUuid": "7e20e331_4968fba1",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 35
      },
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c27ea543_ca9d7577",
        "filename": "src/dawn/native/vulkan/BufferVk.h",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-04-10T15:09:24Z",
      "side": 1,
      "message": "Acknowledged. Thanks.",
      "parentUuid": "3ef11d35_c3fe5a1d",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 35
      },
      "revId": "87b7120349f3be3253b6759221b30d5d0ce59ec7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}