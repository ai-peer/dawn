{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f23a8dab_088798e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-19T15:28:08Z",
      "side": 1,
      "message": "nit: shader module?",
      "range": {
        "startLine": 7,
        "startChar": 16,
        "endLine": 7,
        "endChar": 23
      },
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08ed564d_d24a85f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-19T15:28:08Z",
      "side": 1,
      "message": "LGTM",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf43525b_214120dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-19T15:29:42Z",
      "side": 1,
      "message": "Can we have a small test for this or is it not possible?",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9d943e6_36ba4aad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-19T15:30:26Z",
      "side": 1,
      "message": "NVM, it is just to more eagerly clean stuff up. Maybe we can replace the INVALID_IF with an assert",
      "parentUuid": "bf43525b_214120dd",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb3deded_0c8f14f7",
        "filename": "src/dawn_native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-19T17:51:13Z",
      "side": 1,
      "message": "when does this happen?\n\nGetTransformedModuleHandle happens when the pipeline is initialized.\nWe already validate the device is alive for synchronous pipeline creation.\n\nFor async creation, DeviceBase::Destroy currently waits for all tasks to complete before destroying anything.",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e31d3ed3_e5de2200",
        "filename": "src/dawn_native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-11-19T18:47:54Z",
      "side": 1,
      "message": "I\u0027m not sure if this ever happens right now, but since we null out the ptr, I didn\u0027t want there to be a way to access it after destroy. (Basically line 119 is not safe after destroy.) Returning an error protects us from a crash should we use it incorrectly.)",
      "parentUuid": "fb3deded_0c8f14f7",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07529850_7cb48c37",
        "filename": "src/dawn_native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-11-19T19:05:02Z",
      "side": 1,
      "message": "if it should never happen, then we should use an ASSERT here, as well as add tests (if they don\u0027t already exist) to be sure it can never actually never happen.",
      "parentUuid": "e31d3ed3_e5de2200",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d57660d_1eee9cf6",
        "filename": "src/dawn_native/vulkan/ShaderModuleVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-11-24T18:47:01Z",
      "side": 1,
      "message": "Hmm, ok, I will replace it with an assert for now, and for the testing, I want to defer to after https://dawn-review.googlesource.com/c/dawn/+/68120 goes in. Once that is in, I can add a unit/validation test suite that tries creating stuff with destroyed device (or add a test case to each of the existing suites?) and make sure they all fail. (Without the exposed API I need to do the casting stuff to destroy the device which isn\u0027t as nice.)\n\nThen for the async case, I think I can test that with the that change since I needed to modify some of the async pipeline tests in that change anyways.",
      "parentUuid": "07529850_7cb48c37",
      "revId": "ad3ced6b8ea8153319034a46a246a9529dd32730",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}