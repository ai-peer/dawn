{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ea5e0027_375e291c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-25T15:24:34Z",
      "side": 1,
      "message": "Fixed up so that it works on both GCC and clang. Austin PTAL",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "815d2490_4b2ac039",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001936
      },
      "writtenOn": "2021-06-25T15:53:08Z",
      "side": 1,
      "message": "Second patchset doesn\u0027t work for GCC:\n\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:46:102: error: expected \u0027,\u0027 or \u0027;\u0027 before \u0027u_scale\u0027\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:46:122: error: expected unqualified-id before string constant\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:46:180: error: expected unqualified-id before string constant\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:89:104: error: expected \u0027,\u0027 or \u0027;\u0027 before \u0027u_scale\u0027\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:89:124: error: expected unqualified-id before string constant\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:89:182: error: expected unqualified-id before string constant\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:244:21: error: \u0027ls\u0027 was not declared in this scope\n../../third_party/dawn/src/dawn_native/CopyTextureForBrowserHelper.cpp:245:21: error: \u0027wgslDesc\u0027 was not declared in this scope",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd856934_f26aa52e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001911
      },
      "writtenOn": "2021-06-27T20:49:44Z",
      "side": 1,
      "message": "Alternative CL: https://dawn-review.googlesource.com/c/dawn/+/56069\nTested with GCC 9.3.0 and 10.3.0.",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2d40c9c_367883e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-06-28T02:27:44Z",
      "side": 1,
      "message": "Sad to know this :( Seems all internal shaders in future needs to live with \\n.",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db1092d4_36f4cdce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001936
      },
      "writtenOn": "2021-06-28T07:14:41Z",
      "side": 1,
      "message": "I have checked patchset #2 on the clear build and it works well for the GCC v.9.3.0 on my side.\n\n@Stephan, could you check it on your side one more time?",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46171d2d_0665622c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-28T08:16:32Z",
      "side": 1,
      "message": "LGTM, please CQ if you find this fix is enough for GCC.",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "918996ec_8dd89ce6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-06-28T08:16:32Z",
      "side": 1,
      "message": "It shouldn\u0027t need to, we can use std::string concatenation or a single shadermodule once the Swiftshader issue is fixed.",
      "parentUuid": "a2d40c9c_367883e2",
      "revId": "857a3a2ea2647eea68caf9a7bc5d2b10857888e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}