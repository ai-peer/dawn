{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "23985da3_160aa78f",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-16T14:02:24Z",
      "side": 1,
      "message": "It is only necessary if dirty groups or unused groups from last pipeline have UAVs, right?",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f8b0d6_b21cabc2",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-16T14:49:25Z",
      "side": 1,
      "message": "My understanding here is that we will force to re-apply all UAV bind groups in current pipeline just as dirty bind groups. For those UAV groups which are also in last pipeline, we will un-apply them first.",
      "parentUuid": "23985da3_160aa78f",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "120d34e6_70a6b8b1",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-16T18:56:06Z",
      "side": 1,
      "message": "For example, \n```\n  SetPipeline(pipeline);\n  SetBindGroup(0, BG_Uniform_1);\n  SetBindGroup(1, BG_UAV);\n  Draw();\n  SetBindGroup(0, BG_Uniform_2);\n  Draw();\n``` \nor \n```\n  SetPipeline(pipeline1);\n  SetBindGroup(0, BG_Uniform_1);\n  SetBindGroup(1, BG_UAV);\n  Draw();\n  SetPipeline(pipeline2);\n  Draw();\n```\n\nIn those cases, we don\u0027t need to un-apply and re-apply `BG_UAV` for the second draw.",
      "parentUuid": "e8f8b0d6_b21cabc2",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb26e9bd_37242fa3",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-17T03:17:55Z",
      "side": 1,
      "message": "Got it, thanks. This is a further improvement.\nDone.",
      "parentUuid": "120d34e6_70a6b8b1",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ca1dd84_75341ded",
        "filename": "src/dawn/native/d3d11/BindGroupTrackerD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-05-17T12:02:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb26e9bd_37242fa3",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a11b674_0c865793",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 476,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-16T14:02:24Z",
      "side": 1,
      "message": "nit: put `mUAVSlotCount` in `d3d11::PhysicalDevice` to avoid duplicating uav slot detecting logic and mismatching, this method can return `GetPhysicalDevice()-\u003eGetUAVSlotCount()` or let call site to query it from physical device directly.",
      "range": {
        "startLine": 476,
        "startChar": 11,
        "endLine": 476,
        "endChar": 24
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bc72ef9_4a9a6333",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 13
      },
      "lineNbr": 476,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-17T03:17:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a11b674_0c865793",
      "range": {
        "startLine": 476,
        "startChar": 11,
        "endLine": 476,
        "endChar": 24
      },
      "revId": "0c6e8fe80198e058d1220636125bd323789ee89d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}