{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "61324dd9_5102eb71",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-11T12:23:57Z",
      "side": 1,
      "message": "Right now, render targets are not necessary be in connected slots. There could be some unused slots between render targets. Can we shrink them to remove the gaps to save the limited slots?",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 431,
        "endChar": 26
      },
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c62c7262_13e2262e",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-11T23:58:59Z",
      "side": 1,
      "message": "I think this might also require transforming the shaders to remap fragment out locations to the packed range. It sounds doable though.",
      "parentUuid": "61324dd9_5102eb71",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 431,
        "endChar": 26
      },
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56b3b516_36fef18a",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-12T02:36:20Z",
      "side": 1,
      "message": "Good point. Sounds doable too, but not sure how hard it would be. Let\u0027s just leave a TODO here for now, as it should be a rare case in my view.",
      "parentUuid": "c62c7262_13e2262e",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 431,
        "endChar": 26
      },
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42fb60f2_7b1876dc",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-12T11:41:13Z",
      "side": 1,
      "message": "SG",
      "parentUuid": "56b3b516_36fef18a",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 431,
        "endChar": 26
      },
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48704652_b7e5fed5",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-11T23:58:59Z",
      "side": 1,
      "message": "instead of these ASSERTs, isn\u0027t it better to validate on creation of d3d11::RenderPipeline when we know the pipeline layout - that the max color attachment index is less than the number of unused UAVs ? IIUC you can write a test case that actually hit these asserts",
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39151f4e_6b1e54f7",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-12T02:36:20Z",
      "side": 1,
      "message": "Color attachments belong to RenderPass, and Pipeline can be bound to a RenderPass. So the pipeline can only be aware of color attachments when being bound rather than on creation. Correct me if any misunderstandings!",
      "parentUuid": "48704652_b7e5fed5",
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73ffa5c2_2bf63742",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-12T02:42:00Z",
      "side": 1,
      "message": "That\u0027s true, but the attachment state of the render pass must be exactly equal to that of the render pipeline!\n\nSee validation:\nhttps://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/dawn/src/dawn/native/RenderEncoderBase.cpp;l\u003d272;drc\u003db18d59d36ac77ddf968b6e3452109e67471ee38f;bpv\u003d0;bpt\u003d1",
      "parentUuid": "39151f4e_6b1e54f7",
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79df4b85_020948f5",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-12T06:31:02Z",
      "side": 1,
      "message": "That\u0027s better. Thanks for clarification!\nFor the test case, is there a way to ensure d3d future level 11.0? Otherwise it would be little meaningful.",
      "parentUuid": "73ffa5c2_2bf63742",
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "341fa599_d4d41a1b",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-05-12T17:18:48Z",
      "side": 1,
      "message": "We could have an adapter-level toggle for it, but that\u0027s not set up yet so this is fine for now. +cc zhaoming.\nCould you add a TODO and file a bug though about testing d3d11 on both FL11_0 and FL11_1 ?\n\nOverall though, we need to understand what specific requirements there are for Compat +cc senorblanco.\nIn the webgpu compat requirements doc, I don\u0027t see anything about this d3d11 limitation, but there could be multiple options:\n - fragment stores are disallowed (slot overlap is no longer a problem)\n - there\u0027s a new compat-only limit for the combined number of color attachments and storage slots\n - something else\n \nWe should probably figure ^this out before going through the effort of compacting the color attachments to free up space.",
      "parentUuid": "79df4b85_020948f5",
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2773b61_5e2ca9fd",
        "filename": "src/dawn/native/d3d11/PipelineLayoutD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-05-11T12:23:57Z",
      "side": 1,
      "message": "nit: Please update this to describe how do we convert WGSL to HLSL slot for UAV and render targets related info.",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "744507e7_4464b33d",
        "filename": "src/dawn/native/d3d11/PipelineLayoutD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-05-12T02:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2773b61_5e2ca9fd",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "141be61b5cac18940c7044f3a17ab048fb89bf9c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}