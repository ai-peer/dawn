{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15838f66_142c41f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-15T10:16:17Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bae925ca_c085b8a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "The approach LGTM and I only have some nits and I think we should land this approach to unblock TF.js (IIRC it\u0027s something they need?)\n\nIn the future we will most likely rewrite this when we add DispatchIndirect GPU-based validation: in the same compute shader that validates the dispatchIndirect parameters, we can expand the parameters to do xyzxyz. Then the indirect command would do setRootConstant for X, then Y, then Z, dispatch.\n\nThis will also require a change in the Tint transform and to the logic added in this CL.",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71cad824_a5d80fd6",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 4
      },
      "lineNbr": 208,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "u-nit: usesNumWorkgroups.",
      "range": {
        "startLine": 208,
        "startChar": 13,
        "endLine": 208,
        "endChar": 29
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e45f7ba_aeda5fc6",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 480,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "Would overloading with void OnSetPipeline(ComputePipeline* pipeline) allow overloading without the need to add a static_cast?",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f2d96f7_b34f0e07",
        "filename": "src/dawn_native/d3d12/ComputePipelineD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 29
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc812810_2718ead0",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "nit: only compute is needed",
      "range": {
        "startLine": 181,
        "startChar": 50,
        "endLine": 181,
        "endChar": 77
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43bd37f0_5fdd7e8d",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 258,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "Maybe we can add a constant defined in PipelineLayoutD3D12.h and use it directly. It\u0027s not really clear why numworkgroups would be based off FirstIndexOffset.",
      "range": {
        "startLine": 258,
        "startChar": 15,
        "endLine": 258,
        "endChar": 47
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a6030e1_01a39baa",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 262,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "nit: maybe we can use kReservedRegisterSpace directly.",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbfd2322_3b5e6981",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "nit: I don\u0027t think we necessarily want to have them be static in the future. To avoid breaking the API contract I suggest we keep them as regular methods.",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66d21d88_352900a6",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 109,
        "startChar": 17,
        "endLine": 109,
        "endChar": 33
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}