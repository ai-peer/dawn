{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15838f66_142c41f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-15T10:16:17Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bae925ca_c085b8a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "The approach LGTM and I only have some nits and I think we should land this approach to unblock TF.js (IIRC it\u0027s something they need?)\n\nIn the future we will most likely rewrite this when we add DispatchIndirect GPU-based validation: in the same compute shader that validates the dispatchIndirect parameters, we can expand the parameters to do xyzxyz. Then the indirect command would do setRootConstant for X, then Y, then Z, dispatch.\n\nThis will also require a change in the Tint transform and to the logic added in this CL.",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96dfcf9e_05d7f2ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "\u003e The approach LGTM and I only have some nits and I think we should land this approach to unblock TF.js (IIRC it\u0027s something they need?)\n\nThanks. But I\u0027d like to let TFJS try [[num_workgroups]] when the modifications on pipeline layout is completed (use root constants for Dispatch() and root constant buffer view for DispatchIndrect()). The current method has to allocate one buffer for each dispatch{indirect} call, which I think is less performant.\n\n\n\u003e In the future we will most likely rewrite this when we add DispatchIndirect GPU-based validation: in the same compute shader that validates the dispatchIndirect parameters.\n\nDo you know if anyone is working on or will work on this? If not then I can take it.",
      "parentUuid": "bae925ca_c085b8a4",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56457821_a6c47d8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-18T12:39:56Z",
      "side": 1,
      "message": "I think Austin was going to look at the indirect validation stuff after the limits work. Maybe what you could do for TF.js for now is change the transform to use root constants instead of a root buffer view, then implement only for Dispatch + add validation that the pipeline in DispatchIndirect doesn\u0027t use num_workgroups (in D3D12).\n\nThis would make the code path be the \"final\" one, with the performance we expect, and TF.js could use it for Dispatch, without being blocked on the DispatchIndirect validation task.",
      "parentUuid": "96dfcf9e_05d7f2ac",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6fb2bf8_bfb0da13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-18T15:18:31Z",
      "side": 1,
      "message": "just so I\u0027m following: compute pipelines will *always* use three root constants for both dispatch and dispatch indirect? That seems much better than allocating and uploading to a buffer, and we have sufficient space in the root signature for it.",
      "parentUuid": "56457821_a6c47d8b",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4dee3a1_e3d278b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-18T18:56:34Z",
      "side": 1,
      "message": "sorry nevermind - re-reading I think I understand better now. DispatchIndirect still needs a root buffer view because we would have no opportunity to directly set the root constants. Still need to copy from the indirect buffer into the cbv.",
      "parentUuid": "b6fb2bf8_bfb0da13",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71cad824_a5d80fd6",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 4
      },
      "lineNbr": 208,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "u-nit: usesNumWorkgroups.",
      "range": {
        "startLine": 208,
        "startChar": 13,
        "endLine": 208,
        "endChar": 29
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f9d770f_173b2058",
        "filename": "src/dawn_native/ShaderModule.h",
        "patchSetId": 4
      },
      "lineNbr": 208,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71cad824_a5d80fd6",
      "range": {
        "startLine": 208,
        "startChar": 13,
        "endLine": 208,
        "endChar": 29
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e45f7ba_aeda5fc6",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 480,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "Would overloading with void OnSetPipeline(ComputePipeline* pipeline) allow overloading without the need to add a static_cast?",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0c62533_377096b8",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 480,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e45f7ba_aeda5fc6",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f2d96f7_b34f0e07",
        "filename": "src/dawn_native/d3d12/ComputePipelineD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 29
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15e2b984_fc1eb4b8",
        "filename": "src/dawn_native/d3d12/ComputePipelineD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f2d96f7_b34f0e07",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 29
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc812810_2718ead0",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "nit: only compute is needed",
      "range": {
        "startLine": 181,
        "startChar": 50,
        "endLine": 181,
        "endChar": 77
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f72c49b3_61b8df3f",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "However there is no D3D12_SHADER_VISIBILITY_COMPUTE according to https://docs.microsoft.com/en-us/windows/win32/api/d3d12/ne-d3d12-d3d12_shader_visibility.",
      "parentUuid": "bc812810_2718ead0",
      "range": {
        "startLine": 181,
        "startChar": 50,
        "endLine": 181,
        "endChar": 77
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c849f541_c54d844f",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-18T12:39:56Z",
      "side": 1,
      "message": "Ah, that matches [2] ok.",
      "parentUuid": "f72c49b3_61b8df3f",
      "range": {
        "startLine": 181,
        "startChar": 50,
        "endLine": 181,
        "endChar": 77
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43bd37f0_5fdd7e8d",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 258,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "Maybe we can add a constant defined in PipelineLayoutD3D12.h and use it directly. It\u0027s not really clear why numworkgroups would be based off FirstIndexOffset.",
      "range": {
        "startLine": 258,
        "startChar": 15,
        "endLine": 258,
        "endChar": 47
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f59e4f9_fc9ee5c0",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 258,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43bd37f0_5fdd7e8d",
      "range": {
        "startLine": 258,
        "startChar": 15,
        "endLine": 258,
        "endChar": 47
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a6030e1_01a39baa",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 262,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "nit: maybe we can use kReservedRegisterSpace directly.",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e467a65_a47ea3e9",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 262,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a6030e1_01a39baa",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbfd2322_3b5e6981",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "nit: I don\u0027t think we necessarily want to have them be static in the future. To avoid breaking the API contract I suggest we keep them as regular methods.",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6df60315_e124fa93",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbfd2322_3b5e6981",
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66d21d88_352900a6",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-15T13:25:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 109,
        "startChar": 17,
        "endLine": 109,
        "endChar": 33
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be29a358_1cc9a299",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-10-18T06:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66d21d88_352900a6",
      "range": {
        "startLine": 109,
        "startChar": 17,
        "endLine": 109,
        "endChar": 33
      },
      "revId": "bead9f7eefced8b3489e958a49ffdce3db509201",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}