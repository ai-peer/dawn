{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eabe8158_ec7a6df5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-25T20:37:20Z",
      "side": 1,
      "message": "Oops I got it wrong. enga@ is still out, cwallez@ is back",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7855ed07_5c111b0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:06:28Z",
      "side": 1,
      "message": "some high level thoughts first",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "323dcfd9_5b2a9a8c",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:06:28Z",
      "side": 1,
      "message": "instead of this, what do you think about having a free function\n```\nResultOrError\u003ctint::transform::SubstituteOverride::Config\u003e\nBuildSubstituteOverridesTransform(...);\n```\nkinda like `BuildExternalTextureTransformBindings` and `BuildVertexPullingTransformConfig`\n\nwe would call it along with the rest of the transforms that run during backend pipeline creation. The metadata.overrides will need to be added into the compilation request struct for all the backends.\n\nThe benefit of this is that all the transforms happen in one place with fewer tint::Programs around; we don\u0027t need to mutate ProgrammableStage with additional members only relevant to SubstituteOverrides; and we don\u0027t need to run the SubstituteOverrides transform at all on cache hit.\nMutating ProgrammableStage seems not so great since now you have to be careful about using the correct program since you can get different versions of it in multiple ways.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 1
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47e31d1d_fd1b9f2f",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-25T21:18:24Z",
      "side": 1,
      "message": "One problem with calling from backend pipeline is that workgroup size validation is happening inside this transform. And dawn_unittests doing validation test don\u0027t actually have it run.",
      "parentUuid": "323dcfd9_5b2a9a8c",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 1
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e2c1b8_076ef209",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:30:55Z",
      "side": 1,
      "message": "hmmm that\u0027s a fair point. What if we modified DeviceNull\u0027s ComputePipeline::Initialize as well? there\u0027s a bit of a risk that we implement it differently in the backends vs the null backend, but I think it should still get caught in the CTS.",
      "parentUuid": "47e31d1d_fd1b9f2f",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 1
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23d2093f_bf273efb",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-25T21:36:21Z",
      "side": 1,
      "message": "This should pass the dawn_unittests, let me try.",
      "parentUuid": "22e2c1b8_076ef209",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 1
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1dc56be_6f775382",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-26T12:41:38Z",
      "side": 1,
      "message": "What about adding a `MaybeError RenderPipelineBase/ComputePipeline/Pipeline::InitializeBase()` like we have for some objects already. `Pipeline::InitializeBase` would take care of iterating the stages and running the SingleEntryPoint transform (that we do on all backends already) and the SubstituteOverrides transform if needed. In the future we can have more code paths, but it would make the situation much simpler to start. Am I missing something?",
      "parentUuid": "23d2093f_bf273efb",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 1
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daf9e076_422318f6",
        "filename": "src/dawn/native/ComputePipeline.cpp",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-26T14:56:15Z",
      "side": 1,
      "message": "overall I wanted to see if it would be possible for us to 1. have fewer intermediate programs by doing it as part of pipeline compilation, and 2. not run the transform at all on cache hit",
      "parentUuid": "f1dc56be_6f775382",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 69,
        "endChar": 1
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cecbce76_7043316a",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 14
      },
      "lineNbr": 308,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:06:28Z",
      "side": 1,
      "message": "Why does this need to be a Toggle?",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc18fa6_036861d1",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 14
      },
      "lineNbr": 308,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-25T21:18:24Z",
      "side": 1,
      "message": "I want this toggle to gate the old backend specific implementation for overrides, instead of fully removing them at all. Sounds like we may still use them in a future version.",
      "parentUuid": "cecbce76_7043316a",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d4e45de_a8738fb3",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 14
      },
      "lineNbr": 308,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:30:55Z",
      "side": 1,
      "message": "just so I understand, why are we not using the backend implementation? does it not support some types of overrides?",
      "parentUuid": "4fc18fa6_036861d1",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85c4042a_c2a50f09",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 14
      },
      "lineNbr": 308,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-08-25T21:36:21Z",
      "side": 1,
      "message": "bclayton@ should know the complete concern based on wgsl discussion for this.\nBut turns out our plan for webgpu v1 is to use const expression replacement for all overrides. I think the major issue is the validation issue.",
      "parentUuid": "0d4e45de_a8738fb3",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8077ec53_a97d8f35",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 14
      },
      "lineNbr": 308,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-26T12:41:38Z",
      "side": 1,
      "message": "Using the backend implementation would require Tint to export the created specialization constants for each constant in WGSL and also have an interface to give a partial assignment of constants and return a complete one (because you are allowed to do `override a \u003d override_b + override_c` in WGSL but not necessarily in backends, and not necessarily all operations that WGSL supports).\n\nAnyways, given that we are going to use the transform for the forseeable future, we could remove the backend-specific specialization constant code altogether. If we need it in the future, it would be easy to find it again in the git commits, so it is not lost at all!",
      "parentUuid": "85c4042a_c2a50f09",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35fd31e2_f3ed66bb",
        "filename": "src/dawn/native/Toggles.cpp",
        "patchSetId": 14
      },
      "lineNbr": 308,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-26T14:56:15Z",
      "side": 1,
      "message": "oh okay, I see - yea in that case I think we should remove it entirely instead of keeping it around. can always recover from git history as Corentin said",
      "parentUuid": "8077ec53_a97d8f35",
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf6ac51_192b6034",
        "filename": "src/dawn/native/metal/ComputePipelineMTL.mm",
        "patchSetId": 14
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-25T21:06:28Z",
      "side": 1,
      "message": "instead of adding `updatedLocalWorkgroupSize`, perhaps we can output the workgroup size from `ShaderModule::MetalFunctionData`. It doesn\u0027t appear that any of the other backends need it.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 88
      },
      "revId": "de8edd011c9ac2d8fdb0d2f60e85373cce83dab1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}