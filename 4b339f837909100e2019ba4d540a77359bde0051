{
  "comments": [
    {
      "key": {
        "uuid": "e735ad3e_7927c820",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 37
      },
      "lineNbr": 194,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-19T01:44:41Z",
      "side": 1,
      "message": "nit: Device lost for testing",
      "range": {
        "startLine": 194,
        "startChar": 50,
        "endLine": 194,
        "endChar": 61
      },
      "revId": "4b339f837909100e2019ba4d540a77359bde0051",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bec82bca_3d0e89b7",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 37
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-19T01:44:41Z",
      "side": 1,
      "message": "nit: This can be defined in the cpp file, it doesn\u0027t need to be in the header.",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 57,
        "endChar": 34
      },
      "revId": "4b339f837909100e2019ba4d540a77359bde0051",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ab3101b_24140193",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 37
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-19T01:44:41Z",
      "side": 1,
      "message": "nit: after Acquiring the error, we need to delete it, otherwise it\u0027ll be leaked.\n\nErrorData* err \u003d maybeError.AcquireError();\nASSERT(...);\ndelete err\n\nLooks like we missed this bug previously in DeviceBase::BaseDestructor()\n\n(side note)\ncwallez@: we should make AcquireError return a unique_ptr",
      "range": {
        "startLine": 60,
        "startChar": 23,
        "endLine": 60,
        "endChar": 48
      },
      "revId": "4b339f837909100e2019ba4d540a77359bde0051",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f75b93af_7213d8f0",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 37
      },
      "lineNbr": 748,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-19T01:44:41Z",
      "side": 1,
      "message": "Comment, but not for this CL:\n\nRight now, wgpu::ErrorType::DeviceLost doesn\u0027t differentiate between fatal errors we don\u0027t know how to handle, and real VK_ERROR_DEVICE_LOST.\n\nIf we lost the device for real, we\u0027re going to want to NOT do stuff like fn.DestroyCommandPool, fn.DestroyDevice, etc..",
      "range": {
        "startLine": 748,
        "startChar": 8,
        "endLine": 748,
        "endChar": 42
      },
      "revId": "4b339f837909100e2019ba4d540a77359bde0051",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42adada9_757af000",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 37
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-19T01:44:41Z",
      "side": 1,
      "message": "nit: We don\u0027t need this in the TEST_P block -- we can just DAWN_SKIP_TEST_IF(UsesWire()) in TestSetUp() and that will skip all of these as well.",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 34
      },
      "revId": "4b339f837909100e2019ba4d540a77359bde0051",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e7513a8_b26b0390",
        "filename": "src/tests/end2end/DeviceLostTests.cpp",
        "patchSetId": 37
      },
      "lineNbr": 87,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-12-19T01:44:41Z",
      "side": 1,
      "message": "nit: Also test, that stuff like buffer.Map, buffer.Unmap, fail\n\nWe should also check that if we lose the device right after calling Map (so the callback is still in flight), the callback is called with wgpu::ErrorType::DeviceLost",
      "revId": "4b339f837909100e2019ba4d540a77359bde0051",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}