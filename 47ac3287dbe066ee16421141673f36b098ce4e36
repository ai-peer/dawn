{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d7252918_73b311aa",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 5
      },
      "lineNbr": 2634,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-22T19:23:31Z",
      "side": 1,
      "message": "What happens if this is an expression involving the override? Does the `Materialize` fail? Or does this fail?",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0802e26d_81e1a269",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 5
      },
      "lineNbr": 2634,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-09-22T19:56:54Z",
      "side": 1,
      "message": "Sorry, I don\u0027t quite follow. I _think_ you\u0027re asking how the `N+1` case fails:\n\nIn this situation, this conditional block doesn\u0027t make its way to the return, as the expression is not a global variable, so we continue down to the check below:\n\n```\n    auto* count_val \u003d count_sem-\u003eConstantValue();\n    if (!count_val) {\n        AddError(\"array size must evaluate to a constant integer expression or override variable\",\n                 count_expr-\u003esource);\n        return utils::Failure;\n    }\n```\n\nDoes that answer your question?",
      "parentUuid": "d7252918_73b311aa",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f278b50_600349a5",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 5
      },
      "lineNbr": 2634,
      "author": {
        "id": 1003216
      },
      "writtenOn": "2022-09-22T19:59:26Z",
      "side": 1,
      "message": "Yup. I was thinking the `N+1` case was valid but that isn\u0027t right, so this makes sense. Thanks.",
      "parentUuid": "0802e26d_81e1a269",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de75eea5_7af41e1f",
        "filename": "src/tint/resolver/resolver.cc",
        "patchSetId": 5
      },
      "lineNbr": 2634,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-10-28T11:49:43Z",
      "side": 1,
      "message": "I don\u0027t follow this - the `N+1` case should be valid. Array size is an \"override expression\", which includes this sort of thing.\n\nThis was a conscious choice as things like `wgsize * 2` are often used to size workgroup arrays in compute shaders.\n\nOpened crbug.com/tint/1737",
      "parentUuid": "3f278b50_600349a5",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41288659_41a661d0",
        "filename": "src/tint/resolver/resolver_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 501,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-22T19:23:31Z",
      "side": 1,
      "message": "Maybe add a third test for `var\u003cworkgroup\u003e a : array\u003cf32, size + 4\u003e` ?",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "296029e2_c77f5db8",
        "filename": "src/tint/resolver/resolver_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 501,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-09-22T19:56:54Z",
      "side": 1,
      "message": "Done. See `type_validation_test.cc`.",
      "parentUuid": "41288659_41a661d0",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7fd27b2_fa6b0895",
        "filename": "src/tint/resolver/validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 585,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-22T19:23:31Z",
      "side": 1,
      "message": "Where does the restriction that a override sized array must be workgroup address space?",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "312b0333_b02166e5",
        "filename": "src/tint/resolver/validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 585,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-09-22T19:56:54Z",
      "side": 1,
      "message": "https://www.w3.org/TR/WGSL/#array-types\n\n\u003e Note: The only valid use of an array type sized by an overridable constant is as a memory view in the workgroup address space. This includes the store type of a workgroup variable.",
      "parentUuid": "f7fd27b2_fa6b0895",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d33237_35115444",
        "filename": "src/tint/resolver/validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 2176,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-22T19:23:31Z",
      "side": 1,
      "message": "I find this double negative hard to understand. Would this be better to split into something like:\n\n```\nif (IsArrayWithOverrideCount(member-\u003eType()) {\n  RaiseOverrideError();\n  return false;\n}\n```\n\nbe simpler to understand?",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "513e2900_1367afdd",
        "filename": "src/tint/resolver/validator.cc",
        "patchSetId": 5
      },
      "lineNbr": 2176,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-09-22T19:56:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2d33237_35115444",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f882349_fe3b84fd",
        "filename": "src/tint/resolver/validator.h",
        "patchSetId": 5
      },
      "lineNbr": 470,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-09-22T19:23:31Z",
      "side": 1,
      "message": "nit: here and in the summary it says `length` but the function is `count` and we call it ArrayCount. Should these two be count for consistency?",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38e96884_806fc926",
        "filename": "src/tint/resolver/validator.h",
        "patchSetId": 5
      },
      "lineNbr": 470,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-09-22T19:56:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f882349_fe3b84fd",
      "revId": "47ac3287dbe066ee16421141673f36b098ce4e36",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}