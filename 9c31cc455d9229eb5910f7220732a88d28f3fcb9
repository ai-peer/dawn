{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b992205f_6564308d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-10T10:32:35Z",
      "side": 1,
      "message": "PTAL\nIt seems okay to use 2M size threshold. But as you can see in PS1, there were some CQ failures(dawn_end2end_tests/SwiftShader), just because of the 64M threshold. If we put the OOM consideration aside, would it be right always not to tag .needsSubmit for WriteTexture/Buffer. I am kind of in doubt about that now.",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "358181e9_ea97c643",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-10T15:26:25Z",
      "side": 1,
      "message": "LGTM overall with some questions",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3607295_e8c29361",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-11T05:52:49Z",
      "side": 1,
      "message": "The troublesome [testcase](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/end2end/CopyTests.cpp;drc\u003daeadb03c8553c39e88d5d11d10f706d42f06a1d7;l\u003d2615) seems to break our assumption.\nIt assumes that `device.Tick()` gets `WriteBuffer` submitted eventually. But it would not necessarily be the case with our CL. Any idea?\n\n```\n    wgpu::Buffer bigBuffer \u003d\n        utils::CreateBufferFromData(device, garbageData.data(), garbageData.size(),\n                                    wgpu::BufferUsage::CopySrc | wgpu::BufferUsage::CopyDst);\n    // Next, destroy the buffer. Its heap is still alive and contains the garbage data.\n    bigBuffer.Destroy();\n\n    // Ensure the underlying ID3D12Resource of bigBuffer is deleted.\n    bool submittedWorkDone \u003d false;\n    queue.OnSubmittedWorkDone(\n        0,\n        [](WGPUQueueWorkDoneStatus status, void* userdata) {\n            EXPECT_EQ(status, WGPUQueueWorkDoneStatus_Success);\n            *static_cast\u003cbool*\u003e(userdata) \u003d true;\n        },\n        \u0026submittedWorkDone);\n    while (!submittedWorkDone) {\n        WaitABit();\n    }\n```\n\n```\nvoid DawnTestBase::WaitABit() {\n    if (device) {\n        device.Tick();\n    }\n    FlushWire();\n\n    utils::USleep(100);\n}\n```",
      "parentUuid": "b992205f_6564308d",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0dc7d6d_045c6d40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-11T13:46:43Z",
      "side": 1,
      "message": "Mitigated it by escalating `.used` to `.needsSubmit` if there is a `TrackTask`(MapAsync/OnSubmittedWorkDone) afterwards. How does it sound?",
      "parentUuid": "d3607295_e8c29361",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d07892da_01bee1d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-11T14:56:03Z",
      "side": 1,
      "message": "Would it also have been sufficient instead to always submit pending commands on APIOnSubmittedWorkDone? The comment there says:\n\n// Technically we only need to wait for previously submitted work but OnSubmittedWorkDone is\n// also used to make sure ALL queue work is finished in tests, so we also wait for pending\n// commands (this is non-observable outside of tests so it\u0027s ok to do deviate a bit from the\n// spec).",
      "parentUuid": "f0dc7d6d_045c6d40",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a98e803b_f8400e8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-12T06:53:21Z",
      "side": 1,
      "message": "To always submit pending commands on APIOnSubmittedWorkDone could lead to unnecessary submits, after all we should just do that only if there is such pending WriteBuffer/Texture.",
      "parentUuid": "d07892da_01bee1d7",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb032eb5_6f13a70e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-15T14:31:54Z",
      "side": 1,
      "message": "hm, ok; I agree we should avoid the unnecessary submits. Was hoping to avoid having multiple concepts of .used and .needsSubmit, but I don\u0027t see a good way right now.\n\nI think we may need to do OnTrackTask after Buffer mapAsync as well! That\u0027s because we need to finish executing a writeBuffer to a mappable buffer, before the mapAsync callback is called. Could we add that, as well as test for it?",
      "parentUuid": "a98e803b_f8400e8c",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e34dff_2b5bd8cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-16T07:01:51Z",
      "side": 1,
      "message": "There are quite a few such test cases like [this](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/end2end/BufferTests.cpp;l\u003d134). It didn\u0027t fail because this [GetPendingRecordingContext](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/vulkan/BufferVk.cpp;drc\u003d41e4d9a34c1d9dcb2eef3ff39ff9c1f987bfa02a;l\u003d309) enables `needsSubmit`. Corrected in the latest PS.",
      "parentUuid": "fb032eb5_6f13a70e",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b685624_4bfbc312",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-18T15:54:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2e34dff_2b5bd8cf",
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff8b7ea8_33a6c2e3",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-10T15:26:25Z",
      "side": 1,
      "message": "why do we need to move this to be protected? Couldn\u0027t the derived classes call GetDynamicUploader() ?",
      "range": {
        "startLine": 418,
        "startChar": 4,
        "endLine": 418,
        "endChar": 54
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c354fb3_42f67cc5",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-11T13:46:43Z",
      "side": 1,
      "message": "Didn\u0027t know that, thanks for the hint!",
      "parentUuid": "ff8b7ea8_33a6c2e3",
      "range": {
        "startLine": 418,
        "startChar": 4,
        "endLine": 418,
        "endChar": 54
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6877ee3a_62c29888",
        "filename": "src/dawn/native/Device.h",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-18T15:54:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c354fb3_42f67cc5",
      "range": {
        "startLine": 418,
        "startChar": 4,
        "endLine": 418,
        "endChar": 54
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36da255a_78cb3b03",
        "filename": "src/dawn/native/DynamicUploader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-10T15:26:25Z",
      "side": 1,
      "message": "should probably have a more clear name like \"GetTotalAllocatedSize\"\n\nThat said - is this counting what we want? IIUC, `HasTooManyStagingBuffers` is going to return true nearly all of the time. The limit there is 2MB but every ring buffer is at least 4MB large.\n\nShould we instead be counting the amount of bytes that are pending upload instead of the allocated bytes?",
      "range": {
        "startLine": 130,
        "startChar": 26,
        "endLine": 130,
        "endChar": 33
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6258f873_2e988381",
        "filename": "src/dawn/native/DynamicUploader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-11T13:46:43Z",
      "side": 1,
      "message": "Good naming, thanks!\n2MB was to confirm the bots failure. Got it back 64MB threshold now.",
      "parentUuid": "36da255a_78cb3b03",
      "range": {
        "startLine": 130,
        "startChar": 26,
        "endLine": 130,
        "endChar": 33
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd0d2b1_a1a45212",
        "filename": "src/dawn/native/DynamicUploader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-08-15T16:56:34Z",
      "side": 1,
      "message": "+1 on counting the number of bytes that need upload instead of the allocated size. An alternative is to count it only on the Vulkan backend on the CommandRecordingContext here. Either way sounds fine.\n\nThat said, isn\u0027t 64M a lot to be keeping around? For regular Dawn operations even 1MB is a lot. IDK",
      "parentUuid": "6258f873_2e988381",
      "range": {
        "startLine": 130,
        "startChar": 26,
        "endLine": 130,
        "endChar": 33
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a426158c_a2df1a1e",
        "filename": "src/dawn/native/DynamicUploader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-16T07:01:51Z",
      "side": 1,
      "message": "IIUC, DynamicUploader tracks staging buffers for both WriteBuffer and WriteTexture, not only internally from Dawn\u0027s implementation, but also externally from clients. So 1MB might not be large enough. I am not firmly sure 64M would be an ideal one. My consideration was that it should be as large as possible to save submits for WriteBuffer/Texture, meanwhile it shouldn\u0027t count too much regarding OOM. In this sense \u002764M\u0027 seems a safe one as modern GPUs usually have dozens of GB physical memory.\n\nAs the original concern is OOM, probably it makes more sense to count how much Dawn has allocated from the device, rather than actually used by Dawn itself.",
      "parentUuid": "0cd0d2b1_a1a45212",
      "range": {
        "startLine": 130,
        "startChar": 26,
        "endLine": 130,
        "endChar": 33
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "817af7d8_5b7a8362",
        "filename": "src/dawn/native/vulkan/DeviceVk.h",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-10T15:26:25Z",
      "side": 1,
      "message": "nit: it\u0027s not that we have too many buffers; it\u0027s that the total size of all the buffers is large and we want to flush it. Perhaps the callsite should do GetDynamicUploader()-\u003eShouldFlush()",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 172,
        "endChar": 19
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f712770_d7f80439",
        "filename": "src/dawn/native/vulkan/DeviceVk.h",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-08-11T13:46:43Z",
      "side": 1,
      "message": "Can\u0027t like the idea more. Thanks!",
      "parentUuid": "817af7d8_5b7a8362",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 172,
        "endChar": 19
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6006b8c_cbebd152",
        "filename": "src/dawn/native/vulkan/DeviceVk.h",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-18T15:54:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f712770_d7f80439",
      "range": {
        "startLine": 172,
        "startChar": 12,
        "endLine": 172,
        "endChar": 19
      },
      "revId": "9c31cc455d9229eb5910f7220732a88d28f3fcb9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}