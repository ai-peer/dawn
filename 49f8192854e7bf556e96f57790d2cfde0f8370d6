{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ac59268d_11c0d3f5",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2230,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T13:50:45Z",
      "side": 1,
      "message": "Just noticed a note in the spec, this isn\u0027t meaningful if `e \u003c -0`. So, I think this needs to check if that and return an error. Which means the only negative value to handle is `-0` so the `abs` shouldn\u0027t even be needed?",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d592cff_533116c8",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2230,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-22T14:04:42Z",
      "side": 1,
      "message": "I read that note too, but I don\u0027t think it\u0027s meant to be an error. It\u0027s just saying that mathematically, taking the length of a negative value isn\u0027t meaninful for scalars.\n\nThe spec says clearly \"Evaluates to the absolute value of e if T is scalar.\" so I\u0027m pretty sure we have to support negative values. I\u0027ll ask in Tint chat.",
      "parentUuid": "ac59268d_11c0d3f5",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7a0cc0c_627f93c5",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2230,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T14:12:55Z",
      "side": 1,
      "message": "In other places of the spec where it says not mathematically meaningful we produce an error, I think we should be consistent and either update the spec to change the wording/remove the note, or make it an error.",
      "parentUuid": "4d592cff_533116c8",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f3e4edd_a370e66e",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2230,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-22T18:44:21Z",
      "side": 1,
      "message": "Discussed with team, and this Note will be removed from the spec.",
      "parentUuid": "c7a0cc0c_627f93c5",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bad2e643_c761507b",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2232,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T13:45:52Z",
      "side": 1,
      "message": "The `::abs` code above should be pulled out into a helper and used. This will fail on the `std::numeric_limits\u003cint32_t\u003e::min` case as the abs doesn\u0027t fit. The `abs` on a `uint32_t` also causes a cast to `int32_t` so needs to be handled specially.",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c05105f_eab1f966",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2232,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-22T18:44:21Z",
      "side": 1,
      "message": "`length` only applies to floats, so the use-case you\u0027re pointing out won\u0027t happen here. I think we should hold off on extracting Abs for this.",
      "parentUuid": "bad2e643_c761507b",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59d589bd_f9e52ce7",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2232,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T19:38:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c05105f_eab1f966",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc4c9d5_bb049809",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2627,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-11-22T13:45:52Z",
      "side": 1,
      "message": "Can you move this check up to the `Sqrt` above and change this to just call the `SqrtFunc`?",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dea9556c_9db78801",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 2627,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-11-22T18:44:21Z",
      "side": 1,
      "message": "Done. Good idea.",
      "parentUuid": "9fc4c9d5_bb049809",
      "revId": "49f8192854e7bf556e96f57790d2cfde0f8370d6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}