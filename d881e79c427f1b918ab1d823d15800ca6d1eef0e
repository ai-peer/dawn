{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a3dfa1a2_0ac2e709",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-29T20:55:15Z",
      "side": 1,
      "message": "Hi Austin, PTAL. Thanks",
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff57fb03_60b40dd3",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 211,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T00:56:35Z",
      "side": 1,
      "message": "I think we should keep the existing implementation if monitored fences are supported.\n\nI think you should have two d3d11 queue classes.\n\n```\n// new virtual base class\nclass d3d11::Queue : public d3d::Queue {\n public:\n  virtual void NextSerial() \u003d 0; \n\n  // other existing stuff\n};\n```\n\n`Queue::Create` choses an implementation - MonitoredQueue or UnmonitoredQueue based on what type of fence is supported.\n\n`d3d11::MonitoredQueue : public Queue` and `d3d11::UnmonitoredQueue : public Queue`\n\nThese classes can be defined purely in the .cpp file. Users of the code only need to use d3d11::Queue directly\n\nMonitoredQueue:\n - CheckAndUpdateCompletedSerials does what it does today\n - WaitForQueueSerial does what it does today\n - NextSerial does what it does today\n \nUnmonitoredQueue:\n - NextSerial checks if it needs to do a fence signal, does it if necessary (shared texture memory is used).\n   calls Flush1(..) and tracks the event\n - WaitForQueueSerial does what you have in the new code\n - CheckAndUpdateCompletedSerials checks the events the way you have it in the new code",
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd75e6cf_56876d6d",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 211,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-30T20:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff57fb03_60b40dd3",
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a2132cc_db275499",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T00:56:35Z",
      "side": 1,
      "message": "it would be great if you could reuse WaitAnySystemEvent instead.\n\nyou can change it to return a std::optional\u003csize_t\u003e instead of a bool. Then, it can return the index of the first event that completed.",
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f9c481d_6f5e9689",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-30T20:26:06Z",
      "side": 1,
      "message": "Using `WaitAnySystemEvent()` is inconvenient. It needs prepare an array of `\u003cSystemEventReceiver, bool*\u003e` as an arg. And the `WaitAnySystemEvent()` will later convert the array of `\u003cSystemEventReceiver, bool*\u003e` to a `std::vector\u003cHANDLE\u003e` again. It adds unnecessary complexity.",
      "parentUuid": "3a2132cc_db275499",
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dad96608_a9894e4d",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-04-30T22:18:04Z",
      "side": 1,
      "message": "Hmm, I agree with Austin here that it would be pretty nice to reuse `WaitAnySystemEvent`. I think maybe what we could do to facilitate it is to separate out the `bool*` from the pair and instead pass 2 iterables into `WaitAnySystemEvent`, one that is like a `vector\u003cSystemEventReceiver\u003e` and another optional one that is like `vector\u003cbool*\u003e` or something similar? (And also return an `optional\u003csize_t\u003e` like Austin suggested.)\n\nWe could probably also template the default size of the `StackVector` so that you could use 8 instead of the default 4.\n\nI am fine to do this in a follow up though since you would probably need to update the other call-sites of the helper.",
      "parentUuid": "0f9c481d_6f5e9689",
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2336b4e_3cb71842",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 225,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T00:56:35Z",
      "side": 1,
      "message": "you can\u0027t pass more handles than MAXIMUM_WAIT_OBJECTS (which is 64).\n\nSo you\u0027ll need to iterate in batches of at most 64",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 225,
        "endChar": 99
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3330a5_47620ac5",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 225,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-30T20:26:06Z",
      "side": 1,
      "message": "Done. Good catch.",
      "parentUuid": "d2336b4e_3cb71842",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 225,
        "endChar": 99
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20cd82e9_9c72b827",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T00:56:35Z",
      "side": 1,
      "message": "this is based on the strong assumption there is exactly 1 event per serial. It would be more robust if instead you index into mPendingEvents and return the serial exactly",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 98
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74ead4b9_b19590a3",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-30T20:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20cd82e9_9c72b827",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 98
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba4a0354_9b284747",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 333,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T00:56:35Z",
      "side": 1,
      "message": "This new code depends on the serials to be strictly order. Probably you want to put `GetScopedPendingCommandContext` before the serial incrementing - or races can cause the serials to be out of order",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 333,
        "endChar": 74
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2def742_5a2318e1",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 333,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-30T20:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba4a0354_9b284747",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 333,
        "endChar": 74
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97159166_1dcda24e",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 334,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-30T00:56:35Z",
      "side": 1,
      "message": "I\u0027m a bit surprised we\u0027re both signaling the fence, and flushing the event every time.\n\nI expected something more like:\n\n```\nif (needsSignalFence) {\n  context.Signal(..);\n}\nif (needsFlushEvent) {\n  context.Flush(...);\n}\n```\n\nwhere we have needsSignalFence is true if SharedTextureMemory is used, or if monitored fences are supported\n\nand needsFlushEvent is true if monitored fences are not supported",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 334,
        "endChar": 0
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6eddb47_13cce27d",
        "filename": "src/dawn/native/d3d11/QueueD3D11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 334,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-04-30T20:26:06Z",
      "side": 1,
      "message": "I plan to do it in follow-up CLs.",
      "parentUuid": "97159166_1dcda24e",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 334,
        "endChar": 0
      },
      "revId": "d881e79c427f1b918ab1d823d15800ca6d1eef0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}