{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cd326c60_7e3bfedc",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-23T23:21:16Z",
      "side": 1,
      "message": "Overall I\u0027m surprised by the added complexity in this CL: the handling of OOM should only be allowed in APICreateBuffer/Texture/QuerySet and these methods should only be called by the ProcTable (it seems I missed one spot when introducing these methods). So why can\u0027t we simply change HandleError to take an AllowOOM::Yes/No and split ConsumedError into a version that doesn\u0027t allowOOm and ConsumedErrorAllowOOM? There doesn\u0027t seem that a lot of other entrypoints will need to handle OOM in the future, and there doesn\u0027t seem like there will be other error types that need to be made special in the future. So the mechanisms introduced seem too complex compared to what\u0027s needed?",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a9b63fe_6a87b799",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-23T23:43:11Z",
      "side": 1,
      "message": "So I believe that InternalError is another one that could need this kind of handling in Pipeline creation. This means that we would need 2 bools for the handling, and it sort of becomes a mess if we do it like that. By explicitly passing the error types then it\u0027s just a bit cleaner than a bunch of bools where ordering matters and is hard to check for correctness.",
      "parentUuid": "cd326c60_7e3bfedc",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d222e831_9c2fe8f4",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-23T23:50:49Z",
      "side": 1,
      "message": "Right now though, we either permit OOM or Internal error, not both. so it could be  one enum to indicate it",
      "parentUuid": "5a9b63fe_6a87b799",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f93b482_a37948c7",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-23T23:53:27Z",
      "side": 1,
      "message": "Right, but regardless that would need to be passed in? The only difference with that is that we just remove the parts that allow the `allowedErrors` to be a full mask, and just make it an explicit enum.",
      "parentUuid": "d222e831_9c2fe8f4",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67f45654_44562d3e",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-24T19:18:51Z",
      "side": 1,
      "message": "it\u0027s my bad that when I first thought about this as a mask passed from the generator, but after seeing it, I don\u0027t think it\u0027s best now - as I mentioned in some other comments. The current approach is not extremely complex, but overall, we could still accomplish the same thing with less code. \n\nI initially thought of it as a general \"there\u0027s a certain set of errors allowed, anything outside that set should be transformed\", but I\u0027m realizing now that the only time we want to do something other than default, there\u0027s just one bit that is different between the allowed set and the default set. So a single enum is simpler and expresses the same thing.\nThe mask works fine, but if someone looks through this code in the future, they need to do extra thinking to understand it.\n\nI also thought that we would need to \"drill\" through the semantics of what errors should be permitted to nested API* calls - like APIBeginRenderPass -\u003e APICreateTexture, etc. but it turns out that\u0027s not the case. Reentrant uses like that should be using CreateTexture and bubble errors out, not APICreateTexture.\nSo that means we don\u0027t actually need it to be an argument on API* and we can hardcode the enum passed to ConsumedError.",
      "parentUuid": "9f93b482_a37948c7",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "765f9efb_57a5219e",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-24T22:12:17Z",
      "side": 1,
      "message": "Ok I removed the generated code and hard-coded in the enums. I kept the enums \"maskable\" since IMO it doesn\u0027t add too much complexity given we have so many other enums that also act as masks already, and it makes implementing the `HandleError` function cleaner.\n\nOverall, removing the generator code only removed around like... 50 lines of code? I personally liked it better in the json file though because I find it a lot easier to understand what errors to expect from API calls by just looking at the json file versus having to go into the code. On top of that, some device functions, i.e. `CreateErrorBuffer`, actually have to specify the error type more than once which is both annoying and error prone.\n\nFor future thought, I also don\u0027t think \"less code\" is always better. I think the previous version was more explicit whereas now we are basically hiding the impl more and understanding it is actually harder.",
      "parentUuid": "67f45654_44562d3e",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b927eaa8_b21b0e5b",
        "filename": "src/dawn/native/null/DeviceNull.cpp",
        "patchSetId": 13
      },
      "lineNbr": 493,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-23T23:21:16Z",
      "side": 1,
      "message": "nit: Could be GetDevice()-\u003eCreateTexture(...).Release();",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afef09e0_b46653ea",
        "filename": "src/dawn/native/null/DeviceNull.cpp",
        "patchSetId": 13
      },
      "lineNbr": 493,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-24T00:28:22Z",
      "side": 1,
      "message": "Ah.. since we are returning a raw ptr here, I think using the API version is a bit safer, so leaving it as is for now.",
      "parentUuid": "b927eaa8_b21b0e5b",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}