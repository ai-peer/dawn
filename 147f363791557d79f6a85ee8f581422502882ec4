{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cd326c60_7e3bfedc",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-23T23:21:16Z",
      "side": 1,
      "message": "Overall I\u0027m surprised by the added complexity in this CL: the handling of OOM should only be allowed in APICreateBuffer/Texture/QuerySet and these methods should only be called by the ProcTable (it seems I missed one spot when introducing these methods). So why can\u0027t we simply change HandleError to take an AllowOOM::Yes/No and split ConsumedError into a version that doesn\u0027t allowOOm and ConsumedErrorAllowOOM? There doesn\u0027t seem that a lot of other entrypoints will need to handle OOM in the future, and there doesn\u0027t seem like there will be other error types that need to be made special in the future. So the mechanisms introduced seem too complex compared to what\u0027s needed?",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a9b63fe_6a87b799",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-23T23:43:11Z",
      "side": 1,
      "message": "So I believe that InternalError is another one that could need this kind of handling in Pipeline creation. This means that we would need 2 bools for the handling, and it sort of becomes a mess if we do it like that. By explicitly passing the error types then it\u0027s just a bit cleaner than a bunch of bools where ordering matters and is hard to check for correctness.",
      "parentUuid": "cd326c60_7e3bfedc",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d222e831_9c2fe8f4",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-02-23T23:50:49Z",
      "side": 1,
      "message": "Right now though, we either permit OOM or Internal error, not both. so it could be  one enum to indicate it",
      "parentUuid": "5a9b63fe_6a87b799",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f93b482_a37948c7",
        "filename": "dawn.json",
        "patchSetId": 13
      },
      "lineNbr": 1030,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-02-23T23:53:27Z",
      "side": 1,
      "message": "Right, but regardless that would need to be passed in? The only difference with that is that we just remove the parts that allow the `allowedErrors` to be a full mask, and just make it an explicit enum.",
      "parentUuid": "d222e831_9c2fe8f4",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b927eaa8_b21b0e5b",
        "filename": "src/dawn/native/null/DeviceNull.cpp",
        "patchSetId": 13
      },
      "lineNbr": 493,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-02-23T23:21:16Z",
      "side": 1,
      "message": "nit: Could be GetDevice()-\u003eCreateTexture(...).Release();",
      "revId": "147f363791557d79f6a85ee8f581422502882ec4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}