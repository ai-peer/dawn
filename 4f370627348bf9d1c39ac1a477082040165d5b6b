{
  "comments": [
    {
      "key": {
        "uuid": "d16e5163_f2e34ae1",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "What if we switch heaps during the frame? This will return true even when in that case the bindgroup needs to be reallocated.\n\n[4]",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04d10017_3b268db0",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 34,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Should be checking both serials, fixed.",
      "parentUuid": "d16e5163_f2e34ae1",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cdb6b9c_1e11e0de",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "nit: spell out simple types",
      "range": {
        "startLine": 47,
        "startChar": 14,
        "endLine": 47,
        "endChar": 18
      },
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb34636c_7669191d",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 47,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cdb6b9c_1e11e0de",
      "range": {
        "startLine": 47,
        "startChar": 14,
        "endLine": 47,
        "endChar": 18
      },
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54dd5ee7_a1e21da6",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "nit: extra comma",
      "range": {
        "startLine": 70,
        "startChar": 69,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fae4b081_a553521b",
        "filename": "src/dawn_native/d3d12/BindGroupD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 70,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54dd5ee7_a1e21da6",
      "range": {
        "startLine": 70,
        "startChar": 69,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d797eae_d270b816",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "This comment encodes too much of the history of this CL which makes it more complicated than it could be. A simpler version could be:\n\n  BindGroups are linearly allocated in descriptor heaps but there can be a single descriptor heap of each type bound at any given time. This means that when we switch heaps, all other currently bound descriptors must also be reencoded. Descriptors can fail allocation gracefully which is the signal to change the bound heap.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4edb7079_14b0f369",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 83,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "9d797eae_d270b816",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "247c690d_b902cbfc",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 103,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "[4]",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a93fa04_bcd2b7c5",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 103,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "247c690d_b902cbfc",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73602533_2a04b16d",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "nit: the name is misleading and should contain some evidence that the heaps are rotated. Right now it looks like it might not allocate heaps if they are already allocated.",
      "range": {
        "startLine": 104,
        "startChar": 67,
        "endLine": 104,
        "endChar": 93
      },
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d18cb83d_c1df85c0",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 104,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73602533_2a04b16d",
      "range": {
        "startLine": 104,
        "startChar": 67,
        "endLine": 104,
        "endChar": 93
      },
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f0ce806_e89a2d08",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 112,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "Given the structure of the code, this will always be true because if (!didCreateBindGroups) didReallocation is set to true. Removing it also allows removing didReallocation.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77983e9e_dbd19992",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 112,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f0ce806_e89a2d08",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2d351f1_b7510891",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 125,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "The logic of what to do in the case of reallocation is split between here and [4]. Maybe it could all be grouped together so all side effects of reallocation are in the same place for simplicity? Basically TryAllocateIfNeeded could be inlined here and simplifications performed.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2087ce6f_3491d777",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 125,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "d2d351f1_b7510891",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "257b7a28_9ca9de0a",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 175,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "We don\u0027t need to check because we know this function will either be called at the initialization or when heap changes. This allows removing the mDescriptorHeaps member. Likewise this function doesn\u0027t need to return a bool.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fff037de_9b98a679",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 175,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "257b7a28_9ca9de0a",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0009c5ef_55f98b91",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 253,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "nit: unnecessary line wrapping.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a88f03ea_67bb1c77",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 253,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0009c5ef_55f98b91",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcadb0e_cb864766",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "Like we discussed in the last call I was there, using a RingBuffer will cause correctness issues where a bindgroup will think it is still valid in frame N+1 when it has already been overwritten. I think you meant to fix this by returning false in [4] instead of true.\n\nIf you\u0027re worried about re-allocating descriptor heaps, this can be fixed by recycling whole descriptor heaps via a serial queue, which is a more general solution (and definitely should not be done in this CL, it is complex enough as is).",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30bcf06e_acf7711e",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 135,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "\u003e Like we discussed in the last call I was there, using a RingBuffer will cause correctness issues where a bindgroup will think it is still valid in frame N+1 when it has already been overwritten\n\nThe condition [1] is prevented by additionally checking a device serial. Unless the allocation is in-flight, it cannot be reused in a future frame.\n\n\u003e If you\u0027re worried about re-allocating descriptor heaps, this can be fixed by recycling whole descriptor heaps via a serial queue, which is a more general solution (and definitely should not be done in this CL, it is complex enough as is).\n\nSwitching in more heaps will cause flushes and result in poor perf + other side-effects, I wouldn\u0027t recommend.",
      "parentUuid": "4bcadb0e_cb864766",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f795c230_c5ef85c2",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-18T13:43:47Z",
      "side": 1,
      "message": "\u003e \u003e Like we discussed in the last call I was there, using a RingBuffer will cause correctness issues where a bindgroup will think it is still valid in frame N+1 when it has already been overwritten\n\u003e \n\u003e The condition [1] is prevented by additionally checking a device serial. Unless the allocation is in-flight, it cannot be reused in a future frame.\n\u003e \n\nThe condition is quite far from the code that requires it. If we were to use a ringbuffer, it\u0027d be likely better to have BindGroup call allocator-\u003eIsAllocationStillValid(pendingSerial, heapSerial).\n\n\u003e \u003e If you\u0027re worried about re-allocating descriptor heaps, this can be fixed by recycling whole descriptor heaps via a serial queue, which is a more general solution (and definitely should not be done in this CL, it is complex enough as is).\n\u003e \n\u003e Switching in more heaps will cause flushes and result in poor perf + other side-effects, I wouldn\u0027t recommend.\n\nDo you have documentation for this? From what I understand the very worst thing that a SetDescriptorHeaps could cause is a GPU synchronization point and that\u0027s not very expensive. The tradeoffs between ringbuffer and a bimp allocator in the descriptor heap are very unclear so for now we should choose the simplest solution, which is the bump allocator.",
      "parentUuid": "30bcf06e_acf7711e",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e7534ce_9eb689a3",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 135,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-21T18:37:36Z",
      "side": 1,
      "message": "SetDescriptorHeaps stalls the pipeline [1][2], which is why ringbuffer comes specifically recommended for heap management [3][4][5].\n\n[1] MSDN: \"this can be an expensive operation, requiring a GPU stall to flush all work\". \n[2] Intel: \"Changing descriptor heaps severely stalls the graphics pipeline\". \n[3] Nvidia: \"Make sure to use just one CBV/SRV/UAV/descriptor heap as a ring-buffer ...\". \n[4] AMD: \"Keep a single Descriptor Heap\"  and \"Use as Ringbuffer\". \n[5] D3D: D3D11on12 translation layer uses ring-buffers.\n\n[1] https://docs.microsoft.com/en-us/windows/win32/direct3d12/descriptor-heaps-overview#switching-heaps \n[2] https://software.intel.com/sites/default/files/managed/42/19/Intel%C2%AE-Processor-Graphics-Gen11-API-Developer-and-Optimization-Guide.pdf \n[3] https://developer.nvidia.com/dx12-dos-and-donts \n[4] http://gpuopen.com/wp-content/uploads/2016/03/GDC_2016_D3D12_Right_On_Queue_final.pdf \n[5] https://github.com/microsoft/D3D12TranslationLayer/blob/1c358f0cea8eb1db2485fa52963ca25e2eda8f61/src/ImmediateContext.cpp",
      "parentUuid": "f795c230_c5ef85c2",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d001c0c_462dc6ff",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.cpp",
        "patchSetId": 37
      },
      "lineNbr": 135,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-24T17:06:06Z",
      "side": 1,
      "message": "Thanks for all the links. So it seems that a pipeline stalls happens on SetDescriptorHeaps. Using a ring buffer is one of the first heuristics we can do to minimizes calls to SetDescriptorHeaps but I worry it will lead to a lot of redundant descriptor re-recording between submits.\n\nAnother heuristic would be to use bump allocators but eagerly switch them when both we can coalesce the pipeline stall with the stall D3D12 requires at the end of a ExecuteCommands, and for example, when the descriptor heaps are half-full.\n\nAt this point I don\u0027t care what we do for the first version of the code as long as it is well documented and the logic is keep as simple as possible for now.",
      "parentUuid": "0e7534ce_9eb689a3",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "339aeac2_62cb5aeb",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.h",
        "patchSetId": 37
      },
      "lineNbr": 62,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "nit: comment somewhere that heap serial of 0 will never be returned and this can be used as a tag value to say that bindgroups are not allocated yet.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecfb18ef_7363144a",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.h",
        "patchSetId": 37
      },
      "lineNbr": 62,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "339aeac2_62cb5aeb",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cc1c77b_48a78c4d",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.h",
        "patchSetId": 37
      },
      "lineNbr": 65,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "Why does this care about all heap types, when it\u0027s only used for cbvUavSrv and sampler? Same comment in all other places in the .cpp file.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "385c5e7a_0d0fd9a8",
        "filename": "src/dawn_native/d3d12/DescriptorAllocatorManagerD3D12.h",
        "patchSetId": 37
      },
      "lineNbr": 65,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0cc1c77b_48a78c4d",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e80f110c_88140007",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.h",
        "patchSetId": 37
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-02-05T19:51:14Z",
      "side": 1,
      "message": "Previous comment about simplifying this hasn\u0027t been addressed yet.",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "980f35e9_70844ab8",
        "filename": "src/dawn_native/d3d12/DescriptorHeapAllocationD3D12.h",
        "patchSetId": 37
      },
      "lineNbr": 25,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-02-11T18:22:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e80f110c_88140007",
      "revId": "4f370627348bf9d1c39ac1a477082040165d5b6b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}