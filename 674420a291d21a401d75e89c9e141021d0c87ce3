{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "edb7e93a_42690712",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-15T17:09:14Z",
      "side": 1,
      "message": "Sorry I still wasn\u0027t able to take a look at the tests. Austin can you TAL too?",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1427ab9f_153b79af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "overall LGTM",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35b34bd_f5a175b0",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 34,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "nit: in this shader, I would prfer to refer to the low and high bits with [0] and [1] instead of .x and .y since these are not coordinates\n\nalternatively, maybe this is better as just two u32 members called .low and .high",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0eff423_1bd28def",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 34,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e35b34bd_f5a175b0",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f00552e_4df1c354",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "maybe just above this shader, we can have c++ static_asserts about the offsets in dawn_native::TsParams",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d1094bb_242013d9",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 46,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "@Austin, I\u0027m sure why we need static_asserts for the offsets. The input offset is set by ourselves, the output offset are passed by ResolveQuerySet and validated, they also can be different.",
      "parentUuid": "9f00552e_4df1c354",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ddaaed1_5443c6ff",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 46,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-17T18:42:09Z",
      "side": 1,
      "message": "Oh I meant that the struct offsets 0, 4, 8, 12 are the same as the ones in C++ - in case members are added or changed.",
      "parentUuid": "4d1094bb_242013d9",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2279dbf_c2cad673",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-15T17:09:14Z",
      "side": 1,
      "message": "nit: sizeofTimestamp, this is closer to the semantic of what we\u0027re doing to address an array.",
      "range": {
        "startLine": 56,
        "startChar": 18,
        "endLine": 56,
        "endChar": 23
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b755ce7_f96c342e",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2279dbf_c2cad673",
      "range": {
        "startLine": 56,
        "startChar": 18,
        "endLine": 56,
        "endChar": 23
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1c88581_ce93d034",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-15T17:09:14Z",
      "side": 1,
      "message": "nit: inputByteOffset, same for outputOffset.",
      "range": {
        "startLine": 60,
        "startChar": 69,
        "endLine": 60,
        "endChar": 80
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d30121ca_b4314e3d",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1c88581_ce93d034",
      "range": {
        "startLine": 60,
        "startChar": 69,
        "endLine": 60,
        "endChar": 80
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d2add1d_6d347ba2",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "unit: \" : \"",
      "range": {
        "startLine": 65,
        "startChar": 27,
        "endLine": 65,
        "endChar": 29
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d714dd8_89dedc1a",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 65,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d2add1d_6d347ba2",
      "range": {
        "startLine": 65,
        "startChar": 27,
        "endLine": 65,
        "endChar": 29
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1e7983_2aa0f48c",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 68,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-15T17:09:14Z",
      "side": 1,
      "message": "Write a zero and then return, which allows skipping all of [this].",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d928a20_560e18c7",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 68,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-16T04:49:10Z",
      "side": 1,
      "message": "This return just skip the invalid or unused timestamp, and don\u0027t modify the output value (in resolve buffer provided by user) at current outputIndex, maybe there is a existing value.",
      "parentUuid": "8f1e7983_2aa0f48c",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfc70617_f72790d1",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 68,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d928a20_560e18c7",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53bcaa75_a6fe328e",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 96,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-15T17:09:14Z",
      "side": 1,
      "message": "[this]",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ca1793a_9d7a1e7b",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 96,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "I think we still might need this code to find the reset point.\n\nHowever, can\u0027t this code walk backward starting from |inputIndex| instead going from 0 all the way to inputIndex? If inputIndex is large, we would be walking the entire input array.\n\nSecondly, this could potentially be improved if we have all threads look only at index i and i-1 to compute an array of 0\u0027s and 1\u0027s in shared memory that indicates whether a reset occured. Instead of one thread walking an entire range, all threads look only at two values. This would be much better for parallelism. We can\u0027t really use shared memory without barriers in WGSL yet, so perhaps leave this as a TODO.",
      "parentUuid": "53bcaa75_a6fe328e",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d214c989_f838589f",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 96,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-16T04:49:10Z",
      "side": 1,
      "message": "Yes, we need this block to find the reset point and reset it and its following values.\n\nI think there is no difference between starting from 0 or starting from |inputIndex|, becuase we are not sure where the reset happens, such as the following timestamps: [1, 3, 5, 7, 1, 3, 5, 7] (Continuously record the timestamp for several hours). For the slot 7, we need to walk half of input array, no matter where we start.\n\nFor improvement, how about store a reset index where the reset happens in storage memory, all thread only need to check whether current index is larger than reset index.",
      "parentUuid": "0ca1793a_9d7a1e7b",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a5a9918_2881cd19",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 96,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Discussed this reset logic with Corentin in bi-weekly meeting, and decided to remove it to make the shader simpler, and note users to take care of the timestamp results which may be reset.",
      "parentUuid": "d214c989_f838589f",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa191961_9da543f5",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 120,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "we should have a temp variable first and write out to output.t[outputIndex].y just once at the end. The code as it is now will probably actually write into the storage buffer twice which is more memory bandwidth than necessary.",
      "range": {
        "startLine": 115,
        "startChar": 20,
        "endLine": 120,
        "endChar": 39
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0cfc3a0_6e5a3fa9",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 120,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Add back the temp variable.",
      "parentUuid": "fa191961_9da543f5",
      "range": {
        "startLine": 115,
        "startChar": 20,
        "endLine": 120,
        "endChar": 39
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0723c32_6e6c3dcb",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 168,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "nit: prefer std::array",
      "range": {
        "startLine": 168,
        "startChar": 8,
        "endLine": 168,
        "endChar": 42
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f6d648f_2409b126",
        "filename": "src/dawn_native/QueryHelper.cpp",
        "patchSetId": 18
      },
      "lineNbr": 168,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0723c32_6e6c3dcb",
      "range": {
        "startLine": 168,
        "startChar": 8,
        "endLine": 168,
        "endChar": 42
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f11868d0_56f389ad",
        "filename": "src/dawn_native/QueryHelper.h",
        "patchSetId": 18
      },
      "lineNbr": 21,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "unit: newline above this",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40d0cf4b_f37a24ab",
        "filename": "src/dawn_native/QueryHelper.h",
        "patchSetId": 18
      },
      "lineNbr": 21,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f11868d0_56f389ad",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "735ef1bf_334e8ef3",
        "filename": "src/dawn_native/QueryHelper.h",
        "patchSetId": 18
      },
      "lineNbr": 25,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "nit: would prefer spelling this out as \"TimestampParams\"",
      "range": {
        "startLine": 25,
        "startChar": 11,
        "endLine": 25,
        "endChar": 19
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ea1b7d2_ebbd2af8",
        "filename": "src/dawn_native/QueryHelper.h",
        "patchSetId": 18
      },
      "lineNbr": 25,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "735ef1bf_334e8ef3",
      "range": {
        "startLine": 25,
        "startChar": 11,
        "endLine": 25,
        "endChar": 19
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28a92f21_496e5926",
        "filename": "src/dawn_native/QueryHelper.h",
        "patchSetId": 18
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "nit: This could have a more specific name like: EncodeConvertTimestampTicksToNanoseconds.\nSame for the name of the shader",
      "range": {
        "startLine": 32,
        "startChar": 9,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9937be2a_23f305b2",
        "filename": "src/dawn_native/QueryHelper.h",
        "patchSetId": 18
      },
      "lineNbr": 32,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "The timestamp is ticks on D3D12 and GPU counters on Vulkan and Metal, so update to  EncodeConvertTimestampsToNanoseconds.",
      "parentUuid": "28a92f21_496e5926",
      "range": {
        "startLine": 32,
        "startChar": 9,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ac4ce4_33b00c80",
        "filename": "src/tests/white_box/QueryInternalShaderTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "it would help to also describe here how the test tests this",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82cdf220_4de88780",
        "filename": "src/tests/white_box/QueryInternalShaderTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 59,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43ac4ce4_33b00c80",
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe308bb4_32e8b9e0",
        "filename": "src/tests/white_box/QueryInternalShaderTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 86,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-15T21:06:28Z",
      "side": 1,
      "message": "nit: a bit clearer to just use kTimestampCount",
      "range": {
        "startLine": 86,
        "startChar": 25,
        "endLine": 86,
        "endChar": 42
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8dcc491_315732ef",
        "filename": "src/tests/white_box/QueryInternalShaderTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 86,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2020-12-17T18:39:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe308bb4_32e8b9e0",
      "range": {
        "startLine": 86,
        "startChar": 25,
        "endLine": 86,
        "endChar": 42
      },
      "revId": "674420a291d21a401d75e89c9e141021d0c87ce3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}