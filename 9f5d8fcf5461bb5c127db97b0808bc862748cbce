{
  "comments": [
    {
      "key": {
        "uuid": "ca87ce79_80ad33c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 14,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-11T21:19:19Z",
      "side": 1,
      "message": "Please expand what you mean here by \"loading issues\".",
      "range": {
        "startLine": 14,
        "startChar": 40,
        "endLine": 14,
        "endChar": 54
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ae071e0_002262e7",
        "filename": "src/common/SystemUtils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 129,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-11T21:19:19Z",
      "side": 1,
      "message": "If the desire is to use a user-provided DXC compiler in the same directory as the rest of the Chromium DLLs, we should load it using the flags passed to LoadLibrary in LoadNativeLibraryHelper function in base/native_library_win.cc in the Chromium.src repository.\n\nUnless I am missing something, the code you have here will load it from the system32 directory, which I don\u0027t think is what you\u0027re after.",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 129,
        "endChar": 0
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f5c1692_c3c57c17",
        "filename": "src/common/SystemUtils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 130,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-11T21:19:19Z",
      "side": 1,
      "message": "Dawn coding convention prefers that lpFilename simply be named filename.",
      "range": {
        "startLine": 130,
        "startChar": 9,
        "endLine": 130,
        "endChar": 19
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc13016_23ef2c4b",
        "filename": "src/common/SystemUtils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 130,
      "author": {
        "id": 1000536
      },
      "writtenOn": "2020-05-13T14:39:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f5c1692_c3c57c17",
      "range": {
        "startLine": 130,
        "startChar": 9,
        "endLine": 130,
        "endChar": 19
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19a60572_1a3c5380",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-11T21:19:19Z",
      "side": 1,
      "message": "Please use the useDXC flag to avoid loading the two extra DLLs if the flag is false.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cc92df2_c8befd7f",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-11T21:29:21Z",
      "side": 1,
      "message": "Unfortunately, useDXC is a toggle which is exposed on the device. This gets loaded before device creation happens.",
      "parentUuid": "19a60572_1a3c5380",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5805e4b0_166ab76d",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-11T22:03:03Z",
      "side": 1,
      "message": "@Austin, is there another way we can avoid loading these libraries when we don\u0027t need them?",
      "parentUuid": "2cc92df2_c8befd7f",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd6778d9_77eb2af9",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-11T22:24:12Z",
      "side": 1,
      "message": "We could put it on the Instance, but that isn\u0027t really meant for backend-specific toggles. It\u0027s where we have global toggles like EnableBackendValidation.\n\nWhat\u0027s the concern about loading both? In Chromium, we\u0027ll have to load one of them before starting the GPU sandbox anyway, and then after starting the sandbox, these calls in Dawn should do nothing because it\u0027ll either be blocked or already in the library cache.",
      "parentUuid": "5805e4b0_166ab76d",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b28fd8e4_6972d21b",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-12T00:10:55Z",
      "side": 1,
      "message": "@Austin, the desire is to load as few DLLs as possible. We do not need either of these today so we shouldn\u0027t load them unless we have to. We have an existing, similar problem, with loading all of the Vulkan and Warp DLLs on Windows, all of which is completely unnecessary. \n\nToday, Dawn loads in the GPU process long after the sandbox has been applied ... with no issues. Unless I am missing something, I do not see how that is relevant to this discussion.\n\nIf avoiding these needless DLL loads is too much for Felix to tackle as part of this CL, we can do it as a separate work item. DXIL.DLL is one we\u0027ll need eventually so I am not overly concerned with loading that one before we need it.",
      "parentUuid": "cd6778d9_77eb2af9",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f2f23c5_2d6d19d6",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-12T00:52:09Z",
      "side": 1,
      "message": "I see. Perhaps I don\u0027t fully understand how the sandbox on Windows works then. For Vulkan it was necessary for us to load the Vulkan driver before starting the GPU sandbox, but perhaps this is not the case for Windows.\n\nIf we truly can load these DLLs whenever we want, then we could reasonably lazily do so on ShaderModule creation. We should double check that this actually works though. As far as I know, we still have the WebGPU CTS running on CI on Windows using \"--disable-gpu-sandbox\". Maybe that arg is out of date and running with the sandbox on now works.",
      "parentUuid": "b28fd8e4_6972d21b",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fc37805_7aeef7be",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-12T01:04:47Z",
      "side": 1,
      "message": "But regardless, I do think we can land this CL first before doing DLL loading optimization since that task will encompass a few other places as well. Right now we also always load WinPixEventRuntime.dll even if you\u0027re not debugging with PIX.",
      "parentUuid": "3f2f23c5_2d6d19d6",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a976a78_f878afb1",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000536
      },
      "writtenOn": "2020-05-12T07:05:11Z",
      "side": 1,
      "message": "@Rafael @Austin I\u0027m currently trying to get DXC/DXIL running in Chromium within Dawn and it seems that the sandbox prevents loading them (though loading works when doing --disable-gpu-sandbox).",
      "parentUuid": "1fc37805_7aeef7be",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71bba554_36f81398",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-12T17:35:25Z",
      "side": 1,
      "message": "@Felix which of the two DLLs is failing to work in the sandbox? If it is DXIL.dll, we\u0027ll need to address this sooner rather than later because we\u0027ll likely need it to do a SPIRV -\u003e DXIL translator.\n\n@Austin, loading WinPixEventRuntime unconditionally is also suboptimal and something we should address.\n\nI am fine with postponing the optimization to a later point.",
      "parentUuid": "0a976a78_f878afb1",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb2a9e6_115e1097",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-13T09:26:03Z",
      "side": 1,
      "message": "Until we need to ship something that relies on dxil.dll I don\u0027t think we should add to the list of things to load before the sandbox is set up. For Felix\u0027s experiment, he can do that in his Chromium fork and for Intel\u0027s prototyping with DXC we can use --disable-gpu-sandbox.\n\nNote that the two DLLs won\u0027t slow down Chrome because the sandbox will prevent them from being seen.",
      "parentUuid": "71bba554_36f81398",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78a28ff0_676d7c02",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000536
      },
      "writtenOn": "2020-05-13T14:39:07Z",
      "side": 1,
      "message": "@Rafael both are failing to load in sandbox. I think it would be better to remove my GetModuleDirectory method for now. Dawn and chromium can successfully load DXC and DXIL, only the node bindings fail without GetModuleDirectory.",
      "parentUuid": "8bb2a9e6_115e1097",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58a8e0a8_0d9d8375",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2020-05-13T17:04:21Z",
      "side": 1,
      "message": "@Felix, what do you mean when you say \"only the node bindings fail without GetModuleDirectory\"?  \n\n@Corentin, the sandbox is more than just about loading modules before it is applied; the module must be well behaved while it is in the sandbox. If it is not, then we\u0027ll need to either get dxil.dll fixed or potentially allow access for the operations it is attempting to do. I had to do a similar thing for https://chromium-review.googlesource.com/c/chromium/src/+/2123028.",
      "parentUuid": "78a28ff0_676d7c02",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffa35262_dadf2a9d",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-13T17:10:47Z",
      "side": 1,
      "message": "\u003e @Felix, what do you mean when you say \"only the node bindings fail without GetModuleDirectory\"?  \n\u003e \nThe GetModuleDirectory shenanigans where because the search path for DLLs starts with the executable directory, which is not where the dlls are for node-dawn. In Chromium though the DLLs are next to chromium.exe so there are no issues and we can just load \"dxil.dll\" or \"dxcompiler.dll\" and they will be found.\n\n\u003e @Corentin, the sandbox is more than just about loading modules before it is applied; the module must be well behaved while it is in the sandbox. If it is not, then we\u0027ll need to either get dxil.dll fixed or potentially allow access for the operations it is attempting to do. I had to do a similar thing for https://chromium-review.googlesource.com/c/chromium/src/+/2123028.\n\nOf course, the point was that we shouldn\u0027t start adding holes in the sandbox until we know we are going to need them. We know we are going to ship stuff using D3D12 and 11On12 (?) at some point, but we are not looking at shipping stuff that uses dxcompiler.dll (dxil.dll maybe). So I advised to not upstream modifications to Chrome\u0027s sandbox to enable that.",
      "parentUuid": "58a8e0a8_0d9d8375",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "9f5d8fcf5461bb5c127db97b0808bc862748cbce",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}