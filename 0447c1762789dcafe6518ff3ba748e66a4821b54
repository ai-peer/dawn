{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c4c0a8ab_dcddf64d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-09-12T07:46:19Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ca23f67_e5244685",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-12T09:08:08Z",
      "side": 1,
      "message": "Why do we need to create a buffer just to put it\u0027s base pointer and size in a DxcBuffer structure?",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edfb3469_4e2b7361",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-09-13T03:24:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ca23f67_e5244685",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd2b2cdb_1f51d4c4",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-12T09:08:08Z",
      "side": 1,
      "message": "Some of the pointers in this vector don\u0027t have static lifetime and if we start moving the vector around we could have use-after-frees. Any idea on how to make this a bit more robust?",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99e7787e_a743d9c9",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-09-13T03:24:19Z",
      "side": 1,
      "message": "Do you mean entryPointW and r.dxcShaderProfile?\n\nI thought the vector arguments is just a temporary variable and used here so I didn\u0027t consider it too much...",
      "parentUuid": "cd2b2cdb_1f51d4c4",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcad76f1_87f761f4",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2023-09-13T05:25:21Z",
      "side": 1,
      "message": "I just learned that it is recommended to use std::string_view instead of const std::string\u0026 for better performance, so I pass a std::wstring_view into GetDXCArguments().",
      "parentUuid": "99e7787e_a743d9c9",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5874b47_aa7e9c32",
        "filename": "src/dawn/native/d3d/ShaderUtils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-13T11:54:29Z",
      "side": 1,
      "message": "Sure we could use std::string_view, but here the issue is the pointers to the data of entryPointW and dxcShaderProfile as you guessed. Though maybe that\u0027s fine for such local use.",
      "parentUuid": "bcad76f1_87f761f4",
      "revId": "0447c1762789dcafe6518ff3ba748e66a4821b54",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}