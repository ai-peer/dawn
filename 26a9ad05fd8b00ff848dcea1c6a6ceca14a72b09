{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "73dd5af3_21952e36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-10-20T10:49:27Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53636df3_6dbe5154",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T11:38:33Z",
      "side": 1,
      "message": "LGTM",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fb3c5fd_45824612",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T11:38:33Z",
      "side": 1,
      "message": "nit: this is a bit scary because it isn\u0027t clear that the pointer to the PipelineBase* is the same as the pointer to the ComputePipelineBase* (for example this can change if PipelineBase* is the second inherited class). Can we reinterpret_cast\u003cWGPUComputePipeline\u003e(static_cast\u003cComputePipelineBase*\u003e(mPipeline))? It\u0027s a bit verbose but would prevent the problem outlined above.",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4fb0dba_39ffab5d",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-10-20T12:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fb3c5fd_45824612",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a35c994_d83fdf15",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-10-20T13:10:37Z",
      "side": 1,
      "message": "I\u0027ve used another way to implement this logic and I think it looks better now. What do you think?",
      "parentUuid": "b4fb0dba_39ffab5d",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "364bb7cd_29852207",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T13:19:01Z",
      "side": 1,
      "message": "Either way looks good!",
      "parentUuid": "9a35c994_d83fdf15",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b1aca02_1869d8c3",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-10-20T19:22:44Z",
      "side": 1,
      "message": "definitely prefer the current version without the reinterpret_cast\u0027ing",
      "parentUuid": "364bb7cd_29852207",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "147a6503_9cc9720d",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T11:38:33Z",
      "side": 1,
      "message": "ditto",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7a8bfa8_0e7aef0b",
        "filename": "src/dawn_native/CreateReadyPipelineTracker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-10-20T12:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "147a6503_9cc9720d",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a92d9187_910ca3ab",
        "filename": "src/dawn_wire/client/ClientDoers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-20T11:38:33Z",
      "side": 1,
      "message": "This should return the result of OnCreateReadyRenderPipelineCallback instead of unconditionally true. Right now the errors happening in OnCreateReadyRenderPipelineCallback are just ignored. Ditto for DoDeviceCreateReadyComputePipelineCallback",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a6aeb95_dcc0225e",
        "filename": "src/dawn_wire/client/ClientDoers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-10-20T12:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a92d9187_910ca3ab",
      "revId": "26a9ad05fd8b00ff848dcea1c6a6ceca14a72b09",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}