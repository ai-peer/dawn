{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dc77365c_6fc7979f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T13:29:42Z",
      "side": 1,
      "message": "I\u0027m not sure I understand why the DescriptorSetAllocator needs to outlive the layout, isn\u0027t it sufficient to set mDescriptorSetAllocator to nullptr in BGL::DestroyImpl?\n\nBut also I think we can keep the change as is if you want. In the future we\u0027re likely to have a reason to deduplicate DescriptorSetAllocators between multiple BGLs.",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35b6efef_ea503070",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T17:53:42Z",
      "side": 1,
      "message": "I think this should be okay as well. If it needed to be in the list of deferred allocation, that should have happened when BindGroupVk was destroyed.",
      "parentUuid": "dc77365c_6fc7979f",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b84f886d_9e427ee6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-12-08T18:46:18Z",
      "side": 1,
      "message": "```\nisn\u0027t it sufficient to set mDescriptorSetAllocator to nullptr in BGL::DestroyImpl\n```\nUnfortunately it is not because when the *::DestroyImpl functions all run in sequence before any Ticking can be done in the Device::Destroy function. The DescriptorSetAllocator\u0027s (DSA) dtor has an ASSERT that assumes Ticks have been ran so that memory has actually been released. So the DSA\u0027s dtor cannot be ran in BGL::DestroyImpl, and needs to be ran after. Running it after, however, means that the BGL may have already been destroyed and getting the Device is not safe anymore so we need the DSA to hold a pointer to the Device where it calls GetFencedDeleter.\n\n```\na reason to deduplicate DescriptorSetAllocators between multiple BGLs\n```\nRight, I saw the comment and thought this as well.",
      "parentUuid": "35b6efef_ea503070",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b846593_f652e60a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T19:09:42Z",
      "side": 1,
      "message": "the ASSERT will fire if there are pending deallocations\n\nIsn\u0027t it the case that if there are pending deallocations, then a BindGroupVk must have put a Ref\u003cDescriptorSetAllocator\u003e into mDescriptorAllocatorsPendingDeallocation, and thus, setting mDescriptorSetAllocator to null here should not actually destroy it, yet?",
      "parentUuid": "b84f886d_9e427ee6",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b59e637_db6f5a6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-12-08T19:18:31Z",
      "side": 1,
      "message": "Yep! That\u0027s what is happening. I was trying to address why we need to keep a mDevice (or just ObjectBase as parent class) here, and that\u0027s because when the DSA\u0027s dtor finally runs, it is definitely possible that mLayout has already been destroyed, so doing mLayout-\u003eGetDevice() isn\u0027t valid. So we save the device at ctor and use that instead.",
      "parentUuid": "1b846593_f652e60a",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f7beaa0_07c18e5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T13:29:42Z",
      "side": 1,
      "message": "LGTM",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "302df404_d077236d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T17:53:42Z",
      "side": 1,
      "message": "LGTM",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498d4a3a_e15e5daa",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 11
      },
      "lineNbr": 116,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T17:53:42Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 116,
        "endChar": 48
      },
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c2c2f85_c0aa4b4a",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.cpp",
        "patchSetId": 11
      },
      "lineNbr": 116,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-12-08T18:46:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "498d4a3a_e15e5daa",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 116,
        "endChar": 48
      },
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07c68186_41e65756",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.h",
        "patchSetId": 11
      },
      "lineNbr": 32,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T13:29:42Z",
      "side": 1,
      "message": "nit: Small preference to use Refcounted + mDevice. ObjectBase has a lot more functionality than just these two things and there\u0027s no precedent for using ObjectBase for non-API objects that I know of.",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b801d4d_d044acc9",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.h",
        "patchSetId": 11
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T17:53:42Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "07c68186_41e65756",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4165229c_0cce28c5",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.h",
        "patchSetId": 11
      },
      "lineNbr": 32,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-12-08T18:46:18Z",
      "side": 1,
      "message": "```\nObjectBase has a lot more functionality than just these two things\n```\nHmm, ObjectBase doesn\u0027t have THAT much more functionality? Maybe you are thinking about ApiObjectBase?\n\n\n```\nthere\u0027s no precedent for using ObjectBase for non-API objects that I know of\n```\nDepends on whether you consider AttachmentState to be API object. But I feel like the allocator feels pretty similar.\n\nI can change if you guys feel strongly about it though, this feels like it reuses what we already have.",
      "parentUuid": "9b801d4d_d044acc9",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c6c3a9b_38fd9b8a",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.h",
        "patchSetId": 11
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T19:09:42Z",
      "side": 1,
      "message": "oh right - seems fine to me",
      "parentUuid": "4165229c_0cce28c5",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b663d32e_48aee2be",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.h",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T17:53:42Z",
      "side": 1,
      "message": "should this be private now?",
      "range": {
        "startLine": 41,
        "startChar": 8,
        "endLine": 42,
        "endChar": 92
      },
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05b1869e_d9299658",
        "filename": "src/dawn_native/vulkan/DescriptorSetAllocator.h",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-12-08T18:46:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b663d32e_48aee2be",
      "range": {
        "startLine": 41,
        "startChar": 8,
        "endLine": 42,
        "endChar": 92
      },
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d30f4593_10fa08fb",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 234,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-08T13:29:42Z",
      "side": 1,
      "message": "nit: can we have a TODO + an issue to avoid adding redundant refs to the same DescriptorSetAllocator for the same ExecutionSerial?",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2577e305_c6935998",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 234,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-08T17:53:42Z",
      "side": 1,
      "message": "We already do that! at [1]",
      "parentUuid": "d30f4593_10fa08fb",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b248d348_5215a8b7",
        "filename": "src/dawn_native/vulkan/DeviceVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 234,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-12-08T18:46:18Z",
      "side": 1,
      "message": "Yup! Thanks Austin!",
      "parentUuid": "2577e305_c6935998",
      "revId": "9419a094063a858cccd763019c5584556c4aa636",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}