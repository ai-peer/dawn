{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bb5ed42f_ddc492ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-15T09:07:24Z",
      "side": 1,
      "message": "I\u0027m on the fence on this one. Rafael believes that making a null SRV is better for perf, but here we are introducing a bunch of additional branches in the hot path for D3D12. (texture barrier, srv creation, etc). Overall it seems we\u0027re adding complexity for 1) slower CPU side code and maybe 2) tiny gains on the GPU side.\n\nI don\u0027t think this is worth it. If Rafael disagrees, I\u0027m happy to argue. (though it will have to wait for quite some time).\n\nThe code LGTM in terms of correctness / readability otherwise.",
      "revId": "c5593133f0635f4a955222b68e924e50dd92e928",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d8644d1_0bcaeed6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-15T17:52:20Z",
      "side": 1,
      "message": "I\u0027ll let Rafael know.\n\nOne point I\u0027m aware of is the memory saved by not allocating the D3D12 resource. A 1x1x1 RGBA8 texture appears to be only 4 bytes, but I believe it\u0027s actually 4KB due to alignment requirements.",
      "parentUuid": "bb5ed42f_ddc492ae",
      "revId": "c5593133f0635f4a955222b68e924e50dd92e928",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "009f9717_ac511904",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-02-15T21:11:10Z",
      "side": 1,
      "message": "To add - the minimum page size for D3D is 64KB, which is non-negligible overhead for a 1x1x1 texture. In the absolute worst case scenario, Dawn\u0027s allocation scheme could require creating a 4MB heap for this texture. We must also consider the CPU cycles associated with each allocation.\n\nI\u0027ve been told that the overhead associated with what\u0027s stated above will be very apparent in a profile - so that\u0027s what I will plan to do when I have the time.",
      "parentUuid": "6d8644d1_0bcaeed6",
      "revId": "c5593133f0635f4a955222b68e924e50dd92e928",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9100c66_cd912b14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-02-17T05:36:06Z",
      "side": 1,
      "message": "I don\u0027t feel as strongly about this as Corentin, but it is indeed additional complexity without a clear promise of what it gives us.\n\nSo agreed, a profile would make sense and could be convincing. To that end, let\u0027s get this wired up in Chrome, tested, with zero-copy. And then, measure to evaluate performance.",
      "parentUuid": "009f9717_ac511904",
      "revId": "c5593133f0635f4a955222b68e924e50dd92e928",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "818df3c9_b853592f",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1588,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-02-15T09:07:24Z",
      "side": 1,
      "message": "nit: GetOrCreateDummyTexture? So we can cache it on the device.",
      "revId": "c5593133f0635f4a955222b68e924e50dd92e928",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}