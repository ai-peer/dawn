{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e46f4235_3b23b1a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-01-26T08:06:21Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "0e225953e89896c19151fdf874a6ff78eb7d7af2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33ad88be_64f148f8",
        "filename": "src/dawn/common/Overloaded.h",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-26T13:39:34Z",
      "side": 1,
      "message": "What about using Overloaded but to do:\n\n```\nMatchVariant(bindingInfo,\n   [\u0026](const Foo\u0026 foo) { something with foo},\n   [\u0026](const Bar\u0026 bar) { something with bar});\n```\n\nAlso it would be nice to support returning values from the MatchVariant if all functors return a value.\n\nAnd tests maybe? I know I\u0027m asking for a lot.",
      "revId": "0e225953e89896c19151fdf874a6ff78eb7d7af2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13daa071_7aeec30a",
        "filename": "src/dawn/common/Overloaded.h",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-01-29T10:02:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33ad88be_64f148f8",
      "revId": "0e225953e89896c19151fdf874a6ff78eb7d7af2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}