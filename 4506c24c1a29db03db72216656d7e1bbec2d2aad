{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "951124ac_34701cae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-02-15T15:55:47Z",
      "side": 1,
      "message": "EGL_KHR_fence_sync has 99%+ support according to gpuinfo.org, while EGL_KHR_reusable_sync is only 25%ish. Could we just rely on the former?",
      "revId": "4506c24c1a29db03db72216656d7e1bbec2d2aad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c24c07_a17fca6c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-15T20:49:53Z",
      "side": 1,
      "message": "when I tested in an earlier patchset, it wasn\u0027t available on gles nvidia, where we are running these tests",
      "parentUuid": "951124ac_34701cae",
      "revId": "4506c24c1a29db03db72216656d7e1bbec2d2aad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d576dba7_e5fce099",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-02-15T21:12:12Z",
      "side": 1,
      "message": "Oh, interesting. Perhaps because it went into core in 1.5?\n\nFrom https://registry.khronos.org/EGL/specs/eglspec.1.5.pdf, appendix F:\n\nClient API interoperability:\nâ€“ Sync objects representing events whose completion can be tested or\nwaited on. Such events include fences placed in client API command\nstreams (EGL_KHR_fence_sync) and events triggered by OpenCL\nevent objects (EGL_KHR_cl_event2), and the ability to wait for sync\nobjects in the server for a client API context, allowing application code\nto continue to execute in parallel (EGL_KHR_wait_sync).",
      "parentUuid": "17c24c07_a17fca6c",
      "revId": "4506c24c1a29db03db72216656d7e1bbec2d2aad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c6f286e_af6ab63f",
        "filename": "src/dawn/native/opengl/ContextEGL.cpp",
        "patchSetId": 10
      },
      "lineNbr": 81,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-02-15T15:55:47Z",
      "side": 1,
      "message": "Note that there is a risk in using strstr() to parse extension strings: if the extension name is a subset of another extension, it\u0027ll return a false positive. \n\nMy bad for introducing this anti-pattern, but perhaps it\u0027s a good time to introduce better parsing. We could do something like GLFW\u0027s _glfwStringInExtensionString, which ensures that the found string is correctly space-separated. There might be a more modern way of doing it using the standard library or ABSL.\n\nAlso, perhaps we could have an array of extensions we\u0027re interested in, and iterate over that rather than querying them individually.",
      "revId": "4506c24c1a29db03db72216656d7e1bbec2d2aad",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}