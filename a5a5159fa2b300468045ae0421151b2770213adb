{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ce3662ef_1a37d655",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T14:56:07Z",
      "side": 1,
      "message": "might be missing some context - why did we decide to not use VK_EXT_multisampled_render_to_single_sampled on Vulkan?\n\nthe docs say the extension is much more efficient on some hardware",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5283bc7f_549a1051",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-09T15:07:59Z",
      "side": 1,
      "message": "No we don\u0027t drop VK_EXT_multisampled_render_to_single_sampled. It\u0027s just that we don\u0027t need to implement MSAARenderToSingleSampled using 2 subpasses anymore. So I think we should drop the DawnMultisampleStateRenderToSingleSampled chained struct. That struct was originally intended for 2 subpasses implementation in vulkan where the render pipeline has to be compatible with the render pass with 2 subpasses.\n\nIn short:\n- DawnMultisampleStateRenderToSingleSampled will be implemented using VK_EXT_multisampled_render_to_single_sampled directly, there is no need for pipeline \u0026 render pass\u0027 compatibility anymore.\n- DawnLoadResolveTexture will be implemented in vulkan using 2 subpasses. And it needs pipeline compatibility info such as the new struct. Because VK_EXT_multisampled_render_to_single_sampled is not supported on all hardwares, so still need this feature implementation as an alternative.",
      "parentUuid": "ce3662ef_1a37d655",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25fee186_e629366f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-09T15:55:09Z",
      "side": 1,
      "message": "wow.. https://vulkan.gpuinfo.org/listfeaturesextensions.php?extension\u003dVK_EXT_multisampled_render_to_single_sampled\u0026platform\u003dandroid says it is supported on 3.82% of devices. that\u0027s really unfortunate.",
      "parentUuid": "5283bc7f_549a1051",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f191106_4a37d65f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-09T16:05:07Z",
      "side": 1,
      "message": "btw, I guess your original question is why don\u0027t we use VK_EXT_multisampled_render_to_single_sampled to implement DawnLoadResolveTexture.\n- first is that it is not available everywhere.\n- Second its semantics is not the same as DawnLoadResolveTexture. VK_EXT_multisampled_render_to_single_sampled is \"giving dawn a single sampled texture, expect it to use multimsapling transparently\". Whereas DawnLoadResolveTexture is about \"giving Dawn both single sampled texture and MSAA texture and expect single sampled texture to be copied to MSAA texture\". We could use VK_EXT_multisampled_render_to_single_sampled and completely ignore the MSAA texture provided but it would work incorrectly if they want to store the MSAA texture.",
      "parentUuid": "5283bc7f_549a1051",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22dfbc74_1a92ca46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-09T16:10:32Z",
      "side": 1,
      "message": "Well the second thing is not really an issue, I guess if VK_EXT_multisampled_render_to_single_sampled is used, we can just copy the resolve texture to MSAA texture at the end of the render pass if they want to store.",
      "parentUuid": "2f191106_4a37d65f",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a16e7539_f5db6d9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003806
      },
      "writtenOn": "2024-05-09T16:19:22Z",
      "side": 1,
      "message": "\u003e https://vulkan.gpuinfo.org/listfeaturesextensions.php?extension\u003dVK_EXT_multisampled_render_to_single_sampled\u0026platform\u003dandroid\n\nFWIW, gpuinfo shows reports from the dawn of time (before the ext existed), so percentages are not really that valid. Added to that is the fact that it takes Android drivers 1-2 years before an extension can come out (at best), it really means you should expect 2023+ phones to have the extension. Phones releasing now are all pretty much expected to have the extension.\n\n---\n\n\u003e giving Dawn both single sampled texture and MSAA texture and expect single sampled texture to be copied to MSAA texture\n\nThat\u0027s an unfortunately inefficient design. Modelling that around MSRTSS would have been much better for tilers.\n\nAnd as for IMRs, I believe it would actually be better to _not_ do MSRTSS and let MSAA data be stored and loaded directly (instead of copied from the single-sampled texture), with the single sampled texture simply being the resolve attachment. That would save you one copy (from single- to multi-sampled texture), since the driver is going to do that separately before loading the MSAA data anyway.",
      "parentUuid": "22dfbc74_1a92ca46",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d010a2f8_11d8c065",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-09T16:27:22Z",
      "side": 1,
      "message": "My \"very\" low end test android phone (samsung released last year) doesn\u0027t seem to have this extension.\n\n@syoussefi, we have two separate extensions: MSRTSS and DawnLoadResolveTexture. The latter is where client gives us both MSAA texture and resolve texture and expects the resolve texture to be loaded to MSAA texture. Note it is intended for those devices that don\u0027t support VK_EXT_multisampled_render_to_single_sampled including other backends (metal, d3d, etc) and skia wants to control the MSAA texture allocations.\n\nThe former MSAARTSS extension is still around, and it will utilise VK_EXT_multisampled_render_to_single_sampled.",
      "parentUuid": "a16e7539_f5db6d9c",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dddf4f6_fb2a5eee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-09T16:45:03Z",
      "side": 1,
      "message": "btw, my lowend device is samsung A05s. Released last year. It has Adreno 610 GPU. Weird that it doesn\u0027t support VK_EXT_multisampled_render_to_single_sampled.",
      "parentUuid": "d010a2f8_11d8c065",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36e504d9_45de7373",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003806
      },
      "writtenOn": "2024-05-09T17:18:02Z",
      "side": 1,
      "message": "\u003e Note it is intended for those devices that don\u0027t support VK_EXT_multisampled_render_to_single_sampled including other backends (metal, d3d, etc) and skia wants to control the MSAA texture allocations.\n\nWhat I was trying to get at is that for IMRs, you\u0027re better off _not_ doing an \"unresolve\". I guess if WebGPU already allows that path, it\u0027s up to Skia and others to choose to use `DawnLoadResolveTexture` or not",
      "parentUuid": "4dddf4f6_fb2a5eee",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8eaf2687_f4706815",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-09T17:59:30Z",
      "side": 1,
      "message": "Chrome has been using DMSAA feature for awhile to save memory on various platforms. This feature is basically reusing MSAA textures and load from/store to resolve textures.",
      "parentUuid": "36e504d9_45de7373",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4996c3a_f020f036",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-10T16:13:36Z",
      "side": 1,
      "message": "btw, even if VK_EXT_multisampled_render_to_single_sampled is/will be prominent on android, there are other platforms also using Vulkan such as linux, chromeos. Skia team is using 2 subpasses to implement \"load resolve texture\" on those in their vulkan backend. And they would be upset if Dawn backend doesn\u0027t support equivalent functionality. I think adding this extra \"DawnMultisampleResolveState\" requirement to DawnLoadResolveTexture is no harm.",
      "parentUuid": "8eaf2687_f4706815",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ae49222_84996ea5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-10T18:00:03Z",
      "side": 1,
      "message": "admittedly, I still think we could have done a much better job of recycling textures in the previous extension which emulates VK_EXT_multisampled_render_to_single_sampled - but I won\u0027t block progress here so LGTM. We\u0027re ultimately ending up with two separate features for accomplishing the same thing - only difference is who manages the memory.",
      "parentUuid": "e4996c3a_f020f036",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9241e0c_7294ad3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T13:55:42Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ae10572_b9a1d674",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-12T17:58:46Z",
      "side": 1,
      "message": "I understand the thinking. I admit the memory recycling could have been done better But for a while we only used that feature with memoryless textures, hence the need for proper memory reclycing wasn\u0027t really prioritized. If we had implemented a memory recycling, skia still would have wanted some controls of it (via memory report, cache eviction, budget control, etc). That seems like it\u0027s better to give them total control like DawnLoadResolveTexture instead.\n\nThe former DawnMultisampleResolveState should be true like VK_EXT_multisampled_render_to_single_sampled. i.e no extra memory is needed (even hidden one in Dawn).",
      "parentUuid": "2ae49222_84996ea5",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a7a7e2a_b7f0fd34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-12T18:01:21Z",
      "side": 1,
      "message": "Edit: I meant the MSAARenderToSingleSampled feature should be true to VK_EXT_multisampled_render_to_single_sampled, no extra memory needed.",
      "parentUuid": "0ae10572_b9a1d674",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c8a4af_dd565239",
        "filename": "docs/dawn/features/dawn_load_resolve_texture.md",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-05-10T18:00:03Z",
      "side": 1,
      "message": "I think the struct name should be something like:\n\n`MultisampleStateExpandResolveTextureDawn` with a single `enabled` boolean.\n - `DawnMultisampleResolveState` seems like it could have other types of things inside. Not sure if you\u0027re expecting that, but I think they would likely need to be separate ext structs\n - See https://github.com/webgpu-native/webgpu-headers/pull/270 about naming, but we decided implementations should use suffixes, not prefixes. It means we should also add _Dawn suffixes to the new enums, eventually\n - single `enabled` boolean is fine - unless you expect to add other members here?\n \n \nThat said, did you consider chaining the extension struct on the color target state instead? This may be more appropriate since the load from resolve texture happens per-color target",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 269
      },
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b9d0118_996fae9f",
        "filename": "docs/dawn/features/dawn_load_resolve_texture.md",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-12T17:58:46Z",
      "side": 1,
      "message": "Having an extension struct on the color target state would also work. But do you think it is necessary? For vulkan\u0027s implementation, the relevant information the render pipeline needs to decide is whether the main subpass is 0 or 1. That can be deduced from a single extension struct telling the render pass has expand load op or not.\n\nFor other backend, this struct is not used at all. Unless we envision a future graphics api where we have to implement in an unconventional way.",
      "parentUuid": "56c8a4af_dd565239",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 269
      },
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eea81a4_6c5b4397",
        "filename": "docs/dawn/features/dawn_load_resolve_texture.md",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-13T18:13:15Z",
      "side": 1,
      "message": "Done changing to `MultisampleStateExpandResolveTextureDawn`.",
      "parentUuid": "0b9d0118_996fae9f",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 269
      },
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "920366a4_eb615d0a",
        "filename": "docs/dawn/features/dawn_load_resolve_texture.md",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-14T12:25:44Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3eea81a4_6c5b4397",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 269
      },
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0efa35e_984b60a7",
        "filename": "docs/dawn/features/dawn_load_resolve_texture.md",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-15T16:40:24Z",
      "side": 1,
      "message": "I think I was wrong about MultisampleStateExpandResolveTextureDawn chained struct to MultisampleState. It should be per color target as you said, because in vulkan at pipeline creation, we need to know exactly which attachment uses ExpandResolveTexture in order to query the correct render pass having appropriate input attachments.\n\nI will create a CL to change the chained struct to per color target. Luckily skia hasn\u0027t used it yet.",
      "parentUuid": "920366a4_eb615d0a",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 269
      },
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1cac948_b2d7ca28",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 3330,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T13:55:42Z",
      "side": 1,
      "message": "This is deprecated, but as far as I can see in this CL, the support is not 100% removed yet and backend still advertise the feature. Maybe we could remove the Feature as well so that Graphite stops using code that becomes untested and unvalidated?",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "406d5448_d3e37c15",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 3330,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-12T17:58:46Z",
      "side": 1,
      "message": "The MSAARenderToSingleSampled feature is not deprecated, only the render pipeline\u0027s extension struct `DawnMultisampleStateRenderToSingleSampled` is being deprecated. Since I don\u0027t see it\u0027s being needed anymore. We don\u0027t need to implement MSAARenderToSingleSampled using 2 subpasses in vulkan. Note: the `MSAARenderToSingleSampled` feature is no longer advertised by any backend currently. Graphite still has code using it. Skia team prefer to keep it so that they can use the real VK_EXT_multisampled_render_to_single_sampled in vulkan once it is implemented in that backend.\n\nI would prefer deprecating the code in Dawn first before removing the using code from Graphite. Since otherwise, if we remove the deprecated struct immediately now, this CL won\u0027t be able to be rolled into Chromium or Skia repo due to compilation errors.",
      "parentUuid": "d1cac948_b2d7ca28",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a1c3ff3_5bebe2de",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 1
      },
      "lineNbr": 3330,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-14T12:25:44Z",
      "side": 1,
      "message": "Ok makes sense to remove as a follow-up when the code is removed from Skia.",
      "parentUuid": "406d5448_d3e37c15",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b7dcd05_17a11178",
        "filename": "src/dawn/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1590,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-11T13:55:42Z",
      "side": 1,
      "message": "Maybe we could also have a test with two color attachments and only the second one is expanded. This would require addressing Austin\u0027s comment about the extension being better inside the ColorState.",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a6293cb_db79bafb",
        "filename": "src/dawn/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1590,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2024-05-12T17:58:46Z",
      "side": 1,
      "message": "Currently the feature spec only allows one attachment with ExpandResolveTexture load op to make the implementation simple for now. There is already a test that verifies only one attachment is allowed. We might expand the support to multiple attachments in future.\n\nBtw, I think having the Expand load op in first or last attachment won\u0027t matter for a render pipeline. For render pipeline\u0027s compatibility, only important thing to decide is its subpass being 0 or 1 (which can be deduced by a binary flag telling the render pass has expand load op in any attachment or not).",
      "parentUuid": "1b7dcd05_17a11178",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc0cd6b5_089bf70b",
        "filename": "src/dawn/tests/end2end/MultisampledRenderingTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1590,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-05-14T12:25:44Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7a6293cb_db79bafb",
      "revId": "a5a5159fa2b300468045ae0421151b2770213adb",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}