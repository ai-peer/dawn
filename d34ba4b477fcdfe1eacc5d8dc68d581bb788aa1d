{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0fb530b1_30adbced",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-11T10:58:28Z",
      "side": 1,
      "message": "PTAL",
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31c3d8d5_d39f13b7",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-09-11T14:27:08Z",
      "side": 1,
      "message": "FYI, I found Map() d3d11 buffer could be expensive. Map() call will sync with GPU. Maybe we should always use system memory for staging dawn buffers, and use UpdateSubResource() as much as possible.\n\nhttps://gamedev.stackexchange.com/questions/60668/how-to-use-updatesubresource-and-map-unmap",
      "range": {
        "startLine": 56,
        "startChar": 15,
        "endLine": 56,
        "endChar": 34
      },
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5967929b_fa517b7d",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-12T12:42:54Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "31c3d8d5_d39f13b7",
      "range": {
        "startLine": 56,
        "startChar": 15,
        "endLine": 56,
        "endChar": 34
      },
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d75ea522_f306d6f8",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 495,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-11T13:35:56Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 495,
        "endChar": 0
      },
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9a4327c_13a46c96",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-09-11T14:27:08Z",
      "side": 1,
      "message": "Does motionmark hit the restrictions of UpdateSubresource(). How about only create and use the stage buffer if it is really needed?",
      "range": {
        "startLine": 535,
        "startChar": 37,
        "endLine": 536,
        "endChar": 59
      },
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc2047d3_0facb199",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-12T12:42:54Z",
      "side": 1,
      "message": "Fortunately the MotionMark Design case mostly involves full range buffer writes, which are suitable to use UpdateSubresource(). With this improvement, Buffer::Write no longer exists in the hotspots.\n\n```\nFunction Name\tTotal CPU [unit, %]\tSelf CPU [unit, %]\tModule\tCategory\n| + dawn::native::d3d11::Queue::SubmitImpl\t2336 (60.22%)\t0 (0.00%)\tchrome\tIO | Kernel\n|| + dawn::native::d3d11::CommandBuffer::Execute\t2315 (59.68%)\t4 (0.10%)\tchrome\tIO | Kernel\n||| - dawn::native::d3d11::CommandBuffer::ExecuteRenderPass\t1239 (31.94%)\t3 (0.08%)\tchrome\tIO | Kernel\n||| - dawn::native::d3d11::Buffer::Write\t885 (22.82%)\t0 (0.00%)\tchrome\tKernel\n||| - dawn::native::d3d11::Texture::Copy\t127 (3.27%)\t0 (0.00%)\tchrome\tIO\n||| - dawn::native::d3d11::Buffer::Copy\t26 (0.67%)\t0 (0.00%)\tchrome\t\n||| - dawn::native::d3d11::Texture::Write\t14 (0.36%)\t0 (0.00%)\tchrome\t\n\n```\n\n\n```\n\nFunction Name\tTotal CPU [unit, %]\tSelf CPU [unit, %]\tModule\tCategory\n| + dawn::native::d3d11::Queue::SubmitImpl\t2058 (34.20%)\t1 (0.02%)\tchrome\tKernel\n|| + dawn::native::d3d11::CommandBuffer::Execute\t2009 (33.39%)\t4 (0.07%)\tchrome\tKernel\n||| + dawn::native::d3d11::CommandBuffer::ExecuteRenderPass\t1664 (27.65%)\t2 (0.03%)\tchrome\tKernel\n|||| - dawn::native::d3d11::CommandBuffer::ExecuteRenderPass::\u003clambda_2\u003e::operator()\t788 (13.10%)\t1 (0.02%)\tchrome\tKernel\n|||| - dawn::native::d3d11::BindGroupTracker::~BindGroupTracker\t643 (10.69%)\t17 (0.28%)\tchrome\tKernel\n|||| - dawn::native::d3d11::TextureView::CreateD3D11RenderTargetView\t70 (1.16%)\t2 (0.03%)\tchrome\t\n|||| - dawn::native::d3d11::TextureView::CreateD3D11DepthStencilView\t61 (1.01%)\t2 (0.03%)\tchrome\tKernel\n```",
      "parentUuid": "e9a4327c_13a46c96",
      "range": {
        "startLine": 535,
        "startChar": 37,
        "endLine": 536,
        "endChar": 59
      },
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07c1cb40_6e950c6d",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-09-12T14:37:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "fc2047d3_0facb199",
      "range": {
        "startLine": 535,
        "startChar": 37,
        "endLine": 536,
        "endChar": 59
      },
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bd08cc8_be95b651",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 537,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-11T11:59:12Z",
      "side": 1,
      "message": "Can\u0027t we use the DynamicUploader?",
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22622d50_0514b650",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 537,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-11T13:35:56Z",
      "side": 1,
      "message": "D3D11 cannot invoke CopySubresourceRegion while a Subresource of the source is mapped. For one common staging buffer, ScopeMap [1] ensures the map/unmap pair to work as expected for each write.\nHowever, in case of DynamicUploader, it assumes the staging buffers should be always mapped, and one staging buffer can be shared by many allocates. So it\u0027s kind of unclear how we can keep map/unmap state in pair.\nBTW, the one common staging buffer is simple and effective enough to the address the problem.",
      "parentUuid": "4bd08cc8_be95b651",
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b006b16c_275687b2",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 537,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-12T12:42:54Z",
      "side": 1,
      "message": "Let\u0027s see if this staging buffer issue will come up in other cases. For now, UpdateSubresource() is good enough.",
      "parentUuid": "22622d50_0514b650",
      "revId": "d34ba4b477fcdfe1eacc5d8dc68d581bb788aa1d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}