{
  "comments": [
    {
      "key": {
        "uuid": "cb1861c4_97e9dddd",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 9
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "LazyClearResourceOnFirstUse should be the toggle, and tests should use DeviceDescriptor.forceDisableWorkarounds to opt-out.",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0b1a7d2_f7b41c0f",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 9
      },
      "lineNbr": 85,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "How would we default the toggle to be enabled? I thought we wanted a toggle that allowed us to opt out, meaning we wanted lazy clear to be the default behavior. I could set the toggle here: https://cs.chromium.org/chromium/src/third_party/dawn/src/dawn_native/Device.cpp?l\u003d407\u0026rcl\u003db632bc58ed373eb2020af65e0fdeaf07d46d1a9c, and if it\u0027s disabled, it\u0027ll get set to false in the loop otherwise it\u0027ll stay true.\n\nI added those changes, and a param for ForcedWorkarounds to include the disabled toggles",
      "parentUuid": "cb1861c4_97e9dddd",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fe68572_0a9c488f",
        "filename": "src/dawn_native/Instance.cpp",
        "patchSetId": 9
      },
      "lineNbr": 85,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-06T17:41:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0b1a7d2_f7b41c0f",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f7b2b5e_afb8f0ef",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 335,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "nit: we\u0027ll need to make sure this doesn\u0027t overflow uint32_t. It is unlikely but we need to be safe. We could have a static_assert with kMaxTexture2DArrayLayers and kMaxTexture2DMipLevels when we have them.",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d16d216_2cfc1c2f",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 335,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "is this a todo as we wait for max layers and levels to be defined?",
      "parentUuid": "0f7b2b5e_afb8f0ef",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4078e83d_e0a5246d",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 335,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-05T00:12:57Z",
      "side": 1,
      "message": "We actually already discussed the limits at the F2F:\nhttps://docs.google.com/document/d/1HR9vPk48-lhzHAsyF57QzjKMmi0gQHfSXMmyqZuFWkc/edit#heading\u003dh.b0mn8bdz63vs\n\nSo you can go ahead and add the constants in if you want.\n\nMax array layers: 256\nMax texture size: 8192\nMax mip levels: log2(max texture size) + 1.\n\nI think the static_assert should be inside GetSubresourceIndex.",
      "parentUuid": "5d16d216_2cfc1c2f",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8d0ffd1_38ff167f",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 335,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-06T17:41:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4078e83d_e0a5246d",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e4677c4_397bb21c",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 395,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "nit: let\u0027s not use bounds checking that could produce exception, use operator[] instead. We can have asserts that the arguments are in range though.",
      "range": {
        "startLine": 395,
        "startChar": 61,
        "endLine": 395,
        "endChar": 63
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "247055ee_0583f788",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 395,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e4677c4_397bb21c",
      "range": {
        "startLine": 395,
        "startChar": 61,
        "endLine": 395,
        "endChar": 63
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "267e5ab3_c8ea7d6f",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "Can we have a TODO that this should be using a more optimized data-structure at some point? Right now it uses a lot of space and an extra allocation when the resource is completely initialized for example.",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d59a70a9_e8f85d23",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-03T22:49:27Z",
      "side": 1,
      "message": "I was talking to Rafael about this this morning. I suggested this because std::vector\u003cbool\u003e is apparently the only STL way to do this. Depending on implementation, it is allowed to be implemented as a bitset, but I don\u0027t know if we want to rely on that.\nhttps://en.cppreference.com/w/cpp/container/vector_bool\n\nHowever, if there\u0027s a reasonably-sized static cap, we could just use std::bitset (how big is max level count * max layer count? probably too big). Otherwise a TODO is fine. (Maybe to fix this later we could make a simple class that wraps std::vector\u003cstd::bitset\u003c\u003e\u003e?)",
      "parentUuid": "267e5ab3_c8ea7d6f",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d11bb65_80be72a3",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-04T10:03:12Z",
      "side": 1,
      "message": "I was actually thinking that this should be a hierarchical data structure with a very small memory footprint for the common case where the whole structure is initialized. But a TODO is fine.",
      "parentUuid": "d59a70a9_e8f85d23",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d76470c5_843a9d78",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-04T18:27:16Z",
      "side": 1,
      "message": "Ah, good idea.",
      "parentUuid": "8d11bb65_80be72a3",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "193b0511_860e760e",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "could we use a hash data structure, and only insert the index when that subresource has been initialized. And if an index is not found, we can assume it\u0027s uninitialized. This would save space and only track subresources we care about/use. or do we want to stay away from hashing because of scattered memory? I heard we usually shy away from hashing. \nRafael also found this bit_vector class that we could possibly use? https://cs.chromium.org/chromium/src/third_party/SPIRV-Tools/src/source/util/bit_vector.h\n\nI can still leave this as a todo.",
      "parentUuid": "8d11bb65_80be72a3",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ec0eb01_b76b6bcb",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-06-05T00:03:19Z",
      "side": 1,
      "message": "Perhaps a simple data structure could be a combination of an enum and boolean maintained by helper functions. Values of the enum could be \u0027Initialized\u0027, \u0027Uninitialized\u0027, \u0027SeeBitVector\u0027.  Setting to anything but \u0027SeeBitVector\u0027 would, of course, clear the vector.",
      "parentUuid": "193b0511_860e760e",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90582250_18826757",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-05T00:12:57Z",
      "side": 1,
      "message": "Yeah, I think we should avoid hashing for that reason.\n\nbit_vector would be nice but I assume it\u0027s not a stable API of SPIRV-Tools, so we would probably want to make a copy of it.\n\nIMO, let\u0027s leave as TODO since there are so many possibilities here. (As an aside, I had a silly idea:\n\n  enum class FullyInitialized;\n  enum class FullyUninitialized;\n  std::variant\u003cFullyInitialized, FullyUninitialized, std::vector\u003cbool\u003e\u003e mWhatever;\n\n. But agreed that it should be factored out into a tiny helper class.)",
      "parentUuid": "193b0511_860e760e",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa2d0d8b_ae33fcd2",
        "filename": "src/dawn_native/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-06T17:41:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90582250_18826757",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0f3cd25_c6065e74",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "I think this and GetLayerCount should be 1, because the code will need to change if we support layered rendering to handle the case where only some of the layers are initialized. (we\u0027d need to clear before the render pass instead of doing loadOp::Clear for all of them)",
      "range": {
        "startLine": 181,
        "startChar": 28,
        "endLine": 181,
        "endChar": 64
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f6eef5_3a774823",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 181,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0f3cd25_c6065e74",
      "range": {
        "startLine": 181,
        "startChar": 28,
        "endLine": 181,
        "endChar": 64
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5026d216_388ec69d",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 309,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "This should be before the TransitionUsageNow because it can modify the layout of the texture, and the initialization also need to be made available to the inside of the render pass.",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 309,
        "endChar": 91
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85d7d669_0ed274cb",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 309,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5026d216_388ec69d",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 309,
        "endChar": 91
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "036b5568_ed1d67e9",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 364,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "this is always 1",
      "range": {
        "startLine": 364,
        "startChar": 68,
        "endLine": 364,
        "endChar": 90
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5af91914_f6f8fac9",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 364,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "This should only be the case if the whole subresource has been written to. Otherwise we still need to initialize before doing the copy.",
      "range": {
        "startLine": 361,
        "startChar": 7,
        "endLine": 364,
        "endChar": 92
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d89deac_31692ac7",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 364,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "036b5568_ed1d67e9",
      "range": {
        "startLine": 364,
        "startChar": 68,
        "endLine": 364,
        "endChar": 90
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58c705ac_b34a7a24",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 364,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5af91914_f6f8fac9",
      "range": {
        "startLine": 361,
        "startChar": 7,
        "endLine": 364,
        "endChar": 92
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8a40fd6_8947a6e8",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 379,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "this is always 1",
      "range": {
        "startLine": 379,
        "startChar": 62,
        "endLine": 379,
        "endChar": 84
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "803acaaa_f2f2c436",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 379,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8a40fd6_8947a6e8",
      "range": {
        "startLine": 379,
        "startChar": 62,
        "endLine": 379,
        "endChar": 84
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2df4b9de_8d3bd15c",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 409,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 409,
        "startChar": 62,
        "endLine": 409,
        "endChar": 87
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0d96ca6_15799e67",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 409,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2df4b9de_8d3bd15c",
      "range": {
        "startLine": 409,
        "startChar": 62,
        "endLine": 409,
        "endChar": 87
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f724c407_6ba1d011",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 422,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "ditto, this should be done only if the whole subresource is written to, otherwise we need to EnsureSubResourceContentInitialized prior to doing the copy.",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d2e5439_3074f785",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 422,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f724c407_6ba1d011",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "795f3291_dc8e0911",
        "filename": "src/dawn_native/vulkan/TextureVk.h",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "nit: this could be a private member function.",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60ba14a0_25cdd3f5",
        "filename": "src/dawn_native/vulkan/TextureVk.h",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "795f3291_dc8e0911",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3241a97a_d5c62ffb",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "This checks mip level 2 is filled with zeros but that one hasn\u0027t been renderered to so this will only check the CopyTextureToBuffer path. Can we check mip level 0 instead?",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f46e7605_438f68af",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3241a97a_d5c62ffb",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c52e23d_33545dae",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "nit: kArrayLayers.",
      "range": {
        "startLine": 89,
        "startChar": 23,
        "endLine": 89,
        "endChar": 34
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7041c7c1_6f05b084",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 89,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c52e23d_33545dae",
      "range": {
        "startLine": 89,
        "startChar": 23,
        "endLine": 89,
        "endChar": 34
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cef5ec2b_2a28bc87",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "ditto but for array layers",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d0ec7e7_a657f1aa",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cef5ec2b_2a28bc87",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88a9fa31_c8128500",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 142,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "or just pass 100 in the vector constructor.",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 142,
        "endChar": 6
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d84e78b_2f3c5fc4",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 142,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88a9fa31_c8128500",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 142,
        "endChar": 6
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1293fb24_02e342b2",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 147,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "Can we also have a test for a copy only to a subset of the subresource?",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3a97d60_bfa4bf31",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 147,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1293fb24_02e342b2",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2a8a84e_ded17a71",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 149,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "nit: weird formatting",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d45671_864da9c2",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 149,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2a8a84e_ded17a71",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3447a498_c598866f",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 195,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "Can we also have a test only for a subset of the subresource?",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f195630_0d084019",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 195,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-06T17:41:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3447a498_c598866f",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cde8fda_69afe68b",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 198,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "nit: weird formatting",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9d3cc5a_3f830381",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 198,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cde8fda_69afe68b",
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41016555_6bb04031",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 206,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-03T12:55:09Z",
      "side": 1,
      "message": "This can be done as a vector constructor, here and in other places in this file.",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 206,
        "endChar": 6
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c683c75a_0a184df2",
        "filename": "src/tests/end2end/TextureResetTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 206,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-04T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41016555_6bb04031",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 206,
        "endChar": 6
      },
      "revId": "bf4d43ab22bb301dceb1f9de52bc3e8487584570",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}