{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0a978eb8_e49c1ae9",
        "filename": "src/dawn/native/BindGroupLayoutInternal.cpp",
        "patchSetId": 18
      },
      "lineNbr": 362,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-02T17:04:39Z",
      "side": 1,
      "message": "[5]",
      "revId": "97ea9a4652dae901e2470b8493d8ca07264b91ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c38cb30_d1133f40",
        "filename": "src/dawn/native/BindGroupLayoutInternal.cpp",
        "patchSetId": 18
      },
      "lineNbr": 565,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-02T17:04:39Z",
      "side": 1,
      "message": "[6]",
      "range": {
        "startLine": 556,
        "startChar": 0,
        "endLine": 565,
        "endChar": 0
      },
      "revId": "97ea9a4652dae901e2470b8493d8ca07264b91ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "966a5045_17f76855",
        "filename": "src/dawn/tests/unittests/validation/ObjectCachingTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 145,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-02T17:04:39Z",
      "side": 1,
      "message": "nit: you probably meant to say `otherBinding.binding \u003d 0;`\n\nbut also, you brace-initialized `otherBinding`, so it should already be 0. (same for `binding`).",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 145,
        "endChar": 24
      },
      "revId": "97ea9a4652dae901e2470b8493d8ca07264b91ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f22c4402_e170e785",
        "filename": "src/dawn/tests/unittests/validation/ObjectCachingTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 161,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2024-04-02T11:54:44Z",
      "side": 1,
      "message": "Hmm, this check is failing on the Win-MSVC bots [1]. AFAICT both D3D11 and D3D12 have distinct address modes for ClampToEdge and Repeat [1][2], and if I\u0027m reading the code correctly, the `BindGroupLayoutEq()` check should take this into account [4]. Austin/Corentin: Do you see anything I\u0027m missing?\n\n[1] https://logs.chromium.org/logs/dawn/buildbucket/cr-buildbucket/8751778121630703649/+/u/Run_the_Dawn_unittests/stdout\n[2] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d11/SamplerD3D11.cpp;l\u003d42?q\u003dD3D11TextureAddressMode\u0026ss\u003dchromium\n[3] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/SamplerD3D12.cpp;l\u003d38-47?q\u003dSamplerD3D12.\u0026ss\u003dchromium\n[4] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/Sampler.cpp;l\u003d143?q\u003dSampler.cpp\u0026ss\u003dchromium",
      "revId": "97ea9a4652dae901e2470b8493d8ca07264b91ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a20006_c2a3e406",
        "filename": "src/dawn/tests/unittests/validation/ObjectCachingTests.cpp",
        "patchSetId": 18
      },
      "lineNbr": 161,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-04-02T17:04:39Z",
      "side": 1,
      "message": "I looked at this for a bit and didn\u0027t see anything :-/\n\nAddress modes in the backend shouldn\u0027t matter for the cache. What matters is the frontend state.\n\nI\u0027d start making sure:\n - `staticSamplerBinding.sampler` and `otherStaticSamplerBinding.sampler` are indeed distinct\n - start logging the hashes in `GetOrCreateBindGroupLayout` and the comparisons downstream of BindGroupLayoutInternalBase::IsLayoutEqual. If you\u0027re getting a hash conflict, then surely the comparison at [5] _should_ return true if the samplers are different.\n - verify the unpacked bindings preserve the sampler in the chained struct.\n   Notably, at [6], we first ExtractAndExpandBglEntries, then sort them, then call CreateBindGroupLayoutInfo on those sorted entries to build mBindingInfo. Maybe something is getting lost..?",
      "parentUuid": "f22c4402_e170e785",
      "revId": "97ea9a4652dae901e2470b8493d8ca07264b91ba",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}