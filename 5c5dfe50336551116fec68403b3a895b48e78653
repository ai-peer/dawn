{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ea9a2046_f70fb602",
        "filename": "src/tint/writer/msl/generator_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 837,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-06-01T22:32:17Z",
      "side": 1,
      "message": "I don\u0027t think this quite works, because we need a different struct definition for each integer type, whereas the helper function is only unique over address spaces. Can you add some calls to the i32 overload to the test to check please?\n\nProbably worth also having it test using both storage classes in the same module too, since we likely don\u0027t have any other test coverage for that either.",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 837,
        "endChar": 17
      },
      "revId": "5c5dfe50336551116fec68403b3a895b48e78653",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97449807_10a77bcc",
        "filename": "src/tint/writer/msl/generator_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 837,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-06-01T23:08:43Z",
      "side": 1,
      "message": "Yes, you\u0027re right. It works fine for GLSL since we use the sem::Struct* to uniquely create these. I\u0027ll fix up the code. Good catch!",
      "parentUuid": "ea9a2046_f70fb602",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 837,
        "endChar": 17
      },
      "revId": "5c5dfe50336551116fec68403b3a895b48e78653",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb244f6_af102a6f",
        "filename": "src/tint/writer/msl/generator_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 837,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-06-01T23:24:43Z",
      "side": 1,
      "message": "The `sem::Builtin` pointer is guaranteed to be stable / unique for each overload (name + parameter type list + return type): https://dawn.googlesource.com/dawn/+/refs/heads/main/src/tint/resolver/intrinsic_table.cc#1092\n\nThis guarantee was made to simplify this sort of thing in the backends",
      "parentUuid": "97449807_10a77bcc",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 837,
        "endChar": 17
      },
      "revId": "5c5dfe50336551116fec68403b3a895b48e78653",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "265df8f0_6d8d2c8b",
        "filename": "src/tint/writer/msl/generator_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 837,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-06-02T15:43:18Z",
      "side": 1,
      "message": "Updated the test and fixed the backends to do the right thing. MSL needs to key on both the storage class and the returned struct type.",
      "parentUuid": "fdb244f6_af102a6f",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 837,
        "endChar": 17
      },
      "revId": "5c5dfe50336551116fec68403b3a895b48e78653",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a48e01_a90d38e6",
        "filename": "src/tint/writer/msl/generator_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 837,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-06-02T16:04:18Z",
      "side": 1,
      "message": "Looks good, thanks for the update.\n\nNow that the type is part of the key, the helper function that we generate doesn\u0027t need to be templated, and could just use the target type. The templated version works fine too though, so feel free to leave this or change it at your own discretion.",
      "parentUuid": "265df8f0_6d8d2c8b",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 837,
        "endChar": 17
      },
      "revId": "5c5dfe50336551116fec68403b3a895b48e78653",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe85cd38_08489c89",
        "filename": "src/tint/writer/msl/generator_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 837,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-06-02T18:00:02Z",
      "side": 1,
      "message": "I made the change to emit the actual type instead of using T. It makes the backend code a bit clunkier, but the output is better, I think.",
      "parentUuid": "b1a48e01_a90d38e6",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 837,
        "endChar": 17
      },
      "revId": "5c5dfe50336551116fec68403b3a895b48e78653",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}