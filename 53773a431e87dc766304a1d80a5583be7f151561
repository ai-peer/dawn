{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6c4fdb8c_447f7755",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2023-05-08T15:51:51Z",
      "side": 1,
      "message": "It\u0027s looking good so far, but I have a few suggestions.",
      "revId": "53773a431e87dc766304a1d80a5583be7f151561",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a667166_b3e16fc1",
        "filename": "src/tint/utils/predicates.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2023-05-08T15:51:51Z",
      "side": 1,
      "message": "Right now, these return a function that always copies in `v`. For containers with expensive-to-copy types (e.g. string), this is inefficient. I suggest we make the lambda accept `const T\u0026`:\n\n```\ntemplate \u003ctypename T\u003e\nauto Eq(T value) {\n    return [value](const T\u0026 v) { return v \u003d\u003d value; };\n}\n```\n\nI put this godbolt together to compare the generated asm:\nhttps://godbolt.org/z/hYPoGTra7\n\nFor primitive types (e.g. int), gcc is able to optimize away the reference at -O2.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "53773a431e87dc766304a1d80a5583be7f151561",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "802c0eaa_efac8761",
        "filename": "src/tint/utils/predicates.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-05-09T11:56:36Z",
      "side": 1,
      "message": "Ta. Done, and also on the function signature too. They will also likely be folded away, but we still might get a copy on the lambda.",
      "parentUuid": "6a667166_b3e16fc1",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "53773a431e87dc766304a1d80a5583be7f151561",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "852e0566_6182d031",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2023-05-08T15:51:51Z",
      "side": 1,
      "message": "Could be replaced with:\n\n```\nreturn std::any_of(begin(*this), end(*this), std::forward\u003cPREDICATE\u003e(pred));\n```\n\nAlternatively, you could provide equivalent utilities to `std::any_of`, `std::all_of`, and `std::none_of` (e.g. `utils::AnyOf`, etc.) which could be used with our other container types.",
      "range": {
        "startLine": 329,
        "startChar": 0,
        "endLine": 334,
        "endChar": 21
      },
      "revId": "53773a431e87dc766304a1d80a5583be7f151561",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e67b36b_578f563c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2023-05-09T11:56:36Z",
      "side": 1,
      "message": "Done.\n\n\u003e Alternatively, you could provide equivalent utilities to `std::any_of`, `std::all_of`, and `std::none_of` (e.g. `utils::AnyOf`, etc.) which could be used with our other container types.\n\nYeah, there\u0027s not really any need to re-add the STD helpers here, as they should just work already. I just added these as they help write fluent code, and we have so few custom containers the \"works with everything\" argument doesn\u0027t need to apply.",
      "parentUuid": "852e0566_6182d031",
      "range": {
        "startLine": 329,
        "startChar": 0,
        "endLine": 334,
        "endChar": 21
      },
      "revId": "53773a431e87dc766304a1d80a5583be7f151561",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}