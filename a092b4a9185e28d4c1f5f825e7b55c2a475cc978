{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1daeaa1a_16a8619f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "Great stuff, James. Logic looks good.\nA bunch of suggestions for code readability and a few more tests.",
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83be3e73_6af38955",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "I\u0027d recommend pushing these two struct declarations up to an anonymous namespace, just to reduce the size of this method.",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 10
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b839779d_66fbf775",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-07T14:14:42Z",
      "side": 1,
      "message": "```suggestion\n        // The object type that corresponds to the source of the first dynamic index.\n```",
      "range": {
        "startLine": 48,
        "startChar": 27,
        "endLine": 48,
        "endChar": 30
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e28a58_2e53289b",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "Please zero initialize. There\u0027s no cost if you\u0027re going to give them defaults, but is safer.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 49,
        "endChar": 52
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dc5adea_e2b9d9e6",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "Ditto",
      "range": {
        "startLine": 56,
        "startChar": 15,
        "endLine": 56,
        "endChar": 19
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31dc40b5_30fb2ade",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "nit: drop the `\u003d`. You\u0027re technically constructing a temporary and then constructing `to_replace` with the temporary. In this case, the compiler will optimize this away, but it\u0027s good habit to get in for the few cases where you lose performance.",
      "range": {
        "startLine": 85,
        "startChar": 34,
        "endLine": 85,
        "endChar": 37
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738a5f03_efa2f4fb",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "nit: This feels like it\u0027s going to be very commonly done whenever we encounter an `Access`. Recommend adding as a helper, possibly as a static method on `Access`.",
      "range": {
        "startLine": 104,
        "startChar": 51,
        "endLine": 112,
        "endChar": 50
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a11c9347_61ce009d",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "There\u0027s quite a bit of state going on here - `to_replace` is being updated, but is only used if `has_dynamic_index` is true. To help with readability, reduce the size of this uber-function and reduce the chance of future bugs, I recommend putting the highlighted code into a method that returns a `std::optional\u003cAccessToReplace\u003e`.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 120,
        "endChar": 34
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61f4b719_3adaa9a5",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "`const auto\u0026` to avoid a copy",
      "range": {
        "startLine": 126,
        "startChar": 9,
        "endLine": 126,
        "endChar": 13
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "731f5908_a853c598",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-07T14:14:42Z",
      "side": 1,
      "message": "`access-\u003eIndices` is a `utils::Slice`. Can we just slice that into `partial_acess.indices` instead of iterating and assigning?",
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74dc3b9d_f59b5c99",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-07T14:14:42Z",
      "side": 1,
      "message": "slice?",
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8929805e_3d222469",
        "filename": "src/tint/ir/transform/var_for_dynamic_index_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "I think you can reduce the boilerplate in these tests by using a `i : i32` function parameter.",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 93,
        "endChar": 37
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c2140ae_cb984a67",
        "filename": "src/tint/ir/transform/var_for_dynamic_index_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "No action required.\nWe should have `Append()` return the argument so we can write:\n\n```\nauto* block \u003d func-\u003eStartTarget();\nauto* idx_var \u003d block-\u003eAppend(b.Declare(ptr(ty.i32())));\nauto* idx \u003d block-\u003eAppend(b.Load(idx_var));\n```\n\nand so on",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 31
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b37729b5_68095eff",
        "filename": "src/tint/ir/transform/var_for_dynamic_index_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "Please can we have a test for interleaving of constant indices with dynamic indices? e.g. `[constant, dynamic, constant, dynamic]`.",
      "range": {
        "startLine": 282,
        "startChar": 57,
        "endLine": 282,
        "endChar": 95
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2b96e91_1ae65a1e",
        "filename": "src/tint/ir/transform/var_for_dynamic_index_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "neat!",
      "range": {
        "startLine": 338,
        "startChar": 0,
        "endLine": 342,
        "endChar": 54
      },
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7be85a29_ec9d9e9a",
        "filename": "src/tint/ir/transform/var_for_dynamic_index_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-07T12:21:49Z",
      "side": 1,
      "message": "Please can we have a test for structures? Something that proves:\n\n\n```\nstruct AVeryLargeStruct {\n  big_fat_unrelated_array : array\u003ci32, 1024\u003e,\n  matrix : mat4x4f,\n  another_big_fat_unrelated_array : array\u003ci32, 1024\u003e,\n};\n\nfn f(s : AVeryLargeStruct, i : i32) -\u003e f32 {\n  return s.matrix[i][0]; // We only hoist s.matrix, not the entirety of s.\n}\n```",
      "revId": "a092b4a9185e28d4c1f5f825e7b55c2a475cc978",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}