{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "613dfd45_cc4e358b",
        "filename": "src/dawn/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 956,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-03T20:45:54Z",
      "side": 1,
      "message": "nit: could use a comment that this also tests the masking of internal usages. (and, for that, using QueryResolve might be more obvious that internal usages are added)\n\nif not wire, we could also cast and that kInternalStorageUsage is actually there - but that could become a bit change-detecting.",
      "revId": "5b9ecef3e26b90a12a1d7435c425551f98fe03c3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "565c4b3e_b46add60",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-03T20:45:54Z",
      "side": 1,
      "message": "now we have a bunch more members and the error object in the wire client now has getters.\nCould we make ObjectAllocator\u003cT\u003e::New forward additional arguments to the constructor of T? then we could deduplicate the member assignments here and in Buffer::CreateError\n\nmaybe New can also set ObjectBase members so we don\u0027t have `: ObjectBase(c, r, i)` everywhere we derive from it.\n\nditto for classes in subsequent CLs.",
      "revId": "5b9ecef3e26b90a12a1d7435c425551f98fe03c3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1241a963_004887b0",
        "filename": "src/dawn/wire/client/Buffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-06T13:20:53Z",
      "side": 1,
      "message": "I\u0027ll see how disruptive it is to do it now. If it is pretty disruptive, would you be ok to do it as a follow-up or would you rather have it as a pre-change (more work for me likely but cleaner)?",
      "parentUuid": "565c4b3e_b46add60",
      "revId": "5b9ecef3e26b90a12a1d7435c425551f98fe03c3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}