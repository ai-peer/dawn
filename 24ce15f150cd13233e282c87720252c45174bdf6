{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bcf7d583_43f6c119",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-15T21:57:36Z",
      "side": 1,
      "message": "How concerned are we about bugs that cause an async infinite loop? TBH I\u0027m not that concerned and think that such a thing should be rare. I think we should land a simple solution to gets flakes under control, and we can make it smarter in the future if there\u0027s pressure to do so.\n\nI tried a few other ways of tracking progress in previous patchsets, but they all felt like they wouldn\u0027t be completely sufficient. So instead, the latest patchset simply sends a heartbeat every 750 ms. This is good enough to catch bad infinite-loops in Renderer process code that blocks the main thread or JS code. But not good enough to catch a loop produced by infinitely creating and posting async tasks. I think that such a bug should be rare, and it would get caught by the larger global timeout we plan to add. It\u0027s hard to make a bug like that in C++. It\u0027s easy in Javascript because you can do `while (true) await new Promise(...)`, but again - I\u0027m not sure it\u0027s worth a ton of effort to gracefully handle definitely-bad code. And again, the larger global timeout will catch it.\n\nResults from Patchset 7 on Windows show that this simple heartbeat mechanism already reduces the number of flaky timeouts compared to the latest ToT build from 20 to 2. I suspect those other timeouts are coming from other parts of the harness initialization (Brian/I discussing on https://chromium-review.googlesource.com/c/chromium/src/+/3829229).\n\n",
      "revId": "24ce15f150cd13233e282c87720252c45174bdf6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef458611_e6610d18",
        "filename": "webgpu-cts/test_runner.js",
        "patchSetId": 8
      },
      "lineNbr": 62,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2022-08-15T22:01:15Z",
      "side": 1,
      "message": "I\u0027m unfamiliar with WebGPU\u0027s interaction with JavaScript - if something goes wrong on WebGPU\u0027s end (e.g. a hang), will that hang other JavaScript execution and prevent this from firing, or would this end up firing anyways?",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 31
      },
      "revId": "24ce15f150cd13233e282c87720252c45174bdf6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "626d6122_9c2a8e63",
        "filename": "webgpu-cts/test_runner.js",
        "patchSetId": 8
      },
      "lineNbr": 62,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-15T22:12:04Z",
      "side": 1,
      "message": "I believe the only way we could stop the timer from firing would be to synchronously block on something or loop synchronously in the Renderer process\u0027s main thread. Kai should know more about the HTML event processing model though.\n\nSo there can definitely be situations where this timer will keep on firing, and the code inside testcase.run is waiting (non-synchronously) forever.\nHowever, I do think that most stuff inside testcase.run that waits also has its own timeout, so at least the majority of the time, the JS code shouldn\u0027t wait forever. Kai should know more about the harness internals though.\nex.) see https://source.chromium.org/search?q\u003df:webgpu-cts%20f:.ts$%20raceWithReject",
      "parentUuid": "ef458611_e6610d18",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 31
      },
      "revId": "24ce15f150cd13233e282c87720252c45174bdf6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40e12df1_8aa23aaf",
        "filename": "webgpu-cts/test_runner.js",
        "patchSetId": 8
      },
      "lineNbr": 62,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-08-15T22:26:55Z",
      "side": 1,
      "message": "the other CL experiment looks like we are indeed hitting the 1 second timeout for TEST_STARTED. That could be part of why some of my original attempts here seemed ineffective. I\u0027ll try again after we resolve the TEST_STARTED issue.",
      "parentUuid": "626d6122_9c2a8e63",
      "range": {
        "startLine": 62,
        "startChar": 20,
        "endLine": 62,
        "endChar": 31
      },
      "revId": "24ce15f150cd13233e282c87720252c45174bdf6",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}