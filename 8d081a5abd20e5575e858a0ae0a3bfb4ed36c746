{
  "comments": [
    {
      "key": {
        "uuid": "89a0550e_8265382e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-21T11:37:23Z",
      "side": 1,
      "message": "restriction. This restriction",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "913d6c85_6e72ef4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-21T00:28:39Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a0de414_bb39d97e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "LGTM",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7024e39b_448337cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2020-08-21T11:37:23Z",
      "side": 1,
      "message": "+1 with Corentin\u0027s comments",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77721455_af3fecf5",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 14
      },
      "lineNbr": 524,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "nit: Not that it matters a whole lot, but shouldn\u0027t this be the physical size (if we ever have compressed texture with that restriction, the copy size will be a multiple of the block size). Or just add an ASSERT that the format isn\u0027t block-based.",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bf8972f_904a2baf",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 14
      },
      "lineNbr": 524,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-27T05:39:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77721455_af3fecf5",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46d72853_62aa0c68",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 14
      },
      "lineNbr": 531,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-21T00:28:39Z",
      "side": 1,
      "message": "remove this text",
      "range": {
        "startLine": 530,
        "startChar": 94,
        "endLine": 531,
        "endChar": 43
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3688c92_1babd13d",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 14
      },
      "lineNbr": 531,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-27T05:39:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46d72853_62aa0c68",
      "range": {
        "startLine": 530,
        "startChar": 94,
        "endLine": 531,
        "endChar": 43
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01a8549a_f6bbd002",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "nit: why doesn\u0027t this one take a miplevel?",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e300c70e_b1780c0d",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 86,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-27T05:39:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01a8549a_f6bbd002",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b1d6d64_e706ed8d",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "If I understand this function correctly: it uploads the expected data in a texture that\u0027s sampled in a quad, uses it to set gl_FragDepth then use depth equal comparison to do the expectation.\n\nI wonder if it might be slightly simpler to use the sampling path to get the data from the depth texture. But maybe not. In all cases can we have a comment at the start of the function that describes how it does the check?",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "323a6ad9_dfce1363",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-21T17:55:28Z",
      "side": 1,
      "message": "I think it would be much better, and avoids issues with setting gl_FragDepth without depthWriteEnabled. Also will let us have a tolerance b.c. instead of relying on the pipeline to do the \u003d\u003d comparison.\n\nBut.... Dawn can\u0027t do stencil-only/depth-only texture *views* yet, so we can\u0027t sample depth from depth24plus-stencil8. Do we want this in the near term? depth32float works for depth sampling. We don\u0027t have stencil8 (yet) so there\u0027s no stencil sampling. Not sure if that\u0027s an important use case.\n\nIt probably won\u0027t be too much work to add support for since (hopefully) the subresource tracking works for separate planes now.",
      "parentUuid": "9b1d6d64_e706ed8d",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba142926_7430259a",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-21T18:21:04Z",
      "side": 1,
      "message": "Using a sub-aspect in a texture view doesn\u0027t require changing the format. To get a stencil view of a depth24plus-stencil8 texture you would keep the format the same (/leave it to default) and use aspect:\u0027stencil-only\u0027",
      "parentUuid": "323a6ad9_dfce1363",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "215c64bf_8fabdc2d",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-21T18:22:47Z",
      "side": 1,
      "message": "I don\u0027t think I said anything about changing formats. We just can\u0027t do that *-only views in Dawn yet.",
      "parentUuid": "ba142926_7430259a",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efb4d1f3_0f9fc29f",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-21T18:27:26Z",
      "side": 1,
      "message": "Oh sorry I see that my statement was very confusing.\n\nI was saying that we don\u0027t have stencil8 yet, so that only way if someone wanted to do sampling of a stencil buffer to implement some rendering algorithm, they\u0027d have to use depth24plus-stencil8. But then they can\u0027t select just stencil because we don\u0027t support that.\n\nAnyway, we should probably just add the stencil8 format.",
      "parentUuid": "215c64bf_8fabdc2d",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "236d12db_3fd05221",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-21T18:29:02Z",
      "side": 1,
      "message": "Gotcha. Theoretically they could be using the output of a render pass that needed depth testing (so the format is depth24plus-stencil8), but only need to sample the stencil aspect.",
      "parentUuid": "efb4d1f3_0f9fc29f",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ec5447a_e13396f1",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 173,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-31T10:57:01Z",
      "side": 1,
      "message": "Can we at least have a top-level comment explaining what happens?",
      "parentUuid": "236d12db_3fd05221",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dd18970_edaaea65",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 298,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "Why do we need the T? Maybe it would infer properly if all the 0.0 had the f suffix? Or we could keep the vector outside of the EXPECT call. Ditto in other places, and it might remove the need for the DawnTest.h changes.",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81ac7b4a_94b08bed",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 298,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-21T17:55:28Z",
      "side": 1,
      "message": "suffix works for float. Doesn\u0027t work in a pretty way for uint8_t. This extra macro was so I don\u0027t have to have a named vector everywhere which I think is kinda nice.",
      "parentUuid": "9dd18970_edaaea65",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a41d489_f6d1f2dc",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 298,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-31T10:57:01Z",
      "side": 1,
      "message": "Heh, I\u0027m not a huge fan myself, especially if we start having _T and regular version of all these macros.",
      "parentUuid": "81ac7b4a_94b08bed",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6099de8b_1a1ca27a",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 399,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "What about copying the depth at a mip level?",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "186cb5b7_6a6d8f61",
        "filename": "src/tests/end2end/DepthStencilCopyTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 399,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-27T05:39:37Z",
      "side": 1,
      "message": "Added tests for that.",
      "parentUuid": "6099de8b_1a1ca27a",
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b260dcd_f60556ca",
        "filename": "src/tests/unittests/validation/CopyCommandsValidationTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 796,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "nit: texture, ditto below",
      "range": {
        "startLine": 796,
        "startChar": 47,
        "endLine": 796,
        "endChar": 64
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "263d6227_f89b6a27",
        "filename": "src/tests/unittests/validation/CopyCommandsValidationTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 796,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-31T10:57:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b260dcd_f60556ca",
      "range": {
        "startLine": 796,
        "startChar": 47,
        "endLine": 796,
        "endChar": 64
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34932599_4ad9f5dc",
        "filename": "src/tests/unittests/validation/CopyCommandsValidationTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1516,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-21T08:01:39Z",
      "side": 1,
      "message": "nit: why is this needed?",
      "range": {
        "startLine": 1516,
        "startChar": 51,
        "endLine": 1516,
        "endChar": 90
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f64c8cb6_883cf91f",
        "filename": "src/tests/unittests/validation/CopyCommandsValidationTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1516,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-31T10:57:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34932599_4ad9f5dc",
      "range": {
        "startLine": 1516,
        "startChar": 51,
        "endLine": 1516,
        "endChar": 90
      },
      "revId": "8d081a5abd20e5575e858a0ae0a3bfb4ed36c746",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}