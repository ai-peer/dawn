{
  "comments": [
    {
      "key": {
        "uuid": "098db0c1_d08ce4c4",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-05-07T18:33:06Z",
      "side": 1,
      "message": "Nit: you look for a substring, but only care if it\u0027s found at the start. Seems like overkill.\n\nCould this be:\n\nconstexpr size_t arglen \u003d sizeof(kExclusiveDevicePreferenceArg) - 1; (or strlen if you must)\nif (strncmp(argv[i], kExclusiveDeviceTypePreferenceArg, arglen) \u003d\u003d 0)\n\ninstead? Then you could reuse arglen below.",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "975c0ddb_8b8c41ce",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-07T22:47:41Z",
      "side": 1,
      "message": "good point, we can change our other arg-checking code to be like this too",
      "parentUuid": "098db0c1_d08ce4c4",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "182e72c3_82609740",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T17:55:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "975c0ddb_8b8c41ce",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b34877ae_13d76245",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "So the intent is that the test runs would be once set with \"discrete,integrated\" and another time with \"cpu\"?",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3c22c9e_2eaaee5c",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T14:56:59Z",
      "side": 1,
      "message": "yup",
      "parentUuid": "b34877ae_13d76245",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03384db2_3a20c618",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 338,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "We should choose the adapter (if --adapter-vendor-id or --exclusive-device-type-preference) here, so that in the info printing below we can display [chosen] on the correct adapter. Also it would simplify the flow of this function a bit if device selection was in a single place (in a helper)",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ff35edf_b5650d8b",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 338,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T14:56:59Z",
      "side": 1,
      "message": "Hm not really, we still need to run on both OpenGL and Vulkan, discrete and integrated. So it really is a preference filter and not an explicit selection.",
      "parentUuid": "03384db2_3a20c618",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28a3f3c7_e20f1486",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 338,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T17:55:43Z",
      "side": 1,
      "message": "Okay I changed this code a bit so it prints [Selected] on all adapters the tests run on, even if there are more than one.",
      "parentUuid": "2ff35edf_b5650d8b",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b511390e_b55e4268",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 437,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "nit: this is prior to running GTest so it should be a regular ASSERT",
      "range": {
        "startLine": 437,
        "startChar": 4,
        "endLine": 437,
        "endChar": 13
      },
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72929f95_02b4aae4",
        "filename": "src/tests/DawnTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 437,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T14:56:59Z",
      "side": 1,
      "message": "This does in fact hit GTest\u0027s usual \"test environment SetUp failed because..\" messages and log a test failure which I like more.",
      "parentUuid": "b511390e_b55e4268",
      "range": {
        "startLine": 437,
        "startChar": 4,
        "endLine": 437,
        "endChar": 13
      },
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb6b4a1d_5779cffe",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-05-07T18:33:06Z",
      "side": 1,
      "message": "Naming nit: I\u0027m confused by DawnTestParamInit (and DawnTestParam, for that matter).\n\nWhat does it mean, exactly? An initialized DawnTestParam? (no, becuase it\u0027s a base class). The initializer? The \"initial\" form of a DawnTestParam?\n\nMaybe the base could remain DawnTestParam, and the derived could be DawnTestParamWithAdapter?\n\nWhat is DawnTestParam, though? A parameter to a DawnTest? It seems to be the class that is instantiated for each backend (below)? Should it be DawnTestBackend, instead?]",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "903869cc_2f5ee382",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-07T22:47:41Z",
      "side": 1,
      "message": "Yea, this probably could have been named better.\n\nSo overall, before this patch, dawn_end2end_tests get parameterized by \"DawnTestParam\" which is the backend type and a list of enabled/disabled backends. It\u0027s a \"Param\" because it\u0027s the param that\u0027s passed to the GoogleTest (::testing::TestWithParam\u003cP\u003e). That way we can run the test for each of: Vulkan, D3D12-with-feature-X, D3D12-without-feature-X, etc.\n\nAfter this patch, the old \"DawnTestParam\" gets transformed into multiple actual \"Params\", one for each adapter matching the backend type. So perhaps I should rename the old struct to \"EnabledBackendForTest\" and the new one to \"AdapterParamForTest\"",
      "parentUuid": "fb6b4a1d_5779cffe",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84d6ff5c_2c855ef7",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "How about BackendTestConfig and AdapterParamForTest?",
      "parentUuid": "903869cc_2f5ee382",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e2c396e_d0755433",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T17:55:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84d6ff5c_2c855ef7",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dda17837_0b9a4b13",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "Yeah that\u0027d be a nice cleanup",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a705b92b_9d263c2f",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T17:55:43Z",
      "side": 1,
      "message": "I did this in a follow-up",
      "parentUuid": "dda17837_0b9a4b13",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "656b8694_4fc12141",
        "filename": "src/tests/End2EndTestsMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "The same change will likely be needed in Chromium\u0027s gpu/dawn_end2end_tests_main.cc and gpu/dawn_perftests_main.cc",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a156c5_6c34182f",
        "filename": "src/tests/End2EndTestsMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T14:56:59Z",
      "side": 1,
      "message": "perf tests is already this way. I have the CL for gpu/dawn_end2end_tests_main.cc up somewhere",
      "parentUuid": "656b8694_4fc12141",
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7909cced_f87dde68",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-05-08T10:00:24Z",
      "side": 1,
      "message": "nit: be",
      "range": {
        "startLine": 22,
        "startChar": 30,
        "endLine": 22,
        "endChar": 32
      },
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00af8386_46459060",
        "filename": "src/tests/ParamGenerator.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-08T17:55:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7909cced_f87dde68",
      "range": {
        "startLine": 22,
        "startChar": 30,
        "endLine": 22,
        "endChar": 32
      },
      "revId": "a87c2b307cf3da858aae3683223b2b238ffdb01d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}