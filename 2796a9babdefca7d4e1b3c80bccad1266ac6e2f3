{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e905e96c_5b62699b",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-21T01:06:51Z",
      "side": 1,
      "message": "shouldn\u0027t enqueuing here have copied the ResourceHeapAllocation into `mAllocationsToDelete` which should retain the reference to the resource until its serial has passed?",
      "range": {
        "startLine": 255,
        "startChar": 33,
        "endLine": 255,
        "endChar": 43
      },
      "revId": "2796a9babdefca7d4e1b3c80bccad1266ac6e2f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381c42b3_42eccd54",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-09-21T15:50:09Z",
      "side": 1,
      "message": "Yeah, you\u0027re right - I assumed the allocations were ref-counted but since they are copied, the ComPtr should be copied too.\n\nSo now this is a real mystery!",
      "parentUuid": "e905e96c_5b62699b",
      "range": {
        "startLine": 255,
        "startChar": 33,
        "endLine": 255,
        "endChar": 43
      },
      "revId": "2796a9babdefca7d4e1b3c80bccad1266ac6e2f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c2a2f92_9c6f1467",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-21T16:15:00Z",
      "side": 1,
      "message": "I remember that the fence implementation does NextSerial - could that be making the serial advance ahead of where it should be, an thus the allocation in `mAllocationsToDelete` is freed too early?",
      "parentUuid": "381c42b3_42eccd54",
      "range": {
        "startLine": 255,
        "startChar": 33,
        "endLine": 255,
        "endChar": 43
      },
      "revId": "2796a9babdefca7d4e1b3c80bccad1266ac6e2f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ea50ba9_f19c4ac2",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-09-21T16:22:53Z",
      "side": 1,
      "message": "I just noticed that we don\u0027t call NextSerial after ExecutePendingCommandContext here:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/TextureD3D12.cpp;l\u003d692\n\nWe moved the NextSerial call out of ExecutePendingCommandContext when implementing fences in Dawn, so the caller must call NextSerial explicitly.\n\nAnd I\u0027m pretty sure this code path was being executed when I was debugging yesterday.\n\nMaybe we should move NextSerial back to ExecutePendingCommandContext - we simply need the next serial number in Texture::SynchronizeImportedTextureAfterUse which can be retrieved via GetPendingCommandSerial() instead.",
      "parentUuid": "8c2a2f92_9c6f1467",
      "range": {
        "startLine": 255,
        "startChar": 33,
        "endLine": 255,
        "endChar": 43
      },
      "revId": "2796a9babdefca7d4e1b3c80bccad1266ac6e2f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0683ce9c_838ff035",
        "filename": "src/dawn/native/d3d12/ResourceAllocatorManagerD3D12.cpp",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1002701
      },
      "writtenOn": "2022-09-21T16:28:30Z",
      "side": 1,
      "message": "Actually I was mistaken - ExecutePendingCommandContext does call NextSerial inside CommandRecordingContext::ExecuteCommandList. But still this does seem to have something to do with the funny NextSerial business when a texture isn\u0027t used.",
      "parentUuid": "2ea50ba9_f19c4ac2",
      "range": {
        "startLine": 255,
        "startChar": 33,
        "endLine": 255,
        "endChar": 43
      },
      "revId": "2796a9babdefca7d4e1b3c80bccad1266ac6e2f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}