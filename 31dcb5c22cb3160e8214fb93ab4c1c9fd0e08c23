{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1f2655a2_8588a89a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "Calls to this should not be necessary for constructors. Instead, the `impl_` should already be reset by construction.",
      "range": {
        "startLine": 125,
        "startChar": 15,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b4f0f42_ba0008dd",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f2655a2_8588a89a",
      "range": {
        "startLine": 125,
        "startChar": 15,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c23557b_ca5d250a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "As above, not necessary. I won\u0027t mark all of these below.",
      "range": {
        "startLine": 130,
        "startChar": 8,
        "endLine": 130,
        "endChar": 22
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "704c63d4_697a66a3",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c23557b_ca5d250a",
      "range": {
        "startLine": 130,
        "startChar": 8,
        "endLine": 130,
        "endChar": 22
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be02b4c3_542bbdac",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "Can use `std::fill` or `std::fill_n` instead.",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 146,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80d653d1_b7503692",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "You sure? Doesn\u0027t that do an assignment? The destination hasn\u0027t been constructed yet.",
      "parentUuid": "be02b4c3_542bbdac",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 146,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f90c09_16fd7289",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "That\u0027s true. We could, and probably should, optimize this initialization for trivially copyable types though -- can do a memset instead.",
      "parentUuid": "80d653d1_b7503692",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 146,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4029bf5a_7755f0e6",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "I would really stunned if the compiler doesn\u0027t do this already.",
      "parentUuid": "01f90c09_16fd7289",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 146,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab104aa6_b20bdcde",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Huh, I\u0027d be impressed if it does. Will need to look at the generated code. I know the standard library does specialize initialization/copy of these buffers for trivial types.",
      "parentUuid": "4029bf5a_7755f0e6",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 146,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "991c4220_088be7f0",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "If possible, use `std::copy` or `std::copy_n` instead, as it will be more efficient (it can memcpy/memmove for trivially copyable types): https://en.cppreference.com/w/cpp/algorithm/copy",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4d14ad3_abda1bcb",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Again - isn\u0027t that an assignment? This is copy-constructing.",
      "parentUuid": "991c4220_088be7f0",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66b1a336_53048fe9",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "Yes, true. As above, we should optimize this for trivially copyable types to do a memcpy, which would be safe in that case.",
      "parentUuid": "e4d14ad3_abda1bcb",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32e6ae04_7a08836a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "See above - I\u0027d really be surprised if the compiler didn\u0027t handle this already.",
      "parentUuid": "66b1a336_53048fe9",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "779ffd49_9e82473c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32e6ae04_7a08836a",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b31392_c0065b46",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 192,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-19T16:17:04Z",
      "side": 1,
      "message": "Can you put what this is nolintng? `// NOLINT(foo/bar)`",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c03ed6d5_4c99653c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 192,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5b31392_c0065b46",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "771b4eb0_c148897e",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "Is this construction necessary? Can\u0027t we pass in `other` directly?",
      "range": {
        "startLine": 194,
        "startChar": 19,
        "endLine": 194,
        "endChar": 31
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31796a17_f7000d5d",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Going via the `VectorRef` figures out whether the move can be done. Seemed nicer to reuse that logic than duplicating it.",
      "parentUuid": "771b4eb0_c148897e",
      "range": {
        "startLine": 194,
        "startChar": 19,
        "endLine": 194,
        "endChar": 31
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c181628f_a11b472f",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "I don\u0027t follow. `other` is already a `VectorRef\u003cT\u003e`, so `std::move(other)` should do the right thing here, without constructor another `VectorRef\u003cT\u003e` around it, right?",
      "parentUuid": "31796a17_f7000d5d",
      "range": {
        "startLine": 194,
        "startChar": 19,
        "endLine": 194,
        "endChar": 31
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13943607_ebe2b5db",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "Sorry, mixing up constructors. Done.",
      "parentUuid": "c181628f_a11b472f",
      "range": {
        "startLine": 194,
        "startChar": 19,
        "endLine": 194,
        "endChar": 31
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ae6960d_08f6641a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 207,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "Missing the usual `if (this !\u003d \u0026other) ...`",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0fc996c_5f11e08b",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 207,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ae6960d_08f6641a",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d428501d_226aa900",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 215,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "As above, missing `if (this !\u003d \u0026other)...`",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42c67fa8_1de402dc",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 215,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d428501d_226aa900",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2d8b03_181c9176",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 262,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-19T16:17:04Z",
      "side": 1,
      "message": "This is using a moved value, is that valid?",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4901ada5_f52cdc3f",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 262,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T17:41:49Z",
      "side": 1,
      "message": "The moved value still needs to be destructed, so I presume so.",
      "parentUuid": "7a2d8b03_181c9176",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6098c13_4f1bda7b",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 299,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "For consistency with `std::vector`, I would name it `PushBack` and `PopBack` below.",
      "range": {
        "startLine": 299,
        "startChar": 9,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1f9efdd_12a9d31e",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 299,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "It\u0027s a vector, I don\u0027t think anyone would expect it to push any other end.\nAlso overloaded for the move.",
      "parentUuid": "a6098c13_4f1bda7b",
      "range": {
        "startLine": 299,
        "startChar": 9,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0042e8db_717739dc",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 299,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "The idea is to use this instead of a std::vector, but the API should be the same (modulo the naming case convention). Even if there\u0027s no PushFront, the reason the names are normalized across containers in C++ is for algorithms (static polymorphism). In any case, for me it\u0027s about element of least surprise.",
      "parentUuid": "e1f9efdd_12a9d31e",
      "range": {
        "startLine": 299,
        "startChar": 9,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca27dccb_d7b1b29a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 299,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "\u003e The idea is to use this instead of a std::vector, but the API should be the same (modulo the naming case convention). Even if there\u0027s no PushFront, the reason the names are normalized across containers in C++ is for algorithms (static polymorphism). \n\nThe algorithms cannot work with the different naming, so I\u0027m not convinced by that argument.\n\n\u003e In any case, for me it\u0027s about element of least surprise.\n\nIs `Push()` and `Pop()` going to confuse anyone? I highly doubt it.\n\nLike you said, the argument for adding the redundant `_back` to the vector methods is for C++ STL static polymorphism, which just doesn\u0027t apply here.",
      "parentUuid": "0042e8db_717739dc",
      "range": {
        "startLine": 299,
        "startChar": 9,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a27e58b4_a96c6ad6",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 299,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Discussed offline. We\u0027ll go with whatever you decide.",
      "parentUuid": "ca27dccb_d7b1b29a",
      "range": {
        "startLine": 299,
        "startChar": 9,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a659f5a_da8b5257",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 314,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "No `EmplaceBack`? Very useful for in-place construction with forwarded ctor args.",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b2d362a_bd982c55",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 314,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "No, I overloaded `Push()` to take a `T\u0026\u0026`",
      "parentUuid": "6a659f5a_da8b5257",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f40ab15_c6cfa45c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 314,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "This isn\u0027t the same as EmplaceBack. EmplaceBack allows you to pass in variadic args that will be forwarded to the constructor of T: https://en.cppreference.com/w/cpp/container/vector/emplace_back",
      "parentUuid": "5b2d362a_bd982c55",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cb3ff87_5b9f800a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 314,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f40ab15_c6cfa45c",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "858334dd_a453bbe1",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "Although this is a better name, I would still opt for `Empty` for consistency with `std::vector`.",
      "range": {
        "startLine": 320,
        "startChar": 9,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bf13e09_c3f05c81",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 320,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "I made the conscious decision to break from the `std::vector` interface. Methods are capitalized, `VectorRef` is a non-std pattern, `size()` is `Length()`, etc.\nIf we want a proper `std` interface for... reasons, we can implement a wrapper.",
      "parentUuid": "858334dd_a453bbe1",
      "range": {
        "startLine": 320,
        "startChar": 9,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4b5bf5_3382c213",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "Having worked with custom containers in many other engines that _almost_ follow the standard conventions, I\u0027ll just say that I didn\u0027t enjoy it. In particular, the `size()` vs `Length()` tripped me up enough times to be annoying. Even if this class offers extra stuff over `std::vector`, I still think we should follow the conventions for `Empty` and `Length`.",
      "parentUuid": "7bf13e09_c3f05c81",
      "range": {
        "startLine": 320,
        "startChar": 9,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe1bd841_52964006",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 320,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "I\u0027ve seen countless bugs in my career where people use `empty()` when they meant `clear()`. Logic where they used `size()` when they meant `size() * sizeof(T)`.\n\nThe conscious decision was to break away from the standard conventions, for good reasons. I\u0027m of the opinion that we either we fully imitate `std::vector` \u0027s signature (`snake_case` casing and all), or we implement something that is not trying to associate itself with the STL. Given our coding style, no need or incentive for supporting `std::allocator`, and distaste for the naming of C++\u0027s methods, I\u0027d strongly prefer the latter.",
      "parentUuid": "3e4b5bf5_3382c213",
      "range": {
        "startLine": 320,
        "startChar": 9,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9358b975_46a2a533",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Discussed offline. As I mentioned, the calling `empty()` to mean `clear()` is mostly mitigated in C++17 with the `nodiscard` attribute.\n\nAnyway, we\u0027ll go with what you decide (keep the current interface).",
      "parentUuid": "fe1bd841_52964006",
      "range": {
        "startLine": 320,
        "startChar": 9,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d177139_781ec867",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 377,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "I would remove this here, and only put this check in the call sites where it can happen.",
      "range": {
        "startLine": 375,
        "startChar": 8,
        "endLine": 377,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d35203b_b10cc80d",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 377,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d177139_781ec867",
      "range": {
        "startLine": 375,
        "startChar": 8,
        "endLine": 377,
        "endChar": 9
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87a929fb_869de2a2",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 379,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-19T16:17:04Z",
      "side": 1,
      "message": "Does this need a `std::move` or is there no copy assign operator?",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea361e01_a398768a",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 379,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "`MoveOrCopy` is called from assignment operators, so don\u0027t we have to make sure delete this instance\u0027s allocated memory?",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93e14c89_48886c0c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 379,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T17:41:49Z",
      "side": 1,
      "message": "Slice is just Plain Old Data (a pointer and 2x `size_t`). A `std::move` wouldn\u0027t do anything more than an assignment.",
      "parentUuid": "87a929fb_869de2a2",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbe631e5_a7136747",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 379,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Great catch. Yes, we were leaking with repeat moves. Fixed. Added tests.",
      "parentUuid": "ea361e01_a398768a",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc9144f_51199d80",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 423,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-19T16:17:04Z",
      "side": 1,
      "message": "If we\u0027ve allocated a `TStorage` on line 435, and then `Reset` does this leak?",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9018f21_6838156c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 423,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T17:41:49Z",
      "side": 1,
      "message": "Reset",
      "parentUuid": "4fc9144f_51199d80",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f32d2780_51ce8273",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 423,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T17:43:35Z",
      "side": 1,
      "message": "Renamed. Although, it looks like I\u0027ll be removing it.",
      "parentUuid": "f9018f21_6838156c",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6585b573_16359150",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 449,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "It might be faster to check if `slice.cap \u003d\u003d N` instead of doing a pointer compare.  That\u0027s what I\u0027ve seen out in the while (or some variation).",
      "range": {
        "startLine": 449,
        "startChar": 31,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c722c97_f12a296e",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 449,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "I don\u0027t think that logic works. Consider:\n\n```\nutils::Vector\u003cint, 1\u003e vec_a{1,2,3};  // This spilled to a heap allocation\nutils::Vector\u003cint, 3\u003e vec_b(std::move(vec_a));  // Slice moved.\n```\n\n`vec_b.impl_.cap` is `3`, but it isn\u0027t using its own small array, so it could be moved.",
      "parentUuid": "6585b573_16359150",
      "range": {
        "startLine": 449,
        "startChar": 31,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7dafd6e_7ac0c894",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 449,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "Right, because once we go heap, we never go back. Okay.",
      "parentUuid": "7c722c97_f12a296e",
      "range": {
        "startLine": 449,
        "startChar": 31,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c8f3681_258cc563",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-07-19T16:17:04Z",
      "side": 1,
      "message": "If you have an `ImplWithoutSmallArray` and then `Allocate` and then `Reset` don\u0027t use leak `data`?",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c057ba6f_26c52150",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-07-19T17:41:49Z",
      "side": 1,
      "message": "If you did that, yes. But `Reset` is just used for setting initial values for the constructor. It\u0027s not public API.",
      "parentUuid": "8c8f3681_258cc563",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5dbbd90_3785e737",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Removed `Reset()`",
      "parentUuid": "c057ba6f_26c52150",
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "189a4824_3dee96f1",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 465,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "`Bitcast\u003cT*\u003e`?",
      "range": {
        "startLine": 465,
        "startChar": 25,
        "endLine": 465,
        "endChar": 45
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "925153c1_ec0fcb97",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 465,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "189a4824_3dee96f1",
      "range": {
        "startLine": 465,
        "startChar": 25,
        "endLine": 465,
        "endChar": 45
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87dcf057_d894d4f9",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 472,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T16:45:08Z",
      "side": 1,
      "message": "Same: `Bitcast\u003cT*\u003e`?",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 472,
        "endChar": 52
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efc136da_f5eca8b0",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 472,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87dcf057_d894d4f9",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 472,
        "endChar": 52
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd58296d_17bf0df6",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 515,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T17:02:16Z",
      "side": 1,
      "message": "This means we could make a `VectorRef` to a const `Vector` and modify it\u0027s values via the non-const members like `Front`.",
      "range": {
        "startLine": 515,
        "startChar": 17,
        "endLine": 515,
        "endChar": 35
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22622ff3_dc907a8e",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 515,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Yeah, I had realised this earlier, then seemingly forgot. Any better suggestions than a `ConstVectorRef` or `MutableVectorRef` ? It\u0027s a shame you can\u0027t control which constructors are available based on the `const`-ness of the declaration.",
      "parentUuid": "cd58296d_17bf0df6",
      "range": {
        "startLine": 515,
        "startChar": 17,
        "endLine": 515,
        "endChar": 35
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47458ea7_611bde3e",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 515,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T19:03:23Z",
      "side": 1,
      "message": "I\u0027m playing with adding a `ConstVectorRef`. So far so good. Will push an update soon.",
      "parentUuid": "22622ff3_dc907a8e",
      "range": {
        "startLine": 515,
        "startChar": 17,
        "endLine": 515,
        "endChar": 35
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e25ae25b_c485ab58",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 515,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:13:48Z",
      "side": 1,
      "message": "I was wondering if we could base it on th constness of the `VectorRef` itself.\n`const VectorRef\u003cT\u003e` vs `VectorRef\u003cT\u003e`. We could maybe assert that \u0027this\u0027 is a pointer to non-const if the input `Vector\u003cT\u003e` is non-const.",
      "parentUuid": "47458ea7_611bde3e",
      "range": {
        "startLine": 515,
        "startChar": 17,
        "endLine": 515,
        "endChar": 35
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7989b6d_cf9c5162",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 515,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "Pushed the `ConstVectorRef` change.\n\nI was wondering the same thing, but I couldn\u0027t find anything that didn\u0027t make a little bit of sick come up in my mouth.\nThis is more code, but it\u0027s explicit. There are only a few places we\u0027d want to use `ConstVectorRef`.",
      "parentUuid": "e25ae25b_c485ab58",
      "range": {
        "startLine": 515,
        "startChar": 17,
        "endLine": 515,
        "endChar": 35
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4556841_4c61f6b8",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 525,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T17:02:16Z",
      "side": 1,
      "message": "Is this useful? Should VectorRef be a move-only type? I\u0027m afraid having this means we may accidentally copy because we forgot to move a ref.\n\nIf I wanted a argument type for a non-copyable view of a Vector, I\u0027d just use a const-ref to one.",
      "range": {
        "startLine": 525,
        "startChar": 4,
        "endLine": 525,
        "endChar": 37
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00d3e3d4_a2f20edd",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 525,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "I started off with this being move-only, but found some places in the resolver that passed the same thing in multiple places, which is unfortunate.",
      "parentUuid": "f4556841_4c61f6b8",
      "range": {
        "startLine": 525,
        "startChar": 4,
        "endLine": 525,
        "endChar": 37
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "464873df_ba79d5e5",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 525,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T19:09:36Z",
      "side": 1,
      "message": "Not sure I understand. As I wrote in my comment above, couldn\u0027t you use a `const utils::Vector\u0026` for read-only views?",
      "parentUuid": "00d3e3d4_a2f20edd",
      "range": {
        "startLine": 525,
        "startChar": 4,
        "endLine": 525,
        "endChar": 37
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cff7779_2ca38e7c",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 525,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T20:25:41Z",
      "side": 1,
      "message": "I really don\u0027t want to expose the vector length as part of the header interface.",
      "parentUuid": "464873df_ba79d5e5",
      "range": {
        "startLine": 525,
        "startChar": 4,
        "endLine": 525,
        "endChar": 37
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a3ed861_c06f235b",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 525,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-20T19:40:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6cff7779_2ca38e7c",
      "range": {
        "startLine": 525,
        "startChar": 4,
        "endLine": 525,
        "endChar": 37
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42a86140_ad64b4cf",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 593,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T17:02:16Z",
      "side": 1,
      "message": "Assigning nullptr to a ref?",
      "range": {
        "startLine": 593,
        "startChar": 18,
        "endLine": 593,
        "endChar": 27
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3e225b2_eac51fb8",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 593,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Yeah... WTF - why does this compile? 😊\nDone",
      "parentUuid": "42a86140_ad64b4cf",
      "range": {
        "startLine": 593,
        "startChar": 18,
        "endLine": 593,
        "endChar": 27
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eebb21f_f3ee6bc7",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 601,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-07-19T17:02:16Z",
      "side": 1,
      "message": "Would name this `ToStdVector`.",
      "range": {
        "startLine": 601,
        "startChar": 15,
        "endLine": 601,
        "endChar": 23
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65318350_6473a7b8",
        "filename": "src/tint/utils/vector.h",
        "patchSetId": 9
      },
      "lineNbr": 601,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-07-19T18:34:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5eebb21f_f3ee6bc7",
      "range": {
        "startLine": 601,
        "startChar": 15,
        "endLine": 601,
        "endChar": 23
      },
      "revId": "31dcb5c22cb3160e8214fb93ab4c1c9fd0e08c23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}