{
  "comments": [
    {
      "key": {
        "uuid": "8b755300_3af10e9f",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-26T21:01:30Z",
      "side": 1,
      "message": "in JS, this throws an exception so I don\u0027t think there would be a validation error. I think it could still be nice to have in native, but Blink bindings would need to do their own state tracking to throw the exception before calling the client procs.",
      "revId": "9a567496673e8f5c6fa2da0a265ce4b1230a9044",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbcfd4be_391257cb",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-29T12:31:51Z",
      "side": 1,
      "message": "What do you think of having special toggles in dawn_wire::WireClientDescriptor that would enable a special code path here that just returns nullptr and doesn\u0027t produce an error?",
      "parentUuid": "8b755300_3af10e9f",
      "revId": "9a567496673e8f5c6fa2da0a265ce4b1230a9044",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "974632bb_dd494d97",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-30T16:18:39Z",
      "side": 1,
      "message": "I\u0027m still not sure I see a really strong reason of having a validation error here and making the native API diverge from the JS API.\n\nIt still returns nullptr and whoever is using Dawn that wants to be safe will need to check it anyway. If they don\u0027t, then it\u0027ll be crashy. Either need to check the pointer or put a tiny error scope around it (or both I guess), but checking the pointer can be done synchronously, just like in JS land w/ exceptions.",
      "parentUuid": "fbcfd4be_391257cb",
      "revId": "9a567496673e8f5c6fa2da0a265ce4b1230a9044",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "375b1990_6e250767",
        "filename": "src/dawn_wire/client/Buffer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-30T17:36:32Z",
      "side": 1,
      "message": "Ah I see, if the buffer isn\u0027t in the correct state, you suggest that it returns nullptr without a validation error as the nullptr is enough to say that it isn\u0027t in a mapped state. I can change the logic in a follow-up if that\u0027s what you meant.",
      "parentUuid": "974632bb_dd494d97",
      "revId": "9a567496673e8f5c6fa2da0a265ce4b1230a9044",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05805e35_8624a2ac",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 804,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-26T21:01:30Z",
      "side": 1,
      "message": "nit: also check that the pointers are the same",
      "revId": "9a567496673e8f5c6fa2da0a265ce4b1230a9044",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "751efa48_a9490793",
        "filename": "src/tests/unittests/validation/BufferValidationTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 804,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-29T12:31:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05805e35_8624a2ac",
      "revId": "9a567496673e8f5c6fa2da0a265ce4b1230a9044",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}