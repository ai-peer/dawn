{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "38f606fd_ea769248",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-19T23:28:11Z",
      "side": 1,
      "message": "PTAL. I noticed win-dawn-rel bot is failing on unrelated tests, is this a known issue?",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49ce0711_ea9c57fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-24T18:35:20Z",
      "side": 1,
      "message": "See comment in FingerprintRecorderTests.cpp as most of my concern is w.r.t to that",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d695d71_17e53c6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-30T19:49:55Z",
      "side": 1,
      "message": "Thanks for the pass, AE!",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d521f310_b5fa0f98",
        "filename": "src/dawn_native/CachedObject.h",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-24T18:35:20Z",
      "side": 1,
      "message": "nit: better to have a SetHash method instead of setting both members independently",
      "range": {
        "startLine": 52,
        "startChar": 7,
        "endLine": 53,
        "endChar": 40
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78823c51_fc8e1ce2",
        "filename": "src/dawn_native/CachedObject.h",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-12-01T01:57:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d521f310_b5fa0f98",
      "range": {
        "startLine": 52,
        "startChar": 7,
        "endLine": 53,
        "endChar": 40
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "465f389f_48261069",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-24T18:35:20Z",
      "side": 1,
      "message": "this makes it seem that an object\u0027s hash includes all of the previous hashed state.\n\nIt\u0027s probably the case that we hit this code path always when the FingerprintRecorder is \"fresh\", but the structure of the code makes it very not obvious. When exactly the hash is created is not clear, and the hash needs to be explicitly set - it\u0027s not always lazily created.\n\nIf we explicitly set the hash, we need to make it clear how and where that happens.\nIf we don\u0027t want to be so verbose, we should have the hash always get lazily created from a fresh recording state.\n\nPossible suggestion:\n 1) Have CachedObject::Fingerprint, take no arguments, and return |size_t hash|.\n    Implementations should make a local FingerprintRecorder and return\n    FingerprintRecorder::GetKey().\n 2) CachedObject::HashFunc stays the way it is.\n 3) FingerprintRecorder::RecordObject just returns HashFunc(*obj);\n 4) DeviceBase::GetOrCreate looks like:\n    BindGroupLayoutBase blueprint(this, descriptor);\n    size_t hash \u003d blueprint.Fingerprint();\n    blueprint.SetHash(hash);\n    if (findInCache...) {\n      ...\n    } else {\n      backendObj \u003d CreateImpl(descriptor);\n      backendObj-\u003eSetHash(hash);\n      backendObj-\u003eSetIsCachedReference(); // maybe this could set the hash too.\n    }\n 5) Remove fingerprint recorder stuff from object constructors\n\n\nAlternatively:\n 1) structure it as \"class Foo : public CachedObject\u003cFoo\u003e ..\"\n 2) CachedObject\u003cT\u003e::HashFunc always does the isHashInitialized check, and if it\u0027s not, \n    makes a local FingerprintRecorder, and does `recorder.RecordObject\u003cstatic_cast\u003cT*\u003e(this));`\n 3+) Similar as above but no explicit SetHash",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 32,
        "endChar": 31
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25c3c091_6647f0b2",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-30T19:49:55Z",
      "side": 1,
      "message": "If I understand correctly, this means CachedObject::HashFunc cannot re-use the hash unless it was already computed for the blueprint object (ie. not on traversal). This surprises me because SetHash(blueprintHash) is orthogonal to this check.\n\nTo help jog our memory, an example use-case is when an attachmentState is first created then a pipeline is created that uses it. Is not having this extra traversal still important?",
      "parentUuid": "465f389f_48261069",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 32,
        "endChar": 31
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17021874_f16dd2df",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-30T20:24:36Z",
      "side": 1,
      "message": "err, the base question is the one at [1]. I don\u0027t think that an object\u0027s hash should depend on the previous recording state. Why must it?",
      "parentUuid": "25c3c091_6647f0b2",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 32,
        "endChar": 31
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9766c050_bd1ac52d",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-30T21:13:56Z",
      "side": 1,
      "message": "The parent object hash depends on the child object it hashes.\n\nRecall, previously the child object hash used was its own memory address. Alternatively, we could call SetKey in Fingerprint but if we still consider the extra traversal important, the cached key must be stored then conditionally set somewhere. Do let me know what you prefer.",
      "parentUuid": "17021874_f16dd2df",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 32,
        "endChar": 31
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fc0f97e_590316ec",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-30T23:21:41Z",
      "side": 1,
      "message": "Discussed over VC to do the fingerprinting in GetOrCreate and not have child objects depend on previous state. This is because child objects are always created before parents. Now, instead of passing the recorder object through from the parent into the child, the recorder can just hash against child-\u003eGetKey()\n\nWe can do key reuse by taking the key from the blueprint and doing createdObject-\u003eSetKey(..) which would happen nicely adjacent to createdObject-\u003eSetIsCachedReference()",
      "parentUuid": "9766c050_bd1ac52d",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 32,
        "endChar": 31
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f041792c_34eddca7",
        "filename": "src/dawn_native/FingerprintRecorder.cpp",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-12-01T01:57:00Z",
      "side": 1,
      "message": "Good insight, SGTM.",
      "parentUuid": "8fc0f97e_590316ec",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 32,
        "endChar": 31
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be6aadd1_2c3ef200",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-24T18:35:20Z",
      "side": 1,
      "message": "I don\u0027t think this needs the extra template arg:\nstruct RecordImpl\u003cCachedObject*\u003e {\n  ...\n};",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e78747e1_ea49e596",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-30T19:49:55Z",
      "side": 1,
      "message": "Are you sure? Removing the argument means Record(\u0026obj) now matches \u003ctypename T, typename.. Args\u003e which doesn\u0027t produce the right result.",
      "parentUuid": "be6aadd1_2c3ef200",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b20b7168_41eebdf3",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-30T20:24:36Z",
      "side": 1,
      "message": "template \u003c\u003e\nstruct RecordImpl\u003cCachedObject*\u003e \n\nshould be the explicit template specialization specifically for CachedObject*.. I think?\n\nWhat you have here is specializing for *any* pointer and we jut happen to be calling it CachedObjectT",
      "parentUuid": "e78747e1_ea49e596",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5354654d_7938b015",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-30T21:13:56Z",
      "side": 1,
      "message": "That will compile but the template resolution will be wrong. \n\nCachedObject* will be seen as `RecordImpl\u003cCachedObject*\u003e` which (incorrectly) matches the primary template `RecordImpl::Call(.., const T\u0026 value, ..)`.",
      "parentUuid": "b20b7168_41eebdf3",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca6694c8_888a0d08",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-01T22:36:22Z",
      "side": 1,
      "message": "ok right we need to SFINAE with std::is_base_of like https://godbolt.org/z/oxfhfY. Let\u0027s do that, I\u0027d like to not have it accept any pointer here.",
      "parentUuid": "5354654d_7938b015",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ffff98c_4133f752",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-12-02T20:28:14Z",
      "side": 1,
      "message": "Slight preference to keep it as-is.\n\nThis is because we cannot accept any ptr (ever). Otherwise, Record(NotCachedObj*) would falsely \"work\" (ie. resolve to use HashCombine) defeating the benefit of RecordImpl. There is no easy way to distinguish a bad hash from cache miss \u003d(",
      "parentUuid": "ca6694c8_888a0d08",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e84fdc_5eceb8e1",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-02T22:50:55Z",
      "side": 1,
      "message": "Okay, that\u0027s fine. Let\u0027s call the template argument just T* then, and make it a static_assert instead of a runtime ASSERT.",
      "parentUuid": "6ffff98c_4133f752",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ecbaf4_4716d1e8",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-24T18:35:20Z",
      "side": 1,
      "message": "nit: vector\u003cT\u003e ?",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77283bbf_02a499ea",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-12-01T22:36:22Z",
      "side": 1,
      "message": "Not addressed",
      "parentUuid": "52ecbaf4_4716d1e8",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3c0b806_6c49f89a",
        "filename": "src/dawn_native/FingerprintRecorder.h",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-12-02T20:28:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52ecbaf4_4716d1e8",
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d37c1af4_9ad684c1",
        "filename": "src/tests/unittests/FingerprintRecorderTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-24T18:35:20Z",
      "side": 1,
      "message": "Shouldn\u0027t they be the same?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 90,
        "endChar": 12
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85e7ff85_fede264a",
        "filename": "src/tests/unittests/FingerprintRecorderTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-30T19:49:55Z",
      "side": 1,
      "message": "Shouldn\u0027t be the same b/c B recording state was based off of A or \"B depends on A\".",
      "parentUuid": "d37c1af4_9ad684c1",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 90,
        "endChar": 12
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "858e4a75_3f56d4c5",
        "filename": "src/tests/unittests/FingerprintRecorderTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-30T20:24:36Z",
      "side": 1,
      "message": "[1]",
      "parentUuid": "85e7ff85_fede264a",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 90,
        "endChar": 12
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09307328_bee64b25",
        "filename": "src/tests/unittests/FingerprintRecorderTests.cpp",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-12-01T01:57:00Z",
      "side": 1,
      "message": "No longer needed.",
      "parentUuid": "858e4a75_3f56d4c5",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 90,
        "endChar": 12
      },
      "revId": "e08d7c6d93c7d61149be8fdb2462f8d83e518ff9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}