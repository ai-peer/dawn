{
  "comments": [
    {
      "key": {
        "uuid": "7b63757d_19ade123",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2020-08-10T12:56:43Z",
      "side": 1,
      "message": "PTAL! Uncertain about the reinterpret_cast for creating the vertex state descriptor passed to Tint, should we make functions to convert even though the structs should be the same? Also may want to double check my indices but I think they\u0027re okay.",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0e202dd_4cb5c621",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-10T21:35:04Z",
      "side": 1,
      "message": "My concern here is that we\u0027re going to have three paths to do shader clamping\n 1) the yet-to-be-created Tint pass\n 2) the graphics-robust-access pass in SPIR-V tools\n 3) the temporary clamping and metadata buffer in your Tint CL + this one\n\nSince right now we always have to go from WGSL-\u003eSPIR-V-\u003eMSL. Could we instead try enabling (2) ? I think that the support is there but it is simply not enabled. Maybe it only works using SPVC but that\u0027s okay for now. See https://source.chromium.org/chromium/chromium/src/+/master:third_party/shaderc/src/libshaderc_spvc/include/spvc/spvc.hpp;drc\u003d5ab69a33ea6dd21d45c379dda0c6ad2df42015c9;bpv\u003d1;bpt\u003d1;l\u003d161\n\nThis way, you don\u0027t need to implement your own clamping in the vertex pulling pass.",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ac30ee_25e7c7a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-11T00:24:38Z",
      "side": 1,
      "message": "this makes sense to me, and perhaps we want to avoid having clamping be a WGSL-\u003eWGSL pass at all (since it\u0027s a core feature of WGSL and all backends can do it). I\u0027m not sure what approach Dan+ had in mind.",
      "parentUuid": "a0e202dd_4cb5c621",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45502885_0961af47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-11T00:28:04Z",
      "side": 1,
      "message": "I believe the goal is to have a Tint AST pass for this https://bugs.chromium.org/p/tint/issues/detail?id\u003d101",
      "parentUuid": "73ac30ee_25e7c7a9",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de23ff4c_8f0d4eb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-11T00:31:38Z",
      "side": 1,
      "message": "Ah right, this rings a bell. The vertex pulling pass definitely should depend on that pass eventually, but for now should depend on whatever Tint depends on generally (the SPIRV-Tools pass I assume).",
      "parentUuid": "45502885_0961af47",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3034676d_0a7e1aff",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 6
      },
      "lineNbr": 456,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T11:43:52Z",
      "side": 1,
      "message": "I think we\u0027re reaching too much into the Tint implementation details in Dawn, TypeDeterminer should be an implementation detail. Not that you need to do anything about it in this CL.",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10931f22_cf4483d4",
        "filename": "src/dawn_native/metal/CommandBufferMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 541,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T11:43:52Z",
      "side": 1,
      "message": "Why do we need this? Isn\u0027t the mVertexPullingMetadataBuffer enough?",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0280e2c0_0936eb92",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-08-10T21:35:04Z",
      "side": 1,
      "message": "these checks should be: RobustnessEnabled \u0026\u0026 MetalEnableVertexPulling.\n\nMaybe also put Robustness in the name of the Metal toggle to be clear it\u0027s for robustness",
      "range": {
        "startLine": 386,
        "startChar": 8,
        "endLine": 386,
        "endChar": 77
      },
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06ea59c4_f56855f3",
        "filename": "src/dawn_native/metal/RenderPipelineMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T11:43:52Z",
      "side": 1,
      "message": "Also maybe do an:\n\n  if (pulling) {\n    set empty\n  } else {\n    set MakeVertexDesc();\n  }\n\nFor the check for RobustnessEnabled, we could ForceToggle(vertexpulling, off) in DeviceMTL if robustness isn\u0027t enabled.",
      "parentUuid": "0280e2c0_0936eb92",
      "range": {
        "startLine": 386,
        "startChar": 8,
        "endLine": 386,
        "endChar": 77
      },
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ac89335_68693741",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 192,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T11:43:52Z",
      "side": 1,
      "message": "this shouldn\u0027t be needed",
      "range": {
        "startLine": 192,
        "startChar": 40,
        "endLine": 192,
        "endChar": 87
      },
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac1f2112_456ccb7a",
        "filename": "src/dawn_native/metal/ShaderModuleMTL.mm",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T11:43:52Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 201,
        "startChar": 39,
        "endLine": 201,
        "endChar": 87
      },
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28de8271_ec24e60f",
        "filename": "src/tests/end2end/VertexBufferRobustnessTests.cpp",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-08-11T11:43:52Z",
      "side": 1,
      "message": "nit: put this in WGPUHelpers?",
      "revId": "2de9ce77f8fcea6d308c9f7c677cfcc5c2a73c20",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}