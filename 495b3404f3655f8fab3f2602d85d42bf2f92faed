{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44b32ce5_4432492f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "More pairs of eyes! ðŸ˜„",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9109fd91_8b2b0292",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "Is this ever supposed to happen if the size of allocations is a reasonable multiple of the input (aka shader source length)? This maybe could be a CHECK()?",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90731cd7_321f96e0",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-12T09:28:03Z",
      "side": 1,
      "message": "No, but the outcome of this actually happening is Not Goodâ„¢. The unconditional guard is sensible, IMO.",
      "parentUuid": "9109fd91_8b2b0292",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e4cd811_bd055eaf",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2023-10-11T21:19:01Z",
      "side": 1,
      "message": "I wonder if we should, instead, align size_in_bytes to smallest multiple of the block size. So we basically always allocate n blocks. This would avoid the subsequent allocation after a large alloc having to grow again.",
      "range": {
        "startLine": 75,
        "startChar": 37,
        "endLine": 75,
        "endChar": 84
      },
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9247a2c1_1a6b7c64",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-11T21:23:59Z",
      "side": 1,
      "message": "Let\u0027s get this in as-is. We can consider optimizations later.",
      "parentUuid": "4e4cd811_bd055eaf",
      "range": {
        "startLine": 75,
        "startChar": 37,
        "endLine": 75,
        "endChar": 84
      },
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "044682e9_9331e88d",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "Just to check, it is the caller that\u0027s supposed to care for alignment?",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09bbcc3b_8355f620",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "For safety we should set the `data.current_data_size` to 0 here, and set it to the size only after we know the allocation succeeded. Ditto data.current should be set only after the allocation succeeded.",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21a00418_1ed2b166",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-12T09:28:03Z",
      "side": 1,
      "message": "David made the same comment, and I replied to that.",
      "parentUuid": "044682e9_9331e88d",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e375c83_98c6a5dd",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-12T09:28:03Z",
      "side": 1,
      "message": "Ack. Will do as a follow-up",
      "parentUuid": "09bbcc3b_8355f620",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f31a62e2_cec59f61",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "Technically I think we should allocate chars because they are the only type of allocation that is allowed to be cast to other types of data.",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "456e9036_6193d7d7",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-12T09:28:03Z",
      "side": 1,
      "message": "We had this discussion before, but I still get spooked by the fluffiness of `char`\u0027s definition in C++. I\u0027ve been bitten by `char` being something unusual before, and I strongly prefer the explicitness of the `cstdint` types.\n\n\u003e Technically I think we should allocate chars because they are the only type of allocation that is allowed to be cast to other types of data.\n\nThis is new to me. Please can you point me at something describing this?\n\nRegardless, I\u0027ll still likely use `Bitcast\u003cT\u003e` as CFI checks can get grumpy about pointer reinterpretation. I\u0027d be hesitant to rely on a `char*` -\u003e `BlockHeader*` being exonerated.",
      "parentUuid": "f31a62e2_cec59f61",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b01c72e5_1458a1a1",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "Note that in Chromium a failure to allocate the uint8_t will crash, and in C++ with exceptions on it will throw an exception. You might want to use `new(std::nothrow) uint8_t`",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a3317f_4195af66",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-12T09:28:03Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "b01c72e5_1458a1a1",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4066216_baa17682",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "Q: We know that we never want to run any destructors here?",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aef20737_5ac51303",
        "filename": "src/tint/utils/memory/bump_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-12T09:28:03Z",
      "side": 1,
      "message": "Yes, because the only way to allocate memory from this is with `Allocate()`, which does not provide a type to construct. Construction / Destruction (if you were to do with memory allocated from this class, which I would discourage) would need to be done externally.",
      "parentUuid": "c4066216_baa17682",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ff2296f_c1fc4e5a",
        "filename": "src/tint/utils/symbol/symbol_table.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-10-12T09:05:52Z",
      "side": 1,
      "message": "Slight worry that the overflow is hidden by returning a placeholder symbol instead of a proper error or a crash.",
      "revId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "495b3404f3655f8fab3f2602d85d42bf2f92faed",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}