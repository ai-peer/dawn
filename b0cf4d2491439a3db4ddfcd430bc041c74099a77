{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "789c2ac6_7cafdbca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-04-08T12:31:19Z",
      "side": 1,
      "message": "The buffer write with the allocated size comes from the line `CopyFromStagingToBuffer` below:\n\n```\nMaybeError BufferBase::CopyFromStagingBuffer() {\n    DAWN_ASSERT(mStagingBuffer !\u003d nullptr \u0026\u0026 mSize !\u003d 0);\n\n    DAWN_TRY(\n        GetDevice()-\u003eCopyFromStagingToBuffer(mStagingBuffer.Get(), 0, this, 0, GetAllocatedSize()));\n\n    DynamicUploader* uploader \u003d GetDevice()-\u003eGetDynamicUploader();\n    uploader-\u003eReleaseStagingBuffer(std::move(mStagingBuffer));\n\n    return {};\n}\n```\n\n```\n \tdawn_native.dll!dawn::native::d3d11::Buffer::WriteInternal(const dawn::native::d3d11::ScopedCommandRecordingContext * commandContext, unsigned __int64 offset, const void * data, unsigned __int64 size) Line 672\tC++\n \tdawn_native.dll!dawn::native::d3d11::Buffer::CopyInternal(const dawn::native::d3d11::ScopedCommandRecordingContext * commandContext, dawn::native::d3d11::Buffer * source, unsigned __int64 sourceOffset, unsigned __int64 size, dawn::native::d3d11::Buffer * destination, unsigned __int64 destinationOffset) Line 710\tC++\n \tdawn_native.dll!dawn::native::d3d11::Buffer::Copy(const dawn::native::d3d11::ScopedCommandRecordingContext * commandContext, dawn::native::d3d11::Buffer * source, unsigned __int64 sourceOffset, unsigned __int64 size, dawn::native::d3d11::Buffer * destination, unsigned __int64 destinationOffset) Line 697\tC++\n \tdawn_native.dll!dawn::native::d3d11::Device::CopyFromStagingToBufferImpl(dawn::native::BufferBase * source, unsigned __int64 sourceOffset, dawn::native::BufferBase * destination, unsigned __int64 destinationOffset, unsigned __int64 size) Line 305\tC++\n \tdawn_native.dll!dawn::native::DeviceBase::CopyFromStagingToBuffer(dawn::native::BufferBase * source, unsigned __int64 sourceOffset, dawn::native::BufferBase * destination, unsigned __int64 destinationOffset, unsigned __int64 size) Line 2405\tC++\n\u003e\tdawn_native.dll!dawn::native::BufferBase::CopyFromStagingBuffer() Line 679\tC++\n \tdawn_native.dll!dawn::native::BufferBase::Unmap() Line 703\tC++\n \tdawn_native.dll!dawn::native::utils::CreateBufferFromData(dawn::native::DeviceBase * device, wgpu::BufferUsage usage, const void * data, unsigned __int64 size) Line 69\tC++\n \tdawn_native.dll!dawn::native::`anonymous namespace\u0027::CreateUniformBufferWithClearValues(dawn::native::DeviceBase * device, const dawn::native::RenderPassDescriptor * renderPassDescriptor, const dawn::native::KeyOfApplyClearColorValueWithDrawPipelines \u0026 key) Line 239\tC++\n \tdawn_native.dll!dawn::native::ApplyClearWithDraw(dawn::native::RenderPassEncoder * renderPassEncoder, const dawn::native::RenderPassDescriptor * renderPassDescriptor) Line 408\tC++\n \tdawn_native.dll!dawn::native::CommandEncoder::BeginRenderPass::\u003clambda_3\u003e::operator()() Line 1374\tC++\n \tdawn_native.dll!dawn::native::CommandEncoder::BeginRenderPass(const dawn::native::RenderPassDescriptor * rawDescriptor) Line 1379\tC++\n \tdawn_native.dll!dawn::native::CommandEncoder::APIBeginRenderPass(const dawn::native::RenderPassDescriptor * descriptor) Line 1129\tC++\n \tdawn_native.dll!dawn::native::NativeCommandEncoderBeginRenderPass(WGPUCommandEncoderImpl * cSelf, const WGPURenderPassDescriptor * descriptor) Line 364\tC++\n \tdawn_proc.dll!wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoderImpl * commandEncoder, const WGPURenderPassDescriptor * descriptor) Line 209\tC++\n \tskia.dll!wgpu::CommandEncoder::BeginRenderPass(const wgpu::RenderPassDescriptor * descriptor) Line 3191\tC++\n \tskia.dll!skgpu::graphite::DawnCommandBuffer::beginRenderPass(const skgpu::graphite::RenderPassDesc \u0026 renderPassDesc, const skgpu::graphite::Texture * colorTexture, const skgpu::graphite::Texture * resolveTexture, const skgpu::graphite::Texture * depthStencilTexture) Line 271\tC++\n \tskia.dll!skgpu::graphite::DawnCommandBuffer::onAddRenderPass(const skgpu::graphite::RenderPassDesc \u0026 renderPassDesc, const skgpu::graphite::Texture * colorTexture, const skgpu::graphite::Texture * resolveTexture, const skgpu::graphite::Texture * depthStencilTexture, SkRect viewport, const skia_private::TArray\u003cstd::__Cr::unique_ptr\u003cskgpu::graphite::DrawPass,std::__Cr::default_delete\u003cskgpu::graphite::DrawPass\u003e\u003e,1\u003e \u0026 drawPasses) Line 104\tC++\n \tskia.dll!skgpu::graphite::CommandBuffer::addRenderPass(const skgpu::graphite::RenderPassDesc \u0026 renderPassDesc, sk_sp\u003cskgpu::graphite::Texture\u003e colorTexture, sk_sp\u003cskgpu::graphite::Texture\u003e resolveTexture, sk_sp\u003cskgpu::graphite::Texture\u003e depthStencilTexture, SkRect viewport, const skia_private::TArray\u003cstd::__Cr::unique_ptr\u003cskgpu::graphite::DrawPass,std::__Cr::default_delete\u003cskgpu::graphite::DrawPass\u003e\u003e,1\u003e \u0026 drawPasses) Line 84\tC++\n \tskia.dll!skgpu::graphite::RenderPassTask::addCommands(skgpu::graphite::Context * context, skgpu::graphite::CommandBuffer * commandBuffer, skgpu::graphite::Task::ReplayTargetData replayData) Line 132\tC++\n \tskia.dll!skgpu::graphite::TaskList::addCommands(skgpu::graphite::Context * context, skgpu::graphite::CommandBuffer * commandBuffer, skgpu::graphite::Task::ReplayTargetData replayData) Line 31\tC++\n \tskia.dll!skgpu::graphite::DrawTask::addCommands(skgpu::graphite::Context * ctx, skgpu::graphite::CommandBuffer * commandBuffer, skgpu::graphite::Task::ReplayTargetData replayTarget) Line 26\tC++\n \tskia.dll!skgpu::graphite::TaskList::addCommands(skgpu::graphite::Context * context, skgpu::graphite::CommandBuffer * commandBuffer, skgpu::graphite::Task::ReplayTargetData replayData) Line 31\tC++\n \tskia.dll!skgpu::graphite::RecordingPriv::addCommands(skgpu::graphite::Context * context, skgpu::graphite::CommandBuffer * commandBuffer, skgpu::graphite::Surface * targetSurface, SkIPoint targetTranslation) Line 155\tC++\n \tskia.dll!skgpu::graphite::QueueManager::addRecording(const skgpu::graphite::InsertRecordingInfo \u0026 info, skgpu::graphite::Context * context) Line 148\tC++\n \tskia.dll!skgpu::graphite::Context::insertRecording(const skgpu::graphite::InsertRecordingInfo \u0026 info) Line 145\tC++\n \tgpu_gles2.dll!gpu::SharedContextState::FlushGraphiteRecorder() Line 743\tC++\n\n```",
      "revId": "b0cf4d2491439a3db4ddfcd430bc041c74099a77",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}