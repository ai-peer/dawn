{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "da3d71dc_3d9c68a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-03T17:29:10Z",
      "side": 1,
      "message": "Looking great. I\u0027ve asked Alan if he could take a look, as he\u0027s far more familiar with the UA rules than I am.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b44c2d2_74611244",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "Looks very good overall. Couple questions about in the comments.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21b862bf_235a1d69",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-03T17:29:10Z",
      "side": 1,
      "message": "If the tag is only for debugging, should this be wrapped in a `#if TINT_DUMP_UNIFORMITY_GRAPH` ?\n\nGiven that it\u0027s non-const, does it need to be a constructor arg?",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 20
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a03768a2_830ec566",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-03T22:36:13Z",
      "side": 1,
      "message": "Done, and made it const. Had to wrap the initialization too.",
      "parentUuid": "21b862bf_235a1d69",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 20
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b1d4e40_2f0bf864",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-03T17:29:10Z",
      "side": 1,
      "message": "You\u0027re missing the header for this. The \"C++ way\" of writing this is: `std::numeric_limits\u003cuint32_t\u003e::max()`",
      "range": {
        "startLine": 100,
        "startChar": 25,
        "endLine": 100,
        "endChar": 35
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df3014e8_e3d57e96",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-03T22:36:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b1d4e40_2f0bf864",
      "range": {
        "startLine": 100,
        "startChar": 25,
        "endLine": 100,
        "endChar": 35
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48ba9b62_f3354b77",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 143,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-03T17:29:10Z",
      "side": 1,
      "message": "I\u0027d recommend traversing the functions in the order described by the dependency graph, like the resolver does. Means you don\u0027t have to recurse at L212.",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 143,
        "endChar": 9
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71df7f0d_678bd2de",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 143,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-03T22:36:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48ba9b62_f3354b77",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 143,
        "endChar": 9
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0979abb_82ce908a",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 340,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "Are the visited nodes reset just to capture the interactions with other parameters? I would have thought this would be similar to the Value_return traversal (which would have to not mark visited).",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82312eeb_8b445c98",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 340,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "Yes, there are cases where if you \"remove\" the node in an earlier traversal (as stated by the spec right now), you\u0027ll miss a relationship between pointer parameters when doing these later traversals.",
      "parentUuid": "c0979abb_82ce908a",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c309dd2_628bdc92",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 399,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "Probably would be useful to add a comment about the desugaring being performed here.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b90c6d7_af2e388e",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 399,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c309dd2_628bdc92",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e79c402f_f205ea50",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 426,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "Pedantically, it seems wrong to use cfx instead of cf here. When you add the loop edge later, I would expect the initializer to not be included in that cycle. I\u0027m not sure this makes a material difference though.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f525a27_77e463ba",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 426,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "Good catch - done.",
      "parentUuid": "e79c402f_f205ea50",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1bfb618_08038e46",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 475,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "Comment about the desugaring would be useful here.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "046402ac_8d8a1e66",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 475,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1bfb618_08038e46",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45ee2024_bf721577",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 600,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "This is clever.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6db810a9_2799a6ed",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 600,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "Isn\u0027t this exactly what the spec says? I think this case falls under:\n\n\u003e reference to uniform built-in value \"x\"\nwhich says that the result is `CF,CF`.\n\nIf I\u0027m doing something weird let me know, and I\u0027ll change it or add a comment.",
      "parentUuid": "45ee2024_bf721577",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2130ea1f_629c2d9e",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 723,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "How does this work in the following situation?\n```\nvar x \u003d 0;\nif (uniform_cond) {\n  x \u003d non_uniform_value;\n} else {\n  if (x \u003e 5) { // Is \"x\" considered uniform here?\n    ...\n  }\n}\n```\n\nIt seems like you\u0027d need to track the value of each local variable as a state heading into each statement rather than globally in the function to be accurate. Is this a case of the spec being unclear?",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "053fc5d0_68e9ccf1",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 723,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "As mentioned offline, I\u0027ve updated how variable values are tracked to make it handle these sorts of cases correctly. Here\u0027s the key parts of the new code:\n\n1. Use the `ScopeStack` to scope variable assignments to the block statement that they happen inside.\n\n2. If the behavior of the block statement contains `Next`, propagate those values to the outer scope when the block exits.\n\n3. If/Else statements: push additional scopes for the `if` and `else` blocks to capture their assignments (to avoid values in one block being visible in the other), and then propagate their values to `{var}_if_exit` nodes if the behavior of those blocks contains `Next`.\n\n4. Loop statements: add nodes to represent the value of any given local variable at the start of the loop, and at exit. When a `break` or `continue` is encountered, add edges from each variable\u0027s value at the point to the corresponding loop exit or loop start variable nodes.\n\n5. Switch statements: similar to the loops case above, but just with exit nodes.\n\n6. Do similar things for pointer parameters when a `return` statement is encountered.\n\nI\u0027ve added *many* more tests to cover the various cases that this new logic now handles.\n\nThis is somewhat complicated, and likely impacts readability and maintainability (sorry!). There may be a simpler implementation that tracks the variable nodes for each control flow node instead of using the scope stack, but we can explore that later.\n\nPTAL!",
      "parentUuid": "2130ea1f_629c2d9e",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b64455_b75eea9f",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 903,
      "author": {
        "id": 1002266
      },
      "writtenOn": "2022-05-05T18:38:29Z",
      "side": 1,
      "message": "Nit: perhaps better described as there currently being no way to have a non-uniform return value.",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "806add03_2e2c5627",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 903,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-10T22:50:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3b64455_b75eea9f",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4152d0b6_09535d57",
        "filename": "src/tint/resolver/uniformity.cc",
        "patchSetId": 11
      },
      "lineNbr": 925,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-03T17:29:10Z",
      "side": 1,
      "message": "Note: the heavy use of recursion here is a little scary. We may want to use vectors much like `ast::TraverseExpression` to avoid the risk of stack-overflows.\n\nCan be done as a followup, if when we encounter issues.",
      "range": {
        "startLine": 919,
        "startChar": 0,
        "endLine": 925,
        "endChar": 9
      },
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "368593a6_7f14f66a",
        "filename": "src/tint/resolver/uniformity_test.cc",
        "patchSetId": 11
      },
      "lineNbr": 2532,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-05-03T17:29:10Z",
      "side": 1,
      "message": "Could also be a benchmark 😊",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6f41c36_8c4a1903",
        "filename": "src/tint/resolver/uniformity_test.cc",
        "patchSetId": 11
      },
      "lineNbr": 2532,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2022-05-03T22:36:13Z",
      "side": 1,
      "message": "I\u0027ve added this as a benchmark but without the error, since E2E tests currently can\u0027t expect a test to fail validation. So I\u0027ve also left the unit test in as well, since it tests that the analysis actually does the right thing in this scenario.\n\nAlso, I tweaked it so that it actually produces a full 255x255 matrix of tags, rather than just 1 tag per parameter.",
      "parentUuid": "368593a6_7f14f66a",
      "revId": "ba14a827d05d4b0fbcd04507494143f9c722bcfe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}