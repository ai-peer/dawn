{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "723b2566_67eec42a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "Posting this partial review as I feel I\u0027m missing some things.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0035d5ac_b60c8103",
        "filename": "tools/src/cts/query/query.go",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "Do we have tests for this file?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee8c87a0_ad0d37ee",
        "filename": "tools/src/cts/query/query.go",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "Yes: https://dawn-review.googlesource.com/c/dawn/+/85221",
      "parentUuid": "0035d5ac_b60c8103",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73ac4fed_8c5c28db",
        "filename": "tools/src/cts/query/query.go",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T15:46:08Z",
      "side": 1,
      "message": "Ok then, is it worth adding a test for this, or can we not test panics?",
      "parentUuid": "ee8c87a0_ad0d37ee",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "853a70c7_e1b0971f",
        "filename": "tools/src/cts/query/query.go",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T16:59:48Z",
      "side": 1,
      "message": "We can do, but these are just seat-belts for silly bad usage. If its code we want to test, then we should probably return a `(Query, error)` pair - but this isn\u0027t something I expect to ever happen.",
      "parentUuid": "73ac4fed_8c5c28db",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f030368_c3863572",
        "filename": "tools/src/cts/query/query.go",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T14:29:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "853a70c7_e1b0971f",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26be152d_cedd7814",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "nit: Given the other review comment can we explain that this case can actually happen with a directory and a .spec.ts?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d194dd4a_6e8cf67b",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26be152d_cedd7814",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27299464_c0a72fe8",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "nit: this means that the in-memory representation of a tree can have a node that has both a \"Foo\" node that is a File, and a \"Foo\" node that is a Test. I don\u0027t think that it is possible?\n\nNote sure if it is worth the change, but we could maybe key only on strings and store the Target on the node? (or that\u0027s already implicitly part of the TreeNode.Query?)",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13756606_c04bb4bd",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "\u003e nit: this means that the in-memory representation of a tree can have a node that has both a \"Foo\" node that is a File, and a \"Foo\" node that is a Test. I don\u0027t think that it is possible?\n\nI don\u0027t think there is anything stopping this from being possible. It\u0027s certainly possible to have a file (with `.spec.ts` extension) and directory with the same name. There\u0027s also no ambiguity in the query syntax, if you were to do this.",
      "parentUuid": "27299464_c0a72fe8",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9763afe_768b1cc9",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T15:46:08Z",
      "side": 1,
      "message": "Ah ok, I need to reread all in the light of this.",
      "parentUuid": "13756606_c04bb4bd",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96f439a6_14f7376a",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "[1] Following up on the conversation offline, I re-read this CL assuming that Nodes can have mixed Target children. However I think it should be possible to prevent it by making sure no spec.ts file in the cts has the same name a a subdirectory of its directory. We have access to the listings in cts/tools/presubmit.ts so that should be relatively easy to add and would simplify the code heavily. Likewise for making the CTS query parsing strict (or at least what this tool supports).",
      "parentUuid": "d9763afe_768b1cc9",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c6e3c21_bf4fdf9a",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Understood. I\u0027d prefer to do this as a followup if possible. This is pretty well tested and soak tested.",
      "parentUuid": "96f439a6_14f7376a",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe058c04_3e8293e1",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T14:29:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4c6e3c21_bf4fdf9a",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c3401ba_19e7d7fd",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "nit: this is called a \"pre-order traversal\"",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13bdacbd_b88196be",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c3401ba_19e7d7fd",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a653c2fd_18344983",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "This comment was meant to suggest replacing the manual description of the visit with that term ;)",
      "parentUuid": "13bdacbd_b88196be",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e399dcf3_f74e2ac9",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "I know. I hadn\u0027t pushed changes yet. With that said:\n\nI\u0027m aware that this is pre-order traversal, but actually explaining the algorithm saves the most common readers from going to look this up to remember what \u0027pre-order\u0027 actually means. Added this in parentheses.",
      "parentUuid": "a653c2fd_18344983",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac4e23dc_512ec423",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "Maybe mention that it starts from leaves and goes up?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77ac8b83_84d24216",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ac4e23dc_512ec423",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f520a7c_c3b3174d",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77ac8b83_84d24216",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d54f5357_1b5d18f8",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "nit: Returns the merge data if this node is completely merged, nil otherwise.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "772be7ff_6948e850",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d54f5357_1b5d18f8",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34e992eb_b9cf1533",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "Why do we merge per target type? I would have imagined that all target types at a node are the same, so we\u0027d try to map all childrens, map the ones that worked to new shallow nodes, and if all nodes were successfully mapped, then merge this node. So it would be:\n\n```\nmergedChildren :\u003d map[string]Data{}\nallChildrensMerged :\u003d true\nfor key,child {\n  childData :\u003d child.merge\n  if !childData {allChildrensMerged \u003d false}\n  mergedChildren[key] \u003d childData\n}\n\nif allChildrensMerged {\n  // Try to merged mergedChildren.keys()\n  // if success return the result of the merge\n}\n\nfor key :\u003d range.n.Children.keys() {\n  if mergedChildren[key] !\u003d nil {\n    // replace that child.\n  }\n}\n\nreturn nil;\n```",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b299f6f5_44d886f6",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "\u003e Why do we merge per target type?\n\nBecause a merged node needs to end in a wildcard, and a wildcard needs to have a target delimiter. So only target types can be merged.\n\nExample: `a:b:*` is a merged tree, not `a:b`.",
      "parentUuid": "34e992eb_b9cf1533",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55e5a90f_e0c363a4",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b299f6f5_44d886f6",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68b13490_5488399e",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "Why is this conversion necessary? The type of the key is lost?",
      "range": {
        "startLine": 176,
        "startChar": 2,
        "endLine": 176,
        "endChar": 21
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a277cb8_8dcaf1ca",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Good catch - it wasn\u0027t necessary. Stale code from when I was trying to use a slice instead of a map.",
      "parentUuid": "68b13490_5488399e",
      "range": {
        "startLine": 176,
        "startChar": 2,
        "endLine": 176,
        "endChar": 21
      },
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "036dacc3_c775d9ce",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "nit: Can we always make sure that Children is initialized to the empty list? Or check that first and create the empty list? That way the creation of the TreeNode is done only in one place.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f1a1e59_8f36959e",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "This was a minor optimization. There are *a lot* of nodes, and creating pointless empty maps for each of the leaves is just adding more unnecessary pressure on the GC.",
      "parentUuid": "036dacc3_c775d9ce",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99337162_b8aa7d67",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T14:29:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5f1a1e59_8f36959e",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f3de8a_948d50f9",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "nit: why not return nil, err?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "519a8979_a92d18ee",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "Because Tree is a struct, which cannot be assigned nil.",
      "parentUuid": "f7f3de8a_948d50f9",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aae21428_172a3cf8",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "That\u0027s pretty cool.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc88e87d_5cd782cd",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T13:09:26Z",
      "side": 1,
      "message": "Why isn\u0027t Tree just a TreeNode with an empty query?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce041677_59a4b821",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-19T14:07:54Z",
      "side": 1,
      "message": "It is. It uses an anonymous field, which is similar to a mixin.",
      "parentUuid": "bc88e87d_5cd782cd",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77441de2_eb3c44d7",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-19T15:46:08Z",
      "side": 1,
      "message": "Thanks, I didn\u0027t realize that was a thing.",
      "parentUuid": "ce041677_59a4b821",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c38dd158_754ed66b",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "u-nit: Shouldn\u0027t this whole function be root.merge(t.TreeNode) and if it returns non-nil then we create a new TreeNode(*)?\n\nThat might  never happen in practice so feel free to ignore.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7b7fe67_f2187eb4",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Afraid not, as a `Reduce()` can then wildcard away the whole query, including the suite. We want to ensure the suite is always included.",
      "parentUuid": "c38dd158_754ed66b",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3b05cd6_06cd94ff",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "Don\u0027t we have the invariant that a node called * can\u0027t have children because it is already merged? So in this case we\u0027d just stop and do nothing.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f84bc79_ceb6061f",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "This is the `to` query, where we want to reduce to stop at, which is shorter than the tree query.\n\nRelevant test:\n\n```\n{\n\tlocation: utils.ThisLine(),\n\tto:       Q(`suite:a,*`),\n\tin: []QueryData{\n\t\t{Query: Q(`suite:a,b,*`), Data: pass},\n\t\t{Query: Q(`suite:a,c,*`), Data: pass},\n\t},\n\texpect: []QueryData{\n\t\t{Query: Q(`suite:a,*`), Data: pass},\n\t},\n},\n```",
      "parentUuid": "d3b05cd6_06cd94ff",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5b786a0_914876d8",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T14:29:17Z",
      "side": 1,
      "message": "Whoops, I kept getting confused between what was the query and what was the tree in these functions. Ack.",
      "parentUuid": "0f84bc79_ceb6061f",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b12313a_8d7790ed",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "Shouldn\u0027t the merged child be replaced in the parent? My understanding of the comment for ReduceTo is that it reduces the whole subtree including the node pointed by the query.",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34172f75_c9e928f1",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "I don\u0027t think so.\n\n`merge()` will merge all the children, and possibly create wildcards under itself.\n\nIf I understand you correctly, you\u0027d suggest changing this to:\n\n```\nif q \u003d\u003d to {\n\tnode.merge(f)\n\treturn nil\n}\nnode \u003d child\n```\n\nThis would mean that the `to` node could be folded into a wildcard at the parent, which isn\u0027t desirable.\n\nRelevant test:\n\n```\n{\n\tlocation: utils.ThisLine(),\n\tto:       Q(`suite:a`),\n\tin: []QueryData{\n\t\t{Query: Q(`suite:a,b,*`), Data: pass},\n\t\t{Query: Q(`suite:a,c,*`), Data: pass},\n\t},\n\texpect: []QueryData{\n\t\t{Query: Q(`suite:a,*`), Data: pass},\n\t},\n},\n```",
      "parentUuid": "8b12313a_8d7790ed",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45fa9a72_0b8d974d",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T14:29:17Z",
      "side": 1,
      "message": "Ack, that wildcards are a single child below the path is a bit weird, I was wondering is we could make all nodes implicitly wildcards for their query, but I\u0027m sure this would break other stuff. Maybe we should call this `ReduceUnder`?",
      "parentUuid": "34172f75_c9e928f1",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9026344c_f4e1b74d",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-20T17:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45fa9a72_0b8d974d",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c31556_553ea3d6",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "This looks correct but would also get simplified by [1]",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a86ebdbf_49e2232c",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "56c31556_553ea3d6",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34e3a393_8e6310d2",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 321,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "I\u0027m not sure why we special case Cases, aren\u0027t subtree for cases also making a tree of nodes?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccebfe22_3f69f028",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 321,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "No. Cases are special, as they\u0027re not describable as a simple tree (they\u0027re a bunch of key-value pairs), so the tree has all the Cases as a single node.\n\nWe do however want glob to filter based on the the case keys provided, hence the special casing here.",
      "parentUuid": "34e3a393_8e6310d2",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2452ef92_929a0061",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 321,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T14:29:17Z",
      "side": 1,
      "message": "Can this special-casing of Cases be described somewhere? I didn\u0027t see it anywhere.",
      "parentUuid": "ccebfe22_3f69f028",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "589e2512_9dc72f42",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 321,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-20T17:38:43Z",
      "side": 1,
      "message": "It\u0027s mentioned on L25 and L42",
      "parentUuid": "2452ef92_929a0061",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e062df86_d992f268",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 346,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "When does that happen? It seems that if a query gets us to a node, then all children of that node should be contained in that query, no?",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64fe2395_f9367b56",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 346,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Due to cases. Added a comment.",
      "parentUuid": "e062df86_d992f268",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8d830a9_1c8b23bd",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 346,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-20T17:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64fe2395_f9367b56",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c7845f_09edf005",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-04-20T13:22:38Z",
      "side": 1,
      "message": "That\u0027s [1] again :)",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d41254d0_4b4a0d00",
        "filename": "tools/src/cts/query/tree.go",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-04-20T14:16:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "48c7845f_09edf005",
      "revId": "b7b3fd57b3257b77e1685e9ea5994f824b4d1e96",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}