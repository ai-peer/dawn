{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a59ae6_f33683d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-13T16:21:32Z",
      "side": 1,
      "message": "I think what we should do is:\n\n 1. Expose the multiplanar formats as long as the device supports them (no gating on shared resource tier). We should really add some `device-\u003eCheckFormatSupport` for the set of multiplanar formats we expose.\n 2. Always enable Feature::SharedTextureMemoryD3D11Texture2D\n 3. Add a Feature::SharedTextureMemoryDXGISharedHandleMultiPlanar (gated on shared resource tier)",
      "revId": "817fa6e703b90467a7a6e079adca75254a195f41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f43c16_c581b48d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-13T16:25:01Z",
      "side": 1,
      "message": "otherwise, I think you *do* need the check discussed at [here](https://dawn-review.googlesource.com/c/dawn/+/174722/comment/b0699ef7_08cda17e/) for multiplanar formats. and that would be a poor design since it\u0027s not discoverable whether shared handle works for multiplanar until you try to do it and it fails.",
      "parentUuid": "c6a59ae6_f33683d2",
      "revId": "817fa6e703b90467a7a6e079adca75254a195f41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23175afc_f7a46288",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-02-13T16:42:21Z",
      "side": 1,
      "message": "That is non-trivial, since we have to rename the feature, and change all related backends. Probably we should design it carefully and then do it in right way in follow up CLs. At same time, we need a simple CL fixes the immediately crashes.",
      "parentUuid": "05f43c16_c581b48d",
      "revId": "817fa6e703b90467a7a6e079adca75254a195f41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b54cbd7_44682d66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-13T17:23:00Z",
      "side": 1,
      "message": "which bug is this for? crbug.com/41491303 is linked, but that\u0027s a Vulkan crash.",
      "parentUuid": "23175afc_f7a46288",
      "revId": "817fa6e703b90467a7a6e079adca75254a195f41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4174289d_4e75adb0",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 432,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-02-13T16:21:32Z",
      "side": 1,
      "message": "is this check effectively redundant with the check that the devices are the same, just below?",
      "range": {
        "startLine": 431,
        "startChar": 12,
        "endLine": 432,
        "endChar": 57
      },
      "revId": "817fa6e703b90467a7a6e079adca75254a195f41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14464ac1_f3798b16",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 432,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-02-13T16:42:21Z",
      "side": 1,
      "message": "Right now, chrome initializes ANGLE first, and then create graphite\u0027s dawn device with ANGLE\u0027s d3d11 device. Is this case, the `IsSharedD3D11Dewvice()` is true. \n\nThere could be use cases, dawn device is created first, and then someone uses the d3d11 device from the dawn device, in this case, `IsSharedD3D11Dewvice()` will be false. It prevent this use case. I think the current d3d11 backend doesn\u0027t support this case well, becasue dawn isn\u0027t ware the sharing, and it will not use d3d11 in threadsafe way. Maybe we can support that use case in future.",
      "parentUuid": "4174289d_4e75adb0",
      "range": {
        "startLine": 431,
        "startChar": 12,
        "endLine": 432,
        "endChar": 57
      },
      "revId": "817fa6e703b90467a7a6e079adca75254a195f41",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}