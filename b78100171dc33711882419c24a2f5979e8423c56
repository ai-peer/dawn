{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cba6ac53_06a0d80b",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1547,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T13:52:15Z",
      "side": 1,
      "message": "This works, though I\u0027d usually cast the 1.0 to the type of `i`, like:\n\n```\nusing NumberT \u003d decltype(i);\nif (i.value \u003c\u003d NumberT(-1.0) || i.value \u003e\u003d NumberT(1.0)) {\n```\n\nThe only reason I like this more is that there\u0027s no casting performed for double (abstract-float) and f16.",
      "range": {
        "startLine": 1547,
        "startChar": 12,
        "endLine": 1547,
        "endChar": 62
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a90e609d_69e568a1",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1547,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-25T14:06:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cba6ac53_06a0d80b",
      "range": {
        "startLine": 1547,
        "startChar": 12,
        "endLine": 1547,
        "endChar": 62
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1545f4a_9f58783f",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1560,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T13:52:15Z",
      "side": 1,
      "message": "Since you made transform return ImplResult, you can simply replace all this with:\n\n```\n    return TransformElements(builder, ty, transform, args[0]);\n```",
      "range": {
        "startLine": 1556,
        "startChar": 0,
        "endLine": 1560,
        "endChar": 13
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e705c2d6_d20c42ac",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 4
      },
      "lineNbr": 1560,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-25T14:06:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1545f4a_9f58783f",
      "range": {
        "startLine": 1556,
        "startChar": 0,
        "endLine": 1560,
        "endChar": 13
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03406ab4_85b29089",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 264,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T13:52:15Z",
      "side": 1,
      "message": "Can we add tests for -1.0 and 1.0 as well?",
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d3a13fc_582cac6c",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 264,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-25T13:58:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "03406ab4_85b29089",
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cfc3a75_d77cf922",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T13:52:15Z",
      "side": 1,
      "message": "Okay, but since the tests are all exactly the same, it would be nicer if this were a parameterized test.",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83148d43_05e9225d",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-25T13:58:49Z",
      "side": 1,
      "message": "Given they\u0027re short and easy to read, I\u0027d prefer to avoid parameterization. I find parameterizing tests makes it a lot harder to understand what\u0027s happening.",
      "parentUuid": "8cfc3a75_d77cf922",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cdf90a5_5dbc3a06",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T14:02:41Z",
      "side": 1,
      "message": "When I see multiple tests like this, I scan for what the difference is between them. I think paramterizing this would be easy given the only parameter is the scalar value.",
      "parentUuid": "83148d43_05e9225d",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "726a8c3d_39f2d84b",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-25T14:06:05Z",
      "side": 1,
      "message": "The parameterization isn\u0027t hard, but I find it does makes it harder to understand the test and harder to deal with test failures. Seeing a named test is a lot easier to sort out then a `/2` and trying to figure it out based on the parameters being emitted.",
      "parentUuid": "4cdf90a5_5dbc3a06",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ded9db0_9f96dfa8",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T14:17:52Z",
      "side": 1,
      "message": "I don\u0027t really understand why this is harder to understand - the failure will output the parameter that was used, which in this case would be the scalar value. The advantage of parameterized tests is that it makes it clear when reading the code that we\u0027re testing one thing for multiple inputs. The large duplication of tests we have in Tint make it actually harder to parse and update as there\u0027s just so much more code than necessary.",
      "parentUuid": "726a8c3d_39f2d84b",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c87cae2_d4764b52",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-10-25T16:14:41Z",
      "side": 1,
      "message": "I was not able to get the parameterized version of this working after about half an hour.",
      "parentUuid": "5ded9db0_9f96dfa8",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb683e68_a837584d",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-10-25T17:36:36Z",
      "side": 1,
      "message": "Given that:\n(a) there\u0027s no clear example on how error cases should be parameterized with the existing code in this file\n(b) the diagnostic may want to vary based on the error (include computed value, differ for non-finites, etc)\n(c) there\u0027s only 4 of these tests.\n\nI\u0027ll put my vote for keeping as-is, and looking to refactor if we find there\u0027s a bunch more, and there\u0027s a clear pattern which would benefit from parameterization.",
      "parentUuid": "5c87cae2_d4764b52",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512b9085_835a2c32",
        "filename": "src/tint/resolver/const_eval_builtin_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-10-25T17:45:10Z",
      "side": 1,
      "message": "Discussed offline, and already agreed to keep as-is instead of wasting time fighting difficult to comprehend compiler errors. I figured out the problem, in the end, though, and may turn this into parameterized tests later.",
      "parentUuid": "fb683e68_a837584d",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 320,
        "endChar": 1
      },
      "revId": "b78100171dc33711882419c24a2f5979e8423c56",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}