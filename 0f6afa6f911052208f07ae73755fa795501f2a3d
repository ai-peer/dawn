{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "48518d7e_1b6d6969",
        "filename": "src/tint/ir/instruction.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-27T13:48:09Z",
      "side": 1,
      "message": "Is `Sequenced` an LLVM name? `Orderered`  might be a bit clearer? My brain doesn\u0027t really think of instructions as sequenced so much as ordered. (Also makes more sense with the comment in that an `Ordered` instruction can not be `reordered with other instructions`",
      "revId": "0f6afa6f911052208f07ae73755fa795501f2a3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "339f50b9_81bf32a6",
        "filename": "src/tint/ir/instruction.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-27T14:00:54Z",
      "side": 1,
      "message": "I tried to use a different term than ordered, as instructions are implicitly ordered in the block. It\u0027s just that some of those instructions cannot be moved before or after other instructions without changing the semantics of the program.\n`Sequenced` seemed to match the description of what I was after, without conflicting with the natural ordering in a block.",
      "parentUuid": "48518d7e_1b6d6969",
      "revId": "0f6afa6f911052208f07ae73755fa795501f2a3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87c4d152_7a788cfb",
        "filename": "src/tint/ir/instruction.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-27T14:05:18Z",
      "side": 1,
      "message": "K, `Sequenced` is probably fine then. Or something like `Pinned` or `Fenced` ?",
      "parentUuid": "339f50b9_81bf32a6",
      "revId": "0f6afa6f911052208f07ae73755fa795501f2a3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4519b8a9_14ddfbe2",
        "filename": "src/tint/ir/instruction.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-06-27T14:13:16Z",
      "side": 1,
      "message": "`Pinned` - they\u0027re free to move W.R.T unsequenced instructions, and I\u0027d expect a pinned one couldn\u0027t move at all.\n`Fenced` - a fence is a different beast, usually operating on some memory. We might want to move to this sort of model in the future (a proper dependency graph), but this sufficed for now.\n\nOpen to more suggestions.",
      "parentUuid": "87c4d152_7a788cfb",
      "revId": "0f6afa6f911052208f07ae73755fa795501f2a3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "468b8e30_8748fbdd",
        "filename": "src/tint/ir/instruction.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-27T14:23:22Z",
      "side": 1,
      "message": "Hm, the can move with respect non-tagged items is the tricky bit, I don\u0027t really get that with sequenced either. I\u0027m tempted to think `Barrier`, but also that seems unmoveable.\n\nIn SPIRV-Tools, this is called a `NonCombinatorial` instruction. Apparently Combinatorial Instructions is the state of art for these.",
      "parentUuid": "4519b8a9_14ddfbe2",
      "revId": "0f6afa6f911052208f07ae73755fa795501f2a3d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}