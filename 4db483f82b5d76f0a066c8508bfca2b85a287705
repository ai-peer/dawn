{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2d38359e_7a337092",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-14T00:47:14Z",
      "side": 1,
      "message": "WDYT? I found myself doing a lot of either:\n- Factoring stuff into \"silly\" helpers like CreateTexture that does various test-specific defaults.\n  This is not nice for test readability because you can\u0027t see the whole texture descriptor in the test\n- Copy-pasting lots of tests with slight modifications - not good for maintenance.\n- Moving multiple tests into a single test function so I can share code better without lots of helpers.\n  But then we lose the ability to do DAWN_SKIP_TEST_IF for a specific part of the test.\n\nFor texture initialization tests, for example, I want to be able to do something like:\n\nTEST_P(Cls, Name) {\n  wgpu::TextureDescriptor desc;\n  desc.dimension \u003d GetParam().dimension;\n  desc.size \u003d { kWidth, kHeight, GetParam().depthOrArrayLayers };\n\n  // etc.\n}\n\nOverall, this is just resurfacing parameterization that gtest\u0027s INSTANTIATE_TEST_SUITE_P is supposed to help with. We just didn\u0027t have it at first because of the complexity of filtering based on available backends.",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d38100_df0283c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "LGTM",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa697c4_c6148bd7",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 491,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "Could we have this be in a file in common/ like \"PreprocessorMagic.h\"? ^^ Also it would be nice to have more comments to explain how the magic works. For example I\u0027m not sure I understand why DAWN_PP_CONCATENATE needs 3 levels.",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c6bb047_44b5e71a",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 491,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-17T19:56:09Z",
      "side": 1,
      "message": "Done. Added a comment. Need to expand the tokens before concatenating.",
      "parentUuid": "dfa697c4_c6148bd7",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "999e38cc_1e1d02f2",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 519,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "Will this macro be removed in favor of DAWN_INSTANTIATE_TEST_P (or better DAWN_INSTANTIATE_TEST_P will be renamed to DAWN_INSTANTIATE_TEST)?",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31c9771f_bf82ee34",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 519,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-17T19:56:09Z",
      "side": 1,
      "message": "Maybe not? Not all tests need the parameterization, and using it involves some extra curly braces which is not super pretty to use.",
      "parentUuid": "999e38cc_1e1d02f2",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee5969f2_068f333c",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 519,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-18T08:15:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "31c9771f_bf82ee34",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1039d24e_ed607383",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 533,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "nit: that",
      "range": {
        "startLine": 533,
        "startChar": 77,
        "endLine": 533,
        "endChar": 78
      },
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fbd4303_760263d2",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 533,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-17T19:56:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1039d24e_ed607383",
      "range": {
        "startLine": 533,
        "startChar": 77,
        "endLine": 533,
        "endChar": 78
      },
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a366bc_571377b0",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 545,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "nit: the m_ prefix is a bit weird, but I don\u0027t know a better solution given the fields are given as CamelCase.",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36c8bbd2_724b68b6",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 545,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-17T19:56:09Z",
      "side": 1,
      "message": "I removed the underscore. It should be fine if types are CamelCase, but if you pass in raw \"integer\" then it would be named \"minteger\". We can just say you shouldn\u0027t do that though and alias it to something nice.",
      "parentUuid": "05a366bc_571377b0",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b721378_a1dec22e",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 548,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "Can we have doc for this macro as well?",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8908c7c_ed0d91e4",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 548,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-17T19:56:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b721378_a1dec22e",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7051c0eb_7cdb6c8b",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 549,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-17T08:19:40Z",
      "side": 1,
      "message": "nit: technically __ is reverved for the compiler. Maybe use _Dawn_Foo?",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "610ba0e0_5f8011a6",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 3
      },
      "lineNbr": 549,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-17T19:56:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7051c0eb_7cdb6c8b",
      "revId": "4db483f82b5d76f0a066c8508bfca2b85a287705",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}