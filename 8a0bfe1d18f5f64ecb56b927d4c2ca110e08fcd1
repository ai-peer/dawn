{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "33c2b301_00d43cc7",
        "filename": "src/tint/cmd/fuzz/wgsl/generate_wgsl_corpus.py",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-02T17:16:52Z",
      "side": 1,
      "message": "I think this should be in `scripts/` not `/src/tint/cmd/fuzz/wgsl`",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c9ba46_82888215",
        "filename": "src/tint/cmd/fuzz/wgsl/generate_wgsl_corpus.py",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-02T18:35:24Z",
      "side": 1,
      "message": "I considered other places for this, but it is tightly coupled to the specific GN target declared by this directory.",
      "parentUuid": "33c2b301_00d43cc7",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88d4fae7_8ed6dc59",
        "filename": "src/tint/cmd/fuzz/wgsl/generate_wgsl_corpus.py",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-02T17:16:52Z",
      "side": 1,
      "message": "nit: 2023",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08bc1ed6_9aff0ff5",
        "filename": "src/tint/cmd/fuzz/wgsl/generate_wgsl_corpus.py",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-02T18:35:24Z",
      "side": 1,
      "message": "It\u0027s copied from `src/tint/fuzzers/generate_wgsl_corpus.py`, so isn\u0027t new, and so doesn\u0027t get a new year.",
      "parentUuid": "88d4fae7_8ed6dc59",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77e35ebd_6d0eb858",
        "filename": "src/tint/cmd/fuzz/wgsl/wgsl_fuzz.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-02T17:16:52Z",
      "side": 1,
      "message": "Still not sold on this idea. This means we\u0027ll be blocking fuzzing targets if earlier targets have bugs. Which means that anything later in the stack will end u getting fuzzed less then the stuff at the beginning as the earlier items trigger crashes.\n\nIt seems like this would be better as a general main and a simple way to combine that with a cc file in the cmake/gn files to generate each fuzz executable.\n\nIt would also mean you can run a fuzzer in isolation without having to run all the other fuzzers as well.",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "844fb254_db46e923",
        "filename": "src/tint/cmd/fuzz/wgsl/wgsl_fuzz.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-10-02T17:27:05Z",
      "side": 1,
      "message": "\u003e Which means that anything later in the stack will end u getting fuzzed less then the stuff at the beginning as the earlier items trigger crashes.\n\nOnly if we have a crashing bug that the fuzzers can\u0027t work around, which is a serious issue we need to fix ASAP.\n\n\u003e It seems like this would be better as a general main and a simple way to combine that with a cc file in the cmake/gn files to generate each fuzz executable.\n\nEach fuzzer executable uses a separate fuzzer corpus - which is inefficient in terms of storage and means that some fuzzers will always be behind in terms of coverage of others.\n\nThis approach means that all the WGSL fuzzers gain the same level of knowledge, in-step. The SPIR-V reader can also pass the IR / WGSL program to the same set of transforms, without a combinatorial explosion of executables.\n\n\u003e It would also mean you can run a fuzzer in isolation without having to run all the other fuzzers as well.\n\nI\u0027m not sold that this is a must-have feature. If it turns out it really helps debugging, then it\u0027s something I can easily add as a command line flag.",
      "parentUuid": "77e35ebd_6d0eb858",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ae03238_91870b02",
        "filename": "src/tint/cmd/fuzz/wgsl/wgsl_fuzz.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-02T17:35:07Z",
      "side": 1,
      "message": "\u003e \u003e Which means that anything later in the stack will end u getting fuzzed less then the stuff at the beginning as the earlier items trigger crashes.\n\u003e \n\u003e Only if we have a crashing bug that the fuzzers can\u0027t work around, which is a serious issue we need to fix ASAP.\n\u003e \n\nEvery fuzzer bug is a crashing bug, as that\u0027s how the fuzzer will notify the framework that it failed.\n\n\n\u003e \u003e It seems like this would be better as a general main and a simple way to combine that with a cc file in the cmake/gn files to generate each fuzz executable.\n\u003e \n\u003e Each fuzzer executable uses a separate fuzzer corpus - which is inefficient in terms of storage and means that some fuzzers will always be behind in terms of coverage of others.\n\nI don\u0027t think storage is an issue, at least not that I\u0027ve ever heard.\n\nNot sure I understand by the idea that some fuzzers are behind? They may explore different trees, but that just means they\u0027ve followed different paths, not that they\u0027re behind.\n\n\n\u003e \n\u003e This approach means that all the WGSL fuzzers gain the same level of knowledge, in-step. The SPIR-V reader can also pass the IR / WGSL program to the same set of transforms, without a combinatorial explosion of executables.\n\u003e \n\nWhy can\u0027t the SPIR-V reader pass the IR/WGSL program to the same set of transforms? We can just fuzz the spirv-reader path, we don\u0027t have to fuzz every possible transform coming out of spir-v reader?",
      "parentUuid": "844fb254_db46e923",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f71d5bca_e0e133dd",
        "filename": "src/tint/cmd/fuzz/wgsl/wgsl_fuzz.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-10-02T18:13:31Z",
      "side": 1,
      "message": "Chatted with Ben. My largest concern that we\u0027d be blocking fuzzing things that happen to sort later, while, true, we think we can fix with policy instead of multiple fuzz targets. Something along the lines of Tint team comitting to fixing all fuzz issues (including non-stable block issues) in 2business days.\n\nThat would keep the fuzzers from stopping looking down mutation paths due to being block on crashes.",
      "parentUuid": "4ae03238_91870b02",
      "revId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com OR uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com OR uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com","uploader:chrome-automated-expectation@chops-service-accounts.iam.gserviceaccount.com","uploader:chrome-branch-day@chops-service-accounts.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "8a0bfe1d18f5f64ecb56b927d4c2ca110e08fcd1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}