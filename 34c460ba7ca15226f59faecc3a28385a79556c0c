{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cc5b8d19_a163fe76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-12-20T15:19:54Z",
      "side": 1,
      "message": "I see that a lot of work went into this, but I don\u0027t know that the gains justify the additional noise and complexity:\n\n - RenderPipeline stuff can be done just in the frontend, once in validation and once in the constructor.\n - Sampler stuff could be moved to be in the frontend.\n - aspects() seems to be the only annoying one. Maybe we can do the defaulting on the encoder/device/queue top level methods and copy on the stack for the defaulting if need be.\n\n(to de-risk it would be possible to split in different CLs too)",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f62e7e4_e6500275",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-12-20T19:58:54Z",
      "side": 1,
      "message": "No worries, the work was really just the generator and then inserting parentheses on every error.\n\nI didn\u0027t think of using the defaulting only in validation and constructor. This makes sense. I will try these!\n\nFor any leftovers I think it will be fine to do defaulting on a copy. I started trying this and it wasn\u0027t that bad.",
      "parentUuid": "cc5b8d19_a163fe76",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3266108_6cec55bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-12-20T20:01:20Z",
      "side": 1,
      "message": "fyi I was curious so I ran the binary size trybot:\n\nhttps://chrome-supersize.firebaseapp.com/viewer.html?load_url\u003dhttps://storage.googleapis.com/chromium-binary-size-trybot-results/android-binary-size/2023/12/20/1730671/supersize_diff.sizediff",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bc13c5c_31198c60",
        "filename": "src/dawn/native/opengl/RenderPipelineGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-12-20T15:19:54Z",
      "side": 1,
      "message": "All of the defaulting for the RenderPipeline could be done in the frontend so changes would only be potentially be needed in ValidateRenderPipelineDescriptor and in RenderPipelineBase::RenderPipelineBase. IMHO it doesn\u0027t look too onerous to do that.",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f021499d_1bb9487f",
        "filename": "src/dawn/native/opengl/RenderPipelineGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-12-22T00:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3bc13c5c_31198c60",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9f42b33_1258e140",
        "filename": "src/dawn/native/vulkan/SamplerVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-12-20T15:19:54Z",
      "side": 1,
      "message": "Maybe we could change SamplerBase to store all of these if it doesn\u0027t already, then the backends to use the getters (that will have the already defaulted values).",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a75de33d_db881ab9",
        "filename": "src/dawn/native/vulkan/SamplerVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-12-22T00:31:12Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b9f42b33_1258e140",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f44ada_d7c8534e",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 662,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-12-20T15:19:54Z",
      "side": 1,
      "message": "We could require the dimension to be specified for something low level like this IMHO.\n\nWith this set of comments, the changes in the Vulkan backend don\u0027t require the defaulting-getters at all!",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ef70247_b8cd8e7e",
        "filename": "src/dawn/native/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 662,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-12-22T00:31:12Z",
      "side": 1,
      "message": "Easier to just implement the defaulting because otherwise I think I would need to do a Chromium patch so it doesn\u0027t rely on zero-init. At least that was true for something in CopyImageForBrowser, I don\u0027t remember exactly what.",
      "parentUuid": "f5f44ada_d7c8534e",
      "revId": "34c460ba7ca15226f59faecc3a28385a79556c0c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}