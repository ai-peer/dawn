{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc59857f_9119d397",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-06T22:10:56Z",
      "side": 1,
      "message": "Thank you for the review, I think I\u0027ve addressed the issues below!",
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1956aa51_eb517848",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-06T22:15:57Z",
      "side": 1,
      "message": "LGTM, but will still need another review",
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80f54257_cd47b3c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-09T18:32:17Z",
      "side": 1,
      "message": "some clarifying questions",
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9bcd7f3_1f846e0a",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-09T18:32:17Z",
      "side": 1,
      "message": "is this ever set to true?\n\nnevermind - I see it\u0027s set in the next CL. Should setting mUseBindingAsRegister work regardless of whether we use SPIRV to DXIL ?",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 39
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f54f7a87_328c6db8",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-09T23:53:22Z",
      "side": 1,
      "message": "It should work regardless--as long as we target \u003e\u003d sm 5.1 (Should be fine for all feature levels of DX12, DX11 maxes out at sm 5.0).\n\nIf we want to support SM5.0, we\u0027d have to stay under the max slot counts per resource type (which are each relatively low, ~16). In that case, it might be worth compacting the registers even further. Currently we\u0027re only compacting registers for samplers vs non-samplers (basically reusing the descriptor heap offset as the register), but could do it per resource type.\n\nI have a couple of questions I\u0027d like your opinons on:\n1. Do you think it\u0027s worth it to include the \"register compacting\" behavior, given that Dawn only (currently) targets d3d12/sm51?\n2. And if yes, do you think it\u0027s worth doing the extra compaction described above and exposing the feature as e.g. a separate ctor such that it can be tested (+ eventually reused by a d3d11 backend)?",
      "parentUuid": "e9bcd7f3_1f846e0a",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 39
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eb6f708_c1c208a8",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2021-08-10T03:01:49Z",
      "side": 1,
      "message": "Ahh, I didn\u0027t realize that FL11_0 corresponds to SM5.1. (Specifically I didn\u0027t realize that the FL\u003c-\u003e SM correspondence is different between D3D11 and D3D1.)\n\nIt doesn\u0027t seem super important to keep the compacting behavior, but if we already have it (IIUC we do?) then we may as well keep it. We do want to start working on D3D11 soon*ish*.",
      "parentUuid": "f54f7a87_328c6db8",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 39
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c7f16c9_f0f6a888",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-10T20:38:45Z",
      "side": 1,
      "message": "If I understand correctly, FL 11.0 on d3d12 means sm 5.1, but on d3d11 it means sm 5.0 (from https://docs.microsoft.com/en-us/windows/win32/direct3d11/overviews-direct3d-11-devices-downlevel-intro#feature-support-for-feature-levels-12_2-through-9_3)\n\nWe currently partially comact the register space, this change (https://dawn-review.googlesource.com/c/dawn/+/61560/1) shows how it\u0027d look if it were even more aggresively packed. Note that compacting registers doesn\u0027t prevent issues with sm50, it just mitigates them--one could still create a shader with 16 cbvs, which would be over the max slot count.",
      "parentUuid": "3eb6f708_c1c208a8",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 39
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42950ca2_0ec61ad5",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-11T23:30:14Z",
      "side": 1,
      "message": "if it keeps the binding model more compatible with D3D11, then I think it\u0027s worth it to preserve the ability to compact like this. We\u0027d like webgpu compat on D3D11 to follow close after core webgpu.",
      "parentUuid": "6c7f16c9_f0f6a888",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 39
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f06e20_28a8d64f",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-09T18:32:17Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 127,
        "endChar": 74
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27bf1db5_50ff9e3c",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-09T18:32:17Z",
      "side": 1,
      "message": "so if I\u0027m understanding correctly, we always use the BindingNumber as the shader register for dynamic buffers. would it make sense to put that logic inside GetShaderRegister(BindingIndex) ?",
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfbdf29a_33006bcf",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-09T23:53:22Z",
      "side": 1,
      "message": "I like that more--it makes mBindingOffsets a little more focused in purpose. \n\nHowever, I think you\u0027ve found a bug in that this could conflict with below... time for me to write a test ðŸ˜„",
      "parentUuid": "27bf1db5_50ff9e3c",
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0644bfa_c71f84d8",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-09T23:53:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "76f06e20_28a8d64f",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 127,
        "endChar": 74
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13517252_fbb7c73c",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-09T18:32:17Z",
      "side": 1,
      "message": "is it a problem if these offsets conflict with those at [1] ?",
      "range": {
        "startLine": 142,
        "startChar": 9,
        "endLine": 144,
        "endChar": 78
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba498f6e_26ffaf67",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-09T23:53:22Z",
      "side": 1,
      "message": "Great catch, I\u0027ll write a test in BindGroupTests that exercises the conflict case.",
      "parentUuid": "13517252_fbb7c73c",
      "range": {
        "startLine": 142,
        "startChar": 9,
        "endLine": 144,
        "endChar": 78
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcad86b4_f0593854",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 147,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-09T18:32:17Z",
      "side": 1,
      "message": "nit: maybe we should go directly from |bindingInfo| to RangeType, instead of going through the DescriptorType enum.\n\nChecks with descriptorType \u003d\u003d DescriptorType::Sampler could just be bindingInfo.bindingType \u003d\u003d BindingInfoType::Sampler",
      "range": {
        "startLine": 147,
        "startChar": 30,
        "endLine": 147,
        "endChar": 87
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bff1c18_7f1103e8",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 147,
      "author": {
        "id": 1002726
      },
      "writtenOn": "2021-08-09T23:53:22Z",
      "side": 1,
      "message": "What do you think of removing* d3d12::BindGroupLayout::DescriptorType and replacing it with RangeType directly? I think here (and at the sampler checks) we want the low-level d3d12 enum, in case in the future some other BindingInfoType maps to d3d12\u0027s DescriptorRangeTypeSampler, but perhaps this is an overly cautious opinion since BindingInfoType::Sampler maps directly to DescriptorRangeTypeSampler. Thoughts?\n\n*IIUC the DescriptorType enum is just a copy of D3D\u0027s RangeType added to allow indexing into ityp:array.",
      "parentUuid": "fcad86b4_f0593854",
      "range": {
        "startLine": 147,
        "startChar": 30,
        "endLine": 147,
        "endChar": 87
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc1605a3_0bec46ab",
        "filename": "src/dawn_native/d3d12/BindGroupLayoutD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 147,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-08-11T23:30:14Z",
      "side": 1,
      "message": "Given we don\u0027t have the array for the count now, that sounds fine to me.",
      "parentUuid": "3bff1c18_7f1103e8",
      "range": {
        "startLine": 147,
        "startChar": 30,
        "endLine": 147,
        "endChar": 87
      },
      "revId": "cfb794b22306edcac0f7a31bfea72fa1a54d209c",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}