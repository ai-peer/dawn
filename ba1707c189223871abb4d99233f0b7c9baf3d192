{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eeaf3f6d_3baa91e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-06T14:36:48Z",
      "side": 1,
      "message": "@Austin, really appreciate your reviewing effort! PTAL again.",
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d65c455e_ee35a3b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "couple more comments but still LGTM",
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c43be73_66033e4f",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 600,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "why do we have to introduce unique_ptr?",
      "range": {
        "startLine": 600,
        "startChar": 33,
        "endLine": 600,
        "endChar": 88
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2985e0e1_c72cd063",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 600,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T14:24:52Z",
      "side": 1,
      "message": "I think it is to be able to create it late at [1]. I agree it would be nice to not require the unique_ptr but we can see about that later.",
      "parentUuid": "9c43be73_66033e4f",
      "range": {
        "startLine": 600,
        "startChar": 33,
        "endLine": 600,
        "endChar": 88
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27b527b8_d731d5e9",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 600,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-08T07:57:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2985e0e1_c72cd063",
      "range": {
        "startLine": 600,
        "startChar": 33,
        "endLine": 600,
        "endChar": 88
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4746c434_d3cb2305",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 677,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "We already handle this PLANE0/1 -\u003e COLOR for Vulkan at [3]. Why do we need to change the storage to use Aspect::Color? I think this is a bit confusing because Aspect::Color is a frontend concept that shouldn\u0027t involve Vulkan semantics.\n\nIt\u0027s used in many other places like [1] and [2] so it\u0027s not immediately obvious that this code change is correct. If we really did want to merge the planes into a single aspect, I think maybe we should introduce a separate one like Aspect::CombinedPlanes. But again - is the code at [3] sufficient?",
      "range": {
        "startLine": 674,
        "startChar": 8,
        "endLine": 677,
        "endChar": 9
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01ae1179_82662540",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 677,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-07T02:05:36Z",
      "side": 1,
      "message": "In Texture::CreateFromExternal(...), This function InitializeFromExternal(...) runs after the Texture::Texture(...), where mSubresourceLastUsage has been initialized with Plane0/Plane1 for NV12 already. As a result, I manually change mSubresourceLastUsages to Color here. As it seems to me there isn\u0027t such a method in SubresourceStorage class that can modify the \u0027aspects\u0027 directly, so I chose to use the unique_ptr to destroy it, and create a new one instead. Maybe I should have add some comments for that. I would really appreciate your perspective on this!",
      "parentUuid": "4746c434_d3cb2305",
      "range": {
        "startLine": 674,
        "startChar": 8,
        "endLine": 677,
        "endChar": 9
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e210f373_02366213",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 677,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-07T06:57:38Z",
      "side": 1,
      "message": "hmm, but why do we need to change it to Color if we translate to the correct Vulkan enums at [3]?",
      "parentUuid": "01ae1179_82662540",
      "range": {
        "startLine": 674,
        "startChar": 8,
        "endLine": 677,
        "endChar": 9
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe3a0d7_779480b7",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 677,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-07T07:29:01Z",
      "side": 1,
      "message": "You\u0027ve got a point there. we\u0027d better introduce a separate Aspect::CombinedPlanes. Thanks!",
      "parentUuid": "e210f373_02366213",
      "range": {
        "startLine": 674,
        "startChar": 8,
        "endLine": 677,
        "endChar": 9
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abac5171_bbc62934",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 677,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-07T08:37:38Z",
      "side": 1,
      "message": "Done with Aspect::CombinedPlanes, although I am not too confident about that. These barrier code lines look a bit complicated. I am not sure I\u0027ve understood them exactly and completely.",
      "parentUuid": "8fe3a0d7_779480b7",
      "range": {
        "startLine": 674,
        "startChar": 8,
        "endLine": 677,
        "endChar": 9
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07811667_baf27c12",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 677,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-08T07:57:52Z",
      "side": 1,
      "message": "After digging further into the code, I\u0027ve changed my mind on Aspect::CombinedPlanes.\nExposing Aspect::CombinedPlanes in frontend would unnecessary, as no frontend clients would use it on Vulkan backend even. They would rather use Aspect::Plane0/1 as usual. Also we\u0027d better not impose such a burden on them to decide whether to use Aspect::CombinedPlanes or Aspect::Plane0/1. Instead we could hide this implementation level details in TextureVk. Simply put, for any usage of Aspect::Plane0/1 from frontend clients, if disjoint vkimage is unavailable we internally use Aspect::Color for range tracking when building image barriers.",
      "parentUuid": "abac5171_bbc62934",
      "range": {
        "startLine": 674,
        "startChar": 8,
        "endLine": 677,
        "endChar": 9
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d354d5e0_ba9978b2",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 752,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "[2]",
      "range": {
        "startLine": 752,
        "startChar": 63,
        "endLine": 752,
        "endChar": 76
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "842effa2_f50e6bff",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1005,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "[3]",
      "range": {
        "startLine": 998,
        "startChar": 11,
        "endLine": 1005,
        "endChar": 26
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2155e268_b40ce05a",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1005,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-12-07T14:24:52Z",
      "side": 1,
      "message": "With CombinedPlanes we don\u0027t need the special handling for Aspect::Plane0/1 and can just remove this method in favor of VulkanAspectMask",
      "parentUuid": "842effa2_f50e6bff",
      "range": {
        "startLine": 998,
        "startChar": 11,
        "endLine": 1005,
        "endChar": 26
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "283dd170_4cab508b",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1005,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-08T07:57:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2155e268_b40ce05a",
      "range": {
        "startLine": 998,
        "startChar": 11,
        "endLine": 1005,
        "endChar": 26
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab795a64_ea304c46",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1309,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 1309,
        "startChar": 67,
        "endLine": 1309,
        "endChar": 80
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dec01732_6ac72e74",
        "filename": "src/tests/end2end/VideoViewsTests_gbm.cpp",
        "patchSetId": 13
      },
      "lineNbr": 150,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-12-06T18:31:11Z",
      "side": 1,
      "message": "if this were using the c++ api too with wgpu::DawnTextureInternalUsageDescriptor, then you wouldn\u0027t need to reinterpret_cast to assign to nextInChain, below",
      "range": {
        "startLine": 150,
        "startChar": 8,
        "endLine": 150,
        "endChar": 47
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "749093c6_d4b94874",
        "filename": "src/tests/end2end/VideoViewsTests_gbm.cpp",
        "patchSetId": 13
      },
      "lineNbr": 150,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2021-12-07T02:05:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dec01732_6ac72e74",
      "range": {
        "startLine": 150,
        "startChar": 8,
        "endLine": 150,
        "endChar": 47
      },
      "revId": "ba1707c189223871abb4d99233f0b7c9baf3d192",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}