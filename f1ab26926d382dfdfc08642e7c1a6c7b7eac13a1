{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "023f1c88_1b06f437",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-07-06T19:51:30Z",
      "side": 1,
      "message": "Sorry for the delay, took a while to understand the context. LGTM.",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "029db3c7_d5b64fdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-06T20:20:30Z",
      "side": 1,
      "message": "Thanks for the review! I should include some notes for the context atfirst:\nThis CL basically adds internal usage option for copyTextureForBrowser cmd to pass validation of related texture, bindgroup, encoder, because we are going to call it from chromium side for some internal purposes.\nI will wait for cwallez@ for a second eye since enga@ is out.",
      "parentUuid": "023f1c88_1b06f437",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfbe1693_0dfc3198",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "LGTM overall, with tiny nits.",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efde7678_132278c6",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 9
      },
      "lineNbr": 312,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: since we added the mode to the function signature, I think we should update `ValidateBufferBinding` as well, otherwise someone looking at the method in the future will think using the internal usages for buffers works, when it doesn\u0027t.",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d9b696e_ff5f0ad4",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 9
      },
      "lineNbr": 312,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Add a mode flag for `ValidateBufferBinding` as well. But buffer binding validation is testing internal flags by default, and not logging internal flags when validation error happens. I tried to split the external/internal usage validation here. But seems the unittests cannot call dawn native createBindGroup to pass in validation usage mode. So now just set usage mode of `ValidateBufferBinding` to internal directly. We need a bigger refactor to split buffer binding internal usage validation (kInternalStorageBuffer | kReadOnlyStorageBuffer) to follow the texture validation.",
      "parentUuid": "efde7678_132278c6",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbb02307_80806a02",
        "filename": "src/dawn/native/BindGroup.cpp",
        "patchSetId": 9
      },
      "lineNbr": 312,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-08T09:48:25Z",
      "side": 1,
      "message": "Uuuh ok makes sense to not do it in this CL then since it is much bigger than expected. Feel free to always suggest doing as a follow-up (or opening a bug and adding a TODO) for changes that grow the scope of a CL a lot like this.\n\nRight now the CL has a partial fix for this comment but not complete. Do you think you could split them off so they can form an atomic update in the future instead of being partially bundled here? What I find works well to split of changes in git is to do:\n\n  git checkout -p HEAD  \u003cselect the chunks to remove\u003e\n  git commit -m \"removed changes\"\n  git revert HEAD \u003cre-apply the changes\u003e\n  git rebase -i \u003cmerge the first two commits and rename the last one to be the change you want to do\u003e",
      "parentUuid": "8d9b696e_ff5f0ad4",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e2bffec_30a25a18",
        "filename": "src/dawn/native/CMakeLists.txt",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: the BUILD.gn file also needs to be updated.",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "801db215_544e4277",
        "filename": "src/dawn/native/CMakeLists.txt",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e2bffec_30a25a18",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "298beb41_4bbec428",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 9
      },
      "lineNbr": 357,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "[1]",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdab0f91_f15b9bba",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 9
      },
      "lineNbr": 357,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "298beb41_4bbec428",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ff1169_df4877fe",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 9
      },
      "lineNbr": 359,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: \"internalUsage is true while the \"dawn-internal-usages\" feature is not enabled.\" (missing period, but also missing explanation of why the feature is required).",
      "range": {
        "startLine": 359,
        "startChar": 9,
        "endLine": 359,
        "endChar": 57
      },
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "013559df_0a8fc88b",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 9
      },
      "lineNbr": 359,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9ff1169_df4877fe",
      "range": {
        "startLine": 359,
        "startChar": 9,
        "endLine": 359,
        "endChar": 57
      },
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f0996db_8851e71e",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 9
      },
      "lineNbr": 557,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: these structures are all C++ structure with default values for everything (I think?) so we might not need the \u003d {}.\n\nDitto in other places potentially.",
      "range": {
        "startLine": 557,
        "startChar": 47,
        "endLine": 557,
        "endChar": 53
      },
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4791decd_75c0f5c4",
        "filename": "src/dawn/native/CopyTextureForBrowserHelper.cpp",
        "patchSetId": 9
      },
      "lineNbr": 557,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f0996db_8851e71e",
      "range": {
        "startLine": 557,
        "startChar": 47,
        "endLine": 557,
        "endChar": 53
      },
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c78527de_bc3bd154",
        "filename": "src/dawn/native/UsageValidationMode.h",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "It\u0027s a bit sad to have a header for a single enum, but I don\u0027t see a good place where to put it. Any idea? Otherwise it\u0027s fine to keep as is.",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "936f3a3b_70f3e934",
        "filename": "src/dawn/native/utils/WGPUHelpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: unused",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a894c0c_94946e02",
        "filename": "src/dawn/native/utils/WGPUHelpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "936f3a3b_70f3e934",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c99e8106_e80357f6",
        "filename": "src/dawn/native/utils/WGPUHelpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: unnecessary since  \"dawn/native/UsageValidationMode.h\" is included in WGPUHelpers.h",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83f68e6c_8844aad0",
        "filename": "src/dawn/native/utils/WGPUHelpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c99e8106_e80357f6",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41bb1d88_72ae816f",
        "filename": "src/dawn/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 449,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: Test that the internal usages are taken into account when interalUsage \u003d true?",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "878dbfe7_52e5b658",
        "filename": "src/dawn/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 449,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41bb1d88_72ae816f",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44ac3b3d_cb6ace90",
        "filename": "src/dawn/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 450,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-07-07T10:16:43Z",
      "side": 1,
      "message": "nit: We don\u0027t have coverage for the check at [1]. We could make a subclass fixture of CopyTextureForBrowserTest that\u0027s CopyTextureForBrowserInternalUsageTest that\u0027s the one that creates the device with the correct feature. Then in CopyTextureForBrowserTest we\u0027d add a test that a validation error occurs, and change this test to be on CopyTextureForBrowserInternalUsageTest.",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3af8f159_d3489c40",
        "filename": "src/dawn/tests/unittests/validation/CopyTextureForBrowserTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 450,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2022-07-07T22:32:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44ac3b3d_cb6ace90",
      "revId": "f1ab26926d382dfdfc08642e7c1a6c7b7eac13a1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}