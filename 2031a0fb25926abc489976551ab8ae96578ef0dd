{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d87cac0_3638c68a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-01-11T22:55:18Z",
      "side": 1,
      "message": "Yea we probably don\u0027t want this in production; is it enough to have the formatter print the offending line and code snippets (what your previous CL does?). For the SPIR-V part - maybe we can keep that in though (for now as we transition). And in the message also ask people to file a bug since they should never see it.",
      "revId": "2031a0fb25926abc489976551ab8ae96578ef0dd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d7a707d_e9061429",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2021-01-12T11:19:52Z",
      "side": 1,
      "message": "\u003e is it enough to have the formatter print the offending line and code snippets (what your previous CL does?)\n\nNot always. This is extremely useful when trying to figure out a compilation error for a shader that\u0027s heavily dynamically generated (lots of dynamic string concatenation). Even with the offending line being printed, its sometimes impossible to see the full context (and sometimes the offending line is built from parts!). Plus, I\u0027ve used this to copy and paste the full shader into the tint executable to see exactly what\u0027s going on.\n\nIs there some variable that we can use to detect whether we\u0027re running in a test?",
      "parentUuid": "3d87cac0_3638c68a",
      "revId": "2031a0fb25926abc489976551ab8ae96578ef0dd",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}