{
  "comments": [
    {
      "key": {
        "uuid": "1aa2f99e_9444cd70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "Looks good overall. The tests are testing a lot around the 256 bytes per row restriction which isn\u0027t present for WriteTexture. We have that restriction for D3D12, so I guess it\u0027s still good to have them.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad8d6d05_6df066f6",
        "filename": "src/dawn_native/metal/CommandBufferMTL.h",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Can these be moved in UtilsMetal.mm?",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69300382_812f6b3a",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 273,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "this can be a const reference because it\u0027s not mutated in this function.",
      "range": {
        "startLine": 273,
        "startChar": 48,
        "endLine": 273,
        "endChar": 67
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bc13ea1_76931f35",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 274,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "nit: in Dawn, if an argument is mutable, we prefer to pass it by pointer instead of reference",
      "range": {
        "startLine": 274,
        "startChar": 48,
        "endLine": 274,
        "endChar": 64
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c48ca70d_bb3df33d",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 274,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Here it could be const except that the dst.texture Ref\u003c\u003e is const and will only return const pointers. We should really fix this at some point: have Ref\u003c\u003e and ConstRef\u003c\u003e",
      "parentUuid": "0bc13ea1_76931f35",
      "range": {
        "startLine": 274,
        "startChar": 48,
        "endLine": 274,
        "endChar": 64
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1da50ae_588eb26e",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 278,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "In a follow-up can you add a test for this in TextureZeroInitTests? (both for a full write and a partial write)",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "087b55a5_dfd0d535",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 53,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Maybe this could be in WriteTexture itself since all backends will want to skip the copy. We could check that writeSize is 0 instead of dataSize because the copy is a noop iff writeSize is 0, and if dataSize \u003d 0, then writeSize must be 0.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda11c61_f781e9a8",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 59,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-10T16:03:31Z",
      "side": 1,
      "message": "What should I do with that?",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abcb1584_f7a99014",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 59,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "If this is a Metal restriction that we can\u0027t work around then it should be part of the linear texture data validation rules",
      "parentUuid": "cda11c61_f781e9a8",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4de816e5_23ea6971",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 59,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "We should be able to work around it because we\u0027re doing a copy in the staging buffer anyway, so we could compute the exact bytesPerRow, get a staging buffer for that exact bytesPerRow and do memcpy line by line.\n\nCan you also add a test that would fail without the workaround if bytesPerRow % blockByteSize is not zero?",
      "parentUuid": "abcb1584_f7a99014",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36307300_927f7a91",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-10T16:03:31Z",
      "side": 1,
      "message": "It might be more efficient to copy only the part of the data we\u0027re interested in. Currently I\u0027m doing the same thing as writeBuffer.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1945005_d2551412",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "This would be a good idea if bytesPerRow is much larger than bytesInACompleteRow. I expect this to be fairly rare though.\n\nFine with me to try this now or in a follow-up after WriteTexture is implemented on all the backends.\n\nWe can do a similar optimization in dawn_wire where we allocate less data and compact it if bytesPerRow much greater than bytesInACompleteRow",
      "parentUuid": "36307300_927f7a91",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaf3d8a8_181f05a1",
        "filename": "src/dawn_native/metal/QueueMTL.mm",
        "patchSetId": 19
      },
      "lineNbr": 79,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "nit: here we could copy the entire TextureDataLayout (passDataLayout \u003d *dataLayout), and then override the .offset and .rowsPerImage",
      "range": {
        "startLine": 71,
        "startChar": 8,
        "endLine": 79,
        "endChar": 61
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b33873bb_123641ba",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 195,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Aaaaand this method isn\u0027t used so it should be deleted.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5e59778_c86420dc",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 201,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "shouldn\u0027t that be x + texelBlocksPerRow * (y + texelBlocksPerImage * layer)?",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f3f6d78_8e99fd04",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 203,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "ExpectedData could be i % 256, (i \u003e\u003e 8) % 256, etc.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04014a00_d933187a",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 311,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "These two tests could be merged together and be a single test that checks full subresource writes for various texture sizes. It could be called VaryingTextureSizes. Also it could check for the depth of the texture being 1 vs. other values.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d760019f_40ff2cf3",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 337,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "writing",
      "range": {
        "startLine": 337,
        "startChar": 13,
        "endLine": 337,
        "endChar": 20
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efe9d870_7ae79863",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 338,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "This could be checking the offset with for-loops like in [1], be called VaryingTextureOffset and write a single texel at several 3D offsets. Since there isn\u0027t a 256 alignment constraint, we don\u0027t really need [2]",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50ae4971_0fee127b",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 387,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "PixelWrite...",
      "range": {
        "startLine": 387,
        "startChar": 31,
        "endLine": 387,
        "endChar": 49
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad4b194_b7f71684",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 387,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "[2]",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d401c789_d62f35f9",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 436,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "This could be merged with the test below, do 3D regions and be called VaryingCopySize",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "010be7a4_7d599602",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 439,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "[1]",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a762fe_04fb1b35",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 486,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "This is probably not needed.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d4ec303_e65fb480",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 503,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "This could use a for-loop, be merged with the test below, and test offset that are aligned (0, 256) and unaligned (4, 2, 1, 17).",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a4d381f_76bedc12",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 513,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-07-10T17:31:52Z",
      "side": 1,
      "message": "nit: here and below, |dataSpec| for the variable name",
      "range": {
        "startLine": 513,
        "startChar": 8,
        "endLine": 513,
        "endChar": 26
      },
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d7e3d4f_90a0330c",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 542,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Probably not useful?",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0cfe68a_bb2a2ac8",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 561,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Same comment as for the data offset tests.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24f58b16_3dbaeceb",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 598,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Covered by VaryingTextureSize",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee03cb9c_0e15bf20",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 612,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "Covered by VaryingCopySize",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a538bcc_6ad76f99",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 630,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "This can be VaryingRowsPerImage and same comment as for VaryingDataOffset",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c86a352_0bf59eb7",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 654,
      "author": {
        "id": 1000961
      },
      "writtenOn": "2020-07-10T16:03:31Z",
      "side": 1,
      "message": "This is a new test.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37032623_61f8c094",
        "filename": "src/tests/end2end/QueueTests.cpp",
        "patchSetId": 19
      },
      "lineNbr": 680,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-07-12T17:17:20Z",
      "side": 1,
      "message": "nit: just remove them and they\u0027ll be added when the feature is implemented in the backend.",
      "revId": "a9d38c64ae02140f7a0b5764bf70eee1290bda23",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}