{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3003aa0f_2d997a1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-04T21:44:36Z",
      "side": 1,
      "message": "The logic looks good (despite my hatred of the `std::async` API), however I\u0027m concerned about introduction of bot flakes with this type of test.\n\nAside from the flakiness around testing for timeouts, I\u0027m also concerned that forcibly causing the GPU to hang may cause trouble for tests that follow. For example, I know some driver crashes require a system reboot before my linux desktop behaves correctly and reliably again. Unfortunately I don\u0027t have good suggestions for either of these issues.\n\nI\u0027m going to delegate to Austin and Corentin for this one. Maybe Dawn already has tests that do this sort of thing, and my concerns are overblown.",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "576a4141_718e23c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-05T01:13:25Z",
      "side": 1,
      "message": "in the past, I\u0027ve run into problems where I wrote a bad Metal shader which had an infinite loop, and it was OK to terminate the process and run it again.\n\nbut then.... at some point after multiple subsequent runs, it would stall my machine entirely and I would have to force restart the machine.\n\nmy guess was that even after I terminated the process, those GPU cores were actually still spinning forever - and at some point, I ran out of GPU threads and everything came to a halt.\n\nso yes - I likewise am concerned that we might cause other tests to fall over on CI/CQ. We have some death tests, but those are more so tests that test an ASSERT is hit - not a real hang.\n\nthe test is useful though.\nat the very least, we can make it a manual test.\nsomething better - we can have a test suite that tells swarming to always reboot the machine after it runs..? @bsheedy@chromium.org @ynovikov@chromium.org is something like that possible? We could run it at most N times a day to prevent too much havoc.",
      "parentUuid": "3003aa0f_2d997a1e",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a32ee7fd_44faf6bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2024-01-05T01:22:08Z",
      "side": 1,
      "message": "AFAIK the only current way to guarantee that the swarming bot is restarted after a task is for the task to fail (i.e. return a non-zero exit code). That would be simple to implement, but I think that would confuse the builder when it sees a failing task but all other data points to the task completing successfully.\n\nThere isn\u0027t really a way for a task to communicate with the underlying swarming process at the moment, and I suspect that\u0027s by design. So while I think it would be technically pretty easy to hack something in to support this, I doubt it would get approval from swarming owners.",
      "parentUuid": "576a4141_718e23c0",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ae8b2b0_a2c8960a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000277
      },
      "writtenOn": "2024-01-05T11:44:17Z",
      "side": 1,
      "message": "Windows is especially problematic in this regard.\nI often see machines that can\u0027t be hot-rebooted after GPU driver gets into a bad state, and then I need to file a bug for Labs folks to cold-reboot them.\nSo, I don\u0027t recommend pushing the GPU driver into a corner.",
      "parentUuid": "a32ee7fd_44faf6bf",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14e65935_fdecda78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-05T12:40:58Z",
      "side": 1,
      "message": "+1 I don\u0027t think we can expect this test to run successfully and not eventually cause machines to hang up for the reason that Austin described. Windows is the only OS with a TDR mechanisms, but given Yuly\u0027s comment we can\u0027t even test there :/",
      "parentUuid": "8ae8b2b0_a2c8960a",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6effa047_1bcae581",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2024-01-05T20:26:43Z",
      "side": 1,
      "message": "One workaround that was brought up in the LUCI chat was to have a special pool (e.g. `chromium.tests.gpu.always_reboot`) that we can configure to reboot after every task. Then, we can only trigger the suite that runs these tests in that pool.\n\nThat is less efficient from a resource standpoint since we\u0027re splitting machines off into their own underutilized pool, but it is an option.",
      "parentUuid": "14e65935_fdecda78",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dd76df8_0378542c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-01-08T12:18:12Z",
      "side": 1,
      "message": "There are so few death tests that we\u0027d like to do that IMHO it\u0027s not worth bringing up a pool just for that.",
      "parentUuid": "6effa047_1bcae581",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8599b611_8312526f",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-04T21:44:36Z",
      "side": 1,
      "message": "used?",
      "range": {
        "startLine": 29,
        "startChar": 9,
        "endLine": 29,
        "endChar": 20
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aff7a64_dc401422",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-01-05T15:24:35Z",
      "side": 1,
      "message": "Good catch.  It was used at one point. \nRemoved now.",
      "parentUuid": "8599b611_8312526f",
      "range": {
        "startLine": 29,
        "startChar": 9,
        "endLine": 29,
        "endChar": 20
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787f7337_29bd6909",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-04T21:44:36Z",
      "side": 1,
      "message": "Note: all of these [are banned in the Chromium C++ style guide](https://chromium.googlesource.com/chromium/src/+/main/styleguide/c++/c++-features.md#modern-c_use-in-chromium).\nTint violates a bunch of these rules, but usually for code that\u0027s not built and run on Chromium CQ infra. Hopefully this won\u0027t trigger alarms.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 17
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a756668_4575480f",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-01-05T15:24:35Z",
      "side": 1,
      "message": "Thanks for the link!\n\n\u003cchrono\u003e is rejected because of overlap with base/time\n\u003cfuture\u003e and other threading and synchronization is banned because Chrome uses base/synchronization and Chrome\u0027s Thread class is tightly coupled to the message loop.\n\nMy thinking is:\n- this test has value\n- it\u0027s test code, never to be included in Chrome itself.\n- I\u0027d be fine if we landed this in a \"never in the Chrome tree\" kind of mode.  Add a new target for it if necessary, and disable that target in the Chrome build, but enable it for a Dawn standalone build.",
      "parentUuid": "787f7337_29bd6909",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 17
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85300843_2a58615b",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-05T01:13:25Z",
      "side": 1,
      "message": "nit: throughout, use camelCase",
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0f044da_8d070a6a",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-01-05T01:13:25Z",
      "side": 1,
      "message": "nit: usually we don\u0027t force and wait for completion. it\u0027s worth commenting that you\u0027re doing that because in this specific test we\u0027re timing it.",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 127,
        "endChar": 27
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "825fad81_9cd68e3f",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-01-04T21:44:36Z",
      "side": 1,
      "message": "Unfortunately any sort of time-based testing is often very unreliable and will likely cause flakes on bots. What seems like an acceptable threshold for one machine rarely works for all hardware that can run these tests.\n\nA pass / fail threshold delta of one second is small enough to cause false-positives on tests that only run on the CPU due to random process interruptions by the OS / Cloud VM (I know through repeated experience of attempting this sort of thing), and when using GPUs timing variance can get even more wild.\n\nMy general guidance is to never write tests that depend on timing (unless working on a RTOS), and for what you\u0027re trying to test, I don\u0027t have any great suggestions here. Bumping the timeout will reduce the probability of flakes, but will make the tests take longer to pass for everyone.",
      "range": {
        "startLine": 146,
        "startChar": 61,
        "endLine": 146,
        "endChar": 85
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436539f1_99c4d24a",
        "filename": "src/dawn/tests/end2end/ComputeInfiniteLoopTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2024-01-05T15:24:35Z",
      "side": 1,
      "message": "So does that mean \"We\u0027ll never add a test like this\"?",
      "parentUuid": "825fad81_9cd68e3f",
      "range": {
        "startLine": 146,
        "startChar": 61,
        "endLine": 146,
        "endChar": 85
      },
      "revId": "79f0c5473d08e49955721504d709942f55043d69",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}