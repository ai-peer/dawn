{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e6cc179b_4233c9d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-10-26T16:15:46Z",
      "side": 1,
      "message": "AFAIK, there\u0027s nothing in the GLES backend that uses that extension per se.  EGL_GL_TEXTURE_2D_KHR became EGL_GL_TEXTURE_2D in EGL 1.5. Does your driver not support EGL 1.5? Could we do the check against 1.5 instead?\n\n(For reference, the GLES backend does the check here: https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/opengl/ContextEGL.cpp;l\u003d52)",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33d51087_64a1b24d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-10-26T16:28:09Z",
      "side": 1,
      "message": "You would have to call eglInitialize() (again) to get the version number, but that should be safe according to the docs.\n\nAn alternative would be to rewrite the test to create its own context, rather than using the current context. It would be more exhaustive testing in the sense that right now, we\u0027re just creating an EGLImage in the same context that we use it. Since it\u0027s a whitebox test, you could use ContextEGL from dawn/native/opengl to create one. Totally fine if you don\u0027t feel like taking this on, though.",
      "parentUuid": "e6cc179b_4233c9d6",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59ff4ce2_2dbf05f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-27T02:49:42Z",
      "side": 1,
      "message": "That\u0027s the error I get when I run\n\n[ RUN      ] EGLImageValidationTests.Success/OpenGLES_ANGLE__AMD__AMD_Radeon_Pro_WX_3200_Series__polaris12_LLVM_15_0_6___OpenGL_4_6__Core_Profile__Mesa_22_3_6__compat\nINFO: EGL ERROR: eglCreateImage: KHR_gl_texture_2D_image not supported.\n../../src/dawn/tests/white_box/EGLImageWrappingTests.cpp:152: Failure\nExpected: (nullptr) !\u003d (eglImage), actual: (nullptr) vs NULL\n\nI tried adding the check you suggested checking for EGL 1.5. I still get the same error with the egl version check but without the check I added.",
      "parentUuid": "33d51087_64a1b24d",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea1df285_2d5a734f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-10-30T22:20:29Z",
      "side": 1,
      "message": "Hmm. I eglCreateImage() is returning null. Perhaps AMD devices don\u0027t support EGLImage on some particular texture formats.\n\nFor now, could you change that assert to:\n\n        DAWN_SKIP_TEST_IF(eglImage \u003d\u003d nullptr);\n        \n?",
      "parentUuid": "59ff4ce2_2dbf05f0",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb58cb42_f5015d9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-10-31T01:43:31Z",
      "side": 1,
      "message": "I\u0027m not sure what you\u0027re asking me to do. CreateEGLImage returns a ScopedEGLImage and every test expects it to return a validate one so I can\u0027t put in DAWN_SKIP_TEST_IF(eglImage \u003d\u003d nullptr) in CreateEGLImage as then there will be nothing to return for the ScopedEGLImage. Are you asking me to refactor all of the tests?",
      "parentUuid": "ea1df285_2d5a734f",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd876515_dba5f685",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-10-31T22:19:47Z",
      "side": 1,
      "message": "Hmm, yeah, you\u0027re right.\n\nCould you use DAWN_SUPPRESS_TEST_IF(IsAMD()) for now? You could override SetUp() and put it there, if you don\u0027t want to put it in all the tests individually.\n\nOn the other hand, if only some tests are failing, putting it in all the tests individually might be better. Up to you.",
      "parentUuid": "cb58cb42_f5015d9c",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "157e8a04_5b1c2123",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003446
      },
      "writtenOn": "2023-11-02T00:49:31Z",
      "side": 1,
      "message": "That doesn\u0027t work\n\nHere are the IDs\n\nSystem adapters:\n - \"AMD Radeon Pro WX 3200 Series (RADV POLARIS12)\" - \"radv: Mesa 22.3.6\"\n   type: Discrete GPU, backend: Vulkan, compatibilityMode: false\n   vendorId: 0x1002, deviceId: 0x6981\n   vendorName: amd, architecture: gcn-4\n - \"llvmpipe (LLVM 15.0.6, 256 bits)\" - \"llvmpipe: Mesa 22.3.6 (LLVM 15.0.6) 0.0.1\"\n   type: CPU, backend: Vulkan, compatibilityMode: false\n   vendorId: 0x10005, deviceId: 0x0000\n   vendorName: mesa, architecture: software\n - \"SwiftShader Device (Subzero)\" - \"SwiftShader driver 5.0.0\"\n   type: CPU, backend: Vulkan, compatibilityMode: false\n   vendorId: 0x1AE0, deviceId: 0xC0DE\n   vendorName: google, architecture: swiftshader\n - \"Null backend\" - \"\"\n   type: CPU, backend: Null, compatibilityMode: false\n   vendorId: 0x0000, deviceId: 0x0000\n - \"ANGLE (AMD, AMD Radeon Pro WX 3200 Series (polaris12 LLVM 15.0.6), OpenGL 4.6 (Core Profile) Mesa 22.3.6)\" - \"OpenGL version OpenGL ES 3.1.0 (ANGLE 2.1.22119 git hash: 368ddf22e4d4) [Selected]\"\n   type: Unknown, backend: OpenGLES, compatibilityMode: true\n   vendorId: 0x0000, deviceId: 0x0000\n\n\nIt\u0027s choosing that last ID which is \"vendorID: 0x0000\". And then IsAMD() returns false\n\nAny chance you can approve this CL as is and then go change it how you want later? I\u0027ve been blocked on 2 other CLs waiting for this CL for a week now ðŸ˜­ðŸŽ»ðŸ˜›",
      "parentUuid": "dd876515_dba5f685",
      "revId": "9809ffc1c22bd97a179c5693c0d7f3b18c643ef8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}