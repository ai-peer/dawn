{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "772d2685_ba2372ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-14T06:07:40Z",
      "side": 1,
      "message": "PTAL",
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a4c056_8dd58de7",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-16T04:53:35Z",
      "side": 1,
      "message": "maybe has a class member `mTotalStagingBufferSize` to track the total size to avoid calculating it every times.",
      "range": {
        "startLine": 557,
        "startChar": 13,
        "endLine": 557,
        "endChar": 22
      },
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c308eeeb_e569f6e0",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 558,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-16T04:53:35Z",
      "side": 1,
      "message": "should be `!\u003d`?",
      "range": {
        "startLine": 558,
        "startChar": 47,
        "endLine": 558,
        "endChar": 48
      },
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f1a3bf2_6b240cc3",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 574,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-16T04:53:35Z",
      "side": 1,
      "message": "To make the code simpler, we can using `std::sort()` to sort staging buffers by buffer\u0027s last usage serial. If we need purge buffers, we can purge buffers form the end of `mStagingBuffers`(with the smallest last usage serial instead of the biggest buffer in size).\n\nWe can also find a free buffer from the end of `mStagingBuffers` as well. And, I think it is not necessary to find a buffer with the smallest margin. We can just return any free buffer which is larger than requested size.",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 574,
        "endChar": 9
      },
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76577d18_fa468e27",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 581,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-16T04:53:35Z",
      "side": 1,
      "message": "I suggest purging the buffer with smallest LastUsageSerial instead of the max size.",
      "range": {
        "startLine": 581,
        "startChar": 12,
        "endLine": 581,
        "endChar": 45
      },
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5bfccb_55e66fe0",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 584,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2024-03-14T06:07:40Z",
      "side": 1,
      "message": "I really wouldn\u0027t re-invent this yet another buffer pool. Actually I once tried re-using `DynamicUploader` in a previous [CL](https://dawn-review.googlesource.com/c/dawn/+/167180/3/src/dawn/native/d3d11/BufferD3D11.cpp#591), but gave up. D3D11 buffers have to be unmapped before being submitted to GPU. As multiple small-size `UploadHandle`s can share a mutual ring buffer, we couldn\u0027t map/unmap for a `UploadHandle` without affecting the others. Another problem is that it could lead to `ScopedCommandRecordingContext` re-entrancy like this.\n```\n\tdawn::HandleAssertionFailure [0x00007FF6675D3456+176] (o:\\third_party\\dawn\\src\\dawn\\common\\Assert.cpp:80)\n\tdawn::native::d3d11::ScopedCommandRecordingContext::ScopedCommandRecordingContext [0x00007FF667276FB3+111] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\CommandRecordingContextD3D11.cpp:48)\n\tdawn::native::d3d11::Queue::GetScopedPendingCommandContext [0x00007FF66727E7F6+54] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\QueueD3D11.cpp:87)\n\tdawn::native::d3d11::Device::GetScopedPendingCommandContext [0x00007FF667278643+31] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\DeviceD3D11.cpp:157)\n\tdawn::native::d3d11::Buffer::MapAtCreationImpl [0x00007FF667270C4A+74] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\BufferD3D11.cpp:292)\n\tdawn::native::BufferBase::MapAtCreationInternal [0x00007FF6671CCA19+141] (o:\\third_party\\dawn\\src\\dawn\\native\\Buffer.cpp:466)\n\tdawn::native::BufferBase::MapAtCreation [0x00007FF6671CC83A+58] (o:\\third_party\\dawn\\src\\dawn\\native\\Buffer.cpp:422)\n\tdawn::native::DeviceBase::CreateBuffer [0x00007FF6671FD99B+393] (o:\\third_party\\dawn\\src\\dawn\\native\\Device.cpp:1635)\n\tdawn::native::DynamicUploader::AllocateInternal [0x00007FF66720C248+830] (o:\\third_party\\dawn\\src\\dawn\\native\\DynamicUploader.cpp:108)\n\tdawn::native::DynamicUploader::Allocate [0x00007FF66720C6CE+58] (o:\\third_party\\dawn\\src\\dawn\\native\\DynamicUploader.cpp:142)\n\tdawn::native::d3d11::Buffer::WriteInternal [0x00007FF667271E03+757] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\BufferD3D11.cpp:599)\n\tdawn::native::d3d11::Buffer::ClearInternal [0x00007FF667270960+214] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\BufferD3D11.cpp:499)\n\tdawn::native::d3d11::Buffer::Initialize [0x00007FF667270602+1170] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\BufferD3D11.cpp:249)\n\tdawn::native::d3d11::Buffer::Create [0x00007FF6672700E6+146] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\BufferD3D11.cpp:158)\n\tdawn::native::d3d11::Device::CreateBufferImpl [0x00007FF6672789AB+43] (o:\\third_party\\dawn\\src\\dawn\\native\\d3d11\\DeviceD3D11.cpp:189)\n\tdawn::native::DeviceBase::CreateBuffer [0x00007FF6671FD935+291] (o:\\third_party\\dawn\\src\\dawn\\native\\Device.cpp:1632)\n\tdawn::native::DeviceBase::APICreateBuffer [0x00007FF6671FD62B+73] (o:\\third_party\\dawn\\src\\dawn\\native\\Device.cpp:1080)\n\tdawn::native::NativeDeviceCreateBuffer [0x00007FF6671A3211+65] (o:\\fake\\prefix\\gen\\third_party\\dawn\\src\\dawn\\native\\ProcTable.cpp:685)\n\twgpu::Device::CreateBuffer [0x00007FF66719EA83+19] (o:\\fake\\prefix\\gen\\third_party\\dawn\\src\\dawn\\webgpu_cpp.cpp:3024)\n\tdawn::utils::CreateBufferFromData [0x00007FF6675D70DD+116] (o:\\third_party\\dawn\\src\\dawn\\utils\\WGPUHelpers.cpp:117)\n\tdawn::`anonymous namespace\u0027::SamplerFilterAnisotropicTest_SlantedPlaneMipmap_Test::TestBody [0x00007FF666F08D87+919] (o:\\third_party\\dawn\\src\\dawn\\tests\\end2end\\SamplerFilterAnisotropicTests.cpp:300)\n\ttesting::Test::Run [0x00007FF66718E60F+235] (o:\\third_party\\googletest\\src\\googletest\\src\\gtest.cc:2677)\n```\n\nI am all ears if any other alternatives.",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 584,
        "endChar": 5
      },
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d2b5a0_9a3b6580",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 5
      },
      "lineNbr": 601,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2024-03-16T04:53:35Z",
      "side": 1,
      "message": "skip above code for finding a cached staging buffer, if requested bufferSize is larger than the kMaxSize.",
      "range": {
        "startLine": 601,
        "startChar": 8,
        "endLine": 601,
        "endChar": 30
      },
      "revId": "c797901dd620ad2a15c15706d66b9031098c925b",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}