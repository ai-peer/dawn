{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "321f529d_fdb2bcca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-09-15T11:35:48Z",
      "side": 1,
      "message": "Why we need this change? Switching buffer in device context is not cost free as well.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 62
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc7b0161_15158ced",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-16T06:07:21Z",
      "side": 1,
      "message": "Refined to only re-bind the uniform buffer in case that there is an actual direct/indirect switching from clients. It should be rare that the switching from clients is very frequent.\n\n\nAccording to the quotes of manual below, D3D11_USAGE_DYNAMIC+D3D11_MAP_WRITE_DISCARD is the most recommended way for uniform buffer use, as updating the buffer doesn\u0027t incur any CPU-GPU wait.\n\n\nhttps://learn.microsoft.com/en-us/windows/win32/api/d3d11/ne-d3d11-d3d11_usage\n\u003eD3D11_USAGE_DYNAMIC usage is a special case that optimizes the flow of data from CPU to GPU when the CPU generates that data on-the-fly and sends that data with high frequency. D3D11_USAGE_DYNAMIC is typically used on resources with vertex data and on constant buffers. Use the ID3D11DeviceContext::Map and ID3D11DeviceContext::Unmap methods to write data to these resources. To achieve the highest performance for data consumed serially, like vertex data, use the D3D11_MAP_WRITE_NO_OVERWRITE and D3D11_MAP_WRITE_DISCARD sequence.\n\n\nhttps://learn.microsoft.com/en-us/windows/win32/direct3d11/how-to--use-dynamic-resources\n\u003eTo receive a performance improvement when you use dynamic vertex buffers, your app must call Map with the appropriate D3D11_MAP values. D3D11_MAP_WRITE_DISCARD indicates that the app doesn\u0027t need to keep the old vertex or index data in the buffer. If the GPU is still using the buffer when you call Map with D3D11_MAP_WRITE_DISCARD, the runtime returns a pointer to a new region of memory instead of the old buffer data. This allows the GPU to continue using the old data while the app places data in the new buffer.",
      "parentUuid": "321f529d_fdb2bcca",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 62
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b565d997_966fa5ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-18T16:18:38Z",
      "side": 1,
      "message": "The D3D11 spec says this because writing a subresource in the middle of a \"render pass\" forces a potential GPU stall to wait for all the previous draws are finished before starting the new ones. The DISCARD thing is so that internally the driver uses a ringbuffer to upload the data. Why can\u0027t we do that ourselves in Dawn and have a unified path for both indirect and direct operations?",
      "parentUuid": "bc7b0161_15158ced",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 62
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1535ff78_ff9cf478",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-19T08:28:07Z",
      "side": 1,
      "message": "Basically we have 4 options to implement uniform buffer write on D3D11:\n1) D3D11_USAGE_DYNAMIC + D3D11_MAP_WRITE_DISCARD\n2) D3D11_USAGE_DEFAULT + UpdateSubresource\n3) D3D11_USAGE_DEFAULT + stagging buffer(new buffer)\n4) D3D11_USAGE_DEFAULT + stagging buffer(ring buffer)\n\nWe need to weigh these options to come to a conclusion.\n\nThe option 1 seems to be the most recommended way according to many blogs and manual docs. However, I haven\u0027t got any solid perf data to prove that per the benchmark cases I am running so far.\n\nThe option 2 can only cover full size buffer write. The [CL](https://dawn-review.googlesource.com/c/dawn/+/150702) has proved that it\u0027s much better than the option 3.\n\nThe major problem of the option 3 is the overhead of creating a new staging each time. We should avoid it as much as possible.\n\nThe option 4 could be a little bit hard to implement, as managing the map/unmap state of a shared ring buffer may be complicated. Besides, its perf improvement \n compared with the option 1 and 2 is yet to prove. In fact, [Graphite internally uses a specific same size staging buffer for each uniform buffer](https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/src/gpu/graphite/BufferManager.cpp;drc\u003da6bdc8f2993883fc55eb9cb0945694299b056675;l\u003d315). The copy from the staging buffer might not be cost-free as sometimes it stands out to me.\n```\nFunction Name\tTotal CPU [unit, %]\tSelf CPU [unit, %]\tModule\tCategory\n| + dawn::native::d3d11::Queue::SubmitImpl\t1715 (35.27%)\t1 (0.02%)\tchrome\tKernel\n|| + dawn::native::d3d11::CommandBuffer::Execute\t1413 (29.06%)\t6 (0.12%)\tchrome\tKernel\n||| - dawn::native::d3d11::CommandBuffer::ExecuteRenderPass\t1034 (21.26%)\t7 (0.14%)\tchrome\tKernel\n||| - dawn::native::d3d11::Buffer::Copy\t151 (3.11%)\t0 (0.00%)\tchrome\tKernel\n||| - dawn::native::d3d11::Texture::Write\t124 (2.55%)\t2 (0.04%)\tchrome\t\n||| - dawn::native::d3d11::Texture::Copy\t45 (0.93%)\t0 (0.00%)\tchrome\t\n```",
      "parentUuid": "b565d997_966fa5ff",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 62
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ab0f359_5d890a4c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-09-19T15:46:17Z",
      "side": 1,
      "message": "Thank you, after thinking about this more, the current approach seems good. The reason why a ringbuffer is not as good as MAP_DISCARD (compared to other backends) is that D3D11 draws/dispatches happen \"immediately\". However for indirect dispatches/draws we should use https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/Device.h;drc\u003de60adb28edec185d84d27074c2a2dfb7bb833dca;l\u003d391 and https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/Device.h;drc\u003de60adb28edec185d84d27074c2a2dfb7bb833dca;l\u003d386 if we can.",
      "parentUuid": "1535ff78_ff9cf478",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 62
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6160c030_c3ebe809",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-15T01:17:48Z",
      "side": 1,
      "message": "PTAL",
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35af1f03_878e6098",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-09-15T11:35:48Z",
      "side": 1,
      "message": "nit: `/*indirect\u003d*/`",
      "range": {
        "startLine": 401,
        "startChar": 51,
        "endLine": 401,
        "endChar": 59
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dc59f24_c551f223",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-16T06:07:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35af1f03_878e6098",
      "range": {
        "startLine": 401,
        "startChar": 51,
        "endLine": 401,
        "endChar": 59
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a714b4d_faa37aef",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-09-15T11:35:48Z",
      "side": 1,
      "message": "nit: I think we use `mD3d11` instead of `mD3D11` elsewhere.",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8fb1e13_06a621ce",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.h",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-09-16T06:07:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a714b4d_faa37aef",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "5217d2c465d569ab66e488086436535e6cb2ecb8",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}