{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bd007326_c7cff0a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-09-16T16:44:08Z",
      "side": 1,
      "message": "Partial review.\nPTAL at transform ordering issue.",
      "revId": "f243e361032a9e6e8b98e25757ce1663c4a478e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a442d383_59095483",
        "filename": "src/tint/transform/std140.cc",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-09-16T16:44:08Z",
      "side": 1,
      "message": "sem nodes only track storage class usage on Struct types.\n\nSo won\u0027t this miss cases like\n    \nvar\u003cuniform\u003e a: array\u003cmat2x2\u003cf32\u003e,8\u003e;\n?\n\nOr is there a dependency on a previous transform having already wrapped the store type in a struct, for use in the Vulkan backend.\n\nIf so, then it needs a comment here.\n\n\n....\n\nIt looks like the SPIR-V backend invokes the Std140 transform much earlier than the AddBlockAttribute transform.  So I think it will miss that case?",
      "range": {
        "startLine": 138,
        "startChar": 16,
        "endLine": 138,
        "endChar": 63
      },
      "revId": "f243e361032a9e6e8b98e25757ce1663c4a478e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73d7b3b1_c1273a67",
        "filename": "src/tint/transform/std140.cc",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-09-16T16:50:07Z",
      "side": 1,
      "message": "Experimentally I tried this patch, and it does work.  So I\u0027m not understanding something....",
      "parentUuid": "a442d383_59095483",
      "range": {
        "startLine": 138,
        "startChar": 16,
        "endLine": 138,
        "endChar": 63
      },
      "revId": "f243e361032a9e6e8b98e25757ce1663c4a478e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e27dbdd_5a0d8998",
        "filename": "src/tint/transform/std140.cc",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-09-16T16:55:13Z",
      "side": 1,
      "message": "Oh, lines 147-153 scan down from the global variables, and the decompose lambda peers into the types, and doesn\u0027t need to have the usage tracking in the type.\n\n\nIt seems you could delete the scan from lines 136-146.\nBut the resolver has already cached the usage.\n\nNever mind.",
      "parentUuid": "73d7b3b1_c1273a67",
      "range": {
        "startLine": 138,
        "startChar": 16,
        "endLine": 138,
        "endChar": 63
      },
      "revId": "f243e361032a9e6e8b98e25757ce1663c4a478e3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}