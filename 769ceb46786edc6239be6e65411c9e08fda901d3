{
  "comments": [
    {
      "key": {
        "uuid": "c5355590_3e99f6d1",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-04-03T21:14:13Z",
      "side": 1,
      "message": "I don\u0027t think it makes sense to use attachmentRefs for both color/depthstencil attachments and resolve attachments, because it just makes the array bigger and confuses things later. Instead I\u0027d use two std::arrays colorAttachmentRefs and resolveAttachmentRefs, each with appropriate size. It shouldn\u0027t waste any space.\n\n(Actually, I would personally prefer to separate the depthstencil attachment out from the color attachments as well if possible.)",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1db1bcac_a12ed779",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T21:16:39Z",
      "side": 1,
      "message": "+1 for some reason I thought all attachment refs were set in one pointer but resolve attachments have their own pointer so we should definitely split the arrays.",
      "parentUuid": "c5355590_3e99f6d1",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4b89db2_fc8f8112",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T21:22:27Z",
      "side": 1,
      "message": "Can you also split off the depthStencilAttachment?\n\nTypes would be the following:\n\nstd::array\u003cVkAttachmentReference, kMaxAttachmentCount\u003e colorAttachmentRefs;\nstd::array\u003cVkAttachmentReference, kMaxAttachmentCount\u003e resolveAttachmentRefs;\nVkAttachmentReference depthStencilAttachmentRef;",
      "parentUuid": "1db1bcac_a12ed779",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4e158b0_300c9f73",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T09:18:05Z",
      "side": 1,
      "message": "nit: resolveAttachmentStartIndex?",
      "range": {
        "startLine": 140,
        "startChar": 17,
        "endLine": 140,
        "endChar": 52
      },
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83241375_d2b9ca8d",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-04-03T21:14:13Z",
      "side": 1,
      "message": "Comment above would make this unnecessary.",
      "parentUuid": "d4e158b0_300c9f73",
      "range": {
        "startLine": 140,
        "startChar": 17,
        "endLine": 140,
        "endChar": 52
      },
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a6bf42d_8e8dc906",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T09:18:05Z",
      "side": 1,
      "message": "This can be computed using query.resolveTargetMask.any()",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c5fe7e6_325781bd",
        "filename": "src/dawn_native/vulkan/RenderPassCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-04-03T21:14:13Z",
      "side": 1,
      "message": "Comment above would make this simpler by removing the pointer arithmetic.",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21cdb8f0_7bdc8a2b",
        "filename": "src/dawn_native/vulkan/RenderPassCache.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T09:18:05Z",
      "side": 1,
      "message": "Can you add a comment that explains how the VkRenderPasses created pack the attachments so that we can easily make sure we match the same order in CommandBufferVk?",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07d961d1_ffd9a1c6",
        "filename": "src/dawn_native/vulkan/RenderPassCache.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-04-03T21:14:13Z",
      "side": 1,
      "message": "Maybe just refer to the function that does it, IMO, because I wouldn\u0027t want this comment to get out of sync with the implementation there. e.g. \"Needs to match the attachment layout created by RecordBeginRenderPass\"",
      "parentUuid": "21cdb8f0_7bdc8a2b",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "003fee61_e4d62c92",
        "filename": "src/dawn_native/vulkan/RenderPassCache.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-04-03T21:16:09Z",
      "side": 1,
      "message": "oh wait, I see now that CommandBufferVk is supposed to match how it is done here, not the other way around. Disregard my comment, +1 to Corentin\u0027s comment.",
      "parentUuid": "07d961d1_ffd9a1c6",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23a9e3c3_ffe43d9a",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T09:18:05Z",
      "side": 1,
      "message": "WebGPU doesn\u0027t support other sample counts, no need for a TODO.",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a23bbfbf_95282a57",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-04-03T09:18:05Z",
      "side": 1,
      "message": "Can we have an assert that uses vkGetPhysicalDeviceImageFormatProperties to make sure this image is supported? Vulkan has very few guarantees that all formats can be used as 4xMSAA. To avoid adding too much code here, it could be in a helper function.",
      "revId": "769ceb46786edc6239be6e65411c9e08fda901d3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}