{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0710273e_1d5ac833",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-22T17:32:34Z",
      "side": 1,
      "message": "Hi Austin,\n\nThis is still WIP but I had a question for you about the tests. Thanks!",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f7ffa0b_95668a17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T10:12:15Z",
      "side": 1,
      "message": "Thanks! +Corentin for input as Austin is now OOO",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83e2b495_70ef7f32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T10:14:20Z",
      "side": 1,
      "message": "Corentin, for context: This CL is still WIP, but I\u0027m looking for input on handling test crashes.",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51739281_b674dd96",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-23T14:06:23Z",
      "side": 1,
      "message": "nit: Maybe comment that IOSurfaces always support all the usages? Or maybe even:\n\n```\n// IO surfaces always support the following usages.\nkIOSurfaceSupportedUsages \u003d ...;\n\nproperties.usage \u003d kIOSurfaceSupportedUsages;\n```\n\nAnd let the frontend gate on what the format in Dawn actually supports?",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9924d769_3a3caafe",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T16:09:18Z",
      "side": 1,
      "message": "Done (in predecessor)",
      "parentUuid": "51739281_b674dd96",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59eec92d_67aff407",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-23T14:06:23Z",
      "side": 1,
      "message": "That seems like it would never be added since `internalFormat` wouldn\u0027t `supportsStorageUsage`.",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7abd4472_cdac4a45",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T16:09:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59eec92d_67aff407",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eaff6c4_1a69fea8",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-23T14:06:23Z",
      "side": 1,
      "message": "Would there be a way to make these restrictions part of the frontend instead of having to duplicate it in each backend?",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82615f3_ac43ff07",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T14:14:42Z",
      "side": 1,
      "message": "We could totally do that - I think that we would do it where I added the asserts in SharedTextureMemory.cpp, right? I was actually looking to make that change and then I saw that the place that I found to do it in SharedTextureMemory.cpp doesn\u0027t have a pattern of doing that - e.g., it could already do that for RenderAttachment rather than asserting that RenderAttachment isn\u0027t set if the format isn\u0027t renderable? It seems like for consistency we should either (1) add all the usages that the backend supports in the backend and then strip out the ones that don\u0027t work in this particular dynamic circumstance in the frontend or (2) do all the work in the backend, as is being done now. WDYT?",
      "parentUuid": "7eaff6c4_1a69fea8",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a69d115_171a35c6",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-23T14:26:00Z",
      "side": 1,
      "message": "Yep it would be where these asserts are. IMHO 1) is better since it is both more consistent and less code when adding subsequent backends.",
      "parentUuid": "d82615f3_ac43ff07",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55bf351a_c903167c",
        "filename": "src/dawn/native/metal/SharedTextureMemoryMTL.mm",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T16:09:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a69d115_171a35c6",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "523b8e7e_c0345a27",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 417,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-23T14:06:23Z",
      "side": 1,
      "message": "u-nit: isSinglePlanar",
      "range": {
        "startLine": 417,
        "startChar": 13,
        "endLine": 417,
        "endChar": 29
      },
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8c53d2_46263d4e",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 417,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T16:09:18Z",
      "side": 1,
      "message": "I\u0027ll internalize this in another year or so ;). Done.",
      "parentUuid": "523b8e7e_c0345a27",
      "range": {
        "startLine": 417,
        "startChar": 13,
        "endLine": 417,
        "endChar": 29
      },
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "195cc51e_50cc693d",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-22T17:32:34Z",
      "side": 1,
      "message": "Am I correct in assuming that we shouldn\u0027t execute the below code for multiplanar formats regardless of whether they\u0027re renderable (on this test and at least one other test)? This test crashes on multiplanar formats if UseInRenderPass() is called - first because of [1], but if I relax that, the test still crashes, just without a stacktrace.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/metal/TextureMTL.mm;l\u003d1012-1014?q\u003dTextureMTL.mm\u0026ss\u003dchromium",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5cfd3ff_80ef943f",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-22T17:42:27Z",
      "side": 1,
      "message": "you\u0027re correct that both UseInRenderPass and UseInCopy aren\u0027t written to actually support multiplanar formats. It could be done by passing in a TextureAspect through to the view created for the render pass, or the ImageCopyTexture source.\n\nI think it\u0027s probably fine to skip and not add that kind of support because we do / should have other tests that test copying/rendering to a specific texture aspect.\nand we probably have sufficient coverage for the intent of this test from single-planar formats.",
      "parentUuid": "195cc51e_50cc693d",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb42e5d2_02dd74e3",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T10:12:15Z",
      "side": 1,
      "message": "Thanks! I dug further into the crash post-relaxing [1], as it occurs in other tests as well. The issue turns out to be that the IOSurface created by the tests for at least one multiplanar format has 0 planes, so accessing plane 0 causes a crash. A number of tests hit this now since multiplanar formats are now renderable. I can change all those tests to run only for single-planar formats, but I have a couple questions before doing that:\n\n* Is it expected that the IOSurfaces that the test creates for multiplanar formats have 0 planes (I assume that this is some kind of failure mode of CreateIOSurface())? e.g., is this comment [2] related?\n* Is it surprising that the only point that this results in a failure at is when actually trying to create a TextureView from the Texture? Naively, I would expect that we would have hit a failure when actually creating the IOSurface and/or creating SharedTextureMemory from it and/or creating the Texture from the SharedTextureMemory, as this seems like an error case?\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/metal/TextureMTL.mm;l\u003d1012-1014?q\u003dTextureMTL.mm\u0026ss\u003dchromium\n[2] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/end2end/SharedTextureMemoryTests_apple.mm;l\u003d96-98?q\u003dSharedTextureMemoryTests_app\u0026ss\u003dchromium",
      "parentUuid": "a5cfd3ff_80ef943f",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea39d5a9_f55a7429",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-11-23T14:03:38Z",
      "side": 1,
      "message": "I think you can assert here [1] or return an error if the number of planes in the IOSurface is not enough for the multiplanar format. Maybe make this function [2] public in IOSurfaceUtils.h.\n\nDoing so will need to fix the remaining tests in the SharedTextureMemoryTests to properly allocate correct number of planes in the IOSurface. Alternatively just skip the tests if multiplanar format is encountered. The relevant multiplanar tests are already covered in VideoViewTests.cpp\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/metal/TextureMTL.mm;drc\u003d1d819e16050c87b3af9402c67d357520798d286a;l\u003d894\n[2] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/common/IOSurfaceUtils.cpp;drc\u003d1d819e16050c87b3af9402c67d357520798d286a;l\u003d59",
      "parentUuid": "eb42e5d2_02dd74e3",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d373bbb7_7b4135de",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T14:14:42Z",
      "side": 1,
      "message": "Asserting in [1] makes sense to me, but as you say, would require fixing the creation of the IOSurfaces that I linked to in my [2] above. I don\u0027t know offhand what\u0027s going wrong there. If that\u0027s not trivial to track down, I can file a bug/TODO and in the meantime skip the tests here that create a TextureView when in multiplanar format to keep going on this CL.",
      "parentUuid": "ea39d5a9_f55a7429",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "954fe5c7_aecfe555",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T14:20:34Z",
      "side": 1,
      "message": "@lehoangquyen@chromium.org: Do you see what would be going wrong in the IOSurface creation for multiplanar formats in [1]?\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/tests/end2end/SharedTextureMemoryTests_apple.mm;l\u003d96-98?q\u003dSharedTextureMemoryTests_app\u0026ss\u003dchromium",
      "parentUuid": "d373bbb7_7b4135de",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ace27be_9c09bf6c",
        "filename": "src/dawn/tests/end2end/SharedTextureMemoryTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 734,
      "author": {
        "id": 1000122
      },
      "writtenOn": "2023-11-23T16:09:18Z",
      "side": 1,
      "message": "To separate these concerns, I changed these tests to run only for single-planar formats and filed a bug/TODO.",
      "parentUuid": "954fe5c7_aecfe555",
      "revId": "ce126e0c9aab884c7d13529e2e6b67c045d3163a",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}