{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2c09270d_ebea4bcb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7080a84e_52658ab6",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "u-unit: we try to keep this file sorted alphabetically. Maybe that\u0027s not a good call and we should have sections instead, I\u0027m not sure.",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fff0eb24_06594940",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "I\u0027m happy to sort them, but keeping them group here was significantly easier to work with while debugging. Worth nothing this file is only somewhat alphabetical as-is.",
      "parentUuid": "7080a84e_52658ab6",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb5a842_dd542377",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-07T14:29:26Z",
      "side": 1,
      "message": "Yeah maybe we should sort by blocks of related types instead of be functionality. Allowing comments would help. Let\u0027s keep the bindings stuff as is and see about reordering in the future.",
      "parentUuid": "fff0eb24_06594940",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11cc3f99_d98e1d80",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "nit: Maybe these sub-descriptors should be extensible in case we want to add more members to them in the future? ditto below",
      "range": {
        "startLine": 100,
        "startChar": 22,
        "endLine": 100,
        "endChar": 27
      },
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ed871a0_d0847a0e",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11cc3f99_d98e1d80",
      "range": {
        "startLine": 100,
        "startChar": 22,
        "endLine": 100,
        "endChar": 27
      },
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7b1a3e5_3f26777e",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "nit: I think we might want to keep the logic that says that undefined means 2D so that 0 initialization in C/C++ provides the default values.",
      "range": {
        "startLine": 141,
        "startChar": 85,
        "endLine": 141,
        "endChar": 87
      },
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7878ed75_32beab2a",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7b1a3e5_3f26777e",
      "range": {
        "startLine": 141,
        "startChar": 85,
        "endLine": 141,
        "endChar": 87
      },
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e3efc37_b2928e89",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "What\u0027s the default when undefined is used (if there\u0027s one?)",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd030fb0_a6da68d3",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Leaving this undefined simply means that it\u0027s not a storage texture binding. In order to be valid you can only have one of buffer.type, sampler.type, texture.sampleType, or storageTexture.access defined.",
      "parentUuid": "0e3efc37_b2928e89",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a7ad1f2_4c2642c3",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-07T14:29:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cd030fb0_a6da68d3",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4909b244_e7ec2586",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 160,
        "startChar": 87,
        "endLine": 160,
        "endChar": 88
      },
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96a6b46d_1481694a",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4909b244_e7ec2586",
      "range": {
        "startLine": 160,
        "startChar": 87,
        "endLine": 160,
        "endChar": 88
      },
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bb83893_93a939e3",
        "filename": "dawn.json",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "Putting it at the end so the tests can be updated in a separate PR is a good idea!",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53125f31_c5ab094a",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "For all of the \"new\" code paths we should raise a validation error if bindingType is set to something other than Undefined (we might need to add the enum) because it would show that the code is using both old and new at the same time, which is probably a mistake. We should have DeprecationAPITests that cover this temporary validation in each of the 4 cases too.\n\nWe should probably add this in this CL contrary to the other comments.",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a61a3d3_97948bac",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "We would need to add the enum, and the reason I avoided it here is because that ended up touching a lot more files where the new enum would need to be accounted for in switch statements (almost universally with an UNREACHED). Agreed that it\u0027s probably the right approach overall, but I didn\u0027t want to dive into that until this general direction was given the thumbs up.",
      "parentUuid": "53125f31_c5ab094a",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c20ab333_5a34d9b3",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-07T14:29:26Z",
      "side": 1,
      "message": "Ack, I think what\u0027s in the correct version of the CL is pretty good and atomic except for that one part.",
      "parentUuid": "6a61a3d3_97948bac",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30dbfb52_ed8874c0",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T08:24:11Z",
      "side": 1,
      "message": "This is the last comment that still needs to be handled. We can chose to add wgpu::BindingType::Undefined in the next CL along with the validation so that we can make forward progress with the stack, but if that\u0027s the case it should be the next CL in the stack to make sure people don\u0027t mistakenly start using both paths in tests.",
      "parentUuid": "c20ab333_5a34d9b3",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0fb669d_834cb2de",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "I just realized we should do this for both Storage and ReadonlyStorage. Can you the path to check for ReadonlyStorage to the check here and at [1] and edit the UnsafeAPITests? (here or as a follow up if that\u0027s too cumbersome? But if in a follow up please add a TODO(dawn:527) so we don\u0027t forget)",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cee581e2_22045719",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0fb669d_834cb2de",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a8e3aff_0e21467f",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "Yeah, when we add the deprecation warning all the tests will have to be moved to the new API, and to not lose coverage we should add DeprecatedAPITests that check that each of the members of the old path work as expected (we can do that by checking bindgrouplayout \u003c-\u003e bindgroup compatibility, except for hasDynamicOffset which we could not cover and hope it doesn\u0027t break).",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2584a18_76790c94",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-07T14:29:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3a8e3aff_0e21467f",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e45de15_fb2d6f77",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "Could we have similar defaulting for the new storageTexture and sampleTexture paths? This is so zero-initialization puts all values to the default which is quite a nice feature in C.",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b15dc6bd_723c1a7a",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e45de15_fb2d6f77",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0495a000_25e8a2da",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "[1]",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "899be46e_35d78132",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0495a000_25e8a2da",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13537ada_5f77840f",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "note: I assume the goal is to change it to `return binding.buffer.type !\u003d undefined` in the future?",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76a75e38_083bbea7",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Yeah, once we no longer have to worry about the deprecated path this gets a lot easier. Could probably drop this function all together.",
      "parentUuid": "13537ada_5f77840f",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77a6c487_e1349da8",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 346,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "nit: TODO(dawn:527)\n\n+1 to the staggered approach.",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f52e2e84_40cebd13",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 346,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2020-12-04T19:20:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77a6c487_e1349da8",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adf9e9e7_9bcec668",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "See below, I don\u0027t remember what we decided for WGSL here either.",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd627de0_7b61d40a",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T08:20:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "adf9e9e7_9bcec668",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "324d9c04_acca32f4",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 391,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "I don\u0027t remember what we decided for WGSL, will these be different types of textures in the shader or do we determine things statically?",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2667690c_76e7b695",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 391,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-07T14:29:26Z",
      "side": 1,
      "message": "Kai, do you know?",
      "parentUuid": "324d9c04_acca32f4",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cc67cc4_04debbb0",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 391,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-12-08T01:04:35Z",
      "side": 1,
      "message": "I\u0027m not 100% sure, but I think we do it statically by enumerating the (texture bind point,sampler bind point) pairs in the shader and making sure it doesn\u0027t violate the pipeline layout\u0027s bind group layouts.\n\nIt was determined this solution was just fine, and making it explicit would be way too annoying (doubles the lists of texture and sampler types, or more)",
      "parentUuid": "2667690c_76e7b695",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6d43281_7fbb3285",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 3
      },
      "lineNbr": 391,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-08T08:20:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2cc67cc4_04debbb0",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58f66420_0f4995b3",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 839,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-04T13:06:27Z",
      "side": 1,
      "message": "I think these could stay wgpu::BindGroupLayoutEntry so that we don\u0027t rely implicitly on BindingLayoutEntryInitializationHelper having the no additional size compared to it?",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ece81dc_97ac5a07",
        "filename": "src/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 839,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-07T14:29:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58f66420_0f4995b3",
      "revId": "78b5bc8ac3fd90358920ada238e8434ad073038e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}