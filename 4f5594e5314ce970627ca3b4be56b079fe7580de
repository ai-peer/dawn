{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "89955a46_bc09a77e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-12-16T19:54:43Z",
      "side": 1,
      "message": "Finally getting back to this! Took me a while to work out how I wanted to approach it.",
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e7314cb_ebd71278",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-16T21:10:27Z",
      "side": 1,
      "message": "LGTM",
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "814fbe79_f5e1089b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-12-19T11:23:17Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "089dbbed_d5d739bc",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1031,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-16T21:10:27Z",
      "side": 1,
      "message": "nit: std::move",
      "range": {
        "startLine": 1031,
        "startChar": 78,
        "endLine": 1031,
        "endChar": 93
      },
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80ae59db_f4355476",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1071,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-12-19T11:23:17Z",
      "side": 1,
      "message": "It\u0027d be nice to find a way to create the textures only on submit because here the render pass encoder holds onto a lot of memory, but I don\u0027t think that we have the facilities to do this yet. Can we have a TODO to track this potential improvement?\n\nI\u0027m thinking that in the future we could add to the command stream a special command that says \"I will produce a bunch of commands for you to consume\", and then this workaround places one at the start of the render pass (but not BeginRenderPass) and one at the end. This way the additional commands and resources are created only on demand.",
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e6d2392_b50d3c38",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1071,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-12-19T11:24:12Z",
      "side": 1,
      "message": "Actually thinking of it, it might be a way to reduce some of the problems with multithreading because it would allow avoiding all(?) creation of resources during command encoding.",
      "parentUuid": "80ae59db_f4355476",
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c6eae1_735ed3d7",
        "filename": "src/dawn/native/CommandEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1071,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-19T16:39:16Z",
      "side": 1,
      "message": "indeed - I\u0027ve been thinking something similar - like chaining an extra command stream onto a command. Could probably be used for the indirect draw validation that we have as well.",
      "parentUuid": "9e6d2392_b50d3c38",
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d9f66f_37085348",
        "filename": "src/dawn/native/RenderPassEncoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-12-16T21:10:27Z",
      "side": 1,
      "message": "I think this should be inside the TryEncode. otherwise, if the developer does something wrong such that they hit validation errors inside APIEnd(), then they will never successfully `mEncodingContext-\u003eExitRenderPass`. And then, this callback will run and it\u0027ll spew a lot of copy validation errors (since the pass is still open) which make no sense to the developer",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 166,
        "endChar": 5
      },
      "revId": "4f5594e5314ce970627ca3b4be56b079fe7580de",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}