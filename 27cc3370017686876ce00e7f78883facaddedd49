{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8f0f77eb_56e60e01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000241
      },
      "writtenOn": "2021-05-10T03:22:51Z",
      "side": 1,
      "message": "Please take another look, thanks.",
      "revId": "27cc3370017686876ce00e7f78883facaddedd49",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1434c936_868777f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-11T23:04:39Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "27cc3370017686876ce00e7f78883facaddedd49",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81cf092f_570d319a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-12T14:57:22Z",
      "side": 1,
      "message": "LGTM",
      "revId": "27cc3370017686876ce00e7f78883facaddedd49",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb45ffb_d00d27d4",
        "filename": "src/tests/perf_tests/ShaderRobustnessPerf.cpp",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-11T23:04:39Z",
      "side": 1,
      "message": "do you think we could change this to a helper function like:\n\nwriteSharedArray(\n   mm_Bsub, inputRow, inputCol,\n   mm_readB(t * TileInner + inputRow, globalCol))\n\nWe could define writeSharedArray for both array\u003cvec4\u003cf32\u003e, 1024\u003e and array\u003carray\u003cvec4\u003cf32\u003e, 16\u003e, 64\u003e\n\nI think WGSL should be able to resolve the overload ? This way we don\u0027t need to duplicate so much between kMatMulVec4BodyPart2Array1D and kMatMulVec4BodyPart2Array2D",
      "range": {
        "startLine": 309,
        "startChar": 20,
        "endLine": 309,
        "endChar": 48
      },
      "revId": "27cc3370017686876ce00e7f78883facaddedd49",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38239f7c_eddf917e",
        "filename": "src/tests/perf_tests/ShaderRobustnessPerf.cpp",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1000241
      },
      "writtenOn": "2021-05-12T06:14:58Z",
      "side": 1,
      "message": "It seems that WGSL doesn\u0027t support function overload. If we have below overload functions:\n        fn readSharedArray(arr : array\u003cvec4\u003cf32\u003e, 1024\u003e, inputRow : u32, inputCol : u32, rowStride : u32) -\u003e vec4\u003cf32\u003e  {\n            let index : u32 \u003d inputRow * rowStride + inputCol;\n            return arr[index];\n        }\n\n        fn readSharedArray(arr : array\u003carray\u003cvec4\u003cf32\u003e, 16\u003e, 64\u003e, inputRow : u32, inputCol : u32, rowStride : u32) -\u003e vec4\u003cf32\u003e  {\n            return arr[inputRow][inputCol];\n        }\n\n        fn writeSharedArray(arr : array\u003cvec4\u003cf32\u003e, 1024\u003e, inputRow : u32, inputCol : u32, rowStride : u32, value : vec4\u003cf32\u003e) {\n            let index : u32 \u003d inputRow * rowStride + inputCol;\n            arr[index] \u003d value;\n        }\n\n        fn writeSharedArray(arr : array\u003carray\u003cvec4\u003cf32\u003e, 16\u003e, 64\u003e, inputRow : u32, inputCol : u32, rowStride : u32, value : vec4\u003cf32\u003e) {\n            arr[inputRow][inputCol] \u003d value;\n        }\n\nIt will report below errors:\nGot unexpected device error: Tint WGSL reader failure:\nParser: 54:9 error v-0016: function names must be unique \u0027readSharedArray\u0027\n        fn readSharedArray(arr : array\u003carray\u003cvec4\u003cf32\u003e, 16\u003e, 64\u003e, inputRow : u32, inputCol : u32, rowStride : u32) -\u003e vec4\u003cf32\u003e  {\n        ^^",
      "parentUuid": "adb45ffb_d00d27d4",
      "range": {
        "startLine": 309,
        "startChar": 20,
        "endLine": 309,
        "endChar": 48
      },
      "revId": "27cc3370017686876ce00e7f78883facaddedd49",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6f317fa_be0cec55",
        "filename": "src/tests/perf_tests/ShaderRobustnessPerf.cpp",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-12T14:57:22Z",
      "side": 1,
      "message": "Ah, sorry for that misleading suggestion then.",
      "parentUuid": "38239f7c_eddf917e",
      "range": {
        "startLine": 309,
        "startChar": 20,
        "endLine": 309,
        "endChar": 48
      },
      "revId": "27cc3370017686876ce00e7f78883facaddedd49",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}