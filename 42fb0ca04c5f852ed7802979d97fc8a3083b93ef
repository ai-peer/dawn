{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aefb18a5_d1d17bfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-09-02T16:18:27Z",
      "side": 1,
      "message": "Note this should not be required for the Vulkan implementation. Vulkan feeds an object handle into a function, which should just error if invalid.",
      "revId": "42fb0ca04c5f852ed7802979d97fc8a3083b93ef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c61703_e0586ce8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-02T16:24:43Z",
      "side": 1,
      "message": "Can wea add a test? I\u0027m concerned about\n\nbuffer.destroy();\nbuffer.label \u003d \"foo\";\n\nthe allocation backing mHandle is freed and the handle is set to null.\nWe still don\u0027t want to incur Vulkan backend validation layers, so we should probably skip for Vulkan as well.\n\nFurther, I think we should also skip setting the label if device-\u003eIsLost(). We might be able to write a test for that as well with device-\u003eAPILoseForTesting()",
      "parentUuid": "aefb18a5_d1d17bfc",
      "revId": "42fb0ca04c5f852ed7802979d97fc8a3083b93ef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2558fe76_e7773a2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-02T16:25:46Z",
      "side": 1,
      "message": "Vulkan requires that the object is valid. So we need to check for VK_NULL_HANDLE first.\n\nhttps://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-objectType-parameter\n\nThe question though is how we end up with an empty object. Shouldn\u0027t the object creation fail in this case?",
      "parentUuid": "aefb18a5_d1d17bfc",
      "revId": "42fb0ca04c5f852ed7802979d97fc8a3083b93ef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b982eeba_cc0d3325",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-02T16:27:27Z",
      "side": 1,
      "message": "You can call SetLabel on an error object. WE could either validate you don\u0027t do that, or no-op stuff in the backend. I think no-op works better so that after you create the error object, you can setLabel and still get messages like \"buffer myObject is an error\"",
      "parentUuid": "2558fe76_e7773a2f",
      "revId": "42fb0ca04c5f852ed7802979d97fc8a3083b93ef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aef853a4_a1454756",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-02T16:28:59Z",
      "side": 1,
      "message": "Error objects are pure frontend objects though. But what you mentioned in your earlier comment (we had a race) makes sense: we zero-out the handles when the buffer or texture is destroyed.",
      "parentUuid": "b982eeba_cc0d3325",
      "revId": "42fb0ca04c5f852ed7802979d97fc8a3083b93ef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "528c5335_06564732",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2021-09-02T17:26:34Z",
      "side": 1,
      "message": "Added:\n- IsDeviceLost Check\n- Checks on Vulkan\n- Tests",
      "parentUuid": "aef853a4_a1454756",
      "revId": "42fb0ca04c5f852ed7802979d97fc8a3083b93ef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}