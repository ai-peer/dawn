{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c682a697_1b28a679",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-02T16:35:14Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "717fa0ec28c548bb8b01bc21eacf543f1387cded",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a8fe0b0_09e2063c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2020-11-02T20:00:22Z",
      "side": 1,
      "message": "LGTM\n\nAny way to test this? I imagine it\u0027s difficult, but I had to ask.",
      "revId": "717fa0ec28c548bb8b01bc21eacf543f1387cded",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49587dbf_e353877b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-03T10:04:54Z",
      "side": 1,
      "message": "We could have a stress test that hammers submissions and calls to WaitForCommandsToBeScheduled but I don\u0027t know if / or mostly how we want such tests in Dawn. Austin WDYT?",
      "parentUuid": "3a8fe0b0_09e2063c",
      "revId": "717fa0ec28c548bb8b01bc21eacf543f1387cded",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92aab93c_6ff54bac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-03T18:54:03Z",
      "side": 1,
      "message": "I think it\u0027s fine to add if the tests are fast to run and likely to have hit the race. We have this for some atomics and memory synchronization tests",
      "parentUuid": "49587dbf_e353877b",
      "revId": "717fa0ec28c548bb8b01bc21eacf543f1387cded",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56025eb8_32c880d1",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-03T18:54:03Z",
      "side": 1,
      "message": "retain returns itself, so couldn\u0027t this be\n\ncmds \u003d [mLastSubmittedCommands retain]\n[cmds waitUntilScheduled]\n[cmds release]\n\nI would hope that Obj-C\u0027s reference counting is thread safe...\n\n\nMaybe I don\u0027t know what the bug is though (don\u0027t have privileges to view).\nis it because mLastSubmittedCommands is nil?\nmLastSubmittedCommands is set to nil while waitUntilScheduled is executing?",
      "range": {
        "startLine": 360,
        "startChar": 8,
        "endLine": 368,
        "endChar": 41
      },
      "revId": "717fa0ec28c548bb8b01bc21eacf543f1387cded",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb8a44ec_426e50d8",
        "filename": "src/dawn_native/metal/DeviceMTL.mm",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-04T13:19:32Z",
      "side": 1,
      "message": "I was not able to reproduce locally with 250 iterations of the following:\n\n+TEST_P(MetalAutoreleasePoolTests, AAA) {\n+    wgpu::BufferDescriptor desc;\n+    desc.size \u003d 4;\n+    desc.usage \u003d wgpu::BufferUsage::CopySrc | wgpu::BufferUsage::CopyDst;\n+\n+    wgpu::Buffer buffer1 \u003d device.CreateBuffer(\u0026desc);\n+    wgpu::Buffer buffer2 \u003d device.CreateBuffer(\u0026desc);\n+\n+    for (int i \u003d 0; i \u003c 1000\u0027000; i +\u003d 50) {\n+        wgpu::CommandEncoder encoder \u003d device.CreateCommandEncoder();\n+        encoder.CopyBufferToBuffer(buffer1, 0, buffer2, 0, 4);\n+        wgpu::CommandBuffer commands \u003d encoder.Finish();\n+        queue.Submit(1, \u0026commands);\n+\n+        volatile int a \u003d 0;\n+        for (int j \u003d 0; j \u003c i; j++) {\n+            a \u003d j;\n+        }\n+\n+        dawn_native::metal::WaitForCommandsToBeScheduled(device.Get());\n+    }\n+}\n+\n\nSo IDK.",
      "parentUuid": "56025eb8_32c880d1",
      "range": {
        "startLine": 360,
        "startChar": 8,
        "endLine": 368,
        "endChar": 41
      },
      "revId": "717fa0ec28c548bb8b01bc21eacf543f1387cded",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}