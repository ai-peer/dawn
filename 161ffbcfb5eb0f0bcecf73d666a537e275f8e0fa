{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "323fa463_109bb4c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-11-05T23:14:54Z",
      "side": 1,
      "message": "LGTM (bots willing)",
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2b211f7_44802706",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-11-06T12:23:21Z",
      "side": 1,
      "message": "`UniqueIdentifier` will append suffixes to make sure the name is unique, on symbol collision. As you\u0027re trying to create the unique name in the printer which is the end of the pipeline, this comes after transforms like `SingleEntryPoint`, you might end up with different names between stages for the same variable.\n\nA test that has a symbol collision made by a reference to a variable or structure with the name `blah_ubo_n`, made by just one stage might demonstrate this.\n\nYou might need to create a new transform that runs very early to fix this properly. That transform would have to create a new structure per SSBO.",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91ae2139_25732b2c",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-11-06T18:38:45Z",
      "side": 1,
      "message": "That\u0027s what I was trying to get at (probably badly) with my question in the bug.\n\nWhat if we simply skipped the UniqueIdentifier call, and modified the renamer (for GLSL) to rename anything of the form `*_ubo_*` and `*_ssbo_*`. Would that work?",
      "parentUuid": "d2b211f7_44802706",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742d41a6_bf28c30e",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-11-06T20:48:45Z",
      "side": 1,
      "message": "Yeah Stephen asked about this in bug. I tried and seemed that opengl didn\u0027t complain. But looking closer at the GLSL, the mismatch of block name is present though, with the case Ben suggested.\n\nWGSL input\n```\n@group(0) @binding(0) var\u003cuniform\u003e tint_symbol_ubo_0: f32;\n        @group(0) @binding(1) var\u003cuniform\u003e tint_symbol_ubo_1: u32;\n\n        @vertex fn vertex() -\u003e @builtin(position) vec4f {\n          _ \u003d tint_symbol_ubo_0;\n          _ \u003d tint_symbol_ubo_1;\n          return vec4f(tint_symbol_ubo_0) + vec4f(f32(tint_symbol_ubo_1));\n        }\n\n        @fragment fn fragment() -\u003e @location(0) vec4f {\n          _ \u003d tint_symbol_ubo_1;\n          return vec4f(f32(tint_symbol_ubo_1));\n        }\n```\n\n```\nInfo: /* Dumped generated GLSL Vertex */\n#version 320 es\n\nlayout(binding \u003d 0, std140) uniform tint_symbol_block_ubo_0 {\n  float inner;\n} tint_symbol;\n\nlayout(binding \u003d 1, std140) uniform tint_symbol_1_block_ubo_1 {\n  uint inner;\n} tint_symbol_1;\n\nvec4 tint_symbol_2() {\n  return (vec4(tint_symbol.inner) + vec4(float(tint_symbol_1.inner)));\n}\n\nvoid main() {\n  gl_PointSize \u003d 1.0;\n  vec4 inner_result \u003d tint_symbol_2();\n  gl_Position \u003d inner_result;\n  gl_Position.y \u003d -(gl_Position.y);\n  gl_Position.z \u003d ((2.0f * gl_Position.z) - gl_Position.w);\n  return;\n}\n\nInfo: /* Dumped generated GLSL Fragment */\n#version 320 es\nprecision highp float;\n\nlayout(location \u003d 0) out vec4 value;\nlayout(binding \u003d 1, std140) uniform tint_symbol_block_ubo_1 {\n  uint inner;\n} tint_symbol;\n\nvec4 tint_symbol_1() {\n  return vec4(float(tint_symbol.inner));\n}\n\nvoid main() {\n  vec4 inner_result \u003d tint_symbol_1();\n  value \u003d inner_result;\n  return;\n}\n\n```\n\nNote `\"tint_symbol_1_block_ubo_1\" !\u003d \"tint_symbol_block_ubo_1\"`\n\nBut glLinkProgram didn\u0027t complain about it. Weird.\n\n\nWhat Stephen suggests: with the Renamer transform now takes extra input of remappings of assigned name, in dawn we can tell tint that these binding variable names have their custom remappings, e.g.:\n\n\"@group(0) @binding(0) var\u003cuniform\u003e blah_ubo_0\" -\u003e \"dawn_binding_0_0\"\n\"@group(0) @binding(1) var\u003cuniform\u003e blah_ubo_1\" -\u003e \"dawn_binding_0_1\"\n\nThis is not directly assign block name, but the name of the variable. Tint now deducts the block name from the variable name. I feel this is not 100% stable, e.g. if Tint changes internal renaming rules of these blocks, mismatch can still happen.\n\nBut would like to hear your thoughts.",
      "parentUuid": "91ae2139_25732b2c",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28139447_bf406bf2",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-11-06T21:10:13Z",
      "side": 1,
      "message": "\u003e Tint now deducts the block name from the variable name.\n\nAnything that does this suffers the same collision issue. I still think the most stable option is to create a new transform that generates these buffer object structures early in the transform list. It doesn\u0027t matter what you name these (`b.Symbols().New()` is sufficient), so long as the symbol is consistent for each entry point.\n\nTo do this though, you might have to wrap the variable type in a new, unique structure, and fix up the accesses to go via a member access. Without nesting, you\u0027ll get a type mismatch when attempting to between uniform / storage vars and another variable of the same type.",
      "parentUuid": "742d41a6_bf28c30e",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "881b178d_dd86acd5",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-11-06T22:40:22Z",
      "side": 1,
      "message": "Feels like the new transform approach will be another bigger change so let me I just try to push forward this smaller glsl emiiter change a little bit more if possible. (Looks like it has to change a bunch of glsl expected tests unfortunately)\n\nTrying to interpret the spec language from opengl es 3.1 again and I think I know why the test mentioned above pass:\n\u003e When a named uniform block is declared by multiple shaders in a program, it\nmust be declared identically in each shader. The uniforms within the block must be\ndeclared with the same names, types, and layout qualifiers, in the same order. If a\nprogram contains multiple shaders with different declarations for the same named\nuniform block, the program will fail to link\n\n- `layout(binding \u003d 0, std140) uniform tint_symbol_block_ubo {` in vs and `layout(binding \u003d 1, std140) uniform tint_symbol_block_ubo {` in fs is bad. They are different blocks with the same name (diff inlayout qualifer)\n\n- `layout(binding \u003d 1 std140) uniform tint_symbol_1_block_ubo_1 {` in vs and `layout(binding \u003d 1, std140) uniform tint_symbol_block_ubo_1 {` in fs is ok. They are the same block. The only difference is the block struct name. \"The uniforms **within** the block: names, types and the layout qualifiers\" are the same.\n\nSo what our fix needs to do is to make sure different block have different names, which can be guaranteed by appending the binding number. And it is okay for the same block to have different names as long as their inner variables and layout qualifier are the same.\n\nAnd the current emitter change seems satisfy this need.\n\nLet me know if you still think an early block-renamer transform is needed in this case.",
      "parentUuid": "28139447_bf406bf2",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cf8cb7f_f11df94e",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-11-09T14:30:12Z",
      "side": 1,
      "message": "The spec is pretty clear, IMHO: the name of a uniform or storage block binding must match across fragment \u0026 vert shaders. I think the issue is that only some vendor\u0027s drivers (in particular, NVidia\u0027s) actually generate a compilation error on mismatched names.\n\nI\u0027m going to check with the ANGLE team to see if this error can/should be added, so that it\u0027s at least common across all devices under ANGLE.",
      "parentUuid": "881b178d_dd86acd5",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "241c31cc_cfa90ad3",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-11-10T11:29:10Z",
      "side": 1,
      "message": "I\u0027m trying my best to understand the discussion in this thread. I think Shrek was saying that the block names don\u0027t need to match, and Stephen is saying they do.\n\nI\u0027m holding off review until this is resolved. Assuming the block names must match, I\u0027m still of the opinion that a new, earlier transform is the right fix here.",
      "parentUuid": "4cf8cb7f_f11df94e",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b59fff2_aebca1f4",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-11-10T14:19:49Z",
      "side": 1,
      "message": "Thanks, Ben. I did some investigation, and I think I understand the issue better now.\n\n1) If the block names match between vert \u0026 frag shader, then all of the contents must match: member names, types.\n\n2) If the block names don\u0027t match (even when the binding location does), then you\u0027re in \"cowboy mode\": the members can have any name and any type. Essentially you\u0027re \"reinterpret_cast\"ing the data differently in each shader.\n\nSo either option is possible as a solution:\n\n1) Always name the block at the same binding location the same between vert \u0026 frag shader. This would require ensuring that the generated names don\u0027t collide with other symbols in the shader.\n\n2) Always rename all blocks differently between vert \u0026 frag shader. This would require some input from Dawn to avoid collisions between the different stages.\n\n(The error in the current state is that we sometimes rename *different* blocks the same name in vert \u0026 frag shaders, which causes errors since the binding location and contents may be different.)",
      "parentUuid": "241c31cc_cfa90ad3",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4dd7e4c_8d70289d",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-11-10T14:34:44Z",
      "side": 1,
      "message": "Shrek\u0027s current solution is #2, and I believe avoids collisions since all *other* symbols in the shader have been previously renamed to tint_symbol_X, so they can\u0027t collide with tint_symbol_X_ubo_Y (Shrek, correct me if I\u0027m wrong).\n\nNot new to this patch, but I find this heavy-handed renaming a bit unfortunate, to be honest. My preference would be #1, with the additional constraint that the name includes the original WGSL name in some form. This would make it clearer that they originated as the same structure, and would make problems with the resulting GLSL shader easier to diagnose.\n\nBut I also don\u0027t want to impose the work of yet another transform, especially an AST-based one as we\u0027re moving to IR-based transforms anyway. So I\u0027m fine with the current patch, as long as it does in fact avoid all possible naming conflicts.",
      "parentUuid": "7b59fff2_aebca1f4",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e49be89e_3b0d096f",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-11-20T12:09:53Z",
      "side": 1,
      "message": "I\u0027d prefer if we could do this before getting into the printer. With the move to IR, this will all get re-implemented and less that we do here the better. If we did this as a transform before calling into the writer then it would be guaranteed to work with the new IR backend.",
      "parentUuid": "a4dd7e4c_8d70289d",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "873a2a37_ab97cda7",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-11-20T20:41:38Z",
      "side": 1,
      "message": "So the target is to keep change out of printer.\n\nI think this plan would do the job with less work \u0026 fix issues:\n- I will abandon this CL.\n- I will file a bug in tint to track the implementation of the transform to achieve \"1) Always name the block at the same binding location the same between vert \u0026 frag shader\". Likely we can implement this transform after IR switch in GL backend as well.\n- I will make a CL using another solution to achieve \"2) Always rename all blocks differently between vert \u0026 frag shader.\"for now, by appending \"f_\" suffix to all binding location variables, which can be done by adding to `Renamer::Config::requested_names` on dawn ShaderModuleGL, keeping tint implementation unchanged.\n\nThis way we can fix the issues exposed by enabling robustness on GL backend soon. And avoid the duplication of implementation of the bigger transform to align block names in both ast and IR for glsl",
      "parentUuid": "e49be89e_3b0d096f",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93840973_d5a5787d",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-11-20T23:00:34Z",
      "side": 1,
      "message": "Turns out the other \"shortcut\" I proposed (appending \"f_\" suffix to fragment shader buffer bindings variable) require variable name of resource binding, which is not immediately accessible from current code. I think I will go for transform directly then.",
      "parentUuid": "873a2a37_ab97cda7",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43b1c34e_1ff37c53",
        "filename": "src/tint/lang/glsl/writer/ast_printer/ast_printer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000685
      },
      "writtenOn": "2023-11-22T21:16:18Z",
      "side": 1,
      "message": "Filed https://crbug.com/tint/2103 to track transform approach. Abandon this.",
      "parentUuid": "93840973_d5a5787d",
      "range": {
        "startLine": 1938,
        "startChar": 15,
        "endLine": 1938,
        "endChar": 47
      },
      "revId": "161ffbcfb5eb0f0bcecf73d666a537e275f8e0fa",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}