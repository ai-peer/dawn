{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "86325057_59f5d963",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-04-11T07:46:11Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1df7f51b_141d83c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:22:33Z",
      "side": 1,
      "message": "LGTM",
      "revId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8944722b_cd47e481",
        "filename": "src/dawn/tests/unittests/wire/WireTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-11T09:22:33Z",
      "side": 1,
      "message": "Maybe we could have an ASSERT in the handlers that they are detached before they are destroyed. Otherwise we are very likely to miss doing this for other tests we add in the future.",
      "revId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb19891_ff4467da",
        "filename": "src/dawn/tests/unittests/wire/WireTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2024-04-12T02:10:44Z",
      "side": 1,
      "message": "Oh it\u0027s hard to do so because the command serializer of the handler (`CommandSerializer`) is not always a `TerribleCommandBuffer`. In fact we only need to detach the handlers for `TerribleCommandBuffer`, not  all `CommandSerializer`.",
      "parentUuid": "8944722b_cd47e481",
      "revId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5cdd3ee_0defa244",
        "filename": "src/dawn/tests/unittests/wire/WireTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-04-12T13:21:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9bb19891_ff4467da",
      "revId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "fe98ec24b42e94e0545bd0cbb53c055b530cd003",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}