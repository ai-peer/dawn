{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6676d98e_9f1568c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-13T06:30:18Z",
      "side": 1,
      "message": "Thanks for your review, Corentin and Austin! Please take another look.",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1c232be_767c7f9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T07:07:00Z",
      "side": 1,
      "message": "LGTM",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4369d54_cddf4316",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1831,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-13T07:07:00Z",
      "side": 1,
      "message": "It\u0027s a bit hard to read lines of booleans like these two arguments back to back. Maybe unset could be the last one and default to false? Not sure.",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "621720f9_23ea8df1",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1831,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-13T23:39:25Z",
      "side": 1,
      "message": "Any comments / ideas on this, Austin?",
      "parentUuid": "c4369d54_cddf4316",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a5b83c_323b63b9",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1831,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-14T00:09:41Z",
      "side": 1,
      "message": "I also don\u0027t like multiple boolean args like this.\n\nTestRenderPassBindGroup(nullptr, ...) is used in one test\n\ncould you instead make the block at [1] do:\n```\nif (bindGroup !\u003d nullptr) {\n            renderPassEncoder.SetBindGroup(0, bindGroup, count, offsets);\nelse {\n            renderPassEncoder.SetBindGroup(0, nullptr);\n}\n```\n\nthen, make the MissingBindGroup test do the test without this helper?\n\n\nOr, have this function be `TestRenderPassBindGroup(std::optional\u003cwgpu::BindGroup\u003e bindGroup, ...` and MissingBindGroup test can use std::nullopt ?",
      "parentUuid": "621720f9_23ea8df1",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7512e61_0a9abef5",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1831,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-14T01:27:11Z",
      "side": 1,
      "message": "thinking about it a second time, I think that probably we should not use std::optional and inline what\u0027s needed into MissingBindGroup.\nit\u0027s weird to call TestRenderPassBindGroup when in fact, no bind groups are actually used at all.",
      "parentUuid": "88a5b83c_323b63b9",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ab57e11_0a0277f6",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1831,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2023-06-14T06:17:51Z",
      "side": 1,
      "message": "To Austin, I agree with you that it is a little weird to call `TestRenderPassBindGroup` but in fact no bind groups are actually used at all in test `MissingBindGroup`. Maybe we can put the test code into that unittest directly. In addition, I can put bindgroup creation into a function, which is called again and again. This can be a refactor patch if needed.\n\nBut `if (bindgroup \u003d\u003d nullptr) { } else { }` is not good for my new test. I actually need to call SetBindGroup twice: set it at first and then unset it. So it is not a if-else statement. \n\nCorentin suggested using a default value but not sure. My understanding is that you folks don\u0027t like default values in Dawn project, in case users forget to set a correct value for the default values (or some other reasons). So adding default value for parameter is the last thing you want to do. For this one, the second bool (`bool unset`) is needed but it is only needed by one single function. So maybe we can just duplicate some code, just like what I did for another new test `UnsetInvalidatesBindGroupValidationCache`, in which we can actually reuse TestRenderPassBindGroup or TestComputePassBindGroup with some ifs, but only for that test. So, let\u0027s duplicate some code in both `UnsetInvalidatesBindGroupValidationCache` and `UnsetBindGroupWhenNeeded`. \n\nAgain, we can refactor this test file and these new tests by using a function to create bindgroup.",
      "parentUuid": "e7512e61_0a9abef5",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45f7aea4_7525c983",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1831,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-14T06:31:33Z",
      "side": 1,
      "message": "this level of duplication is fine with me since it removes the need to have the extra bools\n\narguably, it makes the test a lot more clear about what it is teating",
      "parentUuid": "4ab57e11_0a0277f6",
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3038325a_f43a3408",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1844,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-14T00:09:41Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 1839,
        "startChar": 8,
        "endLine": 1844,
        "endChar": 9
      },
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f969301_24d22f32",
        "filename": "src/dawn/tests/unittests/validation/BindGroupValidationTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1844,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-14T06:31:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3038325a_f43a3408",
      "range": {
        "startLine": 1839,
        "startChar": 8,
        "endLine": 1844,
        "endChar": 9
      },
      "revId": "fe6ed30a12fec64fa1e3aa815c8a6707d8e1eaf0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}