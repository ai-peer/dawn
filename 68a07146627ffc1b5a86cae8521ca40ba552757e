{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ec6c732a_b605186f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-13T21:48:38Z",
      "side": 1,
      "message": "LGTM",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b893b69_e6ece9ed",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-13T21:48:38Z",
      "side": 1,
      "message": "Given the comment, shouldn\u0027t this be\n\n```\nif (!destroyed) {\n  mutex\n  prepend\n} else {\n  destroy\n}\n```\n\n?",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "907b77a1_b2503606",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-09-14T00:12:11Z",
      "side": 1,
      "message": "Destroy needs the object in the list to run. That\u0027s why we always prepend first.",
      "parentUuid": "9b893b69_e6ece9ed",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "155cc437_f10bcc08",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-14T01:05:38Z",
      "side": 1,
      "message": "what if we make ApiObjectList a friend of ApiObjectBase and call DestroyImpl directly?",
      "parentUuid": "907b77a1_b2503606",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f1ffea4_fccff078",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-14T17:29:30Z",
      "side": 1,
      "message": "Thanks for the explanation. Either keeping as is with a comment or the friend idea would work.",
      "parentUuid": "155cc437_f10bcc08",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c10dbea4_adf2b423",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-09-14T18:17:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f1ffea4_fccff078",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82b58669_eaa36658",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-13T21:48:38Z",
      "side": 1,
      "message": "When does this happen? Could it be an ASSERT?",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7700be07_5be628e8",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-13T22:57:56Z",
      "side": 1,
      "message": "I think it\u0027s because it\u0027s re-entrant.\n\nApiObjectList::Destroy loops through the objects and calls Destroy on each one, which calls object-\u003eGetObjectTrackingList()-\u003eUntrack(this);\n\nshould probably have some comments describing this, and then also probably a good idea to make mMarkedDestroyed an enum with three states. Alive, Destroying, Destroyed.",
      "parentUuid": "82b58669_eaa36658",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "361a412a_8e520ca6",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-09-14T00:12:11Z",
      "side": 1,
      "message": "Yep, Austin is correct that it\u0027s because it is re-entrant. Added a comment detailing both use cases.\n\nI don\u0027t think there is any benefit of making an enum though since atm `Destroying` and `Destroyed` need to act the same. We can\u0027t make this an ASSERT even if we are `Destroyed` because of the case where we create `TextureView` from a destroyed `Texture`.",
      "parentUuid": "7700be07_5be628e8",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6274d4e2_d789a2de",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-14T01:05:38Z",
      "side": 1,
      "message": "what if we make ApiObjectList a friend of ApiObjectBase and call DestroyImpl directly? then we don\u0027t have the re-entrancy. Would like to avoid re-entrancy as much as possible since it makes it much more difficult to trace through\n\nalso, tbh the TextureView case getting immediately destroyed after getting created from a destroyed Texture seems kinda wonky. I don\u0027t see a clean way to handle it otherwise though.",
      "parentUuid": "361a412a_8e520ca6",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c5e1cc2_9d44f113",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-14T17:29:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6274d4e2_d789a2de",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8e54562_dbbb1538",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-13T22:57:56Z",
      "side": 1,
      "message": "uunit: maybe we should use !IsAlive()",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fda33c3_9b52caad",
        "filename": "src/dawn/native/ObjectBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-09-14T00:12:11Z",
      "side": 1,
      "message": "I had this initially but changed it because I was worried that we may change the definition of `Alive` in the future. But anyways changed back to that since it\u0027s probably fine.",
      "parentUuid": "b8e54562_dbbb1538",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "747cdafc_5ce83122",
        "filename": "src/dawn/native/ObjectBase.h",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-13T21:48:38Z",
      "side": 1,
      "message": "nit: The name change got me confused, we\u0027re tracking the object for future destruction. Maybe add that to the comment?",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9745d4e0_7767fdf6",
        "filename": "src/dawn/native/ObjectBase.h",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-09-13T22:57:56Z",
      "side": 1,
      "message": "maybe we should just not have this method at all and always call `GetObjectTrackingList()-\u003eTrack(this)` to avoid confusion. idk?",
      "parentUuid": "747cdafc_5ce83122",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9848d319_55818f0d",
        "filename": "src/dawn/native/ObjectBase.h",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-09-14T00:12:11Z",
      "side": 1,
      "message": "Added comment and got rid of it as well.",
      "parentUuid": "9745d4e0_7767fdf6",
      "revId": "68a07146627ffc1b5a86cae8521ca40ba552757e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}