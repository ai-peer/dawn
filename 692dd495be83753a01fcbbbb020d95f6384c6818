{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a25abc13_6629c6c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-05-25T17:23:53Z",
      "side": 1,
      "message": "This is a follow-up patch from Corentin\u0027s comment at https://dawn-review.googlesource.com/c/dawn/+/90780/2/src/dawn/native/d3d12/TextureD3D12.cpp for issue 1288. So I attached this change to issue 1288, too.",
      "range": {
        "startLine": 16,
        "startChar": 5,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "246e5a8a_4b161f8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-05-25T17:23:53Z",
      "side": 1,
      "message": "PTAL. Thank you!",
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a44abb5d_837c015b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-05-25T22:40:42Z",
      "side": 1,
      "message": "Added Kai in case you have some comments about the understanding of GetMipLevelSize() related stuff and its definition in WebGPU spec.",
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c1e93d_c727674d",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1102,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-05-25T17:39:18Z",
      "side": 1,
      "message": "Btw, \"copyDepth\" exactly equals to \"largestMipSize.depthOrArrayLayers\" for 2D array textures, even though the fact contradicts with our common sense about GetMipLevelPhysicalSize() for 2D array textures. So this CL is more like a code-refactoring.",
      "range": {
        "startLine": 1102,
        "startChar": 75,
        "endLine": 1102,
        "endChar": 84
      },
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69a25938_275dccb8",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1102,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-25T20:05:42Z",
      "side": 1,
      "message": "Yeah, I was thinking the same. Maybe in the future we can have a GetSingleSubresourceSize(level, aspect)?",
      "parentUuid": "19c1e93d_c727674d",
      "range": {
        "startLine": 1102,
        "startChar": 75,
        "endLine": 1102,
        "endChar": 84
      },
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e86ab90_4c2060ca",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1137,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-05-25T17:23:53Z",
      "side": 1,
      "message": "I am very curious that if we use copySize here  (which is the current code snippet), it will access to out-of-bounds of the texture because we iterate each array layer but copySize (GetMipLevelPhysicalSize) has multiple (all) layers for each iteration. But it\u0027s very weird that no tests fail...\n\nSo I looked into the implementation, I found that singleMipAndArraySize actually is the same with copySize, see the implementation about GetMipLevelLogicalSize() at https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn/native/Texture.cpp#698 and GetMipLevelPhysicalSize() at https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn/native/Texture.cpp#713. \n\nHowever, it contradicts with our common sense about a sub-resource\u0027s size. The differences are the definitions about depthOrArrayLayers for 2D array textures. And it also contradicts with WebGPU\u0027s definition about logical size (https://gpuweb.github.io/gpuweb/#logical-miplevel-specific-texture-extent) and physical size (https://gpuweb.github.io/gpuweb/#physical-miplevel-specific-texture-extent).\n\nDawn\u0027s tests don\u0027t fail because we do remedy for the wrong calculation when we call it, see an example of the code snippet at line 300 - 305 at https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn/native/CommandValidation.cpp#300. \n\nI think it\u0027s better to change those 2 functions (and their call sites), WDYT?",
      "range": {
        "startLine": 1137,
        "startChar": 24,
        "endLine": 1137,
        "endChar": 45
      },
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e39e81df_ee3962f5",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1137,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-25T17:56:49Z",
      "side": 1,
      "message": "hmm, TBH I like Dawn\u0027s definition more since it\u0027s closer to meaning \"size of a subresource at this mip level\" where different array layers are different subresources.\n\nI see that the spec language calls it a physical miplevel-specific extent which sounds different from MipLevelPhysicalSize.\n\nperhaps we can have similar naming in the spec? make a new function called MipLevelSpecificPhysicalSize, and rename the current one to MipLevelSubresourcePhysicalSize ?",
      "parentUuid": "8e86ab90_4c2060ca",
      "range": {
        "startLine": 1137,
        "startChar": 24,
        "endLine": 1137,
        "endChar": 45
      },
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cecff4ee_a69f8f6d",
        "filename": "src/dawn/native/d3d12/TextureD3D12.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1137,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-05-25T22:40:42Z",
      "side": 1,
      "message": "I think the spec\u0027s definition makes sense. For a {8, 8, 8} texture, if it is a 3D texture, MipLevelSize at level 1 should be {4, 4, 4}, and if should be {4, 4, 8} for a 2D array texture. It goes on and on for other mipmap levels. This is the traditional definition about mipmap level. Graphics related introduction books are telling readers this differences when talking about mipmap levels for a very long time, forming a gut feeling for many folks when reading code like \"Extent3D GetMipLevelSize(mipLevel)\". And we are not talking about subresource at all. The virtual/physical naming stuff is used for non-compressed/compressed formats.\n\nFor Dawn\u0027s implementation, it makes sense to change the current names to GetMipLevelSingleSubresource{Virtual|Physical}Size, just as you suggested.\n\nAnd we can introduce functions like GetMipLevel{Virtual|Physical}Size (or GetMipLevelSpecific{Virtual|Physical}Size as your suggested) for some call sites.",
      "parentUuid": "e39e81df_ee3962f5",
      "range": {
        "startLine": 1137,
        "startChar": 24,
        "endLine": 1137,
        "endChar": 45
      },
      "revId": "692dd495be83753a01fcbbbb020d95f6384c6818",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}