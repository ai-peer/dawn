{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "82d64401_0c95cbb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-07T01:40:04Z",
      "side": 1,
      "message": "PTAL! (tests ran and passed in a later CL in this stack)",
      "revId": "08519978aeffff83ce9533265c24120966345d5d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29817355_1d2b3902",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-07T07:32:24Z",
      "side": 1,
      "message": "LGTM",
      "revId": "08519978aeffff83ce9533265c24120966345d5d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a54e782_fed843e3",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-05-07T01:40:04Z",
      "side": 1,
      "message": "note: I have the test for 2darray-\u003e3d vice versa, and 3d-\u003e3d in a later patch",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 87
      },
      "revId": "08519978aeffff83ce9533265c24120966345d5d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78c279e4_cda2f308",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-05-07T07:32:24Z",
      "side": 1,
      "message": "Ack. This is clearly the intent of the Vulkan spec, but I think it has a bug:\n\n\u003e For each element of pRegions, srcOffset.z and (extent.depth + srcOffset.z) must both be greater than or equal to 0 and less than or equal to the depth of the specified srcSubresource of srcImage\n\n\u003e If srcImage is of type VK_IMAGE_TYPE_2D, and dstImage is of type VK_IMAGE_TYPE_3D, then for each element of pRegions, extent.depth must equal srcSubresource.layerCount\n\nIt will be something to watch careful as drivers risk having bugs here. WebGPU\u0027s unified depthOrArrayLayers makes things much more clear I think.",
      "parentUuid": "9a54e782_fed843e3",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 87
      },
      "revId": "08519978aeffff83ce9533265c24120966345d5d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}