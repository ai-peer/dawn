{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "10361d65_40922af5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-16T12:18:42Z",
      "side": 1,
      "message": "Guys, I was hoping to bounce some ideas off from you for the error of [dawn_end2end_wire_tests on Intel GPU on Windows](https://chromium-swarm.appspot.com/task?id\u003d62dbf23edd592710):\n\n```\n[8512:10252:ERROR:test_launcher.cc(1254)] Failed to get out-of-band test success data, dumping full stdio below:\n```\n\nMultithreadTests don\u0027t run with use_wire. See [1]. So this CL shouldn\u0027t impact it. It looks likely that all test cases ran as expected, but `test_runner` had problem parsing the output of the test child process. Hopefully you could have some other findings I am missing.",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "703f4631_c1eef3ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-06-16T13:42:12Z",
      "side": 1,
      "message": "cc Quyen, he may have some ideas.",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8097039b_899e149f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-16T16:11:32Z",
      "side": 1,
      "message": "The error doesn\u0027t seem obvious to me. The tests seem to be skipped successfully with use_wire.\nMaybe you can try to rerun the tryjob?",
      "parentUuid": "10361d65_40922af5",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1f5f8e8_d542e94c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-19T05:33:39Z",
      "side": 1,
      "message": "Rerun doesn\u0027t help. Thanks anyway.\n\nDo you guys know how to locally reproduce the tryjob?\n\nI tried this way:\n```\n./bar/swarming reproduce -S chromium-swarm.appspot.com -realm project:foo 62dbf23edd592710\n```\nHowever it ran into the permission error:\n```\n[I2023-06-19T12:57:26.425820+08:00 30016 0 deployer.go:409] [unzip 4/8] Deployed infra/tools/luci/vpython/windows-amd64:7D9DooYZF6d2MqJSY17uQUgQpF9XYAqoUtEAXYxnmHIC in 3.0s\n[I2023-06-19T12:57:26.429844+08:00 30016 0 client.go:2139] All changes applied.\n[W2023-06-19T12:57:26.730158+08:00 30016 0 client.go:357] RPC failed permanently: rpc error: code \u003d PermissionDenied desc \u003d creator does not have permission to create invocations in realm \"project:foo\" {\"host\":\"results.api.cr.dev\", \"method\":\"CreateInvocation\", \"service\":\"luci.resultdb.v1.Recorder\"}\nswarming: failed to create Invocation: rpc error: code \u003d PermissionDenied desc \u003d creator does not have permission to create invocations in realm \"project:foo\"\noriginal error: rpc error: code \u003d PermissionDenied desc \u003d creator does not have permission to create invocations in realm \"project:foo\"\n\n```\n\nDoes it mean only Googlers can do that way?",
      "parentUuid": "8097039b_899e149f",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8ccd8d8_4b71d1a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-19T07:40:25Z",
      "side": 1,
      "message": "Seems like it is working now?",
      "parentUuid": "c1f5f8e8_d542e94c",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc5df356_b90e15ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-19T08:22:16Z",
      "side": 1,
      "message": "No, we still need to diagnose it.",
      "parentUuid": "c8ccd8d8_4b71d1a2",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e732a9b4_4e9191a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003501
      },
      "writtenOn": "2023-06-19T09:20:50Z",
      "side": 1,
      "message": "I took a deeper look at https://ci.chromium.org/ui/p/chromium/builders/try/win-dawn-rel/23519/test-results?sortby\u003d\u0026groupby\u003d\n\nand found it\u0027s weird that a lot of tests were skipped unexpectedly. For example, BindGroupTests.MultipleBindLayouts/D3D12_Intel_R_UHD_Graphics_630 is not intended to be skipped (even with use_wire) but it was skipped unexplainably.\n\nOne possibility is that there is a v8 rolling bug recently that broke dawn\u0027s CQ bots. Maybe it caused a cascade effect.",
      "parentUuid": "dc5df356_b90e15ec",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1197d9dd_2768a64b",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-16T14:59:18Z",
      "side": 1,
      "message": "nit: ASSERT() (here and in other places) but also we could just add an ASSERT in commandContext-\u003eGetD3D11DeviceContext1() and other similar getters imho instead of all the asserts in this CL.",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38947918_0167a730",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 424,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-19T07:09:24Z",
      "side": 1,
      "message": "Great, that would be simpler and clearer. I unnecessarily worried about the lock scope.",
      "parentUuid": "1197d9dd_2768a64b",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c055d9d9_b7168d22",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-19T07:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38947918_0167a730",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d5d8a2f_93775e45",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-16T14:59:18Z",
      "side": 1,
      "message": "Why is this one needed?",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9b33ba0_d6f3fc0d",
        "filename": "src/dawn/native/d3d11/CommandRecordingContextD3D11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-19T07:09:24Z",
      "side": 1,
      "message": "Otherwise we could run into the ASSERT we are adding.\n\n```\n\u003e\tdawn_end2end_tests.exe!dawn::BreakPoint() Line 31\tC++\n \tdawn_end2end_tests.exe!dawn::HandleAssertionFailure(const char * file, const char * function, int line, const char * condition) Line 69\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::CommandRecordingContext::GetD3D11DeviceContext1() Line 95\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Buffer::WriteInternal(dawn::native::d3d11::CommandRecordingContext * commandContext, unsigned __int64 offset, const void * data, unsigned __int64 size) Line 494\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Buffer::ClearInternal(dawn::native::d3d11::CommandRecordingContext * commandContext, unsigned char clearValue, unsigned __int64 offset, unsigned __int64 size) Line 453\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Buffer::Initialize(bool mappedAtCreation) Line 211\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Buffer::Create(dawn::native::d3d11::Device * device, const dawn::native::BufferDescriptor * descriptor) Line 140\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Device::CreateBufferImpl(const dawn::native::BufferDescriptor * descriptor) Line 237\tC++\n \tdawn_end2end_tests.exe!dawn::native::DeviceBase::CreateBuffer(const dawn::native::BufferDescriptor * descriptor) Line 1566\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::CommandRecordingContext::Intialize(dawn::native::d3d11::Device * device) Line 64\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Device::Initialize(const dawn::native::DeviceDescriptor * descriptor) Line 125\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::Device::Create(dawn::native::AdapterBase * adapter, const dawn::native::DeviceDescriptor * descriptor, const dawn::native::TogglesState \u0026 deviceToggles) Line 100\tC++\n \tdawn_end2end_tests.exe!dawn::native::d3d11::PhysicalDevice::CreateDeviceImpl(dawn::native::AdapterBase * adapter, const dawn::native::DeviceDescriptor * descriptor, const dawn::native::TogglesState \u0026 deviceToggles) Line 236\tC++\n \tdawn_end2end_tests.exe!dawn::native::PhysicalDeviceBase::CreateDevice(dawn::native::AdapterBase * adapter, const dawn::native::DeviceDescriptor * descriptor, const dawn::native::TogglesState \u0026 deviceToggles) Line 65\tC++\n \tdawn_end2end_tests.exe!dawn::native::AdapterBase::CreateDevice(const dawn::native::DeviceDescriptor * descriptor) Line 163\tC++\n \tdawn_end2end_tests.exe!dawn::native::AdapterBase::APICreateDevice(const dawn::native::DeviceDescriptor * descriptor) Line 115\tC++\n \tdawn_end2end_tests.exe!dawn::native::Adapter::CreateDevice(const WGPUDeviceDescriptor * deviceDescriptor) Line 112\tC++\n \tdawn_end2end_tests.exe!dawn::native::Adapter::CreateDevice(const wgpu::DeviceDescriptor * deviceDescriptor) Line 108\tC++\n \tdawn_end2end_tests.exe!dawn::DawnTestBase::CreateDeviceImpl(std::Cr::basic_string\u003cchar,std::Cr::char_traits\u003cchar\u003e,std::Cr::allocator\u003cchar\u003e\u003e isolationKey, const WGPUDeviceDescriptor * descriptor) Line 1043\tC++\n \tdawn_end2end_tests.exe!dawn::DawnTestBase::DawnTestBase::\u003clambda_2\u003e::operator()(WGPUAdapterImpl * adapter, const WGPUDeviceDescriptor * descriptor, void(*)(WGPURequestDeviceStatus, WGPUDeviceImpl *, const char *, void *) callback, void * userdata) Line 739\tC++\n \tdawn_end2end_tests.exe!dawn::DawnTestBase::DawnTestBase::\u003clambda_2\u003e::__invoke(WGPUAdapterImpl * adapter, const WGPUDeviceDescriptor * descriptor, void(*)(WGPURequestDeviceStatus, WGPUDeviceImpl *, const char *, void *) callback, void * userdata) Line 727\tC++\n \tdawn_proc.dll!wgpuAdapterRequestDevice(WGPUAdapterImpl * adapter, const WGPUDeviceDescriptor * descriptor, void(*)(WGPURequestDeviceStatus, WGPUDeviceImpl *, const char *, void *) callback, void * userdata) Line 43\tC\n \tdawn_end2end_tests.exe!wgpu::Adapter::RequestDevice(const wgpu::DeviceDescriptor * descriptor, void(*)(WGPURequestDeviceStatus, WGPUDeviceImpl *, const char *, void *) callback, void * userdata) Line 1987\tC++\n \tdawn_end2end_tests.exe!dawn::DawnTestBase::CreateDevice(std::Cr::basic_string\u003cchar,std::Cr::char_traits\u003cchar\u003e,std::Cr::allocator\u003cchar\u003e\u003e isolationKey) Line 1063\tC++\n \tdawn_end2end_tests.exe!dawn::DawnTestBase::SetUp() Line 1130\tC++\n \tdawn_end2end_tests.exe!dawn::DawnTestWithParams\u003cAdapterTestParam\u003e::SetUp() Line 719\tC++\n\n```",
      "parentUuid": "4d5d8a2f_93775e45",
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "408588b4_6befa122",
        "filename": "src/dawn/tests/end2end/MultithreadTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-16T12:18:42Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 45
      },
      "revId": "66d28801ab81087f2a88d0cbf3b9f056061c2a66",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}