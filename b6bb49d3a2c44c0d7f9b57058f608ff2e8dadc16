{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc6c700_f366fa16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2021-03-23T22:27:58Z",
      "side": 1,
      "message": "PTAL! Follow up from the conversation this morning and email. It would be nice to have a more generic was to communicate messages that aren\u0027t explicitly errors (such as deprecation warnings) but in the meantime this allows us to show more useful error messages about shader validation failures in some situations.",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05a2e58f_fee2e880",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-03-23T22:38:34Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c15dd357_857f8bcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T09:22:07Z",
      "side": 1,
      "message": "+CC Ben",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0de711ce_cf7c530f",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 927,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T09:22:07Z",
      "side": 1,
      "message": "Maybe this should be a thread_local variable so that multiple devices can be used at the same time.",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66ea9f40_0621b001",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 927,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2021-03-24T10:02:58Z",
      "side": 1,
      "message": "Requires a bit more work than that to make this thread safe. I think this does the trick:\n\n  \n // Indicates that for the lifetime of this object tint internal compiler errors should be\n // reported to the given device.\n class ScopedTintICEHandler : public NonCopyable {\n     public:\n     ScopedTintICEHandler(DeviceBase* device) {\n         // Call tint::SetInternalCompilerErrorReporter() the first time\n         // this constructor is called. Static initialization is\n         // guaranteed to be thread-safe, and only occur once.\n         static bool init_once_tint_error_reporter \u003d [] {\n             tint::SetInternalCompilerErrorReporter(\u0026TintICEReporter);\n             return true;\n         };\n         (void)init_once_tint_error_reporter;  // Value isn\u0027t actually used.\n         tlDevice \u003d device;\n     }\n \n     ~ScopedTintICEHandler() {\n         tint::SetInternalCompilerErrorReporter(nullptr);\n         tlDevice \u003d nullptr;\n     }\n \n     private:\n     static thread_local DeviceBase* tlDevice;\n \n     static void TintICEReporter(const tint::diag::List\u0026 diagnostics) {\n         if (tlDevice) {\n             tlDevice-\u003eHandleError(InternalErrorType::Internal, diagnostics.str().c_str());\n         }\n     }\n     ScopedTintICEHandler(ScopedTintICEHandler\u0026\u0026) \u003d delete;\n };\n \n thread_local DeviceBase* ScopedTintICEHandler::tlDevice \u003d nullptr;\n\n\n\nNote I also changed the InternalErrorType to Internal, as these are not Validation issues.",
      "parentUuid": "0de711ce_cf7c530f",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b566e7d_b870640b",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 938,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T09:22:07Z",
      "side": 1,
      "message": "nit: this class should be non-copyable non-movable.",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfeb9786_2f5eea5c",
        "filename": "src/dawn_native/ShaderModule.cpp",
        "patchSetId": 1
      },
      "lineNbr": 976,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-24T09:22:07Z",
      "side": 1,
      "message": "There are other places where we use Tint, maybe we should add the ScopeTintICEHandler there too? Places include ShaderModuleBase::InitializeBase, and variaous backend ShaderModules translating to SPIRV/MSL/HLSL.\n\nThis means that the ScopeTintICEHandler would be used in multiple files so it should be moved to a shared src/dawn_native/TintUtils.h/.cpp header.",
      "revId": "b6bb49d3a2c44c0d7f9b57058f608ff2e8dadc16",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}