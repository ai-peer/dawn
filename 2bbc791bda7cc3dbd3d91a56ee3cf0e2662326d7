{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ab1d6be6_b5c68dee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-21T20:15:50Z",
      "side": 1,
      "message": "WDYT? I\u0027m not so concerned about storing the raw pointer to the DrawIndexedIndirectCmd, so this simplifies things a decent amount",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39fb65c3_e1ca5184",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-25T11:38:26Z",
      "side": 1,
      "message": "LGTM. It binds us into having CommandAllocator/Iterator us fixed pointers and no compaction, but this is very likely ok.",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c53bf57a_ca6750fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002757
      },
      "writtenOn": "2021-10-26T15:20:40Z",
      "side": 1,
      "message": "I agree this is probably what we want to do. I kind of wish it were more difficult for future changes to violate the lifetime dependency, but not a blocker.",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e903d8a2_7cd530bb",
        "filename": "src/dawn_native/IndirectDrawMetadata.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-25T11:38:26Z",
      "side": 1,
      "message": "nit: comment about the lifetime.\n\nAlso is there a way to test we don\u0027t invalidate the pointer when doing CommandAllocator / CommandIterator operations?",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fa8a888_26bd1b0f",
        "filename": "src/dawn_native/IndirectDrawMetadata.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-29T19:32:03Z",
      "side": 1,
      "message": "added a comment. Do you have any ideas for a test? I couldn\u0027t find a good way to fetch the pointer during encoding in a test such that later on I could verify that the pointer in the command buffer at submission time is the same. Without like making the command allocator an abstract class and adding a ForTesting API to swap out the EncodingContext\u0027s allocator with a wrapper class (or something like that)",
      "parentUuid": "e903d8a2_7cd530bb",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "375de4f4_bbdde555",
        "filename": "src/dawn_native/IndirectDrawMetadata.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-11-02T09:29:28Z",
      "side": 1,
      "message": "Yeah, I can\u0027t find a good way to test this either. I guess fuzzers + ASAN will cover it :)",
      "parentUuid": "8fa8a888_26bd1b0f",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "766ffe51_36eb2837",
        "filename": "src/dawn_native/RenderEncoderBase.cpp",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-10-25T11:38:26Z",
      "side": 1,
      "message": "Maybe ASSERT(cmd-\u003eindirectBuffer !\u003d nullptr) in backends? Or we could have a DrawIndexedIndirectCmd::MakeInvalid() and ::IsValid()",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1f85e3b_3f7f0652",
        "filename": "src/dawn_native/RenderEncoderBase.cpp",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-10-29T19:32:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "766ffe51_36eb2837",
      "revId": "2bbc791bda7cc3dbd3d91a56ee3cf0e2662326d7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}