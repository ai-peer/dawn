{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a6b0a311_84c592fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-16T17:43:49Z",
      "side": 1,
      "message": "This is going to need some targeted tests to check we aren\u0027t leaking various things - but thoughts on the overall idea?\n\nWe have preivously had two thoughts on a high-level approach:\n A) some sort of cycle breaking (this CL attempts that)\n B) replace Device* with some pointer to \"already lost\" device.\n\nI don\u0027t like B as much because it\u0027s going to be super racy when we want to have multithreading. It also locks us into the idea that dropping the last external ref to wgpu::Device is an implicit device.destroy(). I don\u0027t like this because it doesn\u0027t match JS semantics. It\u0027s probably not super likely native users will do this anyway - but I think it would be a small wart in the native API.\nThis current implementation of A has the same wart where we do an implicit device.destroy() - but! I do think it could be modified in the future if we have a separate \"submit/tick thread\" such that we continuously flush the pending work until everything is complete. No pending work means there should be no tasks with back-refs to the device.",
      "revId": "6736e64d17c03a49818aceb9213af0866f1d6f68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6ed050e_a0b86922",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-05-17T00:38:31Z",
      "side": 1,
      "message": "(going to separate out the real leak fixes)",
      "revId": "6736e64d17c03a49818aceb9213af0866f1d6f68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a11a303_f286b472",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-17T12:35:55Z",
      "side": 1,
      "message": "The CL needs a massive cleanup but I think the approach is sound.\n\nI was concerned that there could be cycles left in other places in the object graph, but device destruction calls destroy on all objects, and we have the same problem with the replacing of the device with a lost device so this approach is just as good, and simpler.\n\nCould the same thing be used for instance?",
      "parentUuid": "a6b0a311_84c592fa",
      "revId": "6736e64d17c03a49818aceb9213af0866f1d6f68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10fd0832_62355c9d",
        "filename": "src/dawn/native/DeviceCycleBreakingRefCounted.cpp",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-17T12:35:55Z",
      "side": 1,
      "message": "Maybe we should have a class RefCount that\u0027s used for both this and RefCounted so we can keep all the comments. Release would return a boolean to say if destruction needs to happen (the hope being that LTO inlines stuff?)",
      "revId": "6736e64d17c03a49818aceb9213af0866f1d6f68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "213dbed8_2b2352ac",
        "filename": "src/dawn/native/DeviceCycleBreakingRefCounted.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-05-17T12:35:55Z",
      "side": 1,
      "message": "nit: the name of the class says what it is used for, not what it does. DualRefCounted? RefCountedWithExternalCount? Not sure.",
      "revId": "6736e64d17c03a49818aceb9213af0866f1d6f68",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}