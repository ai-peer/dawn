{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c25f7c09_3d91ec6f",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T18:37:28Z",
      "side": 1,
      "message": "This seems different? Why did this change? The source_type gets updated as we move through the tree, but the source object stays the same.",
      "revId": "8ae0ff5a451029f88258fdedc41ecf84dd0bad62",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b190173_87d9e4f9",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-06-08T18:43:20Z",
      "side": 1,
      "message": "The source object is updated just above this, if the first dynamic index is not the first index. So this is exactly the same as before in practice.\n\nI think it\u0027s clearer like this. We\u0027re making a variable that we are going to copy `source_object` to (a few lines below), so use the type of that object to declare the pointer type of that variable.",
      "parentUuid": "c25f7c09_3d91ec6f",
      "revId": "8ae0ff5a451029f88258fdedc41ecf84dd0bad62",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71fa95a8_2f881a80",
        "filename": "src/tint/ir/transform/var_for_dynamic_index.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2023-06-08T18:48:31Z",
      "side": 1,
      "message": "ah, I\u0027d missed the assiging of source_object if first_dynamic_index \u003e 0.",
      "parentUuid": "2b190173_87d9e4f9",
      "revId": "8ae0ff5a451029f88258fdedc41ecf84dd0bad62",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8ae0ff5a451029f88258fdedc41ecf84dd0bad62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Kokoro",
        "description": {
          "value": "A maximum vote is required for the Kokoro label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Kokoro\u003dMAX AND -label:Kokoro\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Kokoro=MAX AND -label:Kokoro=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Kokoro=MAX"],"failingAtoms":["label:Kokoro=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["uploader:dawn-autoroll@skia-public.iam.gserviceaccount.com"]}
      },
      "patchSetCommitId": "8ae0ff5a451029f88258fdedc41ecf84dd0bad62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "8ae0ff5a451029f88258fdedc41ecf84dd0bad62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}