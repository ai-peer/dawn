{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fb12aaed_5f060ada",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-09-19T02:05:16Z",
      "side": 1,
      "message": "In this cts [case](https://gpuweb.github.io/cts/standalone/?runnow\u003d0\u0026worker\u003d0\u0026debug\u003d0\u0026q\u003dwebgpu:api,operation,resource_init,texture_zero:uninitialized_texture_is_zero:dimension\u003d%222d%22;readMethod\u003d%22CopyToBuffer%22;format\u003d%22r8unorm%22;*), we write the desired data to a buffer mapped at creation, and copy the buffer to a texture to be initialized. Per my understanding, there should be a host-write to transfer-read barrier before the copy. But I am not seeing it according to the dumped vulkan api [log](https://bugs.chromium.org/p/chromium/issues/attachmentText?aid\u003d569706).\n\nPlease help confirm my understanding!",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05cd8720_c9270ecb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-09-19T06:37:11Z",
      "side": 1,
      "message": "Thank Jiawei for pointing me out that if the buffer uses the staging buffer, it doesn\u0027t have to be MapWrite. So this might not be the right fix. But Dawn is still missing the barrier for the staging buffer.",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45026736_11f0bfd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-09-19T07:03:34Z",
      "side": 1,
      "message": "Probably we also need to add a host-write to transfer-read barrier for the source staging buffer [here](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp;l\u003d792;drc\u003d872e5881a4646e5b257d28ac44dfb4c2f9b54c73;bpv\u003d0;bpt\u003d1), am I right?",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f20e3d3a_3ad760a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-09-19T07:13:37Z",
      "side": 1,
      "message": "Sorry for the noise. My understanding might be wrong according to the [comment](https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/vulkan/DeviceVk.cpp;drc\u003d872e5881a4646e5b257d28ac44dfb4c2f9b54c73;l\u003d786), although I haven\u0027t found the corresponding statement in the vkspec.",
      "parentUuid": "45026736_11f0bfd6",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1ea02b8_b6e4734a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-09-19T07:20:07Z",
      "side": 1,
      "message": "I\u0027d really appreciate it if you could point it out for me in the vkspec.",
      "parentUuid": "f20e3d3a_3ad760a7",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf543b6a_4133d247",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2022-09-19T07:36:29Z",
      "side": 1,
      "message": "Found it in the \"Appendix B: Memory Model\"\n```\nvkQueueSubmit performs a memory domain operation from host to device, and a visibility operation with source scope of the device domain and destination scope of all agents and references on the device.\n```\n\nNot easy to understand it exactly.",
      "parentUuid": "a1ea02b8_b6e4734a",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b1efc16_a3eb90b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-19T07:45:22Z",
      "side": 1,
      "message": "It is [here](https://registry.khronos.org/vulkan/specs/1.3/html/vkspec.html#vkQueueSubmit:~:text\u003dvkQueueSubmit%20performs%20a%20memory%20domain%20operation%20from%20host%20to%20device%2C%20and%20a%20visibility%20operation%20with%20source%20scope%20of%20the%20device%20domain%20and%20destination%20scope%20of%20all%20agents%20and%20references%20on%20the%20device.) (and also see [this](https://registry.khronos.org/vulkan/specs/1.3/html/vkspec.html#vkQueueSubmit:~:text\u003dIf%20the%20memory%20object%20was,access%20types%20for%20more%20information.)).\n\n\u003e vkQueueSubmit performs a memory domain operation from host to device, and a visibility operation with source scope of the device domain and destination scope of all agents and references on the device.\n\nMy reading of this is that memory modified by the CPU will automatically become \"readable\" by the GPU (through PCIe / access to unified RAM, etc). The on the GPU this memory will be made \"visible\" to all things by flushing the caches as needed. So we shouldn\u0027t need any additional operations to make memory writes by the CPU be properly synchronized with `TRANSFER_READ`.",
      "parentUuid": "a1ea02b8_b6e4734a",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52df872c_fe31f0cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-19T07:56:07Z",
      "side": 1,
      "message": "Do the VVLs complain about anything? Does this CL fix the issue you\u0027ve been seeing? Looking at the Mesa anv driver, I see that dstAccess of TRANSFER_READ invalidates the texture cache, but I don\u0027t see where this happens for queue submits, but maybe I\u0027m missing something.",
      "parentUuid": "3b1efc16_a3eb90b7",
      "revId": "98b83819f593d72a151d9c0c4d1c581ec930ff57",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}