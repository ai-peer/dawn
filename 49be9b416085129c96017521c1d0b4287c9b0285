{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e97bee5_d36eb244",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-03T16:07:12Z",
      "side": 1,
      "message": "I believe this is good to review; the failures are because Chrome isn\u0027t setting the proctable, so the destructor of wgpu::AdapterProperties can\u0027t call free members.",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d5bc79f_72d7c521",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-04T15:30:39Z",
      "side": 1,
      "message": "LGtm",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc42ee0_9d8b4cac",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-04T15:30:39Z",
      "side": 1,
      "message": "Should we make the pointer members const so that users of the C++ API don\u0027t try to set them to something else and break FreeMembers?",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "723cdadb_b0e562e3",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-04T16:04:07Z",
      "side": 1,
      "message": "I was thinking this as well! it would be good too because now you can do:\n\n```\n{\nwgpu::AdapterProperties p;\np.name \u003d \"hi\";\n}\n// crash!\n```\n\nit means though we need to const_cast in the implementation - which could be wonky.\n\n\noh wait, I see. you mean only make them const in the c++ api but non-const in C in internal wgpu_structs_autogen - that would work",
      "parentUuid": "2dc42ee0_9d8b4cac",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5e3a862_e64183c9",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-04T20:49:39Z",
      "side": 1,
      "message": "+1, I think if we make the pointers const and provide the necessary ctors to move/create them, then we could add an `ASSERT` after the condition that if any are `!\u003d nullptr` they should all `!\u003d nullptr`.",
      "parentUuid": "723cdadb_b0e562e3",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c02374db_d8ec0fcf",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-07T21:10:22Z",
      "side": 1,
      "message": "Done; I made *all* the members const.\nbut is the ASSERT really needed? I don\u0027t see that it gives us much given everything is const now",
      "parentUuid": "e5e3a862_e64183c9",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2fca302_1ae77a9e",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-04T15:30:39Z",
      "side": 1,
      "message": "We run the destructor before moving members? Don\u0027t this mean they will be freed?",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e109f5_19f4e62d",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-04T16:04:07Z",
      "side": 1,
      "message": "`this` is the receiver of the assignment - so yes - I think that\u0027s what should happen?\n\n```\nwgpu::AdapterProperties p1;\nwgpu::AdapterProperties p2;\n\n\nadapter.GetProperties(\u0026p1);\nadapter.GetProperties(\u0026p2);\n\n// p1 should be freed, and take the contents of p2\np1 \u003d std::move(p2);\n```\n\nI should write a test for it",
      "parentUuid": "a2fca302_1ae77a9e",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05bd9f53_01b5c724",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-07T21:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35e109f5_19f4e62d",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06cf0488_ec16546f",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 179,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-03T16:07:12Z",
      "side": 1,
      "message": "maybe this should clear members to null too. otherwise if you call WriteTo(\u0026foo); WriteTo(\u0026foo); and the first call fails with an error and never writes anything, then the second call will double-free",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 179,
        "endChar": 79
      },
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c808db6e_6fb5e043",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 179,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-04T20:49:39Z",
      "side": 1,
      "message": "Instead of calling dtor explicitly, maybe we could somehow make sure that when we write to an `out` value its always via a move? This would also work better if we make the pointers const above.\n\nThen I don\u0027t think we need to call the dtor here, since the move will do that for us.",
      "parentUuid": "06cf0488_ec16546f",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 179,
        "endChar": 79
      },
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ea0ad83_5c8248c6",
        "filename": "generator/templates/api_cpp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 179,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-07T21:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c808db6e_6fb5e043",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 179,
        "endChar": 79
      },
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47008867_fb643332",
        "filename": "generator/templates/dawn_proc.c",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-04T15:30:39Z",
      "side": 1,
      "message": "I wonder if these should be added as \"function\" category items automatically when parsing the json file so we don\u0027t need to add manual handling for them everywhere.",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bc15bf7_b5f2972e",
        "filename": "generator/templates/dawn_proc.c",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2023-08-04T20:49:39Z",
      "side": 1,
      "message": "+1. I think this would be pretty nice. It would also fail on link time if we added a * member type to an out struct that we didn\u0027t implement the `Free*` function for.",
      "parentUuid": "47008867_fb643332",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c799d9f_125188cc",
        "filename": "generator/templates/dawn_proc.c",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-07T21:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bc15bf7_b5f2972e",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05cd159a_844cc0f2",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-04T15:30:39Z",
      "side": 1,
      "message": "u-nit: Maybe comment that this single delete is enough because everything is a single allocation.",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09d3df2e_6e97bec6",
        "filename": "src/dawn/native/Adapter.cpp",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-07T21:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05cd159a_844cc0f2",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb28d75_5bf96e7e",
        "filename": "src/dawn/wire/client/Adapter.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-08-04T15:30:39Z",
      "side": 1,
      "message": "ditto",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2878e849_c1fe5071",
        "filename": "src/dawn/wire/client/Adapter.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-08-07T21:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcb28d75_5bf96e7e",
      "revId": "49be9b416085129c96017521c1d0b4287c9b0285",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}