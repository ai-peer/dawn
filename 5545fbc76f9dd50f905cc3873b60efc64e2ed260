{
  "comments": [
    {
      "key": {
        "uuid": "4726d8cc_f269ba53",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 311,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "This should use const\u0026 otherwise a copy of the whole structure (including the vector) happens.",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcf58912_3efda6ea",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 311,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4726d8cc_f269ba53",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e0061f0_4b641ef5",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "nit: this could be if (don\u0027t need to check subresources) {continue;}\n\nThis is pretty interesting, because in most cases we can assume that textures won\u0027t be used with usages that require checking per subresource, nice! Can have a comment to that explains why we keep usage in TextureUsageTracker when the same information can be deduced from subresourceUsage?",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "698a0448_9c5ad6a0",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Comment was added. \n\nIt seems to me that we don\u0027t need if (no subresources) {continue}; please read the comment I added.",
      "parentUuid": "0e0061f0_4b641ef5",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "322eb139_03c1a9e6",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T11:45:31Z",
      "side": 1,
      "message": "Sorry this wasn\u0027t clear, what I meant was we could have an early return like the following:\n\n if (pass.passType \u003d\u003d PassType::Compute || readOnly || singleUse) {\n   return {};\n }\n\nIn general such early return help reducing the nesting of the control flow and improve readability of the code.",
      "parentUuid": "698a0448_9c5ad6a0",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "197a2803_2a4cf418",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 325,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "This should never happen and could be ASSERTed instead.",
      "range": {
        "startLine": 322,
        "startChar": 1,
        "endLine": 325,
        "endChar": 1
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3ff496a_a970dc0c",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 325,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "please see my comment: subresourceCount \u003c\u003d 1 means that no subresource (only 1 mip level and 1 layer)",
      "parentUuid": "197a2803_2a4cf418",
      "range": {
        "startLine": 322,
        "startChar": 1,
        "endLine": 325,
        "endChar": 1
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dceb33b8_5d91eeb7",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "nit: This could use the range-for construct: for (wgpu::TextureUsage sub\u003dresourceUsage : ...).",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5f3ebd3_9f701d60",
        "filename": "src/dawn_native/CommandValidation.cpp",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dceb33b8_5d91eeb7",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc1104d0_d108b6f5",
        "filename": "src/dawn_native/PassResourceUsage.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "nit: the comment should stay with PassResourceUsage, and maybe we should have a new explanation for TextureUsageTracker.",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf9e669f_be87e87f",
        "filename": "src/dawn_native/PassResourceUsage.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc1104d0_d108b6f5",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76aed3c9_f4681456",
        "filename": "src/dawn_native/PassResourceUsage.h",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "nit: PassTextureUsage?",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4104da96_73450791",
        "filename": "src/dawn_native/PassResourceUsage.h",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76aed3c9_f4681456",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d11ce937_0f11804d",
        "filename": "src/dawn_native/PassResourceUsage.h",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "nit: \"texture\" in textureUsage is a bit redundant since we already are in the TextureUsageTracker. Just \"usage\" would work.",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8512b7d_d5b13833",
        "filename": "src/dawn_native/PassResourceUsage.h",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d11ce937_0f11804d",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "025cd852_45b22e05",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "This comment needs to be updated. I think something like the following could work well:\n\n  auto insertion \u003d mTextureUsages.emplace(texture);\n\n  PassTextureUsage* textureUsage \u003d \u0026*insertion-\u003efirst;\n\n  // This is a new entry, initialize the subresource usage vector.\n  if (insertion.second) {\n      ...\n  }\n\n  textureUsage-\u003eusage |\u003d ...;\n  for miplevels and baseArrayLayers, ...",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7134db44_e1355f6b",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "The code above doesn\u0027t work, I also tried to revise it slightly to fix potential typos, it doesn\u0027t work either. Sorry. For example, when we use MapVariable.emplace(), shouldn\u0027t it MapVariable.emplace(key, value)? \n\nI can dig more tomorrow, but the current one works too.",
      "parentUuid": "025cd852_45b22e05",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3725fafe_fa59cf96",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-29T11:45:31Z",
      "side": 1,
      "message": "Mmmmh ok. Basically my concern is that this code is doing a lot of lookup in the std::map, but ideally a single lookup is needed that does the insertion if needed, and returns an iterator to the texture we\u0027re interested in.\n\nReducing the number of lookups is important because they are fairly expensive and this function will be super hot.",
      "parentUuid": "7134db44_e1355f6b",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e2d4910_aa6c0427",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-04-29T18:14:29Z",
      "side": 1,
      "message": "I think we can use lower_bound and emplace_hint\n\n// Find the entry with key \u003c\u003d texture\nauto it \u003d mTextureUsages.lower_bound(texture);\n\nif (it \u003d\u003d mTextureUsages.end() || it-\u003efirst !\u003d texture) {\n  // If the texture is not in the map, insert it. The hint variant makes\n  // this a constant time operation because we already found the nearest entry.\n  it \u003d mTextureUsages.emplace_hint(it, { None, std::vector\u003c\u003e(count, None) });\n}\n\n// Rest of the code uses |it| to avoid further lookups.",
      "parentUuid": "3725fafe_fa59cf96",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1483b37d_26a9a6c7",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "It\u0027s probably unnecessary to special case textures with a single subresource. We can do better, more general optimizations later.",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 73
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3423d880_3e08c3b2",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "OK. I removed the special case that textures don\u0027t have subresources (aka a single subresource). We can revisit this when we do opmizations later.",
      "parentUuid": "1483b37d_26a9a6c7",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 73
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1a10d2f_2ab6382e",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "I think this whole block can instead be result.textureUsages.push_back(std::move(it.second));",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f4517f6_5230c2d6",
        "filename": "src/dawn_native/PassResourceUsageTracker.cpp",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done.\n\nGood point!",
      "parentUuid": "f1a10d2f_2ab6382e",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2c32e60_cc8ad748",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-24T22:45:39Z",
      "side": 1,
      "message": "[1] is here.\nNo texture view info in PassResourceUsage, so we can\u0027t easily extract texture view info. And the TextureUsedAs() here loses subresource usage tracking info. So I added a TODO.",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 161,
        "endChar": 86
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a787a2e_009407af",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "This could be implemented with another call on PassResourceUsage to merge one in another: we already have the information for subresource usage in the renderbundle pass resource usage, we just need to add it to the current pass resource usage. (so we don\u0027t need the data of the view)\n\nActually can we have tests for subresource tracking across, for example two render bundles used in the same pass? It doesn\u0027t need to be comprehensive but a couple test cases would be good.",
      "parentUuid": "e2c32e60_cc8ad748",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 161,
        "endChar": 86
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13291967_c4d4a49c",
        "filename": "src/dawn_native/RenderPassEncoder.cpp",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done\n\nGood point!",
      "parentUuid": "1a787a2e_009407af",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 161,
        "endChar": 86
      },
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b300f1ed_407b13a4",
        "filename": "src/tests/unittests/validation/ResourceUsageTrackingTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 844,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "Nit: Multithreading is not the only case where this can happen, for example in a single threaded case someone can do: (imagine it is VR)\n\n  leftEyePass \u003d ...;\n  rightEyePass \u003d ...;\n\n  for (object in objects) {\n     render in leftEyePass;\n     render in RightEyePass;\n  }\n\nIn this example the texture usages are the same but it shows we can have multiple encoders encoding at the same time.",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c91596ae_386170c6",
        "filename": "src/tests/unittests/validation/ResourceUsageTrackingTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 844,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b300f1ed_407b13a4",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6257627_84fc3ace",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "nit: this is the default.",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64931c2a_08d5d61a",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "I tried this before, and I revisited this again. I think the default value is the total levleCount, not 1. If I remove this line, the tests fail.",
      "parentUuid": "e6257627_84fc3ace",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd2a5b18_3b4216e7",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "ditto",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b04ed74d_52029580",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 48,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "same reason",
      "parentUuid": "bd2a5b18_3b4216e7",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65cc83a0_cd3272d9",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "ditto",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35d42f8c_cf11ffd3",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 181,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65cc83a0_cd3272d9",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d28c944_4d937e53",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 184,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-04-27T08:13:31Z",
      "side": 1,
      "message": "Also add tests for conflicts between usages in two render bundles used in the same pass?",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f53b03b_7281b5e8",
        "filename": "src/tests/unittests/validation/TextureSubresourceTests.cpp",
        "patchSetId": 8
      },
      "lineNbr": 184,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-04-29T06:40:39Z",
      "side": 1,
      "message": "Done. \n\nAdded a TODO. Will add tests for bundles later.",
      "parentUuid": "6d28c944_4d937e53",
      "revId": "5545fbc76f9dd50f905cc3873b60efc64e2ed260",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}