{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c316fb4d_8156c228",
        "filename": "src/dawn/native/d3d/DeviceD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-16T23:46:01Z",
      "side": 1,
      "message": "DXC is for generating DXIL instead of DXBC. Can D3D11 use DXIL? I think these dxc libs are only useful for d3d12",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "b1b55b5424394297cc15b8849b10f067a4ba34b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abbe61dc_79cd5b12",
        "filename": "src/dawn/native/d3d/DeviceD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-03-17T00:08:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c316fb4d_8156c228",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "b1b55b5424394297cc15b8849b10f067a4ba34b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f50c91e9_54b5128a",
        "filename": "src/dawn/native/d3d/DeviceD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-17T00:11:23Z",
      "side": 1,
      "message": "I meant also the code to get the DXC libs like:\n\nComPtr\u003cIDxcLibrary\u003e Device::GetDxcLibrary() const {\n    return ToBackend(GetAdapter())-\u003eGetBackend()-\u003eGetDxcLibrary();\n}\n\nComPtr\u003cIDxcCompiler\u003e Device::GetDxcCompiler() const {\n    return ToBackend(GetAdapter())-\u003eGetBackend()-\u003eGetDxcCompiler();\n}\n\nComPtr\u003cIDxcValidator\u003e Device::GetDxcValidator() const {\n    return ToBackend(GetAdapter())-\u003eGetBackend()-\u003eGetDxcValidator();\n}",
      "parentUuid": "abbe61dc_79cd5b12",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "b1b55b5424394297cc15b8849b10f067a4ba34b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98c1b687_6af467c7",
        "filename": "src/dawn/native/d3d/DeviceD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1002331
      },
      "writtenOn": "2023-03-17T00:28:21Z",
      "side": 1,
      "message": "I see. However, I refactor this code out to the base class, is because I plan to share the same ShaderModule class between d3d11 and d3d12. Right now, the ShaderModule has the logic to use DXC or FXC (code[1]) base on the toggle. Otherwise, I am not sure the new ShaderModuleD3D and ShaderModuleD3D12 will look like. So I would like to avoid this work.\n\n[1]  https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/src/dawn/native/d3d12/ShaderModuleD3D12.cpp;l\u003d483?q\u003dShaderModuleD3D12\u0026ss\u003dchromium",
      "parentUuid": "f50c91e9_54b5128a",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "b1b55b5424394297cc15b8849b10f067a4ba34b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dffc73ef_319ad5af",
        "filename": "src/dawn/native/d3d/DeviceD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-17T16:40:43Z",
      "side": 1,
      "message": "OK - we should leave a TODO to consider factoring this",
      "parentUuid": "98c1b687_6af467c7",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "b1b55b5424394297cc15b8849b10f067a4ba34b4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}