{
  "comments": [
    {
      "key": {
        "uuid": "8b65b883_296450b3",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 641,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "nit: these two blocks of code can be factored as a single block before CanCopyResource. It might do some very small redundant computation but that shouldn\u0027t matter.",
      "range": {
        "startLine": 617,
        "startChar": 1,
        "endLine": 641,
        "endChar": 25
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e651b1e_f577a286",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 641,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Is there a chance where CopyResource overwrites the entire destination, and we then need to set the whole resource as initialized rather than just the subresource?\nI just know CopyResource will copy the entire resource, which is why I broke it up into two parts. But maybe I\u0027m overthinking it.",
      "parentUuid": "8b65b883_296450b3",
      "range": {
        "startLine": 617,
        "startChar": 1,
        "endLine": 641,
        "endChar": 25
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b58b0568_19b132b9",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 641,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-13T12:31:12Z",
      "side": 1,
      "message": "You\u0027re correct. If you look in CanUseCopyResource, you can see that CopySubresources is only used if the all the subresources of the resources are copied from and to, so both cases are equivalent.",
      "parentUuid": "6e651b1e_f577a286",
      "range": {
        "startLine": 617,
        "startChar": 1,
        "endLine": 641,
        "endChar": 25
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8587d256_add54232",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 661,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "ditto, it would be factored above.",
      "range": {
        "startLine": 658,
        "startChar": 0,
        "endLine": 661,
        "endChar": 92
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ce571b_2801b0d4",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 795,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "How about this attachment? We missed it in the Vulkan backend as well. Can we add a test that the depth is cleared and the fix for Vulkan in a CL before this one? (We can keep iterating on this still)",
      "range": {
        "startLine": 791,
        "startChar": 0,
        "endLine": 795,
        "endChar": 0
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "333b61c5_699fb7d1",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 795,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Done, https://dawn-review.googlesource.com/c/dawn/+/8140, test WIP",
      "parentUuid": "e6ce571b_2801b0d4",
      "range": {
        "startLine": 791,
        "startChar": 0,
        "endLine": 795,
        "endChar": 0
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a04fe3d1_04a23b50",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 853,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "We can do this at the beginning of the render pass so the code dealing with subresources being initialized can all be in the same spot. Same thing for the Vulkan backend.",
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad072ee_df247b5e",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 853,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a04fe3d1_04a23b50",
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c504743_b7e34a5d",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "This is pretty unfortunate because render targets can be less optimized / use more memory than non-render targets. Maybe we could add a TODO to have texture clearing without needing this?",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94317beb_2d6e5ffe",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-06-12T14:15:54Z",
      "side": 1,
      "message": "@Corentin, I too was bummed when I saw the code to force render targets. The only other way to do clearing that I am aware of is to upload a bunch of zeros from the CPU. \n\nMaybe we should revisit the need to clear source/destination textures to zero and, instead, make usage of uninitialized resources be a validation error like Dzmitry was pushing for in the conference calls.",
      "parentUuid": "2c504743_b7e34a5d",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2023122_5a770c1f",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T15:55:39Z",
      "side": 1,
      "message": "TBH I see this as an implementation detail that can be optimized. For example we could support the clear path for renderable textures and fall back to having a small-ish buffer and multiple copies if it isn\u0027t.",
      "parentUuid": "94317beb_2d6e5ffe",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4c441fd_97750a01",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-06-12T18:38:08Z",
      "side": 1,
      "message": "I agree it is an implementation detail but the less code we have to write and maintain, the better. Optimization should be saved for places where developers do the correct thing, not the wrong thing.",
      "parentUuid": "d2023122_5a770c1f",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d41ae82c_3326c19f",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "I added a todo here for now, let me know if we want to go the validation route.",
      "parentUuid": "e4c441fd_97750a01",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "272eb69f_af2fc072",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-13T12:31:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d41ae82c_3326c19f",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c0de767_0b169c8e",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "levelCount is never used, can it be removed?",
      "range": {
        "startLine": 248,
        "startChar": 60,
        "endLine": 248,
        "endChar": 80
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3ee8f0d_eb9f2553",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c0de767_0b169c8e",
      "range": {
        "startLine": 248,
        "startChar": 60,
        "endLine": 248,
        "endChar": 80
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95d663f3_bc1e928a",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 277,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 277,
        "startChar": 60,
        "endLine": 277,
        "endChar": 80
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5c48d87_da438c73",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 277,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95d663f3_bc1e928a",
      "range": {
        "startLine": 277,
        "startChar": 60,
        "endLine": 277,
        "endChar": 80
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6e1f86e_86b2a231",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "This is not true for this function anymore because we could be lazy-clearing multiple array layers at the same time (and not jsut the zeroth one). Maybe leave part of these ASSERTs in the original method?",
      "range": {
        "startLine": 284,
        "startChar": 1,
        "endLine": 289,
        "endChar": 0
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3209338d_4fb56732",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6e1f86e_86b2a231",
      "range": {
        "startLine": 284,
        "startChar": 1,
        "endLine": 289,
        "endChar": 0
      },
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "116bbf84_6b110f12",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "Can we add a test for this as well if nothing is failing now? Or ASSERT(layerCount) \u003d 1",
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9061a8ce_160742eb",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "WIP going to add testing here https://dawn-review.googlesource.com/c/dawn/+/8140",
      "parentUuid": "116bbf84_6b110f12",
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40525684_58d6238a",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 349,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-12T12:00:33Z",
      "side": 1,
      "message": "nit: usually it is more clear to phrase these as early outs:\n\n if (some condition) {\n     return\n }",
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9bb309c_0a322a30",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 4
      },
      "lineNbr": 349,
      "author": {
        "id": 1000308
      },
      "writtenOn": "2019-06-12T21:28:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40525684_58d6238a",
      "revId": "e8c4075a626b7c2ba79ec3df9b5f5349f535bbe1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}