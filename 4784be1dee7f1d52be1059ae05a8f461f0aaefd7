{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "63f20246_c1622ff4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T18:12:43Z",
      "side": 1,
      "message": "I like it! Just a few comments to address.",
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d25ed024_ef4ff51f",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T18:12:43Z",
      "side": 1,
      "message": "I get what you\u0027re doing here - I struggled with this as well. But personally, I don\u0027t like having two different type names for the return value of a member function - the one declared in the header (`Result`) vs the one in the cpp (`SemConstantResult`). I would prefer we just use `ConstEval::Result` in the cpp instead of `SemConstantResult` (similar to how it was before), and use `ConstantResult` as you\u0027ve done here for the internal one.\n\nAlternatively, we can rename `ConstEval::Result` to `ConstEval::SemConstantResult`, then they would have the same name in both header and cpp.",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ee0b774_7189a217",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T20:51:33Z",
      "side": 1,
      "message": "`ConstEval::Result` doesn\u0027t help clarify the two distinct types being used in the `const_eval.cc` file.\n\n`ConstEval::Result` is an appropriate name for the **public API**, as that\u0027s what all the public methods of `ConstEval` return.\n\nI iterated a lot on this. I find this much clearer to keep track of what\u0027s what in the one implementation file. The discrepancy between the header and `.cc` is far less important to me than being able to clearly follow the logic of the single implementation.",
      "parentUuid": "d25ed024_ef4ff51f",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f1e3de3_0a21c1de",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T21:01:05Z",
      "side": 1,
      "message": "I understand your point, but there\u0027s also something to be said about idiomatic C++, and being able to search for function implementations by matching signatures (modulo namespacing shenanigans). I think what I\u0027m suggesting doesn\u0027t hurt clarity. `ConstEval::Result` vs `ConstantResult` is not that confusing once you know what they mean, in the same was as `sem::Constant` vs `Constant` stops being confusing after a short while.\n\nCan we replace the `SemConstantResult` with `ConstEval::Result` in this CL for now, and let\u0027s see how it goes?",
      "parentUuid": "0ee0b774_7189a217",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e4b4c64_7f6b588e",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T21:23:35Z",
      "side": 1,
      "message": "\u003e I think what I\u0027m suggesting doesn\u0027t hurt clarity\n\nIt\u0027s what we had, and I spent over an hour pulling my hair out trying to untangle base vs derived. It was really horrible.",
      "parentUuid": "9f1e3de3_0a21c1de",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b42e9e48_0d528da9",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T21:35:39Z",
      "side": 1,
      "message": "You\u0027ve made me realize that the real problem here is the name `Constant` for the internal type vs `sem::Constant`. If the internal one was named something else, or put into a namespace, then this would be much simpler.\n\nFor example:\n\n`sem::Constant` (same as before)\n`impl::Constant` (we rename the current anonymous namespace `Constant` to this)\n\nNow our API can return `ConstEval::Result`, which is a `Result\u003cconst sem::Constant*\u003e`, and internally, we define:\n\n`using ImplConstantResult \u003d Result\u003cconst impl::Constant*\u003e`\n\nNow the difference between `ConstEval::Result` vs `ImplConstantResult` is clear.",
      "parentUuid": "1e4b4c64_7f6b588e",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1047ade_ae71d7aa",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T21:51:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b42e9e48_0d528da9",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc5ce1d7_bcd311fb",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T18:12:43Z",
      "side": 1,
      "message": "I\u0027m guessing we don\u0027t need this anymore?",
      "range": {
        "startLine": 275,
        "startChar": 7,
        "endLine": 275,
        "endChar": 51
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dca685d_983c3366",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T20:51:33Z",
      "side": 1,
      "message": "I don\u0027t think the static code reachability has changed here?",
      "parentUuid": "fc5ce1d7_bcd311fb",
      "range": {
        "startLine": 275,
        "startChar": 7,
        "endLine": 275,
        "endChar": 51
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02f98716_f010407d",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T21:01:05Z",
      "side": 1,
      "message": "Hasn\u0027t it? The statement before is now a return statement.",
      "parentUuid": "3dca685d_983c3366",
      "range": {
        "startLine": 275,
        "startChar": 7,
        "endLine": 275,
        "endChar": 51
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99c72d2e_12a6ab49",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T21:23:35Z",
      "side": 1,
      "message": "Yes, but the condition was not `constexpr`. The warning is raised when there are `if constexpr` branches that are not reachable for that particular instantiation. None of the constexpr stuff has changed.",
      "parentUuid": "02f98716_f010407d",
      "range": {
        "startLine": 275,
        "startChar": 7,
        "endLine": 275,
        "endChar": 51
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "136e7661_509f829e",
        "filename": "src/tint/resolver/const_eval.cc",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T21:35:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "99c72d2e_12a6ab49",
      "range": {
        "startLine": 275,
        "startChar": 7,
        "endLine": 275,
        "endChar": 51
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d3afa1b_86e8221e",
        "filename": "src/tint/utils/result_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T18:12:43Z",
      "side": 1,
      "message": "Why inheritance here?",
      "range": {
        "startLine": 56,
        "startChar": 13,
        "endLine": 56,
        "endChar": 19
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d57000e9_b7e1d499",
        "filename": "src/tint/utils/result_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T20:51:33Z",
      "side": 1,
      "message": "It mimics the usage in `const_eval.cc`. We have an implicit cast of derived pointer (`const Constant*`) to base pointer (`const sem::Constant*`).",
      "parentUuid": "1d3afa1b_86e8221e",
      "range": {
        "startLine": 56,
        "startChar": 13,
        "endLine": 56,
        "endChar": 19
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50f9b03a_78b5e4bc",
        "filename": "src/tint/utils/result_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T21:01:05Z",
      "side": 1,
      "message": "Right, but the code you wrote also supports conversion between unrelated Result types, right?",
      "parentUuid": "d57000e9_b7e1d499",
      "range": {
        "startLine": 56,
        "startChar": 13,
        "endLine": 56,
        "endChar": 19
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b9e99f6_c519fc4b",
        "filename": "src/tint/utils/result_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-09-16T21:23:35Z",
      "side": 1,
      "message": "It supports conversion, so long as the target success and failure types are copy constructable from the source success and failure types. This is a valid test of this?",
      "parentUuid": "50f9b03a_78b5e4bc",
      "range": {
        "startLine": 56,
        "startChar": 13,
        "endLine": 56,
        "endChar": 19
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b866b5ec_d31a1070",
        "filename": "src/tint/utils/result_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-09-16T21:35:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3b9e99f6_c519fc4b",
      "range": {
        "startLine": 56,
        "startChar": 13,
        "endLine": 56,
        "endChar": 19
      },
      "revId": "4784be1dee7f1d52be1059ae05a8f461f0aaefd7",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}