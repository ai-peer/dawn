{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1cc587e4_13dc2e86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2021-09-16T08:34:33Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15ba04a5_eb2ae2de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-16T13:17:07Z",
      "side": 1,
      "message": "LGTM\n\nFYI Loko, when doing device.Destroy we\u0027ll have to be careful of ongoing asynchronous work that might still want to access the device. We could for example wait/cancel all the tasks (after marking the device as destroyed) before touching the mDevice pointers.",
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eeba37ad_4493fc2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-16T16:54:30Z",
      "side": 1,
      "message": "Gotcha! I had a long brain dump session with Austin yesterday about this as well! Thanks!",
      "parentUuid": "15ba04a5_eb2ae2de",
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13c8787a_1a00070d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-16T17:11:32Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f972b07c_fda83498",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1576,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-16T13:17:07Z",
      "side": 1,
      "message": "nit: Please assign to an issue instead of a person",
      "range": {
        "startLine": 1576,
        "startChar": 24,
        "endLine": 1576,
        "endChar": 45
      },
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74734988_d2c95f9b",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1579,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-16T17:11:32Z",
      "side": 1,
      "message": "side thought: maybe it doesn\u0027t have to be thread-safe. Maybe we can put it in the cache immediately after creating the frontend object, but tag it as uninitialized. That way we don\u0027t need to add extra locks to the the frontend cache. (maybe two caches? one for async pipelines and one for non-async pipelines?)\n\ndevice.Tick() when callbacks are executed is what would move it to the initialized state. Or, if another synchronous createPipeline has a cache hit, only then we would check if an async task exists, and if one does, only then take a lock/wait.\n\nFuture calls to createRenderPipelineAsync can reuse the same task or createPipeline can wait on the thread to finish (or \"steal\" it if it hasn\u0027t started).",
      "range": {
        "startLine": 1577,
        "startChar": 64,
        "endLine": 1579,
        "endChar": 0
      },
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9acd305_37dc1e39",
        "filename": "src/dawn_native/RenderPipeline.h",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-16T13:17:07Z",
      "side": 1,
      "message": "nit: Maybe this should be pure virtual instead since all backends implement it (except null, but we can add a fake implementation there).",
      "revId": "8cd3a0f3d92c1f13b5cb625eb1949a003829ae2e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}