{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f7107035_b85409df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "Corentin, if you look at this soon. for context, we\u0027re delaying moving a bunch of code for a ~week in case we need to do some cherry-picks and don\u0027t want too many merge conflicts. so I told Peng I\u0027d take a look at the whole thing so he\u0027s not blocked entirely.\n\nso far, I did an initial skim with mostly questions so I can understand the current approach. Didn\u0027t look at tests yet.",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc7ba0e6_50105076",
        "filename": "include/dawn/dawn_wsi.h",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "this is the old swap chain which will be deleted. If we don\u0027t need this now, we could just not add it.",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 65,
        "endChar": 6
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15399e59_dbbd9935",
        "filename": "include/dawn/native/D3D11Backend.h",
        "patchSetId": 11
      },
      "lineNbr": 1,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "2023",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d303dfde_ee4f5883",
        "filename": "src/dawn/native/d3d11/AdapterD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 161,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "can it not be supported now with the binding remapping to a flat register space?",
      "range": {
        "startLine": 160,
        "startChar": 3,
        "endLine": 161,
        "endChar": 33
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc2972e2_6199d065",
        "filename": "src/dawn/native/d3d11/AdapterD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "link to doc?",
      "range": {
        "startLine": 175,
        "startChar": 48,
        "endLine": 175,
        "endChar": 53
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17bb59b5_5bad4951",
        "filename": "src/dawn/native/d3d11/BindGroupD3D11.h",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "why \"GL\" ? is this used?",
      "range": {
        "startLine": 25,
        "startChar": 19,
        "endLine": 25,
        "endChar": 21
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0e20d8f_e4e43a9a",
        "filename": "src/dawn/native/d3d11/BindGroupLayoutD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: return directly",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 26,
        "endChar": 19
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45a78b83_e5bc6cc2",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 68,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "should this look at map usages?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 28
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7e4c470_b1cd132c",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "do we need D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS for HLSL\u0027s RWByteAddressBuffer ?\n\ndo we need D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS for indirect usage buffers?",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dfa860c_ddc0d9cd",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "do we use StructuredBuffer ? I thought it was always ByteAddressBuffer but I\u0027m not 100% sure.",
      "range": {
        "startLine": 76,
        "startChar": 47,
        "endLine": 76,
        "endChar": 84
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22018a2c_0ae30a8d",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 84,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "comment why this is always uint32_t",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 32
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38b4f97c_72a743e5",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "comment why",
      "range": {
        "startLine": 90,
        "startChar": 3,
        "endLine": 95,
        "endChar": 5
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fb67107_064b27af",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "it\u0027s not obvious how these usages relate to staging. I expected it to check for Map/Copy usages",
      "range": {
        "startLine": 99,
        "startChar": 5,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e39aa1e_e69b3aed",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "so IIUC, this happens branch if the buffer is usable on the GPU in a shader. Copy usage is not considered in `IsStagingUsage`.\n\nSo it doesn\u0027t happen for buffers that are only map and/or copy. Those buffers are purely CPU buffers.\n\nWhat about COPY_DST|COPY_SRC buffers for GPU-\u003eGPU copies though. Why should these be staging buffers?\nIf they had a real d3d11 buffer backing them, then we would need the synchronous map that occurs in the B2B copies in CommandBufferD3D11.",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 30
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd1f6a29_01f0089b",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 144,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: should explain why for mappedAtCreation. That the creation is deferred to unmap when we can provide the initial data.",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3871722_7d2c17ae",
        "filename": "src/dawn/native/d3d11/BufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "the data is always a CPU shadow copy. Why don\u0027t we actually map the buffer and use D3D11_MAPPED_SUBRESOURCE when possible?",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 167,
        "endChar": 39
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df211a6c_c31d9b27",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 91,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "where do these constants come from?",
      "range": {
        "startLine": 88,
        "startChar": 20,
        "endLine": 91,
        "endChar": 0
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cca30a1_5609691a",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "what about CSSetConstantBuffers? ditto for other binding types",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1710a332_1312d296",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "what about VSSetSamplers and CSSetSamplers? ditto for other binding types",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdca761a_26756ecf",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 165,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "is this because the clearing is currently unimplemented?",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d5573b0_3c8683c8",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 217,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "we can probably use `CopyResource` when possible. D3D12 backend does something similar when the entire resource is copied",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d12afa1a_ed7a4be4",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 279,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "interesting - how does ANGLE handle this?",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 279,
        "endChar": 81
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a103e58_ccc4e277",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 279,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T02:12:43Z",
      "side": 1,
      "message": "for large buffers, they keep a CPU shadow copy around forever, and make a new revision of the buffer. for small buffers, they read it back, then change the cpu temporary copy, and re-upload a new revision of the buffer.\n\nThat\u0027s all pretty unfortunate but probably have to do something similar.\n\nwhat do you think about the following approach to start:\n - never actually create the buffer with D3D11_BIND_CONSTANT_BUFFER\n - increment a serial every time a uniform buffer is used in a draw/dispatch/copy-cmd with writable usage\n - BufferD3D11 stores mConstantBuffer and mConstantBufferSerial\n - BufferD3D11 has a getter GetConstantBufferCopy(Serial serial); which either returns the mConstantBuffer directly if the serial matches, or it replaces mConstantBuffer with a new one, and performs the copy to it from the real buffer contents.\n   We do GetConstantBufferCopy(GetLastMutationSerial()) when we SetBindGroup, before VS/PS/CSSetConstantBuffer\n\n?",
      "parentUuid": "d12afa1a_ed7a4be4",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 279,
        "endChar": 81
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e1dd0c5_9743a781",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "I think that buffers should be real d3d11 buffers, and B2T and T2B can be the special-cased operations that do CPU readbacks and uploads - until we optimize it later to use a compute shader when possible.\n\nAlso, consider factoring out these out to helper functions. See \"RecordCopyBufferToTexture\", \"RecordCopyTextureWithTemporaryBuffer\", etc..",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd0b100_ea2a0fdd",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 450,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "it\u0027s odd that EnsureDataInitialized could return false, but not error. I think the code to handle the different kinds of buffer backings should be encapsulated within BufferD3D11",
      "range": {
        "startLine": 447,
        "startChar": 15,
        "endLine": 450,
        "endChar": 86
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1247d837_d7040902",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 612,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 612,
        "startChar": 59,
        "endLine": 612,
        "endChar": 78
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "176fca4f_1b211a24",
        "filename": "src/dawn/native/d3d11/CommandBufferD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 888,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "this will need to be extracted from the render pipeline - so lazily applied based on what the pipeline is",
      "range": {
        "startLine": 888,
        "startChar": 0,
        "endLine": 888,
        "endChar": 47
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a68d944a_0cd858da",
        "filename": "src/dawn/native/d3d11/DeviceD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "maybe this should be part of the CommandRecordingContextD3D11?",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 72
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be0f827f_48d3e1b9",
        "filename": "src/dawn/native/d3d11/PipelineLayoutD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "unused, I think",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 101,
        "endChar": 0
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eac1e7b6_c38d15ec",
        "filename": "src/dawn/native/d3d11/PipelineLayoutD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 117,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "unused, I think",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 117,
        "endChar": 0
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a29f0d5_7cdb563e",
        "filename": "src/dawn/native/d3d11/PipelineLayoutD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "unused, I think",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 125,
        "endChar": 0
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7748ee75_0718cd2e",
        "filename": "src/dawn/native/d3d11/SamplerD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: return directly",
      "range": {
        "startLine": 51,
        "startChar": 3,
        "endLine": 53,
        "endChar": 19
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a8b0613_2994a9ab",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: may as well hard-code it",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 1
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d6550a5_9f5dd630",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "this should be put in a common helper somewhere",
      "range": {
        "startLine": 39,
        "startChar": 5,
        "endLine": 39,
        "endChar": 25
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bb4863c_a2ccc4a8",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 74,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: may as well hardcode it",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccbafe5d_c09a81ef",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: it\u0027s d3d12. but also, prefer to not include these workaround toggles until we prove it\u0027s needed",
      "range": {
        "startLine": 103,
        "startChar": 40,
        "endLine": 103,
        "endChar": 92
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aac47975_8344db33",
        "filename": "src/dawn/native/d3d11/TextureD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "this logic can probably be moved to d3d:: code so it stays in sync with the other format-\u003eDXGI format mappings",
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b76a734e_33eb4836",
        "filename": "src/dawn/native/d3d11/UtilsD3D11.cpp",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-03-28T01:51:31Z",
      "side": 1,
      "message": "nit: prefer to list out the other cases so we get compile errors if enums are added",
      "range": {
        "startLine": 41,
        "startChar": 8,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "17f954c837e553a03e90d3160741c88927471aef",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}