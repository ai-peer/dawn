{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "83da00a6_4e5ed998",
        "filename": "src/tint/resolver/resolver.h",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-06-22T15:02:45Z",
      "side": 1,
      "message": "Can we add a comment about this one that it is evaluating the value at the index, not the index itself as the index is already evaluated?\n\n(But said in a way that makes sense, heh)",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "374f0f05_527dd3ba",
        "filename": "src/tint/resolver/resolver.h",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-06-23T09:44:54Z",
      "side": 1,
      "message": "The evaluation of the single expression node is the model the whole `Resolver` takes. This behaviour is not specific to this method, and so putting a comment on this specific method would be odd. I\u0027ve shuffled things and added relevant comments to the whole chunk of methods.",
      "parentUuid": "83da00a6_4e5ed998",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76c64fd8_84b83bb4",
        "filename": "src/tint/resolver/resolver.h",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-06-23T13:08:42Z",
      "side": 1,
      "message": "Right, the name of the expression was throwing me off, I was reading it as this was the accessor expression so, from `arr[2 + 2]` this would be `2+2`, but it\u0027s not that, it\u0027s the whole `arr[4]` as we\u0027ve already resolved the `2+2`.",
      "parentUuid": "374f0f05_527dd3ba",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f605c3a_a6b1a4ef",
        "filename": "src/tint/resolver/resolver_constants.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-06-22T15:02:45Z",
      "side": 1,
      "message": "nit: element count by type ? this doesn\u0027t actually return the type",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b750d73d_8e2cffa4",
        "filename": "src/tint/resolver/resolver_constants.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-06-23T09:44:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f605c3a_a6b1a4ef",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "219db294_3c005b4a",
        "filename": "test/tint/access/let/matrix.wgsl.expected.msl",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2022-06-22T15:02:45Z",
      "side": 1,
      "message": "Is this going to trigger a dead code warning in MSL now? (We artifically disable all warnings in MSL when building through dawn but that isn\u0027t great)\n\n(Same question for GLSL and HLSL as we end up with a dead `v` in all three)",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa357cbc_c8440f24",
        "filename": "test/tint/access/let/matrix.wgsl.expected.msl",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1002421
      },
      "writtenOn": "2022-06-23T09:44:54Z",
      "side": 1,
      "message": "Might do, but warnings aren\u0027t treated as errors, and this is transitory.\nOnce we add `const`, `let` will no longer carry the constant value, and the `let`s will no longer be inlined. `const` variable declarations will not be emitted at all.",
      "parentUuid": "219db294_3c005b4a",
      "revId": "9bbb1d2e1fe9846042dc6019f56e502dd79b04f3",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}