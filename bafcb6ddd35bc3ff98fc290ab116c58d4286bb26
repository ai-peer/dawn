{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d2cfccd_94b087c2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-16T10:34:17Z",
      "side": 1,
      "message": "I do wonder if the MSL printer could / should use references instead of pointers. It means you don\u0027t have to worry about `\u0026` or `*`, and the compiler knows that the pointers are never null.",
      "revId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2614eee_d345066e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-16T18:16:44Z",
      "side": 1,
      "message": "I did consider that again. The `ModuleScopeVars` transform does put pointers inside structures though, which we can\u0027t reasonably replace with references since the unused ones will be `nullptr` (or uninitialized).",
      "parentUuid": "1d2cfccd_94b087c2",
      "revId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e50f844_623b332a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-16T18:35:08Z",
      "side": 1,
      "message": "I\u0027m curious. Why are there unused ones?",
      "parentUuid": "f2614eee_d345066e",
      "revId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b906192c_aa1ea08b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2024-05-16T18:39:11Z",
      "side": 1,
      "message": "In production flows there shouldn\u0027t be, but in Tint E2E test land you can have multiple entry points in the same module and they may not all use all of module-scope variables.",
      "parentUuid": "9e50f844_623b332a",
      "revId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ca79db0_562e3671",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-16T18:46:49Z",
      "side": 1,
      "message": "Ah, because the functions get shared by entry points. Gotcha.",
      "parentUuid": "b906192c_aa1ea08b",
      "revId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bafcb6ddd35bc3ff98fc290ab116c58d4286bb26",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}