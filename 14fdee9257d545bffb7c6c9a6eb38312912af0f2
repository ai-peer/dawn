{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0ca017c3_30e95707",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-08T14:16:32Z",
      "side": 1,
      "message": "PTAL",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2609677_f28b5d33",
        "filename": "src/dawn/native/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-08T15:21:00Z",
      "side": 1,
      "message": "nit: This is missing the CMake change.",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a275a7e_7e1d75dd",
        "filename": "src/dawn/native/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-09T02:58:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2609677_f28b5d33",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e3c3d01_29cdbd31",
        "filename": "src/dawn/native/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 483,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-08T15:21:00Z",
      "side": 1,
      "message": "We shouldn\u0027t depend like this because dawn::utils is for things that use Dawn like tests etc, not for Dawn itsefl. We can inline the USleep call instead of adding this circular dependency.",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f6fecbe_b281b917",
        "filename": "src/dawn/native/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 483,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-09T02:58:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e3c3d01_29cdbd31",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53e6105c_c07f0b14",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-08T15:21:00Z",
      "side": 1,
      "message": "IMHO we should just suppress that warning, if it is just a warning. This simplifies code, allows inlining CreateD3D11OcclusionQuery in Initialize, and avoids the need to IgnoreErrors (which we should basically never do) here (because what if crearion fails? Then we\u0027d dereference a nullptr).\n\nI\u0027d also remove the need for mQueryState",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e9937cb_45b8a481",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-09T02:58:59Z",
      "side": 1,
      "message": "Suppressing the warning sounds good, done!\n\nI still need to keep mQueryState so that I would be able to know if a query has ever begun and ended when resolving it.",
      "parentUuid": "53e6105c_c07f0b14",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "167658a1_ebf73adf",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-13T01:53:39Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1e9937cb_45b8a481",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73db0827_7a37604d",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-08T15:21:00Z",
      "side": 1,
      "message": "WebGPU only supports non-precise queries by default, so they should return 0/1. What we can do is use predication on the query and a tiny compute shader to write 0 or 1 in a UAV that\u0027s the resolve buffer. WDYT?",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22d1bd8d_51a8346e",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-09T02:58:59Z",
      "side": 1,
      "message": "https://learn.microsoft.com/en-us/windows/win32/api/d3d11/nf-d3d11-id3d11devicecontext-setpredication\nIf I understand D3D11_QUERY_OCCLUSION_PREDICATE correctly, probably it\u0027s not the right answer here. Basically it requires that you should know in advance if there are going to be any stencil/depth samples passed. Otherwise you could block the subsequent rendering and resource manipulation commands forever. Another limitation is that only one predicate is allowed per context. It would be hard to support a set of queries simultaneously. Correct me if it\u0027s wrong.",
      "parentUuid": "73db0827_7a37604d",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ae3c1da_198af990",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-09T09:49:16Z",
      "side": 1,
      "message": "I\u0027m not sure why it requires to know if there are depth-stencil passed. What I\u0027m suggesting is something like:\n\n```\nResolveQuerySet() {\n predicate \u003d device-\u003eGetResolveQueryPredicate() // returns D3D11_QUERY_OCCLUSION_PREDICATE and flags 0 predicate created on device init.\n\n Copy a bunch of zeroes in the resolve buffer\n for (each available query) {\n   SetPredicate(predicate, TRUE);\n   Copy 1 in the resolve buffer for that query\n   SetPredicate(nullptr, TRUE);\n }\n}\n```\n\nThe predicate is basically like an if() block in the GPU command stream with a condition that depends on the query value. If the query has any samples passed then the copy will be performed, otherwise it will be skipped. The command stream is not blocked, just conditionally skipped.",
      "parentUuid": "22d1bd8d_51a8346e",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2fb9e8_46c42177",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-09T10:22:41Z",
      "side": 1,
      "message": "Got it. Thanks for explaining it at length. Let me have a try.\nBTW, when GPU is running into the condition, is it possible that the query value is still not ready, so the GPU have to wait until that, and then resume the execution.",
      "parentUuid": "5ae3c1da_198af990",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75a54154_3cb987e0",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-10T10:25:55Z",
      "side": 1,
      "message": "I struggled for a while to work this out. The predicate value made no difference regardless of true of false. Eventually I found out it was a driver issue. D3D11_QUERY_OCCLUSION_PREDICATE is buggy on Intel Gen12. For Gen9, and the other GPU vendor, it worked correctly.",
      "parentUuid": "7a2fb9e8_46c42177",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2f17f29_ddd0c427",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-12T19:18:14Z",
      "side": 1,
      "message": "Oh damn, another driver issue ðŸ˜Š",
      "parentUuid": "75a54154_3cb987e0",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "606f8aec_df393b61",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-06-08T15:21:00Z",
      "side": 1,
      "message": "nit: We could have a cast in the caller first, so that this function takes a uint64_t. Also we could reuse i in [0, queryCount] then define `queryIndex \u003d i + firstQuery`.",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18e7edab_d30bf347",
        "filename": "src/dawn/native/d3d11/QuerySetD3D11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1000028
      },
      "writtenOn": "2023-06-09T02:58:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "606f8aec_df393b61",
      "revId": "14fdee9257d545bffb7c6c9a6eb38312912af0f2",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}