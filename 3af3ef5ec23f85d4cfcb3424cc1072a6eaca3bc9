{
  "comments": [
    {
      "key": {
        "uuid": "281917f7_4e579950",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Can we have comments that highlight what the different parts of the code are doing? It is a bit hard to understand how things are structured right now.",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38c44c56_ce8305ef",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "This is used only once and is meant to match the BasicRenderPass default color format. Can we have it exposed on BasicRenderPass instead? Like BasicRenderPass::kDefaultColorFormat?",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c2855d0_a21bdea8",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "These are always used divided by the width/height in block. We could call it copyWidthInBlock and just not multiply by kBCBlockHeightInTexels.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 85
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d32d715e_7d08f41a",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "nit: no need for const\u0026 because the vector is returned by value by this function.",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 35
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd46e3b9_55f97241",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "This loop could be a single memcpy",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 92,
        "endChar": 17
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "799c9768_80c35867",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "nit: This would be more clear if it were CreateSamplePipeline and returned the pipeline by value. Because right now it modifies state and you have to look at the implementation of the function to understand which state is modified. Creation of the bindgroup layout could go in SetUp and bind group creation in Verify.",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9753c6e7_a1ca2c82",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "A simpler shader for the same result is\n\n        dawn::ShaderModule vsModule \u003d\n            utils::CreateShaderModule(device, dawn::ShaderStage::Vertex, R\"(\n            #version 450\n            layout(location\u003d0) out vec2 texCoord;\n            void main() {\n                const vec2 pos[3] \u003d vec2[3](\n                    vec2(-3.0f, -1.0f),\n                    vec2( 3.0f, -1.0f),\n                    vec2( 0.0f,  2.0f)\n                );\n                gl_Position \u003d vec4(pos[gl_VertexIndex], 0.0f, 1.0f);\n                texCoord \u003d gl_Position.xy / 2.0f + vec2(0.5f);\n            })\");",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c6043b8_fb556fe9",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "VerifyCompressedTexturePixelValues?",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ea4b89b_3d8a950a",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "space after \u003d . Can you git cl format? We don\u0027t check tests at the moment.",
      "range": {
        "startLine": 215,
        "startChar": 39,
        "endLine": 215,
        "endChar": 41
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9067df56_5c90d123",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Why is this needed? Can we have a comment that clarifies it?",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 224,
        "endChar": 0
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2eb1be0_9b012bdb",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 232,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "This test sometimes uses queries to do things based on the format, but in other places it uses an hardcoded kBCBlockWidthInTexels. We should choose one or the other. We could have a helper file for tests that answers queries about texture formats (it should be separate code from dawn_native though).",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb3321a_253dcc35",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 280,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "nit: \u003e\u003d kBCBlockWidth...",
      "range": {
        "startLine": 280,
        "startChar": 46,
        "endLine": 280,
        "endChar": 77
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b42ce7c9_9f3ab229",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Tests copying into a single block BC texture and sampling from it.",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "687db4e9_a374d22d",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Can we have a similar test but for a sub-block BC texture? Like 3x3?",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}