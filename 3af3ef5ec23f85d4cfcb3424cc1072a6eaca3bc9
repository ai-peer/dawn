{
  "comments": [
    {
      "key": {
        "uuid": "9d0e07c6_dbb62cc1",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-25T18:32:00Z",
      "side": 1,
      "message": "I think this requires that (bufferCopy.rowPitch % texture-\u003eGetFormat().blockByteSize) \u003d\u003d 0. Do we validate this? And let\u0027s add an assert here too.\n\nrelated: https://github.com/gpuweb/gpuweb/issues/148",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4a46754_fa17d38b",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done\nCurrently we don\u0027t check it because as we requires rowPitch % 256 \u003d\u003d 0 and the blockByteSizes of the formats we support in Dawn (1, 2, 4, 8, 16) can all divide 256.",
      "parentUuid": "9d0e07c6_dbb62cc1",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa904abd_837c21a6",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-06-25T18:32:00Z",
      "side": 1,
      "message": "This now calls GetFormat() twice; we should call it only once and store the result.",
      "range": {
        "startLine": 54,
        "startChar": 46,
        "endLine": 54,
        "endChar": 57
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9490d86a_12e80847",
        "filename": "src/dawn_native/vulkan/CommandBufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa904abd_837c21a6",
      "range": {
        "startLine": 54,
        "startChar": 46,
        "endLine": 54,
        "endChar": 57
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "281917f7_4e579950",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Can we have comments that highlight what the different parts of the code are doing? It is a bit hard to understand how things are structured right now.",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4621afa8_c4320c4d",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "281917f7_4e579950",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38c44c56_ce8305ef",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "This is used only once and is meant to match the BasicRenderPass default color format. Can we have it exposed on BasicRenderPass instead? Like BasicRenderPass::kDefaultColorFormat?",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "081b3065_9b2c20c1",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38c44c56_ce8305ef",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c2855d0_a21bdea8",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "These are always used divided by the width/height in block. We could call it copyWidthInBlock and just not multiply by kBCBlockHeightInTexels.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 85
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a5b4632_f1443cf8",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c2855d0_a21bdea8",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 85
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d32d715e_7d08f41a",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "nit: no need for const\u0026 because the vector is returned by value by this function.",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 35
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adeac945_0a94918f",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 82,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d32d715e_7d08f41a",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 35
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd46e3b9_55f97241",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "This loop could be a single memcpy",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 92,
        "endChar": 17
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c32987e3_163d37ee",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd46e3b9_55f97241",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 92,
        "endChar": 17
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "799c9768_80c35867",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "nit: This would be more clear if it were CreateSamplePipeline and returned the pipeline by value. Because right now it modifies state and you have to look at the implementation of the function to understand which state is modified. Creation of the bindgroup layout could go in SetUp and bind group creation in Verify.",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6314d046_ccdfdb2d",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "799c9768_80c35867",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9753c6e7_a1ca2c82",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "A simpler shader for the same result is\n\n        dawn::ShaderModule vsModule \u003d\n            utils::CreateShaderModule(device, dawn::ShaderStage::Vertex, R\"(\n            #version 450\n            layout(location\u003d0) out vec2 texCoord;\n            void main() {\n                const vec2 pos[3] \u003d vec2[3](\n                    vec2(-3.0f, -1.0f),\n                    vec2( 3.0f, -1.0f),\n                    vec2( 0.0f,  2.0f)\n                );\n                gl_Position \u003d vec4(pos[gl_VertexIndex], 0.0f, 1.0f);\n                texCoord \u003d gl_Position.xy / 2.0f + vec2(0.5f);\n            })\");",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2982b52b_2cadaa1b",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9753c6e7_a1ca2c82",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c6043b8_fb556fe9",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "VerifyCompressedTexturePixelValues?",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe4ff38_c602189d",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c6043b8_fb556fe9",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ea4b89b_3d8a950a",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 215,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "space after \u003d . Can you git cl format? We don\u0027t check tests at the moment.",
      "range": {
        "startLine": 215,
        "startChar": 39,
        "endLine": 215,
        "endChar": 41
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff824fe0_e7037e1c",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 215,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ea4b89b_3d8a950a",
      "range": {
        "startLine": 215,
        "startChar": 39,
        "endLine": 215,
        "endChar": 41
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9067df56_5c90d123",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Why is this needed? Can we have a comment that clarifies it?",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 224,
        "endChar": 0
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "216cd310_4498cb39",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Because Extent3D may exceed the size of the subresource, so we need to do this restriction.\nFor example, in \"CopyIntoNonZeroMipmapLevel\" test, the size of the subresource is 15x15, but the Extent3D is 16x16, so to make the size of the expectedData matches that of the subresource, we need to limit it to 15x15.",
      "parentUuid": "9067df56_5c90d123",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 224,
        "endChar": 0
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a79ae5_9991b78f",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-26T09:08:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "216cd310_4498cb39",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 224,
        "endChar": 0
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2eb1be0_9b012bdb",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 232,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "This test sometimes uses queries to do things based on the format, but in other places it uses an hardcoded kBCBlockWidthInTexels. We should choose one or the other. We could have a helper file for tests that answers queries about texture formats (it should be separate code from dawn_native though).",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d9718cd_6b6f6ce8",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 232,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "The size of a block of BC format in bytes differs among different BC formats (8 bytes for BC1 and BC4, and 16 bytes for others), so I think it should be queried in tests.\n\nThe width and height of a block of BC format in texels are always 4 for all BC formats, so I just treat them as constant values in all the tests on BC formats.",
      "parentUuid": "b2eb1be0_9b012bdb",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f89c5cd_38833faa",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 232,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-26T09:08:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8d9718cd_6b6f6ce8",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb3321a_253dcc35",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 280,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "nit: \u003e\u003d kBCBlockWidth...",
      "range": {
        "startLine": 280,
        "startChar": 46,
        "endLine": 280,
        "endChar": 77
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bc23ddf_b030da4a",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 280,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cb3321a_253dcc35",
      "range": {
        "startLine": 280,
        "startChar": 46,
        "endLine": 280,
        "endChar": 77
      },
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b42ce7c9_9f3ab229",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Tests copying into a single block BC texture and sampling from it.",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "215deeed_15fc7836",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b42ce7c9_9f3ab229",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8741116_2034e9be",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:55:37Z",
      "side": 1,
      "message": "Actually this test copies data into a BC texture with 2x2 blocks.",
      "parentUuid": "215deeed_15fc7836",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "687db4e9_a374d22d",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-25T12:15:03Z",
      "side": 1,
      "message": "Can we have a similar test but for a sub-block BC texture? Like 3x3?",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ffbb74d_f20adb32",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2019-06-26T02:49:43Z",
      "side": 1,
      "message": "I think we cannot create a BC texture whose size is not multiple of 4 because D3D does not allow it, and the offsets and extents must all be multiple of 4. \n\nDo you mean a test that copies data into a part of a BC texture with the size of the region not multiple of 4?\n\nIn \"CopyIntoNonZeroMipmapLevel\" I intent to test copying into a mipmap level of a BC texture whose size is not multiple of 4 (60 \u003e\u003e 2 \u003d 15)",
      "parentUuid": "687db4e9_a374d22d",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f08445ee_eb17c239",
        "filename": "src/tests/end2end/CompressedTextureFormatTests.cpp",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2019-06-26T09:08:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6ffbb74d_f20adb32",
      "revId": "3af3ef5ec23f85d4cfcb3424cc1072a6eaca3bc9",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}