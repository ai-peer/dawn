{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3a2d17a7_9178217a",
        "filename": "src/tint/resolver/resolver.h",
        "patchSetId": 8
      },
      "lineNbr": 360,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-05-25T13:49:17Z",
      "side": 1,
      "message": "Thanks for the rename.  :-)",
      "range": {
        "startLine": 360,
        "startChar": 18,
        "endLine": 360,
        "endChar": 30
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d12e399_60f1c64c",
        "filename": "src/tint/resolver/resolver_constants.cc",
        "patchSetId": 8
      },
      "lineNbr": 43,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-05-25T13:49:17Z",
      "side": 1,
      "message": "Consider f32 to i32 conversion.\n\nC++14 floating-integral conversions says\n\n\u003e The behavior is undefined if the truncated value cannot be\nrepresented in the destination type.\n\nBut WGSL requires clamping of the truncated value.\n\n\nConsider u32 to f16:  \nwhen the value is (much) outside the normal range of f16, the result must be the infinity.\n\nOr am I misunderstanding the context entirely?",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 47
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0019f79c_a62e139a",
        "filename": "src/tint/resolver/resolver_constants.cc",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-25T14:07:28Z",
      "side": 1,
      "message": "You can spell this as simply `std::vector` with C++17 deduction guides (https://en.cppreference.com/w/cpp/container/vector/deduction_guides) as the type of the `std::vector` will be deduced from the ctor args,",
      "range": {
        "startLine": 123,
        "startChar": 41,
        "endLine": 123,
        "endChar": 58
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "295d1061_3f049c77",
        "filename": "src/tint/resolver/resolver_constants.cc",
        "patchSetId": 8
      },
      "lineNbr": 157,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-25T14:07:28Z",
      "side": 1,
      "message": "Convert?",
      "range": {
        "startLine": 157,
        "startChar": 11,
        "endLine": 157,
        "endChar": 16
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f6ba182_358e1da1",
        "filename": "src/tint/sem/constant.h",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-05-25T13:49:17Z",
      "side": 1,
      "message": "I sure hope std::vector is tuned for the small vector case.  :-)",
      "range": {
        "startLine": 40,
        "startChar": 18,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a84c4787_79328938",
        "filename": "src/tint/sem/constant.h",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-25T14:07:28Z",
      "side": 1,
      "message": "It\u0027s not. std::vector cannot use the small buffer optimization because of the requirement that std::swap not invalidate iterators, which it would do if swapping between a small and large vector. It\u0027s a hot topic in the C++ community, and for years people have been trying to push for a small vector container.\n\nLLVM has SmallVector. We might want to implement something like it.",
      "parentUuid": "3f6ba182_358e1da1",
      "range": {
        "startLine": 40,
        "startChar": 18,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d798c0c_80e38cfc",
        "filename": "src/tint/sem/constant.h",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2022-05-25T15:00:04Z",
      "side": 1,
      "message": "oof.",
      "parentUuid": "a84c4787_79328938",
      "range": {
        "startLine": 40,
        "startChar": 18,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7affdeb8_ff03d535",
        "filename": "src/tint/sem/constant.h",
        "patchSetId": 8
      },
      "lineNbr": 158,
      "author": {
        "id": 1002361
      },
      "writtenOn": "2022-05-25T14:07:28Z",
      "side": 1,
      "message": "Can use `emplace` here: `elems_.emplace(std::move(elements));`",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 158,
        "endChar": 43
      },
      "revId": "4196ebc177cd031ea7d6a0d48c2e3dc251a99403",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}