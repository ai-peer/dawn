{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ac4a9536_43f8941e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-22T08:02:52Z",
      "side": 1,
      "message": "FYI: Kokoro logs are now publicly viewable.",
      "revId": "b72a5feed613c8d848dc9f1f24ce5954218c4fb4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30ea4acb_35a3390e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-22T08:24:14Z",
      "side": 1,
      "message": "(For the Kokoro failure I think you just need to rebase)",
      "revId": "b72a5feed613c8d848dc9f1f24ce5954218c4fb4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31cfe92e_812a7365",
        "filename": "src/tint/transform/multiplanar_external_texture_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 171,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-22T08:02:52Z",
      "side": 1,
      "message": "no request to change, but an alternative to adding `padding` fields is to use a `@align(32)` or `@size(32)` annotation on the `ExternalTextureParams` fields.\nJust FYI.",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 171,
        "endChar": 16
      },
      "revId": "b72a5feed613c8d848dc9f1f24ce5954218c4fb4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5278fb4_d6c68aff",
        "filename": "src/tint/transform/multiplanar_external_texture_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-22T08:02:52Z",
      "side": 1,
      "message": "Could `gammaCorrection()` take a `vec3\u003cf32\u003e`?\nThis could then become:\n\n```\ncolor \u003d gammaCorrection(color, params.gammaDecodeParams);\ncolor \u003d gamutConversionMatrix * color;\ncolor \u003d gammaCorrection(color, params.gammaEncodeParams);\n```\n\nWhich is a bit easier to read.",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 63
      },
      "revId": "b72a5feed613c8d848dc9f1f24ce5954218c4fb4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6484698_d036a22b",
        "filename": "src/tint/transform/multiplanar_external_texture_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1000248
      },
      "writtenOn": "2022-04-22T16:53:51Z",
      "side": 1,
      "message": "What did you have in mind? Seems like any solution would just make gammaCorrection  more complicated.\n\n fn gammaConversion(v: vec3\u003cf32\u003e, params: GammaTransferParams) -\u003e vec3\u003cf32\u003e {\n   var color : vec3\u003cf32\u003e;\n   if (abs(v.r) \u003c params.D) {\n     color.r \u003d sign(v.r) * (params.C * abs(v.r));\n   } else {\n     color.r \u003d sign(v.r) * (pow(params.A * abs(v.r) + params.B, params.G) + \n     params.E);\n   }\n   if (abs(v.g) \u003c params.D) {\n     color.g \u003d sign(v.g) * (params.C * abs(v.g));\n   } else {\n    color.g \u003d sign(v.g) * (pow(params.A * abs(v.g) + params.B, params.G) + \n    params.E);\n   }\n   if (abs(v.r) \u003c params.D) {\n    color.g \u003d sign(v.b) * (params.C * abs(v.b));\n   } else {\n    color.g \u003d sign(v.b) * (pow(params.A * abs(v.b) + params.B, params.G) + \n    params.E);\n   }\n   return color;\n}\n\nOr it seems like I might be able to condense this into a for loop by using pointers to address each component.",
      "parentUuid": "f5278fb4_d6c68aff",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 63
      },
      "revId": "b72a5feed613c8d848dc9f1f24ce5954218c4fb4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48737f0c_704a44e2",
        "filename": "src/tint/transform/multiplanar_external_texture_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 259,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2022-04-22T16:58:35Z",
      "side": 1,
      "message": "```\nfn gammaCorrection(v : vec3\u003cf32\u003e, params : GammaTransferParams) -\u003e vec3\u003cf32\u003e {\n  let cond \u003d abs(v) \u003c vec3(params.D);\n  let t \u003d sign(v) * ((params.C * abs(v)) + params.F);\n  let f \u003d (sign(v) * pow(((params.A * abs(v)) + params.B), vec3(params.G))) + params.E;\n  return select(f, t, cond);\n}\n\n```",
      "parentUuid": "f6484698_d036a22b",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 63
      },
      "revId": "b72a5feed613c8d848dc9f1f24ce5954218c4fb4",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}