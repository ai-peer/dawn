{
  "comments": [
    {
      "key": {
        "uuid": "aa7f55f8_201042cc",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2018-10-19T19:56:37Z",
      "side": 1,
      "message": "This is just for generating test data, right? Can you make the name more descriptive and add a short comment, e.g.\n\n    // Generates an arbitrary pixel value per-layer-per-level, used for the \"actual\"\n    // uploaded textures and the \"expected\" results.\n    GenerateTestPixelValue",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa7351d2_d49778b3",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-10-22T04:08:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa7f55f8_201042cc",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc73b17c_2fe1b7cb",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2018-10-19T19:56:37Z",
      "side": 1,
      "message": "I know this hasn\u0027t changed, but I\u0027m looking at this field, dawn::TextureDescriptor::mipLevel. Why is it called mipLevel, if it is actually the mip level count? I think that field needs to be renamed to \"levels\", \"mipLevels\", \"levelCount\", or something like that. Probably \"levelCount\" to match TextureViewDescriptor. (Doesn\u0027t have to be in this CL, though.)",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fdfcd58_054ede07",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-10-21T09:41:14Z",
      "side": 1,
      "message": "Also can you make a PR to add it to sketch.idl, it\u0027s currently missing there too",
      "parentUuid": "dc73b17c_2fe1b7cb",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea51cd61_03e8732c",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-10-22T04:08:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6fdfcd58_054ede07",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fab4d52d_e42edf0a",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2018-10-19T19:56:37Z",
      "side": 1,
      "message": "This isn\u0027t really \"row pixels\", more like \"pixels per row pitch\". Can you rename and also add a static_assert just for sanity, something like:\n\n  static_assert((kTextureRowPitchAlignment % sizeof(RGBA8)) \u003d\u003d 0);\n  constexpr uint32_t kPixelsPerRowPitch \u003d kTextureRowPitchAlignment / sizeof(RGBA8);",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9b9c209_cab2f05c",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-10-22T04:08:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fab4d52d_e42edf0a",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17153a22_f8b24d38",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2018-10-19T19:56:37Z",
      "side": 1,
      "message": "kPixelsPerRowPitch * texHeight doesn\u0027t seem quite right. Can you assert that it\u0027s right, and add an intermediary variable name to keep things clear?\n\n  ASSERT(texWidth \u003c\u003d kPixelsPerRowPitch);\n  const uint32_t texWidthPadded \u003d kPixelsPerRowPitch;\n  std::vector\u003cRGBA8\u003e data(texWidthPadded * texHeight, ...\n\nI might have gotten something wrong in these suggestions, but you probably get my idea.",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a6c4ce_67afd5ee",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-10-22T04:08:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17153a22_f8b24d38",
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8ae09a1_dcf9ad7c",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-10-21T09:41:14Z",
      "side": 1,
      "message": "nit: with*",
      "range": {
        "startLine": 159,
        "startChar": 70,
        "endLine": 159,
        "endChar": 72
      },
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82311cb6_88857746",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-10-22T04:08:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8ae09a1_dcf9ad7c",
      "range": {
        "startLine": 159,
        "startChar": 70,
        "endLine": 159,
        "endChar": 72
      },
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ca89d1d_c849aa4b",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-10-21T09:41:14Z",
      "side": 1,
      "message": "nit: with",
      "range": {
        "startLine": 196,
        "startChar": 70,
        "endLine": 196,
        "endChar": 72
      },
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6acff28d_1c0e0c73",
        "filename": "src/tests/end2end/TextureViewTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 1000019
      },
      "writtenOn": "2018-10-22T04:08:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ca89d1d_c849aa4b",
      "range": {
        "startLine": 196,
        "startChar": 70,
        "endLine": 196,
        "endChar": 72
      },
      "revId": "91c0b874db3ba5538cfe43be62b87340fe29d902",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}