{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5a2f0e18_417388d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Thanks, Corentin.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "660bbd64_9ff6ce8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "I think only minor issues remain: extra tests and/or avoid extra lookup.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ceb2e25f_22ef516c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "LGTM overall.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fc7550e_1d25851b",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "I think we should keep and use the version with the fingerprint. Dawn will embed the fingerprint inside itself - maybe just a define or something.\n\nAgain, I think we should only query the CachingInterface once upon creation - that way the embedder isn\u0027t looking up the fingerprint many times.",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf91545_f8a4b52b",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "I can move the query upon creation. But to make sure I understand, to avoid lookup, are you suggesting we have GetCachingInterface load and save the footprint data upon CreateDevice then upon [Load|Store]Data where Dawn will prefix it\u0027s own |key| with the footprint data?",
      "parentUuid": "6fc7550e_1d25851b",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "692bdad5_5d8db574",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T21:15:10Z",
      "side": 1,
      "message": "I\u0027m suggesting we call GetCachingInterface(fingerprint..) only once in the constructor of PersistentCache.\n\nThe fingerprint should never change throughout the lifetime of the persistent cache object.",
      "parentUuid": "8cf91545_f8a4b52b",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b5d6958_60a6a808",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T22:44:07Z",
      "side": 1,
      "message": "But can you clarify where the fingerprint data comes from and where it will be used?\n\nI\u0027m assuming the client provides the fingerprint data then Dawn uses it in [Load|Store]Data (vs Dawn calling GetCachingInterface() then embedder does device-based lookup).",
      "parentUuid": "692bdad5_5d8db574",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf0f7f37_5b2b474b",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T22:53:40Z",
      "side": 1,
      "message": "I was thinking that libdawn_native would have a build rule which added a #define for the concatenated hashes of the dawn revision, tint revision, etc. Dawn would pass that in as the fingerprint, not the client.\nWhat would be part of the fingerprint that the client needs to provide?",
      "parentUuid": "3b5d6958_60a6a808",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "219da6fc_c4449100",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-17T00:59:43Z",
      "side": 1,
      "message": "I would expect the new Dawn (version) strings to be concatenated to the Dawn key (like other static attributes). Originally, the client \"fingerprint\" was the origin data but now \"fingerprint\" could be Dawn data. I\u0027d prefer to do away with \"fingerprint\" and just have each side deal with building their own key.",
      "parentUuid": "cf0f7f37_5b2b474b",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f1e8588_d8fa761f",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "I\u0027m not sure I understand. Where would the Dawn commit hash, Tint commit hash and backend device UUID be used to influence the caching key?\n\nThe original idea behind having the caching interface take the fingerprint was so that this way embedders know they can completely discard the dawn caches when the fingerprint key changes.",
      "parentUuid": "219da6fc_c4449100",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a49a52_a63c2dfb",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "I was hoping something that the user can\u0027t actually put as valid code. This is probably a valid comment in HLSL.\n\nAnyway, we can add a TODO about hardening the security of this but it definitely needs to be done.\n\nUnless Tint strips comments then I guess it\u0027s okay?",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "120bbcb9_6113db1c",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "Yes, Tint always strips comments before reaching the backend so these comments are considered non-user code.",
      "parentUuid": "26a49a52_a63c2dfb",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "885682db_1222ee68",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T21:15:10Z",
      "side": 1,
      "message": "+Dan Sinclar, is this something Tint can commit to?\n\nconsider that in the future there may be an extension like WebGL\u0027s getTranslatedShaderSource and it may be reasonable to preserve comments through the translation.",
      "parentUuid": "120bbcb9_6113db1c",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b06bbc8_a2e78f71",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2020-11-16T21:19:32Z",
      "side": 1,
      "message": "We don\u0027t pass through comments now, but I don\u0027t want to commit to _never_ passing them through.\n\nThat said, we probably won\u0027t emit comments, generated WGSL code isn\u0027t readable, especially when we start hashing all the names of things.",
      "parentUuid": "885682db_1222ee68",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83c11224_71aa12b7",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T22:44:07Z",
      "side": 1,
      "message": "Thanks, Dan. @AE, I can leave a TODO + comment that it should be changed (leaving it for now) if we ever decide to emit comments.",
      "parentUuid": "7b06bbc8_a2e78f71",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5957cd1f_0b9514e1",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T22:53:40Z",
      "side": 1,
      "message": "Sure. Let\u0027s also add an ASSERT that the hlsl code doesn\u0027t have any \"//\"",
      "parentUuid": "83c11224_71aa12b7",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8429ad67_1b73e269",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "I\u0027m not sure I followed what started this thread. Why do we need to create a string that users can\u0027t produce themselves?",
      "parentUuid": "5957cd1f_0b9514e1",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d1bd8dc_416c4244",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-17T17:16:22Z",
      "side": 1,
      "message": "So the user can\u0027t make two shaders that end up having the same key",
      "parentUuid": "8429ad67_1b73e269",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a6c08c_71e45a6e",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T22:53:40Z",
      "side": 1,
      "message": "I think these can be WGPUDevice?",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 37
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69b4c233_82bfc306",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-17T00:59:43Z",
      "side": 1,
      "message": "Can I include the whole webgpu.h?",
      "parentUuid": "f6a6c08c_71e45a6e",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 37
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d6f8ff3_340aa29c",
        "filename": "src/include/dawn_platform/DawnPlatform.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "I think we could, be we would need to modify the BUILD.gn and CMakeLists.txt to add public dependencies on dawn_headers.",
      "parentUuid": "69b4c233_82bfc306",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 37
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e7dc30d_20505b65",
        "filename": "src/tests/BUILD.gn",
        "patchSetId": 9
      },
      "lineNbr": 404,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "nit: not actually a whitebox test because it doesn\u0027t rely on Dawn internals. We should be able to have a general caching test suite / family of test suites that will test caching of various things on all platforms.",
      "range": {
        "startLine": 404,
        "startChar": 6,
        "endLine": 404,
        "endChar": 40
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46900870_353e0757",
        "filename": "src/tests/BUILD.gn",
        "patchSetId": 9
      },
      "lineNbr": 404,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "D3D12CachingTests is a whitebox test because it relies on the specific hit counts of caching HLSL shaders, ensuring correctness with only the D3D backend (which is how I understood CW suggestion). \n\nAlternatively, we could do generic caching checks to relevant E2E tests (ex. EntryPointPoints) or enable all E2E to run with caching like before (note: only the latter guarantees 100% E2E coverage).",
      "parentUuid": "1e7dc30d_20505b65",
      "range": {
        "startLine": 404,
        "startChar": 6,
        "endLine": 404,
        "endChar": 40
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b80bfa6_7ea6bb7c",
        "filename": "src/tests/BUILD.gn",
        "patchSetId": 9
      },
      "lineNbr": 404,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T21:15:10Z",
      "side": 1,
      "message": "So yes, we should only DAWN_INSTANTIATE_TEST for the D3D12Backend(), but the test (to my knowledge) isn\u0027t using internal Dawn APIs. Everything uses the public interface so it can be inside the dawn_end2end_tests binary.",
      "parentUuid": "46900870_353e0757",
      "range": {
        "startLine": 404,
        "startChar": 6,
        "endLine": 404,
        "endChar": 40
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "061f9155_6cfc663f",
        "filename": "src/tests/DawnTest.h",
        "patchSetId": 9
      },
      "lineNbr": 269,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "nit: this could return a unique_ptr to make the ownership clear.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45811840_e5121f8b",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "We could also do a thing similar to deprecation warnings errors, etc where we check that every single cache hit has been surrounded by a EXPECT_CACHE_HIT",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "835418e0_90e183f2",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "Mmmh I don\u0027t think that\u0027s correct because what\u0027s tested below is a property of std::unordered_map. Having multiple values per keys would only be possible with std::unordered_multimap. Instead we can rely on the check you already added in StoreData.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e46286_49c3735e",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "nit: return 0 directly if mDisabled?",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f13d2e8e_93c9d26c",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 96,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "nit: public members can use snakeCase (instead of mSnakeCase), same for FakePersistentCache. I\u0027m not 100% sure we decided on that so Austin WDYT?",
      "range": {
        "startLine": 96,
        "startChar": 37,
        "endLine": 96,
        "endChar": 54
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee1df588_3864fdf3",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 96,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-17T17:16:22Z",
      "side": 1,
      "message": "seems okay as long as the actual class definition is small. If it gets bigger it\u0027s hard to distinguish member variables from other local variables inside a member function",
      "parentUuid": "f13d2e8e_93c9d26c",
      "range": {
        "startLine": 96,
        "startChar": 37,
        "endLine": 96,
        "endChar": 54
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8acf93b_b0e7b3b0",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 104,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-16T21:15:10Z",
      "side": 1,
      "message": "nit: these tests should work on the wire as well, though you may need to insert some flushes into the EXPECT_CACHE_HIT macro",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 104,
        "endChar": 5
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4be700ee_72cc540b",
        "filename": "src/tests/white_box/D3D12CachingTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 205,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-17T13:59:19Z",
      "side": 1,
      "message": "Why is this 4 and not 2? The comment above the test tries to explain it but I don\u0027t understand why each entrypoint is compiled once per stage given they are used by a single stage.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}