{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5a2f0e18_417388d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-13T22:45:34Z",
      "side": 1,
      "message": "Thanks, Corentin.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "660bbd64_9ff6ce8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "I think only minor issues remain: extra tests and/or avoid extra lookup.",
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fc7550e_1d25851b",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "I think we should keep and use the version with the fingerprint. Dawn will embed the fingerprint inside itself - maybe just a define or something.\n\nAgain, I think we should only query the CachingInterface once upon creation - that way the embedder isn\u0027t looking up the fingerprint many times.",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf91545_f8a4b52b",
        "filename": "src/dawn_native/PersistentCache.cpp",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "I can move the query upon creation. But to make sure I understand, to avoid lookup, are you suggesting we have GetCachingInterface load and save the footprint data upon CreateDevice then upon [Load|Store]Data where Dawn will prefix it\u0027s own |key| with the footprint data?",
      "parentUuid": "6fc7550e_1d25851b",
      "range": {
        "startLine": 57,
        "startChar": 29,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a49a52_a63c2dfb",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "I was hoping something that the user can\u0027t actually put as valid code. This is probably a valid comment in HLSL.\n\nAnyway, we can add a TODO about hardening the security of this but it definitely needs to be done.\n\nUnless Tint strips comments then I guess it\u0027s okay?",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "120bbcb9_6113db1c",
        "filename": "src/dawn_native/d3d12/ShaderModuleD3D12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 386,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "Yes, Tint always strips comments before reaching the backend so these comments are considered non-user code.",
      "parentUuid": "26a49a52_a63c2dfb",
      "range": {
        "startLine": 384,
        "startChar": 8,
        "endLine": 386,
        "endChar": 16
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e7dc30d_20505b65",
        "filename": "src/tests/BUILD.gn",
        "patchSetId": 9
      },
      "lineNbr": 404,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-11-14T01:10:52Z",
      "side": 1,
      "message": "nit: not actually a whitebox test because it doesn\u0027t rely on Dawn internals. We should be able to have a general caching test suite / family of test suites that will test caching of various things on all platforms.",
      "range": {
        "startLine": 404,
        "startChar": 6,
        "endLine": 404,
        "endChar": 40
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46900870_353e0757",
        "filename": "src/tests/BUILD.gn",
        "patchSetId": 9
      },
      "lineNbr": 404,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2020-11-16T19:34:40Z",
      "side": 1,
      "message": "D3D12CachingTests is a whitebox test because it relies on the specific hit counts of caching HLSL shaders, ensuring correctness with only the D3D backend (which is how I understood CW suggestion). \n\nAlternatively, we could do generic caching checks to relevant E2E tests (ex. EntryPointPoints) or enable all E2E to run with caching like before (note: only the latter guarantees 100% E2E coverage).",
      "parentUuid": "1e7dc30d_20505b65",
      "range": {
        "startLine": 404,
        "startChar": 6,
        "endLine": 404,
        "endChar": 40
      },
      "revId": "fc8fc5121a1be71184764a23d6621b3bd4d99e06",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}