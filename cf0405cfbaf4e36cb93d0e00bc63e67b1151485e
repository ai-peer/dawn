{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cc56c553_c29e8b4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-07-15T18:28:57Z",
      "side": 1,
      "message": "Thanks, @CW.",
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "070e140f_1c5db265",
        "filename": "src/dawn_native/d3d12/D3D11on12Util.cpp",
        "patchSetId": 20
      },
      "lineNbr": 26,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "Since Flush11On12DeviceToAvoidLeaks does not take a reference on the d3d11on12Device, you can pass a naked pointer or std::move the last reference to this parameter from the caller.",
      "range": {
        "startLine": 26,
        "startChar": 39,
        "endLine": 26,
        "endChar": 79
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc549e44_da0fa812",
        "filename": "src/dawn_native/d3d12/D3D11on12Util.h",
        "patchSetId": 20
      },
      "lineNbr": 54,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "Caching the 11on12Device is not necessary. You can get the device by calling the GetDevice method on the ID3D11Resource pointer. The method is on its baseclass ID3D11DeviceChild interface.",
      "range": {
        "startLine": 54,
        "startChar": 33,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18b16954_6d9b4d68",
        "filename": "src/dawn_native/d3d12/D3D11on12Util.h",
        "patchSetId": 20
      },
      "lineNbr": 60,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "Nit: Extra space.",
      "range": {
        "startLine": 60,
        "startChar": 69,
        "endLine": 60,
        "endChar": 70
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93026663_459979d3",
        "filename": "src/dawn_native/d3d12/D3D11on12Util.h",
        "patchSetId": 20
      },
      "lineNbr": 76,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "Does this unordered set support storing D3D11on12ResourceCacheEntry structures directly instead of resorting to unique pointers? Would help with locality of reference.",
      "range": {
        "startLine": 76,
        "startChar": 22,
        "endLine": 76,
        "endChar": 40
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68fe054e_ed3a9569",
        "filename": "src/dawn_native/d3d12/D3D12Backend.cpp",
        "patchSetId": 20
      },
      "lineNbr": 67,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "Since we\u0027re not making the cache on demand, consider storing the cache as a direct member variable instead of a pointer allocated on the heap.",
      "range": {
        "startLine": 67,
        "startChar": 34,
        "endLine": 67,
        "endChar": 77
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92d655ef_23b4db05",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 20
      },
      "lineNbr": 479,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "Returning just a nullptr here makes us lose error information compared to what we had previously. Can we put this back both here and in the QueryInterface call below?",
      "range": {
        "startLine": 479,
        "startChar": 16,
        "endLine": 479,
        "endChar": 31
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04f11cdb_e32b10c5",
        "filename": "src/dawn_native/d3d12/DeviceD3D12.cpp",
        "patchSetId": 20
      },
      "lineNbr": 604,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-07-16T17:01:11Z",
      "side": 1,
      "message": "If shared image destruction already flushes to avoid leaks, why do we need to it here as well?  (Please add a comment which describes the reason)",
      "range": {
        "startLine": 604,
        "startChar": 1,
        "endLine": 604,
        "endChar": 56
      },
      "revId": "cf0405cfbaf4e36cb93d0e00bc63e67b1151485e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}