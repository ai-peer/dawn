{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1057cbc4_7998007e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-11T14:44:36Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b7fdef5_84bde67c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-01-11T17:58:17Z",
      "side": 1,
      "message": "General thought also, for the validation tests, we should try to use the 2 argument overload of ASSERT_DEVICE_ERROR so that we can check which errors we are actually seeing. Otherwise the errors could change and the test could still pass if we are just expecting any random error.",
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d23f38a6_e92a5bcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T15:25:00Z",
      "side": 1,
      "message": "Checking strings means we\u0027ll have to update the tests when the error messages changes and not just when the validation logic changes, so I think that doing it in general for validation tests wouldn\u0027t be great. However for this case where it isn\u0027t possible to make an exact control case, I think it is a good idea. Done.",
      "parentUuid": "7b7fdef5_84bde67c",
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dcc35a5_684e8574",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-01-12T18:45:06Z",
      "side": 1,
      "message": "Yea, it\u0027s true that it would require updating the tests when the error changes, but I think that for validations, it\u0027s a reasonable dev load for the value of making sure the expected errors are triggering, not just some other one.",
      "parentUuid": "d23f38a6_e92a5bcf",
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4797eec_257c6a21",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 11
      },
      "lineNbr": 221,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-01-11T17:58:17Z",
      "side": 1,
      "message": "Would it be possible to make these conditions into a switch statement also? Or maybe lump together the switch statement above and just do something like the following so it is easier to read:\n\nswitch (dimension) {\n  case 1D:\n    DAWN_INVALID_IF(...);\n    DAWN_INVALID_IF(...);\n    ...\n    break;\n  case 2D:\n    DAWN_INVALID_IF(...);\n    ...\n    break;\n  ...\n}\n\nUnder the 1D case, we could also explicitly add a \"can\u0027t be compressed format\" condition, then in the CompressedTextureFormatsValidationTests.1DTexture below, we could use the block sizes and still get the right error.",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 221,
        "endChar": 0
      },
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e603338_0610c5cf",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 11
      },
      "lineNbr": 221,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T15:25:00Z",
      "side": 1,
      "message": "Done for the switch. I didn\u0027t add the validation for !isCompressed for 1d because it is already done at [1] so it would be redundant. WDYT?",
      "parentUuid": "b4797eec_257c6a21",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 221,
        "endChar": 0
      },
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "380c5c99_a35046e1",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 11
      },
      "lineNbr": 221,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2022-01-12T18:45:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5e603338_0610c5cf",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 221,
        "endChar": 0
      },
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee45b918_4d05a41e",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 11
      },
      "lineNbr": 311,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-12T15:25:00Z",
      "side": 1,
      "message": "[1]",
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cf254de_46a4c42f",
        "filename": "src/tests/unittests/validation/TextureValidationTests.cpp",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-01-11T14:45:32Z",
      "side": 1,
      "message": "Additional test coverage in https://github.com/gpuweb/cts/pull/873",
      "revId": "c7a544dfd88192882e7486fb4c3fb92cefffcd26",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}