{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5ccde565_26ebc001",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 113,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "nit: Why is this needed?",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cf6ddcc_5e9baba5",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 113,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-11T21:08:43Z",
      "side": 1,
      "message": "Moved to ValidateTextureViewFormatCompatibility for \"all\" views check.",
      "parentUuid": "5ccde565_26ebc001",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec27acc9_5a668380",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "This is a bit too much magic. Maybe we could have a second helper function that\u0027s \n\n AspectInfo GetSinglePlaneAspectInfo(format) {\n     ASSERT(formatsSet[format]);\n     return table[index].aspectInfo[0];\n }",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcdc3bf7_67d3c72b",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-12T11:26:47Z",
      "side": 1,
      "message": "And to be more precise this helper function would be use in AddMultiAspectFormat",
      "parentUuid": "ec27acc9_5a668380",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951fba7e_f9c39c37",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 223,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "This should be false for stencil8 because it\u0027s not implemented yet. Otherwise it\u0027s possible to ask the creation of a stencil8 texture which will fail in the backends. If we need we can special case stencil8 for now in createTextureView.\n\nAlternatively we can add special checks in createTexture, createREnderPipeline, createRenderBundleEncoder and beginRenderPass but that\u0027s more work.",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 223,
        "endChar": 46
      },
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d9e5202_88bcc099",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 223,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-11T21:08:43Z",
      "side": 1,
      "message": "Unsupported SGTM.",
      "parentUuid": "951fba7e_f9c39c37",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 223,
        "endChar": 46
      },
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbaca261_6512e2c7",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 351,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "nit: extra whiespace.",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f12fba41_e4369263",
        "filename": "src/dawn_native/Format.cpp",
        "patchSetId": 6
      },
      "lineNbr": 351,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-11T21:08:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbaca261_6512e2c7",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66b9d4b1_a0fcb558",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "nit: comment needs to be changed for kMaxPlanesPerFormat",
      "range": {
        "startLine": 78,
        "startChar": 64,
        "endLine": 79,
        "endChar": 44
      },
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22e0dc5e_d1cc00b3",
        "filename": "src/dawn_native/Format.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-11T21:08:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66b9d4b1_a0fcb558",
      "range": {
        "startLine": 78,
        "startChar": 64,
        "endLine": 79,
        "endChar": 44
      },
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5c541a2_c3c0155b",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "Shouldn\u0027t that default to the plane\u0027s format if a single plane is selected?",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4925d17b_609ec246",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-11T21:08:43Z",
      "side": 1,
      "message": "I discovered TextureView relies on a behavior of expecting the multi planar format for the view format then re-mapping the per plane format by aspect upon creation. \n\nIf I reverse this, I would also need to modify all the backends; in particular, for depth-stencil.",
      "parentUuid": "e5c541a2_c3c0155b",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "980cc0db_529ee09c",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-02-11T21:47:41Z",
      "side": 1,
      "message": "You mean the check at [1] ?\n\nMaybe we should can it as:\n\n // Aspects are all present in the base format\n SelectFormatAspects(texture-\u003eGetFormat(), viewDesc-\u003easpect) is a subset of texture-\u003eGetFormat().aspects\n\n and\n \n // And the selected planar format is the same as the view format.\n // One day this will be \"compatible with\".\n texture-\u003eGetFormat().GetAspectInfo(viewDesc-\u003easpect).format \u003d\u003d\n                        viewDesc-\u003eformat",
      "parentUuid": "4925d17b_609ec246",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eedfdc06_607b4c84",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-12T02:11:57Z",
      "side": 1,
      "message": "Not the validation check at [1] but the default format being equal to the texture format at Ln#362 for CreateView(). The backends expect the view format to be a \"planar format\" (ex. depth-stencil) and not the per plane \"view format\" (ex. depth24 or stencil8). The \"use texture format\" also makes sense to me because only D3D12 could re-map views.",
      "parentUuid": "980cc0db_529ee09c",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75c72394_765c9a09",
        "filename": "src/dawn_native/Texture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-12T11:26:47Z",
      "side": 1,
      "message": "The other backends also work the same way. In Vulkan depth-stencil is special but multi-planar formats ask for the plane\u0027s format:\n\n\u003e If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, if the format of the image is a multi-planar format, and if subresourceRange.aspectMask is one of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT, then format must be compatible with the VkFormat for the plane of the image format indicated by subresourceRange.aspectMask, as defined in Compatible formats of planes of multi-planar formats\n\n(note that multi-planar formats for imported video will always be mutable format in Vulkan).\n\nMetal has a similar thing where it uses texture view for the stencil view on depth stencil textures.\n\nThis isn\u0027t necessary to do now, so we can instead add a TODO and file a bug about this. Someone will take the task eventually.",
      "parentUuid": "eedfdc06_607b4c84",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb4fb8d2_3ad6c171",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1103,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-11T12:50:57Z",
      "side": 1,
      "message": "Can\u0027t this stay the following: ?\n\n  aspect \u003d ConvertViewAspect()\n  planeSlice \u003d GetAspectIndex(aspect);\n  format \u003d ToDXGIFormat(GetFormat().GetAspectInfo(aspect).format);",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3823132_d9f88cdc",
        "filename": "src/dawn_native/d3d12/TextureD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1103,
      "author": {
        "id": 1000268
      },
      "writtenOn": "2021-02-11T21:08:43Z",
      "side": 1,
      "message": "Good idea.",
      "parentUuid": "fb4fb8d2_3ad6c171",
      "revId": "3cc1d1d1bbfd251ce491f4119aa5cb76e8ecb5fe",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}