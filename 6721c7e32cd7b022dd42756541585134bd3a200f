{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "28a18300_3e23bdc0",
        "filename": "docs/dawn/features/compat_sample_mask.md",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T20:45:08Z",
      "side": 1,
      "message": "nit: it lets you use sample_mask on other backends in compat mode too. It should be sufficient to say it lets you use the builtin in compatibility mode without mentioning GL",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 13
      },
      "revId": "6721c7e32cd7b022dd42756541585134bd3a200f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48b66107_8e090e14",
        "filename": "docs/dawn/features/compat_sample_mask.md",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-06-27T20:45:08Z",
      "side": 1,
      "message": "we should figure out and describe what happens when you use the feature in WebGPU core.\n - is it exposed at all?\n - is it invalid to try to enable it?\n \nas well as have tests for these things.\nI\u0027m not sure how we will specify it (+Kai). My intuition though is that it will NOT be exposed in core, so it will be a validation error to try to enable it in core.",
      "revId": "6721c7e32cd7b022dd42756541585134bd3a200f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "107c1ab0_7cd2eb98",
        "filename": "docs/dawn/features/compat_sample_mask.md",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2023-06-27T20:58:48Z",
      "side": 1,
      "message": "Do we actually need this to be an extension right now? I feel like it\u0027s a bit premature, since we haven\u0027t even discussed Compat with other vendors.\n\nIf it\u0027s for Graphite, could we use a Toggle? Then we don\u0027t need to figure out how it gets exposed as an extension just yet.",
      "parentUuid": "48b66107_8e090e14",
      "revId": "6721c7e32cd7b022dd42756541585134bd3a200f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88903478_6eda672c",
        "filename": "docs/dawn/features/compat_sample_mask.md",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-06-27T22:42:48Z",
      "side": 1,
      "message": "sample_mask exists in core, so iiuc this extension doesn\u0027t exist in core. We shouldn\u0027t expose it on non-compat adapters, though if we did it would be a no-op.\n\nThis also gets potentially complicated with shader extensions. The WGSL group still hasn\u0027t agreed on how features will be added to shaders. Of course we may also have this problem with compat generally (do you say at the top of the shader, please validate this works in compat?) but we can\u0027t do much until the group figures this out.\n\nNot sure about it being a Toggle, can Toggles be unavailable on some hardware?\nIt could be behind an general \"unsafe\" toggle or the toggle could say \"expose if available\" - if there\u0027s a way to query whether it\u0027s available.\n\nAll that said I think a feature makes sense regardless of what it\u0027s for, as long as the feature itself is not exposed unless you set the right Toggle.\n\nJust out of curiosity, _is_ this for Graphite?",
      "parentUuid": "107c1ab0_7cd2eb98",
      "revId": "6721c7e32cd7b022dd42756541585134bd3a200f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}