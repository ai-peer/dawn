{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8a48d54f_5b074b65",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2023-11-27T22:05:46Z",
      "side": 1,
      "message": "`Enumerate(span)` ?",
      "range": {
        "startLine": 39,
        "startChar": 28,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fa3250c_9b57634a",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T14:01:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a48d54f_5b074b65",
      "range": {
        "startLine": 39,
        "startChar": 28,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37885c74_2dc5e086",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-27T18:21:05Z",
      "side": 1,
      "message": "it\u0027s interesting that the pointer is not mBegin + mSize\n\nwe could make it that, or you could comment that it is fine because the \u003d\u003d and !\u003d operators only check the index, not the pointer",
      "range": {
        "startLine": 66,
        "startChar": 50,
        "endLine": 66,
        "endChar": 57
      },
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e89ea843_db40de2b",
        "filename": "src/dawn/common/Enumerator.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T14:01:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37885c74_2dc5e086",
      "range": {
        "startLine": 66,
        "startChar": 50,
        "endLine": 66,
        "endChar": 57
      },
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e910e0f6_50013570",
        "filename": "src/dawn/tests/unittests/EnumeratorTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-27T18:21:05Z",
      "side": 1,
      "message": "why do we need to pass indices in? Can\u0027t we always test `ASSERT_EQ(index, Index(i))` ?",
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ee79520_201306ab",
        "filename": "src/dawn/tests/unittests/EnumeratorTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T14:01:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e910e0f6_50013570",
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edd1ff6d_7c90e039",
        "filename": "src/dawn/tests/unittests/EnumeratorTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-27T18:21:05Z",
      "side": 1,
      "message": "wow we can use std::span now?",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 13
      },
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff15ec79_0b071d2f",
        "filename": "src/dawn/tests/unittests/EnumeratorTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T14:01:19Z",
      "side": 1,
      "message": "Ah we can\u0027t. Removed.",
      "parentUuid": "edd1ff6d_7c90e039",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 13
      },
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09185eda_8060e9da",
        "filename": "src/dawn/tests/unittests/EnumeratorTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2023-11-27T18:21:05Z",
      "side": 1,
      "message": "nit: test both the empty but non-null and the empty with null cases",
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05770a71_0a3628c9",
        "filename": "src/dawn/tests/unittests/EnumeratorTests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-11-28T14:01:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09185eda_8060e9da",
      "revId": "5ea74877ccc10aba7bb4ca5ad621e9088ac195e0",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}