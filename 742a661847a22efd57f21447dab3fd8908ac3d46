{
  "comments": [
    {
      "key": {
        "uuid": "bb852d94_27fa5b2b",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-14T21:38:43Z",
      "side": 1,
      "message": "Your new code removed the Reset call that the previous code had. Unfortunately, none of the DAWN_TRY macros handles this \"rethrow\" use case very well. Ideally, we would want to refactor the inner part of the DAWN_TRY macros to make this easier ... or write the code longhand.\n\n@Corentin and @Austin, do you have any better ideas?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 0
      },
      "revId": "742a661847a22efd57f21447dab3fd8908ac3d46",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86087fa5_bc9ee7ee",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2019-10-14T22:41:05Z",
      "side": 1,
      "message": "Rafael, is your idea to do something like:\n\nDAWN_TRY(commandList-\u003eReset(...), {\n  // some cleanup code which happens if there\u0027s an error.\n});\n\n?\n\nI think for now, it\u0027d be better not to add extra complex macros unless we need this pattern in many places. Two ideas:\n\n1) Write it out as you suggested.\n\n2) Move-construct a ComPtr\u003cID3D12CommandList\u003e from mD3D12CommandList, and then Move it back after the DAWN_TRY.\n\nComPtr\u003cID3D12CommandList\u003e commandList(std::move(mD3D12CommandList));\nDAWN_TRY(commandList-\u003eReset(...));\nmD3D12CommandList \u003d std::move(commandList);\n\nWhat do you think?",
      "parentUuid": "bb852d94_27fa5b2b",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 0
      },
      "revId": "742a661847a22efd57f21447dab3fd8908ac3d46",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab0390e1_dcb47d9a",
        "filename": "src/dawn_native/d3d12/CommandRecordingContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-15T00:32:24Z",
      "side": 1,
      "message": "Thinking about this more, I think the following would work:\n\nconst MaybeError error \u003d function();\nif (error.IsError()) {\n    \u003cExtra error handling\u003e\n    return DAWN_TRY(error);\n}\n\nWe could also return the error object directly instead of re-DAWN_TRYing but we would lose out on the AppendBacktrace call at the expense of an additional IsError check.",
      "parentUuid": "86087fa5_bc9ee7ee",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 0
      },
      "revId": "742a661847a22efd57f21447dab3fd8908ac3d46",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62115dff_2c66c678",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 7
      },
      "lineNbr": 168,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2019-10-14T21:38:43Z",
      "side": 1,
      "message": "Nit: The error string doesn\u0027t quite match the method we\u0027re calling.",
      "range": {
        "startLine": 168,
        "startChar": 31,
        "endLine": 168,
        "endChar": 62
      },
      "revId": "742a661847a22efd57f21447dab3fd8908ac3d46",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}