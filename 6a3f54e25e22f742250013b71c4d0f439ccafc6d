{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a369d149_7bd3eba3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T14:17:55Z",
      "side": 1,
      "message": "Looks good to me. All nits.",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aab0d9c9_8948b9b3",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T14:17:55Z",
      "side": 1,
      "message": "Note that all the AST transforms that use a Dawn-private UBO are likely moving to using some form of push-constant that share a single binding point / structure. @senorblanco@chromium.org has [added the `tint::ast::transform::PushConstantHelper`](https://dawn-review.googlesource.com/c/dawn/+/174120) for updating a single structure for these kinds of transforms.\n\nWhile it\u0027s fine to land this as is, we\u0027ll probably want something for the IR.",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cf11f7c_5c0db35c",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T14:17:55Z",
      "side": 1,
      "message": "Ã¼bernit: Could use a compound if. (I\u0027m now just seeing how good the AI is)",
      "fixSuggestions": [
        {
          "fixId": "a931e5b1_5a20b7a0",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
              "range": {
                "startLine": 83,
                "startChar": 0,
                "endLine": 85,
                "endChar": 0
              },
              "replacement": "            if (auto* length \u003d GetComputedLength(call-\u003eArgs()[0])) {\n"
            }
          ]
        }
      ],
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1318a9c_16dfd9fc",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T14:17:55Z",
      "side": 1,
      "message": "Suggest using a `tint::Switch` with the `TINT_ICE_ON_NO_MATCH`\nNote: I saw there was a recent request for breaking up small `Switch`s into if-else chains. I\u0027d strongly recommend using `Switch` unless there\u0027s a good reason not to. `Switch` has more context, and can be better optimized than as sequence of if-else chains. It also doesn\u0027t suffer from the variable shadowing issue which bit us many times before.",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "278fbeef_8c6ed88a",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "Can drop the `else` as the if returns.\n```suggestion\n            } \n            \n            if (auto* result \u003d ptr-\u003eAs\u003cInstructionResult\u003e()) {\n```",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "003f0626_11a97823",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "ditto\n```suggestion\n                } \n                \n                if (auto* access \u003d result-\u003eInstruction()-\u003eAs\u003cAccess\u003e()) {\n```",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3e12c96_572a6e8b",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "Just to check `FunctionParam` will use Symbol to rename this to a numbered version if there are multiple `tint_array_length`\u0027s, yea?",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b607bb7_32f8015b",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T18:07:36Z",
      "side": 1,
      "message": "The names in IR are just metadata, and are free to collide.\nIt\u0027s up to the raise transforms / writer to ensure that there are no collisions.",
      "parentUuid": "f3e12c96_572a6e8b",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "629c7680_8ffc5158",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "Why is this inside a `b.InsertBefore` as it doesn\u0027t insert anything? If it\u0027s because of the `GetComputedLength` it would be better if that function did the `insertBefore` so it\u0027s clearer what\u0027s happening",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ae5bdc3_1c2b6c8a",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "This could use a couple more comments as to what is going on. So, if I\u0027m right, the `size_index` is the uint32_t index into the array. We extract a vec4 from the buffer, so we divide by 4, we then extract a single component from the vec4 so we %4.\n\nOut of curiousy, why do we go through the vec4 and not just access the buffer as an array at the given size_index ?",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b8e186_68b263a2",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T18:07:36Z",
      "side": 1,
      "message": "Tint says: \n\n```\nuniform storage requires that array elements are aligned to 16 bytes, but array element of type u32 has a stride of 4 bytes. Consider using a vector or struct as the element type instead.\n```",
      "parentUuid": "4ae5bdc3_1c2b6c8a",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53dca1d3_de0e56c4",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "So, the size Dawn provides in the buffer includes the offset into the struct?",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c66598a_b5267c27",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "```suggestion\n        if (buffer_sizes_var) {\n          return buffer_sizes_var-\u003eResult(0);\n        }\n```",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efbc086f_61943a73",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.cc",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "Which UBO requirement means we have to use vec4 instead of just floats?",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd405eb2_18159294",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1000257
      },
      "writtenOn": "2024-05-21T15:26:32Z",
      "side": 1,
      "message": "```suggestion\n///\n/// @param module the IR module\n```",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "757b3b78_46379b50",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform_fuzz.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T14:17:55Z",
      "side": 1,
      "message": "While there\u0027s no validation for this right now, this will eventually need to check that the array-length var doesn\u0027t collide with an existing binding point.",
      "fixSuggestions": [
        {
          "fixId": "5a95e0d4_21e645b6",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/tint/lang/core/ir/transform/array_length_from_uniform_fuzz.cc",
              "range": {
                "startLine": 40,
                "startChar": 0,
                "endLine": 40,
                "endChar": 0
              },
              "replacement": "    // TODO(crbug.com/tint/1896): Check that the array-length var doesn\u0027t collide\n    // with an existing binding point.\n"
            }
          ]
        }
      ],
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e89b6897_8a9dc3f6",
        "filename": "src/tint/lang/core/ir/transform/array_length_from_uniform_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 346,
      "author": {
        "id": 1001737
      },
      "writtenOn": "2024-05-21T14:17:55Z",
      "side": 1,
      "message": "Bit confused by your test naming convention here. Isn\u0027t this a `ViaAccess` ?",
      "revId": "6a3f54e25e22f742250013b71c4d0f439ccafc6d",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}