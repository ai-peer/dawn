{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "35aacc5b_81b4fee9",
        "filename": "generator/templates/dawn_native/ApiObjects.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "looks like ObjectTypeToTypeEnum isn\u0027t used\nDid you want to do something like infer the type of \"this\" inside the derived class constructor and automatically get the enum instead of manually saying ObjectType::BindGroup ?\n\n\nType will need to be {{Type}}Base for frontend types.\nAlso, note that some types don\u0027t have a backend equivalent. See https://source.chromium.org/chromium/chromium/src/+/main:third_party/dawn/generator/templates/dawn_native/ProcTable.cpp;l\u003d36?q\u003dProcTable.cpp\u0026ss\u003dchromium%2Fchromium%2Fsrc\n\nWe\u0027ll probably want it to work for the backend types too, like non-base\ndawn_native::d3d12::Buffer.\nIt may be possible to define for Derived by inferring the type Base* of ToBackend(Derived*). Not 100% sure. But given this isn\u0027t used right now, it\u0027s not necessary if the template stuff is unnecessarily complex.",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c2917a7_d6c5ebc4",
        "filename": "generator/templates/dawn_native/ApiObjects.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Removed entirely since I think it will be a lot more work to add all the types and derived types here. Decided to go with a virtual function instead as Corentin suggested.",
      "parentUuid": "35aacc5b_81b4fee9",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "344d329d_870f176a",
        "filename": "generator/templates/dawn_native/ObjectType.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "nit: spaces instead of tabs",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f899172_9f37ff3c",
        "filename": "generator/templates/dawn_native/ObjectType.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "344d329d_870f176a",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3c6c787_5c0ad841",
        "filename": "generator/templates/dawn_native/ObjectType.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "+ 1 (you added Unknown)",
      "range": {
        "startLine": 30,
        "startChar": 55,
        "endLine": 30,
        "endChar": 81
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c005b04e_2f2f578a",
        "filename": "generator/templates/dawn_native/ObjectType.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-22T10:39:00Z",
      "side": 1,
      "message": "Is unknown ever accessed?",
      "parentUuid": "d3c6c787_5c0ad841",
      "range": {
        "startLine": 30,
        "startChar": 55,
        "endLine": 30,
        "endChar": 81
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "873fcbfc_9f25d696",
        "filename": "generator/templates/dawn_native/ObjectType.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Removed now.",
      "parentUuid": "c005b04e_2f2f578a",
      "range": {
        "startLine": 30,
        "startChar": 55,
        "endLine": 30,
        "endChar": 81
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a1f839f_495843de",
        "filename": "src/dawn_native/AttachmentState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "Ideally we could avoid the linked list for this object since it\u0027s a pure frontend type.\n\nThoughts:\n - Unknown might be better named PureFrontend\n - Perhaps we add a new APIObjectBase which extends ObjectBase. That\u0027s where the linked list stuff can live. This also means splitting CachedObject into CachedObject and CachedAPIObject. Note that ObjectBase doesn\u0027t need the error tag and IsError() implementation either - only API objects need that.\n - This separation could probably be done as a follow-up. i.e. probably ok to give AttachmentState a list, and then remove the Unknown/PureFrontend enum later.\n \nWDYT?",
      "range": {
        "startLine": 130,
        "startChar": 31,
        "endLine": 130,
        "endChar": 50
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c6a5af5_e232ddbd",
        "filename": "src/dawn_native/AttachmentState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-22T10:39:00Z",
      "side": 1,
      "message": "Do we ever see some non-API objects having content that needs to be destroyed? Maybe staging buffer but I\u0027m not even sure for these because they could use dawn_native::Buffer.\n\nSeparating BaseObjects objects sounds good",
      "parentUuid": "5a1f839f_495843de",
      "range": {
        "startLine": 130,
        "startChar": 31,
        "endLine": 130,
        "endChar": 50
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86adbf06_6c409139",
        "filename": "src/dawn_native/AttachmentState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Separated them.",
      "parentUuid": "1c6a5af5_e232ddbd",
      "range": {
        "startLine": 130,
        "startChar": 31,
        "endLine": 130,
        "endChar": 50
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d58d1da9_24ade840",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-22T10:39:00Z",
      "side": 1,
      "message": "nit: unused?",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67b599c7_4913290e",
        "filename": "src/dawn_native/Device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d58d1da9_24ade840",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbf3cd18_5973cf09",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 1
      },
      "lineNbr": 264,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-22T10:39:00Z",
      "side": 1,
      "message": "nit: we usually return mutable things with pointers so references make it clear that things are immutable. Also we usually put implementation in .cpp hoping that LTO inlines as needed.",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afa48159_2f46683c",
        "filename": "src/dawn_native/Device.h",
        "patchSetId": 1
      },
      "lineNbr": 264,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbf3cd18_5973cf09",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "034e8a88_70dedf4b",
        "filename": "src/dawn_native/ObjectBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "when do we add it to the list?",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cba17853_20a7278c",
        "filename": "src/dawn_native/ObjectBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "We don\u0027t add them to the list yet. I have a follow up change that implements adding the objs to the lists when we call the Create* functions in device. Calling remove right now won\u0027t do anything so it is safe and it helps understand the idea of the design a bit better.",
      "parentUuid": "034e8a88_70dedf4b",
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ececfcf_3e525142",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "nit: don\u0027t need to initialize this one since it\u0027s always set in the constructor",
      "range": {
        "startLine": 60,
        "startChar": 27,
        "endLine": 60,
        "endChar": 47
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a4fbbfc_b1207c2f",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Obsolete since removed.",
      "parentUuid": "6ececfcf_3e525142",
      "range": {
        "startLine": 60,
        "startChar": 27,
        "endLine": 60,
        "endChar": 47
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d05d3166_42ccbf4c",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T01:17:51Z",
      "side": 1,
      "message": "we could potentially store this in the refcount payload as well. Check out the RefCounted class. It has a uint64_t which is the refcount, but the lowest bit is a tag which indicates whether the object is an error or not. We mask out the payload to determine the refcount.\n\nThat said.. do we need it? Or does IsInList() imply State::Alive? May not be safe depending on what you\u0027re planning. like if device.destroy() races with ~Derived().",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed0d905_af29935e",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-09-22T10:39:00Z",
      "side": 1,
      "message": "Since we\u0027re talking about memory, what do you think of exposing the object type as a virtual method. This would consume barely any additional memory because we already have a vtable pointer for the virtual methods of RefCounted. Conceptually the ObjectType is duplicate information with the vtable pointer that\u0027s already a form of type information so we could deduplicate it this way.\n\nI might have an out of date understanding of the approach, but wasn\u0027t the idea to set mDevice\u003dnullptr when the object is destroyed?",
      "parentUuid": "d05d3166_42ccbf4c",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e994a3ab_ca632c5e",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2021-09-22T15:18:04Z",
      "side": 1,
      "message": "1. re mDevice\u003dnullptr: ah yes, this can also be used to say the object is no longer alive\n\n2. re memory: we may not need the storage for the enum OR the virtual method. Not sure where the object is going to be added to the list, but if it\u0027s on construction, then we can do it in the constructor and not store the enum.\nThen for destruction, also not sure when DestroyObject is planning to be called - I think in the Derived destructor? But if that\u0027s the case, we also statically know the type. So with something like the following, we don\u0027t need virtual methods or storage of the enum.\n\nclass ObjectBase ..... {\n protected:\n  template\u003ctypename T\u003e\n  static void Track(T* this) {\n    this-\u003eTrackImpl(ObjectTypeToTypeEnum\u003cT\u003e::value);\n  }\n  \n  template\u003ctypename T\u003e\n  static void Untrack(T* this) {\n    this-\u003eUntrackImpl(ObjectTypeToTypeEnum\u003cT\u003e::value);\n  }\n  \n private:\n  // Impl will get the list, acquire the mutex, and append/remove from it.\n  void TrackImpl(ObjectType type);\n  void UntrackImpl(ObjectType type);\n};\n\nBindGroup::BindGroup(...) {\n  ObjectBase::Track(this);\n}\n\nBindGroup::~BindGroup(..) {\n  ObjectBase::Untrack(this);\n}",
      "parentUuid": "9ed0d905_af29935e",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c453674_eb1decce",
        "filename": "src/dawn_native/ObjectBase.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2021-09-24T00:20:18Z",
      "side": 1,
      "message": "Removed state to use mDevice.\n\nAlso decided to go with virtual function because it is much simpler and easier to understand instead of the templating magic which will be harder to maintain. It is also nice to keep the information for future usage (say better logging).",
      "parentUuid": "e994a3ab_ca632c5e",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f36fc232d89369a8358096069e0b31a23709fd02",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}