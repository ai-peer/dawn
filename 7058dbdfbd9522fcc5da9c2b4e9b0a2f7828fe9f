{
  "comments": [
    {
      "key": {
        "uuid": "e38b2e9b_a9dd10b5",
        "filename": "src/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 170,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "nit: also modify CMakeLists.txt (without commas) please!",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab26ca7a_69ce4c32",
        "filename": "src/common/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 170,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e38b2e9b_a9dd10b5",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fac58fe8_cc3a9295",
        "filename": "src/common/TypedBitset.h",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-11T22:09:13Z",
      "side": 1,
      "message": "idea: maybe put these into a namespace that sort of mirrors std::, e.g. ityped::bitset, ityped::array, ityped::integer, ityped::span, ityped::underlying_type_t?\n\nI think it would be nice because I like that std:: types have a different visual style from our own classes (identifies it as a non-domain-specific type)",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f42b6f4f_cc64651b",
        "filename": "src/common/TypedBitset.h",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-12T00:18:09Z",
      "side": 1,
      "message": "I think this is a pretty good idea; Corentin WDYT?",
      "parentUuid": "fac58fe8_cc3a9295",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ca4a1e_678b5c30",
        "filename": "src/common/TypedBitset.h",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "Sound good!",
      "parentUuid": "f42b6f4f_cc64651b",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea3821a0_d34bc463",
        "filename": "src/common/TypedBitset.h",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92ca4a1e_678b5c30",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5055ef5b_ea72e3db",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "nit: range assertion was removed.\n\nCan we also have an example in the comment, and also an explicit callout that the type is purely the integral type in release?\n\nI think a lot of people are going to run into compilation issues when using TypedIntegers and will end up in this header, so it would help if there was documentation here.",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af7cf8a6_11195097",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5055ef5b_ea72e3db",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79f0b2f4_529d9f9c",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "Was there a reason for removing more general arithmetic expressions?",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "281a0a57_fd5435ad",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "I don\u0027t think I ever had them. I added addition and subtraction in the latest patchset. They\u0027re not used yet, but I can see it being helpful. Not sure if other general arithmetic is useful yet.",
      "parentUuid": "79f0b2f4_529d9f9c",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49fac709_f78a6dc9",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-16T19:32:40Z",
      "side": 1,
      "message": "I don\u0027t think other operators are likely to come up. I\u0027m not even totally sure whether we will need addition and subtraction. Generally these types are indices, and it doesn\u0027t make sense to add them (and only barely makes sense to subtract them) - though I guess they can also represent sizes, for which addition does make sense. (if we wanted to be super strict it could be like affine transformations: [x,y,z,0]+[x,y,z,0] and [x,y,z,1]+[x,y,z,0] and [x,y,z,1]-[x,y,z,1] make sense but [x,y,z,1]+[x,y,z,1] and [x,y,z,0]-[x,y,z,1] don\u0027t)",
      "parentUuid": "281a0a57_fd5435ad",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6297821_7f8b22b2",
        "filename": "src/common/TypedInteger.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-17T22:32:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "49fac709_f78a6dc9",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b006397f_cf5eca07",
        "filename": "src/common/UnderlyingType.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-11T22:09:13Z",
      "side": 1,
      "message": "nit:\n\n  underlying_type_t\n        ^        ^^",
      "range": {
        "startLine": 20,
        "startChar": 37,
        "endLine": 20,
        "endChar": 51
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a4374a_ac065243",
        "filename": "src/common/UnderlyingType.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-12T00:18:09Z",
      "side": 1,
      "message": "not the _t suffix because that\u0027s a little different\n\ntemplate \u003ctypename T\u003e\nusing underlying_type_t \u003d typename underlying_type\u003cT\u003e::type;\n\nBut I should add something like that for our version of it.",
      "parentUuid": "b006397f_cf5eca07",
      "range": {
        "startLine": 20,
        "startChar": 37,
        "endLine": 20,
        "endChar": 51
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96ff7686_a3bdcbf8",
        "filename": "src/common/UnderlyingType.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "IMHO we could just go directly to the _t variant. C++ should have done that from the start but didn\u0027t have templated type aliases in C++11.",
      "parentUuid": "34a4374a_ac065243",
      "range": {
        "startLine": 20,
        "startChar": 37,
        "endLine": 20,
        "endChar": 51
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "472169f3_5d88a820",
        "filename": "src/common/UnderlyingType.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96ff7686_a3bdcbf8",
      "range": {
        "startLine": 20,
        "startChar": 37,
        "endLine": 20,
        "endChar": 51
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a81b00f_6c9d3057",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-11T22:09:13Z",
      "side": 1,
      "message": "Use TypedBitset?",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3169b7b_ff13bd95",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a81b00f_6c9d3057",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55514923_00bbb060",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-16T19:32:40Z",
      "side": 1,
      "message": "no change?",
      "parentUuid": "a3169b7b_ff13bd95",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6859c2ea_eb1bd0e4",
        "filename": "src/dawn_native/BindGroup.cpp",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T20:55:47Z",
      "side": 1,
      "message": "Whoops. Now it\u0027s done.",
      "parentUuid": "55514923_00bbb060",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "940a0cf4_5427e25d",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 6
      },
      "lineNbr": 389,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "nit: or {mBindingInfo.data(), mBindingCount} ?",
      "range": {
        "startLine": 389,
        "startChar": 12,
        "endLine": 389,
        "endChar": 97
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b6aa306_3c73ab45",
        "filename": "src/dawn_native/BindGroupLayout.cpp",
        "patchSetId": 6
      },
      "lineNbr": 389,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "940a0cf4_5427e25d",
      "range": {
        "startLine": 389,
        "startChar": 12,
        "endLine": 389,
        "endChar": 97
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32522672_e9df9ec6",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "I think this could be reorderd: \n\n            TypeIndexedSpan\u003cBindingIndex, const uint64_t\u003e dynamicOffsets(\n                dynamicOffsetsIn, BindingIndex(dynamicOffsetCountIn));\n            ASSERT(dynamicOffsets.size() \u003d\u003d group-\u003eGetLayout()-\u003eGetDynamicBufferCount());",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 233,
        "endChar": 70
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82849b94_493ce5b8",
        "filename": "src/dawn_native/d3d12/CommandBufferD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32522672_e9df9ec6",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 233,
        "endChar": 70
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d022ba57_629014b7",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 197,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T14:25:59Z",
      "side": 1,
      "message": "We should probably have dawn_native internal versions of these constants.",
      "range": {
        "startLine": 197,
        "startChar": 43,
        "endLine": 197,
        "endChar": 63
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dff165d7_1dcbf12d",
        "filename": "src/dawn_native/d3d12/PipelineLayoutD3D12.cpp",
        "patchSetId": 6
      },
      "lineNbr": 197,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "I added one. Although this one is actually going away soon-ish hopefully. But yea, we\u0027ll probably have other internal versions in the future.",
      "parentUuid": "d022ba57_629014b7",
      "range": {
        "startLine": 197,
        "startChar": 43,
        "endLine": 197,
        "endChar": 63
      },
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "914c6646_0001b3dc",
        "filename": "src/dawn_native/opengl/ShaderModuleGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-11T22:09:13Z",
      "side": 1,
      "message": "nit: probably should just write an overload for this",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da185072_bdde613b",
        "filename": "src/dawn_native/opengl/ShaderModuleGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-12T00:18:09Z",
      "side": 1,
      "message": "don\u0027t really want to include sstream in TypedInteger.h though..",
      "parentUuid": "914c6646_0001b3dc",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc75ab80_4d687cce",
        "filename": "src/dawn_native/opengl/ShaderModuleGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-06-12T00:51:06Z",
      "side": 1,
      "message": "fair point, this is fine then",
      "parentUuid": "da185072_bdde613b",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6070351_9701ffd2",
        "filename": "src/dawn_native/opengl/ShaderModuleGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-06-16T19:02:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fc75ab80_4d687cce",
      "revId": "7058dbdfbd9522fcc5da9c2b4e9b0a2f7828fe9f",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    }
  ]
}