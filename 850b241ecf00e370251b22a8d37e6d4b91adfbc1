{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06d6af25_ffb955e6",
        "filename": "generator/templates/dawn/wire/server/ServerDoers.cpp",
        "patchSetId": 62
      },
      "lineNbr": 84,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:41:47Z",
      "side": 1,
      "message": "In general in protocols it\u0027s better to be extremely strict on what\u0027s accepted as it catches bugs much faster. Is there an alternative why to do this?",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "188b1296_307b79dc",
        "filename": "generator/templates/dawn/wire/server/ServerDoers.cpp",
        "patchSetId": 62
      },
      "lineNbr": 84,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06d6af25_ffb955e6",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "164429d5_94978784",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 62
      },
      "lineNbr": 1499,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "do we still need this TODO since the legacy version is the deprecated device lost callback (vs callback info) ?",
      "range": {
        "startLine": 1499,
        "startChar": 100,
        "endLine": 1499,
        "endChar": 119
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c71a5ec_93bc9f9c",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 62
      },
      "lineNbr": 1499,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "This is still needed because without setting a default value on the `callback mode`, we can\u0027t default construct the `DeviceDescriptor` which would break some users that have:\n\n```\nwgpu::DeviceDescriptor desc \u003d {};\n```",
      "parentUuid": "164429d5_94978784",
      "range": {
        "startLine": 1499,
        "startChar": 100,
        "endLine": 1499,
        "endChar": 119
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2013388_3ce8e57d",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 62
      },
      "lineNbr": 1500,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "shouldn\u0027t this be a new callback type that takes the device as the argument?\nditto for uncaptured error",
      "range": {
        "startLine": 1500,
        "startChar": 0,
        "endLine": 1500,
        "endChar": 87
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3eff0dce_5b6d373a",
        "filename": "src/dawn/dawn.json",
        "patchSetId": 62
      },
      "lineNbr": 1500,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2013388_3ce8e57d",
      "range": {
        "startLine": 1500,
        "startChar": 0,
        "endLine": 1500,
        "endChar": 87
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcad996f_8799aea4",
        "filename": "src/dawn/dawn_wire.json",
        "patchSetId": 62
      },
      "lineNbr": 153,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:41:47Z",
      "side": 1,
      "message": "nit: These are Instance handles so we might as well call this member that? Maybe even handle_type it (The client::Instance would have a raw_ptr to its EventManager that lives in the client). Right now it is weird because it looks as if EventManager is a WebGPU object supported in the wire, but it\u0027s not.",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb4585aa_b21ae4b6",
        "filename": "src/dawn/dawn_wire.json",
        "patchSetId": 62
      },
      "lineNbr": 153,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Won\u0027t change in this CL, but can handle in a follow up!",
      "parentUuid": "dcad996f_8799aea4",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f87afb_2a7dc0d6",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 239,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-16T00:21:54Z",
      "side": 1,
      "message": "nit: The default callback should probably be AllowSpontaneous. Just a little easier for debugging because you can breakpoint in it.",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f90f16cc_8fc4ccde",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 239,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "I am hesitant to make it `AllowSpontaneous` by default because a common use-case right now is creating a device without passing a device lost callback, and then setting it after via `SetDeviceLostCallback`. Since the callback mode is effectively immutable for events atm, this would drastically change the behavior of the device lost callback in existing code.",
      "parentUuid": "b0f87afb_2a7dc0d6",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4c2e792_b9c07633",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 239,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-23T01:57:13Z",
      "side": 1,
      "message": "Good point. I think we should make it spontaneous when we remove SetDeviceLostCallback though, maybe a TODO? (if you don\u0027t have one - haven\u0027t reviewed the latest patchset)",
      "parentUuid": "f90f16cc_8fc4ccde",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "688cbe95_8d7ab453",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 239,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4c2e792_b9c07633",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99a39ce6_7eb2492b",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 275,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "same question: legacy code can use .deviceLostCallback; no need to have back compat for new deviceLostCallbackInfo path?",
      "range": {
        "startLine": 273,
        "startChar": 13,
        "endLine": 275,
        "endChar": 25
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce681386_46f85cbe",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 275,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99a39ce6_7eb2492b",
      "range": {
        "startLine": 273,
        "startChar": 13,
        "endLine": 275,
        "endChar": 25
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "857bfe2a_f8b96114",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 283,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-16T00:21:54Z",
      "side": 1,
      "message": "nit: Set `deviceLostCallbackInfo` in aggregate because IMO we want to initialize all fields here, not use any defaults from `kDefaultDeviceLostCallbackInfo` (especially with my other comment to change the default there).\n\n```suggestion\n        deviceLostCallbackInfo \u003d {\n            wgpu::CallbackMode::AllowProcessEvents,\n            descriptor-\u003edeviceLostCallback,\n            descriptor-\u003edeviceLostUserdata,\n        };\n```",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 283,
        "endChar": 73
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6cd01ee_606d949d",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 283,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "857bfe2a_f8b96114",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 283,
        "endChar": 73
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28a84340_f50dc9fc",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 292,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2024-03-15T01:22:27Z",
      "side": 1,
      "message": "nit: change to one member that is UncapturedErrorCallbackInfo ?",
      "range": {
        "startLine": 291,
        "startChar": 4,
        "endLine": 292,
        "endChar": 68
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e0a067f_395c0da3",
        "filename": "src/dawn/native/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 292,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28a84340_f50dc9fc",
      "range": {
        "startLine": 291,
        "startChar": 4,
        "endLine": 292,
        "endChar": 68
      },
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e103a8_30fc37e8",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 207,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:41:47Z",
      "side": 1,
      "message": "Is that a future change? We don\u0027t pass the device to the callback at the moment.",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "862acef0_44634358",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 207,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6e103a8_30fc37e8",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8352657_28b5c50a",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 256,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2024-03-16T00:21:54Z",
      "side": 1,
      "message": "This should also handle the deprecated API (I think Blink needs it).",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "266360bb_c028f013",
        "filename": "src/dawn/wire/client/Device.cpp",
        "patchSetId": 62
      },
      "lineNbr": 256,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8352657_28b5c50a",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f09dbb4b_4bcf12df",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 62
      },
      "lineNbr": 74,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-15T12:41:47Z",
      "side": 1,
      "message": "Would a DestroyImpl() like in dawn/native work? It would be marginally better instead of intercepting all the Release() calls.",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b33ff2b6_4da00da6",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 62
      },
      "lineNbr": 74,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-23T01:43:16Z",
      "side": 1,
      "message": "Gave this some thought, but I wasn\u0027t able to change this without introducing an internal and external ref count for the use case. Leaving this as is for now.",
      "parentUuid": "f09dbb4b_4bcf12df",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7b5b7b8_ca6358fa",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 62
      },
      "lineNbr": 74,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2024-03-25T16:22:48Z",
      "side": 1,
      "message": "Wouldn\u0027t that be easy to introduce by making a Reference/Release on Device() that shadows the ObjectBase:: methods (or is -Wshadow an issue here)? It seems like it would be much more efficient in general than a virtual method and simpler because there is no need to deal with reentrancy etc.",
      "parentUuid": "b33ff2b6_4da00da6",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f975b5ef_abb1037e",
        "filename": "src/dawn/wire/client/ObjectBase.h",
        "patchSetId": 62
      },
      "lineNbr": 74,
      "author": {
        "id": 1002831
      },
      "writtenOn": "2024-03-25T23:53:28Z",
      "side": 1,
      "message": "Done! Still needed to deal with some re-entrancy stuff but just made the base function return the ref count.",
      "parentUuid": "d7b5b7b8_ca6358fa",
      "revId": "850b241ecf00e370251b22a8d37e6d4b91adfbc1",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}