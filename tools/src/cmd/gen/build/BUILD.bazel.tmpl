{{- /* Only emit 'lib' targets for now */}}
{{- Eval "SourceSetIfNotEmpty" ($.Project.Target $ "lib")}}
{{- Eval "SourceSetIfNotEmpty" ($.Project.Target $ "test")}}
{{- Eval "SourceSetIfNotEmpty" ($.Project.Target $ "bench")}}
{{- Eval "SourceSetIfNotEmpty" ($.Project.Target $ "cmd")}}
{{- Eval "SourceSetIfNotEmpty" ($.Project.Target $ "test_cmd")}}
{{- Eval "SourceSetIfNotEmpty" ($.Project.Target $ "bench_cmd")}}


{{- /*
--------------------------------------------------------------------------------
-- Emits a GN source set if it contains any files
--------------------------------------------------------------------------------
*/ -}}
{{- define "SourceSetIfNotEmpty"}}
{{-   if $}}
{{-     if len $.SourceFiles}}{{Eval "SourceSet" $}}{{end}}
{{-   end}}
{{- end}}


{{- /*
--------------------------------------------------------------------------------
-- Emits a GN source set
--------------------------------------------------------------------------------
*/ -}}
{{- define "SourceSet"}}
{{- $Conditionals := $.Conditionals}}
{{- if      eq $.Kind "lib" -}}
cc_library(
  name = "{{$.Directory.Name}}",
{{- else if eq $.Kind "test" -}}
cc_library(
  name = "test",
{{- else if eq $.Kind "bench" -}}
cc_library(
  name = "bench",
{{- else if eq $.Kind "cmd" -}}
cc_binary(
  name = "cmd",
{{- else if eq $.Kind "test_cmd" -}}
cc_binary(
  name = "test_cmd",
{{- else if eq $.Kind "bench_cmd" -}}
cc_binary(
  name = "bench_cmd",
{{- end}}
  srcs = [
{{-   range $File := $.UnconditionalSourceFiles}}
{{-     if or (ne $.Kind "lib") (HasSuffix $File.Name ".cc")}}
    "{{TrimPrefix $File.Name $.Directory.Path}}",
{{-     end}}
{{-   end}}
  ]
{{-   if $Conditionals.HasSourceFiles}} + select({
{{-     range $Cond := $Conditionals}}
{{-       if $Cond.SourceFiles}}
    "{{Eval "Expression" $Cond.Condition}}": [
{{-         range $File := $Cond.SourceFiles}}
      "{{TrimPrefix $File.Name $.Directory.Path}}",
{{-         end}}
    ],
{{-       end}}
{{-     end}}
    "//conditions:default": [],
  })
{{-   end}},
{{- if eq $.Kind "lib"}}
  hdrs = [
{{-   range $File := $.UnconditionalSourceFiles}}
{{-     if not (HasSuffix $File.Name ".cc")}}
    "{{TrimPrefix $File.Name $.Directory.Path}}",
{{-     end}}
{{-   end}}
  ],
{{-   end}}
  deps = [
{{- /* Emit unconditional internal dependencies */}}
{{-   range $Dep := $.Dependencies.UnconditionalInternal}}
    "{{Eval "Dependency" $Dep}}",
{{-   end}}

{{- /* Emit unconditional external dependencies */}}
{{-   range $Dep := $.Dependencies.UnconditionalExternal}}
    "{{Eval "ExternalDependencyTarget" $Dep}}",
{{-   end}}
  ],
  copts = [
    "-fno-rtti",
    "-fno-exceptions",
    "--std=c++17",
  ],
  visibility = ["//visibility:public"],
)
{{/* newline */}}
{{/* newline */}}
{{- end}}


{{- /*
--------------------------------------------------------------------------------
-- Emits a dependency target name
--------------------------------------------------------------------------------
*/ -}}
{{- define "Dependency" -}}
{{-   if      eq $.Kind "lib" -}}
//src/tint/{{$.Directory.Path}}
{{-   else if eq $.Kind "test" -}}
//src/tint/{{$.Directory.Path}}:test
{{-   else if eq $.Kind "bench" -}}
//src/tint/{{$.Directory.Path}}:bench
{{-   else if eq $.Kind "cmd" -}}
//src/tint/{{$.Directory.Path}}:cmd
{{-   else if eq $.Kind "test_cmd" -}}
//src/tint/{{$.Directory.Path}}:test_cmd
{{-   else if eq $.Kind "bench_cmd" -}}
//src/tint/{{$.Directory.Path}}:bench_cmd
{{-   end}}
{{- end}}


{{- /*
--------------------------------------------------------------------------------
-- Emits a condition expression used in a select()
--------------------------------------------------------------------------------
*/ -}}
{{- define "Expression" -}}
{{- $C := $}}
{{- $C := Replace $C "!" "not_"}}
{{- $C := Replace $C "||" "or"}}
{{- $C := Replace $C "&&" "and"}}
{{- $C := Replace $C "(" ""}}
{{- $C := Replace $C ")" ""}}
{{- $C := Replace $C " " "_" -}}
//src/tint/utils/bazel:{{- $C}}
{{- end}}


{{- /*
--------------------------------------------------------------------------------
-- Emits an external dependency target name
-- External target names are declared in tools/src/cmd/gen/build/externals.json
--------------------------------------------------------------------------------
*/ -}}
{{- define "ExternalDependencyTarget"}}
{{-        if eq $.Name "abseil"             -}}@abseil_cpp//absl/strings
{{-   else if eq $.Name "spirv-tools"        -}}<unsupported>
{{-   else if eq $.Name "spirv-opt-internal" -}}@spirv_tools//:spirv_tools_opt
{{-   else if eq $.Name "spirv-headers"      -}}@spirv_headers//:spirv_c_headers
{{-   else if eq $.Name "glslang"            -}}<unsupported>
{{-   else if eq $.Name "glslang-res-limits" -}}<unsupported>
{{-   else if eq $.Name "gtest"              -}}@gtest
{{-   else if eq $.Name "gmock"              -}}
{{-   else                                   -}}{{Error (printf "unhandled external dependency '%v'" $.Name)}}
{{-   end}}
{{- end}}

