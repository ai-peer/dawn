{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc7ccb13_e4199b34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "Adding Rafael as a reviewer for usage of Windows APIs.\n\nThanks for the contribution! I added a lot of small comments, but nothing too major. Nice work! To help make progress faster, can we split this into three CLs?\n\n - Addition of UTF8ToWChar with tests (nothing for UWP)\n - Making Dawn build with UWP (but no swapchain)\n - Addition of swapchain code for UWP\u0027s CoreWindow / SwapChainPanel (via surface-based swapchains only).\n\nYou can do this by having three commits in your branch and `git push origin HEAD:refs/for/main` which Gerrit will create three code reviews for. Then when you need to make changes you can amend the commits, for example with `git rebase -i` and push again.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a18a1b74_8c258b10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T09:02:23Z",
      "side": 1,
      "message": "I also granted you rights to trigger the \"CQ (Commit Queue) dry-run\" to run Dawn\u0027s tests on your CL, and the ability to \"Submit to CQ\" once your CLs have been approved.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9310b2f_9a5e6ccb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Thanks for such detailed review. Such an honor to be able to participating this project. \nFirst time using Gerrit, still unclear about some rules here. Should I simply abandon this change and create other three commits for review after I fix the problem you mentioned ?",
      "parentUuid": "bc7ccb13_e4199b34",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "123fdd61_6405484c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T16:12:30Z",
      "side": 1,
      "message": "Heh no worries, Windows UWP support will help many people in the future!\n\nThe way reviews work in Gerrit is that you upload new version of a commit using the same `git push` command. Gerrit will recognize that a git commit is for a CL through the Change-Id: tag in the commit message. If you push a commit with the same Change-Id: as here (for example if you amend or git rebase -i) then it will recognize it and publish a new version.\n\nWhat you can do is have the following in your branch:\n\n - A commit for the conversion helper (new commit)\n - A reworked version of this commit (keep the Change-Id)\n - A commit for the swapchain stuff (new commit)\n\nIn general what we do is that we fix reviewer commits, and answer the thread with \"Done\". This way you can keep track of what\u0027s addressed and what still needs discussion.",
      "parentUuid": "d9310b2f_9a5e6ccb",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f61330ea_5ef3b007",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "123fdd61_6405484c",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e68a2fd_3bbe0fbc",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "[1]",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc2880e0_41cb1207",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-19T21:57:36Z",
      "side": 1,
      "message": "Please add a comment describing why this is needed.",
      "range": {
        "startLine": 65,
        "startChar": 61,
        "endLine": 65,
        "endChar": 82
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b05931f2_b3a4566a",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "UWP can only use d3d APIs. Other graphic APIs are not allowed.\nI\u0027ll add a comment here.",
      "parentUuid": "fc2880e0_41cb1207",
      "range": {
        "startLine": 65,
        "startChar": 61,
        "endLine": 65,
        "endChar": 82
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "194c6bb0_5e24d736",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "What do you think of declaring variables at the top of this file (at [1]?): is_win32 and is_winuwp so that we can avoid having the same `is_win \u0026\u0026 target_os !\u003d \"winduwp\"` repeatedly?",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64822a70_65a9ea0e",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "I can set a dawn_is_winuwp just like what angle does.",
      "parentUuid": "194c6bb0_5e24d736",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be6f29fd_b4d583aa",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T16:12:30Z",
      "side": 1,
      "message": "Sounds good.",
      "parentUuid": "64822a70_65a9ea0e",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9baf9819_00d88d06",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-19T21:57:36Z",
      "side": 1,
      "message": "Similarly here, please add a comment describing why this additional condition is necessary.",
      "range": {
        "startLine": 94,
        "startChar": 15,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6959ddda_d28eca85",
        "filename": "scripts/dawn_features.gni",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "glfw doesn\u0027t support UWP.\nI\u0027ll add a comment here.",
      "parentUuid": "9baf9819_00d88d06",
      "range": {
        "startLine": 94,
        "startChar": 15,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bccaae4_8e555e62",
        "filename": "src/common/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "Can we have a comment explaining what this does and why it is required?\n\nThe warning we should fix if possible and normally Dawn doesn\u0027t use exception, so why is it required here?",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97c64ef5_06bb3d8c",
        "filename": "src/common/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "You are right. \nI suppress this warning because PlacementAllocated.h has a operator new(size_t size, void* ptr) operator, but not having a matching delete operator. This triggered C4291 warning(Level 1) and stop the compiling. \n\nI\u0027ll add a matching delete operator in my next commit and remove this /wd4291 flag.",
      "parentUuid": "9bccaae4_8e555e62",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e08ca686_119c5275",
        "filename": "src/common/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T16:12:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "97c64ef5_06bb3d8c",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4600fd6_9dbccbd2",
        "filename": "src/common/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-19T21:57:36Z",
      "side": 1,
      "message": "+1 to adding a comment",
      "parentUuid": "e08ca686_119c5275",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33b82c77_8cf787da",
        "filename": "src/common/DynamicLib.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: Maybe we could have this added as a DAWN_PLATFORM_WIN32 / DAWN_PLATFORM_WINUWP to Platform.h since it is Platform detection.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d43ab872_28faab87",
        "filename": "src/common/DynamicLib.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33b82c77_8cf787da",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3abe2f69_78860273",
        "filename": "src/common/DynamicLib.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-19T21:57:36Z",
      "side": 1,
      "message": "Better yet, add this as a define in the .gn file based on the target_os.",
      "parentUuid": "d43ab872_28faab87",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9d65195_15d6566f",
        "filename": "src/common/DynamicLib.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3abe2f69_78860273",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87383248_24d9ead3",
        "filename": "src/common/DynamicLib.cpp",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: I think std::codecvt is deprecated. Instead we should add a UTF8ToWChar with tests similarly to this CL https://dawn-review.googlesource.com/c/dawn/+/44560\n\nThis can be a prep CL before the CL that adds UWP support.\n\nAlso I see trailing whitespaces in some files. You can run \"git cl format\" to format the code according to Dawn\u0027s convention.\n\nFinally is this needed given we link everything statically?",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b77f1a3a_73b75bfe",
        "filename": "src/common/DynamicLib.cpp",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "I\u0027ll make use of UTF8ToWChar and fix the format issue.\n\nReason of statically linking is explained in the reply of #312",
      "parentUuid": "87383248_24d9ead3",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "967f323f_ba57adb1",
        "filename": "src/dawn/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "ditto here and for dawn_proc, why are these required? If they turn out to be required, we should figure out how we can add them to a GN config so they aren\u0027t repeated in many places.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9af3caa_9cf642f2",
        "filename": "src/dawn/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Just getting started with GN, so maybe there are something I missed.\ndawncpp is just a source_set target and don\u0027t forward any configs from it\u0027s dependencies. So I have to add these flags for them again. I check the generated ninja file and there is only one \"/ZW /EHsc\" flags.\nBut dawn_proc is a dawn_component which will forward configs from it\u0027s dependencies, so it do have repeat \"/ZW /EHsc\" flags. I\u0027ll remove them in next commit.",
      "parentUuid": "967f323f_ba57adb1",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd3ed840_1490a494",
        "filename": "src/dawn/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T16:12:30Z",
      "side": 1,
      "message": "The ideal solution would be to not need /ZW /EHsc (I don\u0027t understand what it changes for Dawn since it is exception-free). Otherwise yeah dawn_proc and dawncpp don\u0027t depend on a shared header. Maybe we could have a dawn_basic_private_config in common/BUILD.gn? This isn\u0027t ideal but I don\u0027t see another solution.",
      "parentUuid": "e9af3caa_9cf642f2",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d5ebdd0_f3e7c96b",
        "filename": "src/dawn/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "Document here explains\nhttps://docs.microsoft.com/en-us/cpp/porting/how-to-use-existing-cpp-code-in-a-universal-windows-platform-app?view\u003dmsvc-160\n\"UWP Apps run in a protected environment. As a result, many Win32, COM, and CRT API calls that might compromise platform security aren\u0027t allowed. The /ZW compiler option can detect such calls and generate an error.\"\n\nAnd /ZW document says \n\"When you use /ZW to compile, always specify /EHsc as well.\"\nhttps://docs.microsoft.com/en-us/cpp/build/reference/zw-windows-runtime-compilation?view\u003dmsvc-160\n\nSo I add 2 flags as document suggest.\n\n/EHsc flags will be added from toolchain when target_os\u003d\"winuwp\" (build\\config\\win\\BUILD.gn) but I still add it, making every \"/ZW\" is paired with a \"/EHsc\" as document suggest.\n\nAdding a dawn_basic_private_config seems to be an viable options, but we should do more discussion about what exactly \"dawn_basic\" contains(all dawn_components + dawn_cpp + dawn_utils + dawn_proc ?). Maybe I should file a issue and do this in another CL ?\n\nFor now \"/ZW\" is just acting as a safeguard to make sure the components I want to use runs in a protected environment. So I think I still use /ZW in dawn_internal, dawn_proc, dawn_utils and dawn_cpp, until we clearly define what dawn_basic means and decide to use dawn_basic_private_config or figure out other solutions.",
      "parentUuid": "dd3ed840_1490a494",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddaf6c70_c6956896",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 312,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: Maybe explain why we need to link statically on UWP because I don\u0027t think other Dawn dev knows how UWP works.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e612eae0_8d87e189",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 312,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Linking statically is necessary because DLL search space is highly limited in UWP and d3d related DLLs can\u0027t be found in those locations. \nhttps://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order\nInstead linking with stub libs make sure current d3d DLLs can be loaded correctly in different versions of windows 10 and Xbox.\n\nI\u0027ll add the explanations in the message of next commit.",
      "parentUuid": "ddaf6c70_c6956896",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb41322c_7fecf057",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: Maybe // TODO(dawn:766): \u003cProblem\u003e. \u003cAction to take (could just be ifgure out how to XXX)\u003e\n\nDitto for the PIX comment.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "353e72ba_209d40a8",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bb41322c_7fecf057",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0dd5bed_97d78827",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 666,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: extra newline?",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff62675d_d0c4493f",
        "filename": "src/dawn_native/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 666,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack. I\u0027ll delete it",
      "parentUuid": "a0dd5bed_97d78827",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83731665_081d6857",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "Is the compile guard here because some UWP compilation environments don\u0027t have IsWindow? If that\u0027s the case, what do you think of gating this code path on DAWN_PLATFORM_WIN32 and force UWP to go through CoreWindow of SwapChainPanel?",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2512d125_9f28549d",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "What do you think of declaring a DAWN_PLATFORM_WINUWP in Platform.h ?\nDAWN_PLATFORM_WINDOWS and DAWN_PLATFORM_WINUWP both are set when targeting UWP.\nDAWN_PLATFORM_WINDOWS is defined and DAWN_PLATFORM_WINUWP is not, we enables HWND, CoreWindow and SwapChainPanel.\nif DAWN_PLATFORM_WINUWP is defined, only CoreWindow and SwapChainPanel are enabled.",
      "parentUuid": "83731665_081d6857",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e79be18_23738688",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T16:12:30Z",
      "side": 1,
      "message": "That would work too. I have a marginal preference for also having DAWN_PLATFORM_WIN32 as well so that the intent is a bit clearer and you don\u0027t have to think about what it means to be !UWP.",
      "parentUuid": "2512d125_9f28549d",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aed3e717_b6da490d",
        "filename": "src/dawn_native/Surface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "Sure. We may keep 3 macro here and define them like this.\n\n#if defined(_WIN32) || defined(_WIN64)\n#    define DAWN_PLATFORM_WINDOWS 1\n#    if WINAPI_FAMILY \u003d\u003d WINAPI_FAMILY_DESKTOP_APP\n#        define DAWN_PLATFORM_WIN32 1\n#    elif WINAPI_FAMILY \u003d\u003d WINAPI_FAMILY_PC_APP\n#        define DAWN_PLATFORM_WINUWP 1\n#    else\n#        error \"Unsupported Windows platform\"\n#    endif",
      "parentUuid": "7e79be18_23738688",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "481490fb_fadfbb9c",
        "filename": "src/dawn_native/d3d12/NativeSwapChainImplD3D12.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-19T21:57:36Z",
      "side": 1,
      "message": "Please use ComPtr for all IUnknown based pointers to avoid memory leaks.",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 57,
        "endChar": 40
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "170b1fda_29fa6f6a",
        "filename": "src/dawn_native/d3d12/NativeSwapChainImplD3D12.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T02:38:37Z",
      "side": 1,
      "message": "I use raw pointer for mCoreWindow here since it\u0027s provided by user. If we use ComPtr to wrap user\u0027s pointer we\u0027ll take control of the lifetime of user\u0027s object and may causing problem when user release it before calling Configure()\n(just like the mDevice and mWindow here).",
      "parentUuid": "481490fb_fadfbb9c",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 57,
        "endChar": 40
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec762746_0a85844f",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "Note: the duplication is a bit unfortunate, do you see a way to just change how we open mD3D12Lib so that the GetProc still work? This way when adding new functions to load we don\u0027t risk breaking the UWP path.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "499fb405_aa7e3074",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "I don\u0027t think there is a way to do this. UWP has such limited DLL search space. DLLs required by d3d are not in that search space. Statically linking makes sense since UWP can also run on Xbox, only those stub libs know how to load DLLs correctly.\nhttps://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order",
      "parentUuid": "ec762746_0a85844f",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9a8ebcd_d07905f3",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T16:12:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "499fb405_aa7e3074",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5bb3024_80ba4d20",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000262
      },
      "writtenOn": "2021-04-19T21:57:36Z",
      "side": 1,
      "message": "Can we use delay loading for both Win32 and UWP codepaths?",
      "parentUuid": "d9a8ebcd_d07905f3",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dadc991d_e17e0322",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-20T03:28:44Z",
      "side": 1,
      "message": "I don\u0027t know about delay loading before. I\u0027ll give a try and answer this later",
      "parentUuid": "a5bb3024_80ba4d20",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4899cc14_d517e780",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: TODO(dawn:XXX): ...",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "865d39d9_789b69a0",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4899cc14_d517e780",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac9dfeb_4f5f5955",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: Statically",
      "range": {
        "startLine": 177,
        "startChar": 11,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "822d30ce_d3c01c8a",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dac9dfeb_4f5f5955",
      "range": {
        "startLine": 177,
        "startChar": 11,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b19fef6_4e09fdd5",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "nit: TODO(dawn:XXX):",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5dc930e_bc29d536",
        "filename": "src/dawn_native/d3d12/PlatformFunctions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5b19fef6_4e09fdd5",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "906ca687_b00804b2",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "We are deprecating \"implementation based swapchains\" soon. Can we instead implement them through surface-based swapchains, and in a different CL after the CL that makes Dawn build on UWP?",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5769d451_a10f215b",
        "filename": "src/include/dawn_native/D3D12Backend.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "906ca687_b00804b2",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "185b54ab_ecc68e3b",
        "filename": "src/utils/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-04-19T08:58:08Z",
      "side": 1,
      "message": "I think this shouldn\u0027t be needed because dawn_utils depends on src/common that has a public_config for dawn_internal which adds these flags.",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8a9f88c_9ada9ebc",
        "filename": "src/utils/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1002576
      },
      "writtenOn": "2021-04-19T14:59:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "185b54ab_ecc68e3b",
      "revId": "60abdada3c7eca2a3c253f839b5bed2279b62b29",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}