{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3dd7ca2c_cb137ef3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-01T16:24:54Z",
      "side": 1,
      "message": "typo: subresource",
      "range": {
        "startLine": 16,
        "startChar": 16,
        "endLine": 16,
        "endChar": 25
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3a244ec_aee78c5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-01T22:41:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dd7ca2c_cb137ef3",
      "range": {
        "startLine": 16,
        "startChar": 16,
        "endLine": 16,
        "endChar": 25
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bc46000_6ff0c21e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-01T15:43:13Z",
      "side": 1,
      "message": "Per the discussions at https://dawn-review.googlesource.com/c/dawn/+/91480, PTAL. Thanks!",
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04d779a9_29567191",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-01T16:24:54Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9959728f_bd818361",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-01T17:47:24Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec03995_2cb82770",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-01T17:47:24Z",
      "side": 1,
      "message": "It\u0027s a bit of a mouthful for such a common utility no?\n\nGetSubresourcePhysicalSize(level(, soon aspect))?",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d3ca489_31470c58",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-01T22:41:57Z",
      "side": 1,
      "message": "Yeah, I agree the new name is a bit long. But it is clear. \n\nGetSingleSubresource*Size(level) is fine for me too if you prefer to that. However, parameter aspect is not necessary. Aspect info doesn\u0027t impact the dimensions of each subresource (it may impact the byteSize of each texel, though), you can look into the implementation of these two functions.",
      "parentUuid": "bec03995_2cb82770",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d6e67a_025c615d",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-06-02T02:35:58Z",
      "side": 1,
      "message": "I have no strong feelings about the length of the name, but FWIW I do think something like the naming I proposed reads more clearly.\n\n {Virtual|Physical}SizeForAllLayersAtMipLevel\n {Virtual|Physical}SizeForOneLayerAtMipLevel\n\nor\n\n {Virtual|Physical}MipSizeAllLayers\n {Virtual|Physical}MipSizeOneLayer\n\nif you want something shorter.\n\nAnd maybe you want to s/Layer/Subresource/, idk.",
      "parentUuid": "7d3ca489_31470c58",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0acfee_1dab5412",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-02T05:25:45Z",
      "side": 1,
      "message": "Ack.\nI feel like that we can use\n`\n{Virtual|Physical}SizeForOneLayerAtMipLevel\n`\nIt is clearer.\n\nWDYT, Corentin and Austin?\n\nBTW, the `ForAllLayers` counterpart is only called once (the only potential usage could be PhysicalSizeForAllLayersAtMipLevel() for texture copy validation from line 300 to 305 at https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn/native/CommandValidation.cpp#300), so I don\u0027t want to wrap a function for it.",
      "parentUuid": "99d6e67a_025c615d",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7de22c0b_f9176af3",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-02T17:20:33Z",
      "side": 1,
      "message": "I think the current name is fine. {Virtual|Physical}SingleSubresourceSize(level) is OK too.\n\nI prefer \"Subresource\" over \"layer\" because 3D texture depth slices IMO are different from \"layers\"",
      "parentUuid": "2a0acfee_1dab5412",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfb84280_4a713f23",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-02T17:47:49Z",
      "side": 1,
      "message": "OK. It looks like we don\u0027t have strong preferences and consensuses upon the new name. And the current change is fine. Then I am going to land this renaming patch as what it is.",
      "parentUuid": "7de22c0b_f9176af3",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83528f58_cef63295",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:05:19Z",
      "side": 1,
      "message": "I really hate to do this and be this guy. There is subjectivity in naming things, but this function name is objectively sub-par, and this whole interaction is problematic.\n\nFirst on semantic minimalism and the role of OWNERs/TLs\n\nA really important property to uphold when writing code in general, and in Dawn in particular, is to keep things minimalist semantically. This mean that code needs to be just as complex as it needs to be and no more, code should be written so as to not only be correct, but be easy to read and understand (this might mean not using intermediate variables, but sometimes it might mean having some) and of course the object graph and function spaghetti should be limited to what\u0027s strictly necessary. Implementation details shouldn\u0027t leak from behind clean interfaces etc.\n\nSemantic minimalism is what makes Dawn\u0027s code approachable and look like it is \"easy\" to implement WebGPU. We should not forget that it is not. Dawn codebase has been repeatedly praised as being easy to get into and work with because of this minimalism. Of course that notion is somewhat subjective, and that\u0027s where the role of OWNERs and TLs come. They have the responsibility to uphold this property through their subjective point of view. It is an advantage because they can ask for changes that should be done by default. But it is also a curse because (at least for me) it makes reviewing code 2x slower, produce a lot more comments and have more back and forth that can be emotionally draining (like this one). It doesn\u0027t make me happy that I have 20 comments and spend an hour reviewing a CL that\u0027s only 200 loc. But it\u0027s what\u0027s right for the project, and it is my job.\n\nThe role of contributors are to address comments. By default, unless there is a correctness problem, comments from OWNERs and TLs should be addressed without questions. Sometimes when contributing code I think something is better my way but what\u0027s most important is that it is coherent with the rest of the projects, and the OWNERs know that better. So just do it.\n\nAustin, as OWNER and TL of Dawn, you should start caring about this semantic minimalism. This CL is a small example (I\u0027ll explain below why it should have resolved to something else) but overall you should start reviewing code more critically to make sure it is coherent with the current codebase and only adds the necessary complexity (semantic or otherwise). It takes a lot of effort to do so, but it is better for everyone (and it gets a bit more efficient over time).\n\nSo why is this function name not great. `GetMipLevelSingleSubresourcePhysicalSize`\n\nWhen developers will read it, Single stands out. Are there methods to gets the size of all subresources? When is a subresource not single? A subresource singular so no need to say single. It is always what the WebGPU spec defines as subresource, and \"single\" is noise for reading and for the understanding.\n\n\"MipLevel\" is again noise. In most cases the call is `resource-\u003eGetMipLevelSingleSubresourcePhysicalSize(desc-\u003emipLevel)`. The argument is clearly a mip level and a number there couldn\u0027t be anything else given the WebGPU definition of subresource. So \"miplevel\" is noise. The function will also later have to be extended to require an aspect as soon as we support copies or rendering for YUV textures. (because subresource size will depend on miplevel and aspect). So `GetMipLevelAndAspectSingleSubresourcePhysicalSize`? No, just `GetSubresourcePhysicalSize()`.\n\nThe general idea is that longer names aren\u0027t always better if they bring more context in the head of the developer reading the code. This is subjective but see the first section above.\n\nSo. This CL has been handled in a sub-par manner in multiple ways and we should know to do things better in the future. Since it is landed, no need to do a follow-up and we\u0027ll change the name when we add an aspect to it anyway.",
      "parentUuid": "dfb84280_4a713f23",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17cf0e61_b61f98e9",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-03T18:07:20Z",
      "side": 1,
      "message": "Other folks may have different opinions, but I don\u0027t like resource vs subresources (just a \"s\" for plural to represent multiple subresources) in function names for discrimination. The difference is too subtle/small. IIRC, Dawn has a lot such usages. \n\nI strongly defend {Single|One}Subresource or {Single|One}layer in names. Especially for this one where its third parameter of Extent3D is depthOrArrayLayers but we don\u0027t count array layers in its returned value. So the `single/one` together with subresource or layer is a very clear indication that array layers are not counted.\n\nRegarding potential parameter `aspect` (in addition to mipLevel), you mentioned twice, I negated twice. But I didn\u0027t see any further explanation why it is needed. I would like to say this again: Aspect info is only useful for depth/stencil formats, which are not compressed formats. So I feel like aspect info (which impact byteSize of each texel) doesn\u0027t impact the returned Extent3D and we don\u0027t need aspect in future. I am not 100% sure though.\n\nSo, why we need to add aspect info? You mentioned the potential addition of aspect, again.",
      "parentUuid": "83528f58_cef63295",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "048430a8_7e79b088",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-03T18:09:07Z",
      "side": 1,
      "message": "sorry, I meant to say \"subresource vs subresources\" in functions names.",
      "parentUuid": "17cf0e61_b61f98e9",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c47658ca_402c3f4b",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-06T08:45:06Z",
      "side": 1,
      "message": "I think you missed the overall point of this comment which was that I expect all people on this review to handle things better. The important part of the comment are the first two thirds, the last third about naming is to better explain rationale. I explicitly said we can keep this name as is as it is merged now and will be changed in the future anyways\n\n\u003e Regarding potential parameter  aspect  (in addition to mipLevel), you mentioned twice, I negated twice. But I didn\u0027t see any further explanation why it is needed.\n\n\u003e The function will also later have to be extended to require an aspect as soon as we support copies or rendering for YUV textures. (because subresource size will depend on miplevel and aspect)\n\nThis is because the UV plane of YUV texture with formats R8GB8Biplanar420Unorm are a quarter the size of the Y plane of the same texture (w/2 and h/2).",
      "parentUuid": "048430a8_7e79b088",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fddafcb0_2ed78455",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-06T23:45:56Z",
      "side": 1,
      "message": "Thank you Corentin for the explanation about this new YUV format, which falls into my expectation that the only possibility is that some brand new formats like YUV are added into WebGPU in future. And such an addition will lead to more significant change(s) because subresources will have one more factor (plane) in addition to MipLevel and ArrayLayer.\n\nFor code review, I really hate that reviewers have different opinions and I don\u0027t know which one to follow. And I really hate reviewer(s) strongly recommend an alternative change that will waste my time but doesn\u0027t improve the project (in which either way is OK, and the code is ready for one way, but the reviewer strongly suggest the other way). However, I don\u0027t think there is a good and simple solution for those situations. I totally understand that perf improvement, code quality, simplicity, readability, robustness/security and other merits of a project are very critical. But different people have different opinions about pros and cons for different changes/solutions/fixes. Compromising a little bit and respecting other owners and long-time contributors are also important for keeping the morale and momentum for a project. I really don\u0027t like an authoritative leader who think his own solution is always the best (Personally, I even moved from China to the US, 😄).\n\nRegarding respect and recognition contributions from other folks, I think of another problem and I have a suggestion. Taking myself as an example, I think I definitely feel good if I am cc-ed for some changes I contributed a lot before for that issue. I could feel a little bit being neglected otherwise. Two recent examples are https://dawn-review.googlesource.com/c/dawn/+/90665 and https://chromium-review.googlesource.com/c/chromium/src/+/3677015. The first one removed passing tests because of my fix (The first one pointed to a wrong issue), and it even led to bots failure and I clearly knew that consequence if I was cc-ed on. For the second one, we discussed the follow-up before and I kept that in mind. But I only got notifications after those patches were landed because I stared the issues. Well, I totally understand that you are busy and you are owners of the project, but it doesn\u0027t cost you too much time at all if you do remember that who significantly contributed to those issues and add that guy into cc list. If you forgot who worked on that issue before, it\u0027s absolutely fine. But I think I am extremely rarely being cc-ed on a follow-up patch from Dawn Google folks even I worked on that issue for quite a while. The two examples are from Corentin, but this situation definitely is not limited to Corentin. This is my personal feeling and suggestion, but I think other folks may share the same feeling because every average person feels good if being respected and feels bad if being neglected. We are people, not machines. Well, this is just a suggestion, but don\u0027t misunderstand me, WebGPU/Dawn project runs very well by you folks. I am more than happy to collaborate with Google folks for various projects (from Mike Reed/Brian Salomon for Skia, to Ken/Brandon/Mo for WebGL, to Jamie/Geoff for ANGLE, to you folks for WebGPU). It just can be operated even better. 😊",
      "parentUuid": "c47658ca_402c3f4b",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2061edc3_94033f42",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-07T14:54:42Z",
      "side": 1,
      "message": "Everyone, I\u0027d like to apologize for the comment above. It was inappropriate, unprofessional and uncharacteristic. I am reflecting on reasons why I exploded like this and can find multiple, though none of that excuses that I wrote such a hurtful and dismissive comment.\n\nI\u0027m reflecting on this and will reach out to you all independently.\n\nBefore I answer your last comment Yunchao, I\u0027d like to point out things that are very wrong in what I commented above.\n\n\u003e The role of contributors are to address comments. By default, unless there is a correctness problem, comments from OWNERs and TLs should be addressed without questions.\n\nThis is an extreme statement and certainly not true. While OWNERs tend to the consistency of the code, there is a lot of subjectivity to it, and multiple good ways to solve each thing both at the architectural level and in the details of the code. A diversity of viewpoints helps identify the tradeoffs, which the projects better overall.\n\n\u003e Diatrib about semantic minimalism.\n\nWhile it is an interesting and reasonably important property, however the way I wrote it is really extreme and single-minded. There are a lot more tradeoffs there, especially as the project get contribute to by more people, gets running in the real world, etc.\n\n\u003e Austin, ...\n\nThis feedback was in an inappropriate place and not constructive at all. I reached out separately about it.\n\n\u003e So. This CL has been handled in a sub-par manner in multiple ways and we should know to do things better in the future\n\nCertainly I added to that statement by making this awful comment. I should have known better indeed.\n\n---\n\nYunchao, thank you for the constructive feedback as well in the face of this extreme comment. I would like to discuss ways to better work together in person as well. I\u0027ll reach out separately.\n\n\u003e For code review, I really hate that reviewers have different opinions and I don\u0027t know which one to follow.\n\nYeah this is definitely frustrating, and in this case since you had +2 it\u0027s fair to choose whichever comment you agree with most. If reviewers don\u0027t seem like they can agree then it is fair to ask them to come to agreement and then post the consensus.\n\n\u003e Compromising a little bit and respecting other owners and long-time contributors are also important for keeping the morale and momentum for a project.\n\nThis is a good reminder and I\u0027ve definitely been terrible at this on this CL.\n\n\u003e I really don\u0027t like an authoritative leader who think his own solution is always the best\n\nI\u0027ve been a bit too much this (and increasingly recently). I\u0027m still reflecting on why, but I think a large part may be due to various stress factors (pressure to ship, scaling of the project, sky-high expectations for WebGPU etc).\n\n\u003e Taking myself as an example, I think I definitely feel good if I am cc-ed for some changes I contributed a lot before for that issue.\n\nThanks for raising this. It makes complete sense, but at the same time I have never thought about it such concretely before. It is a great concrete improvement. Apologies I didn\u0027t do it before in the CLs and I\u0027ll strive to make it better in the future.\n\nOverall I would LOVE to be able to have a better sense of community between all contributors to Dawn. I was hoping that the Slack channel would help for this, but it\u0027s been very silent. Maybe the Matrix channel could be this? I don\u0027t know if Intel Shanghai folks would be able to access it. The webgpu-weekly worked a bit but were additional overhead and didn\u0027t spin discussions. Happy to take any suggestions for this, and I\u0027ll think about it separately as well.",
      "parentUuid": "fddafcb0_2ed78455",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbd55709_99d667b4",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-07T18:08:54Z",
      "side": 1,
      "message": "Corentin, I really appreciate your understanding and your considerate feedback for my straightforward comments. I myself was very direct and forthright too. I also apologize for that if it hurt anyone. I think everyone understand that we all intend to improve the Dawn project and WebGPU community, not deliberately hurt anyone, nor try to win a quarrel unilaterally. \n\nRegarding a better channel for collaborations and discussions on WebGPU/Dawn, I don\u0027t have a good idea. Maybe it is very hard by nature considering that the collaboration is cross multiple companies and multiple geolocations and quite different time zones. And you folks have already made a lot of efforts on that and I also appreciate for that.",
      "parentUuid": "2061edc3_94033f42",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}