{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3dd7ca2c_cb137ef3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-01T16:24:54Z",
      "side": 1,
      "message": "typo: subresource",
      "range": {
        "startLine": 16,
        "startChar": 16,
        "endLine": 16,
        "endChar": 25
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3a244ec_aee78c5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-01T22:41:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dd7ca2c_cb137ef3",
      "range": {
        "startLine": 16,
        "startChar": 16,
        "endLine": 16,
        "endChar": 25
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bc46000_6ff0c21e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-01T15:43:13Z",
      "side": 1,
      "message": "Per the discussions at https://dawn-review.googlesource.com/c/dawn/+/91480, PTAL. Thanks!",
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04d779a9_29567191",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-01T16:24:54Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9959728f_bd818361",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-01T17:47:24Z",
      "side": 1,
      "message": "LGTM too",
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec03995_2cb82770",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-01T17:47:24Z",
      "side": 1,
      "message": "It\u0027s a bit of a mouthful for such a common utility no?\n\nGetSubresourcePhysicalSize(level(, soon aspect))?",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d3ca489_31470c58",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-01T22:41:57Z",
      "side": 1,
      "message": "Yeah, I agree the new name is a bit long. But it is clear. \n\nGetSingleSubresource*Size(level) is fine for me too if you prefer to that. However, parameter aspect is not necessary. Aspect info doesn\u0027t impact the dimensions of each subresource (it may impact the byteSize of each texel, though), you can look into the implementation of these two functions.",
      "parentUuid": "bec03995_2cb82770",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d6e67a_025c615d",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-06-02T02:35:58Z",
      "side": 1,
      "message": "I have no strong feelings about the length of the name, but FWIW I do think something like the naming I proposed reads more clearly.\n\n {Virtual|Physical}SizeForAllLayersAtMipLevel\n {Virtual|Physical}SizeForOneLayerAtMipLevel\n\nor\n\n {Virtual|Physical}MipSizeAllLayers\n {Virtual|Physical}MipSizeOneLayer\n\nif you want something shorter.\n\nAnd maybe you want to s/Layer/Subresource/, idk.",
      "parentUuid": "7d3ca489_31470c58",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0acfee_1dab5412",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-02T05:25:45Z",
      "side": 1,
      "message": "Ack.\nI feel like that we can use\n`\n{Virtual|Physical}SizeForOneLayerAtMipLevel\n`\nIt is clearer.\n\nWDYT, Corentin and Austin?\n\nBTW, the `ForAllLayers` counterpart is only called once (the only potential usage could be PhysicalSizeForAllLayersAtMipLevel() for texture copy validation from line 300 to 305 at https://dawn.googlesource.com/dawn/+/refs/heads/main/src/dawn/native/CommandValidation.cpp#300), so I don\u0027t want to wrap a function for it.",
      "parentUuid": "99d6e67a_025c615d",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7de22c0b_f9176af3",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2022-06-02T17:20:33Z",
      "side": 1,
      "message": "I think the current name is fine. {Virtual|Physical}SingleSubresourceSize(level) is OK too.\n\nI prefer \"Subresource\" over \"layer\" because 3D texture depth slices IMO are different from \"layers\"",
      "parentUuid": "2a0acfee_1dab5412",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfb84280_4a713f23",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2022-06-02T17:47:49Z",
      "side": 1,
      "message": "OK. It looks like we don\u0027t have strong preferences and consensuses upon the new name. And the current change is fine. Then I am going to land this renaming patch as what it is.",
      "parentUuid": "7de22c0b_f9176af3",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83528f58_cef63295",
        "filename": "src/dawn/native/CommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-06-03T12:05:19Z",
      "side": 1,
      "message": "I really hate to do this and be this guy. There is subjectivity in naming things, but this function name is objectively sub-par, and this whole interaction is problematic.\n\nFirst on semantic minimalism and the role of OWNERs/TLs\n\nA really important property to uphold when writing code in general, and in Dawn in particular, is to keep things minimalist semantically. This mean that code needs to be just as complex as it needs to be and no more, code should be written so as to not only be correct, but be easy to read and understand (this might mean not using intermediate variables, but sometimes it might mean having some) and of course the object graph and function spaghetti should be limited to what\u0027s strictly necessary. Implementation details shouldn\u0027t leak from behind clean interfaces etc.\n\nSemantic minimalism is what makes Dawn\u0027s code approachable and look like it is \"easy\" to implement WebGPU. We should not forget that it is not. Dawn codebase has been repeatedly praised as being easy to get into and work with because of this minimalism. Of course that notion is somewhat subjective, and that\u0027s where the role of OWNERs and TLs come. They have the responsibility to uphold this property through their subjective point of view. It is an advantage because they can ask for changes that should be done by default. But it is also a curse because (at least for me) it makes reviewing code 2x slower, produce a lot more comments and have more back and forth that can be emotionally draining (like this one). It doesn\u0027t make me happy that I have 20 comments and spend an hour reviewing a CL that\u0027s only 200 loc. But it\u0027s what\u0027s right for the project, and it is my job.\n\nThe role of contributors are to address comments. By default, unless there is a correctness problem, comments from OWNERs and TLs should be addressed without questions. Sometimes when contributing code I think something is better my way but what\u0027s most important is that it is coherent with the rest of the projects, and the OWNERs know that better. So just do it.\n\nAustin, as OWNER and TL of Dawn, you should start caring about this semantic minimalism. This CL is a small example (I\u0027ll explain below why it should have resolved to something else) but overall you should start reviewing code more critically to make sure it is coherent with the current codebase and only adds the necessary complexity (semantic or otherwise). It takes a lot of effort to do so, but it is better for everyone (and it gets a bit more efficient over time).\n\nSo why is this function name not great. `GetMipLevelSingleSubresourcePhysicalSize`\n\nWhen developers will read it, Single stands out. Are there methods to gets the size of all subresources? When is a subresource not single? A subresource singular so no need to say single. It is always what the WebGPU spec defines as subresource, and \"single\" is noise for reading and for the understanding.\n\n\"MipLevel\" is again noise. In most cases the call is `resource-\u003eGetMipLevelSingleSubresourcePhysicalSize(desc-\u003emipLevel)`. The argument is clearly a mip level and a number there couldn\u0027t be anything else given the WebGPU definition of subresource. So \"miplevel\" is noise. The function will also later have to be extended to require an aspect as soon as we support copies or rendering for YUV textures. (because subresource size will depend on miplevel and aspect). So `GetMipLevelAndAspectSingleSubresourcePhysicalSize`? No, just `GetSubresourcePhysicalSize()`.\n\nThe general idea is that longer names aren\u0027t always better if they bring more context in the head of the developer reading the code. This is subjective but see the first section above.\n\nSo. This CL has been handled in a sub-par manner in multiple ways and we should know to do things better in the future. Since it is landed, no need to do a follow-up and we\u0027ll change the name when we add an aspect to it anyway.",
      "parentUuid": "dfb84280_4a713f23",
      "range": {
        "startLine": 76,
        "startChar": 31,
        "endLine": 76,
        "endChar": 71
      },
      "revId": "b054326d0dd7ffb0f5b5a263df06d6f74a629e0e",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}