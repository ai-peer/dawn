{
  "comments": [
    {
      "key": {
        "uuid": "ec474691_3ee0f92a",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 676,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-20T21:39:10Z",
      "side": 1,
      "message": "the queue transfer here only applies to the specified subresource range.\n\nThat means if we import an external texture, copy into one subresource (which will do the transfer), and then copy into a second subresource, we\u0027ll miss doing the queue transfer for the second resource because we\u0027ve changed |mExternalState| to Acquired.\n\nThat being said.. I don\u0027t think it\u0027s possible for us to have multi-subresource external images. So we can add a comment about it here and also ASSERT that levelCount and layerCount are 1.",
      "range": {
        "startLine": 673,
        "startChar": 8,
        "endLine": 676,
        "endChar": 91
      },
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4746f3bb_c8dcf23e",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 676,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2020-05-20T22:21:39Z",
      "side": 1,
      "message": "I don\u0027t understand here. I moved the code snippet which change \"mExternalState\" outside of the \"if\" here (because this function might be called multiple times from its caller via \"for\" loop). And \"mExternalState\" will be assigned outside of this \"if\" (in the caller function TransistionSubresourceUsageNow and TransitionUsageNow). Do you mean we need to move them back like the original code? \n\nBTW, levelCount and layerCount are not 1 sometimes. If we add ASSERT, it will fail.",
      "parentUuid": "ec474691_3ee0f92a",
      "range": {
        "startLine": 673,
        "startChar": 8,
        "endLine": 676,
        "endChar": 91
      },
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3336f9e_4dae3aa2",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 745,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-20T21:39:10Z",
      "side": 1,
      "message": "Why do we assign to |mLastUsage| here? It seems like this path happens when the the subresource range is unspecified and those arguments default to 0. If that happens then it looks like we\u0027re setting the entire usage to the usage of the first subresource",
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d7f0d93_60520eb3",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 745,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2020-05-20T22:21:39Z",
      "side": 1,
      "message": "Not really. Consider this situation, we have mixed usages for a texture\u0027s subresources. Then mLastUsage will be a mixed one (like SampledTexture \u0026 OutputAttachment), but we may access a part of the texture\u0027s subresource(s) later (say SampledTexture only), then we don\u0027t need to use the mixed one (mLastUsage). However, mLastUsage is still useful when we do access the subresources with mixed usages altogether.",
      "parentUuid": "e3336f9e_4dae3aa2",
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f38f45b_7d90016e",
        "filename": "src/dawn_native/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 745,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2020-05-21T06:51:03Z",
      "side": 1,
      "message": "re-think about this. If the usages of texture\u0027s subresource are mixed, mLastUsage will be useless. But the usage of the first level/slice in the coming subresource is not correct either. The coming subresource may have mixed usages too. \n\nThe solution is that mLastUsage for the entire texture is not useful at all, we need to re-calculate it for the particular subresource for each transition. I updated the code. \n\nWe may need to add end2end tests because previous code can pass by chance: if the subresource has mixed usages, the code snippet here should fail.",
      "parentUuid": "7d7f0d93_60520eb3",
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "554ee1a4_443174b6",
        "filename": "src/dawn_native/vulkan/TextureVk.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000032
      },
      "writtenOn": "2020-05-20T21:39:10Z",
      "side": 1,
      "message": "What do the defaults of 0 mean? Does it mean \"all\" ? I think it would be better to have two overloads. One which does all, and one which does a subresource range. The one that does all can then simply call the subresource range version with all subresources.",
      "range": {
        "startLine": 75,
        "startChar": 32,
        "endLine": 78,
        "endChar": 55
      },
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1797320_c8025374",
        "filename": "src/dawn_native/vulkan/TextureVk.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2020-05-20T22:21:39Z",
      "side": 1,
      "message": "Yes. \"0\" (default value) means \"all\". What do you mean two overloads? Do you mean TransitionUsageNow itself? (Currently TransitionUsageNow and TransitionSubresourceUsageNow are two overloads: the former is used to handle single or multiple miplevels/arraylayers with one SINGLE usage. It is used by non-pass operations like clear and copy in command buffer. The later is used to handle resource with multiple usages (maybe only one usage). It is used by pass (include all bindings in pass, render target in pass, etc. mixed together). Maybe I can remove the default values from callers. I will have a try.",
      "parentUuid": "554ee1a4_443174b6",
      "range": {
        "startLine": 75,
        "startChar": 32,
        "endLine": 78,
        "endChar": 55
      },
      "revId": "d8f23b3afaf823fb9ecbdbf8d7d0e69d706f4c32",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd",
      "unresolved": true
    }
  ]
}