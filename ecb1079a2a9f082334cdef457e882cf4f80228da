{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e981403e_a53c5386",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-12-20T22:53:20Z",
      "side": 1,
      "message": "I also tested the new E2E test on `win-dawn-rel` without the fix to make sure it fails:\nhttps://ci.chromium.org/ui/p/chromium/builders/try/win-dawn-rel/29498/overview",
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b69e552e_d7ead2f3",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2225,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-12-21T16:04:22Z",
      "side": 1,
      "message": "It\u0027s not clear what purpose adding these small epsilons serve.\nAre they needed to bias just a bit to hit the integer target in the expected results?\n\nIf that\u0027s the case, then it\u0027s better to test against ranges of the result. See below.\n\nOr, if you want no-integer values for floats, I always suggest using epsilons that are exactly representable in floating point, e.g.     inverses of powers of two or small  multiples of them.\n\nE.g.   2.5,  4.25, 8.125  \n\nWhat you have is ok.  But this is a habit of mine that I think/hope keeps me out of trouble.",
      "range": {
        "startLine": 2225,
        "startChar": 29,
        "endLine": 2225,
        "endChar": 32
      },
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5950dfdc_df976673",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2265,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-12-21T04:54:40Z",
      "side": 1,
      "message": "I\u0027m not sure I\u0027m reading this right.  Does this take into account the normalized device coordinates?  (That is the frag coord .x and .y   are the vertex shader pos.xy / .w\n\nSo the third triangle has coordinates at (0, -1/8), (1/16, 0), (1/8, -1/8)\nand in framebuffer coordinates    (32, 32-8)\u003d(32,24) (32+64/16, 32)\u003d(36,32)  (32+64/8, 32-64/8)\u003d(40,24).  So that last triangle doesn\u0027t cover  position (32,16) ?\n\nI\u0027d like to think this through and see a dump of the image.",
      "range": {
        "startLine": 2265,
        "startChar": 75,
        "endLine": 2265,
        "endChar": 81
      },
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86642e62_dad4a38b",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2265,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-12-21T14:18:29Z",
      "side": 1,
      "message": "The third triangle\u0027s coordinates are:\n```\nvec4f(-0.5,  0.0, 0.0, 8.1),\nvec4f( 0.0,  1.0, 0.0, 8.1),\nvec4f( 0.5,  0.0, 0.0, 8.1),\n```\nNote that I multiply the `xy` components by `pos.w` before returning them, so that the implicit division by `pos.w` produces the same `xy` values that are stored in the array.\n\nSo for that triangle, those three NDCs should produce the following framebuffer coordinates:\n```\n(-0.5*32 + 32, -0.0*32 + 32) \u003d (16, 32)\n( 0.0*32 + 32, -1.0*32 + 32) \u003d (32,  0)\n( 0.5*32 + 32, -0.0*32 + 32) \u003d (48, 32)\n```\nNote that the `y` components are negated here because framebuffer coordinates have the y-axis flipped compared to NDC.\n\nHope that helps?",
      "parentUuid": "5950dfdc_df976673",
      "range": {
        "startLine": 2265,
        "startChar": 75,
        "endLine": 2265,
        "endChar": 81
      },
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52149486_516635df",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2265,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-12-21T16:04:22Z",
      "side": 1,
      "message": "Heh. I made three errors:\n- I missed that multiply by .w\n- I had the NDC upside down\n- I drew the second triangle upside down, w.r.t. that second error.\n\nMuch clearer now.",
      "parentUuid": "86642e62_dad4a38b",
      "range": {
        "startLine": 2265,
        "startChar": 75,
        "endLine": 2265,
        "endChar": 81
      },
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf84b683_4a0e7d65",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2265,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-12-21T16:04:22Z",
      "side": 1,
      "message": "I\u0027m concerned about non-portability of the float divide.\nI suggest using EXPECT_PIXEL_RGBA8_BETWEEN  with decent ranges around the expected red value e.g.     [124,127],  [60,66], [28,34]",
      "range": {
        "startLine": 2265,
        "startChar": 39,
        "endLine": 2265,
        "endChar": 41
      },
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b29f683_543d07ba",
        "filename": "src/dawn/tests/end2end/ShaderTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2265,
      "author": {
        "id": 1002241
      },
      "writtenOn": "2023-12-21T17:49:49Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "bf84b683_4a0e7d65",
      "range": {
        "startLine": 2265,
        "startChar": 39,
        "endLine": 2265,
        "endChar": 41
      },
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5050ec8e_1d09a716",
        "filename": "src/tint/lang/wgsl/ast/transform/canonicalize_entry_point_io.cc",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-12-21T04:57:07Z",
      "side": 1,
      "message": "All this is so much nicer than I expected, because it\u0027s in the sweet spot.",
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db8120e3_f9b4c3e4",
        "filename": "src/tint/lang/wgsl/ast/transform/canonicalize_entry_point_io.cc",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1000033
      },
      "writtenOn": "2023-12-21T16:04:22Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5050ec8e_1d09a716",
      "revId": "ecb1079a2a9f082334cdef457e882cf4f80228da",
      "serverId": "dd02978d-1a8e-36d7-bcc0-a5723e5c0abd"
    }
  ]
}